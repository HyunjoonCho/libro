public void testWriting7zEmptyEntriesProducesIncorrectOrCorruptArchive() {
    File folder = new File("testFolder");
    folder.mkdir();
    for (int i = 0; i < 7; i++) {
        File file = new File(folder, "emptyFile" + i);
        file.createNewFile();
    }
    // Test scenario 1: 7 empty files
    File archive = new File("testArchive.7z");
    SevenZipArchiveUtils.createArchive(folder, archive);
    assertEquals("testFolder", archive.getName());
    
    // Test scenario 2: 7 files, some empty, some with content
    File fileWithContent = new File(folder, "notEmptyFile");
    fileWithContent.createNewFile();
    SevenZipArchiveUtils.createArchive(folder, archive);
    assertEquals("testFolder", archive.getName());
    assertEquals("notEmptyFile", archive.getName());
    
    // Test scenario 3: 8 empty files
    for (int i = 0; i < 8; i++) {
        File file = new File(folder, "emptyFile" + i);
        file.createNewFile();
    }
    try {
        SevenZipArchiveUtils.createArchive(folder, archive);
        fail("Expected exception");
    } catch (Exception e) {
        // Expected exception
    }
    
    // Test scenario 4.1: 8 files, some empty, some with content, last file with content
    fileWithContent.delete();
    for (int i = 0; i < 8; i++) {
        File file = new File(folder, "file" + i);
        if (i == 7) {
            file.createNewFile();
        } else {
            file.delete();
        }
    }
    SevenZipArchiveUtils.createArchive(folder, archive);
    assertEquals("testFolder", archive.getName());
    
    // Test scenario 4.2: 8 files, some empty, some with content, last file empty
    fileWithContent = new File(folder, "file7");
    fileWithContent.delete();
    for (int i = 0; i < 8; i++) {
        File file = new File(folder, "file" + i);
        if (i == 7) {
            file.delete();
        } else {
            file.createNewFile();
        }
    }
    try {
        SevenZipArchiveUtils.createArchive(folder, archive);
        fail("Expected exception");
    } catch (Exception e) {
        // Expected exception
    }
}