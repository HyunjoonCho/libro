java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.exceptions.verification.WantedButNotInvokedException;
import org.mockito.stubbing.Answer;
import org.mockito.stubbing.Stubber;

import static org.junit.Assert.fail;
import static org.mockito.Mockito.doThrow;
import static org.mockito.Mockito.when;
import static org.mockito.MockitoAnnotations.initMocks;

@RunWith(MockitoJUnitRunner.class)
public class ExceptionWhenStubbingMoreThanOnceTest {

    @Mock
    private Object o;

    @Test
    public void testThrowException() {
        initMocks(this);

        // test behavior with Runtime exception
        when(o.toString()).thenThrow(new RuntimeException());

        try {
            // test behavior with another exception
            when(o.toString()).thenThrow(new IllegalArgumentException());
            fail("Expected RuntimeException, but no exception was thrown");
        } catch (RuntimeException e) {
            assertEquals(RuntimeException.class, e.getClass());
        } catch (IllegalArgumentException e) {
            fail("Expected RuntimeException, but IllegalArgumentException was thrown");
        }
    }
}
