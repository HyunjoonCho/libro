java
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {
    @Test
    public void testBrentOptimizer() {
        // Define a simple function for testing
        double function(double x) {
            return x * x;
        }

        // Create an instance of BrentOptimizer
        BrentOptimizer optimizer = new BrentOptimizer();
        optimizer.setTolerance(1e-6);

        // Define the search range
        double[] range = {0.0, 10.0};

        // Perform the optimization
        double[] initial = new double[] {1.0};
        double[] min = optimizer.minimize(function, initial, range);

        // Check that the last evaluated point is the best one
        double lastValue = optimizer.getLastValue();
        double lastPoint = optimizer.getLastPoint();
        double secondLastValue = optimizer.getSecondLastValue();
        double secondLastPoint = optimizer.getSecondLastPoint();

        // The last evaluated point should be the best one
        assertTrue(lastValue <= secondLastValue);
    }
}
