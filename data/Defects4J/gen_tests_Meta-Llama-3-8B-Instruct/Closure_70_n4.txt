
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSLevel;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

@RunWith(JUnit4.class)
public class UnexpectedTypedCoverageTest {

    @Test
    public void testTypedCoverage() throws IOException {
        // Create a JavaScript file
        String jsCode = "/*global window*/\n" +
                "/*jslint sub: true*/\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @param {!Element} element\n" +
                " */\n" +
                "function Example(element) {\n" +
                "  /**\n" +
                "   * @param {!string} ns\n" +
                "   * @param {!string} name\n" +
                "   * @return {undefined}\n" +
                "   */\n" +
                "  this.appendElement = function appendElement(ns, name) {\n" +
                "    var e = element.ownerDocument.createElementNS(ns, name);\n" +
                "    element.appendChild(e);\n" +
                "  };\n" +
                "}\n" +
                "window['Example'] = Example;";
        File jsFile = new File("v.js");
        FileWriter writer = new FileWriter(jsFile);
        writer.write(jsCode);
        writer.close();

        // Compile the JavaScript file
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilationLevel.SIMPLE_OPTIMIZATIONS);
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);
        options.setOutputFile("compiled.js");
        options.setWarningLevel(JSLevel.SILENT);
        compiler.compile(new File[]{jsFile}, options);

        // Check the output
        assertEquals(0, compiler.getErrorCount());
        assertEquals(0, compiler.getWarningCount());
        double typedCoverage = (double) compiler.getTypedCoverage() * 100;
        assertEquals(100, typedCoverage, 0.1);
    }
}
