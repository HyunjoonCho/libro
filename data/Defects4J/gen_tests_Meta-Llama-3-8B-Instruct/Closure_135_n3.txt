
describe('Issue with inheritance detection', function() {
  it('should detect inheritance when prototype is directly assigned', function() {
    function SuperClass() {}
    SuperClass.prototype.CustomMethod = function() {}

    function SubClass() {}
    SubClass.prototype = new SuperClass()

    SubClass.prototype.CustomMethod = function() {
      this.myProperty = "value"
    }

    var subClassInstance = new SubClass()
    expect(subClassInstance instanceof SuperClass).toBe(true)
    expect(subClassInstance.myProperty).toBe("value")
  })

  it('should not detect inheritance when prototype is assigned inside a function', function() {
    function SuperClass() {}
    SuperClass.prototype.CustomMethod = function() {}

    function SubClass() {}
    function inherit(Child, Parent) {
      Child.prototype = new Parent()
    }
    inherit(SubClass, SuperClass)

    SubClass.prototype.CustomMethod = function() {
      this.myProperty = "value"
    }

    var subClassInstance = new SubClass()
    expect(subClassInstance instanceof SuperClass).toBe(true)
    expect(subClassInstance.myProperty).toBe("value")
  })
})
