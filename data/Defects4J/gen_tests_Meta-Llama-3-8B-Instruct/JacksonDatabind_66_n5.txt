java
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class TestDeserializeType {

    @Test
    public void testNoTypeShouldDeserialize() throws IOException {
        String json = "{\"someMap\": {\"FOO\": \"bar\"}}";
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping();
        SuperType superType = mapper.readValue(json, SuperType.class);
        assertEquals("Deserialized someMap.FOO should equal bar", "bar", superType.getSomeMap().get(SuperTypeEnum.FOO));
    }

    @Test
    public void testNoTypeWithModuleShouldDeserialize() throws IOException {
        String json = "{\"someMap\": {\"FOO\": \"bar\"}}";
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule simpleModule = new SimpleModule();
        simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer<SuperTypeEnum>() {
            @Override
            public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)
                    throws IOException {

                return SuperTypeEnum.valueOf(jsonParser.getText());
            }
        });
        mapper.registerModule(simpleModule);
        mapper.enableDefaultTyping();
        SuperType superType = mapper.readValue(json, SuperType.class);
        assertEquals("Deserialized someMap.FOO should equal bar", "bar", superType.getSomeMap().get(SuperTypeEnum.FOO));
    }
}

@JsonTypeInfo(use = com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME, property = "@type", defaultImpl = SuperType.class)
public class SuperType {
    private Map<SuperTypeEnum, String> someMap;

    public Map<SuperTypeEnum, String> getSomeMap() {
        return someMap;
    }

    public void setSomeMap(Map<SuperTypeEnum, String> someMap) {
        this.someMap = someMap;
    }
}

public enum SuperTypeEnum {
    FOO
}
