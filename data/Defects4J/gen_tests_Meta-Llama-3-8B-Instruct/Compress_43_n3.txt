java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.zip.ZipArchiveOutputStream;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class ZipArchiveOutputStreamTest {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {true, true, 2}, // deflated, zip64
                {true, false, 2}, // deflated, no zip64
                {false, true, 2}, // not deflated, zip64
                {false, false, 0} // not deflated, no zip64
        });
    }

    private boolean phased;
    private boolean zip64;

    public ZipArchiveOutputStreamTest(boolean phased, boolean zip64) {
        this.phased = phased;
        this.zip64 = zip64;
    }

    @Test
    public void testVersionNeededToExtract() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(bos);
        // create a test entry
        zos.putNextEntry("test", "test".getBytes());
        zos.closeEntry();

        int expected = versionNeededToExtract(phased, zip64);
        int actual = zos.getLocalFileHeader().getVersionNeededToExtract();

        assertEquals(expected, actual);
    }

    private int versionNeededToExtract(boolean phased, boolean zip64) {
        if (zip64) {
            return ZIP64_MIN_VERSION;
        }
        if (phased &&!isZip64Required()) {
            return INITIAL_VERSION;
        }
        return (isDeflated())? DATA_DESCRIPTOR_MIN_VERSION : INITIAL_VERSION;
    }

    private boolean isDeflated() {
        // implement your logic to determine if the entry is deflated
        return true; // for example
    }

    private boolean isZip64Required() {
        // implement your logic to determine if zip64 is required
        return true; // for example
    }
}
