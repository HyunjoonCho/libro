
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.std.BeanDeserializerBase;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collections;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class TokenBufferDelegateDeserializationTest {
    @Mock
    private BeanDeserializer deserializer;

    @Before
    public void setup() {
        when(deserializer.getCreator()).thenReturn(new Value().from);
    }

    @Test
    public void testTokenBufferDelegateDeserialization() throws IOException {
        TypeReference<Value> typeReference = new TypeReference<Value>() {
        };
        TypeFactory typeFactory = new ObjectMapper().getTypeFactory();
        BeanDeserializerFactory beanDeserializerFactory = new BeanDeserializerFactory(typeFactory);
        BeanDeserializerBase beanDeserializer = beanDeserializerFactory.createBeanDeserializer(typeFactory.constructType(Value.class), deserializer);
        Value value = new Value();

        Writer writer = new StringWriter();
        beanDeserializer.deserialize(writer, new TokenBuffer(Collections.emptyList()));
        assertEquals("[START_OBJECT, FIELD_NAME, VALUE_NUMBER_INT, FIELD_NAME, VALUE_NULL, END_OBJECT]", writer.toString());
        assertNotNull(value);
    }
}
