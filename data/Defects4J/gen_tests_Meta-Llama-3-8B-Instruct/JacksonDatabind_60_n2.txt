java
public class TestJsonSerialization {

    private static final String JSON = "{\"args\":[[\"[B\",\"AKQEAAnw8fLz9AAAAgA=\"],\"net.sf.lipermi.call.RemoteInstance\",{\"instanceId\":\"b0e15098-f49e-4328-b072-fc5df42799bd\",\"className\":\"com.ubitricity.devices.common.tasks.ResponseReceiver\"}]}";

    private static final byte[] EXPECTED_APDU = {0x01, 0x02, 0x03, 0x04};

    @Test
    public void testJsonSerialization() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();

        CommandAPDU commandAPDU = new CommandAPDU(EXPECTED_APDU.clone());
        String json = mapper.writeValueAsString(commandAPDU);

        assertEquals(JSON, json);
    }

    @Test
    public void testJsonDeserialization() throws JsonParseException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();

        String json = JSON;
        CommandAPDU commandAPDU = mapper.readValue(json, CommandAPDU.class);

        byte[] apdu = commandAPDU.getBytes();
        assertArrayEquals(EXPECTED_APDU, apdu);
    }
}

class CommandAPDU {
    private byte[] apdu;

    @JsonValue
    public byte[] getBytes() {
        return apdu.clone();
    }

    @JsonCreator
    public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
        this.apdu = apdu.clone();
    }
}
