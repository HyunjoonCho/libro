java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.List;
import java.util.concurrent.Callable;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AbstractClassMockingTest {

    @Test
    public void testAbstractClassMocking() {
        // Example 1: Fake with trivial logic
        abstract class FakeUserAccount implements UserAccount {
            private final List<String> emails = new ArrayList<>();

            @Override
            public void addEmail(String email) {
                emails.add(email);
            }

            @Override
            public List<String> getEmails() {
                return ImmutableList.copyOf(emails);
            }
        }

        FakeUserAccount userAccount = Mockito.mock(FakeUserAccount.class);
        when(userAccount.getEmails()).thenReturn(List.of("email1", "email2"));
        assertEquals("email1", userAccount.getEmails().get(0));

        // Example 2: Callback-style API
        abstract class MockAccountService implements AccountService {
            @Override
            public void getAccount(String id, AsyncCallback<UserAccount> callback) {
                callback.onSuccess(getAccount(id));
            }

            abstract UserAccount getAccount(String id);
        }

        MockAccountService service = Mockito.mock(MockAccountService.class);
        when(service.getAccount("id")).thenReturn(new FakeUserAccount());
        assertEquals(new FakeUserAccount(), service.getAccount("id"));

        // Example 3: Uninteresting parameters
        abstract class MockAccountRpcService implements AccountRpcService {
            @Override
            public Future<Account> getAccount(RpcContext context, String id) {
                checkNotNull(context);  // Common sanity test. Don't have to repeat it in tests.
                return getAccount(id);
            }

            abstract Future<Account> getAccount(String id);
        }

        MockAccountRpcService accountRpcService = Mockito.mock(MockAccountRpcService.class);
        when(accountRpcService.getAccount("id")).thenReturn(Mockito.mock(Future.class));
        // You can then use the mocked service in your test
    }
}
