java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class RegulaFalsiSolverTest {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{{1.0, 10.0}, {2.0, 5.0}});
    }

    private double start;
    private double end;

    public RegulaFalsiSolverTest(double start, double end) {
        this.start = start;
        this.end = end;
    }

    @Test
    public void testBug() {
        final UnivariateRealFunction f = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateRealSolver solver = new RegulaFalsiSolver();
        try {
            double root = solver.solve(100, f, start, end);
            fail("Expected RegulaFalsiSolver to fail with 'illegal state: maximal count (100) exceeded: evaluations'");
        } catch (IllegalStateException e) {
            // Expected exception
        }
    }
}
