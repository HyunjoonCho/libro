java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitor;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonFormatVisitorContext;
import com.fasterxml.jackson.databind.jsonFormatVisitors.SimpleBeanPropertyWriter;
import com.fasterxml.jackson.databind.jsonFormatVisitors.SimpleValueInstantiator;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import com.fasterxml.jackson.databind.util.BeanPropertyMap;
import org.junit.Test;

import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class DateTimeSerializerBaseTest {

    @Test
    public void testDateTimeSerializerBase() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

        // Configure custom date format
        mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd"));

        // Serialize an object with a date field annotated with @JsonFormat
        MyObject obj = new MyObject(new Date());
        String json = mapper.writeValueAsString(obj);

        // Verify that the date is serialized in the custom format
        assertEquals("{\"date\":\"2022-07-25\"}", json);
    }

    public static class MyObject {
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
        private Date date;

        public MyObject(Date date) {
            this.date = date;
        }

        public Date getDate() {
            return date;
        }
    }
}
