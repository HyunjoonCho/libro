java
public void testExtraneousTypeMapping() {
    // Create a TypeResolver
    TypeResolver resolver = new TypeResolver();

    // Create a base type with a default name
    Type baseType = new Type("BaseType", new BaseType());

    // Create a derived type with an explicit name
    Type derivedType = new Type("DerivedType", new BaseType());

    // Add the base type to the resolver
    resolver.addType(baseType);

    // Add the derived type to the resolver
    resolver.addType(derivedType);

    // Check if the resolver has an extraneous mapping for the base type
    assertEquals(1, resolver.getTypeId("BaseType")); // This should return 1, the id of the base type
    assertEquals(2, resolver.getTypeId("DerivedType")); // This should return 2, the id of the derived type

    // Add the base type again with a different name
    resolver.addType(new Type("BaseType2", new BaseType()));

    // Check if the resolver still has an extraneous mapping for the base type
    assertEquals(1, resolver.getTypeId("BaseType")); // This should still return 1, the id of the base type
    assertEquals(2, resolver.getTypeId("DerivedType")); // This should still return 2, the id of the derived type

    // Add the base type again with a default name
    resolver.addType(new Type(new BaseType()));

    // Check if the resolver has an extraneous mapping for the base type
    assertEquals(3, resolver.getTypeId("BaseType")); // This should return 3, a new id for the base type
    assertEquals(2, resolver.getTypeId("DerivedType")); // This should still return 2, the id of the derived type
}
