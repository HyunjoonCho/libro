java
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertLessThan;
import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizer() throws Exception {
        // Assuming the function to optimize is f(x) = x^2
        final double[] start = new double[]{0};
        final double[] min = new double[]{0};
        final double[] max = new double[]{1};
        final double[] epsilon = new double[]{1e-9};
        final int maxeval = 100;

        BrentOptimizer optimizer = new BrentOptimizer();
        optimizer.optimize(new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.pow(x, 2);
            }
        }, start, min, max, epsilon, maxeval);

        double bestPoint = optimizer.getX();
        double bestValue = optimizer.getValue();

        // Check that the best point is indeed the best one
        double previousValue = Double.MAX_VALUE;
        for (int i = optimizer.getFunctionEvaluations() - 1; i >= 0; i--) {
            double x = optimizer.getPoints()[i];
            double value = optimizer.getValues()[i];
            if (value < bestValue) {
                bestValue = value;
                bestPoint = x;
            }
            assertTrue(bestValue <= value);
            assertLessThan(epsilon[0], bestValue - value);
        }

        // Check that the best point is not worse than the previous one
        for (int i = optimizer.getFunctionEvaluations() - 2; i >= 0; i--) {
            double x = optimizer.getPoints()[i];
            double value = optimizer.getValues()[i];
            assertTrue(value <= bestValue);
        }
    }
}
