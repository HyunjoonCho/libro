java
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.mockito.Mockito.when;

import static org.junit.Assert.*;
import static org.mockito.MockitoAnnotations.initMocks;

@RunWith(MockitoJUnitRunner.class)
public class TestClass {
    @Mock
    private ClassExtendsAbstractClass classExtendsAbstractClass;
    private A a;

    @Before
    public void before() {
        initMocks(this);
        when(classExtendsAbstractClass.give()).thenReturn("aaa");
    }

    @Test
    public void test() {
        a = new A(classExtendsAbstractClass);
        // This test should fail because Mockito is trying to mock the abstract method lol()
        fail("Test should fail because of wrong type of return value");
    }

    public static class A {
        private ClassExtendsAbstractClass classExtendsAbstractClass;

        public A(ClassExtendsAbstractClass classExtendsAbstractClass) {
            this.classExtendsAbstractClass = classExtendsAbstractClass;
        }

        public String doSomeThing() {
            classExtendsAbstractClass.give();
            return "give";
        }
    }

    public static abstract class AbstractClass {
        abstract protected Long lol();
        abstract protected String wow();
        public String give() {
            wow();
            lol();
            return "give";
        }
    }

    public static class ClassExtendsAbstractClass extends AbstractClass {
        @Override
        protected Long lol() {
            return 2L;
        }

        @Override
        protected String wow() {
            return "WOW";
        }
    }
}
