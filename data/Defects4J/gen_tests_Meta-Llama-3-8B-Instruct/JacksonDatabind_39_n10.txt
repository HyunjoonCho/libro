
public void testJacksonContinueParsingAfterFailOnInvalidSubtypeError() throws IOException {
    // Create an ObjectMapper with FAIL_ON_INVALID_SUBTYPE enabled
    ObjectMapper mapper = new ObjectMapper();
    mapper.enable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);

    // Create a CallRecord object
    CallRecord call = new CallRecord();
    call.item = new Event();
    call.application = "123";

    // Serialize the CallRecord to JSON
    String json = mapper.writeValueAsString(call);

    // Read the JSON back into a CallRecord object
    CallRecord deserializedCall = mapper.readValue(json, CallRecord.class);

    // Verify that the deserialization was successful and the object was populated correctly
    assertEquals(0.0, deserializedCall.version);
    assertEquals("123", deserializedCall.application);
    assertEquals(Event.class, deserializedCall.item.getClass());

    // Test that the parsing continues after FAIL_ON_INVALID_SUBTYPE error
    // Create a new JSON string with an invalid Item type
    json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xinvalid\",\"location\":\"location1\"}}";
    deserializedCall = mapper.readValue(json, CallRecord.class);

    // Verify that the deserialization was successful and the object was populated correctly
    assertEquals(0.0, deserializedCall.version);
    assertEquals("123", deserializedCall.application);
    assertEquals(Event.class, deserializedCall.item.getClass());
}
