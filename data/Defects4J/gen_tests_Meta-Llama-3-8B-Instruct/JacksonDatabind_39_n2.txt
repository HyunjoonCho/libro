java
public void testJacksonNotContinueToParseAfterDeserializationFeatureFailOnInvalidSubtypeError() throws IOException {
    // setup
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);
    objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
    objectMapper.disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    // test case 1: invalid item
    String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord call = objectMapper.readValue(json, CallRecord.class);
    assertEquals(0.0, call.version);
    assertEquals("123", call.application);
    assertNull(call.item2); // item2 is not read

    // test case 2: invalid order
    json = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, \"version\":0.0,\"application\":\"123\"}";
    call = objectMapper.readValue(json, CallRecord.class);
    assertEquals(0.0, call.version);
    assertEquals("123", call.application);
    assertNull(call.item); // item is not read

    // test case 3: valid json
    json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"event\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    call = objectMapper.readValue(json, CallRecord.class);
    assertEquals(0.0, call.version);
    assertEquals("123", call.application);
    assertNotNull(call.item2); // item2 is read
}
