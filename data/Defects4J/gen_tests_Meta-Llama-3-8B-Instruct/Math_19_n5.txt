
public void testWideBoundsInCMAESOptimizer() {
    // Set up the test data
    double lowerBound = Double.MAX_VALUE;
    double upperBound = Double.MAX_VALUE + 1;
    CMAESOptimizer optimizer = new CMAESOptimizer();
    // Set up the fitness function
    FitnessFunction fitnessFunction = new FitnessFunction() {
        @Override
        public double evaluate(double[] parameters) {
            // This method should not be called with NaN parameters
            // So, throw an exception if parameters contain NaN
            for (double parameter : parameters) {
                if (Double.isNaN(parameter)) {
                    throw new AssertionError("Received NaN parameter");
                }
            }
            return 0; // Replace with your actual fitness function implementation
        }
    };
    // Call the optimizer with the large bounds
    optimizer.optimize(fitnessFunction, new double[1], lowerBound, upperBound);
}
