java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;

import org.junit.Test;

import java.io.IOException;

public class PrimitiveWrapperRefinementTest {

    @Test
    public void testPrimitiveWrapperRefinement() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.USE_STATIC_TYPE_handlers);

        // Test 1: Ignore primitive/wrapper override, return original type as is
        BeanPropertyDefinition property = mapper.getSerializationConfig().introspect(new Object()).getProperty("primitiveProperty");
        assertEquals(Integer.class, property.getType());

        // Test 2: Allow wrapper to "refine" primitive, return wrapper
        property = mapper.getSerializationConfig().introspect(new Object()).getProperty("wrapperProperty");
        assertEquals(Integer.class, property.getType());
    }
}
