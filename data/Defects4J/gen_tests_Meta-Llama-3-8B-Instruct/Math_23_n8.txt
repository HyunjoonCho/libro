java
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizer() {
        BrentOptimizer optimizer = new BrentOptimizer();
        // Define a test function that returns the value of the function at a given point
        double function(double x) {
            return x * x;
        }

        // Define the range of the search
        double[] lowerBound = new double[]{0};
        double[] upperBound = new double[]{1};

        // Perform the optimization
        double result = optimizer.optimize(new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                return function(x);
            }
        }, lowerBound[0], upperBound[0]);

        // Check that the result is indeed the minimum
        double prevValue = Double.MAX_VALUE;
        for (double x = lowerBound[0]; x <= upperBound[0]; x += 0.01) {
            double value = function(x);
            if (value < prevValue) {
                prevValue = value;
            } else {
                break;
            }
        }
        assertTrue(result <= prevValue);
    }
}
