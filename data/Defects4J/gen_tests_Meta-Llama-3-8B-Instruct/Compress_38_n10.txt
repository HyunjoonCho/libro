
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.util.zip.TarArchiveEntry;
import java.util.zip.TarArchiveInputStream;

@RunWith(Parameterized.class)
public class PaxHeaderTest {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
            {"layer.tar/"},
            {"dir/"},
            {"file/"},
        });
    }

    private final String paxHeaderName;

    public PaxHeaderTest(String paxHeaderName) {
        this.paxHeaderName = paxHeaderName;
    }

    @Test
    public void testPaxHeader() throws IOException {
        TarArchiveEntry entry = new TarArchiveEntry(paxHeaderName);
        entry.setLinkName("x");
        entry.setSize(0);

        TarArchiveInputStream tar = new TarArchiveInputStream(new ByteArrayInputStream(new byte[0]));
        tar.putNextEntry(entry);

        assertTrue(entry.isDirectory());

        // Simulate reading the entry header
        tar.getNextEntry();

        // This should fail because the stream is in a bad state
        try {
            tar.getNextEntry();
            fail("Expected IOException");
        } catch (IOException e) {
            // Expected
        }
    }
}
