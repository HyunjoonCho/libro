public void testWriting7zEmptyEntriesProducesIncorrectOrCorruptArchive() {
    // Scenario 1: 7 empty files
    List<File> files = new ArrayList<>();
    for (int i = 0; i < 7; i++) {
        File file = new File("emptyFile" + i + ".txt");
        file.createNewFile();
    }
    // archive the files
    // assert incorrect behavior

    // Scenario 2: 7 files, some empty, some with content
    files.clear();
    for (int i = 0; i < 7; i++) {
        File file = new File("file" + i + ".txt");
        if (i % 2 == 0) {
            file.createNewFile();
        } else {
            file.delete();
        }
    }
    // archive the files
    // assert incorrect behavior

    // Scenario 3: 8 empty files
    files.clear();
    for (int i = 0; i < 8; i++) {
        File file = new File("emptyFile" + i + ".txt");
        file.createNewFile();
    }
    try {
        // archive the files
        // assert archive cannot be opened
    } catch (Exception e) {
        // expected behavior
    }

    // Scenario 4.1: 8 files, some empty, some with content, last file (alphabetically) with content
    files.clear();
    for (int i = 0; i < 8; i++) {
        File file = new File("file" + i + ".txt");
        if (i == 7) {
            file.createNewFile();
        } else {
            file.delete();
        }
    }
    // archive the files
    // assert incorrect behavior

    // Scenario 4.2: 8 files, some empty, some with content, last file empty
    files.clear();
    for (int i = 0; i < 8; i++) {
        File file = new File("file" + i + ".txt");
        if (i == 7) {
            file.delete();
        } else {
            file.createNewFile();
        }
    }
    try {
        // archive the files
        // assert archive is corrupt
    } catch (Exception e) {
        // expected behavior
    }
}