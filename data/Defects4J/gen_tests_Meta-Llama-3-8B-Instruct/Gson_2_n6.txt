java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.ContextualDeserializers;
import com.fasterxml.jackson.databind.deser.impl.TypeWrappedDeserializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospectorStd;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospectorStdStd;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;

import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.List;

import static org.junit.Assert.fail;

@RunWith(JUnit4.class)
public class TypeHierarchyAdaptersTest {

    @Test
    public void testDecodeJSONString() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JaxbAnnotationModule(new JaxbAnnotationIntrospectorStd()));
        TypeFactory typeFactory = mapper.getTypeFactory();
        TypeReference<List<Vehicle>> typeReference = typeFactory.constructType(new TypeReference<List<Vehicle>>() {});

        String jsonString = "{\"type\":\"Truck\"}";
        try {
            List<Vehicle> vehicles = mapper.readValue(jsonString, typeReference);
            fail("Expected a JSON decoding exception");
        } catch (IOException e) {
            // Expected exception
        }
    }
}

class Vehicle {
}

class Car extends Vehicle {
}

class Truck extends Vehicle {
}
