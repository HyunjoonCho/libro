
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class TestJacksonIssue {
    @Test
    public void testIssue() {
        ObjectMapper om = new ObjectMapper();
        om.configure(SerializationFeature.AUTO_DETECT_FIELDS, false);
        om.configure(SerializationFeature.AUTO_DETECT_GETTERS, false);
        om.configure(SerializationFeature.AUTO_DETECT_SETTERS, false);
        om.configure(SerializationFeature.AUTO_DETECT_IS_GETTERS, false);
        om.configure(SerializationFeature.USE_GETTERS_AS_SETTERS, false);
        om.configure(SerializationFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);
        om.configure(SerializationFeature.INFER_PROPERTY_MUTATORS, false);
        om.configure(SerializationFeature.USE_ANNOTATIONS, true);

        TypeFactory typeFactory = om.getTypeFactory();
        SerializationConfig serializationConfig = om.getSerializationConfig();
        BasicClassIntrospector introspector = new BasicClassIntrospector();
        BasicBeanDescription bdesc = introspector.forSerialization(serializationConfig, typeFactory.constructType(TCls.class), null);
        List<BeanPropertyDefinition> bprops = bdesc.findProperties();

        assertEquals(1, bprops.size());
        assertEquals("groupname", bprops.get(0).getName());
        assertEquals("groupname", bprops.get(0).getInternalName());
    }
}
