java
import org.junit.Test;

public class InheritanceDetectionTest {
    @Test
    public void testInheritanceNotDetected() {
        class SuperClass {
            CustomMethod() {}
            CustomMethod() {
                // intentionally empty
            }
        }

        SuperClass.prototype.CustomMethod = function() {
        };

        class SubClass extends SuperClass {
            constructor() {
                SuperClass.call(this);
            }
        }
        SubClass.prototype = new SuperClass();

        SubClass.prototype.CustomMethod = function() {
            this.myProperty = "value";
        }

        var subClassInstance = new SubClass();
        // Expect an error here
        subClassInstance.CustomMethod();
    }

    @Test
    public void testInheritanceDetected() {
        function inherit(Child, Parent) {
            Child.prototype = new Parent();
        }

        class SuperClass {
            CustomMethod() {}
            CustomMethod() {
                // intentionally empty
            }
        }

        SuperClass.prototype.CustomMethod = function() {
        };

        class SubClass extends SuperClass {
            constructor() {
                SuperClass.call(this);
            }
        }

        inherit(SubClass, SuperClass);
        SubClass.prototype.CustomMethod = function() {
            this.myProperty = "value";
        }

        var subClassInstance = new SubClass();
        // No error expected here
        subClassInstance.CustomMethod();
    }
}
