java
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.w3c.dom.ls.DOMImplementationLS;
import org.w3c.dom.ls.LSParser;
import org.w3c.dom.ls.LSSerializer;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.StringReader;
import java.io.StringWriter;

import org.junit.Test;
import static org.junit.Assert.*;

public class NamespacedAttributeNotSelectedWithWildcardTest {

    @Test
    public void testNamespacedAttributeNotSelectedWithWildcard() {
        String xml = "<xml xmlns:x='foo' x:pop='a'/>";
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.parse(new InputSource(new StringReader(xml)));
        Element root = document.getDocumentElement();

        NodeList nodeList = root.getElementsByTagName("*");
        assertEquals(1, nodeList.getLength());

        DOMImplementationLS domImpl = (DOMImplementationLS) document.getImplementation();
        LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);
        Source source = new DOMSource(document);
        String actual = getOutput(parser.parse(source).getDocumentItem().toString());

        NodeList nodeList2 = root.getElementsByTagNameNS("x", "*");
        assertEquals(1, nodeList2.getLength());

        // Test case for the bug
        String xml2 = "<xml xmlns:x='foo' x:pop='a'/>";
        Document document2 = builder.parse(new InputSource(new StringReader(xml2)));
        Element root2 = document2.getDocumentElement();
        NodeList nodeList3 = root2.getElementsByTagName("x:*");
        assertNull(nodeList3);
    }

    private String getOutput(Node node) {
        LSSerializer serializer = node.getOwnerDocument().createLSSerializer(null);
        StringWriter writer = new StringWriter();
        serializer.writeToString(node, writer);
        return writer.toString();
    }
}
