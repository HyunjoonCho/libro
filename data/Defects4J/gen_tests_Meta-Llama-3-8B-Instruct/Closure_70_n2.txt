java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class ClosureCompilerTest {
    @Test
    public void testTypedCoverageLessThan100() {
        String script = "/**global window**/\n" +
                "/**jslint sub: true**/\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @param {!Element} element\n" +
                " */\n" +
                "function Example(element) {\n" +
                "    /**\n" +
                "     * @param {!string} ns\n" +
                "     * @param {!string} name\n" +
                "     * @return {undefined}\n" +
                "     */\n" +
                "    this.appendElement = function appendElement(ns, name) {\n" +
                "        var e = element.ownerDocument.createElementNS(ns, name);\n" +
                "        element.appendChild(e);\n" +
                "    };\n" +
                "}\n" +
                "window['Example'] = Example;\n";

        String expectedOutput = "0 error(s), 0 warning(s), 100% typed";
        String actualOutput = compileScript(script);

        // Check if the output matches the expected output
        assertNotEquals(expectedOutput, actualOutput);
    }

    private String compileScript(String script) {
        // Implement the logic to compile the script using the Closure Compiler
        // For example, you can use a process builder to run the compiler
        // and capture the output
        ProcessBuilder builder = new ProcessBuilder("java", "-jar", "compiler.jar", "--jscomp_error", "checkTypes", "--summary_detail_level", "3", "--js", "v.js", "--js_output_file", "compiled.js");
        Process process = builder.start();
        String output = new BufferedReader(new InputStreamReader(process.getInputStream())).lines().collect(Collectors.joining());
        process.waitFor();
        return output;
    }
}
