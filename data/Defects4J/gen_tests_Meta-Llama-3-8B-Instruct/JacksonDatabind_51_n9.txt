java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class TestTypeIdResolver {
    @Test
    public void testTypeIdResolver() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();
        TypeReference<List<String>> typeReference = typeFactory.constructType(new TypeReference<List<String>>() {
        });

        // Your TypeIdResolver implementation here
        JavaType javaType = new YourTypeIdResolver().resolveType(typeReference);

        // Assert that the generic type is not lost
        assertEquals(List.class, javaType.getRawClass());
        assertEquals(String.class, javaType.getContentType().getRawClass());
    }
}
