java
import org.junit.Test;
import org.junit.rules.TestRule;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.File;
import java.io.IOException;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class CompilerTest {

    @Parameterized.Parameter
    public String input;

    @Parameterized.Parameters
    public static Object[] data() {
        return new Object[][]{
                {"/*\*\* @type function \*/ var callback;"}
        };
    }

    @Test
    public void testCompilerWarning() throws IOException {
        ProcessBuilder pb = new ProcessBuilder("java", "-jar", "compiler.jar", "--js", input);
        Process process = pb.start();
        String output = new String(readFully(process.getInputStream()));
        assertEquals("Expected to see the actual warning", "Parse error. Unexpected end of file */", output);
    }

    private static byte[] readFully(InputStream input) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024];
        for (int read; (read = input.read(buffer))!= -1; ) {
            bos.write(buffer, 0, read);
        }
        return bos.toByteArray();
    }
}
