java
import org.junit.Test;
import org.junit.runner.RunWith;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.CompilerOptions;

import java.util.List;

@RunWith(com.google.javascript.jscomp.junit.JsCompilerTestRunner.class)
public class InvalidForInLeftHandAssignmentTest {
    @Test
    public void testInvalidForInLeftHandAssignment() throws Exception {
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilationLevel.SIMPLE_OPTIMIZATIONS);
        Compiler compiler = new Compiler(options);

        JSSourceFile main = JSSourceFile.fromCode("window.Foo = function(A, B, C, D) {\n" +
                "  if ( A ) {\n" +
                "    if ( B ) {\n" +
                "      C = 0;\n" +
                "    } else {\n" +
                "      C = 0 in D;\n" +
                "    }\n" +
                "  }\n" +
                "};");

        List<JSError> errors = compiler.compile(main);
        assertTrue("Expected an error",!errors.isEmpty());
    }
}
