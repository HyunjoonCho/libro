
public void testJSCUSEDGLOBALTHISWarning() {
    // Create a JavaScript engine
    // Execute the JavaScript code that reproduces the problem
    String jsCode = "var NS = { read: function() { return this.foo; }, write: function() { this.foo = 123; }, write2: function() { this.foo = 123; } };";
    ScriptEngineManager manager = new ScriptEngineManager();
    ScriptEngine engine = manager.getEngineByName("js");
    ScriptContext context = new SimpleScriptContext();
    engine.eval(jsCode, context);

    // Check that the warning is not reported for the inline notation
    engine.setWarningListener(new ScriptEngineWarningListener() {
        @Override
        public void warning(ScriptEngineManager manager, ScriptEngine engine, ScriptException se) {
            assertEquals("JSC_USED_GLOBAL_THIS: dangerous use of the global this object", se.getMessage());
        }
    });
    engine.eval("NS.write();");

    // Check that the warning is not reported for the non-inline notation
    engine.setWarningListener(new ScriptEngineWarningListener() {
        @Override
        public void warning(ScriptEngineManager manager, ScriptEngine engine, ScriptException se) {
            assertEquals("JSC_USED_GLOBAL_THIS: dangerous use of the global this object", se.getMessage());
        }
    });
    engine.eval("NS.write2();");
}
