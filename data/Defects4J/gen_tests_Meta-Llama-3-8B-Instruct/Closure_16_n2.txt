public void testTypedefResolution() {
    String code = "goog.provide('a.b.c');\n" +
            "goog.scope(function() {\n" +
            "    var b = a.b;\n" +
            "    var c = b.c;\n" +
            "    /* @typedef {string} */\n" +
            "    c.MyType;\n" +
            "    /* @param {c.MyType} x The variable. */\n" +
            "    c.myFunc = function(x) {};\n" +
            "});";
    try {
        // This should throw an exception because JSCompiler doesn't recursively resolve typedefs
        // This is the expected behavior according to the bug report
        // JSCompiler does recursively resolve other names, but not typedefs
        // So, we expect the code to throw a compilation error
        // We don't actually run the code, we just test that it doesn't compile
        // Without the try/catch, the test would pass if the code compiles
    } catch (Exception e) {
        // If we catch an exception, it means the code didn't compile, which is the expected behavior
        return;
    }
    // If we reach this point, it means the code compiled, which is the wrong behavior
    fail("JSCompiler should not resolve typedefs recursively");
}