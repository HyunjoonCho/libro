public void testWriting7zEmptyEntries() {
    // Scenario 1: 7 empty files
    List<File> emptyFiles = new ArrayList<>();
    for (int i = 1; i <= 7; i++) {
        File file = new File("file" + i + ".txt");
        file.delete();
        emptyFiles.add(file);
    }
    Archive archive = new Archive();
    archive.addFiles(emptyFiles);
    archive.createArchive("test.7z");
    // assert incorrect behavior

    // Scenario 2: 7 files, some empty, some with content
    List<File> files = new ArrayList<>();
    for (int i = 1; i <= 7; i++) {
        File file = new File("file" + i + ".txt");
        if (i <= 4) {
            file.delete();
        } else {
            file.createNewFile();
        }
        files.add(file);
    }
    archive = new Archive();
    archive.addFiles(files);
    archive.createArchive("test.7z");
    // assert incorrect behavior

    // Scenario 3: 8 empty files
    emptyFiles = new ArrayList<>();
    for (int i = 1; i <= 8; i++) {
        File file = new File("file" + i + ".txt");
        file.delete();
        emptyFiles.add(file);
    }
    try {
        archive = new Archive();
        archive.addFiles(emptyFiles);
        archive.createArchive("test.7z");
        fail("Expected 7Zip Manager to crash");
    } catch (Exception e) {
        // expected exception
    }

    // Scenario 4.1: 8 files, some empty, some with content, last file with content
    files = new ArrayList<>();
    for (int i = 1; i <= 8; i++) {
        File file = new File("file" + i + ".txt");
        if (i == 8) {
            file.createNewFile();
        } else {
            file.delete();
        }
        files.add(file);
    }
    archive = new Archive();
    archive.addFiles(files);
    archive.createArchive("test.7z");
    // assert incorrect behavior

    // Scenario 4.2: 8 files, some empty, some with content, last file empty
    files = new ArrayList<>();
    for (int i = 1; i <= 8; i++) {
        File file = new File("file" + i + ".txt");
        if (i == 8) {
            file.delete();
        } else {
            file.createNewFile();
        }
        files.add(file);
    }
    try {
        archive = new Archive();
        archive.addFiles(files);
        archive.createArchive("test.7z");
        fail("Expected archive to be corrupt");
    } catch (Exception e) {
        // expected exception
    }
}