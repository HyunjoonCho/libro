java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Map;

import au.com.bytecode.opencsv.CSVFormat;
import au.com.bytecode.opencsv.CSVParser;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

@RunWith(Parameterized.class)
public class HeaderMapTest {
    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"Col1,Col2,Col2,Col3,Col4", "1,2,3,4,5", "Col1,Col2,Col2,Col3,Col4"}
        });
    }

    private String[] header;
    private String[] rows;
    private String[] expectedHeader;

    public HeaderMapTest(String header, String rows, String expectedHeader) {
        this.header = header.split(",");
        this.rows = rows.split(",");
        this.expectedHeader = expectedHeader.split(",");
    }

    @Test
    public void testHeaderMap() throws IOException {
        CSVFormat myFormat = CSVFormat.RFC4180.withDelimiter(",").withQuoteChar('"')
               .withQuotePolicy(Quote.MINIMAL).withIgnoreSurroundingSpaces(true).withHeader().withSkipHeaderRecord(true);
        CSVParser parser = new CSVParser();
        Map<String, Integer> headerMap = parser.parse(new ByteArrayInputStream((header + "\n" + rows).getBytes()).toString(), myFormat);
        assertNotNull(headerMap);
        assertEquals(expectedHeader.length, headerMap.size());
        for (int i = 0; i < header.length; i++) {
            assertEquals(expectedHeader[i], headerMap.get(header[i]));
        }
    }
}
