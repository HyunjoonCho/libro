java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializationFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;
import org.junit.Test;

import java.io.IOException;
import java.lang.reflect.Field;

import static org.junit.Assert.fail;

public class TestIssue {

    private static final ObjectMapper mapper = new ObjectMapper();
    private static final SerializationFeature serializationFeature = SerializationFeature.CAN_OVERRIDE_ACCESS_MODIFIERS;

    @Test
    public void testIssue() throws IOException {
        MyException exception = new MyException("Message", new Exception("Inner exception"));
        String json = mapper.writeValueAsString(exception);

        try {
            mapper.enable(CAN_OVERRIDE_ACCESS_MODIFIERS);
            MyException deserializedException = mapper.readValue(json, MyException.class);
            fail("Expected exception");
        } catch (IOException e) {
            // Expected exception
        }

        // Check if the cause is still accessible
        Field causeField = MyException.class.getDeclaredField("cause");
        causeField.setAccessible(true);
        assertNotSame(exception.getCause(), causeField.get(deserializedException));
    }

    public static class MyException extends RuntimeException {
        @JsonIgnoreProperties("cause")
        public MyException(String message, Throwable cause) {
            super(message);
            setCause(cause);
        }

        private void setCause(Throwable cause) {
            this.cause = cause;
        }

        private Throwable cause;
    }
}
