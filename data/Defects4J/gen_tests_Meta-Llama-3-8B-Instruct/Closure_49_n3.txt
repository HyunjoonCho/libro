java
import org.junit.Test;
import org.junit.runner.RunWith;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.JsAstBuilder;
import com.google.javascript.jscomp.JsAstPrinter;
import com.google.javascript.jscomp.JsCode;
import com.google.javascript.jscomp.JsSyntaxError;
import com.google.javascript.jscomp.Module;
import com.google.javascript.jscomp.ModuleBuilder;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import static org.junit.Assert.assertEquals;

@RunWith(com.google.common.truth.junit.TruthJUnitRunner.class)
public class ClosureCompilerTest {

  @Test
  public void testIssue() throws Exception {
    JsAstBuilder builder = new JsAstBuilder();
    ModuleBuilder moduleBuilder = new ModuleBuilder("foo");
    moduleBuilder.setCompilationLevel(CompilationLevel.SIMPLE_OPTIMIZATIONS);

    String code = "var foo = function bar() {\n" +
        "  var bar;\n" +
        "  alert(bar)\n" +
        "};";

    SourceFile sourceFile = new SourceFile("test.js", code);
    Result result = moduleBuilder.compile(sourceFile);
    assertEquals(1, result.getSyntaxErrors().size());
    assertEquals("Invalid function name: bar", result.getSyntaxErrors().get(0).getMessage());

    JsAst jsAst = builder.buildAst(code);
    JsCode jsCode = new JsCode(jsAst);
    String compiledCode = JsAstPrinter.print(jsCode);
    assertEquals("var foo = function() {\n" +
        "  alert(void 0)\n" +
        "};", compiledCode);
  }
}
