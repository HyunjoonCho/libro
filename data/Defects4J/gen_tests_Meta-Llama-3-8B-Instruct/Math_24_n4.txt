public void testBrentOptimizer() {
    BrentOptimizer optimizer = new BrentOptimizer();
    int iterations = 0;
    double bestValue = Double.MAX_VALUE;
    double lastValue = Double.MAX_VALUE;
    PointValuePair lastPoint = null;
    for (PointValuePair point : optimizer.optimize(new UnivariateRealFunction() {
        @Override
        public double value(double[] point) {
            double value = Math.random() * 100; // dummy function
            iterations++;
            return value;
        }
    }, new Interval(0, 10), 1e-6, 1000)) {
        iterations++;
        double currentValue = value(point.getPoint()[0]);
        if (currentValue < bestValue) {
            bestValue = currentValue;
            lastPoint = point;
        } else if (currentValue > lastValue) {
            fail("BrentOptimizer did not return the best point");
        }
        lastValue = currentValue;
    }
    if (lastPoint == null || lastPoint.getValue() > bestValue) {
        fail("BrentOptimizer did not return the best point");
    }
    assertEquals(iterations, optimizer.getFunctionEvaluations());
}