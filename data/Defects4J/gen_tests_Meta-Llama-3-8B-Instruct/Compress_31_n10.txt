java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.Arrays;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

@RunWith(Parameterized.class)
public class TarArchiveInputStreamTest {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {new byte[]{0x05, 0x41, 0x31, 0x32, 0x7F, 0x31, 0x31, 0x00},
                        "Invalid byte 0 at offset 5 in '05412{NUL}11' len=8"},
        });
    }

    private final byte[] bytes;
    private final String expectedMessage;

    public TarArchiveInputStreamTest(byte[] bytes, String expectedMessage) {
        this.bytes = bytes;
        this.expectedMessage = expectedMessage;
    }

    @Test
    public void testTarArchiveInputStream() {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
             OutputStream out = new SequenceInputStream(new ByteArrayInputStream(bytes), bos)) {
            TarArchiveInputStream tarIn = new TarArchiveInputStream(out);
            assertThrows(IllegalArgumentException.class, tarIn::getNextTarEntry);
            assertEquals(expectedMessage, bos.toString());
        }
    }
}
