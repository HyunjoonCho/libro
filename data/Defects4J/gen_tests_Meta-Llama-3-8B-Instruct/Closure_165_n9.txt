java
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Error;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.SourceFile;

public class TestPropertiesDefinedOnAnyRecordTypeApplyingToUnrelatedRecordTypes {
    public void testIssue() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setErrorReporter(new ErrorReporter());

        String code = """
                /**
                 * @typedef {{name: string, id: number}}
                 */
                var RecordType1;

                /**
                 * @typedef {{name2: string}}
                 */
                var RecordType2;

                /**
                 * @param {RecordType1} rec
                 */
                var func = function(rec) {
                    alert(rec.name2);
                };
                func({name: 'jim', id: 0});
                """;

        SourceFile sourceFile = new SourceFile("test.js", code);
        compiler.compile(sourceFile, options);

        // Assert that the code compiles without errors
        // No JSError should be reported
    }
}

class ErrorReporter implements com.google.javascript.jscomp.ErrorReporter {
    public void report(JSError error) {
        throw new AssertionError("Error reported: " + error.getMessage());
    }
}
