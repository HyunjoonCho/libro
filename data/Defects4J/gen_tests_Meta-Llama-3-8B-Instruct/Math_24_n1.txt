public void testBrentOptimizer() {
    BrentOptimizer brentOptimizer = new BrentOptimizer();
    double[] lowerBound = new double[] {1.0};
    double[] upperBound = new double[] {2.0};
    double[] initial = new double[] {1.5};
    int maxEval = 10;
    BrentOptimizer.Result result = brentOptimizer.optimize(new ObjectiveFunction(new double[] {1.0}, new double[] {2.0}, new double[] {1.5}), lowerBound, upperBound, initial, maxEval);
    double bestPoint = result minimum;
    double bestValue = result.value;
    // Check that the best point is actually the best
    for (int i = 0; i < maxEval; i++) {
        double[] point = result.points[i];
        double value = result.values[i];
        if (value < bestValue) {
            bestPoint = point;
            bestValue = value;
        }
    }
    // Assert that the best point is indeed the best
    assertEquals(bestPoint, result.minimum);
    assertEquals(bestValue, result.value);
}