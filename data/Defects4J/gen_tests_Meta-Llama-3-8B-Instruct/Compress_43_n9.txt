java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.Arrays;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class ZipArchiveOutputStreamTest {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {true, true, 0x0200}, // Deflated, zip64, expected 0x0200
                {true, false, 0x0400}, // Deflated, not zip64, expected 0x0400
                {false, true, 0x0200}, // Stored, zip64, expected 0x0200
                {false, false, 0x0000} // Stored, not zip64, expected 0x0000
        });
    }

    private final boolean deflated;
    private final boolean zip64;
    private final int expectedVersionNeededToExtract;

    public ZipArchiveOutputStreamTest(boolean deflated, boolean zip64, int expectedVersionNeededToExtract) {
        this.deflated = deflated;
        this.zip64 = zip64;
        this.expectedVersionNeededToExtract = expectedVersionNeededToExtract;
    }

    @Test
    public void testVersionNeededToExtract() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(bos);

        zipArchiveOutputStream.setDeflater(deflated? new Deflater() : null);
        zipArchiveOutputStream.setZip64(zip64);

        int versionNeededToExtract = zipArchiveOutputStream.getVersionNeededToExtract();
        assertEquals(expectedVersionNeededToExtract, versionNeededToExtract);
    }
}
