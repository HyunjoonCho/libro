
public void testNullPointerWhenParsingNaNAsBigDecimal() {
    ObjectReader reader = new ObjectReader();
    JsonParser parser = reader.getFactory().createParser("NaN");
    parser.enable(Feature.ALLOW_NON_NUMERIC_NUMBERS);
    BigDecimal decimal = parser.getDecimalValue();
    assertNull(decimal);
}

public void testNumberFormatExceptionWhenParsingNaNAsBigDecimal() {
    ObjectReader reader = new ObjectReader();
    JsonParser parser = reader.getFactory().createParser("NaN");
    parser.enable(Feature.ALLOW_NON_NUMERIC_NUMBERS);
    try {
        parser.getDecimalValue();
        fail("Expected NumberFormatException");
    } catch (JsonParseException e) {
        assertEquals(JsonParser.NumberType.NAN, e.getNumberType());
    }
}

public void testNullPointerWhenParsingNaNAsInteger() {
    ObjectReader reader = new ObjectReader();
    JsonParser parser = reader.getFactory().createParser("NaN");
    parser.enable(Feature.ALLOW_NON_NUMERIC_NUMBERS);
    int integer = parser.getIntValue();
    assertNull(integer);
}

public void testNumberFormatExceptionWhenParsingNaNAsInteger() {
    ObjectReader reader = new ObjectReader();
    JsonParser parser = reader.getFactory().createParser("NaN");
    parser.enable(Feature.ALLOW_NON_NUMERIC_NUMBERS);
    try {
        parser.getIntValue();
        fail("Expected NumberFormatException");
    } catch (JsonParseException e) {
        assertEquals(JsonParser.NumberType.NAN, e.getNumberType());
    }
}
