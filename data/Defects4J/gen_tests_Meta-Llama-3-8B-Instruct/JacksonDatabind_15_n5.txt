java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class XmlAdapterIssueTest {

    @Test
    public void testXmlAdapterIssue() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        IntegerListXmlAdapter xmlAdapter = new IntegerListXmlAdapter();
        SomeIntListHolder holder = new SomeIntListHolder();
        holder.setListOne(new ArrayList<Integer>() {{
            add(1);
            add(2);
            add(3);
        }});
        String json = mapper.writeValueAsString(holder);

        // This should throw a JsonMappingException
        mapper.writeValueAsString(xmlAdapter);
    }

    public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {
        @Override
        public Object marshal(List<Integer> list) throws Exception {
            return Joiner.on(",").join(list);
        }

        @Override
        public List<Integer> unmarshal(Object value) throws Exception {
            return null;
        }
    }

    public static class IntegerListToStringXmlAdapter extends XmlAdapter<String, List<Integer>> {
        @Override
        public String marshal(List<Integer> list) throws Exception {
            return Joiner.on(",").join(list);
        }

        @Override
        public List<Integer> unmarshal(String value) throws Exception {
            return null;
        }
    }

    @XmlRootElement
    @XmlAccessorType(XmlAccessType.NONE)
    public static class SomeIntListHolder {

        @XmlAttribute
        @XmlJavaTypeAdapter(IntegerListXmlAdapter.class)
        private List<Integer> listOne;

        public List<Integer> getListOne() {
            return listOne;
        }

        public void setListOne(List<Integer> listOne) {
            this.listOne = listOne;
        }
    }
}
