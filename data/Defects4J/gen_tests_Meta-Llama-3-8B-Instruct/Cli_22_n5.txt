java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

@RunWith(JUnit4.class)
public class PosixParserTest {

    @Test
    public void testOptionTarget() {
        Option optionTarget = new Option("t", "target", true, "Generate files for the specified target machine");
        PosixParser parser = new PosixParser();
        String[] cmdLineOpts = {"-t", "foobar.com"};
        try {
            parser.parse(cmdLineOpts);
        } catch (ParseException pe) {
            fail("ParseException expected");
        }
        assertEquals("processing selected target: t", System.out.toString());
    }

    @Test
    public void testOptionTargetLong() {
        Option optionTarget = new Option("t", "target", true, "Generate files for the specified target machine");
        PosixParser parser = new PosixParser();
        String[] cmdLineOpts = {"--target", "foobar.com"};
        try {
            parser.parse(cmdLineOpts);
        } catch (ParseException pe) {
            fail("ParseException expected");
        }
        assertEquals("processing selected target: target", System.out.toString());
    }

    @Test
    public void testInvalidOption() {
        Option optionTarget = new Option("t", "target", true, "Generate files for the specified target machine");
        PosixParser parser = new PosixParser();
        String[] cmdLineOpts = {"-ar", "foobar.com"};
        try {
            parser.parse(cmdLineOpts);
        } catch (ParseException pe) {
            assertEquals("Invalid option: ar", pe.getMessage());
        }
    }
}
