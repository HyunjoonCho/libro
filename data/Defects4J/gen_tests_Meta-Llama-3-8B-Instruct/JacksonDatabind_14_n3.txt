java
import org.junit.Test;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;

public class TestDeserTest {

    @Test
    public void test() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(DataA.class, new DataADeserializer());
        mapper.registerModule(module);

        DataB db = new DataB();
        db.da.i = 11;
        db.k = 13;
        String jsonBString = mapper.writeValueAsString(db);

        // update parent
        DataB dbUpd = new DataB();
        mapper.readerForUpdating(dbUpd).readValue(jsonBString);

        DataA deser = new DataADeserializer();
        JsonParser jp = mapper.getFactory().createParser(jsonBString);
        DeserializationContext ctxt = mapper.getDeserializationContext();
        DataA result = deser.deserialize(jp, ctxt);

        Assert.assertEquals(5, result.i);
    }

    static class DataA {
        public int i = 1;
        public int j = 2;
    }

    static class DataB {
        public DataA da = new DataA();
        public int k = 3;
    }

    static class DataADeserializer extends StdDeserializer<DataA> {
        private static final long serialVersionUID = 1L;

        DataADeserializer() {
            super(DataA.class);
        }

        public DataA deserialize(JsonParser jp, DeserializationContext ctxt) throws JsonProcessingException, IOException {
            assert (jp.getCurrentToken() == JsonToken.START_OBJECT);
            JsonNode node = jp.getCodec().readTree(jp);

            DataA da = new DataA();
            da.i = 5;
            return da;
        }
    }
}
