public void testTreeTraversingParser() {
    ObjectMapper mapper = new ObjectMapper();
    TreeTraversingParser parser = new TreeTraversingParser(mapper);
    assertEquals(0, parser.readValueTree("{\"x\": 0}").get("x").asInt());
    assertEquals(10, parser.readValueTree("{\"x\": 10}").get("x").asInt());
    assertEquals(10000, parser.readValueTree("{\"x\": 10000}").get("x").asInt());
    assertEquals(2147483647, parser.readValueTree("{\"x\": 1e10}").get("x").asInt());
    assertEquals(0, parser.readValueTree("{\"x\": 0.1}").get("x").asInt());
    assertEquals(-2147483648, parser.readValueTree("{\"x\": 2147483648}").get("x").asInt());
    assertEquals(-2147483647, parser.readValueTree("{\"x\": 2147483649}").get("x").asInt());
    assertEquals(2147483647, parser.readValueTree("{\"x\": -2147483649}").get("x").asInt());
    assertEquals(1, parser.readValueTree("{\"x\": -4294967295}").get("x").asInt());
    assertEquals(0, parser.readValueTree("{\"x\": true}").get("x").asInt());
    assertEquals(0, parser.readValueTree("{\"x\": {}}").get("x").asInt());
    assertEquals(0, parser.readValueTree("{\"x\": []}").get("x").asInt());
    assertEquals(0, parser.readValueTree("{\"x\": [0]}").get("x").asInt());
}