java
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

public void testPrototypeWithQuotes() {
    String code = """
        /**
         * @constructor
         */
        function MyClass() {}
        MyClass.prototype["MyMethod"] = function(a) {
          this.a = a;
        }
        window["MyClass"] = MyClass;
    """;

    Result result = compiler.compile(code, new SourceFile("test.js", code));
    assertEquals(1, result.getWarnings().size());
    JSError warning = result.getWarnings().get(0);
    assertEquals("JSC_USED_GLOBAL_THIS", warning.getMessage());
}

public void testPrototypeWithInterface() {
    String code = """
        /**
         * @interface
         */
        function MyParent() {}
        /**
         * @param {*} a
         */
        MyParent.prototype.MyMethod = function(a) {}

        /**
         * @constructor
         * @implements {MyParent}
         */
        function MyClass() {}
        MyClass.prototype["MyMethod"] = function(a) {
          this.a2 = a;
        }
        window["MyClass"] = MyClass;
    """;

    Result result = compiler.compile(code, new SourceFile("test.js", code));
    assertEquals(2, result.getWarnings().size());
    JSError warning1 = result.getWarnings().get(0);
    assertEquals("JSC_USED_GLOBAL_THIS", warning1.getMessage());
    JSError warning2 = result.getWarnings().get(1);
    assertEquals("property MyMethod on interface MyParent is not implemented by type MyClass", warning2.getMessage());
}
