public void testPrototypeWithQuotes() {
    String code = "/** @constructor */\n" +
            "function MyClass() {}" +
            "MyClass.prototype['MyMethod'] = function(a) {\n" +
            "  this.a = a;\n" +
            "}\n" +
            "window['MyClass'] = MyClass;";
    // Compile the code and verify the warning
    // For example, using a Java compiler wrapper like javacompiler
    // Assuming the compiler output is stored in a string
    String compilerOutput = compileCode(code);
    assertTrue(compilerOutput.contains("dangerous use of the global this object."));
}

public void testPrototypeWithQuotesAndInterface() {
    String code = "/** @interface */\n" +
            "function MyParent() {}" +
            "/* @param {*} a */\n" +
            "MyParent.prototype.MyMethod = function(a) {}" +
            "/** @constructor\n" +
            " * @implements {MyParent}" +
            " */\n" +
            "function MyClass() {}" +
            "MyClass.prototype['MyMethod'] = function(a) {\n" +
            "  this.a2 = a;\n" +
            "}\n" +
            "window['MyClass'] = MyClass;";
    // Compile the code and verify the warning
    // For example, using a Java compiler wrapper like javacompiler
    // Assuming the compiler output is stored in a string
    String compilerOutput = compileCode(code);
    assertTrue(compilerOutput.contains("dangerous use of the global this object."));
    assertTrue(compilerOutput.contains("property MyMethod on interface MyParent is not implemented by type MyClass"));
}