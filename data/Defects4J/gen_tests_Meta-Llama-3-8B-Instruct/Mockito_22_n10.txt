java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.stubbing.Answer;
import org.mockito.stubbing.Stubbing;

import java.lang.reflect.Method;
import java.util.function.Supplier;

import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class MockitoGenericsTest {

    @Test
    public void test() throws Exception {
        I i = mock(I.class, RETURNS_DEEP_STUBS);
        when(i.m(Boolean.class)).thenAnswer(new Answer<Supplier<Object>>() {
            @Override
            public Supplier<Object> answer(InvocationOnMock invocation) throws Throwable {
                return () -> "Hello, World!";
            }
        });

        Method method = i.getClass().getMethod("m", Class.class);
        Supplier<Object> supplier = (Supplier<Object>) method.invoke(i, Boolean.class);
        String result = supplier.get();

        assertEquals("Hello, World!", result);
    }

    interface I {
        <T> Supplier<T> m(Class<T> type);
    }
}
