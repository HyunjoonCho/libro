java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature.WriteRootWrapping;
import com.fasterxml.jackson.databind.jsonschema.JsonNodeFactory;

import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class TestListAttributeSerialization {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
            {"ListAttributeSerializer", true, true},
            {"ListAttributeSerializer", true, false}
        });
    }

    private final String serializerName;
    private final boolean useWriteValueAsBytes;

    public TestListAttributeSerialization(String serializerName, boolean useWriteValueAsBytes) {
        this.serializerName = serializerName;
        this.useWriteValueAsBytes = useWriteValueAsBytes;
    }

    @Test
    public void testListAttributeSerialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.INDENT_OUTPUT, true);

        ListAttribute listAttribute = new ListAttribute();
        listAttribute.setItems(new ArrayList<>());

        if (useWriteValueAsBytes) {
            byte[] json = mapper.writeValueAsBytes(listAttribute);
            JsonNode tree = mapper.readTree(new String(json, "UTF-8"));
            assertEquals("{\"itemType\":\"\",\"items\":[]}", tree.toString());
        } else {
            String json = mapper.writeValueAsString(listAttribute);
            assertEquals("{\"itemType\":\"\",\"items\":[]}", json);
        }
    }
}

class ListAttribute {
    String s;
    List items;
}

class ListAttributeSerializer extends JsonSerializer<ListAttribute> {
    @Override
    public void serialize(ListAttribute value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
        jgen.writeStartObject();
        jgen.writeStringField("itemType", value.s);
        jgen.writeObjectField("items", value.items);
        jgen.writeEndObject();
    }

    @Override
    public void serializeWithType(ListAttribute value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
        typeSer.writeTypePrefixForObject(value, jgen);
        jgen.writeStringField("itemType", value.s);
        jgen.writeObjectField("items", value.items);
        typeSer.writeTypeSuffixForObject(value, jgen);
    }
}
