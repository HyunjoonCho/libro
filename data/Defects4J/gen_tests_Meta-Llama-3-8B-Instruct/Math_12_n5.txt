
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Random;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class GammaDistributionCloningTest {

    @Parameterized.Parameter(0)
    public double alpha;

    @Parameterized.Parameter(1)
    public double beta;

    @Parameterized.Parameters
    public static Object[][] data() {
        return new Object[][]{
                {1.0, 2.0},
                {2.0, 3.0},
                {3.0, 4.0},
        };
    }

    @Test
    public void testGammaDistributionCloning() throws Exception {
        GammaDistribution distribution = new GammaDistribution(alpha, beta);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(bos);
        oos.writeObject(distribution);
        oos.close();
        byte[] serializedBytes = bos.toByteArray();

        ByteArrayInputStream bis = new ByteArrayInputStream(serializedBytes);
        ObjectInputStream ois = new ObjectInputStream(bis);
        GammaDistribution clonedDistribution = (GammaDistribution) ois.readObject();

        Random random = new Random();
        double[] samples1 = new double[100];
        double[] samples2 = new double[100];
        for (int i = 0; i < 100; i++) {
            samples1[i] = distribution.sample(random);
            samples2[i] = clonedDistribution.sample(random);
        }

        assertArrayEquals(samples1, samples2);
    }
}
