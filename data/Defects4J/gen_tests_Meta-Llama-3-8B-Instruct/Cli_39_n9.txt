java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class OptionParserTest {
    @Parameters
    public static List<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"existingFile.txt", new FileInputStream("existingFile.txt")},
                {"nonExistingFile.txt", null} // test for non-existing file
        });
    }

    private final String filename;
    private final FileInputStream file;

    public OptionParserTest(String filename, FileInputStream file) {
        this.filename = filename;
        this.file = file;
    }

    @Test
    public void testOptionParser() throws IOException {
        Options options = new Options();
        options.addOption(Option.builder("f").hasArg().type(FileInputStream.class).build());
        CommandLine cline = new DefaultParser().parse(options, new String[]{"-f", filename});
        FileInputStream parsedFile = (FileInputStream) cline.getParsedOptionValue("f");

        if (file == null) {
            if (parsedFile!= null) {
                fail("Expected null but got " + parsedFile);
            }
        } else {
            if (parsedFile == null) {
                fail("Expected " + filename + " but got null");
            } else {
                if (!parsedFile.getChannel().isOpen()) {
                    fail("Expected " + filename + " to be open but it's not");
                }
            }
        }
    }
}
