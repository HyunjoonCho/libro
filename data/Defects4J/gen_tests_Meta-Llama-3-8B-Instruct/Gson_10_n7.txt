java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonWriter;
import com.google.gson.LongToStringTypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.junit.Test;

import java.io.JsonWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;
import java.util.Date;

import static org.junit.Assert.assertEquals;

public class JsonAdapterAnnotationOnFieldsTest {

    @Test
    public void testPrimitiveFieldAnnotationTakesPrecedenceOverDefault() {
        Gson gson = new GsonBuilder().registerTypeAdapterFactory(new LongToStringTypeAdapterFactory()).create();
        String json = gson.toJson(new GadgetWithPrimitivePart(42));
        assertEquals("{\"part\":\"42\"}", json);
        GadgetWithPrimitivePart gadget = gson.fromJson(json, GadgetWithPrimitivePart.class);
        assertEquals(42, gadget.part);
    }

    public static class GadgetWithPrimitivePart {
        @JsonAdapter(LongToStringTypeAdapterFactory.class)
        final long part;

        public GadgetWithPrimitivePart(long part) {
            this.part = part;
        }
    }

    public static class LongToStringTypeAdapterFactory implements TypeAdapterFactory {
        static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {
            @Override
            public void write(JsonWriter out, Long value) throws IOException {
                out.value(value.toString());
            }

            @Override
            public Long read(JsonReader in) throws IOException {
                return in.nextLong();
            }
        };

        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            Class<?> cls = type.getRawType();
            if (Long.class.isAssignableFrom(cls)) {
                return (TypeAdapter<T>) ADAPTER;
            } else if (long.class.isAssignableFrom(cls)) {
                return (TypeAdapter<T>) ADAPTER;
            }
            throw new IllegalStateException("Non-long field of type " + type + " annotated with @JsonAdapter(LongToStringTypeAdapterFactory.class)");
        }
    }
}
