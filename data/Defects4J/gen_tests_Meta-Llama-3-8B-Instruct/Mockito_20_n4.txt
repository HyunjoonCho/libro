
public class AbstractClassMockingTest {

    @Test
    public void testAbstractClassMocking() {
        // Example 1: Fake with trivial Logic
        AbstractUserAccount fakeUserAccount = Mockito.mock(AbstractUserAccount.class);
        Mockito.when(fakeUserAccount.getEmails()).thenReturn(Arrays.asList("email1", "email2"));
        Mockito.when(fakeUserAccount.addEmail("email3")).thenReturn(null);
        assertEquals(Arrays.asList("email1", "email2"), fakeUserAccount.getEmails());
        fakeUserAccount.addEmail("email3");
        assertEquals(Arrays.asList("email1", "email2", "email3"), fakeUserAccount.getEmails());

        // Example 2: callback-style API
        AbstractAccountService fakeAccountService = Mockito.mock(AbstractAccountService.class);
        UserAccount account = new UserAccount();
        Mockito.when(fakeAccountService.getAccount("id", Mockito.any(AsyncCallback.class))).thenAnswer(new Answer<Void>() {
            @Override
            public Void answer(InvocationOnMock invocation) throws Throwable {
                AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) invocation.getArguments()[1];
                callback.onSuccess(account);
                return null;
            }
        });
        // rest of the test

        // Example 3: Uninteresting parameters
        AbstractAccountRpcService fakeAccountRpcService = Mockito.mock(AbstractAccountRpcService.class);
        Mockito.when(fakeAccountRpcService.getAccount("id")).thenReturn(new Future<Account>() {
            @Override
            public Account get() {
                return new Account();
            }
        });
        // rest of the test
    }
}

abstract class AbstractUserAccount implements UserAccount {
    private List<String> emails = new ArrayList<>();

    @Override
    public void addEmail(String email) {
        emails.add(email);
    }

    @Override
    public List<String> getEmails() {
        return ImmutableList.copyOf(emails);
    }
}

interface UserAccount {
    void addEmail(String email);
    List<String> getEmails();
}

abstract class AbstractAccountService implements AccountService {
    @Override
    public void getAccount(String id, AsyncCallback<UserAccount> callback) {
        callback.onSuccess(getAccount(id));
    }

    abstract UserAccount getAccount(String id);
}

interface AccountService {
    void getAccount(String id, AsyncCallback<UserAccount> callback);
}

abstract class AbstractAccountRpcService implements AccountRpcService {
    @Override
    public Future<Account> getAccount(RpcContext context, String id) {
        checkNotNull(context);  // Common sanity test. Don't have to repeat it in tests.
        return getAccount(id);
    }

    abstract Future<Account> getAccount(String id);
}

interface AccountRpcService {
    Future<Account> getAccount(RpcContext context, String id);
}
