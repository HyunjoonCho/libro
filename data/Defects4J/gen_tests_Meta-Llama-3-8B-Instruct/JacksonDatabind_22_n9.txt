
public class CustomSerializerTest {

    @Test
    public void testCustomSerializerNotUsedWhenJsonValuePresent() {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(MyObject.class, new MySerializer());
        mapper.registerModule(module);

        MyObject obj = new MyObject();
        String json = mapper.writeValueAsString(obj);

        // This should use the custom serializer, but it doesn't because of the @JsonValue annotation
        assertEquals("{\"id\":1}", json);
    }
}

class MyObject {
    @JsonValue
    public int getId() {
        return 1;
    }
}

class MySerializer extends JsonSerializer<MyObject> {
    @Override
    public void serialize(MyObject value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeString("expected serialized value");
    }
}
