
import org.junit.Test;

public class SingletonGetterTest {
    @Test
    public void testSingletonGetterPreventsUnusedClassRemoval() throws Exception {
        // Create a class with a singleton getter
        goog.provide("foo");
        var foo = function() { this.values = []; };
        goog.addSingletonGetter(foo);

        // Add a method to the class
        foo.prototype.add = function(value) { this.values.push(value) };

        // Compile the code using Closure Compiler
        // Note: This step is not actually possible in a JUnit test, so we'll simulate it by checking the resulting JavaScript code
        String expectedCode = "function($ctor$$) {\n" +
                " $ctor$$.$getInstance$ = function $$ctor$$$$getInstance$$() {\n" +
                " return $ctor$$.$instance_$ || ($ctor$$.$instance_$ = new $ctor$$)\n" +
                " }\n" +
                "}(function() {\n" +
                "});";

        // Verify that the code is not optimized away
        String compiledCode = // simulate compilation here
        assertEquals(expectedCode, compiledCode);
    }
}
