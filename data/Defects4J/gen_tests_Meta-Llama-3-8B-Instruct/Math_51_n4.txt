java
import org.junit.Test;
import org.junit.Assert;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class RegulaFalsiSolverTest {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{{100, 1, 10}});
    }

    private final int maxEvaluations;
    private final double lowerBound;
    private final double upperBound;

    public RegulaFalsiSolverTest(int maxEvaluations, double lowerBound, double upperBound) {
        this.maxEvaluations = maxEvaluations;
        this.lowerBound = lowerBound;
        this.upperBound = upperBound;
    }

    @Test
    public void testRegulaFalsiSolver() {
        UnivariateRealFunction f = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateRealSolver solver = new RegulaFalsiSolver();
        try {
            double root = solver.solve(maxEvaluations, f, lowerBound, upperBound);
            fail("RegulaFalsiSolver should throw an exception");
        } catch (Exception e) {
            assertEquals("illegal state: maximal count (" + maxEvaluations + ") exceeded: evaluations", e.getMessage());
        }
    }
}
