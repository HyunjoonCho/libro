
public void testEbeMultiplyWithNaN() {
    OpenMapRealVector v = new OpenMapRealVector(2);
    v.put(0, Double.NaN);
    v.put(1, 1.0);
    OpenMapRealVector result = v.ebeMultiply(new RealVector(new double[]{1.0, 2.0}));
    assertEquals(Double.NaN, result.getEntry(0));
}

public void testEbeMultiplyWithInfinity() {
    OpenMapRealVector v = new OpenMapRealVector(2);
    v.put(0, Double.POSITIVE_INFINITY);
    v.put(1, 1.0);
    OpenMapRealVector result = v.ebeMultiply(new RealVector(new double[]{1.0, 2.0}));
    assertEquals(Double.POSITIVE_INFINITY, result.getEntry(0));
}

public void testEbeDivideWithNaN() {
    OpenMapRealVector v = new OpenMapRealVector(2);
    v.put(0, 1.0);
    v.put(1, Double.NaN);
    OpenMapRealVector result = v.ebeDivide(new RealVector(new double[]{1.0, 2.0}));
    assertEquals(Double.NaN, result.getEntry(1));
}

public void testEbeDivideWithInfinity() {
    OpenMapRealVector v = new OpenMapRealVector(2);
    v.put(0, 1.0);
    v.put(1, Double.POSITIVE_INFINITY);
    OpenMapRealVector result = v.ebeDivide(new RealVector(new double[]{1.0, 2.0}));
    assertEquals(Double.POSITIVE_INFINITY, result.getEntry(0));
}
