java
import org.junit.Test;
import org.junit.runner.RunWith;
import com.google.common.collect.Maps;
import com.google.common.collect.Sets;
import com.google.common.collect.TreeMap;
import com.google.common.collect.TreeSet;

import java.util.Map;
import java.util.Set;

import static org.junit.Assert.*;

@RunWith(org.junit.runners.JUnit4.class)
public class CompilerPropertyRemovalTest {

    @Test
    public void testPropertyRemoval() {
        Map<String, Object> map = Maps.newHashMap();
        map.put("f1", new Object() {
            public boolean alwaysCall = true;
            public void call() {
                System.out.println("f1");
            }
        });
        map.put("f2", new Object() {
            public void call() {
                System.out.println("f2");
            }
        });

        Object obj = map.get("f1");
        assertEquals(true, obj.getClass().getDeclaredField("alwaysCall").getBoolean(obj));
        assertEquals(true, map.get("f1").getClass().getDeclaredMethod("call").isAnnotationPresent(Override.class));

        Set<String> keys = new TreeSet<>(map.keySet());
        String key = keys.toArray(new String[0])[0];
        map.get(key).call();

        // Remove the property
        map.get(key).getClass().getDeclaredField("alwaysCall").setAccessible(true);
        map.get(key).getClass().getDeclaredField("alwaysCall").set(map.get(key), false);

        map.get(key).call();
    }
}
