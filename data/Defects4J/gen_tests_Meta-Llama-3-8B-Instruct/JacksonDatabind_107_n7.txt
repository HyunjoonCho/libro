
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.DeserializationContext;
import com.fasterxml.jackson.databind.deser.DefaultDeserializationContext;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.introspect.Annotated;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import com.fasterxml.jackson.databind.util.TypeIdResolver;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Type;

import static org.junit.Assert.assertSame;

public class DeserializationProblemHandlerTest {

    @Test
    public void testDeserializationWithDeserializationProblemHandler() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping();
        DeserializationContext context = new DefaultDeserializationContext(mapper.getTypeFactory());
        DeserializationProblemHandler handler = new DeserializationProblemHandler() {
            @Override
            public Object handleUnknownTypeId(DeserializationContext ctxt, JavaType type, String typeId, TypeIdResolver typeIdRes, String typeDesc) {
                return Void.class;
            }
        };
        TypeReference<?> typeRef = new TypeReference<>(){};
        Type type = typeRef.getType();
        Writer writer = new StringWriter();
        mapper.writeValue(writer, type);
        String json = writer.toString();
        assertSame(Void.TYPE, handler.handleUnknownTypeId(context, null, "type", null, null));
    }
}
