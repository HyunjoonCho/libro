java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class SimplexSolverTest {

    @Test
    public void testSimplexSolver() {
        // Create the linear objective function
        double[] coefficients = new double[]{7, 3, 0, 0};
        LinearObjectiveFunction kritFcia = new LinearObjectiveFunction(coefficients, 0);

        // Create the linear constraints
        Collection<LinearConstraint> podmienky = new ArrayList<>();
        podmienky.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.LEQ, 1));
        podmienky.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.LEQ, 1));
        podmienky.add(new LinearConstraint(new double[]{3, 0, -5, 0}, Relationship.LEQ, 0));
        podmienky.add(new LinearConstraint(new double[]{2, 0, 0, -5}, Relationship.LEQ, 0));
        podmienky.add(new LinearConstraint(new double[]{0, 2, -5, 0}, Relationship.LEQ, 0));
        podmienky.add(new LinearConstraint(new double[]{0, 3, 0, -5}, Relationship.LEQ, 0));
        podmienky.add(new LinearConstraint(new double[]{3, 2, 0, 0}, Relationship.LEQ, 5));
        podmienky.add(new LinearConstraint(new double[]{2, 3, 0, 0}, Relationship.LEQ, 5));

        // Solve the linear programming problem
        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair result = solver.optimize(kritFcia, podmienky, GoalType.MAXIMIZE, true);

        // Assert the result
        assertEquals(1, result.getPoint()[0], 0.01); // a = 1
        assertEquals(0.5, result.getPoint()[1], 0.01); // b = 0.5
        assertEquals(8.5, result.getValue(), 0.01); // value = 8.5
    }
}
