
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;

public class TestSingletonGetter {
    @Test
    public void testSingletonGetterPreventsUnusedClassRemoval() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilerOptions.CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setOutputFile("default.js");
        options.setUseClosureLibrary(true);
        options.setFormatting(CompilerOptions.FormattedCode.PRETTY_PRINT);
        options.setPrintInputDelimiter(true);
        options.setWarningLevel(CompilerOptions.WarningLevel.VERBOSE);
        options.setDebug(true);

        String code = "goog.provide('foo');\n" +
                "var foo = function() { this.values = []; }; \n" +
                "goog.addSingletonGetter(foo);\n" +
                "foo.prototype.add = function(value) { this.values.push(value); };\n";

        Result result = compiler.compile(code, options);

        // Assert that the code is not removed
        // Note: This test will fail if the code is optimized away
        String compiledCode = result.toSource();
        assertNotEquals("{}", compiledCode);
    }
}
