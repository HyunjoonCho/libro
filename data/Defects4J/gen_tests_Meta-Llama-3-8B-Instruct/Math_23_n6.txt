java
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.junit.Test;
import static org.junit.Assert.*;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizer() {
        // Set up the optimization problem
        final UnivariateRealFunction function = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                // Simulate a function with multiple local minima
                return x * x - 1;
            }
        };

        // Set the initial search range
        double min = -2.0;
        double max = 2.0;

        // Initialize the optimizer
        BrentOptimizer optimizer = new BrentOptimizer();
        double result = optimizer.optimize(function, min, max).getOptimum();

        // Check that the result is the best point found
        double previousValue = Double.NEG_INFINITY;
        for (double x : new double[]{-1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0, -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9}) {
            double value = function.value(x);
            if (value < previousValue) {
                assertEquals(x, result, 0.001);
            }
            previousValue = Math.min(previousValue, value);
        }
    }
}
