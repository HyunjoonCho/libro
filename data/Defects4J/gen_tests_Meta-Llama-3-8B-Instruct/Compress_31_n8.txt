java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.SequenceInputStream;
import java.util.Arrays;
import java.util.Collection;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;

import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class TestTarArchiveInputStream {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {new String[]{"05412{NUL}11"}},
        });
    }

    private String input;

    public TestTarArchiveInputStream(String input) {
        this.input = input;
    }

    @Test
    public void testTarArchiveInputStream() throws IOException {
        File file = File.createTempFile("test", ".tgz");
        try (OutputStream out = new FileOutputStream(file)) {
            TarArchiveOutputStream tarOut = new TarArchiveOutputStream(out);
            TarArchiveEntry entry = new TarArchiveEntry("test");
            tarOut.putArchiveEntry(entry);
            tarOut.write(input.getBytes());
            tarOut.closeEntry();
            tarOut.close();
        }

        try (InputStream in = new FileInputStream(file)) {
            TarArchiveInputStream tarIn = new TarArchiveInputStream(new GZIPInputStream(in));
            TarArchiveEntry entry = tarIn.getNextTarEntry();
            if (entry == null) {
                fail("Expected TarArchiveEntry");
            }
        }
    }
}
