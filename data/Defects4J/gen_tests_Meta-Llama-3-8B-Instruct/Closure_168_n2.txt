public void testIssue() {
    // Test 1: Correct error reporting
    try {
        var makeClass = function(protoMethods) {
            var clazz = function() {
                this.initialize.apply(this, arguments);
            }
            for (var i in protoMethods) {
                clazz.prototype[i] = protoMethods[i];
            }

            return clazz;
        }

        var Person = function(name) {}
        Person = makeClass({
            '@lends Person.prototype': {
                '@this {Person}': function(name) {
                    this.name = name;
                },
                '@this {Person}': function() {
                    return this.name;
                },
                '@param {string} message @this {Person}': function(message) {
                    window.console.log(this.getName(1) +'says:'+ message);
                }
            }
        });

        var joe = new Person('joe');
        joe.say('hi');
        var jane = new Person('jane');
        jane.say('hello');
    } catch (e) {
        assertEquals("Function Person.prototype.say: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).", e.getMessage());
    }

    // Test 2: Incorrect error reporting
    try {
        var makeClass = function(protoMethods) {
            var clazz = function() {
                this.initialize.apply(this, arguments);
            }
            for (var i in protoMethods) {
                clazz.prototype[i] = protoMethods[i];
            }

            return clazz;
        }

        var Person = function(name) {}
        Person = makeClass({
            '@lends Person.prototype': {
                '@this {Person}': function(name) {
                    this.name = name;
                },
                '@this {Person}': function() {
                    return this.name;
                },
                '@param {string} message @this {Person}': function(message) {
                    var self = this;
                    setTimeout(function() {
                        window.console.log(self.getName(1) +'says:'+ message);
                    }, 500);
                }
            }
        });

        var joe = new Person('joe');
        joe.say('hi');
        var jane = new Person('jane');
        jane.say('hello');
    } catch (e) {
        // Expected error is not thrown
        fail("Expected an error to be thrown, but it was not");
    }
}