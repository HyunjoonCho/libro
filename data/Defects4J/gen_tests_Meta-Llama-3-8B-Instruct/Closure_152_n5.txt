java
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import java.io.File;

import static org.junit.Assert.fail;

public class ClosureCompilerTest {
    @Test
    public void testResolveTypes() {
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(CompilerOptions.WarningLevel.ERROR);
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);
        Compiler compiler = new Compiler(options);

        // Create a source file
        String source = "function foo() {\n" +
                "  var x = 1;\n" +
                "  var y = x;\n" +
                "  return y;\n" +
                "}";

        SourceFile sourceFile = SourceFile.fromSource(source, "test.js");

        try {
            compiler.compile(sourceFile);
            fail("Compilation should have failed with a ClassCastException");
        } catch (RuntimeException e) {
            // Check if the exception is a ClassCastException
            if (!(e.getCause() instanceof ClassCastException)) {
                fail("Expected a ClassCastException, but got " + e.getCause().getClass().getName());
            }
        }
    }
}
