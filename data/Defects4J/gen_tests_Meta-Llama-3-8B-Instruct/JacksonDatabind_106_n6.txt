public void testTreeTraversingParser() {
    TreeTraversingParser parser = new TreeTraversingParser();
    assertEquals(0, parser.parseInt("0"));
    assertEquals(10, parser.parseInt("10"));
    try {
        parser.parseInt("1e10");
        fail("Expected OverflowException for '1e10'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("2147483648");
        fail("Expected OverflowException for '2147483648'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("2147483649");
        fail("Expected OverflowException for '2147483649'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("2147483647");
        fail("Expected OverflowException for '2147483647'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("-2147483648");
        fail("Expected OverflowException for '-2147483648'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("-2147483649");
        fail("Expected OverflowException for '-2147483649'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("-4294967295");
        fail("Expected OverflowException for '-4294967295'");
    } catch (JsonMappingException e) {
        // expected
    }
    assertEquals(0, parser.parseInt("0.1"));
    assertEquals(1, parser.parseInt("1"));
    assertEquals(2, parser.parseInt("1.9999999999999999"));
    try {
        parser.parseInt("true");
        fail("Expected MismatchedInputException for 'true'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("{}");
        fail("Expected MismatchedInputException for '{}'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("[]");
        fail("Expected MismatchedInputException for '[]'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("[0]");
        fail("Expected MismatchedInputException for '[0]'");
    } catch (JsonMappingException e) {
        // expected
    }
    assertEquals(0, parser.parseInt("0"));
    assertEquals(10, parser.parseInt("10"));
    try {
        parser.parseInt("1e4");
        fail("Expected InvalidFormatException for '1e4'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("1e10");
        fail("Expected InvalidFormatException for '1e10'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("1e-1");
        fail("Expected InvalidFormatException for '1e-1'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("2147483648");
        fail("Expected InvalidFormatException for '2147483648'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("2147483649");
        fail("Expected InvalidFormatException for '2147483649'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("-2147483649");
        fail("Expected InvalidFormatException for '-2147483649'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("-4294967295");
        fail("Expected InvalidFormatException for '-4294967295'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("0.1");
        fail("Expected InvalidFormatException for '0.1'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("1.9");
        fail("Expected InvalidFormatException for '1.9'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("1.9999999999999999");
        fail("Expected InvalidFormatException for '1.9999999999999999'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("true");
        fail("Expected InvalidFormatException for 'true'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("{}");
        fail("Expected InvalidFormatException for '{}'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("[]");
        fail("Expected InvalidFormatException for '[]'");
    } catch (JsonMappingException e) {
        // expected
    }
    try {
        parser.parseInt("[0]");
        fail("Expected InvalidFormatException for '[0]'");
    } catch (JsonMappingException e) {
        // expected
    }
}