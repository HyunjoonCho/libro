java
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TreeTraversingParserTest {

    private final ObjectMapper mapper = new ObjectMapper();
    private final JsonNodeFactory factory = JsonNodeFactory.instance;

    @Test
    public void testTreeTraversingParser() {
        assertEquals(0, parseAndCompare("0"));
        assertEquals(10, parseAndCompare("10"));
        assertEquals(10000, parseAndCompare("10000"));
        assertEquals(2147483647, parseAndCompare("2147483647"));
        assertEquals(0, parseAndCompare("1e-1"));
        assertEquals(-2147483648, parseAndCompare("2147483648"));
        assertEquals(-2147483647, parseAndCompare("2147483649"));
        assertEquals(2147483647, parseAndCompare("-2147483649"));
        assertEquals(1, parseAndCompare("-4294967295"));
        assertEquals(0, parseAndCompare("0.1"));
        assertEquals(1, parseAndCompare("1.9"));
        assertEquals(2, parseAndCompare("1.9999999999999999"));
        assertEquals("MismatchedInputException", parseAndCompare("true"));
        assertEquals("MismatchedInputException", parseAndCompare("{}"));
        assertEquals("MismatchedInputException", parseAndCompare("[]"));
        assertEquals("MismatchedInputException", parseAndCompare("[0]"));
        assertEquals("0", parseAndCompare("\"0\""));
        assertEquals(10, parseAndCompare("\"10\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"1e4\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"1e10\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"1e-1\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"2147483648\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"2147483649\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"-2147483649\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"-4294967295\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"0.1\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"1.9\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"1.9999999999999999\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"true\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"{}\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"[]\""));
        assertEquals("InvalidFormatException", parseAndCompare("\"[0]\""));
    }

    private int parseAndCompare(String json) {
        try {
            JsonNode tree = mapper.readTree(json);
            int result = mapper.readValue(tree, Integer.class);
            return result;
        } catch (Exception e) {
            return e.getMessage().split(" ")[1];
        }
    }
}
