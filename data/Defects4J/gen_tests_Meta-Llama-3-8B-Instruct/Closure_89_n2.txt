java
import org.junit.Test;

public class TestCompiler {
    @Test
    public void testRemoveFunctionProperties() {
        // Set up the expected behavior
        var f1 = new Function() {
            public void call() {
                System.out.println("f1");
            }
        };
        f1.alwaysCall = true;
        var f2 = new Function() {
            public void call() {
                System.out.println("f2");
            }
        };

        // Compile the code
        var compiledCode = compileCode("var f1 = function() { alert('f1'); }; f1.alwaysCall = true; var f2 = function() { alert('f2'); };");

        // Check if the property is still present
        var f1Object = getFunctionObject(compiledCode, "f1");
        assert(f1Object!= null);
        assert(!f1Object.hasProperty("alwaysCall")); // Verify that the property is missing

        // Call the function
        var b = f1Object;
        b.call();
    }

    // Helper methods to compile and get the function object
    private String compileCode(String code) {
        // Implement the compiler logic here
        return code;
    }

    private Object getFunctionObject(String code, String functionName) {
        // Implement the logic to get the function object from the compiled code
        return null;
    }
}
