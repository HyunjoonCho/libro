java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.zip.ZipArchiveOutputStream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;

@RunWith(Parameterized.class)
public class ZipArchiveOutputStreamTest {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {true, true, 0x0400}, // deflated, zip64, version 2
                {true, false, 0x0200}, // deflated, not zip64, version 2
                {false, true, 0x0200}, // stored, zip64, version 2
                {false, false, 0x0400}, // stored, not zip64, version 2
        });
    }

    private final boolean deflated;
    private final boolean zip64;
    private final int expectedVersion;

    public ZipArchiveOutputStreamTest(boolean deflated, boolean zip64, int expectedVersion) {
        this.deflated = deflated;
        this.zip64 = zip64;
        this.expectedVersion = expectedVersion;
    }

    @Test
    public void testVersionNeededToExtract() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipOut = new ZipArchiveOutputStream(bos);
        zipOut.setUseZip64(zip64);
        zipOut.setDeflate(deflated);
        //... create a zip entry...
        int version = zipOut.getVersionNeededToExtract();
        assertEquals(expectedVersion, version);
    }
}
