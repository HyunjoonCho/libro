
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.junit.Test;
import org.junit.Assert;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizer() {
        BrentOptimizer optimizer = new BrentOptimizer();
        // Set up your optimization problem here
        // Assume you have a function f(x) that you want to minimize
        double[] bounds = new double[]{0, 10};
        double initialGuess = 5;
        optimizer.optimize(new UnivariateFunction() {
            @Override
            public double value(double x) {
                return f(x); // your function here
            }
        }, bounds, initialGuess);

        // Check if the last evaluated point is indeed the best one
        double lastX = optimizer.getBestPoint();
        double lastValue = optimizer.getBestValue();
        // Check if lastX is the best point
        double nextX = lastX - 0.1;
        double nextValue = f(nextX);
        Assert.assertTrue(lastValue <= nextValue);
    }
}
