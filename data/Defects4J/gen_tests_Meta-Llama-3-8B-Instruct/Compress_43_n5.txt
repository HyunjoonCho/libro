java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import static org.junit.Assert.assertEquals;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore("javax.crypto.*")
@SuppressStaticInitializationFor("org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream")
public class ZipArchiveOutputStreamTest {

    @Test
    public void testVersionNeededToExtract() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zip = new ZipArchiveOutputStream(bos);
        // Create a zip file with a single entry
        zip.putNextEntry("entry", "entry".getBytes());
        zip.close();

        // Read the zip file and get the local header
        byte[] localHeader = bos.toByteArray();
        int versionNeeded = ((short) (localHeader[26] << 8 | localHeader[27]));

        // Calculate the expected version needed to extract
        int zipMethod = 8; // Deflate compression
        boolean zip64 = false;
        int expectedVersionNeeded = versionNeededToExtract(zipMethod, zip64);

        assertEquals(expectedVersionNeeded, versionNeeded);
    }

    private int versionNeededToExtract(int zipMethod, boolean zip64) {
        // Simulate the versionNeededToExtract method from the bug report
        if (zip64) {
            return ZIP64_MIN_VERSION;
        }
        if (isDeflatedToOutputStream(zipMethod)) {
            return DATA_DESCRIPTOR_MIN_VERSION;
        }
        return INITIAL_VERSION;
    }

    private boolean isDeflatedToOutputStream(int zipMethod) {
        return zipMethod == 8; // Deflate compression
    }

    private static final int ZIP64_MIN_VERSION = 2;
    private static final int DATA_DESCRIPTOR_MIN_VERSION = 2;
    private static final int INITIAL_VERSION = 1;
}
