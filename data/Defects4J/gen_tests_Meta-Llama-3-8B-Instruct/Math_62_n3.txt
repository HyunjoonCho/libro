public void testBrentOptimizerConvergenceChecker() {
    BrentOptimizer optimizer = new BrentOptimizer();
    optimizer.setConvergenceChecker(new RelativeFirstOrderOptimumChecker(1e-10));
    try {
        optimizer.optimize(new AbstractUnivariateFunction() {
            public double value(double x) {
                return Math.sin(x);
            }
        });
        fail("ConvergenceChecker should throw an exception");
    } catch (ConvergenceException e) {
        // Expected exception
    }
}

This test method creates a `BrentOptimizer` instance and sets its convergence checker to a `RelativeFirstOrderOptimumChecker` with a tolerance of 1e-10. It then attempts to optimize a simple function using the `optimize` method, but expects a `ConvergenceException` to be thrown because the convergence checker will detect that the optimization has not converged.