java
import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.assertEquals;

public class HelpFormatterTest {

    @Test
    public void testFindWrapPos() {
        String text = "This is a very long description that should be wrapped correctly " +
                "but is not because of a bug in the findWrapPos method. This line " +
                "should be wrapped at 20 characters but is not. This is a problem.";
        int width = 20;
        String[] lines = text.split("\n");
        for (int i = 1; i < lines.length; i++) {
            int startPos = 0;
            int pos = HelpFormatterTest.class.getMethod("findWrapPos", String.class, int.class, int.class).invoke(null, lines[i], width, startPos);
            assertEquals(pos, width);
        }
    }

    protected int findWrapPos(String text, int width, int startPos) {
        // implementation of the corrected method
        int pos = -1;

        // the line ends before the max wrap pos or a new line char found
        if (((pos = text.indexOf('\n', startPos))!= -1 && pos <= width)
                || ((pos = text.indexOf('\t', startPos))!= -1 && pos <= width)) {
            return pos + 1;
        } else if ((width) >= text.length()) {
            return -1;
        }

        // look for the last whitespace character before startPos+width
        pos = width;

        char c;

        while ((pos >= startPos) && ((c = text.charAt(pos))!='')
                && (c!= '\n') && (c!= '\r')) {
            --pos;
        }

        // if we found it - just return
        if (pos > startPos) {
            return pos;
        }

        // must look for the first whitespace character after startPos + width
        pos = startPos + width;

        while ((pos <= text.length()) && ((c = text.charAt(pos))!='')
                && (c!= '\n') && (c!= '\r')) {
            ++pos;
        }

        return (pos == text.length())? (-1) : pos;
    }
}
