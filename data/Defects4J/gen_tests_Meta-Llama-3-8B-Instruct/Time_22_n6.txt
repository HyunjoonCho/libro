java
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TestDurationToPeriod {

    @Test
    public void testDurationToPeriodWithFixedTimeZone() {
        DateTimeZone.setDefault(DateTimeZone.forID("GMT"));
        System.out.println("Timezone: " + DateTimeZone.getDefault());

        Duration aDuration = new Duration(30 * DateTimeConstants.MILLIS_PER_HOUR + 50 * DateTimeConstants.MILLIS_PER_MINUTE + 14 * DateTimeConstants.MILLIS_PER_SECOND);
        System.out.println("Duration before: " + aDuration);
        Period period = aDuration.toPeriod();
        System.out.println("Period after: " + period);

        assertEquals(1, period.getYears());
        assertEquals(0, period.getMonths());
        assertEquals(6, period.getDays());
        assertEquals(50, period.getHours());
        assertEquals(14, period.getMinutes());
        assertEquals(0, period.getSeconds());
    }

    @Test
    public void testDurationToPeriodWithDSTTimeZone() {
        DateTimeZone.setDefault(DateTimeZone.forID("America/Chicago"));
        System.out.println("Timezone: " + DateTimeZone.getDefault());

        Duration aDuration = new Duration(30 * DateTimeConstants.MILLIS_PER_HOUR + 50 * DateTimeConstants.MILLIS_PER_MINUTE + 14 * DateTimeConstants.MILLIS_PER_SECOND);
        System.out.println("Duration before: " + aDuration);
        Period period = aDuration.toPeriod();
        System.out.println("Period after: " + period);

        assertEquals(0, period.getYears());
        assertEquals(0, period.getMonths());
        assertEquals(30, period.getDays());
        assertEquals(50, period.getHours());
        assertEquals(14, period.getMinutes());
        assertEquals(0, period.getSeconds());
    }
}
