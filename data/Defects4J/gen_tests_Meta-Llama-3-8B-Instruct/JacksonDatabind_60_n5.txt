java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class JsonValueTest {

    @InjectMocks
    private ObjectMapper mapper;

    @Before
    public void setup() {
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();
    }

    @Test
    public void testPolymorphicTypeLoss() throws Exception {
        RemoteCall remoteCall = new RemoteCall();
        remoteCall.setBytes(new byte[]{1, 2, 3});

        String json = mapper.writeValueAsString(remoteCall);
        assertEquals("args:[[" + System.lineSeparator() + "[B," + System.lineSeparator() + "AKQEAAnw8fLz9AAAAgA=" + "],[" + System.lineSeparator() + "net.sf.lipermi.call.RemoteInstance," + System.lineSeparator() + "{\"instanceId\":\"b0e15098-f49e-4328-b072-fc5df42799bd\",\"className\":\"com.ubitricity.devices.common.tasks.ResponseReceiver\"}]]", json);

        RemoteCall deserializedRemoteCall = mapper.readValue(json, RemoteCall.class);
        assertEquals(1, deserializedRemoteCall.getBytes()[0]);
        assertEquals(2, deserializedRemoteCall.getBytes()[1]);
        assertEquals(3, deserializedRemoteCall.getBytes()[2]);
    }
}
