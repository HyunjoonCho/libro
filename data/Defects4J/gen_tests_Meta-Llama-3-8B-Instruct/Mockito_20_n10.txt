java
public class MockitoTest {
    @Test
    public void testAbstractClassMocking() {
        // Example 1
        UserAccount userAccount = mock(FakeUserAccount.class);
        when(userAccount.getEmails()).thenReturn(Arrays.asList("email1", "email2"));
        when(userAccount.addEmail("email3")).thenReturn(userAccount);
        assertEquals(Arrays.asList("email1", "email2", "email3"), userAccount.getEmails());

        // Example 2
        AccountService accountService = mock(MockAccountService.class);
        when(accountService.getAccount(anyString(), any(AsyncCallback.class))).thenReturn(new UserAccount());
        accountService.getAccount("id", new AsyncCallback<UserAccount>() {
            @Override
            public void onFailure(Throwable caught) {
                fail();
            }

            @Override
            public void onSuccess(UserAccount result) {
                // do nothing
            }
        });

        // Example 3
        AccountRpcService accountRpcService = mock(MockAccountRpcService.class);
        when(accountRpcService.getAccount(any(RpcContext.class), anyString())).thenReturn(FutureTask.returning(new Account()));
        accountRpcService.getAccount(null, "id");
    }
}

abstract class FakeUserAccount implements UserAccount {
    private final List<String> emails = new ArrayList<>();

    @Override
    public void addEmail(String email) {
        emails.add(email);
    }

    @Override
    public List<String> getEmails() {
        return ImmutableList.copyOf(emails);
    }
}

interface UserAccount {
    List<String> getEmails();
    void addEmail(String email);
}

interface AccountService {
    void getAccount(String id, AsyncCallback<UserAccount> callback);
}

interface AccountRpcService {
    Future<Account> getAccount(RpcContext context, String id);
}

abstract class MockAccountService implements AccountService {
    @Override
    public void getAccount(String id, AsyncCallback<UserAccount> callback) {
        callback.onSuccess(getAccount(id));
    }

    abstract UserAccount getAccount(String id);
}

abstract class MockAccountRpcService implements AccountRpcService {
    @Override
    public Future<Account> getAccount(RpcContext context, String id) {
        return getAccount(id);
    }

    abstract Future<Account> getAccount(String id);
}
