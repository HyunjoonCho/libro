java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class GsonSerializationTest {

    @Test
    public void testSerializationAndDeserializationOfClassWithGenericSuperclass() {
        Gson gson = new GsonBuilder().create();

        Bar bar1 = new Bar(1);
        String json = gson.toJson(bar1);

        try {
            Bar bar2 = gson.fromJson("{\"someField\":1}", Bar.class);
            assertEquals(bar1, bar2);
        } catch (JsonSyntaxException e) {
            fail("Expected successful deserialization, but got JsonSyntaxException: " + e.getMessage());
        }
    }
}

class Foo<T> {
    private final T someField;

    public Foo(T value) {
        this.someField = value;
    }

    public boolean equals(Object o) {
        if (!(o instanceof Foo)) {
            return false;
        } else {
            return someField.equals(((Foo<T>) o).someField);
        }
    }
}

class Bar extends Foo<Integer> {
    public Bar(Integer i) {
        super(i);
    }
}
