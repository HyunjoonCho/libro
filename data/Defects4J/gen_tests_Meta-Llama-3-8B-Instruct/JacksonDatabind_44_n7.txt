public void testPolymorphicTypeResolution() {
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXISTING_PROPERTY_NAME)
    @JsonSubTypes({@JsonSubTypes.Type(value = Child.class)})
    public interface Parent {
        String getProperty();
    }

    @JsonTypeName("child")
    public class Child extends Parent {
        @Override
        public String getProperty() {
            return "childProperty";
        }
    }

    @JsonTypeName("grandchild")
    public class GrandChild extends Child {
        @Override
        public String getProperty() {
            return "grandchildProperty";
        }
    }

    ObjectMapper mapper = new ObjectMapper();
    String json = "{\"type\":\"grandchild\"}";
    JsonNode node = mapper.readTree(json);
    Object result = mapper.treeToValue(node, Parent.class);

    assertEquals("grandchildProperty", ((Parent) result).getProperty());
}