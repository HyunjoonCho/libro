java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import static org.junit.Assert.assertArrayEquals;

@RunWith(Parameterized.class)
public class B64Test {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa", "YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==", "YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYQ==" },
                {"aaaaaaaaaa", "YWFhYWFhYWFhYQ==", "YWFhYWFhYWFhYQ==" },
                {"a", "YQ==", "YQ==" }
        });
    }

    private String input;
    private String expectedStatic;
    private String expectedInstance;

    public B64Test(String input, String expectedStatic, String expectedInstance) {
        this.input = input;
        this.expectedStatic = expectedStatic;
        this.expectedInstance = expectedInstance;
    }

    @Test
    public void testB64() throws IOException {
        byte[] inputBytes = input.getBytes(StandardCharsets.UTF_8);
        byte[] staticResult = Base64.encodeBase64(inputBytes);
        byte[] instanceResult = new Base64().encode(inputBytes);

        assertArrayEquals(expectedStatic.getBytes(StandardCharsets.UTF_8), staticResult);
        assertArrayEquals(expectedInstance.getBytes(StandardCharsets.UTF_8), instanceResult);
    }
}
