public void testIssue151() {
    DateTimeConstants.FEBRUARY;
    MonthDay isoLeap = new MonthDay(2, 29, ISOChronology.getInstanceUTC());
    assertEquals(MonthDay.of(2, 29), isoLeap);
    try {
        isoLeap.plusDays(2);
        fail("Expected IllegalFieldValueException");
    } catch (IllegalFieldValueException e) {
        assertEquals("Value 29 for dayOfMonth must be in the range [1,28]", e.getMessage());
    }
    try {
        isoLeap.plusMonths(1);
        fail("Expected IllegalFieldValueException");
    } catch (IllegalFieldValueException e) {
        assertEquals("Value 3 for monthOfYear must be in the range [1,12]", e.getMessage());
    }
    try {
        isoLeap.plusMonths(-1);
        fail("Expected IllegalFieldValueException");
    } catch (IllegalFieldValueException e) {
        assertEquals("Value 3 for monthOfYear must be in the range [1,12]", e.getMessage());
    }
    try {
        isoLeap.minusMonths(1);
        fail("Expected IllegalFieldValueException");
    } catch (IllegalFieldValueException e) {
        assertEquals("Value 3 for monthOfYear must be in the range [1,12]", e.getMessage());
    }
    try {
        isoLeap.minusMonths(-1);
        fail("Expected IllegalFieldValueException");
    } catch (IllegalFieldValueException e) {
        assertEquals("Value 3 for monthOfYear must be in the range [1,12]", e.getMessage());
    }
    try {
        isoLeap.minusDays(-1);
        fail("Expected IllegalFieldValueException");
    } catch (IllegalFieldValueException e) {
        assertEquals("Value 29 for dayOfMonth must be in the range [1,28]", e.getMessage());
    }
    assertEquals(MonthDay.of(2, 28), isoLeap.minusDays(1));
    assertEquals(MonthDay.of(3, 1), isoLeap.plusDays(1));
    assertEquals(MonthDay.of(2, 27), isoLeap.minusDays(2));
    assertEquals(MonthDay.of(2, 30), isoLeap.plusDays(2));
}