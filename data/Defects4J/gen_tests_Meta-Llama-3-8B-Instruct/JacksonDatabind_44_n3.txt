
public void testPolymorphicTypes() {
    @JsonTypeInfo(
            use = JsonTypeInfo.Id.CLASS,
            include = JsonTypeInfo.As.PROPERTY,
            property = "type"
    )
    public abstract class Animal {
        @JsonProperty("name")
        public String name;
    }

    @JsonSubTypes({
            @JsonSubTypes.Type(value = Dog.class)
    })
    public abstract class AnimalWithDefaultImpl extends Animal {
        @JsonProperty("defaultImpl")
        public default String getDefaultImpl() {
            return "defaultImpl";
        }
    }

    public class Dog extends AnimalWithDefaultImpl {
        @JsonProperty("name")
        public String name;
    }

    // Create a Dog object
    Dog dog = new Dog();
    dog.name = "Fido";

    // Serialize and deserialize the object
    String json = mapper.writeValueAsString(dog);
    Dog deserializedDog = mapper.readValue(json, Dog.class);

    // Assert that the properties from the base type are properly resolved
    assertEquals("Fido", deserializedDog.name);
    assertEquals("defaultImpl", deserializedDog.getDefaultImpl());
}
