java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

@RunWith(MockitoJUnitRunner.class)
public class MockitoAbstractClassTest {

    @Test
    public void testAbstractClass() {
        // Example 1: Fake with trivial logic
        UserAccount userAccount = Mockito.mock(FakeUserAccount.class);
        Mockito.when(userAccount.getEmails()).thenReturn(new ArrayList<>());
        Mockito.when(userAccount.addEmail("email")).thenReturn(userAccount);

        // Example 2: Callback-style API
        AccountService accountService = Mockito.mock(MockAccountService.class);
        Mockito.when(accountService.getAccount("id", Mockito.any(AsyncCallback.class)))
               .thenAnswer(invocation -> {
                    AsyncCallback<UserAccount> callback = invocation.getArgument(1);
                    callback.onSuccess(new FakeUserAccount());
                });

        // Example 3: Uninteresting parameters
        AccountRpcService accountRpcService = Mockito.mock(MockAccountRpcService.class);
        Mockito.when(accountRpcService.getAccount(Mockito.any(RpcContext.class), "id")).thenReturn(Mockito.mock(Future.class));
    }

    public static class FakeUserAccount implements UserAccount {
        private List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        public List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    public interface UserAccount {
        void addEmail(String email);
        List<String> getEmails();
    }

    public interface AccountService {
        void getAccount(String id, AsyncCallback<UserAccount> callback);
    }

    public interface AccountRpcService {
        Future<Account> getAccount(RpcContext context, String id);
    }
}
