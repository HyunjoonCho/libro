
public void testAbstractLeastSquares() {
    // Create a test instance of AbstractLeastSquares
    AbstractLeastSquares als = new AbstractLeastSquares();

    // Set the residuals and weights
    double[] residuals = new double[] {1.0, 2.0, 3.0};
    double[] weights = new double[] {0.5, 1.0, 2.0};

    // Calculate the chi square
    double chiSquare = als.getChiSquare(residuals, weights);

    // Calculate the RMS using the current implementation
    double rms = Math.sqrt(chiSquare / residuals.length);

    // Calculate the RMS using the corrected implementation
    double expectedRms = Math.sqrt(getCorrectedChiSquare(residuals, weights) / residuals.length);

    // Verify that the RMS values are equal
    assertEquals(expectedRms, rms, 0.00001);
}

// Helper method to calculate the corrected chi square
private double getCorrectedChiSquare(double[] residuals, double[] weights) {
    double chiSquare = 0.0;
    for (int i = 0; i < residuals.length; i++) {
        chiSquare += weights[i] * Math.pow(residuals[i], 2);
    }
    return chiSquare;
}
