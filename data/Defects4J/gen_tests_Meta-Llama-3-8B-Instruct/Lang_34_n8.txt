
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.lang.reflect.Field;
import java.util.concurrent.atomic.AtomicInteger;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

@RunWith(Parameterized.class)
public class ToStringStyleTest {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{{}});
    }

    @Before
    public void before() {
        AtomicInteger counter = new AtomicInteger();
        Field field = ToStringStyle.class.getDeclaredField("threadLocal");
        field.setAccessible(true);
        assertNull(field.get(null));
    }

    @Test
    public void testToStringStyle() {
        // use ToStringStyle or HashCodeBuilder
        //...
    }

    @After
    public void after() {
        AtomicInteger counter = new AtomicInteger();
        Field field = ToStringStyle.class.getDeclaredField("threadLocal");
        field.setAccessible(true);
        assertNull(field.get(null));
    }
}
