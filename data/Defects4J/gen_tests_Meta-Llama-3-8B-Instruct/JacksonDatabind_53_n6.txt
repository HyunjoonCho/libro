java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.ContextualKeyDeserializer;
import com.fasterxml.jackson.databind.deser.ContextualKeyDeserializerBase;
import com.fasterxml.jackson.databind.deser.std.BeanDeserializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import com.fasterxml.jackson.databind.type.TypeReferenceType;
import com.fasterxml.jackson.databind.util.NameTransformer;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.io.IOException;
import java.io.StringWriter;
import java.util.UUID;

import static org.junit.Assert.fail;

@RunWith(JUnit4.class)
public class TestIssue {

    @Test
    public void testJsonDeserialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);

        MyHashMap myHashMap = new MyHashMap();
        myHashMap.put(UUID.randomUUID(), new Foo());

        String json = mapper.writeValueAsString(myHashMap);
        System.out.println(json);

        MyHashMap result = mapper.readValue(json, MyHashMap.class);
        fail("Expected MyHashMap but got " + result.getClass());
    }

    public static class MyHashMap extends HashMap<UUID, Foo> {
        // custom logic using generics
    }

    public static class Foo implements MyCustomIdInterface {
        // implementation
    }

    public interface MyCustomIdInterface {
        String getId();
    }
}
