java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;
import org.powermock.reflect.Whitebox;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThrows;

@RunWith(PowerMockRunner.class)
@PowerMockIgnore("sun.reflect.*")
@SuppressStaticInitializationFor("org.apache.commons.cli.Option")
public class TestOptionParser {

    @Test
    public void testOptionParser() throws IOException {
        // Given
        String[] args = new String[]{"-f", "non_existent_file"};
        Options options = new Options();
        options.addOption(Option.builder("f").hasArg().type(FileInputStream.class).build());
        DefaultParser parser = new DefaultParser();

        // When
        CommandLine commandLine = parser.parse(options, args);
        FileInputStream file = (FileInputStream) commandLine.getParsedOptionValue("f");

        // Then
        assertNotNull(file);
        assertEquals("non_existent_file", file.getCanonicalPath());
    }

    @Test
    public void testOptionParser_file_does_not_exist() throws IOException {
        // Given
        String[] args = new String[]{"-f", "non_existent_file"};
        Options options = new Options();
        options.addOption(Option.builder("f").hasArg().type(FileInputStream.class).build());
        DefaultParser parser = new DefaultParser();

        // When
        assertThrows(FileNotFoundException.class, () -> parser.parse(options, args));
    }
}
