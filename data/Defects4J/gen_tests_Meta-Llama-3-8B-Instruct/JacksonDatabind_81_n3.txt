
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializationConfig;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JacksonPrimitiveRefinementTest {

    @Test
    public void testPrimitiveRefinement() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.USE_WRAPPER_NAME_PER_SIMPLE_CLASS);

        // Test 1: Ignore primitive/wrapper override
        String json1 = mapper.writeValueAsString(new TestClass(new Integer(1)));
        assertEquals("{\"value\":1}", json1);

        // Test 2: Allow wrapper to "refine" primitive
        String json2 = mapper.writeValueAsString(new TestClass(new int[] {1, 2, 3}));
        assertEquals("{\"value\":[1, 2, 3]}", json2);
    }

    public static class TestClass {
        private int[] value;

        public TestClass(int[] value) {
            this.value = value;
        }

        public int[] getValue() {
            return value;
        }
    }
}
