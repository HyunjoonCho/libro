java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class JacksonTest {
    private final ObjectMapper mapper = new ObjectMapper();

    @Test
    public void testPolymorphicType() throws IOException {
        mapper.enable(SerializationFeature.WRITE_SINGLE_ELEM_ARRAYS_UNWRAPPED);

        TypeFactory typeFactory = mapper.getTypeFactory();
        TypeReference<List<Base>> typeRef = typeFactory.constructType(new TypeReference<List<Base>>() {
        });

        List<Base> baseList = mapper.readValue("[1, 2, 3]", typeRef);

        assertEquals(3, baseList.size());
    }

    public interface Base {
        String getProp();
    }

    public static class Sub1 extends Base {
        @Override
        public String getProp() {
            return "Sub1";
        }
    }

    public static class Sub2 extends Base {
        @Override
        public String getProp() {
            return "Sub2";
        }
    }
}
