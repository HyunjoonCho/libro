
public class AMDModuleTest {
    @Test
    public void testAMDModuleInSubdirectory() throws Exception {
        // Create 1st AMD module in lib/Foo.js
        String fooJs = "define('lib/Foo', [], function () { return 'Foo'; });";
        // Create 2nd AMD module in Bar.js depending on lib/Foo.js
        String barJs = "define('Bar', ['lib/Foo'], function (Foo) { return 'Bar'; });";
        // Try to compile both files with Bar.js as main module
        String compilationCommand = "java -jar compiler.jar --transform_amd_modules --process_common_js_modules --common_js_entry_module=Bar.js --compilation_level=ADVANCED_OPTIMIZATIONS --js_output_file=out.js --js=Bar.js --js=lib/Foo.js";
        ProcessBuilder builder = new ProcessBuilder("java", "-jar", "compiler.jar", "--transform_amd_modules", "--process_common_js_modules", "--common_js_entry_module=Bar.js", "--compilation_level=ADVANCED_OPTIMIZATIONS", "--js_output_file=out.js", "--js=Bar.js", "--js=lib/Foo.js");
        Process process = builder.start();
        // Check for error output
        String output = new BufferedReader(new InputStreamReader(process.getInputStream())).lines().collect(Collectors.joining());
        assertEquals("required entry point \"module$lib$Foo\" never provided", output);
    }
}
