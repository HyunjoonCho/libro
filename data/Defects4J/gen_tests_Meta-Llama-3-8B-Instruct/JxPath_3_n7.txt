java
import org.jxpath.JXPathContext;
import org.jxpath.JXPathContextFactory;
import org.jxpath.Pointer;
import org.jxpath.nodes.NodePointer;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.junit.Test;

public class JXPathTest {

    @Test
    public void testJXPathCreatePath() {
        Map map = new HashMap();
        map.put("a", null);

        JXPathContext pathContext = JXPathContext.newContext(map);
        pathContext.setFactory(new MyAbstractFactory());

        pathContext.createPath("a/b[1]/c");
        pathContext.createPath("a/b[2]/c"); // Expected to throw a StackOverflowError
    }

    private class MyAbstractFactory extends AbstractFactory {

        @Override
        public boolean createObject(JXPathContext context, Pointer pointer, Object parent, String name, int index) {
            if (pointer instanceof NodePointer) {
                index = ((NodePointer) pointer).getIndex();
            }
            System.out.println(parent + ":" + name + ":" + index);
            Map parentMap = (Map) parent;
            if (index > -1) {
                List list = (List) parentMap.get(name);
                if (list == null) {
                    list = new ArrayList<>();
                }
                int size = list.size();
                for (int i = size; i <= index; i++) {
                    list.add(i, new HashMap()); // Don't set to 'null'
                }
                parentMap.put(name, list);
            } else {
                parentMap.put(name, new HashMap());
            }
            return true;
        }
    }
}
