
import org.junit.Test;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.BeanDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerFactory;
import com.fasterxml.jackson.databind.deser.ContextualKey;
import com.fasterxml.jackson.databind.deser.ContextualDeserializer;
import com.fasterxml.jackson.databind.deser.impl.BeanPropertyDeserializers;
import com.fasterxml.jackson.databind.deser.impl.PropertyBasedDeserializerFactory;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import com.fasterxml.jackson.databind.util.BeanDescription;
import com.fasterxml.jackson.databind.util.NameTransformer;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.fail;

public class InvalidFormatExceptionTest {

    @Test
    public void testInvalidFormatException() throws IOException {
        ObjectMapper mapper = new JsonMapper();
        TypeReference<List<String>> typeReference = new TypeReference<List<String>>() {};

        String json = "[\"a\", \"b\", \"c\"]";

        try {
            mapper.readValue(json, typeReference);
            fail("Expected JsonMappingException");
        } catch (JsonMappingException e) {
            assertEquals(-1, e.getIndex());
        }
    }
}
