
import org.junit.Test;

public class SingletonGetterRemovalTest {
    @Test
    public void testSingletonGetterPreventsUnusedClassRemoval() {
        // Define the code to be compiled
        String code = "goog.provide('foo');\n" +
                "var foo = function() { this.values = []; };\n" +
                "goog.addSingletonGetter(foo);\n" +
                "foo.prototype.add = function(value) { this.values.push(value); };\n";

        // Compile the code using Closure Compiler
        String compiledCode = compileCode(code);

        // Check that the code is not completely removed
        assertDoesNotContain(compiledCode, "goog.provide('foo');");
        assertDoesNotContain(compiledCode, "var foo = function() { this.values = []; };");
        assertContains(compiledCode, "goog.addSingletonGetter(foo);");
        assertContains(compiledCode, "foo.prototype.add = function(value) { this.values.push(value); };");
    }

    private String compileCode(String code) {
        // Implement the logic to compile the code using Closure Compiler
        // For example, you can use a third-party library or a custom implementation
        // to compile the code and return the compiled result
    }

    private void assertDoesNotContain(String text, String substring) {
        assert!text.contains(substring);
    }

    private void assertContains(String text, String substring) {
        assertTrue(text.contains(substring));
    }
}
