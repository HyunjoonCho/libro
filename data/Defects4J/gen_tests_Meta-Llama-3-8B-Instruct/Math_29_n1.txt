public void testebeMultiplyNaN() {
    OpenMapRealVector v1 = new OpenMapRealVector();
    v1.put(0, Double.NaN);
    OpenMapRealVector v2 = new OpenMapRealVector();
    v2.put(0, 2.0);
    OpenMapRealVector result = v1.ebeMultiply(v2);
    assertEquals(Double.NaN, result.get(0), 0.0);
}

public void testebeMultiplyInfinity() {
    OpenMapRealVector v1 = new OpenMapRealVector();
    v1.put(0, Double.POSITIVE_INFINITY);
    OpenMapRealVector v2 = new OpenMapRealVector();
    v2.put(0, 2.0);
    OpenMapRealVector result = v1.ebeMultiply(v2);
    assertEquals(Double.POSITIVE_INFINITY, result.get(0), 0.0);
}

public void testebeDivideNaN() {
    OpenMapRealVector v1 = new OpenMapRealVector();
    v1.put(0, 2.0);
    OpenMapRealVector v2 = new OpenMapRealVector();
    v2.put(0, Double.NaN);
    OpenMapRealVector result = v1.ebeDivide(v2);
    assertEquals(Double.NaN, result.get(0), 0.0);
}

public void testebeDivideInfinity() {
    OpenMapRealVector v1 = new OpenMapRealVector();
    v1.put(0, 2.0);
    OpenMapRealVector v2 = new OpenMapRealVector();
    v2.put(0, Double.POSITIVE_INFINITY);
    OpenMapRealVector result = v1.ebeDivide(v2);
    assertEquals(Double.NaN, result.get(0), 0.0);
}