
public class GenericTypeResolverTest {
    @Test
    public void testGenericTypeResolution() throws Exception {
        // Set up the TypeIdResolver
        TypeIdResolver typeIdResolver = new TypeIdResolver() {
            @Override
            public JavaType typeFromId(String typeId) {
                return new TypeFactoryStdImpl().constructType(List.class);
            }
        };

        // Create an object mapper with the TypeIdResolver
        ObjectMapper mapper = new ObjectMapper();
        mapper.setTypeIdResolver(typeIdResolver);

        // Serialize and deserialize a generic type
        String json = mapper.writeValueAsString(new GenericType<String, String>());
        Object result = mapper.readValue(json, Object.class);

        // Verify that the generic type was not preserved
        assertNotInstanceOf(List.class, result);
    }
}
