
public void testEbeMultiplyWithNaN() {
    OpenMapRealVector vector1 = new OpenMapRealVector(2);
    vector1.setEntry(0, 1.0);
    vector1.setEntry(1, Double.NaN);

    OpenMapRealVector vector2 = new OpenMapRealVector(2);
    vector2.setEntry(0, 2.0);
    vector2.setEntry(1, 3.0);

    OpenMapRealVector result = vector1.ebeMultiply(vector2);

    assertEquals(Double.NaN, result.getEntry(0));
    assertEquals(Double.NaN, result.getEntry(1));
}

public void testEbeMultiplyWithInfinity() {
    OpenMapRealVector vector1 = new OpenMapRealVector(2);
    vector1.setEntry(0, 1.0);
    vector1.setEntry(1, Double.POSITIVE_INFINITY);

    OpenMapRealVector vector2 = new OpenMapRealVector(2);
    vector2.setEntry(0, 2.0);
    vector2.setEntry(1, 3.0);

    OpenMapRealVector result = vector1.ebeMultiply(vector2);

    assertEquals(Double.POSITIVE_INFINITY, result.getEntry(0));
    assertEquals(Double.POSITIVE_INFINITY, result.getEntry(1));
}

public void testEbeDivideWithNaN() {
    OpenMapRealVector vector1 = new OpenMapRealVector(2);
    vector1.setEntry(0, 1.0);
    vector1.setEntry(1, Double.NaN);

    OpenMapRealVector vector2 = new OpenMapRealVector(2);
    vector2.setEntry(0, 2.0);
    vector2.setEntry(1, 3.0);

    OpenMapRealVector result = vector1.ebeDivide(vector2);

    assertEquals(Double.NaN, result.getEntry(0));
    assertEquals(Double.NaN, result.getEntry(1));
}

public void testEbeDivideWithInfinity() {
    OpenMapRealVector vector1 = new OpenMapRealVector(2);
    vector1.setEntry(0, 1.0);
    vector1.setEntry(1, Double.POSITIVE_INFINITY);

    OpenMapRealVector vector2 = new OpenMapRealVector(2);
    vector2.setEntry(0, 2.0);
    vector2.setEntry(1, 3.0);

    OpenMapRealVector result = vector1.ebeDivide(vector2);

    assertEquals(Double.NaN, result.getEntry(0));
    assertEquals(Double.NaN, result.getEntry(1));
}
