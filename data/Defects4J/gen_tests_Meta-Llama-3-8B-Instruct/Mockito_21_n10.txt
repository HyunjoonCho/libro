java
public class AbstractClassMockingTest {

    @Test
    public void testAbstractClassMocking() {
        // Example 1
        AbstractClassFakeUserAccount userAccount = Mockito.mock(AbstractClassFakeUserAccount.class);
        Mockito.when(userAccount.getEmails()).thenReturn(Arrays.asList("email1", "email2"));
        Mockito.when(userAccount.addEmail("email3")).thenReturn(null);
        assertEquals(Arrays.asList("email1", "email2", "email3"), userAccount.getEmails());

        // Example 2
        AbstractClassMockAccountService accountService = Mockito.mock(AbstractClassMockAccountService.class);
        Mockito.when(accountService.getAccount("id")).thenReturn(new UserAccount() {
            @Override
            public List<String> getEmails() {
                return Arrays.asList("email1", "email2");
            }
        });
        // Verify that the getAccount method is called with "id" and AsyncCallback
        Mockito.verify(accountService).getAccount("id", Mockito.any(AsyncCallback.class));

        // Example 3
        AbstractClassMockAccountRpcService accountRpcService = Mockito.mock(AbstractClassMockAccountRpcService.class);
        Mockito.when(accountRpcService.getAccount("id")).thenReturn(FutureTask.returning(new Account()));
        // Verify that the getAccount method is called with "id" and RpcContext
        Mockito.verify(accountRpcService).getAccount(Mockito.any(RpcContext.class), "id");
    }
}
