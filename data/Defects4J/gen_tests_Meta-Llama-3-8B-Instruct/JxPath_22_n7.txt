java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;
import org.xml.sax.helpers.XMLReaderFactory;

import java.io.StringReader;

import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;

@RunWith(JUnit4.class)
public class TestResettingDefaultNamespace {

    @Test
    public void testResettingDefaultNamespace() throws Exception {
        String xml = "<root><foo xmlns:b=\"bla\" xmlns=\"test111\"><bar>a</bar><test xmlns=\"\"></test></foo></root>";
        InputSource inputSource = new InputSource(new StringReader(xml));
        XMLReader reader = XMLReaderFactory.createXMLReader();
        reader.parse(inputSource);

        // Simulate resetting default namespace
        reader.getParserConfig().setDefaultNamespace("test111");

        // Test the issue
        org.w3c.dom.Element foo = (org.w3c.dom.Element) reader.getDocument().getElementsByTagName("foo").item(0);
        org.w3c.dom.Element test = (org.w3c.dom.Element) foo.getElementsByTagName("test").item(0);

        // Expecting the test node to have no namespace
        assertTrue(test.getNamespaceURI() == null || test.getNamespaceURI().length() == 0);

        // Calling asPath() should not cause an endless loop
        String path = test.asPath();
        assertSame("Expected path to be 'root/foo/test'", "root/foo/test", path);
    }
}
