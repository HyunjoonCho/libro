java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

public class CustomCollectionTest {

    @Test
    public void testCustomCollectionSerialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        CustomCollection<String> customCollection = new CustomCollection<>();
        customCollection.add("1");
        customCollection.add("2");
        customCollection.add("3");

        String json = mapper.writeValueAsString(customCollection);

        assertEquals("{\"values\":[\"1\",\"2\",\"3\"]}", json);
    }

    @Test
    public void testCustomCollectionDeserialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"values\":[\"1\",\"2\",\"3\"]}";

        TypeReference<CustomCollection<String>> typeRef = new TypeReference<CustomCollection<String>>() {};

        CustomCollection<String> customCollection = mapper.readValue(json, typeRef);

        assertEquals(3, customCollection.size());
    }

    @Test
    public void testCustomCollectionDeserializationFails() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"values\":[\"1\",\"2\",\"3\"]}";

        assertThrows(IllegalArgumentException.class, () -> {
            mapper.readValue(json, CustomCollection.class);
        });
    }
}

class CustomCollection<T> extends ArrayList<T> {
    // Add your custom collection implementation here
}
