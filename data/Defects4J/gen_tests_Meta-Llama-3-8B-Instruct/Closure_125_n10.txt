public void testIssue() {
    String script = "var test = {};\n" +
            "/**\n" +
            " * @interface\n" +
            " */\n" +
            "test.T = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @implements {test.T}\n" +
            " */\n" +
            "test.A = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @implements {test.T}\n" +
            " */\n" +
            "test.B = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " */\n" +
            "test.X = function() {\n" +
            "  this.type = test.A;\n" +
            "  this.t = this.f();\n" +
            "};\n" +
            "/**\n" +
            " * @return {test.T}\n" +
            " */\n" +
            "test.X.prototype.f = function() {\n" +
            "  if (this.type === test.A) {\n" +
            "    return new test.A();\n" +
            "  } else if (this.type === test.B) {\n" +
            "    return new test.B();\n" +
            "  }\n" +
            "};\n";

    String[] args = {"--js", script, "--warning_level", "VERBOSE", "--compilation_level", "SIMPLE_OPTIMIZATIONS"};
    try {
        ProcessBuilder pb = new ProcessBuilder("java", "-jar", "compiler.jar");
        pb.command(args);
        Process process = pb.start();
        process.waitFor();
        fail("Expected an exception, but compilation was successful.");
    } catch (Exception e) {
        // Expected exception
    }
}