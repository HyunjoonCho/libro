
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Chronology;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class JodaTest {
    @Test
    public void jodaTest() {
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);
        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);

        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);

        assertEquals(7, usCentralStandardInUSCentral.getHourOfDay());
        assertEquals(6, usCentralDaylightInUSCentral.getHourOfDay());

        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);

        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAustraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);

        assertEquals(16, australiaNSWStandardInAustraliaNSW.getHourOfDay());
        assertEquals(15, australiaNSWDaylightInAustraliaNSW.getHourOfDay());
    }
}
