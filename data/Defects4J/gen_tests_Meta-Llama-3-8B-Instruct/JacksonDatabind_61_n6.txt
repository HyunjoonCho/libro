java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import org.junit.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class JacksonSerializationTest {

    @Test
    public void testSerialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();
        resolver.init(JsonTypeInfo.Id.CLASS, null);
        resolver.inclusion(JsonTypeInfo.As.PROPERTY);
        resolver.typeProperty("_t");
        mapper.setDefaultTyping(resolver);
        mapper.enable(SerializationFeature.INDENT_OUTPUT);

        Map<String, Object> data = new HashMap<>();
        data.put("longInMap", 2L);
        Data dataObject = new Data();
        dataObject.key = 1;
        data.put("longAsField", dataObject);

        String json = mapper.writeValueAsString(data);
        System.out.println("json = " + json);

        try {
            Map<String, Object> deserializedData = mapper.readValue(json, Map.class);
            assertEquals(2L, deserializedData.get("longInMap"));
            assertEquals(1, ((Data) deserializedData.get("longAsField")).key);
        } catch (IOException e) {
            fail("Deserialization failed: " + e.getMessage());
        }
    }

    static class Data {
        public long key;
    }
}
