
public void testBrentOptimizerConvergenceCheck() {
    // Create a test function
    final double[] x = new double[] {1.0, 2.0};
    final double[] y = new double[] {3.0, 4.0};
    final double[] x0 = new double[] {0.5, 0.5};
    final double[] f = new double[] {0.0, 0.0};
    final double[] jac = new double[][] {{1.0, 0.0}, {0.0, 1.0}};
    final BrentOptimizer optimizer = new BrentOptimizer();
    optimizer.setTolerance(1e-6);
    optimizer.setStartingPoint(x0);

    // Set the function and its Jacobian
    optimizer.setFunction(new AbstractUnivariateRealFunction() {
        @Override
        public double value(double x) {
            return (x - 1.0) * (x - 1.0) + (x - 2.0) * (x - 2.0);
        }
    });
    optimizer.setJacobian(new AbstractUnivariateRealVectorFunction() {
        @Override
        public double[] value(double x) {
            return new double[] {2.0 * (x - 1.0), 2.0 * (x - 2.0)};
        }
    });

    // Run the optimization
    PointValuePair result = optimizer.optimize();
    assertEquals(1.0, result.getValue(), 1e-6);
}
