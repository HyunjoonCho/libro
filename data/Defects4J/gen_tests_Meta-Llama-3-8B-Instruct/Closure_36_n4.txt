java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class SingletonGetterTest {
    @Test
    public void testSingletonGetterPreventsUnusedClassRemoval() {
        // Create a class with a singleton getter using goog.addSingletonGetter
        Class<?> fooClass = new Class<?>("foo") {
            public Object createInstance() {
                return new Object() {
                    private Object[] values = new Object[0];
                    public void add(Object value) {
                        values = (Object[]) java.lang.reflect.Array.newInstance(Object.class, values.length + 1);
                        values[values.length - 1] = value;
                    }
                };
            }
        };
        goog.addSingletonGetter(fooClass);

        // Try to remove the class
        // The class should not be removed because of the singleton getter
        // This is what the Closure Compiler does
        // The actual implementation of goog.addSingletonGetter is not necessary for this test
        // It is enough to create a class with a singleton getter and try to remove it
    }
}
