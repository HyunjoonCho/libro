java
import java.io.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

public class ArDeletionTest {
    public void testArDeletion() throws IOException {
        // Create a temporary file
        File tempFile = File.createTempFile("bla", ".ar");
        tempFile.delete();

        // Create a ZipOutputStream to create the archive
        ZipOutputStream zipOutputStream = new ZipOutputStream(new FileOutputStream(tempFile));
        zipOutputStream.putNextEntry(new ZipEntry("test1.xml"));
        zipOutputStream.write("test1.xml content".getBytes());
        zipOutputStream.putNextEntry(new ZipEntry("test2.xml"));
        zipOutputStream.write("test2.xml content".getBytes());
        zipOutputStream.close();

        // Delete the second entry
        try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(tempFile))) {
            ZipEntry entry;
            while ((entry = zipInputStream.getNextEntry())!= null) {
                if (entry.getName().equals("test2.xml")) {
                    zipInputStream.closeEntry();
                    zipInputStream.close();
                    break;
                }
            }
        }

        // Check that the file still contains both entries
        try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(tempFile))) {
            ZipEntry entry;
            while ((entry = zipInputStream.getNextEntry())!= null) {
                System.out.println(entry.getName());
            }
        }

        // Check that the file is still a valid archive
        try {
            Process process = new ProcessBuilder("ar", "-t", tempFile.getAbsolutePath()).start();
            String output = new BufferedReader(new InputStreamReader(process.getInputStream())).lines().collect(Collectors.joining());
            System.out.println(output);
            assertEquals("test1.xml", output);
            // ar: /tmp/dir24825/bla.ar: Inappropriate file type or format
            // This assertion will fail because the output will contain "test2.xml" as well
            fail("Expected 'test1.xml' only, but got: " + output);
        } catch (IOException e) {
            fail("ar command failed: " + e.getMessage());
        }
    }
}
