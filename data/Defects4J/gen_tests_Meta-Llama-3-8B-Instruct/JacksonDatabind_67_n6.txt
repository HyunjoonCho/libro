java
public void testMapKeyDeserializerModifiersIgnored() {
    // Given
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new Module() {
        @Override
        public String getName() {
            return "TestModule";
        }

        @Override
        public Version version() {
            return Version.unknownVersion();
        }

        @Override
        public void setupModule(SetupContext context) {
            context.setDeserializerModifier(new BeanDeserializerModifier() {
                @Override
                public JsonDeserializer<?> modifyEnumDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {
                    return new JsonDeserializer<Enum>() {
                        @Override
                        public Enum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                            return Enum.valueOf(rawClass, jp.getValueAsString().toUpperCase());
                        }
                    };
                }

                @Override
                public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, JavaType type, KeyDeserializer deserializer) {
                    if (!type.isEnumType()) {
                        return super.modifyKeyDeserializer(config, type, deserializer);
                    }
                    return new KeyDeserializer() {
                        @Override
                        @SuppressWarnings("unchecked")
                        public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException {
                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                            return Enum.valueOf(rawClass, key.toUpperCase());
                        }
                    };
                }
            });
        }
    });

    // When
    String json = "{\"enumKey\":\"lowercase\"}";
    JsonNode node = mapper.readTree(json);

    // Then
    assertEquals(Enum.valueOf(MyEnum.class, "UPPERCASE"), node.get("enumKey"));
}
