java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class ZipFileCreationTest {

    @Parameters
    public static List<Object[]> data() {
        List<Object[]> params = new ArrayList<>();
        params.add(new Object[]{"file1", "file2", "file3", "file4"});
        params.add(new Object[]{"file1", "file1", "file3", "file4"});
        return params;
    }

    private String[] fileNames;

    public ZipFileCreationTest(String... fileNames) {
        this.fileNames = fileNames;
    }

    @Test
    public void testZipFileCreation() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipOut = new ZipArchiveOutputStream(bos);

        for (String fileName : fileNames) {
            ZipArchiveEntry entry = new ZipArchiveEntry(fileName);
            zipOut.putArchiveEntry(entry);
        }

        zipOut.close();

        // Verify the zip file is correct
        byte[] zipBytes = bos.toByteArray();
        //...

        // Verify the corrupted zip file
        try {
            ZipArchiveOutputStream corruptedZipOut = new ZipArchiveOutputStream(new ByteArrayOutputStream());
            corruptedZipOut.putArchiveEntry(new ZipArchiveEntry("corruptedFile"));
            corruptedZipOut.close();
            fail("Expected zip file corruption");
        } catch (IOException e) {
            // Expected
        }
    }
}
