java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TreeTraversingParserTest {

    private final ObjectMapper mapper = new ObjectMapper();

    @Test
    public void testTreeTraversingParser() throws Exception {
        testValue("0", 0);
        testValue("10", 10);
        testValue("10000", 10000);
        testValue("2147483647", 2147483647);
        testValue("1e10", 2147483647);
        testValue("1e-1", 0);
        testValue("2147483648", 2147483648);
        testValue("2147483649", 2147483648);
        testValue("-2147483649", -2147483648);
        testValue("-4294967295", 1);
        testValue("0.1", 0);
        testValue("1.9", 1);
        testValue("1.9999999999999999", 2);
        testValue("true", -1);
        testValue("{}", -1);
        testValue("{}", -1);
        testValue("[]", -1);
        testValue("[0]", -1);
        testValue("10", 10);
        testValue("1e4", 10000);
        testValue("1e10", 10000000000L);
        testValue("1e-1", 0);
        testValue("2147483648", 2147483648);
        testValue("2147483649", 2147483648);
        testValue("-2147483649", -2147483648);
        testValue("-4294967295", 1);
        testValue("0.1", 0);
        testValue("1.9", 1);
        testValue("1.9999999999999999", 2);
        testValue("true", -1);
        testValue("{", -1);
        testValue("}", -1);
        testValue("[]", -1);
        testValue("[0]", -1);

        // Check if the values are correctly parsed
        assertEquals(0, mapper.readValue("{\"x\": 0}", IntClass.class).x);
        assertEquals(10, mapper.readValue("{\"x\": 10}", IntClass.class).x);
        assertEquals(10000, mapper.readValue("{\"x\": 10000}", IntClass.class).x);
        assertEquals(2147483647, mapper.readValue("{\"x\": 2147483647}", IntClass.class).x);
        assertEquals(2147483647, mapper.readValue("{\"x\": \"2147483647\"}", IntClass.class).x);
        assertEquals(0, mapper.readValue("{\"x\": \"1e-1\"}", IntClass.class).x);
        assertEquals(2147483648, mapper.readValue("{\"x\": \"2147483648\"}", IntClass.class).x);
        assertEquals(2147483648, mapper.readValue("{\"x\": \"2147483649\"}", IntClass.class).x);
        assertEquals(-2147483648, mapper.readValue("{\"x\": \"-2147483649\"}", IntClass.class).x);
        assertEquals(1, mapper.readValue("{\"x\": \"-4294967295\"}", IntClass.class).x);
        assertEquals(0, mapper.readValue("{\"x\": \"0.1\"}", IntClass.class).x);
        assertEquals(1, mapper.readValue("{\"x\": \"1.9\"}", IntClass.class).x);
        assertEquals(2, mapper.readValue("{\"x\": \"1.9999999999999999\"}", IntClass.class).x);
        assertEquals(-1, mapper.readValue("{\"x\": \"true\"}", IntClass.class).x);
        assertEquals(-1, mapper.readValue("{\"x\": \"{}\"}", IntClass.class).x);
        assertEquals(-1, mapper.readValue("{\"x\": \"[]\"}", IntClass.class).x);
        assertEquals(-1, mapper.readValue("{\"x\": \"[0]\"}", IntClass.class).x);
    }

    private void testValue(String json, int expected) throws Exception {
        JsonNode node = mapper.readTree(json);
        assertEquals(expected, mapper.treeToValue(node, IntClass.class).x);
    }

    public static class IntClass {
        public int x;
    }
}
