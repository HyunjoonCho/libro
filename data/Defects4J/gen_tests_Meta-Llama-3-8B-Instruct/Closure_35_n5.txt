
public class Test {
    public interface MyRecord {
        Object getProp1();
        String getProp2();
        String getProp3();
    }

    public MyRecord func(boolean a, boolean b) {
        MyRecord results = null;
        if (a) {
            results = new MyRecord() {
                @Override
                public Object getProp1() {
                    return new Object();
                }
            };
        }
        if (b) {
            if (results == null) {
                results = new MyRecord() {
                    @Override
                    public Object getProp1() {
                        return new Object();
                    }
                    @Override
                    public String getProp2() {
                        return "prop2";
                    }
                };
            } else {
                results = new MyRecord() {
                    @Override
                    public String getProp2() {
                        return "prop2";
                    }
                };
            }
        } else {
            if (results == null) {
                results = new MyRecord() {
                    @Override
                    public Object getProp1() {
                        return new Object();
                    }
                    @Override
                    public String getProp3() {
                        return "prop3";
                    }
                };
            } else {
                results = new MyRecord() {
                    @Override
                    public String getProp3() {
                        return "prop3";
                    }
                };
            }
        }
        return results;
    }

    @Test
    public void testFunc() {
        MyRecord result = func(true, true);
        // This test will fail due to type mismatch
        result.getProp1();
    }
}
