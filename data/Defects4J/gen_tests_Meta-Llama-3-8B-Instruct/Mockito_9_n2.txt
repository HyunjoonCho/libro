java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

@RunWith(MockitoJUnitRunner.class)
public class AbstractClassSpyingTest {

    @Mock
    public abstract class AbstractClass {
        public abstract void doSomething();
    }

    @Test
    public void testSpyingOnAbstractClass() {
        AbstractClass abstractClass = spy(new AbstractClass() {
            @Override
            public void doSomething() {
                // This method will be called by the real implementation
                // But it should not be called when spying on the abstract class
                throw new RuntimeException("Should not be called");
            }
        });

        when(abstractClass.doSomething()).thenCallRealMethod();

        abstractClass.doSomething(); // This should not call the overridden method

        // The real implementation should call the abstract method
        // which should call the overridden method
        assertEquals(1, 1);
    }
}
