public void testBrentOptimizer() {
    // Create a test function that has multiple local minima
    final double[] x = new double[] {1, 2, 3};
    final double[] y = new double[] {2, 1, 0};
    UnivariateFunction f = new AbstractUnivariateFunction() {
        @Override
        public double value(double x) {
            int idx = (int) Math.round(x);
            return y[idx];
        }
    };
    
    // Create a brent optimizer
    BrentOptimizer optimizer = new BrentOptimizer();
    double[] result = new double[1];
    optimizer.optimize(new DoubleOptimizationData(0, 3), f, result);
    
    // Check that the result is indeed the best one
    double best = Double.POSITIVE_INFINITY;
    for (int i = 0; i < x.length; i++) {
        double val = f.value(x[i]);
        if (val < best) {
            best = val;
        }
    }
    assertEquals(best, f.value(result[0]), 1e-6);
}