
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class BrentSolverTest {

    @Test
    public void testBrentSolver() {
        // Create a function that has a zero value at the boundary
        // This should not throw an exception
        MyFunction function = new MyFunction(x -> 0);
        BrentSolver solver = new BrentSolver();
        double result = solver.solve(0, 1);
        assertEquals(0, result, 0);

        // Create a function that has a zero value at the boundary and another zero value
        // This should also not throw an exception
        function = new MyFunction(x -> 0);
        solver = new BrentSolver();
        result = solver.solve(-100000, 1.7976931348623157E308);
        assertEquals(0, result, 0);

        // Create a function that has non-zero values at the boundary
        // This should throw an exception
        function = new MyFunction(x -> x);
        solver = new BrentSolver();
        assertThrows(IllegalArgumentException.class, () -> solver.solve(-100000, 1.7976931348623157E308));
    }
}

class MyFunction implements Function {
    @Override
    public double value(double x) {
        return 0; // or return x; for a different function
    }
}
