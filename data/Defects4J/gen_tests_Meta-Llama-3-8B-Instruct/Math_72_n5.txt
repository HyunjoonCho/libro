
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.analysis.UnivariateFunction;

import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class BrentSolverTest {

    @Test
    public void testBrentSolverReturnsWrongValueIfBracketEndpointIsRoot() {
        // Create a function that has a root at min and max
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.sin(x) - x;
            }
        };

        // Define the min and max values
        double min = 0.0;
        double max = 3.0;

        // Use Brent's method to find the root
        BrentOptimizer optimizer = new BrentOptimizer();
        double result = optimizer.solve(function, min, max, 1.0);

        // Check that the result is not min or max
        assertEquals(min, result, 0.01);
        assertEquals(max, result, 0.01);
    }
}
