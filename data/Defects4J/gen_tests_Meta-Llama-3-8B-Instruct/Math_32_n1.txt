
public void testBSPTreeFaces() {
    // Create a cube Brep
    float[] vertices = new float[] {
        0, 0, 0,  // v0
        1, 0, 0,  // v1
        1, 1, 0,  // v2
        0, 1, 0,  // v3
        0, 0, 1,  // v4
        1, 0, 1,  // v5
        1, 1, 1,  // v6
        0, 1, 1   // v7
    };
    int[] faces = new int[] {
        // Front face
        0, 1, 2, 3,
        // Back face
        4, 5, 6, 7,
        // Top face
        0, 1, 5, 4,
        // Bottom face
        2, 3, 7, 6,
        // Left face
        0, 3, 7, 4,
        // Right face
        1, 2, 6, 5
    };

    // Create a BSPTree from the Brep
    BSPTree tree = new BSPTree(vertices, faces);

    // Check if the faces can be extracted correctly
    List<Polyhedron> polyhedrons = tree.getPolyhedrons();
    for (Polyhedron polyhedron : polyhedrons) {
        // Check if the face indices match the expected faces
        int[] faceIndices = polyhedron.getFaceIndices();
        for (int i = 0; i < faceIndices.length; i++) {
            int faceIndex = faceIndices[i];
            // Check if the face indices match the expected faces
            int[] expectedFace = faces[faceIndex];
            for (int j = 0; j < expectedFace.length; j++) {
                assertEquals(expectedFace[j], faceIndices[i * 4 + j]);
            }
        }
    }
}
