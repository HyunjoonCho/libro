
public void testExtraneousTypeMapping() {
    // Create a base type with a default name
    Type baseType = new Type("BaseType", TypeKind.CLASS, null);

    // Create a subclass with an explicit name
    Type subType = new Type("SubType", TypeKind.CLASS, baseType);

    // Create a type id mapping for the subclass
    TypeIdMapping mapping = new TypeIdMapping(subType, "subType");

    // Create a type id mapping for the base type with an explicit name
    TypeIdMapping baseMapping = new TypeIdMapping(baseType, "baseType");

    // Add the mappings to the type resolution list
    TypeResolutionList typeResolutionList = new TypeResolutionList();
    typeResolutionList.addMapping(mapping);
    typeResolutionList.addMapping(baseMapping);

    // Test that the base type's name is not included in the list
    assertFalse(typeResolutionList.contains(baseType, "BaseType"));
}
