
public void testFakeAbstractClassExample1() {
    FakeUserAccount fakeUserAccount = new FakeUserAccount();
    UserAccount userAccount = Mockito.mock(UserAccount.class);
    Mockito.when(userAccount.getEmails()).thenReturn(fakeUserAccount.getEmails());
    Mockito.when(userAccount.addEmail("email")).thenReturn(userAccount);
    // verify the behavior of the test
}

public void testFakeAbstractClassExample2() {
    MockAccountService mockAccountService = new MockAccountService();
    AccountService service = Mockito.mock(AccountService.class);
    Mockito.when(service.getAccount("id")).thenReturn(mockAccountService.getAccount("id"));
    // verify the behavior of the test
}

public void testFakeAbstractClassExample3() {
    MockAccountRpcService mockAccountRpcService = new MockAccountRpcService();
    AccountRpcService service = Mockito.mock(AccountRpcService.class);
    Mockito.when(service.getAccount("id")).thenReturn(mockAccountRpcService.getAccount("id"));
    // verify the behavior of the test
}

public class FakeUserAccount implements UserAccount {
    private final List<String> emails = new ArrayList<>();

    @Override
    public void addEmail(String email) {
        emails.add(email);
    }

    @Override
    public List<String> getEmails() {
        return ImmutableList.copyOf(emails);
    }
}

public abstract class MockAccountService implements AccountService {
    @Override
    public void getAccount(String id, AsyncCallback<UserAccount> callback) {
        callback.onSuccess(getAccount(id));
    }

    abstract UserAccount getAccount(String id);
}

public abstract class MockAccountRpcService implements AccountRpcService {
    @Override
    public Future<Account> getAccount(RpcContext context, String id) {
        checkNotNull(context); // Common sanity test. Don't have to repeat it in tests.
        return getAccount(id);
    }

    abstract Future<Account> getAccount(String id);
}
