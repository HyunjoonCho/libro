
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Test;
import java.util.List;

public class TestJacksonIssue {
    @Test
    public void testJacksonIssue() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.DEFAULT_TYPE_HANDLER_INSTANTIATION);

        MyParent parent = new MyParent();
        MyChild child = new MyChild();

        String json = mapper.writeValueAsString(parent);
        System.out.println(json);

        TypeReference<List<MyParent>> typeRef = new TypeReference<List<MyParent>>() {
        };
        List<MyParent> result = mapper.readValue(json, typeRef);

        // Assert the properties from MyChild are missing
        //...
    }
}

class MyParent {
    private String prop1;
    private List<MyChild> children;
    // getters and setters
}

class MyChild extends MyParent {
    private String prop2;
    // getters and setters
}
