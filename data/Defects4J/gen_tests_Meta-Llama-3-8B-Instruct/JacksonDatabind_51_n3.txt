java
@Test
public void testGenericTypeIdResolver() throws Exception {
    // Create a TypeIdResolver that returns a JavaType for a generic type
    TypeIdResolver resolver = new TypeIdResolver() {
        @Override
        public JavaType findTypeById(Class<?> type, String typeId) {
            // Return a JavaType for a generic type
            return new JavaType(String.class.getTypeParameters()[0]);
        }
    };

    // Create an ObjectReader with the TypeIdResolver
    ObjectMapper mapper = new ObjectMapper();
    mapper.setTypeIdResolver(resolver);

    // Read a JSON object with a field of the generic type
    String json = "{\"field\": \"value\"}";
    JsonNode node = mapper.readTree(json);
    JsonNode fieldNode = node.get("field");

    // Assert that the field type is not correctly resolved
    // (This will depend on the specific behavior you're trying to test)
    assertFalse(fieldNode.isString());
}
