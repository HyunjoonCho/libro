java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.json.JsonNodeSerializer;
import com.fasterxml.jackson.databind.ser.std.BeanSerializer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class CustomSerializerTest {

    @Test
    public void testCustomSerializerNotUsedIfJsonValue() throws Exception {
        // given
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        // custom serializer
        BeanSerializer beanSerializer = mock(BeanSerializer.class);
        JsonNodeSerializer jsonNodeSerializer = mock(JsonNodeSerializer.class);
        when(mapper.getSerializerInstance(MyPojo.class, SerializerProvider.class)).thenReturn(beanSerializer);

        // POJO with @JsonValue
        MyPojo pojo = new MyPojo();
        pojo.setValue("custom value");

        // when
        String json = mapper.writeValueAsString(pojo);

        // then
        assertNotNull(json);
        assertEquals("{\"value\":\"custom value\"}", json);
    }

    public static class MyPojo {
        @JsonValue
        private String value;

        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }
}
