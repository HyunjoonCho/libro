public void testPolymorphicTypeLosingProperties() {
    @JsonTypeInfo(
            use = JsonTypeInfo.Id.NAME,
            include = JsonTypeInfo.As.PROPERTY,
            property = "type"
    )
    @JsonSubTypes({
            @JsonSubTypes.Type(value = Child.class, name = "child"),
            @JsonSubTypes.Type(value = Parent.class, name = "parent")
    })
    public abstract static class BaseType {
        private String prop1;
        public String getProp1() { return prop1; }
        public void setProp1(String prop1) { this.prop1 = prop1; }
    }

    public static class Parent extends BaseType {
        private String prop2;
        public String getProp2() { return prop2; }
        public void setProp2(String prop2) { this.prop2 = prop2; }
    }

    public static class Child extends Parent {
        private String prop3;
        public String getProp3() { return prop3; }
        public void setProp3(String prop3) { this.prop3 = prop3; }
    }

    @Test
    public void test() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        BaseType baseType = new Child();
        baseType.setProp1("prop1");
        baseType.setProp2("prop2");
        baseType.setProp3("prop3");

        String json = mapper.writeValueAsString(baseType);
        BaseType readType = mapper.readValue(json, BaseType.class);

        assertEquals("prop1", readType.getProp1());
        // This assertion will fail because prop2 and prop3 are lost
        // assertEquals("prop2", readType.getProp2());
        // assertEquals("prop3", readType.getProp3());
    }