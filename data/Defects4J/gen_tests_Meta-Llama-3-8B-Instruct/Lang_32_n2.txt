java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.concurrent.TimeUnit;

import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class ToStringStyleMemoryLeakTest {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{{}});
    }

    @Test
    public void testToStringStyleMemoryLeak() {
        org.apache.commons.lang3.builder.ToStringStyle toStringStyle = org.apache.commons.lang3.builder.ToStringStyle.JSON_STYLE;
        // Keep a reference to toStringStyle to prevent it from being garbage collected
        String s = toStringStyle.toString();
        // Wait for a while to ensure the thread local is not cleared
        try {
            TimeUnit.SECONDS.sleep(10);
        } catch (InterruptedException e) {
            fail("Interrupted while waiting for memory leak to occur");
        }
    }
}
