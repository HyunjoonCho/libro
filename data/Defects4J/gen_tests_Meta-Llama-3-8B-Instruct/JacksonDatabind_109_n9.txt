java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.math.BigDecimal;

@RunWith(JUnit4.class)
public class TestBigDecimalSerialization {

    @Test
    public void testWriteBigDecimalAsPlain() throws Exception {
        ObjectMapper mapper = new ObjectMapper()
               .configure(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN, true)
               .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

        Test test = new Test(new BigDecimal("0.0000000005"));

        String json = mapper.writeValueAsString(test);

        // Expected output: {"value":0.00000000050}
        // But actual output: {"value":"5.0E-10"}
        // This test will fail because the output does not match the expected output
        assertEquals("{\"value\":0.00000000050}", json);
    }

    public static class Test {
        @JsonFormat(shape = JsonFormat.Shape.STRING)
        public BigDecimal value;
    }
}
