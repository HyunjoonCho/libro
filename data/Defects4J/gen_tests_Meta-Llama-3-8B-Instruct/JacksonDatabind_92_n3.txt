java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertThrows;
import static org.junit.Assert.assertTrue;

public class TestJdkTypesDeserialization {

    @Test
    public void testBlockJdkTypesDeserialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
        TypeFactory typeFactory = mapper.getTypeFactory();
        TypeReference<List<?>> typeRef = new TypeReference<List<SomeClass>>() {
        };

        // Create a list of objects to serialize
        List<SomeClass> list = new ArrayList<>();
        list.add(new SomeClass());
        list.add(new SomeOtherClass());

        // Serialize the list
        Writer writer = new StringWriter();
        mapper.writeValue(writer, list);

        // Deserialize the list
        List<?> deserializedList = mapper.readValue(writer.toString(), typeRef);

        // Check if the deserialized list contains the correct types
        assertTrue(deserializedList instanceof List);
        for (Object obj : deserializedList) {
            assertTrue(obj instanceof SomeClass);
        }
    }
}
