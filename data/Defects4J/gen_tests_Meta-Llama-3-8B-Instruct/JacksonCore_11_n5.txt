java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Test;
import java.io.IOException;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

public class BugReportTest {

    @Test
    public void testJacksonSerialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        Map<String, ServerIndexPair> map = Maps.newConcurrentMap();
        for (int i = 0; i < 10000; i++) {
            byte[] indexPairBytes = new byte[2080];
            new Random().nextBytes(indexPairBytes);
            ServerIndexPair sip = new ServerIndexPair(indexPairBytes);

            byte[] s = mapper.writeValueAsBytes(ImmutableMap.of(UUID.randomUUID().toString(), sip));
            Map<String, ServerIndexPair> metadata = mapper.readValue(s, new TypeReference<Map<String, ServerIndexPair>>() {});
            for (Map.Entry<String, ServerIndexPair> metadataEntry : metadata.entrySet()) {
                ServerIndexPair indexPair = metadataEntry.getValue();
                map.put(new ObjectUserKey(metadataEntry.getKey(), UUID.randomUUID()), indexPair);
            }
        }
    }
}
