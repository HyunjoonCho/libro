public void testVarCheckCrashWhenUsingModules() {
    // Set up the test files
    File compilerJar = new File("compiler.jar");
    File jqueryJs = new File("dist/jquery.js");
    File coreJs = new File("core.js");
    File externsJs = new File("qunit_externs.js");

    // Set up the command line arguments
    String[] args = new String[] {
        "--compilation_level", "ADVANCED_OPTIMIZATIONS",
        "--formatting", "PRETTY_PRINT",
        "--debug",
        "--module", "jquery:1",
        "--module", "core:1:jquery",
        "--module_output_path_prefix", "mod/",
        "--js", jqueryJs.getAbsolutePath(),
        "--js", coreJs.getAbsolutePath(),
        "--externs", externsJs.getAbsolutePath()
    };

    // Run the compiler
    // This should throw an exception, reproducing the bug
    // The exact exception message may vary, but it should be a RuntimeException
    try {
        // Run the compiler
        // This will throw an exception
        // The exact exception message may vary, but it should be a RuntimeException
        new ProcessBuilder("java", "-jar", compilerJar.getAbsolutePath(), args).start();
        fail("Expected a RuntimeException to be thrown");
    } catch (IOException e) {
        // Expected exception, just log it
        System.out.println("Caught exception: " + e.getMessage());
    }
}