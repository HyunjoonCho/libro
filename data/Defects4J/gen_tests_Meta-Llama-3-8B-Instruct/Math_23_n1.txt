
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.junit.Test;
import org.junit.Assert;

public class BrentOptimizerTest {
    
    @Test
    public void testBrentOptimizerReturnsBestPoint() {
        // Create a test function that returns the value of the point
        double[] x = new double[1];
        double[] y = new double[1];
        x[0] = 0.0;
        y[0] = 0.0;
        UnivariateFunction f = new AbstractUnivariateFunction() {
            @Override
            public double value(double t) {
                x[0] = t;
                return y[0];
            }
        };
        
        // Create the optimizer and set the initial values
        BrentOptimizer optimizer = new BrentOptimizer();
        double[] initial = new double[1];
        initial[0] = 0.0;
        
        // Run the optimization
        double[] result = optimizer.optimize(0.0, 1.0, initial, f);
        
        // Check that the returned point is the best one
        double best = Double.NEGATIVE_INFINITY;
        double bestPoint = 0.0;
        for (double t : x) {
            if (f.value(t) > best) {
                best = f.value(t);
                bestPoint = t;
            }
        }
        Assert.assertEquals(bestPoint, result[0]);
    }
}
