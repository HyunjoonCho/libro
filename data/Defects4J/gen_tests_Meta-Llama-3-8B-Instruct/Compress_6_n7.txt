
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class ZipOutputStreamCorruptionTest {

    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"entry1", "entry2", "entry1", "entry2"},
                {"entry1", "entry1", "entry2", "entry2"}
        });
    }

    @Parameter(0)
    public String entry1Name;

    @Parameter(1)
    public String entry2Name;

    @Parameter(2)
    public String expectedEntry1Name;

    @Parameter(3)
    public String expectedEntry2Name;

    @Test
    public void testZipOutputStreamCorruption() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipOutputStreamzos = new ZipOutputStream(bos);

        ZipEntry entry1 = new ZipEntry(entry1Name);
        ZipEntry entry2 = new ZipEntry(entry2Name);

        zos.putNextEntry(entry1);
        zos.closeEntry();
        zos.putNextEntry(entry2);
        zos.closeEntry();

        zos.close();

        // assert that the zip file is corrupted
        // this can be done by trying to unzip it or checking the zip file contents

        fail("Corrupted zip file");
    }
}
