java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class AbstractClassMockingTest {

    @Test
    public void testFakeUserAccount() {
        // Given
        List<String> emails = new ArrayList<>();
        FakeUserAccount userAccount = spy(new FakeUserAccount() {
            @Override
            public void addEmail(String email) {
                emails.add(email);
            }
        });

        // When
        userAccount.addEmail("email1");
        userAccount.addEmail("email2");

        // Then
        assertEquals(2, userAccount.getEmails().size());
        assertEquals(Arrays.asList("email1", "email2"), userAccount.getEmails());
    }

    @Test
    public void testMockAccountService() {
        // Given
        UserAccount account = mock(UserAccount.class);
        when(account.getEmails()).thenReturn(Arrays.asList("email1", "email2"));
        MockAccountService service = spy(new MockAccountService() {
            @Override
            public void getAccount(String id, AsyncCallback<UserAccount> callback) {
                callback.onSuccess(account);
            }
        });

        // When
        service.getAccount("id");

        // Then
        verify(service).getAccount("id");
        verify(account).getEmails();
    }

    @Test
    public void testMockAccountRpcService() {
        // Given
        MockAccountRpcService service = spy(new MockAccountRpcService() {
            @Override
            public Future<Account> getAccount(String id) {
                return new CompletableFuture<>();
            }
        });

        // When
        when(service.getAccount("id")).thenReturn(new CompletableFuture<>());

        // Then
        verify(service).getAccount("id");
    }
}

abstract class FakeUserAccount implements UserAccount {
    private final List<String> emails = new ArrayList<>();

    @Override
    public void addEmail(String email) {
        emails.add(email);
    }

    @Override
    public List<String> getEmails() {
        return ImmutableList.copyOf(emails);
    }
}

abstract class MockAccountService implements AccountService {
    @Override
    public void getAccount(String id, AsyncCallback<UserAccount> callback) {
        callback.onSuccess(getAccount(id));
    }

    abstract UserAccount getAccount(String id);
}

abstract class MockAccountRpcService implements AccountRpcService {
    @Override
    public Future<Account> getAccount(RpcContext context, String id) {
        return getAccount(id);
    }

    abstract Future<Account> getAccount(String id);
}
