java
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.junit.Test;

import java.util.function.Function;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizer() {
        Function<Double, Double> function = x -> x * x;
        BrentOptimizer optimizer = new BrentOptimizer();
        double[] range = new double[]{0, 10};
        double[] initial = new double[]{5};
        double best = optimizer.optimize(1e-6, 100, function, range, initial);
        // Assert that the returned best point is indeed the best one
        double lastBest = Double.NEG_INFINITY;
        for (double x : optimizer.getIterationHistory()) {
            if (function.apply(x) < lastBest) {
                lastBest = function.apply(x);
            }
        }
        assertEquals(lastBest, function.apply(best), 1e-6);
    }
}
