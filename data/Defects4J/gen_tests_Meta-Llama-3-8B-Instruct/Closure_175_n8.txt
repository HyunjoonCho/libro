java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import com.google.common.collect.ImmutableMap;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSValue;
import com.google.javascript.jscomp.Module;
import com.google.javascript.jscomp.SourceFile;

import java.io.File;
import java.io.IOException;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

@RunWith(JUnit4.class)
public class BugReproductionTest {
    @Test
    public void testIssue() throws IOException {
        Compiler compiler = new Compiler();
        SourceFile input = new SourceFile("input.js", "window['anchor'] = function (obj, modifiesProp) {\n" +
                "  return (function (saved) {\n" +
                "    return modifiesProp(obj) + saved;\n" +
                "  })(obj['prop']);");
        SourceFile externs = new SourceFile("window.js", "window;");
        compiler.addSource(input);
        compiler.addExterns(externs);
        compiler.compile();

        List<Module> modules = compiler.getModules();
        assertNotNull(modules);
        Module module = modules.get(0);
        JSValue result = module.getExport("anchor");
        assertNotNull(result);

        assertEquals("function (a,b){var HOLD=a.prop;return b(a)+HOLD}", result.toString());
    }
}
