java
public void testMapKeyDeserializerModifiersIgnored() throws Exception {
    // Create a module with a custom deserializer modifier
    SimpleModule module = new SimpleModule();
    module.addDeserializerModifier(new BeanDeserializerModifier() {
        @Override
        public JsonDeserializer<?> modifyEnumDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {
            return new JsonDeserializer<Enum>() {
                @Override
                public Enum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
                    Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                    return Enum.valueOf(rawClass, jp.getValueAsString().toUpperCase());
                }
            };
        }

        @Override
        public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, JavaType type, KeyDeserializer deserializer) {
            if (!type.isEnumType()) {
                return super.modifyKeyDeserializer(config, type, deserializer);
            }
            return new KeyDeserializer() {
                @Override
                public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException {
                    Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                    return Enum.valueOf(rawClass, key.toUpperCase());
                }
            };
        }
    });

    // Create a test object with an enum property
    TestObject testObject = new TestObject();
    testObject.setEnumProperty(Enum.values()[0]);

    // Serialize and deserialize the object
    String json = mapper.writeValueAsString(testObject);
    TestObject deserializedObject = mapper.readValue(json, TestObject.class);

    // Verify that the enum property is deserialized correctly
    assertEquals(Enum.values()[0], deserializedObject.getEnumProperty());
}

public class TestObject {
    private Enum<EnumType> enumProperty;

    public Enum<EnumType> getEnumProperty() {
        return enumProperty;
    }

    public void setEnumProperty(Enum<EnumType> enumProperty) {
        this.enumProperty = enumProperty;
    }
}

public enum EnumType {
    VALUE1, VALUE2, VALUE3;
}
