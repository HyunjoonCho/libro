java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class TestMapKeyDeserializerModifiers {

    @Test
    public void testMapKeyDeserializerModifiers() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializerModifier(new ModuleFragment());
        mapper.registerModule(module);

        TypeFactory typeFactory = mapper.getTypeFactory();
        TypeReference<Map<String, Enum<MyEnum>>> typeReference = new TypeReference<Map<String, Enum<MyEnum>>>() {
        };
        Map<String, Enum<MyEnum>> map = mapper.readValue("{\"a\":\"foo\",\"b\":\"bar\"}", typeReference);

        assertNotNull(map);
        assertEquals(MyEnum.FOO, map.get("a"));
        assertEquals(MyEnum.BAR, map.get("b"));
    }

    enum MyEnum {
        FOO, BAR;
    }

    static class ModuleFragment extends SimpleModule {
        @Override
        public void setupModule(SetupContext context) {
            context.setDeserializerModifier(new BeanDeserializerModifier() {
                @Override
                public JsonDeserializer<Enum> modifyEnumDeserializer(DeserializationConfig config, JavaType type, BeanDescription beanDesc, JsonDeserializer<?> deserializer) {
                    return new JsonDeserializer<Enum>() {
                        @Override
                        public Enum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                            return Enum.valueOf(rawClass, jp.getValueAsString().toUpperCase());
                        }
                    };
                }

                @Override
                public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, JavaType type, KeyDeserializer deserializer) {
                    if (!type.isEnumType()) {
                        return super.modifyKeyDeserializer(config, type, deserializer);
                    }
                    return new KeyDeserializer() {
                        @Override
                        @SuppressWarnings("unchecked")
                        public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException {
                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                            return Enum.valueOf(rawClass, key.toUpperCase());
                        }
                    };
                }
            });
        }
    }
}
