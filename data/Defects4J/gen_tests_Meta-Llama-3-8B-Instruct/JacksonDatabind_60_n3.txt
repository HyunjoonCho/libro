
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.io.IOException;
import java.util.Arrays;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

public class JsonValueTest {

    private final ObjectMapper mapper;

    public JsonValueTest() {
        mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();
    }

    @Test
    public void testPolymorphicTypeLoss() throws IOException {
        CommandAPDU commandAPDU = new CommandAPDU(new byte[] {1, 2, 3});
        String json = mapper.writeValueAsString(commandAPDU);
        CommandAPDU deserializedCommandAPDU = mapper.readValue(json, CommandAPDU.class);

        assertEquals(1, deserializedCommandAPDU.apdu.length);
        assertArrayEquals(new byte[] {1, 2, 3}, deserializedCommandAPDU.apdu);
    }
}

class CommandAPDU {
    private byte[] apdu;

    @JsonValue
    public byte[] getBytes() {
        return apdu.clone();
    }

    @JsonCreator
    public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
        this.apdu = apdu.clone();
    }
}
