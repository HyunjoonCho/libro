
public void testBrentOptimizer() {
    BrentOptimizer brentOptimizer = new BrentOptimizer();
    double[] lowerBound = new double[]{-10};
    double[] upperBound = new double[]{10};
    double[] initialPoint = new double[]{0};
    double[] expectedBestPoint = new double[]{0};
    double expectedMinimum = 0;
    
    brentOptimizer.optimize(new MyFunction(), lowerBound, upperBound, initialPoint);
    double actualMinimum = brentOptimizer.getMinimum();
    double[] actualBestPoint = brentOptimizer.getBestPoint();
    
    // Check if actual best point is the same as expected
    for (int i = 0; i < actualBestPoint.length; i++) {
        assertEquals(expectedBestPoint[i], actualBestPoint[i], 0.01);
    }
    
    // Check if actual minimum is the same as expected
    assertEquals(expectedMinimum, actualMinimum, 0.01);
}

class MyFunction implements ObjectiveFunction {
    @Override
    public double value(double[] point) {
        return point[0] * point[0]; // Simple quadratic function
    }
}
