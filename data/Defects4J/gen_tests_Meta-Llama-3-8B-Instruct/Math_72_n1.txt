java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class BrentSolverTest {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][] {
            { 1.0, 0.0, 2.0 }, // root at 1.0
            { 2.0, 1.0, 3.0 }, // root at 2.0
        });
    }

    private double min;
    private double max;
    private double expected;

    public BrentSolverTest(double min, double max, double expected) {
        this.min = min;
        this.max = max;
        this.expected = expected;
    }

    @Test
    public void testBrentSolver() {
        // Assuming you have a function that calculates the value of the function at a point
        double functionValueAtMin = calculateFunctionValueAt(min);
        double functionValueAtMax = calculateFunctionValueAt(max);

        // Assuming the function is implemented as a class
        UnivariateRealFunction function = new MyFunction();

        double result = BrentSolver.solve(function, min, max, min);

        assertEquals(expected, result, 0.00001);
    }

    // This method is not implemented, you need to implement your own function
    private double calculateFunctionValueAt(double x) {
        // implement your function here
        return 0.0; // placeholder
    }
}
