
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.junit.Test;

public class BrentOptimizerTest {
    
    @Test
    public void testBrentOptimizer() {
        // Set up a simple test function
        double[] x = new double[0];
        double[] y = new double[0];
        for (int i = 0; i < 10; i++) {
            x = Utilities.add(x, new double[] { i });
            y = Utilities.add(y, new double[] { i * i });
        }
        BrentOptimizer optimizer = new BrentOptimizer();
        optimizer.optimize(new UnivariateFunction() {
            @Override
            public double value(double x) {
                int index = (int) x;
                return y[index];
            }
        }, 0, 9);
        
        // Check if the returned point is the best one
        double bestValue = Double.MAX_VALUE;
        double bestPoint = -1;
        for (int i = 0; i < 10; i++) {
            double value = y[i];
            if (value < bestValue) {
                bestValue = value;
                bestPoint = i;
            }
        }
        assertEquals(bestPoint, optimizer.getMinimum());
    }
}
