public void testBrentOptimizer() {
    BrentOptimizer brentOptimizer = new BrentOptimizer();
    OptimizableFunction function = new OptimizableFunction() {
        @Override
        public double evaluate(double[] point) {
            // Simulate a function that has multiple local minima
            return point[0] * point[0] + 1;
        }
    };
    double[] start = new double[] {1.5};
    double[] end = new double[] {2.5};
    double[] result = brentOptimizer.optimize(0, function, start, end);
    // This test assumes that the first point is always the best
    double bestValue = function.evaluate(start);
    for (double[] point : Arrays.asList(start, result)) {
        double value = function.evaluate(point);
        if (value < bestValue) {
            bestValue = value;
        }
    }
    assertEquals(bestValue, function.evaluate(result), 0.001);
}