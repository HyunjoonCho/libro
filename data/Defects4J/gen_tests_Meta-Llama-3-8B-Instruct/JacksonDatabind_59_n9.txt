
public void testIssue() throws JsonParseException, JsonMappingException, IOException {
    ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(DefaultTyping.NON_FINAL);
    String json = "{\"mapProperty\":{\"java.util.HashMap\":{\"Compound|Key\":\"Value\"}}}";
    TestClass testInstance = mapper.readValue(json, TestClass.class);
    String testInstanceSerialized = mapper.writeValueAsString(testInstance);
    assertEquals(json, testInstanceSerialized);
}

@JsonAutoDetect(fieldVisibility = ANY)
public static final class TestClass {
    @JsonProperty("mapProperty")
    private final Map<CompoundKey, String> mapProperty;

    @JsonCreator
    private TestClass(@JsonDeserialize(keyUsing = CompoundKeyDeserializer.class) @JsonProperty("mapProperty") Map<CompoundKey, String> mapProperty) {
        this.mapProperty = mapProperty;
    }
}

public static final class CompoundKey {
    private String part0;
    private String part1;

    public CompoundKey(String part0, String part1) {
        this.part0 = part0;
        this.part1 = part1;
    }

    public String getPart0() { return part0; }
    public String getPart1() { return part1; }
}

public static class CompoundKeyDeserializer extends KeyDeserializer {
    @Override
    public Object deserializeKey(String s, DeserializationContext deserializationContext) {
        String[] parts = s.split("\\|");
        return new CompoundKey(parts[0], parts[1]);
    }
}
