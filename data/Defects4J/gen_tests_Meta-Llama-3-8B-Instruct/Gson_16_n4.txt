public void testStackOverflowError() {
    TypeAdapterFactory testTypeAdapterFactory = new TypeAdapterFactory() {
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (type.getRawType() == TestType.class) {
                return new TestTypeAdapter();
            }
            return null;
        }
    };

    Gson gson = new GsonBuilder().registerTypeAdapterFactory(testTypeAdapterFactory).create();
    try {
        gson.getAdapter(TestType.class);
        fail("Expected StackOverflowError");
    } catch (StackOverflowError e) {
        // expected
    }
}

class TestTypeAdapter extends TypeAdapter<TestType> {
    @Override
    public TestType read(JsonReader in) throws IOException {
        return null;
    }

    @Override
    public void write(JsonWriter out, TestType value) throws IOException {
    }
}