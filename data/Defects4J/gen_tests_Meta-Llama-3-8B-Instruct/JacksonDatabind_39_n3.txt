java
public class TestJacksonParsing {

    private final ObjectMapper mapper = new ObjectMapper();

    @Before
    public void setup() {
        mapper.disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);
    }

    @Test
    public void testJacksonNotContinueParsingAfterDeserializationFeatureFailOnInvalidSubtypeError() throws IOException {
        // Test 1: Item2 is not read
        String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
        CallRecord call = mapper.readValue(json, CallRecord.class);
        assertEquals(0.0, call.getVersion());
        assertEquals("123", call.getApplication());
        assertNull(call.getItem2());

        // Test 2: Item is not read
        json = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}";
        call = mapper.readValue(json, CallRecord.class);
        assertEquals(0.0, call.getVersion());
        assertEquals("123", call.getApplication());
        assertNull(call.getItem());

        // Test 3: Application is not read
        json = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, \"version\":0.0,\"application\":\"123\"}";
        call = mapper.readValue(json, CallRecord.class);
        assertEquals(0.0, call.getVersion());
        assertEquals("123", call.getApplication());
        assertNull(call.getItem());
    }
}
