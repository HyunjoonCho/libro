java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class TestPrimitiveDiscrepancy {

    @Test
    public void testPrimitiveDiscrepancy() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JaxbAnnotationModule());
        mapper.enable(SerializationFeature.WRAP_SINGLE_ELEM_ARRAYS_AS_OBJECT);

        // Test 1: Ignore primitive/wrapper override, return original type as is
        String json = mapper.writeValueAsString(new WrapperClass(new int[]{1, 2, 3}));
        assertEquals("{\"value\":[1,2,3]}", json);

        // Test 2: Allow wrapper to "refine" primitive, return wrapper
        json = mapper.writeValueAsString(new WrapperClass(new Integer[]{1, 2, 3}));
        assertEquals("{\"value\":[1,2,3]}", json);
    }
}

class WrapperClass {
    private int[] value;

    public WrapperClass(int[] value) {
        this.value = value;
    }

    public int[] getValue() {
        return value;
    }
}
