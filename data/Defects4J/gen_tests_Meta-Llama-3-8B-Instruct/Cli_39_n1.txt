
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

@RunWith(Parameterized.class)
public class OptionParserTest {

    @Parameters
    public static List<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"existingFile", new File("path/to/existing/file")},
                {"nonExistingFile", new File("path/to/nonExisting/file")}
        });
    }

    private final File file;
    private final String expected;

    public OptionParserTest(String expected, File file) {
        this.file = file;
        this.expected = expected;
    }

    @Test
    public void testOptionParser() throws IOException {
        Options options = new Options();
        options.addOption(Option.builder("f").hasArg().type(File.class).build());
        CommandLine cline = new DefaultParser().parse(options, new String[]{"-f", file.getAbsolutePath()});
        Object result = cline.getParsedOptionValue("f");
        if (expected.equals("existingFile")) {
            assertNotNull(result);
            assertEquals(File.class, result.getClass());
            assertEquals(file, result);
        } else {
            assertNull(result);
        }
    }
}
