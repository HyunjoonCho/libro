
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

public class MockitoAbstractClassTest {

    @Mock
    private AccountService service;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testAbstractClassMocking() {
        when(service.getAccount("id", any(AsyncCallback.class))).thenAnswer(new Answer<Void>() {
            AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];
            @Override
            public Void answer(InvocationOnMock invocation) throws Throwable {
                callback.onSuccess(new UserAccount() {
                    @Override
                    public List<String> getEmails() {
                        return new ArrayList<>();
                    }
                });
                return null;
            }
        });
        // Now you can use the mocked service
        service.getAccount("id", new AsyncCallback<UserAccount>() {
            @Override
            public void onFailure(Throwable throwable) {
                // Handle failure
            }

            @Override
            public void onSuccess(UserAccount userAccount) {
                assertEquals(0, userAccount.getEmails().size());
            }
        });
    }
}
