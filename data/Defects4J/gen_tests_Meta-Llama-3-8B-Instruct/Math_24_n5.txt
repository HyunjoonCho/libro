java
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {
    @Test
    public void testBrentOptimizer() {
        BrentOptimizer optimizer = new BrentOptimizer();
        // Define a function to optimize
        DoublePointToDoubleFunction function = x -> Math.pow(x - 1, 2);
        // Define the initial search range
        double[] initialSearchRange = new double[]{0, 2};
        // Run the optimization
        double result = optimizer.optimize(function, initialSearchRange[0], initialSearchRange[1]);
        // Check if the result is indeed the best point
        double previousValue = Double.MAX_VALUE;
        for (double x : optimizer.getIterationHistory()) {
            double currentValue = function.value(x);
            assertTrue(currentValue <= previousValue);
            previousValue = currentValue;
        }
    }
}
