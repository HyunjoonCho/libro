
import org.junit.Test;
import org.apache.commons.math.linear.Array2DRowRealMatrix;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;

public class SvdTest {

    @Test
    public void testSvdNaN() {
        double[][] Alist = {{1.0, 2.0, 3.0}, {2.0, 3.0, 4.0}, {3.0, 5.0, 7.0}};
        Array2DRowRealMatrix A = new Array2DRowRealMatrix(Alist);
        SingularValueDecompositionImpl decomp = new SingularValueDecompositionImpl(A);
        double[] singularValues = decomp.getSingularValues();
        // Expect the last singular value to be very close to 0
        double epsilon = 1e-6;
        boolean foundNaN = false;
        for (double value : singularValues) {
            if (Double.isNaN(value)) {
                foundNaN = true;
                break;
            }
            if (Math.abs(value) < epsilon) {
                foundNaN = true;
                break;
            }
        }
        assertTrue(foundNaN);
    }
}
