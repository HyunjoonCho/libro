java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import com.google.common.collect.ImmutableMap;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.JSLevel1Compiler;

import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class ClosureCompilerTest {
    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {true, "var foo = function bar(){var bar; alert(bar)};" },
                {false, "function bar(){var bar; alert(bar)};" }
        });
    }

    private final boolean hasVariableAssignment;
    private final String input;

    public ClosureCompilerTest(boolean hasVariableAssignment, String input) {
        this.hasVariableAssignment = hasVariableAssignment;
        this.input = input;
    }

    @Test
    public void testClosureCompiler() throws Exception {
        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(CompilationLevel.SIMPLE_OPTIMIZATIONS);
        Compiler compiler = new JSLevel1Compiler(options);

        String compiledCode = compiler.compile(input).getCode();

        if (hasVariableAssignment) {
            assertEquals("var foo = function bar(){alert(void 0)};", compiledCode);
        } else {
            assertEquals("function bar(){alert(void 0)};", compiledCode);
        }
    }
}
