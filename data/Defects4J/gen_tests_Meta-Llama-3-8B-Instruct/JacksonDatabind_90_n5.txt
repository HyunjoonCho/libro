java
import org.junit.Test;
import static org.junit.Assert.fail;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;

public class ArrayDelegateDeserializationTest {

    public interface MyType {
        @JsonValue
        List<Integer> getValues();

        @JsonCreator
        static MyType of(List<Integer> values) {
            return new MyTypeImpl(values);
        }
    }

    public static class MyTypeImpl implements MyType {
        private final List<Integer> values;

        MyTypeImpl(List<Integer> values) {
            this.values = values;
        }

        @Override
        public List<Integer> getValues() {
            return values;
        }
    }

    @Test
    public void testValueInstantiator() {
        try {
            ObjectMapper mapper = new ObjectMapper();
            MyType thing = mapper.readValue("[]", MyType.class);
            fail("Expected InvalidDefinitionException");
        } catch (Exception e) {
            if (!(e instanceof com.fasterxml.jackson.databind.exc.InvalidDefinitionException)) {
                fail("Expected InvalidDefinitionException, got " + e.getClass());
            }
        }
    }
}
