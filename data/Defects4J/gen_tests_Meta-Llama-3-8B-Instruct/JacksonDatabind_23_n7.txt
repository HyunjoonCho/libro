java
@Test
public void testNonEmptyExclusion() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    ObjectWriter writer = mapper.writer();
    String json = "{\"field1\": 123, \"field2\": \"abc\"}";
    String jsonWithNonEmptyExclusion = "{\"@non_empty\": true, \"field1\": 123, \"field2\": \"abc\"}";

    // Write JSON without non-empty exclusion
    String jsonWithoutNonEmptyExclusion = writer.writeValueAsString(new TestObject("abc", 123));
    assertEquals(json, jsonWithoutNonEmptyExclusion);

    // Write JSON with non-empty exclusion
    String jsonWithNonEmptyExclusion = writer.writeValueAsString(new TestObjectWithNonEmptyExclusion("abc", 123));
    assertEquals(jsonWithNonEmptyExclusion, jsonWithNonEmptyExclusion);

    // Deserialize JSON without non-empty exclusion
    TestObject objectWithoutNonEmptyExclusion = mapper.readValue(jsonWithoutNonEmptyExclusion, TestObject.class);
    assertEquals("abc", objectWithoutNonEmptyExclusion.getField1());
    assertEquals(123, objectWithoutNonEmptyExclusion.getField2());

    // Deserialize JSON with non-empty exclusion
    TestObjectWithNonEmptyExclusion objectWithNonEmptyExclusion = mapper.readValue(jsonWithNonEmptyExclusion, TestObjectWithNonEmptyExclusion.class);
    assertEquals("abc", objectWithNonEmptyExclusion.getField1());
    assertEquals(123, objectWithNonEmptyExclusion.getField2());
}

public class TestObject {
    private String field1;
    private int field2;

    public TestObject(String field1, int field2) {
        this.field1 = field1;
        this.field2 = field2;
    }

    public String getField1() {
        return field1;
    }

    public int getField2() {
        return field2;
    }
}

public class TestObjectWithNonEmptyExclusion {
    @JsonInclude(JsonInclude.Value.type(Include.NON_EMPTY))
    private String field1;
    private int field2;

    public TestObjectWithNonEmptyExclusion(String field1, int field2) {
        this.field1 = field1;
        this.field2 = field2;
    }

    public String getField1() {
        return field1;
    }

    public int getField2() {
        return field2;
    }
}
