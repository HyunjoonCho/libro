java
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TestClosureCompiler {
    @Test
    public void testTypeCoverage() throws Exception {
        // Create JavaScript file
        String jsCode = "/**global window**/\n" +
                "/**jslint sub: true**/\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @param {!Element} element\n" +
                " */\n" +
                "function Example(element) {\n" +
                "    /**\n" +
                "     * @param {!string} ns\n" +
                "     * @param {!string} name\n" +
                "     * @return {undefined}\n" +
                "     */\n" +
                "    this.appendElement = function appendElement(ns, name) {\n" +
                "        var e = element.ownerDocument.createElementNS(ns, name);\n" +
                "        element.appendChild(e);\n" +
                "    };\n" +
                "}\n" +
                "window['Example'] = Example;";

        // Compile it
        String compilationResult = new ProcessBuilder("java", "-jar", "compiler.jar", "--jscomp_error", "checkTypes", "--summary_detail_level", "3", "--js", "v.js", "--js_output_file", "compiled.js")
               .redirectOutput(ProcessBuilder.Redirect.PIPE)
               .start()
               .getInputStream()
               .toString();

        // Check the outcome
        assertEquals(0, getErrorCount(compilationResult));
        assertEquals(0, getWarningCount(compilationResult));
        assertEquals(73.7, getTypedCoverage(compilationResult), 0.1);
    }

    private int getErrorCount(String compilationResult) {
        // Implement this method to parse the compilation result and return the error count
    }

    private int getWarningCount(String compilationResult) {
        // Implement this method to parse the compilation result and return the warning count
    }

    private double getTypedCoverage(String compilationResult) {
        // Implement this method to parse the compilation result and return the typed coverage
    }
}
