java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.lang.ref.WeakReference;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

@RunWith(Parameterized.class)
public class ToStringStyleMemoryLeakTest {

    @Parameters
    public static List<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"org.apache.commons.lang3.builder.ToStringStyle", "toString"},
                {"org.apache.commons.lang3.builder.ToStringStyle", "toStringShort"}
        });
    }

    private final String className;
    private final String methodName;

    public ToStringStyleMemoryLeakTest(String className, String methodName) {
        this.className = className;
        this.methodName = methodName;
    }

    @Test
    public void testToStringStyleMemoryLeak() {
        try {
            Class<?> clazz = Class.forName(className);
            Object obj = clazz.getMethod(methodName).invoke(null);
            WeakReference<?> weakReference = new WeakReference<>(obj);

            // Simulate garbage collection
            System.gc();
            System.runFinalization();

            // Check if the object is still reachable
            assertFalse(weakReference.get() == null);
        } catch (ClassNotFoundException | NoSuchMethodException e) {
            throw new RuntimeException(e);
        }
    }
}
