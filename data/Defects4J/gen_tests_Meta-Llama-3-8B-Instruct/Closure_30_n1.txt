public void testCombiningTemporaryStrings() {
    String originalMethod = "sgxColorRGBA.prototype.asHex = function() {\n" +
            "  var hexString = \"\";\n" +
            "  str = (sgxFloor(this.r*255)).toString(16);\n" +
            "  if (str.length < 2) { str = \"0\"+str; }\n" +
            "  hexString += str;\n" +
            "  str = (sgxFloor(this.g*255)).toString(16);\n" +
            "  if (str.length < 2) { str = \"0\"+str; }\n" +
            "  hexString += str;\n" +
            "  str = (sgxFloor(this.b*255)).toString(16);\n" +
            "  if (str.length < 2) { str = \"0\"+str; }\n" +
            "  hexString += str;\n" +
            "  str = (sgxFloor(this.a*255)).toString(16);\n" +
            "  if (str.length < 2) { str = \"0\"+str; }\n" +
            "  hexString += str;\n" +
            "  return hexString;\n" +
            "};";

    String brokenMethod = "sgxColorRGBA.prototype.pb = function() {\n" +
            "  str = (255 * this.A).toString(16);\n" +
            "  2 > str.length && (str = \"0\" + str);\n" +
            "  str = (255 * this.w).toString(16);\n" +
            "  2 > str.length && (str = \"0\" + str);\n" +
            "  str = (255 * this.s).toString(16);\n" +
            "  2 > str.length && (str = \"0\" + str);\n" +
            "  str = (255 * this.r).toString(16);\n" +
            "  2 > str.length && (str = \"0\" + str);\n" +
            "  return\"\" + str + str + str + str;\n" +
            "};";

    assertEquals(originalMethod, brokenMethod);
}