java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InOrder;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunnerDelegate;
import org.powermock.reflect.exceptions.PowerMockException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertSame;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.doCallRealMethod;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.verify;
import static org.powermock.api.mockito.PowerMockito.mockStatic;
import static org.powermock.api.mockito.PowerMockito.spyStatic;

@RunWith(PowerMockRunnerDelegate.class)
@PowerMockIgnore("sun.reflect.*")
@SuppressStaticInitializationFor("com.example.MockedClass")
public class SpyAbstractClassTest {

    @Test
    public void testSpyAbstractClass() throws Exception {
        // Arrange
        MockedClass mockedClass = mock(MockedClass.class);
        doCallRealMethod().when(mockedClass).abstractMethod();

        // Act
        SpyAbstractClass spy = spy(new SpyAbstractClass(mockedClass));
        spy.specificMethod();

        // Assert
        verify(mockedClass).abstractMethod();
    }
}
