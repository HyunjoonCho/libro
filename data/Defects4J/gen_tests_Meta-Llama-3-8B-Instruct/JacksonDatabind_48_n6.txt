java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import org.junit.Test;

import java.util.List;

public class TestAutoDetectGetterSetter {

    @Test
    public void testAutoDetectGetterSetter() {
        ObjectMapper om = new ObjectMapper();
        om.configure(SerializationFeature.AUTO_DETECT_FIELDS, false);
        om.configure(SerializationFeature.AUTO_DETECT_GETTERS, false);
        om.configure(SerializationFeature.AUTO_DETECT_SETTERS, false);
        om.configure(SerializationFeature.AUTO_DETECT_IS_GETTERS, false);
        om.configure(SerializationFeature.USE_GETTERS_AS_SETTERS, false);
        om.configure(SerializationFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);
        om.configure(SerializationFeature.INFER_PROPERTY_MUTATORS, false);
        om.configure(SerializationFeature.USE_ANNOTATIONS, true);

        TypeFactory typeFactory = om.getTypeFactory();
        Type javaType = typeFactory.constructType(TCls.class);

        BasicClassIntrospector introspector = new BasicClassIntrospector();
        SerializationConfig serializationConfig = om.getSerializationConfig();
        BasicBeanDescription bdesc = introspector.forSerialization(serializationConfig, javaType, null);
        List<BeanPropertyDefinition> bprops = bdesc.findProperties();

        if (1!= bprops.size()) {
            System.out.println("Found property count " + bprops.size() + ", there should only be one??");
        }
        bprops.forEach(prop -> {
            System.out.println("Found property: name=" + prop.getName() + ", internalName=" + prop.getInternalName());
        });
    }
}
