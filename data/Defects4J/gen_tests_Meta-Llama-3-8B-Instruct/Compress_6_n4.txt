java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class ZipOutputstreamTest {

    @Parameters
    public static List<Object[]> data() {
        List<Object[]> params = new ArrayList<>();
        params.add(new Object[]{"file1", "file1", true});
        params.add(new Object[]{"file2", "file2", true});
        params.add(new Object[]{"file1", "file3", false});
        return params;
    }

    private String expectedName;
    private String actualName;
    private boolean shouldPass;

    public ZipOutputstreamTest(String expectedName, String actualName, boolean shouldPass) {
        this.expectedName = expectedName;
        this.actualName = actualName;
        this.shouldPass = shouldPass;
    }

    @Test
    public void testZipOutputstream() throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipOutputStream zip = new ZipOutputStream(bos);
        ZipArchiveEntry entry = new ZipArchiveEntry(expectedName);
        zip.putNextEntry(entry);
        zip.closeEntry();

        entry = new ZipArchiveEntry(actualName);
        zip.putNextEntry(entry);
        zip.closeEntry();

        zip.close();

        byte[] expected = bos.toByteArray();
        byte[] actual = bos.toByteArray();

        if (!shouldPass) {
            assertArrayEquals(expected, actual);
        } else {
            fail("Expected corrupted zip file");
        }
    }
}
