java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.fail;

@RunWith(Parameterized.class)
public class TarArchiveInputStreamTest {

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {new byte[]{-1}, "Invalid byte -1 at offset 7"},
                {new byte[]{'\u0000'}, "Invalid byte 0 at offset 7"},
                // Add more test cases here
        });
    }

    private byte[] corruptedBytes;
    private String expectedMessage;

    public TarArchiveInputStreamTest(byte[] corruptedBytes, String expectedMessage) {
        this.corruptedBytes = corruptedBytes;
        this.expectedMessage = expectedMessage;
    }

    @Test
    public void testTarArchiveInputStream() throws IOException {
        try (InputStream in = new SequenceInputStream(new ByteArrayInputStream(corruptedBytes))) {
            TarArchiveInputStream tarIn = new TarArchiveInputStream(in);
            tarIn.getNextEntry();
            fail("Expected IOException");
        } catch (IOException e) {
            if (!e.getMessage().contains(expectedMessage)) {
                fail("Expected exception message: " + expectedMessage + ", but got: " + e.getMessage());
            }
        }
    }
}
