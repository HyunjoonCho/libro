public void testEbeMultiplyNaN() {
    OpenMapRealVector v1 = new OpenMapRealVector();
    v1.putEntry(0, Double.NaN);
    OpenMapRealVector v2 = new OpenMapRealVector();
    v2.putEntry(0, 2.0);
    OpenMapRealVector result = v1.ebeMultiply(v2);
    assertEquals(Double.NaN, result.getEntry(0));
}

public void testEbeMultiplyInfinity() {
    OpenMapRealVector v1 = new OpenMapRealVector();
    v1.putEntry(0, Double.POSITIVE_INFINITY);
    OpenMapRealVector v2 = new OpenMapRealVector();
    v2.putEntry(0, 2.0);
    OpenMapRealVector result = v1.ebeMultiply(v2);
    assertEquals(Double.POSITIVE_INFINITY, result.getEntry(0));
}

public void testEbeDivideNaN() {
    OpenMapRealVector v1 = new OpenMapRealVector();
    v1.putEntry(0, 2.0);
    OpenMapRealVector v2 = new OpenMapRealVector();
    v2.putEntry(0, Double.NaN);
    OpenMapRealVector result = v1.ebeDivide(v2);
    assertEquals(Double.NaN, result.getEntry(0));
}

public void testEbeDivideInfinity() {
    OpenMapRealVector v1 = new OpenMapRealVector();
    v1.putEntry(0, 2.0);
    OpenMapRealVector v2 = new OpenMapRealVector();
    v2.putEntry(0, Double.POSITIVE_INFINITY);
    OpenMapRealVector result = v1.ebeDivide(v2);
    assertEquals(Double.NaN, result.getEntry(0));
}