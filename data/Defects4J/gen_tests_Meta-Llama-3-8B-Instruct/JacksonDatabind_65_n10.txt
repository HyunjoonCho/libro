java
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeReference;
import org.junit.Test;

import java.io.IOException;
import java.util.Map;
import java.util.Map.Entry;

import static org.junit.Assert.assertEquals;

public class KeyVsFieldTest {
    @Test
    public void deserializeAsKey() throws IOException {
        Map<FullName, Double> map = new ObjectMapper().readValue("{\"first.last\": 42}", new TypeReference<Map<FullName, Double>>() {
        });
        Entry<FullName, Double> entry = map.entrySet().iterator().next();

        assertEquals(entry.getKey().getFirstname(), "first");
        assertEquals(entry.getKey().getLastname(), "last");
        assertEquals(entry.getValue().doubleValue(), 42, 0);
    }

    public static class AsField {
        private final FullName name;

        public AsField(@JsonProperty("name") FullName name) {
            this.name = name;
        }

        public FullName getName() {
            return name;
        }
    }

    public static class FullName {
        private final String firstname;
        private final String lastname;

        private FullName(String firstname, String lastname) {
            this.firstname = firstname;
            this.lastname = lastname;
        }

        @JsonCreator
        public static FullName valueOf(String value) {
            String[] mySplit = value.split("\\.");
            return new FullName(mySplit[0], mySplit[1]);
        }

        public static FullName valueOf(String firstname, String lastname) {
            return new FullName(firstname, lastname);
        }

        @JsonValue
        @Override
        public String toString() {
            return firstname + "." + lastname;
        }
    }
}
