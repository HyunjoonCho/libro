java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class ZipOutputStreamTest {
    @Parameters
    public static Iterable<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {"Entry1", "Entry2", "Entry1", "Entry2"},
                {"Entry1", "Entry1", "Entry2", "Entry2"}
        });
    }

    private String entry1;
    private String entry2;
    private String expectedEntry1;
    private String expectedEntry2;

    public ZipOutputStreamTest(String entry1, String entry2, String expectedEntry1, String expectedEntry2) {
        this.entry1 = entry1;
        this.entry2 = entry2;
        this.expectedEntry1 = expectedEntry1;
        this.expectedEntry2 = expectedEntry2;
    }

    @Test
    public void testZipOutputStream() throws IOException {
        ZipOutputStream zipOutputStream = new ZipOutputStream(new ByteArrayOutputStream());
        ZipEntry entry1 = new ZipEntry(entry1);
        ZipEntry entry2 = new ZipEntry(entry2);
        zipOutputStream.putNextEntry(entry1);
        zipOutputStream.closeEntry();
        zipOutputStream.putNextEntry(entry2);
        zipOutputStream.closeEntry();
        byte[] bytes = ((ByteArrayOutputStream) zipOutputStream).toByteArray();
        // Compare the bytes
        assertArrayEquals(expectedEntry1.getBytes(), bytes);
        assertEquals(expectedEntry2, zipOutputStream.getName(entry1));
    }
}
