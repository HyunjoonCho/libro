java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;

@RunWith(Parameterized.class)
public class SimplexSolverTest {

    @Parameters
    public static List<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {new double[]{7, 3, 0, 0}, new double[]{1, 0, 0, 0}, 1, new double[]{1, 1, 0, 0}, 10},
                // Add more test cases as needed
        });
    }

    private double[] objectiveFunction;
    private double[] constraint1;
    private double constraintValue1;
    private double[] constraint2;
    private double constraintValue2;
    private double expectedResult;

    public SimplexSolverTest(double[] objectiveFunction, double[] constraint1, double constraintValue1, double[] constraint2, double constraintValue2, double expectedResult) {
        this.objectiveFunction = objectiveFunction;
        this.constraint1 = constraint1;
        this.constraintValue1 = constraintValue1;
        this.constraint2 = constraint2;
        this.constraintValue2 = constraintValue2;
        this.expectedResult = expectedResult;
    }

    @Test
    public void testSimplexSolver() {
        LinearObjectiveFunction kritFcia = new LinearObjectiveFunction(objectiveFunction, 0);
        Collection<LinearConstraint> podmienky = new ArrayList<>();
        podmienky.add(new LinearConstraint(constraint1, Relationship.LEQ, constraintValue1));
        podmienky.add(new LinearConstraint(constraint2, Relationship.LEQ, constraintValue2));
        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair result = solver.optimize(kritFcia, podmienky, GoalType.MAXIMIZE, true);
        assertEquals(expectedResult, result.getValue(), 0.01);
    }
}
