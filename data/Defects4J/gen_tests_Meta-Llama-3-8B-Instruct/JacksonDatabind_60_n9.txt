java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

public class JsonValueTest {

    private final ObjectMapper mapper = new ObjectMapper();
    private final TypeFactory typeFactory = mapper.getTypeFactory();

    @Test
    public void testPolymorphicTypeLoss() throws IOException {
        // Setup
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();

        // Serialize and deserialize
        String json = mapper.writeValueAsString(new ByteHolder(new byte[] {1, 2, 3}));
        ByteHolder deserialized = mapper.readValue(json, typeFactory.constructType(ByteHolder.class));

        // Verify deserialization
        assertArrayEquals(new byte[] {1, 2, 3}, deserialized.getApdu());
    }

    private static class ByteHolder {
        private byte[] apdu;

        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }

        @JsonCreator
        public ByteHolder(@JsonProperty("bytes") byte[] apdu) {
            this.apdu = apdu.clone();
        }
    }
}
