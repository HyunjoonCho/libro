
public void testCMAESOptimizerBounds() {
    // Initialize the optimizer with bounds
    CMAESOptimizer optimizer = new CMAESOptimizer(1, new double[]{0.0, 1.0});

    // Set the initial value
    double[] initialValues = new double[]{0.5};

    // Perform optimization
    optimizer.optimize(initialValues, new FitnessFunction() {
        @Override
        public double evaluate(double[] parameters) {
            // This is a placeholder for your actual fitness function
            return 0.0;
        }
    });

    // Assert that the optimizer fits finely near the lower bound and coarsely near the upper bound
    // This may require a specific implementation of the fitness function and the problem being optimized
    // For example, you could check that the optimized value is closer to the lower bound than the upper bound
    // or that the precision of the optimized value is lower near the upper bound
}
