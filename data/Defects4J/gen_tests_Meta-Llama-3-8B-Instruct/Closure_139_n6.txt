java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ErrorReporter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

@RunWith(JUnit4.class)
public class RedefinitionOfFunctionTest {
    @Test
    public void testRedefinitionOfFunction() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        ErrorReporter errorReporter = new ErrorReporter() {
            @Override
            public void error(String message, int start, int end) {
                fail(message);
            }

            @Override
            public void warning(String message, int start, int end) {
                // Ignore warnings
            }
        };

        options.setCompilationLevel(CompilationLevel.SIMPLE_OPTIMIZATIONS);
        compiler.compile("function assert(b) {if (!b) throw 'error'}", options, errorReporter);
        compiler.compile("assert(f() === 1) var f = function() {return 2;}", options, errorReporter);
        compiler.compile("assert(f() === 2)", options, errorReporter);
        compiler.compile("function f() {return 1;}", options, errorReporter);

        // This should raise an error
        compiler.compile("assert(f() === 1)", options, errorReporter);
    }
}
