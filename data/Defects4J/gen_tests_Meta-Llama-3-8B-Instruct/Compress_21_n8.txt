public void testWriting7zEmptyEntriesProducesIncorrectOrCorruptArchive() {
    // Scenario 1: 7 empty files
    File folder = new File("temp");
    folder.mkdirs();
    for (int i = 0; i < 7; i++) {
        new File(folder, "file" + i).createNewFile();
    }
    // Create archive
    // Assert incorrect behavior
    //...

    // Scenario 2: 7 files, some empty, some with content
    folder = new File("temp");
    folder.mkdirs();
    for (int i = 0; i < 7; i++) {
        if (i % 2 == 0) {
            new File(folder, "file" + i).createNewFile();
        } else {
            new File(folder, "file" + i).createNewFile();
        }
    }
    // Create archive
    // Assert incorrect behavior
    //...

    // Scenario 3: 8 empty files
    folder = new File("temp");
    folder.mkdirs();
    for (int i = 0; i < 8; i++) {
        new File(folder, "file" + i).createNewFile();
    }
    // Try to create archive
    // Assert archive cannot be opened
    //...

    // Scenario 4.1: 8 files: some empty, some with content, last file (alphabetically) with content
    folder = new File("temp");
    folder.mkdirs();
    for (int i = 0; i < 8; i++) {
        if (i == 7) {
            new File(folder, "file" + i).createNewFile();
        } else {
            new File(folder, "file" + i).createNewFile();
        }
    }
    // Create archive
    // Assert incorrect behavior
    //...

    // Scenario 4.2: 8 files, some empty, some with content, last file empty
    folder = new File("temp");
    folder.mkdirs();
    for (int i = 0; i < 8; i++) {
        if (i == 7) {
            // Do not create file
        } else {
            new File(folder, "file" + i).createNewFile();
        }
    }
    // Create archive
    // Assert archive is corrupt
    //...
}