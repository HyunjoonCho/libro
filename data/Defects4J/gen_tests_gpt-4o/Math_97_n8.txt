
import org.apache.commons.math.analysis.BrentSolver;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.exception.MaxIterationsExceededException;
import org.apache.commons.math.exception.FunctionEvaluationException;
import org.junit.Test;

import static org.junit.Assert.*;

public class BrentSolverTest {

    @Test
    public void testFunctionValueAtEndpoint() {
        UnivariateRealFunction function = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                if (x == -100000.0) {
                    return 0.0; // Function value at this endpoint
                }
                return -101945.04630982173; // Function value at the other endpoint
            }
        };

        BrentSolver solver = new BrentSolver();
        try {
            // The solve method should handle this case properly
            double root = solver.solve(Integer.MAX_VALUE, function, -100000.0, Double.MAX_VALUE);
            assertEquals(0.0, root, 1e-8);
        } catch (MaxIterationsExceededException | FunctionEvaluationException e) {
            fail("Solver threw an exception: " + e.getMessage());
        } catch (IllegalArgumentException e) {
            fail("Should not have thrown IllegalArgumentException: " + e.getMessage());
        }
    }
}
