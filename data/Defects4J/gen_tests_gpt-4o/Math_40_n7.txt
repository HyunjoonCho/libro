
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.exception.ConvergenceException;
import org.junit.Test;
import static org.junit.Assert.fail;

public class BracketingNthOrderBrentSolverTest {

    @Test
    public void testBracketingNthOrderBrentSolverAgingFeature() {
        // Define a simple polynomial function with a known root
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                // This function will create an imbalance similar to the issue described
                // Root is at x = 12500
                return (x - 12500) * (x - 12500) - 1e-17;
            }
        };

        // Set up a bracketing solver with limited max iterations to force the issue
        BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(
                1e-10, // Relative accuracy
                1e-10, // Absolute accuracy
                5 // Maximum order
        );

        double min = 12500.0;
        double max = 12500.03;
        try {
            // Attempt to find the root within the [min, max] interval
            solver.solve(100, function, min, max);
            fail("Expected a ConvergenceException to be thrown due to bracketing imbalance.");
        } catch (ConvergenceException ce) {
            // Expected exception due to updating the same boundary
            System.out.println("Caught expected ConvergenceException: " + ce.getMessage());
        }
    }
}
