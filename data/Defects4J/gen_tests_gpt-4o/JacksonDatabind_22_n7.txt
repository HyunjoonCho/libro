
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class CustomSerializerTest {

    static class MyPojo {
        private final String value;

        public MyPojo(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return "JsonValue: " + value;
        }
        
        // Assuming there might be other fields and methods
    }

    static class MyPojoSerializer extends StdSerializer<MyPojo> {
        public MyPojoSerializer() {
            super(MyPojo.class);
        }

        @Override
        public void serialize(MyPojo value, com.fasterxml.jackson.core.JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeString("CustomSerializer: " + value.value);
        }
    }

    @Test
    public void testCustomSerializerPrecedence() throws JsonProcessingException {
        ObjectMapper mapper = JsonMapper.builder()
                .addModule(new SimpleModule().addSerializer(new MyPojoSerializer()))
                .build();

        MyPojo pojo = new MyPojo("test");
        String result = mapper.writeValueAsString(pojo);

        // This assertion expects that custom serializer takes precedence over the @JsonValue method.
        assertEquals("\"CustomSerializer: test\"", result);
    }
}
