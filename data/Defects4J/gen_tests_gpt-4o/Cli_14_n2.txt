
package org.apache.commons.cli2.issues;

import java.io.File;
import org.apache.commons.cli2.CommandLine;
import org.apache.commons.cli2.Group;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.commandline.Parser;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.validation.FileValidator;
import org.junit.Test;
import static org.junit.Assert.*;

public class CLI2SampleTest {

    @Test
    public void testFileValidatorCausesClassCastException() {
        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();
        
        DefaultOption fileNameOption = obuilder
            .withShortName("f")
            .withLongName("file-name")
            .withRequired(true)
            .withDescription("name of an existing file")
            .withArgument(abuilder
                .withName("file-name")
                .withValidator(FileValidator.getExistingFileInstance())
                .create())
            .create();
        
        Group options = gbuilder
            .withName("options")
            .withOption(fileNameOption)
            .create();
        
        Parser parser = new Parser();
        parser.setHelpTrigger("--help");
        parser.setGroup(options);
        
        // Assuming "existing-file-path" is a valid path to an existing file
        String[] args = {"--file-name", "existing-file-path"};
        
        try {
            CommandLine cl = parser.parseAndHelp(args);
            fail("Expected ClassCastException not thrown");
        } catch (ClassCastException e) {
            String expectedMessage = "java.io.File cannot be cast to java.lang.String";
            assertTrue(e.getMessage().contains(expectedMessage));
        }
    }
}
