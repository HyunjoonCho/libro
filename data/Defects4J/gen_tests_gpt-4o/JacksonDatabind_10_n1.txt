
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.fasterxml.jackson.databind.SerializerProvider;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class JsonAnyGetterSerializationTest {

    static class MySerializer extends StdSerializer<Map<String, String>> {

        protected MySerializer() {
            super(Map.class);
        }

        @Override
        public void serialize(Map<String, String> value, com.fasterxml.jackson.core.JsonGenerator gen, SerializerProvider provider) throws IOException {
            gen.writeStartObject();
            for (Map.Entry<String, String> entry : value.entrySet()) {
                gen.writeFieldName("prefix_" + entry.getKey());
                gen.writeString(entry.getValue());
            }
            gen.writeEndObject();
        }
    }

    static class TestClass {
        private Map<String, String> parameters = new HashMap<>();

        public TestClass() {
            parameters.put("key1", "value1");
            parameters.put("key2", "value2");
        }

        @JsonSerialize(using = MySerializer.class)
        @JsonAnyGetter
        public Map<String, String> getParameters() {
            return parameters;
        }
    }

    public static void main(String[] args) throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();

        TestClass testClass = new TestClass();
        String jsonResult = mapper.writeValueAsString(testClass);

        System.out.println(jsonResult);

        // Expected output should contain keys with "prefix_" but if the bug is present, it may not.
        // Example of expected output: {"prefix_key1":"value1", "prefix_key2":"value2"}
    }
}
