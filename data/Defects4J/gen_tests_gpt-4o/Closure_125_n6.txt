public void testIllegalStateExceptionInCompiler() {
    String[] jsCode = {
        "var test = {};",
        "/**",
        " * @interface",
        " */",
        "test.T = function() {};",
        "/**",
        " * @constructor",
        " * @implements {test.T}",
        " */",
        "test.A = function() {};",
        "/**",
        " * @constructor",
        " * @implements {test.T}",
        " */",
        "test.B = function() {};",
        "/**",
        " * @constructor",
        " */",
        "test.X = function() {",
        "  this.type = test.A;",
        "  this.t = this.f();",
        "};",
        "/**",
        " * @return {test.T}",
        " */",
        "test.X.prototype.f = function() {",
        "  if (this.type === test.A) {",
        "    return new test.A();",
        "  } else if (this.type === test.B) {",
        "    return new test.B();",
        "  }",
        "};"
    };
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.ALL_CHECKS, CheckLevel.VERBOSE);
    options.setCompilationLevel(CompilationLevel.SIMPLE);
    
    try {
        Result result = compiler.compile(
            CommandLineRunner.getDefaultExterns(),
            ImmutableList.of(SourceFile.fromCode("crash.js", String.join("\n", jsCode))),
            options
        );
        assertTrue(result.success);
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof IllegalStateException);
    }
}