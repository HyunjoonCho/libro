
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;
import static org.junit.Assert.*;

public class SolverTest {

    @Test(expected = org.apache.commons.math3.exception.TooManyEvaluationsException.class)
    public void testRegulaFalsiSolverFailure() {
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new RegulaFalsiSolver();
        // This should throw an exception because the root is not found within 100 evaluations
        solver.solve(100, function, 1, 10);
    }

    @Test
    public void testPegasusSolverSuccess() {
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new PegasusSolver();
        double root = solver.solve(100, function, 1, 10);
        // Expected root value can be checked, for demonstration assuming a value
        double expectedRoot = 3.0; // Adapt this based on calculations or approximations
        // Test if found root is close enough to the expected root, with a delta
        assertEquals(expectedRoot, root, 1e-5);
    }
}
