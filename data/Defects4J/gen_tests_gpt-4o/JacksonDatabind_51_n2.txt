
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class GenericTypeDeserializationTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = "type")
    public static class Container<T> {
        public T value;
    }

    public static class CustomTypeIdResolver extends TypeIdResolverBase {
        
        @Override
        public void init(JavaType bt) {
            // Initialization logic if necessary
        }

        @Override
        public String idFromValue(Object value) {
            return value.getClass().getSimpleName();
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public JavaType typeFromId(DerializationContext context, String id) {
            // Simulate returning a generic type
            return context.getTypeFactory().constructParametricType(Container.class, String.class);
        }

        @Override
        public String getDescForKnownTypeIds() {
            return "CustomTypeIdResolver";
        }

        @Override
        public JsonTypeInfo.Id getMechanism() {
            return JsonTypeInfo.Id.CUSTOM;
        }
    }

    @Test
    public void testGenericTypeDeserialization() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addAbstractTypeMapping(Container.class, Container.class);
        mapper.registerModule(module);

        String json = "{\"type\":\"SomeString\",\"value\":\"Hello World\"}";

        Container<String> container = mapper.readValue(json, Container.class);
        assertEquals("Hello World", container.value);
    }
}
