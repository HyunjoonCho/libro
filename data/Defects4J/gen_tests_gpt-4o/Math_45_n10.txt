
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import static org.junit.Assert.*;
import org.junit.Test;

public class OpenMapRealMatrixTest {

    @Test
    public void testIntegerOverflowInComputeKey() {
        // Choose dimensions that will likely cause an overflow in computeKey
        int largeDimension = Integer.MAX_VALUE / 2 + 1; // This should push the limit
        int row = largeDimension - 1;
        int col = 2;

        try {
            OpenMapRealMatrix matrix = new OpenMapRealMatrix(largeDimension, 10);

            // Inserting an element in a high index to potentially cause overflow in computeKey
            matrix.setEntry(row, col, 1.0);

            double value = matrix.getEntry(row, col);
            assertEquals("Expected value not found at the given index due to overflow.", 1.0, value, 0.0);

            // Verify that no other position holds a value, ensuring no corruption
            assertEquals(0.0, matrix.getEntry(0, 0), 0.0);

        } catch (Exception e) {
            fail("Exception occurred due to potential integer overflow in computeKey(): " + e.getMessage());
        }
    }
}
