
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertTrue;

public class ExternExportTest {

    @Test
    public void testExternExportWithTypedef() {
        String jsCode = ""
            + "/** @typedef {{name: string, age: (number|undefined)}} */\n"
            + "var PersonType;\n"
            + "/**\n"
            + " * @param {PersonType=} person\n"
            + " * @return {string}\n"
            + " */\n"
            + "function getPersonDescription(person) {\n"
            + "  return person ? person.name : 'Anonymous';\n"
            + "}\n";

        CompilerOptions options = new CompilerOptions();
        options.setExternExports(true);

        Compiler compiler = new Compiler();
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", jsCode);

        List<SourceFile> externs = List.of(extern);
        List<SourceFile> inputs = List.of(input);

        compiler.compile(externs, inputs, options);

        Node externExports = compiler.getExternExportsRoot();
        String externExportsCode = compiler.toSource(externExports);

        System.out.println("Generated externs:");
        System.out.println(externExportsCode);

        // Assert the generated externs do not contain truncation
        assertTrue("Externs should not contain truncated typedefs",
                !externExportsCode.contains("..."));
    }
}
