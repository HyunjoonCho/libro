
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testCollapsePropertiesException() {
        // Mock JavaScript code that reproduces the issue
        String jsCode = "var namespace = namespace || {};\n" +
                        "namespace.myFunction = function() {};\n" +
                        "goog.exportSymbol('namespace.myFunction', namespace.myFunction);";

        // Create a Compiler instance
        Compiler compiler = new Compiler();

        // Compile the JavaScript code using ADVANCED_OPTIMIZATIONS
        JSSourceFile input = JSSourceFile.fromCode("/tmp/musictheory.net/v2/js/core.js", jsCode);
        JSSourceFile externs = JSSourceFile.fromCode("externs.js", "var goog = { exportSymbol: function(symbol, object) {} };");

        try {
            Result result = compiler.compile(externs, input, CompilationLevel.ADVANCED_OPTIMIZATIONS);

            // Check if the compilation produced the expected exception
            assertFalse("Compilation should not have succeeded", result.success);
        } catch (RuntimeException e) {
            // Verify the exception is the expected IllegalArgumentException
            assertTrue("Unexpected exception type: " + e.getCause(),
                e.getCause() instanceof IllegalArgumentException);
        }
    }
}
