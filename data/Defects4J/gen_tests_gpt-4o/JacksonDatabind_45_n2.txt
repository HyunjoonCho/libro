public void testShapeNumberWithLocale() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

    // Assuming there's a class with the field annotated incorrectly that would fail before the fix.
    String json = "{\"value\": \"1,234.56\"}";
    MyClass result;

    try {
        result = mapper.readValue(json, MyClass.class);
        fail("Expected JsonMappingException due to invalid shape handling.");
    } catch (JsonMappingException e) {
        // Expected behavior before fix
    }

    // After the fix, with corrected shape handling, this would succeed:
    try {
        json = "{\"value\": 1234.56}";
        result = mapper.readValue(json, MyClass.class);
        assertNotNull(result);
        assertEquals(1234.56, result.getValue(), 0.0001);
    } catch (JsonProcessingException e) {
        fail("Did not expect JsonProcessingException after fix: " + e.getMessage());
    }
}

class MyClass {
    // Example field that could have been misconfigured
    @JsonProperty
    @JsonFormat(shape = JsonFormat.Shape.NUMBER, pattern = "")
    private double value;

    public double getValue() {
        return value;
    }
}