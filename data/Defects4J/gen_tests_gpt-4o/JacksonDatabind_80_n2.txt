public void testExtraneousTypeIdMappingForBaseType() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);

    // Assuming that the following class setup exists in the codebase
    class BaseType { 
        public String name;
    }
    class SubType extends BaseType {
        public String extraField;
    }

    // Registering a subtype
    mapper.registerSubtypes(new NamedType(SubType.class, "SubType"));

    BaseType base = new BaseType();
    base.name = "BaseName";

    // Expect that the resolved type id for the base type should not be its own by default
    String json = mapper.writeValueAsString(base);
    assertFalse(json.contains("\"@type\":\"BaseType\""));
}