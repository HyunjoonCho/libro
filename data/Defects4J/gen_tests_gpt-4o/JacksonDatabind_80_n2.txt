
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;

import static org.junit.Assert.fail;

public class TypeIdMappingTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
    public static abstract class BaseType {
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
    public static class SubType extends BaseType {
        public int value;
    }

    @Test
    public void testTypeIdMappingForBaseType() {
        ObjectMapper objectMapper = new ObjectMapper();

        // Check if a JSON with base type name will lead to unexpected behavior
        String json = "{\"BaseType\":{\"value\":123}}";

        try {
            BaseType baseType = objectMapper.readValue(json, BaseType.class);
            fail("Expected InvalidTypeIdException due to extraneous type id mapping for base type.");
        } catch (InvalidTypeIdException e) {
            // Expected exception due to base type being abstract without explicit ID
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
