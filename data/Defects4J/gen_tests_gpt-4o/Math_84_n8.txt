
import org.apache.commons.math3.optimization.direct.MultiDirectional;
import org.apache.commons.math3.optimization.RealPointValuePair;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class MultiDirectionalTest {

    // A sample multivariate function (e.g., a simple quadratic function)
    private static class QuadraticFunction implements MultivariateFunction {
        public double value(double[] point) {
            double x = point[0];
            double y = point[1];
            return x * x + y * y;
        }
    }

    @Test(timeout = 10000) // Add a timeout to prevent infinite loop
    public void testMultiDirectionalCorrectStart() {
        MultiDirectional optimizer = new MultiDirectional();
        
        // The correct solution is the minimum point (0, 0)
        double[] startPoint = {0.0, 0.0};
        
        // Set up the optimization call
        // Adapt the call for your specific optimization method
        RealPointValuePair optimum = optimizer.optimize(
            new QuadraticFunction(),
            startPoint
        );

        // Assert that the optimizer correctly identifies the solution
        assertEquals(0.0, optimum.getPointRef()[0], 1e-6);
        assertEquals(0.0, optimum.getPointRef()[1], 1e-6);
    }
}
