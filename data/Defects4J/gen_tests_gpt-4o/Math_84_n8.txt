public void testMultiDirectionalCorrectStart() {
    MultiDirectional multiDirectional = new MultiDirectional();
    MultivariateFunction function = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return 0.0; // Assuming the function returns 0.0 at the correct solution point
        }
    };

    double[] startPoint = {1.0, 1.0}; // Assuming this is the correct solution point
    try {
        PointValuePair result = multiDirectional.optimize(
            new MaxEval(1000),
            new ObjectiveFunction(function),
            GoalType.MINIMIZE,
            new InitialGuess(startPoint),
            new SimplexOptimizer(2) // Define a simplex suitable for the dimension
        );
        // If optimization didn't loop forever, it should converge to the startPoint
        assertArrayEquals(startPoint, result.getPoint(), 1e-9);
    } catch (TooManyEvaluationsException e) {
        fail("The optimization should not loop forever for the correct starting point.");
    }
}