
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.SimpleType;
import org.junit.Test;

import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class SimpleTypeTest {

    @Test
    public void testSimpleTypeConstructWithComplexType() {
        // Create a JavaType for a complex type using TypeFactory for reference
        TypeFactory typeFactory = TypeFactory.defaultInstance();
        JavaType expectedJavaType = typeFactory.constructParametricType(Map.class, String.class, List.class);

        // Attempt to create the same type using the deprecated SimpleType.construct(Class)
        JavaType simpleTypeJavaType = SimpleType.construct(Map.class);

        // Ensure that the raw class type is the same
        assertEquals(expectedJavaType.getRawClass(), simpleTypeJavaType.getRawClass());

        // Compare the type parameters to see the resolution issue
        assertEquals("Type parameters should match", 
                     expectedJavaType.getContentType(), 
                     simpleTypeJavaType.getContentType());
    }
}
