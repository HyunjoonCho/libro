
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;

import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

/**
 * Test case to reproduce the bug where _currInputRowStart isn't initialized 
 * correctly in UTF8StreamJsonParser constructor, leading to wrong column position.
 */
public class UTF8StreamJsonParserTest {

    @Test
    public void testIncorrectColumnPosition() {
        // Input JSON with an intentional syntax error for testing
        String jsonInput = "{\"key\": \"value\", \"invalidJson\": }";

        // Create a JSON factory and other necessary components
        JsonFactory jsonFactory = new JsonFactory();
        ObjectCodec codec = null;
        BytesToNameCanonicalizer canonicalizer = BytesToNameCanonicalizer.createRoot();

        // Initialize input stream and buffer
        ByteArrayInputStream inputStream = new ByteArrayInputStream(jsonInput.getBytes());
        byte[] inputBuffer = new byte[512];
        
        // Fill buffer with the input stream. Assume starting at non-zero.
        inputStream.read(inputBuffer, 0, jsonInput.length());

        // Creating an IOContext
        IOContext ioContext = new IOContext(new BufferRecycler(), inputStream, false);

        // Constructor parameters
        int start = 5; // Assume start at non-zero to simulate the issue
        int end = jsonInput.length();

        // Initialize parser with non-zero start position
        try (JsonParser parser = new UTF8StreamJsonParser(
            ioContext, 
            0, 
            inputStream, 
            codec, 
            canonicalizer, 
            inputBuffer, 
            start, 
            end, 
            true)) 
        {
            // Trigger parsing to raise an exception
            while (parser.nextToken() != null) { /* parsing loop */ }

        } catch (JsonParseException e) {
            // Extract the column number from the exception location
            int columnNumber = e.getLocation().getColumnNr();

            // Print the column number for debugging
            System.out.println("Reported column number: " + columnNumber);

            // Assert the incorrect column evaluation due to the bug
            int expectedColumnNumber = 27; // Expected to reflect start offset
            assertEquals(expectedColumnNumber, columnNumber, 
                         "The column number should account for the non-zero start offset.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
