
import com.fasterxml.jackson.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonSerialize;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

// Interface
public interface AccessionIdentifier {
}

// Base class implementing interface
public class BaseAccessionIdentifier implements AccessionIdentifier {
    public String id;

    public BaseAccessionIdentifier() {
    }

    public BaseAccessionIdentifier(String id) {
        this.id = id;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        BaseAccessionIdentifier that = (BaseAccessionIdentifier) obj;
        return id.equals(that.id);
    }

    @Override
    public int hashCode() {
        return id.hashCode();
    }
}

// Class using annotations
public class Foo {
    private AccessionIdentifier reference;

    public Foo(AccessionIdentifier reference) {
        this.reference = reference;
    }

    @JsonSerialize(as = BaseAccessionIdentifier.class)
    @JsonDeserialize(as = BaseAccessionIdentifier.class)
    public AccessionIdentifier getReference() {
        return reference;
    }
}

// Test case
public class JacksonTest {

    @Test
    public void testModelObjects() throws JsonProcessingException {
        // Create an instance of ObjectMapper
        ObjectMapper objectMapper = new ObjectMapper();

        // Create and serialize Foo object
        BaseAccessionIdentifier baseId = new BaseAccessionIdentifier("123");
        Foo foo = new Foo(baseId);
        String jsonString = objectMapper.writeValueAsString(foo);

        // Deserialize back to Foo object
        Foo deserializedFoo = objectMapper.readValue(jsonString, Foo.class);

        // Assert the deserialized value is equal to the original
        assertEquals(foo.getReference(), deserializedFoo.getReference());
    }
}
