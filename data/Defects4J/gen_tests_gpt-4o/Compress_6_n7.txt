public void testZipFileCreationWithManyEntries() throws IOException {
    // Setup a list of file names with potential hash collisions
    List<String> fileNames = new ArrayList<>();
    for (int i = 0; i < 1000; i++) {
        // Using similarly named files that could cause hash collisions in the map
        fileNames.add("file" + i);
    }

    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    ZipOutputStream zipOutputStream = new ZipOutputStream(byteArrayOutputStream);

    // Add each file name as a zip entry
    for (String fileName : fileNames) {
        ZipArchiveEntry entry = new ZipArchiveEntry(fileName);
        zipOutputStream.putNextEntry(entry);
        // Write some content to ensure the entries are not empty
        zipOutputStream.write("Sample content".getBytes());
        zipOutputStream.closeEntry();
    }

    zipOutputStream.close();

    // Attempt to read the zip file using ZipFile to check for validity
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
    ZipFile zipFile = null;
    try {
        zipFile = new ZipFile(new File("test.zip"), ZipEncodingHelper.UTF8);
    } catch (IOException e) {
        fail("Zip file is corrupted or could not be read: " + e.getMessage());
    } finally {
        if (zipFile != null) {
            zipFile.close();
        }
    }

    // Since no exception was thrown, we assume the zip is valid
    assertNotNull(zipFile);
}