
import com.google.gson.Gson;
import org.junit.Test;

public class GsonJniErrorTest {

    @Test(expected = Exception.class)
    public void testGsonJniError() {
        // JSON string that potentially causes the JNI error
        String jsonObj = "{ " +
                "\"feedItemChannel\":\"mdldsrgXN1\"," +
                "\"estimatedData\":{" +
                "   \"feedTopic\":\"Testing\"," +
                "   \"feedComments\":2," +
                "   \"createdBy\":\"KXTQtpfBSW\"," +
                "   \"feedQuestion\":\"Test Question \"," +
                "   \"feedDesc\":\"Test \"}," +
                "\"hashedObjects\":{}," +
                "\"isDeleted\":false," +
                "\"isDeletingEventually\":0," +
                "\"mutex\":{}," +
                "\"operationSetQueue\":[{}]," +
                "\"saveEvent\":{\"callbacks\":[]}," +
                "\"state\":{" +
                "   \"className\":\"FeedItem\"," +
                "   \"createdAt\":1458798818385," +
                "   \"isComplete\":true," +
                "   \"objectId\":\"mdldsrgXN1\"," +
                "   \"serverData\":{" +
                "       \"feedTopic\":\"TestTopic\"," +
                "       \"createdBy\":\"KXTQtpfBSW\"," +
                "       \"feedComments\":2," +
                "       \"feedQuestion\":\"Test Question \"," +
                "       \"feedDesc\":\"Test \"}," +
                "   \"updatedAt\":1458803553636}," +
                "\"taskQueue\":{" +
                "   \"lock\":{" +
                "       \"sync\":{" +
                "           \"state\":0}}}}";

        Gson gson = new Gson();
        // Try to deserialize JSON string into FeedItem class
        gson.fromJson(jsonObj, FeedItem.class);
    }

    // Mimic structure from JSON
    static class FeedItem {
        String feedItemChannel;
        EstimatedData estimatedData;
        Object hashedObjects;
        boolean isDeleted;
        int isDeletingEventually;
        Object mutex;
        Operation[] operationSetQueue;
        SaveEvent saveEvent;
        State state;
        TaskQueue taskQueue;

        static class EstimatedData {
            String feedTopic;
            int feedComments;
            String createdBy;
            String feedQuestion;
            String feedDesc;
        }

        static class Operation {
        }

        static class SaveEvent {
            Object[] callbacks;
        }

        static class State {
            String className;
            long createdAt;
            boolean isComplete;
            String objectId;
            ServerData serverData;
            long updatedAt;

            static class ServerData {
                String feedTopic;
                String createdBy;
                int feedComments;
                String feedQuestion;
                String feedDesc;
            }
        }

        static class TaskQueue {
            LockWrapper lock;
        }

        // Wrapper so we don't directly try to deserialize a Lock
        static class LockWrapper {
            Sync sync;
        }

        static class Sync {
            int state;
        }
    }
}
