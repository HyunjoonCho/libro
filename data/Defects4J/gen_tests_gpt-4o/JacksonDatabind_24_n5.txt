public void testObjectMapperDateFormatTimeZoneIssue() throws JsonProcessingException {
    ObjectMapper mapper = createObjectMapper();
    String serializedDate = mapper.writeValueAsString(new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC));
    
    // Since the time zone changes in version 2.6.0 and above, this assertion assumes the case where
    // there is no incorrect time zone modification, resulting in the same time for serialization.
    assertEquals("\"1988-06-25 20:30:00\"", serializedDate);
}

private ObjectMapper createObjectMapper() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(createJodaModule());
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    // The time zone should remain as UTC
    assertEquals(DateTimeZone.UTC.toTimeZone(), mapper.getSerializationConfig().getTimeZone());
    mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
    // The time zone should still remain as UTC
    assertEquals(DateTimeZone.UTC.toTimeZone(), mapper.getSerializationConfig().getTimeZone());
    return mapper;
}

private SimpleModule createJodaModule() {
    SimpleModule module = new SimpleModule();
    module.addSerializer(DateTime.class, new DateTimeSerializer(
            new JacksonJodaDateFormat(DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss")
                    .withZoneUTC())));
    return module;
}