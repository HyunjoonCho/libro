
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.junit.Test;

import java.text.SimpleDateFormat;

import static org.junit.Assert.assertEquals;

public class ObjectMapperDateTimeTest {

    @Test
    public void testDateTimeSerialization() throws JsonProcessingException {
        ObjectMapper mapper = createObjectMapper();

        // Serialize DateTime with UTC time zone
        String json = mapper.writeValueAsString(new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC));
        
        // Verify that the serialized date remains consistent with configured date format and time handling
        assertEquals("\"1988-06-25 20:30:00\"", json);
    }

    private ObjectMapper createObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(createJodaModule());
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        // Print initial time zone (expecting GMT)
        System.out.println(mapper.getSerializationConfig().getTimeZone());

        // Set a date format that seems to change the time zone in later versions
        mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));

        // Print time zone after setting date format
        System.out.println(mapper.getSerializationConfig().getTimeZone());
        return mapper;
    }

    private SimpleModule createJodaModule() {
        SimpleModule module = new SimpleModule();
        module.addSerializer(DateTime.class, new DateTimeSerializer(
                new JacksonJodaDateFormat(DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss")
                        .withZoneUTC())));
        return module;
    }
}
