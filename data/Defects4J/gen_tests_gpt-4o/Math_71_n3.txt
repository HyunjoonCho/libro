
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.FirstOrderIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.junit.Assert;
import org.junit.Test;

public class OdeIntegratorTest {

    @Test
    public void testMissedEvent() {
        try {
            final double t0 = 1878250320.0000029;
            final double t = 1878250379.9999986;
            FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {

                public int getDimension() {
                    return 1;
                }

                public void computeDerivatives(double t, double[] y, double[] yDot) {
                    yDot[0] = y[0] * 1.0e-6;
                }
            };

            DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0,
                                                                                   1.0e-10, 1.0e-10);

            double[] y = {1.0};
            integrator.setInitialStepSize(60.0);
            
            // Optionally, you can add a step handler to observe the integration process
            integrator.addStepHandler(new StepHandler() {
                public void init(double t0, double[] y0, double t) {
                    // Initialization code if needed
                }

                public void handleStep(StepInterpolator interpolator, boolean isLast) {
                    double currentTime = interpolator.getCurrentTime();
                    if (currentTime > t) {
                        System.err.println("Integrator exceeded the final time at t = " + currentTime);
                    }
                }
            });

            double finalT = integrator.integrate(ode, t0, y, t, y);
            Assert.assertEquals(t, finalT, 1.0e-6);
        } catch (Exception e) {
            e.printStackTrace();
            Assert.fail("Unexpected exception: " + e.getMessage());
        }
    }
}
