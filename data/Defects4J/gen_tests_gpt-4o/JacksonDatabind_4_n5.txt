
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;

public class InvalidFormatExceptionTest {

    static class Holder {
        public List<Integer> numbers;
    }

    @Test
    public void testInvalidFormatExceptionIndexNotSet() {
        ObjectMapper mapper = new ObjectMapper();
        String jsonWithInvalidNumber = "{\"numbers\": [1, 2, \"invalid\", 4]}";

        try {
            mapper.readValue(jsonWithInvalidNumber, Holder.class);
        } catch (InvalidFormatException e) {
            // The expected behavior is to have e.getPath() populated with the index where the error occurred
            JsonMappingException.Reference reference = e.getPath().get(0);
            // As per bug report, we're assuming index should ideally reflect the position in the list
            assertEquals(2, reference.getIndex());
            return;
        } catch (Exception e) {
            e.printStackTrace();
        }
        // Assert failure if no exception was thrown
        assertEquals("Exception was not thrown or Index was not properly set", false, true);
    }
}
