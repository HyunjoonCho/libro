
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.apache.commons.jxpath.xml.DOMParser;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.ByteArrayInputStream;
import org.junit.Test;

public class NamespaceHandlingTest {

    @Test(expected = JXPathException.class)
    public void testNamespaceDeclarationForAttributes() throws Exception {
        // Example XML with namespace prefixes
        String xml = "<ElementA A:myAttr=\"Mytype\" xmlns:A=\"http://example.com/A\">" +
                     "<B:ElementB xmlns:B=\"http://example.com/B\">MY VALUE</B:ElementB>" +
                     "</ElementA>";

        // Parse the XML into a DOM Document
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(new ByteArrayInputStream(xml.getBytes()));

        // Create a JXPathContext from the DOM Document
        JXPathContext context = JXPathContext.newContext(doc);
        
        // Attempt to register namespaces - simulating the original approach
        context.registerNamespace("A", "http://example.com/A");
        context.registerNamespace("B", "http://example.com/B");

        // Accessing the attribute with namespace prefix, which will trigger an exception
        // This should cause an exception because of missing namespace handling
        context.selectSingleNode("ElementA/@A:myAttr");
    }
}
