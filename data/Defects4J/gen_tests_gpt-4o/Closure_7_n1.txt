script
/**
 * @param {*} object Any object.
 * @return {boolean}
 */
test.isMatched = function(object) {
    if (goog.isDef(object)) {
        if (goog.isFunction(object)) {
            // return object();
        } else if (goog.isBoolean(object)) {
            // return object;
        } else if (goog.isString(object)) {
            // return test.isDef(object);
        } else if (goog.isArray(object)) {
            var i = object.length;
            return true;  // Confirming that the block executes
        }
    }
    return false;
};

function testBadTypeInference() {
    // Array test case, as goog.isArray condition leads to the problematic code
    var arrayInput = [1, 2, 3];
    assertEquals(true, test.isMatched(arrayInput));  // We expect this to return true

    // Number test case, should not enter goog.isArray condition
    var numberInput = 42;
    assertEquals(false, test.isMatched(numberInput));
}

// Include a simple assert function for testing
function assertEquals(expected, actual) {
    if (expected !== actual) {
        throw new Error('Assertion failed: expected ' + expected + ', but was ' + actual);
    }
}

// Mock goog library functions
var goog = {
    isDef: function(obj) {
        return obj !== undefined && obj !== null;
    },
    isFunction: function(obj) {
        return typeof obj === 'function';
    },
    isBoolean: function(obj) {
        return typeof obj === 'boolean';
    },
    isString: function(obj) {
        return typeof obj === 'string';
    },
    isArray: function(obj) {
        return Array.isArray(obj);
    }
};

// Run the test
testBadTypeInference();
