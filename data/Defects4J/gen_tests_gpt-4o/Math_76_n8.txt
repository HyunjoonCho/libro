
import org.apache.commons.math4.linear.SingularValueDecomposition;
import org.apache.commons.math4.linear.RealMatrix;
import org.apache.commons.math4.linear.MatrixUtils;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class SingularValueDecompositionTest {

    @Test
    public void testSingularValueDecompositionNaN() {
        double[][] matrixData = {
            {1.0, 2.0, 3.0},
            {2.0, 3.0, 4.0},
            {3.0, 5.0, 7.0}
        };
        
        RealMatrix matrix = MatrixUtils.createRealMatrix(matrixData);
        SingularValueDecomposition svd = new SingularValueDecomposition(matrix);
        
        double[] singularValues = svd.getSingularValues();
        
        // Check for a singular value that is NaN
        for (double singularValue : singularValues) {
            assertFalse("Singular values should not contain NaN", Double.isNaN(singularValue));
        }
        
        // Optionally, check that the last singular value is close to 0, since the matrix is rank deficient
        assertEquals("The last singular value should be close to 0", 0.0, singularValues[singularValues.length - 1], 1e-10);
    }
}
