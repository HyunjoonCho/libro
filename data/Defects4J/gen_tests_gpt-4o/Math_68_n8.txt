
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.apache.commons.math3.optim.PointVectorValuePair;
import org.junit.Test;
import static org.junit.Assert.*;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testConvergenceChecker() {
        // Custom convergence checker that simply tracks whether it was called
        final boolean[] wasChecked = {false};
        ConvergenceChecker<PointVectorValuePair> customChecker = new ConvergenceChecker<PointVectorValuePair>() {
            @Override
            public boolean converged(int iteration, PointVectorValuePair previous, PointVectorValuePair current) {
                wasChecked[0] = true;
                // Just return false to continue optimization regardless of the parameters
                return false;
            }
        };

        // Create an optimizer with the custom convergence checker
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer()
            .withConvergenceChecker(customChecker);

        // Set up a simple least squares problem that will invoke the optimizer

        LeastSquaresProblem problem = new LeastSquaresProblem() {
            @Override
            public RealMatrix getObservationToModelJacobian() {
                // Simplified for illustration
                return null;
            }

            @Override
            public RealVector getTarget() {
                return null;
            }

            @Override
            public RealVector getStart() {
                return null;
            }

            @Override
            public int getObservationSize() {
                return 1;
            }

            @Override
            public int getParameterSize() {
                return 1;
            }

            @Override
            public RealVector evaluate(RealVector realVector) {
                return realVector; // Simplified
            }

            @Override
            public int getIterationLimit() {
                return 1000;
            }

            @Override
            public ConvergenceChecker<PointVectorValuePair> getConvergenceChecker() {
                return customChecker;
            }

            @Override
            public int getMaxEvaluations() {
                return Integer.MAX_VALUE;
            }

            @Override
            public int getEvaluationCounter() {
                return 0;
            }

            @Override
            public LeastSquaresOptimizer.Evaluation evaluate(LeastSquaresOptimizer.ParameterGuesser parameterGuesser) {
                return null;
            }
        };

        optimizer.optimize(problem);

        // Check if our custom checker was ever called
        assertTrue("Custom convergence checker was not used.", wasChecked[0]);
    }
}
