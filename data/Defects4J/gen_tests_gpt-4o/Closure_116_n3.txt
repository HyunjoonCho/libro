
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;

public class AdvancedOptimizationTest {

    @Test
    public void testAdvancedOptimization() throws Exception {
        // Prepare the input JavaScript.
        String inputJs = "window[\"anchor\"] = function (obj, modifiesProp) {\n" +
                         "  return (function (saved) {\n" +
                         "    return modifiesProp(obj) + saved;\n" +
                         "  })(obj[\"prop\"]);\n" +
                         "}";

        // Write the input.js file.
        Files.write(Paths.get("input.js"), inputJs.getBytes());

        // Path to the Closure Compiler JAR.
        String closureCompilerPath = "/path/to/closure-compiler.jar";

        // Compile the JavaScript using Closure Compiler in ADVANCED_OPTIMIZATIONS mode.
        ProcessBuilder processBuilder = new ProcessBuilder(
            "java", "-jar", closureCompilerPath,
            "--compilation_level", "ADVANCED_OPTIMIZATIONS",
            "--warning_level", "VERBOSE",
            "--externs", "window.js",
            "--js", "input.js",
            "--js_output_file", "output.js"
        );

        // Start the process and wait for it to complete.
        Process process = processBuilder.start();
        process.waitFor();

        // Read the output.js file content.
        String outputJs = new String(Files.readAllBytes(Paths.get("output.js")));

        // The expected output.
        String expectedOutput = "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};";

        // Check if the compiled output is as expected.
        assertEquals(expectedOutput, outputJs);
    }
}
