
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import org.junit.Test;

import static org.junit.Assert.fail;

public class ClosureCompilerTest {

    @Test
    public void testSwitchStatementCrash() {
        // JavaScript code that reportedly causes crash in the compiler
        String jsSourceCode = "function a(b) {\n" +
                " switch (b.v) {\n" +
                " case 'SWITCH':\n" +
                " if (b.i >= 0) {\n" +
                " return b.o;\n" +
                " } else {\n" +
                " return undefined;\n" +
                " }\n" +
                " break;\n" + // Line causing issue
                " }\n" +
                "}";

        // Create a new instance of the Closure Compiler
        Compiler compiler = new Compiler();

        // Set options for compilation
        CompilerOptions options = new CompilerOptions();

        // Define source files: the problematic JavaScript code
        JSSourceFile jsInput = JSSourceFile.fromCode("test.js", jsSourceCode);

        try {
            // Invoke the closure compiler
            compiler.compile(
                    JSSourceFile.fromCode("externs.js", ""),
                    jsInput,
                    options
            );
            fail("Expected a RuntimeException due to internal compiler error.");
        } catch (RuntimeException e) {
            // Check if the exception is the expected internal compiler error
            if (!e.getMessage().equals("INTERNAL COMPILER ERROR.\nPlease report this problem.\nnull")) {
                fail("Unexpected exception: " + e.getMessage());
            }
            // The expected internal compiler error occurred, test passed
        }
    }
}
