
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.util.Map.Entry;
import java.util.concurrent.ConcurrentMap;

public class SerializationTest {

    private static final Logger logger = LoggerFactory.getLogger(SerializationTest.class);
    private static final UUID user = UUID.randomUUID(); // Sample user UUID

    @Test
    public void spamTest() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        ConcurrentMap<ObjectUserKey, ServerIndexPair> ssip = Maps.newConcurrentMap();

        for (int i = 0; i < 10000; ++i) {
            byte[] indexPairBytes = new byte[2080];
            new Random().nextBytes(indexPairBytes);
            ServerIndexPair sip = new ServerIndexPair(indexPairBytes);

            byte[] s = mapper.writeValueAsBytes(ImmutableMap.of(UUID.randomUUID().toString(), sip));
            Map<String, ServerIndexPair> metadata = mapper.readValue(s,
                    new TypeReference<Map<String, ServerIndexPair>>() {});

            for (Entry<String, ServerIndexPair> metadataEntry : metadata.entrySet()) {
                ServerIndexPair indexPair = metadataEntry.getValue();
                ssip.put(new ObjectUserKey(metadataEntry.getKey(), user), indexPair);
            }
            logger.error("Iteration: {}", i);
        }
    }
}

class ServerIndexPair {
    public static final String INDEX_PAIR_FIELD = "indexPair";
    private final byte[] indexPair;

    public ServerIndexPair(byte[] indexPair) {
        if (indexPair.length != 2080) {
            throw new IllegalStateException("Index pair must be 2080 bytes long.");
        }
        this.indexPair = indexPair;
    }

    public byte[] getIndexPair() {
        return indexPair;
    }
}

class ObjectUserKey {
    public static final String SEPARATOR = ":";
    private final String objectId;
    private final UUID userKey;

    public ObjectUserKey(String objectId, UUID userKey) {
        this.objectId = objectId;
        this.userKey = userKey;
    }

    public String getObjectId() {
        return objectId;
    }

    public UUID getUserKey() {
        return userKey;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((objectId == null) ? 0 : objectId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (!(obj instanceof ObjectUserKey)) return false;
        ObjectUserKey other = (ObjectUserKey) obj;
        if (objectId == null) {
            if (other.objectId != null) return false;
        } else if (!objectId.equals(other.objectId)) return false;

        if (userKey == null) {
            if (other.userKey != null) return false;
        } else if (!userKey.equals(other.userKey)) return false;

        return true;
    }

    @Override
    public String toString() {
        return userKey + SEPARATOR + objectId;
    }

    public static ObjectUserKey fromString(String value) {
        int index = value.lastIndexOf(SEPARATOR);
        if (index == -1) {
            throw new IllegalStateException("Separator character " + SEPARATOR + " should be present for ObjectUserKey");
        }
        String userKeyString = value.substring(0, index);
        String objectIdString = value.substring(index + 1);
        UUID userKey = UUID.fromString(userKeyString);
        return new ObjectUserKey(objectIdString, userKey);
    }

    public byte[] asBytes() {
        return this.toString().getBytes();
    }
}
