
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import org.junit.Test;

import java.sql.Date;
import java.text.SimpleDateFormat;

import static org.junit.Assert.assertEquals;

public class SqlDateSerializerTest {

    @Test
    public void testCustomSqlDateSerializationFormat() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        
        // Attempt to set global custom format for java.sql.Date
        mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
        
        Date sqlDate = Date.valueOf("2023-10-04"); // Example date

        // Method 1: Expected custom format
        String jsonStringCustomFormat = mapper.writeValueAsString(sqlDate);
        assertEquals("\"2023-10-04\"", jsonStringCustomFormat);

        // Method 2: Reverting change explicitly using a module (hacky)
        ObjectMapper altMapper = new ObjectMapper();
        altMapper.registerModule(new SimpleModule() {
            {
                addSerializer(
                        java.sql.Date.class,
                        new SqlDateSerializer().withFormat(false, new SimpleDateFormat("yyyy-MM-dd"))
                );
            }
        });
        String jsonStringExplicitFormat = altMapper.writeValueAsString(sqlDate);
        assertEquals("\"2023-10-04\"", jsonStringExplicitFormat);
    }
}
