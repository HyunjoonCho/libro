public void testAnonymousObjectTypeWithConstructor() {
    // Set up the JavaScript compilation environment
    CompilerOptions options = new CompilerOptions();
    options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
    options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.ERROR);
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.ERROR);
    options.setWarningLevel(DiagnosticGroups.CHECK_VARS, CheckLevel.ERROR);

    // JavaScript code snippet that represents the problem
    String jsCode = "/**\n" +
                    " * @param {{prop1: string, prop2: (number|undefined)}} parry\n" +
                    " * @constructor\n" +
                    " */\n" +
                    "function callz(parry) {\n" +
                    "  if (parry.prop2 && parry.prop2 < 5) alert('alright!');\n" +
                    "  alert(parry.prop1);\n" +
                    "}\n" +
                    "new callz({prop1: 'hi'});";

    // Compile the JavaScript code
    Compiler compiler = new Compiler();
    compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("input.js", jsCode), options);

    // Check for compilation errors
    assertTrue("Compilation succeeded but was expected to fail due to type inference issues.",
               compiler.getErrors().length > 0);
}