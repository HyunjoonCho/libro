
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

import java.util.Properties;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.Parser;
import org.junit.Test;

public class DefaultOptionsProcessingTest {
    
    @Test
    public void testPartialProcessingOfDefaultOptions() throws ParseException {
        Options options = new Options();
        options.addOption("a", false, "toggle -a");
        options.addOption("c", "c", false, "toggle -c");
        options.addOption(OptionBuilder.hasOptionalArg().create('e'));

        // Test with first set of properties
        Properties properties = new Properties();
        properties.setProperty("a", "false");
        properties.setProperty("c", "no");
        properties.setProperty("e", "0");

        Parser parser = new PosixParser();
        CommandLine cmd = parser.parse(options, null, properties);

        assertTrue(!cmd.hasOption("a"));
        assertTrue(!cmd.hasOption("c"));
        assertTrue(cmd.hasOption("e"));
        assertEquals("0", cmd.getOptionValue("e")); // Corrected: should return "0"

        // Test with second set of properties
        properties = new Properties();
        properties.setProperty("a", "just a string");
        properties.setProperty("e", "");

        cmd = parser.parse(options, null, properties);

        assertTrue(!cmd.hasOption("a"));
        assertTrue(!cmd.hasOption("c"));
        assertTrue(cmd.hasOption("e"));
        assertEquals("", cmd.getOptionValue("e")); // Corrected: should return an empty string
    }
}
