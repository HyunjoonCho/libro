
import static org.junit.Assert.*;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.Parser;
import org.apache.commons.cli.PosixParser;
import org.junit.Before;
import org.junit.Test;

import java.util.Properties;

public class ParserTest {

    private Options opts;
    private Parser parser;

    @Before
    public void setUp() {
        opts = new Options();
        opts.addOption("a", false, "toggle -a");
        opts.addOption("c", "c", false, "toggle -c");
        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));

        parser = new PosixParser();
    }

    @Test
    public void testPropertiesProcessing() throws Exception {
        Properties properties = new Properties();
        properties.setProperty("a", "false");
        properties.setProperty("c", "no");
        properties.setProperty("e", "0");

        CommandLine cmd = parser.parse(opts, null, properties);
        assertFalse(cmd.hasOption("a"));
        assertFalse(cmd.hasOption("c"));
        assertTrue(cmd.hasOption("e"));
        assertEquals("0", cmd.getOptionValue("e"));
    }

    @Test
    public void testPropertiesWithEmptyString() throws Exception {
        Properties properties = new Properties();
        properties.setProperty("a", "just a string");
        properties.setProperty("e", "");

        CommandLine cmd = parser.parse(opts, null, properties);
        assertFalse(cmd.hasOption("a"));
        assertFalse(cmd.hasOption("c"));
        assertTrue(cmd.hasOption("e"));
        assertNull(cmd.getOptionValue("e"));  // Expecting an empty string as value but CommandLine defaults to null
    }
}
