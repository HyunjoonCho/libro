public void testConstTypeCastWarning() {
    // Define the expected error message when @const is used with a type cast
    String expectedWarning = "JSC_CONSTANT_PROPERTY. constant alias for a struct may not have subproperties";

    // Set up the input JavaScript code that reproduces the failure
    String inputJsCode = 
        "/**\n" +
        " * Class defining an interface with two numbers.\n" +
        " * @interface\n" +
        " */\n" +
        "function TwoNumbers() {}\n" +
        "\n" +
        "/** @type {number} */\n" +
        "TwoNumbers.prototype.first;\n" +
        "\n" +
        "/** @type {number} */\n" +
        "TwoNumbers.prototype.second;\n" +
        "\n" +
        "/** @const */ var SOME_DEFAULT =\n" +
        " /** @type {TwoNumbers} */ ({first: 1, second: 2});\n" +
        "\n" +
        "/**\n" +
        " * Class with a two-number member.\n" +
        " * @constructor\n" +
        " */\n" +
        "function HasTwoNumbers() {\n" +
        " /** @type {TwoNumbers} */\n" +
        " this.twoNumbers = this.getTwoNumbers();\n" +
        "}\n" +
        "\n" +
        "/**\n" +
        " * Get the default two numbers.\n" +
        " * @return {TwoNumbers}\n" +
        " */\n" +
        "HasTwoNumbers.prototype.getTwoNumbers = function() {\n" +
        " return SOME_DEFAULT;\n" +
        "};";

    // Compile the JavaScript code using the closure compiler
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    // Capture the warnings
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                     SourceFile.fromCode("input.js", inputJsCode), 
                                     options);

    // Check for warnings and assert the expected warning is present
    assertFalse(result.success);
    boolean foundExpectedWarning = false;
    for (JSError warning : result.warnings) {
        if (warning.getType().key.equals(expectedWarning)) {
            foundExpectedWarning = true;
            break;
        }
    }
    assertTrue("Expected warning not found in the output.", foundExpectedWarning);
}