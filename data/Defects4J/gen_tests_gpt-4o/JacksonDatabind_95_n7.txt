
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

public class TypeFactoryTest {

    @Test(expected = NullPointerException.class)
    public void testConstructFromCanonicalWithUnparameterizedGeneric() {
        // Create an ObjectMapper instance
        ObjectMapper objectMapper = new ObjectMapper();
        
        // Use an unparameterized generic type string
        String returnType = "java.util.List";
        
        // This should throw a NullPointerException in version 2.8.7
        objectMapper.getTypeFactory().constructFromCanonical(returnType);
    }
    
    @Test
    public void testConstructFromCanonicalWithParameterizedGeneric() {
        // Create an ObjectMapper instance
        ObjectMapper objectMapper = new ObjectMapper();
        
        // Use a parameterized generic type string
        String returnType = "java.util.List<java.lang.Object>";
        
        // This should work fine and not throw any exceptions
        objectMapper.getTypeFactory().constructFromCanonical(returnType);
    }
}
