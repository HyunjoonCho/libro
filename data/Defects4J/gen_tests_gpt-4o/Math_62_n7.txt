
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizer;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;
import static org.junit.Assert.*;

public class OptimizationTest {

    @Test
    public void testBrentOptimizerConvergenceChecker() {
        // Ensure you have set a convergence checker or handle the potential NPE.
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        UnivariateFunction parabola = x -> (x - 2) * (x - 2); // Minimum at x = 2

        try {
            double result = optimizer.optimize(
                    new MaxEval(1000),
                    GoalType.MINIMIZE,
                    parabola,
                    GoalType.MINIMIZE,
                    -10, 10).getPoint();
            assertEquals(2.0, result, 1e-8);
        } catch (NullPointerException e) {
            fail("Convergence checker not set, causing NPE");
        }
    }

    @Test
    public void testPowellOptimizer() {
        // Ensure appropriate settings of tolerances between Brent and Powell optimizers.
        MultivariateOptimizer optimizer = new PowellOptimizer(1e-3, 1e-3);
        MultivariateFunction quadratic = point -> FastMath.pow(point[0] - 3, 2) + FastMath.pow(point[1] - 3, 2); // Minimum at (3, 3)

        PointValuePair result = optimizer.optimize(
                new MaxEval(1000),
                quadratic,
                GoalType.MINIMIZE,
                new double[]{0, 0});

        double[] point = result.getPoint();
        assertArrayEquals(new double[]{3.0, 3.0}, point, 1e-3);
    }
}
