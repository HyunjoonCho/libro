
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class EventDetectionTest {

    @Test
    public void testCloseEventsDetection() {
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            public int getDimension() {
                return 1;
            }

            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = 1;
            }
        };

        DormandPrince54Integrator integrator = new DormandPrince54Integrator(1.0e-8, 10, 1.0e-10, 1.0e-10);

        integrator.addEventHandler(new EventHandler() {
            public double g(double t, double[] y) {
                // Switching event at t = 90 and t = 135
                return t - 90.0;
            }

            public Action eventOccurred(double t, double[] y, boolean increasing) {
                y[0] = -y[0]; // simple behavior: reverse sign on event
                return Action.RESET_DERIVATIVES;
            }

            public void resetState(double t, double[] y) {
            }

            public double getMaxCheckInterval() {
                return 10;
            }

            public double getThreshold() {
                return 1.0e-6;
            }

            public double getMaxIterationCount() {
                return 100;
            }
        }, 1.0e-6, 1.0e-6, 100);

        integrator.addEventHandler(new EventHandler() {
            public double g(double t, double[] y) {
                // Second close event at t = 135
                return t - 135.0;
            }

            public Action eventOccurred(double t, double[] y, boolean increasing) {
                y[0] = -y[0]; // simple behavior: reverse sign on event
                return Action.RESET_DERIVATIVES;
            }

            public void resetState(double t, double[] y) {
            }

            public double getMaxCheckInterval() {
                return 10;
            }

            public double getThreshold() {
                return 1.0e-6;
            }

            public double getMaxIterationCount() {
                return 100;
            }
        }, 1.0e-6, 1.0e-6, 100);

        double[] y = new double[]{0.0};
        integrator.integrate(ode, 0.0, y, 150.0, y);
        // Check that y value was successfully evented twice:
        assertEquals("Event handling failed, as the later events did not change the outcome.", 0.0, y[0], 1.0e-10);
    }
}
