
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class ExternalIdDeserTest {

    @JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXTERNAL_PROPERTY,
        property = "type"
    )
    @JsonSubTypes({
        @JsonSubTypes.Type(value = SubTypeA.class, name = "typeA"),
        @JsonSubTypes.Type(value = SubTypeB.class, name = "typeB")
    })
    public static abstract class BaseType {
    }

    public static class SubTypeA extends BaseType {
        public String dataA;
    }

    public static class SubTypeB extends BaseType {
        public int dataB;
    }

    public static class Wrapper {
        public String type;
        public BaseType value;
    }

    @Test
    public void testExternalIdDeserialization() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        String json = "{\"type\":\"typeA\", \"value\":{\"dataA\":\"example data\"}}";

        Wrapper result = objectMapper.readValue(json, Wrapper.class);

        assertNotNull("Value should not be null", result.value);
        assertTrue("Value should be of type SubTypeA", result.value instanceof SubTypeA);
        assertNotNull("dataA should not be null", ((SubTypeA) result.value).dataA);
    }
}
