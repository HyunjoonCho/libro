public void testInvalidPropertyInForLoopPrototypeFunction() {
    // Setup
    String externs = "/** @type {Object} */ var ns = {};\n" +
                     "/** @constructor */\n" +
                     "ns.Thing = function() {};\n" +
                     "var window = {};\n" +
                     "window.console = {};\n" +
                     "window.console.log = function(msg) {};";

    String code = "/**\n" +
                  " * @param {ns.Thing} thing\n" +
                  " * @constructor\n" +
                  " */\n" +
                  "ns.MyClass = function(thing) {\n" +
                  " /** @type {ns.Thing} */ this.thing_ = thing;\n" +
                  "};\n" +
                  "\n" +
                  "ns.MyClass.prototype.doIt = function() {\n" +
                  " var subthing = this.thing_.subthing;\n" +
                  " // NO ERROR:\n" +
                  " for (var i = 0; i < subthing.noprop; i++) {\n" +
                  " window.console.log(i);\n" +
                  " }\n" +
                  "};\n" +
                  "\n" +
                  "var thing = /** @type {ns.Thing} */({subthing: {prop: 3}});\n" +
                  "\n" +
                  "var c = new ns.MyClass(thing);\n" +
                  "c.doIt();";

    // Execute compiler to reproduce the issue
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.ERROR);
    options.setWarningLevel(DiagnosticGroups.EXTERNS_VALIDATION, CheckLevel.ERROR);

    // Compile the code with externs
    Result result = compiler.compile(SourceFile.fromCode("externs.js", externs),
                                     SourceFile.fromCode("inloop.js", code),
                                     options);

    // Verify expected error behavior
    assertFalse("Expected compilation to result in errors, but got none.", result.success);
    assertEquals("Expected type errors, but found: " + result.errors.length, 1, result.errors.length);
}