
import org.junit.Test;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class HasClassTest {

    // Mock jQuery-like element
    private static class Element {
        String className;

        Element(String className) {
            this.className = className;
        }
    }

    // Original version of hasClass
    private boolean originalHasClass(Element[] elements, String selector) {
        return (elements.length > 0 ? 
        !((['', elements[0].className, ''].join(' ')).indexOf(['', selector, ''].join(' ')) == -1)
        : false);
    }

    // Minified version of hasClass
    private boolean minifiedHasClass(Element[] elements, String selector) {
        return elements.length > 0 ?
        ("" + elements[0].className).indexOf("" + selector) != -1 : 
        false;
    }

    @Test
    public void testOriginalAndMinifiedHasClass() {
        Element element = new Element("foo bar");
        Element[] elements = { element };

        // Test for a class that exists
        assertTrue("Original should return true", originalHasClass(elements, "foo"));
        assertTrue("Minified should return true", minifiedHasClass(elements, "foo"));

        // Test for a class that doesn't exist
        assertFalse("Original should return false", originalHasClass(elements, "baz"));
        assertFalse("Minified should return false", minifiedHasClass(elements, "baz"));

        // Test for edge case where class name is part of another class
        element = new Element("foobar baz");
        elements[0] = element;

        // This should return false for the original but true for the minified due to the incorrect logic in indexOf
        assertFalse("Original should return false", originalHasClass(elements, "foo"));
        assertTrue("Minified should return true", minifiedHasClass(elements, "foo"));
    }
}
