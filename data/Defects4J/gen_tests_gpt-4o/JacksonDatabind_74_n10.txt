
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;

import org.junit.Test;
import static org.junit.Assert.*;

public class AsPropertyTypeDeserializerTest {

    private static class TestClass {
        @JsonDeserialize(using = AsPropertyTypeDeserializer.class)
        private NestedClass property;

        // Getters and Setters
        public NestedClass getProperty() {
            return property;
        }

        public void setProperty(NestedClass property) {
            this.property = property;
        }
    }

    private static class NestedClass {
        private String value;

        // Getters and Setters
        public String getValue() {
            return value;
        }

        public void setValue(String value) {
            this.value = value;
        }
    }

    @Test
    public void testDeserializationOfEmptyStringAsNullObject() throws Exception {
        String json = "{\"property\":\"\"}";

        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);

        TestClass result = objectMapper.readValue(json, TestClass.class);
        
        assertNull("Deserialization of empty string should result in null object", result.getProperty());
    }
}
