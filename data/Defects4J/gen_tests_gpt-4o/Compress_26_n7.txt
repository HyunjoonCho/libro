
import org.apache.commons.io.IOUtils;
import org.junit.Test;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.spec.SecretKeySpec;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.assertEquals;

public class IOUtilsTest {

    @Test
    public void testSkipWorksAsExpected() throws Exception {
        byte[] data = "This is some test data".getBytes(StandardCharsets.UTF_8);
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(data);

        SecretKeySpec secretKeySpec = new SecretKeySpec("1234567812345678".getBytes(StandardCharsets.UTF_8), "AES");
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
        CipherInputStream cipherInputStream = new CipherInputStream(byteArrayInputStream, cipher);

        long skippedBytes = IOUtils.skip(cipherInputStream, 10);

        // Expected behavior is to skip exactly 10 bytes unless we are at the end.
        // Since the input is more than 10 bytes, it should skip exactly 10 bytes.
        assertEquals(10, skippedBytes);

        // To confirm that the skipping works properly, try reading a byte from the stream.
        int nextByte = cipherInputStream.read();
        assertEquals(data[10], (byte) nextByte);
    }
}
