
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class UTF8StreamJsonParserTest {

    private ObjectMapper mapper;
    private JsonFactory factory;

    @Before
    public void setup() {
        mapper = new ObjectMapper();
        factory = mapper.getFactory();
    }

    @Test
    public void testColumnCalculation() {
        String invalidJson = "[{ invalid JSON ]"; // Intentionally broken JSON

        try (ByteArrayInputStream inputStream = new ByteArrayInputStream(invalidJson.getBytes("UTF-8"))) {
            JsonParser parser = factory.createParser(inputStream);

            while (parser.nextToken() != null) {
                // Token processing
            }

        } catch (IOException e) {
            fail("Unexpected IOException occurred");
        } catch (Exception e) {
            if (e instanceof com.fasterxml.jackson.core.JsonParseException) {
                com.fasterxml.jackson.core.JsonParseException parseException = (com.fasterxml.jackson.core.JsonParseException) e;
                // Check if the column position is calculated correctly
                int expectedColumn = 3; // 'i' in 'invalid' is the first error, column index starts from 1
                int actualColumn = parseException.getLocation().getColumnNr();
                assertEquals("Column calculation is incorrect", expectedColumn, actualColumn);
            } else {
                fail("Unexpected exception type");
            }
        }
    }
}
