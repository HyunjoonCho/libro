
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.MappingIterator;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.io.IOException;

public class ObjectReaderTest {

    static class TestData {
        public String value;

        public TestData() {}

        public TestData(String value) {
            this.value = value;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            TestData testData = (TestData) obj;
            return value != null ? value.equals(testData.value) : testData.value == null;
        }
    }

    @Test
    public void testReadValuesWithOffset() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectReader reader = objectMapper.readerFor(TestData.class);

        String jsonFull = "[{\"value\": \"first\"}, {\"value\": \"second\"}]";
        byte[] fullArray = jsonFull.getBytes();

        // Specify offset and length to only read the second object
        int offset = fullArray.length - "{\"value\": \"second\"}".length() - 1;
        int length = "{\"value\": \"second\"}".length() + 1; // include closing bracket

        // Read values with specified offset and length
        MappingIterator<TestData> iterator = reader.readValues(fullArray, offset, length);
        
        if (iterator.hasNext()) {
            TestData data = iterator.next();
            assertEquals(new TestData("second"), data);
        } else {
            assertEquals("Iterator should have at least one element", true, iterator.hasNext());
        }
    }
}
