
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.io.*;
import com.google.javascript.jscomp.*;

public class AdvancedOptimizationsTest {

    @Test
    public void testClosureCompilerOptimization() throws Exception {
        // The source code to compile
        String inputJs = 
            "window['anchor'] = function(obj, modifiesProp) {" +
            "  return (function(saved) { return modifiesProp(obj) + saved; })(obj['prop']);" +
            "}";

        // Expected compiled output
        // The expected transformation is based on the bug description
        String expectedOutput = "window.anchor=function(a,b){var c=a.prop;return b(a)+c};";

        // Set up compiler options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        // Create a compiler instance
        Compiler compiler = new Compiler();
        
        // Specify input
        SourceFile input = SourceFile.fromCode("input.js", inputJs);
        
        // Compile the source
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Get the compiled output
        String compiledCode = compiler.toSource();
        
        // Verify the output
        assertEquals(expectedOutput.replaceAll("\\s", ""), compiledCode.replaceAll("\\s", ""));
        assertEquals("Unexpected compilation errors", 0, result.errors.length);
    }
}
