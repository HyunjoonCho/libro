
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Arrays;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolver() {
        // Objective function: Maximize 3x + 2y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{3, 2}, 0);

        // Constraints:
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{2, 1}, Relationship.LEQ, 6));
        constraints.add(new LinearConstraint(new double[]{1, 2}, Relationship.LEQ, 8));
        constraints.add(new LinearConstraint(new double[]{1, 0}, Relationship.LEQ, 7));

        // Create and configure the SimplexSolver
        SimplexSolver solver = new SimplexSolver();

        // Optimize
        PointValuePair solution = solver.optimize(
            new OptimizationData[] {
                f,
                new LinearConstraintSet(constraints),
                GoalType.MAXIMIZE,
                new NonNegativeConstraint(true)
            }
        );

        // Expected optimal solution can be pre-determined
        double[] expectedSolution = {2, 3};  // Example values
        double expectedMaxValue = 12;  // Example value

        // Verify the solution
        assertEquals(expectedMaxValue, solution.getValue(), 1e-6);
        assertArrayEquals(expectedSolution, solution.getPoint(), 1e-6);
    }
}
