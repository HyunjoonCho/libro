
import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.distance.EuclideanDistance;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class KMeansPlusPlusClustererTest {

    @Test
    public void testTruncationIssueInKMeansPlusPlusClusterer() {
        // Create a small set of points with distances less than 1
        List<Clusterable> smallDistancePoints = new ArrayList<>();
        smallDistancePoints.add(new DoublePoint(new double[]{0.001, 0.001}));
        smallDistancePoints.add(new DoublePoint(new double[]{0.002, 0.002}));
        smallDistancePoints.add(new DoublePoint(new double[]{0.003, 0.003}));

        // Instantiate the KMeansPlusPlusClusterer
        KMeansPlusPlusClusterer<Clusterable> clusterer = new KMeansPlusPlusClusterer<>(2, 100, new EuclideanDistance());

        // Perform clustering
        List<? extends Cluster<Clusterable>> clusters = clusterer.cluster(smallDistancePoints);

        // Verify the number of clusters is as expected
        assertEquals("Clusters should not be empty due to truncation errors.", 2, clusters.size());
        
        // Ensure clusters are not empty
        for (Cluster<Clusterable> cluster : clusters) {
            assertFalse("Cluster should not be empty", cluster.getPoints().isEmpty());
        }
    }
}
