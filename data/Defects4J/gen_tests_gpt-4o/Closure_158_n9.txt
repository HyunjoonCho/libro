
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class CompilerFlagPrecedenceTest {

    @Test
    public void testJscompFlagsPrecedence() {
        // Simulate command-line input or configuration
        String[] flags = {"--jscomp_warning", "--jscomp_error", "--jscomp_off"};
        
        // Simulate the method that processes these flags and determines the precedence.
        // For the purpose of this test, we'll assume a function 'getEffectiveFlag' which gives the effective level
        String effectiveFlagBefore = getEffectiveFlag("someWarningLevel", flags);

        // Assert that initially "off" takes precedence
        assertEquals("off", effectiveFlagBefore);

        // Now change the order of flags and check if the last flag takes precedence
        String[] flagsUpdatedOrder = {"--jscomp_error", "--jscomp_warning", "--jscomp_off", "--jscomp_warning"};
        String effectiveFlagAfter = getEffectiveFlag("someWarningLevel", flagsUpdatedOrder);

        // This time, "warning" should take precedence since it is the last flag
        assertEquals("warning", effectiveFlagAfter);
    }

    // Mock implementation of the getEffectiveFlag to simulate flag precedence
    private String getEffectiveFlag(String warningLevel, String[] flags) {
        String effectiveFlag = "off"; // default simulation of starting flag
        for (String flag : flags) {
            // Simulate setting the effective flag based on the current flag
            if (flag.equals("--jscomp_off")) {
                effectiveFlag = "off";
            } else if (flag.equals("--jscomp_warning")) {
                effectiveFlag = "warning";
            } else if (flag.equals("--jscomp_error")) {
                effectiveFlag = "error";
            }
        }
        return effectiveFlag;
    }
}
