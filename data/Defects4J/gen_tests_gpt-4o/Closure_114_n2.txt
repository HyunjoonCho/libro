
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class ClosureCompilerTest {

    @Test
    public void testClosureCompilerCrash() {
        // JavaScript code that triggers the crash
        String jsCode = "var g=function(m){return m*Math.random()|0},d=document,h=d.getElementById('h'),c=d.getElementById('c'),l;"
                + "(l=function(){requestAnimationFrame(l);h.style.textShadow=\"0 0 1px #000,\"+(g(10)-5)+\"px \"+(g(10)-5)"
                + "+\"px 0 #888,0 0 180px rgb(\"+g(255)+\",\"+g(255)+\",\"+g(255)+\")\"})();"
                + "d.addEventListener('mousemove',function(v){c.style.marginTop=(v.pageY/10+15|0)+'px'});";

        // Initialize the compiler and options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        Result result = compiler.compile(JSSourceFile.fromCode("externs.js", ""),
                                         JSSourceFile.fromCode("input.js", jsCode),
                                         options);

        // The test asserts that compilation does not succeed
        // due to the expected compiler crash
        assertFalse("Compiler should fail with unexpected l variable error", result.success);
    }
}
