
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class CompilerShadowingTest {

    @Test
    public void testArgumentsShadowing() {
        // Simulated input code
        String inputCode = "function name() {\n" +
                           "  var arguments = Array.prototype.slice.call(arguments, 0);\n" +
                           "}";

        // Simulated expected output (incorrect compilation result)
        String expectedCompiledCode = "function name(){var c=Array.prototype.slice.call(c,0);}";

        // Simulated actual compilation process (in reality, you'd use a JavaScript compiler)
        String actualCompiledCode = simulateJavaScriptCompilation(inputCode);
        
        // Assert that the compilation result matches the wrong expected output (to show the bug)
        assertEquals(expectedCompiledCode, actualCompiledCode);
    }

    private String simulateJavaScriptCompilation(String code) {
        // Simulate the compilation process and return the "compiled" code
        // In practice, replace this with an actual call to a JavaScript compiler
        // Here, we simulate the buggy behavior for demonstration purposes only
        return "function name(){var c=Array.prototype.slice.call(c,0);}";
    }
}
