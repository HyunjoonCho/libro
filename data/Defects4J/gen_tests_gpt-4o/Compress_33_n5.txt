
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.junit.Test;

public class CompressorStreamFactoryTest {

    @Test(expected = CompressorException.class)
    public void testDeflateStreamWithZlibHeader() throws Exception {
        // Sample data to compress
        String originalContent = "Sample text data for compression";
        
        // Compress the data with a zlib header
        byte[] compressedData = compressWithZlib(originalContent);
        
        // Feed the compressed data into CompressorStreamFactory
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(compressedData);
        
        // This should throw a CompressorException due to the inability to handle zlib headers
        CompressorInputStream input = new CompressorStreamFactory()
                .createCompressorInputStream(byteArrayInputStream);
    }
    
    private byte[] compressWithZlib(String data) throws Exception {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        Deflater deflater = new Deflater(Deflater.DEFAULT_COMPRESSION, false);
        try (DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(byteArrayOutputStream, deflater)) {
            deflaterOutputStream.write(data.getBytes());
        }
        return byteArrayOutputStream.toByteArray();
    }
}
