
import static org.junit.Assert.assertEquals;

import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;

import org.junit.Test;

public class WhitespaceCompressionTest {

    @Test
    public void testForEachKeywordPreservation() {
        // Original JavaScript code before compression
        String originalCode = "contactcenter.screenpop.updatePopStatus = function(stamp, status) { " +
                "for each ( var curTiming in this.timeLog.timings ) { " +
                "if ( curTiming.callId == stamp ) { " +
                "curTiming.flag = status; " +
                "break; " +
                "} " +
                "} " +
                "};";

        // Expected JavaScript code after compression, preserving `for each` keyword
        String expectedCode = "contactcenter.screenpop.updatePopStatus=function(stamp,status){for each(var curTiming in this.timeLog.timings)if(curTiming.callId==stamp){curTiming.flag=status;break}};";

        // Set up the Google Closure Compiler
        Compiler compiler = new Compiler();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(compiler.getOptions());

        // Compile the JavaScript code
        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");
        JSSourceFile input = JSSourceFile.fromCode("input.js", originalCode);
        Result result = compiler.compile(extern, input, compiler.getOptions());

        // Assert that the compiled code matches the expected code
        assertEquals(expectedCode, compiler.toSource());
    }
}
