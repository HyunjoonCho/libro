public void testClosureCompilerIsFunctionBug() {
    Object getType = new Object();
    
    // Original implementation using an Object
    Function<Object, Boolean> isFunctionOriginal = (functionToCheck) -> 
        functionToCheck != null && 
        getType.toString().apply(functionToCheck).equals("[object Function]");

    // The implementation using an Array (to work around the bug)
    Object getTypeArray = new Object[0];
    Function<Object, Boolean> isFunctionArray = (functionToCheck) ->
        functionToCheck != null &&
        getTypeArray.toString().apply(functionToCheck).equals("[object Function]");
    
    Object functionToCheck = new Function<String, Void>() {
        @Override
        public Void apply(String s) { return null; }
    };

    assertFalse(isFunctionOriginal.apply(functionToCheck));
    assertTrue(isFunctionArray.apply(functionToCheck));
}