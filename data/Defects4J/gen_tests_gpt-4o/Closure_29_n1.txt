
import org.junit.Test;
import static org.junit.Assert.*;

public class ClosureCompilerBugTest {

    @Test
    public void testIsFunctionWithObject() {
        // Define a function to be checked
        Object functionToCheck = new Object() {
            @Override
            public String toString() {
                return "[object Function]";
            }
        };

        // Original implementation that fails after Closure Compiler
        boolean result = isFunctionWithObject(functionToCheck);
        
        // Expecting true but Closure Compiler may lead to incorrect result
        assertFalse("Closure Compiler should maintain correct isFunction behavior with object", result);
    }

    @Test
    public void testIsFunctionWithArray() {
        // Define a function to be checked
        Object functionToCheck = new Object() {
            @Override
            public String toString() {
                return "[object Function]";
            }
        };

        // Modified implementation that works with Closure Compiler
        boolean result = isFunctionWithArray(functionToCheck);

        // Expecting true as this workaround should succeed
        assertTrue("Closure Compiler should maintain correct isFunction behavior with array", result);
    }

    private boolean isFunctionWithObject(Object functionToCheck) {
        Object getType = new Object();
        return functionToCheck != null && "[object Function]".equals(getType.toString().apply(functionToCheck));
    }

    private boolean isFunctionWithArray(Object functionToCheck) {
        Object getType = new Object[] {}; // Using an array instead of an object
        return functionToCheck != null && "[object Function]".equals(getType.toString().apply(functionToCheck));
    }
}
