
import org.apache.commons.math3.dfp.Dfp;
import org.apache.commons.math3.dfp.DfpField;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class DfpMultiplyTest {

    @Test
    public void testDfpMultiplyWithLargeInt() {
        DfpField field = new DfpField(16);
        Dfp dfpValue = field.newDfp("1.5");

        try {
            // Attempt to multiply with a large int value
            Dfp result = dfpValue.multiply(10000);
            // If no exception, check expected behavior
            // Since this is illustrative, replace the 'expectedResult' with 
            // the expected behavior once you fix the bug.
            assertEquals("This should be the expected result after fixing the bug", 
                         expectedValue, result);
        } catch (NumberFormatException e) {
            fail("Dfp.multiply(int n) should not throw NumberFormatException for n > 9999");
        }
    }
}
