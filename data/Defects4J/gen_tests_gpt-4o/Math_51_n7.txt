
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BaseUnivariateSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.junit.Test;

import static org.junit.Assert.fail;

public class RegulaFalsiSolverTest {

    @Test
    public void testBug() {
        final UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        BaseUnivariateSolver<UnivariateFunction> solver = new RegulaFalsiSolver();
        try {
            double root = solver.solve(100, f, 1, 10);
            // Expected: root should be found without exceeding the evaluation limit
            System.out.println("Root found: " + root);
        } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) {
            fail("Illegal state: maximal count (100) exceeded: evaluations");
        }
    }
}
