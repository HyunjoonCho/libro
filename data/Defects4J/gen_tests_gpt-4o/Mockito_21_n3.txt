
import org.junit.Test;
import org.mockito.Mockito;
import java.util.ArrayList;
import java.util.List;

public class MockitoAbstractClassTest {

    interface UserAccount {
        List<String> getEmails();
        void addEmail(String email);
    }

    abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        public List<String> getEmails() {
            return new ArrayList<>(emails);
        }
    }

    @Test
    public void testFakeUserAccount() {
        // Using Mockito spy to simulate a real FakeUserAccount for complex logic
        FakeUserAccount userAccount = Mockito.spy(FakeUserAccount.class);

        // Since we're using a mock/spied instance, add behavior manually
        Mockito.doCallRealMethod().when(userAccount).addEmail(Mockito.anyString());
        Mockito.doCallRealMethod().when(userAccount).getEmails();

        // Add emails and verify getEmails behavior
        userAccount.addEmail("example@test.com");
        userAccount.addEmail("demo@example.com");

        List<String> emails = userAccount.getEmails();

        // Assert emails list
        org.junit.Assert.assertEquals(2, emails.size());
        org.junit.Assert.assertEquals("example@test.com", emails.get(0));
        org.junit.Assert.assertEquals("demo@example.com", emails.get(1));
    }
}
