public void testAbstractClassSpyingExample1() throws Exception {
    // Use Mockito to spy on the abstract class
    FakeUserAccount fakeUserAccount = Mockito.spy(FakeUserAccount.class);
    
    // Execute some logic
    fakeUserAccount.addEmail("test@example.com");
    
    // Verify the logic
    assertEquals(1, fakeUserAccount.getEmails().size());
    assertEquals("test@example.com", fakeUserAccount.getEmails().get(0));
}

public void testAbstractClassSpyingExample2() throws Exception {
    // Use Mockito to spy on the mock class
    MockAccountService mockService = Mockito.spy(MockAccountService.class);
    AsyncCallback<UserAccount> callback = Mockito.mock(AsyncCallback.class);
    UserAccount mockAccount = Mockito.mock(UserAccount.class);
    
    // Stubbing method
    Mockito.doAnswer(invocation -> {
        AsyncCallback<UserAccount> cb = invocation.getArgument(1);
        cb.onSuccess(mockAccount);
        return null;
    }).when(mockService).getAccount(Mockito.anyString(), Mockito.any(AsyncCallback.class));
    
    // Call
    mockService.getAccount("id", callback);

    // Verify
    Mockito.verify(callback).onSuccess(mockAccount);
}

public void testAbstractClassSpyingExample3() throws Exception {
    // Use Mockito to spy on the mock class
    MockAccountRpcService service = Mockito.spy(MockAccountRpcService.class);
    Future<Account> futureAccount = Mockito.mock(Future.class);
    RpContext context = Mockito.mock(RpcContext.class);

    // Stubbing method
    Mockito.doReturn(futureAccount).when(service).getAccount(Mockito.anyString());

    // Call and verify
    assertSame(futureAccount, service.getAccount(context, "id"));
}