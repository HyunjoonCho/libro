public void testLevenbergMarquardtOptimizerConvergenceChecker() {
    ConvergenceChecker<PointVectorValuePair> customChecker = new ConvergenceChecker<PointVectorValuePair>() {
        @Override
        public boolean converged(int iteration, PointVectorValuePair previous, PointVectorValuePair current) {
            // Simple convergence check logic
            return Math.abs(previous.getPoint()[0] - current.getPoint()[0]) < 1e-10;
        }
    };
    
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    optimizer.setConvergenceChecker(customChecker);
    
    // Create a dummy model function for testing
    DifferentiableMultivariateVectorFunction model = new DifferentiableMultivariateVectorFunction() {
        @Override
        public double[] value(double[] point) {
            return new double[] { point[0] * point[0] };
        }
        @Override
        public MultivariateMatrixFunction jacobian() {
            return new MultivariateMatrixFunction() {
                @Override
                public double[][] value(double[] point) {
                    return new double[][] { { 2 * point[0] } };
                }
            };
        }
    };
    
    // Setup target values and initial guess
    double[] target = { 1.0 };
    double[] initial = { 0.5 };
    
    PointVectorValuePair result = optimizer.optimize(
        new MaxEval(1000),
        model,
        target,
        initial,
        null
    );
    
    // Verify the optimizer used the custom convergence checker
    assertTrue(customChecker.converged(0, new PointVectorValuePair(initial, target), result));
}