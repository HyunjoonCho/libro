
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

public class TypeFactoryTest {

    @Test(expected = NullPointerException.class)
    public void testConstructFromCanonicalNPE() {
        // Create ObjectMapper instance
        ObjectMapper objectMapper = new ObjectMapper();

        // Use TypeFactory to construct type from canonical string without parameterized type
        String returnType = "java.util.List";

        // This line should cause a NullPointerException in version 2.8.7
        objectMapper.getTypeFactory().constructFromCanonical(returnType);
    }

    @Test
    public void testConstructFromCanonicalWithParameterizedType() {
        // Create ObjectMapper instance
        ObjectMapper objectMapper = new ObjectMapper();

        // Use TypeFactory to construct type from canonical string with parameterized type
        String returnTypeWithParam = "java.util.List<java.lang.Object>";

        try {
            // This should not throw an exception
            objectMapper.getTypeFactory().constructFromCanonical(returnTypeWithParam);
        } catch (Exception e) {
            // Fail the test if any exception is thrown
            e.printStackTrace();
            fail("An exception was thrown for parameterized type: " + e.getMessage());
        }
    }
}
