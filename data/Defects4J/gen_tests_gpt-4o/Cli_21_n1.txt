
import org.junit.Test;
import static org.junit.Assert.*;

public class CommandLineParserTest {

    @Test
    public void testNegativeNumberAsOptionArgument() {
        // Setup the argument with a validator that expects a number
        ArgumentBuilder aBuilder = new ArgumentBuilder();
        Argument numArg = aBuilder.withValidator(NumberValidator.getNumberInstance())
                                  .withMinimum(1)
                                  .withMaximum(1)
                                  .create();

        // Setup the option that includes the argument
        OptionBuilder oBuilder = new OptionBuilder();
        Option numOpt = oBuilder.withLongName("num")
                                .withArgument(numArg)
                                .create();

        // Group the options
        GroupBuilder gBuilder = new GroupBuilder();
        Group options = gBuilder.withOption(numOpt).create();

        // Create a new parser
        CommandLineParser parser = new CommandLineParser();

        try {
            // Parse the command line arguments
            parser.parse(options, new String[]{"--num", "-0.1"});
            fail("Expected a ParseException to be thrown");
        } catch (ParseException e) {
            // Validate that the exception message is about the wrong argument
            assertEquals("Unexpected -0.1 while processing --num", e.getMessage());
        }
    }

    // Mock or implement the used classes and methods here if needed
    // Placeholder for ArgumentBuilder, OptionBuilder, GroupBuilder, CommandLineParser, etc.
}
