
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.Test;

import static org.junit.Assert.*;

public class PrimitiveToWrapperTest {

    private static final String JSON_INT = "123";

    @Test
    public void testPrimitiveToWrapperRefinement() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // Expecting successful deserialization from primitive int to Integer wrapper
        Integer integerValue = objectMapper.readValue(JSON_INT, Integer.class);
        assertNotNull(integerValue);
        assertEquals(Integer.valueOf(123), integerValue);

        // Attempting to refine primitive int to wrapper Long should cause a failure
        try {
            Long longValue = objectMapper.readValue(JSON_INT, Long.class);
            fail("Expected InvalidDefinitionException due to type refinement int -> Long");
        } catch (InvalidDefinitionException e) {
            // Expected exception
            assertTrue(e.getMessage().contains("Cannot coerce type"));
        }
    }
}
