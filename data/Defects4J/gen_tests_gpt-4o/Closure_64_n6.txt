
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class ClosureCompilerTest {

    public static void main(String[] args) {
        try {
            // Create get_num.js
            Path getNumPath = Paths.get("get_num.js");
            Files.write(getNumPath, "var getNum = function() { return 5; };".getBytes());

            // Create alert.js
            Path alertPath = Paths.get("alert.js");
            Files.write(alertPath, "alert(getNum());".getBytes());

            // Compile using Closure Compiler command
            ProcessBuilder processBuilder = new ProcessBuilder(
                    "java", "-jar", "compiler.jar",
                    "--language_in=ECMASCRIPT5_STRICT",
                    "--compilation_level=ADVANCED_OPTIMIZATIONS",
                    "--warning_level=VERBOSE",
                    "--js", "get_num.js",
                    "--js", "alert.js"
            );

            // Redirect output and error streams
            processBuilder.redirectOutput(ProcessBuilder.Redirect.INHERIT);
            processBuilder.redirectError(ProcessBuilder.Redirect.INHERIT);

            // Run process
            Process process = processBuilder.start();
            int exitCode = process.waitFor();

            System.out.println("Compiler exit code: " + exitCode);

            // Clean up test files
            Files.deleteIfExists(getNumPath);
            Files.deleteIfExists(alertPath);

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }
}
