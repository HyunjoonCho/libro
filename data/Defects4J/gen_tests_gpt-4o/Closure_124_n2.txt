
import org.junit.Test;
import java.io.*;
import static org.junit.Assert.assertEquals;

public class ClosureCompilerTest {

    @Test
    public void testCommandLineCompilation() throws IOException, InterruptedException {
        // Define the JavaScript code to mimic the test.js file.
        String jsCode = "var foreignObject = gfx.parentNode.parentNode;\n" +
                        "var parentContainer = foreignObject.parentNode.parentNode;";

        // Write the JavaScript code to a temporary test file (test.js).
        File tempFile = File.createTempFile("test", ".js");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
            writer.write(jsCode);
        }

        // Execute the compiler.jar command.
        ProcessBuilder processBuilder = new ProcessBuilder(
                "java", "-jar", "compiler.jar", "--js", tempFile.getAbsolutePath());
        processBuilder.redirectErrorStream(true);

        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        StringBuilder output = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
        }
        
        int exitCode = process.waitFor();
        assertEquals(0, exitCode); // Ensure the process completed successfully.

        String expectedOutputFromWeb = "if(b){if(a=b.parentNode.parentNode,b=a.parentNode.parentNode,null!==b";
        
        // Check that command-line compiled output matches expected output.
        assertEquals(trimExpectedOutput(expectedOutputFromWeb), trimOutput(output.toString()));

        // Clean up temporary file.
        tempFile.delete();
    }
    
    private String trimExpectedOutput(String input) {
        // Placeholder for cleaning or formatting expected output, if necessary.
        return input.trim();
    }
    
    private String trimOutput(String input) {
        // Placeholder for cleaning or formatting actual output, if necessary.
        return input.trim();
    }
}
