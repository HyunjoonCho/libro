
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class JsCompilerTest {

    @Test
    public void testTypedefResolution() {
        // JavaScript code that reproduces the issue
        String jsSource = ""
            + "goog.provide('a.b.c');\n"
            + "\n"
            + "goog.scope(function() {\n"
            + "  var b = a.b;\n"
            + "  var c = b.c;\n"
            + "\n"
            + "  /** @typedef {string} */\n"
            + "  c.MyType;\n"
            + "\n"
            + "  /** @param {c.MyType} x The variable. */\n"
            + "  c.myFunc = function(x) {};\n"
            + "});";

        // Initialize a Compiler instance
        Compiler compiler = new Compiler();

        // Configure the Compiler options
        CompilerOptions options = new CompilerOptions();
        options.setCheckTypes(true); // Enable type checking

        // Define the source files (JavaScript source in this case)
        SourceFile sourceFile = SourceFile.fromCode("test.js", jsSource);

        // Run the compiler with the given options and source files
        Result result = compiler.compile(
            CommandLineRunner.getDefaultExterns(),
            SourceFile.fromCode("test.js", jsSource),
            options
        );

        // The test should fail if there are any type errors
        assertFalse("No type errors should occur", result.hasErrors());
    }
}
