
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

public class CommandAPDUTest {
    
    @Test
    public void testPolymorphicTypePreservation() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();

        byte[] apdu = new byte[]{1, 2, 3, 4, 5};
        
        CommandAPDU originalCommandAPDU = new CommandAPDU(apdu);
        
        try {
            // Serialize the object
            String json = mapper.writeValueAsString(originalCommandAPDU);

            // Deserialize the object
            Object deserializedObject = mapper.readValue(json, Object.class);

            // Check if the deserialized object is an instance of CommandAPDU
            if (deserializedObject instanceof CommandAPDU) {
                CommandAPDU deserializedAPDU = (CommandAPDU) deserializedObject;
                assertArrayEquals(originalCommandAPDU.getBytes(), deserializedAPDU.getBytes());
            } else {
                fail("Deserialized object is not an instance of CommandAPDU, but a different type!");
            }
        } catch (Exception e) {
            e.printStackTrace();
            fail("An exception occurred during the test: " + e.getMessage());
        }
    }

    static class CommandAPDU {
        
        /** @serial */
        private final byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
            this.apdu = apdu.clone();
        }
        
        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }

        @JsonIgnore
        public void parse() {
            // Parsing logic here
        }
    }
}
