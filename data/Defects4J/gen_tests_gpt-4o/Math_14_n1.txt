public void testLargeNumberOfWeightsExhaustsMemory() {
    // Assuming Weight is part of the optimizer library being used
    // Here, we will attempt to create a large number of weights representative of the bug
    int n = 41200;
    double[] weights = new double[n];
    Arrays.fill(weights, 1.0);

    try {
        // Introducing a hypothetical function that uses weights in a multivariate vector optimizer
        // This method could be specific to the library using the Weight class
        curveFitterWithWeights(weights);
        fail("Expected an OutOfMemoryError due to large weight matrix creation");
    } catch (OutOfMemoryError e) {
        // Expected due to exhaustion of memory for large n
    }
}

// Hypothetical method to mimic the optimizer usage with weights
private void curveFitterWithWeights(double[] weights) {
    // Simulating matrix creation to highlight the bug
    double[][] largeMatrix = new double[weights.length][weights.length];
    // If matrix is created successfully (though not expected in this test),
    // perform operations that represent the optimizer logic
    for (int i = 0; i < weights.length; i++) {
        for (int j = 0; j < weights.length; j++) {
            largeMatrix[i][j] = weights[i] * weights[j];
        }
    }
}