
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.apache.commons.math3.fitting.CurveFitter;
import org.apache.commons.math3.fitting.PolynomialCurveFitter;
import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

public class LargeWeightTest {

    // This test is here to demonstrate the memory issue mentioned in the bug report.
    @Test(expected = OutOfMemoryError.class)
    public void testLargeNumberOfWeights() {
        List<WeightedObservedPoint> points = new ArrayList<>();
        final int numberOfPoints = 41200;  // Large number of points as per the bug report
        final int polynomialDegree = 2;  // Low degree polynomial fitting

        // Generate a large number of points
        for (int i = 0; i < numberOfPoints; i++) {
            points.add(new WeightedObservedPoint(1.0, i, i * i));  // Simple polynomial model
        }

        MultivariateVectorOptimizer optimizer = new LevenbergMarquardtOptimizer();
        PolynomialCurveFitter fitter = PolynomialCurveFitter.create(polynomialDegree).withOptimizer(optimizer);

        // This should trigger the memory issue due to creation of a large nxn matrix
        double[] coefficients = fitter.fit(points);

        // Optionally assert the coefficients if the fit would succeed, which it should not in this case.
        System.out.println("Fitted coefficients:");
        for (double coeff : coefficients) {
            System.out.println(coeff);
        }
    }
}
