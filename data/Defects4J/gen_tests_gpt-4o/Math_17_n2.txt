
import org.apache.commons.math3.dfp.Dfp;
import org.apache.commons.math3.dfp.DfpField;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class DfpTest {

    @Test
    public void testDfpMultiplyIntLimit() {
        // Depending on the constructor, Field may need a precision value, depending on tested version.
        DfpField field = new DfpField(16); // Make sure to use a compatible precision
        Dfp dfpValue = new Dfp(field, 2);

        int largeMultiplier = 10000; // This is beyond the expected range of 0 <= n <= 9999

        try {
            // Attempt to multiply by a value that exceeds the supposed limit
            Dfp result = dfpValue.multiply(largeMultiplier);
            
            // Optionally, we want to check a mathematically consistent result,
            // Note: This assumes that multiply should handle it without exception
            assertEquals(dfpValue.multiply(new Dfp(field, largeMultiplier)), result);
            
        } catch (Exception e) {
            // Test case reproduction: We expect no exceptions should be thrown.
            fail("Dfp.multiply(int) should support multipliers larger than 9999 without exception.");
        }
    }
}
