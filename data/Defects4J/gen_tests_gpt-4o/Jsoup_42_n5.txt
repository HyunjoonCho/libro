
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.parser.Parser;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class FormElementTest {

    @Test
    public void testCheckboxCheckedWithoutValue() {
        final String html = "<html>\n"
                            + "    <head>\n"
                            + "        <title>Test</title>\n"
                            + "    </head>\n"
                            + "    \n"
                            + "    <body>\n"
                            + "\n"
                            + "    <form name=\"myForm\" method=\"POST\">\n"
                            + "        <input type=\"checkbox\" name=\"testCheckBox\" checked=\"checked\" /> Something<br/>\n"
                            + "\n"
                            + "        <input type=\"submit\" value=\"Submit\" />\n"
                            + "    </form>\n"
                            + "\n"
                            + "    </body>\n"
                            + "</html>";

        final Document document = Jsoup.parse(html);

        final Element formElement = document.select("form[name=myForm]").first();
        assertTrue(formElement != null);

        // Simulate formData extraction as done internally by the library
        List<Connection.KeyVal> formData = simulateFormData(formElement);

        boolean foundCheckbox = false;
        for (Connection.KeyVal keyVal : formData) {
            if (keyVal.key().equals("testCheckBox")) {
                assertEquals("on", keyVal.value());
                foundCheckbox = true;
                break;
            }
        }
        assertTrue("Checkbox 'testCheckBox' should be present in form data with value 'on'.", foundCheckbox);
    }

    // Simulate the formData extraction with the described change handling checkboxes without value
    private List<Connection.KeyVal> simulateFormData(Element formElement) {
        List<Connection.KeyVal> data = new java.util.ArrayList<>();
        Elements elements = formElement.elements();
        for (Element el : elements) {
            String name = el.attr("name");
            if (name != null && !name.isEmpty()) {
                if ("input".equals(el.tagName())) {
                    // Check for non-disabled inputs
                    if (!el.hasAttr("disabled")) {
                        String type = el.attr("type");
                        if ("checkbox".equals(type) || "radio".equals(type)) {
                            // Handle checked state for checkbox/radio
                            if (el.hasAttr("checked")) {
                                String value = el.val().isEmpty() ? "on" : el.val();
                                data.add(Connection.KeyVal.create(name, value));
                            }
                        } else if (!"button".equals(type)) {
                            data.add(Connection.KeyVal.create(name, el.val()));
                        }
                    }
                }
            }
        }
        return data;
    }
}
