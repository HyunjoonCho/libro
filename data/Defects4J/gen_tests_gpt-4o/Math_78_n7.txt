
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.FirstOrderIntegrator;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ODEEventDetectionTest {

    @Test
    public void testVeryCloseEventsDetection() {
        FirstOrderDifferentialEquations ode = new TestODE();
        double[] y = new double[] { 1.0 };

        FirstOrderIntegrator integrator = new DormandPrince853Integrator(1.0e-10, 1.0e-1, 1.0e-7, 1.0e-7);
        TestEventHandler eventHandler = new TestEventHandler();
        integrator.addEventHandler(eventHandler, 1.0, 1.0e-6, 100);

        integrator.integrate(ode, 0.0, y, 200.0, y);

        assertEquals(2, eventHandler.getEventCount());
    }

    private static class TestODE implements FirstOrderDifferentialEquations {
        @Override
        public int getDimension() {
            return 1;
        }

        @Override
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = 1.0; // No actual dynamics; just a simple test case
        }
    }

    private static class TestEventHandler implements EventHandler {
        private int eventCount = 0;

        @Override
        public double g(double t, double[] y) {
            if (t < 90) {
                return t - 90;
            } else {
                return 135 - t;
            }
        }

        @Override
        public Action eventOccurred(double t, double[] y, boolean increasing) {
            eventCount++;
            return Action.CONTINUE;
        }

        public int getEventCount() {
            return eventCount;
        }
    }
}
