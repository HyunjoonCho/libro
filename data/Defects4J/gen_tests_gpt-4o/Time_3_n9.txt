
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.junit.Test;
import static org.junit.Assert.*;

public class MutableDateTimeTest {

    @Test
    public void testAddDaysZeroEffectDuringDST() {
        // Set up the initial MutableDateTime object at DST transition
        MutableDateTime mdt = new MutableDateTime(2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID("Europe/Berlin"));

        // Print the initial state
        System.out.println("Start date:   " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        // Apply addHours(-1) and check
        mdt.addHours(-1);
        System.out.println("addHours(-1): " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        long millisAfterHourSubtraction = mdt.toInstant().getMillis();

        // Apply addHours(0) and verify no change
        mdt.addHours(0);
        System.out.println("addHours(0):  " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        assertEquals(millisAfterHourSubtraction, mdt.toInstant().getMillis());

        // Apply addDays(0) and check for unexpected change
        mdt.addDays(0);
        System.out.println("addDays(0):   " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        
        // Verify that the call to addDays(0) unexpectedly changed the millis
        assertNotEquals(millisAfterHourSubtraction, mdt.toInstant().getMillis());
    }
}
