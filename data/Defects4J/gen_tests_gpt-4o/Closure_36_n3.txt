
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class GoogleClosureCompilerTest {

    @Test
    public void testSingletonGetterPreventsRemoval() {
        // Setup the compiler with advanced optimizations
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        options.setWarningLevel(DiagnosticGroups.ALL_CHECKS, CheckLevel.WARNING);

        // JavaScript source code that uses goog.addSingletonGetter
        String jsCode = ""
                + "goog.provide('foo');\n"
                + "var foo = function() { this.values = []; };\n"
                + "goog.addSingletonGetter(foo);\n"
                + "foo.prototype.add = function(value) {this.values.push(value)};\n";

        // Compile the source code
        SourceFile extern = SourceFile.fromCode("externs", ""); // no externs
        SourceFile input = SourceFile.fromCode("input", jsCode);
        Result result = compiler.compile(extern, input, options);

        // Check if any code remains after compilation
        Node rootNode = compiler.getRoot().getLastChild();
        boolean isTreeEmpty = rootNode.getChildCount() == 0;
        
        // Expect true if the code is completely removed
        assertTrue("Code should be completely removed, but it is not.", isTreeEmpty);
    }
}
