
import com.google.javascript.jscomp.*;

public class ClosureCompilerTest {

    public void testUnreachableCodeWarning() {
        String jsCode = 
            "function instanceOf(value, type) {\n" +
            "  try {\n" +
            "    if (value instanceof type) {\n" +
            "      return true;\n" +
            "    }\n" +
            "  } catch (exception) {\n" +
            "    if (exception instanceof TypeError) {\n" +
            "      throw exception;\n" +
            "    }\n" +
            "    return (type === Object);\n" +
            "  }\n" +
            "}";

        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        Compiler compiler = new Compiler();
        
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("test.js", jsCode);
  
        Result result = compiler.compile(extern, input, options);
        
        boolean hasWarning = result.warnings.stream()
            .anyMatch(warning -> warning.getType() == CheckUnreachableCode.UNREACHABLE_CODE);
        
        assertFalse(
            "Expected no unreachable code warning, but found one.",
            hasWarning
        );
    }
}
