public void testUnreachableCodeError() throws TypeError {
    String jsCode = ""
        + "function instanceOf(value, type) {\n"
        + "    try {\n"
        + "        if (value instanceof type) {\n"
        + "            return true;\n"
        + "        }\n"
        + "    } catch (exception) {\n"
        + "        if (exception instanceof TypeError) {\n"
        + "            throw exception;\n"
        + "        }\n"
        + "        return (type === Object);\n"
        + "    }\n"
        + "}\n";
        
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("input.js", jsCode), options);
    JSError[] warnings = compiler.getWarnings();
    
    boolean hasUnreachableCodeWarning = false;
    for (JSError warning : warnings) {
        if ("JSC_UNREACHABLE_CODE".equals(warning.getType().key)) {
            hasUnreachableCodeWarning = true;
            break;
        }
    }
    
    assertTrue("Expected unreachable code warning from compiler", hasUnreachableCodeWarning);
}