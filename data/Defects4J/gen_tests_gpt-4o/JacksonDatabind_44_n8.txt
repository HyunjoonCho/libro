
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class PolymorphicDeserializationTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = SubType.class)
    @JsonSubTypes({
        @JsonSubTypes.Type(value = SubType.class, name = "subtype")
    })
    static abstract class BaseType {
        public String baseProperty;

        public String getBaseProperty() {
            return baseProperty;
        }
    }

    static class SubType extends BaseType {
        public String subProperty;

        public String getSubProperty() {
            return subProperty;
        }
    }

    @Test
    public void testPolymorphicDeserialization() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // JSON without the 'type' field, relying on defaultImpl, but with both base and sub properties
        String json = "{\"baseProperty\": \"baseValue\", \"subProperty\": \"subValue\"}";

        BaseType result = objectMapper.readValue(json, BaseType.class);

        // Asserting that the properties from both the base and sub types are correctly populated
        assertEquals("baseValue", result.getBaseProperty(), "Base property should be deserialized correctly");
        assertEquals("subValue", ((SubType) result).getSubProperty(), "Sub property should be deserialized correctly");
    }
}
