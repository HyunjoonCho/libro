
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
import org.junit.Test;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.List;
import java.util.Arrays;

import static org.junit.Assert.fail;

public class IntegerListXmlAdapterTest {

    @Test
    public void testInvalidXmlAdapter() {
        ObjectMapper mapper = (new ObjectMapper())
                .setAnnotationIntrospector(new JaxbAnnotationIntrospector())
                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        SomeIntListHolder listHolder = new SomeIntListHolder();
        listHolder.setListOne(Arrays.asList(1, 2, 3));

        try {
            mapper.writeValueAsString(listHolder);
            fail("Expected JsonMappingException due to using Object in XmlAdapter");
        } catch (JsonMappingException e) {
            System.out.println("Caught expected JsonMappingException: " + e.getMessage());
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {
        @Override
        public List<Integer> unmarshal(Object value) throws Exception {
            return null;
        }

        @Override
        public Object marshal(List<Integer> list) throws Exception {
            return String.join(",", list.toString());
        }
    }

    @XmlRootElement
    @XmlAccessorType(XmlAccessType.NONE)
    public static class SomeIntListHolder {

        @XmlAttribute
        @XmlJavaTypeAdapter(IntegerListXmlAdapter.class)
        private List<Integer> listOne;

        public List<Integer> getListOne() {
            return listOne;
        }

        public void setListOne(List<Integer> listOne) {
            this.listOne = listOne;
        }
    }
}
