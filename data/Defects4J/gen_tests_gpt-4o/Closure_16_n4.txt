script
// index.js
goog.provide('a.b.c');

goog.scope(function() {
    var b = a.b;
    var c = b.c;

    /** @typedef {string} */
    c.MyType;

    /** @param {c.MyType} x The variable. */
    c.myFunc = function(x) {};
});

// test.js
describe('Closure Compiler Typedef Resolution', function() {
    it('should compile without errors when using a recursively resolved typedef', function() {
        const closureCompiler = require('google-closure-compiler').compiler;
        
        const compiler = new closureCompiler({
            js: 'index.js',
            compilation_level: 'ADVANCED'
        });

        compiler.run((exitCode, stdOut, stdErr) => {
            console.log('Exit code:', exitCode);
            if (stdErr) {
                console.error('Errors:', stdErr);
            }
            // Assert that no errors were produced
            if (exitCode !== 0 || stdErr) {
                throw new Error('Closure Compiler produced errors');
            }
        });
    });
});
