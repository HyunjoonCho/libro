
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerDefineAnnotationTest {

    @Test
    public void testDefineAnnotationWithWrappedString() {
        // JavaScript source with @define annotation and wrapped string
        String sourceCode = "/** @define {string} */\n" +
                            "var CONSTANT = \"some very long string name that I want to wrap \" +\n" +
                            " \"and so break using a + since I don't want to \" +\n" +
                            " \"introduce a newline into the string.\";";

        // Create a compiler instance
        Compiler compiler = new Compiler();

        // Set up compiler options
        CompilerOptions options = new CompilerOptions();
        options.setDefineReplacements(ImmutableMap.of("CONSTANT", "\"new value\""));

        // Add the source file
        List<SourceFile> externs = CommandLineRunner.getDefaultExterns();
        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("test.js", sourceCode));

        // Compile and capture the result
        Result result = compiler.compile(externs, inputs, options);

        // Verify that the compilation fails
        assertTrue("Compilation should fail due to wrapping in @define.", result.success == false);
    }
}
