
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.Node;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testClosureRemovesNeededCode() {
        // Set up the JS code to be compiled
        String jsCode = "Math.blah = function(test) { test.a = 5; };"
                      + "var test = new Object();"
                      + "Math.blah(test);";

        // Initialize the Closure Compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);
        options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);

        // Compile the code
        Node root = compiler.parse(JSError.make("input.js", 0, 0, "", null));
        Result result = compiler.compile(externs(), root, options);

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Assert that Math.blah(test) was not removed
        assertTrue("Compiled code should contain Math.blah(test);", compiledCode.contains("Math.blah(test);"));
    }
    
    // Method to get externs, as a placeholder for complete integration with externs
    private List<SourceFile> externs() {
        return AbstractCommandLineRunner.getBuiltinExterns(CompilerOptions.Environment.BROWSER);
    }
}
