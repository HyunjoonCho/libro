
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class DeserializationTest {

    public static class MyValue {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) {
            this.object = object;
        }

        @JsonValue
        public ObjectNode getObject() {
            return object;
        }
    }

    @Test
    public void testDeserializationFromEmptyObject() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        ObjectNode object = new ObjectNode(JsonNodeFactory.instance);

        String json = objectMapper.writeValueAsString(object);
        System.out.println("json: " + json);

        // Deserializing directly to ObjectNode works
        ObjectNode deserializedObjectNode = objectMapper.readValue(json, ObjectNode.class);
        assertNotNull(deserializedObjectNode);
        System.out.println("Deserialized to ObjectNode: " + deserializedObjectNode);

        // Deserializing to MyValue should not throw an exception
        MyValue deserializedMyValue = objectMapper.readValue(json, MyValue.class);
        assertNotNull(deserializedMyValue);
        System.out.println("Deserialized to MyValue: " + deserializedMyValue.getObject());
    }
}
