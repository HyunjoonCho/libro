
import static org.junit.Assert.assertEquals;

public class CompilerFlagTest {

    public void testFlagPrecedence() {
        CompilerOptions options = new CompilerOptions();

        // Simulate flag setting
        setFlag(options, "jscomp_error", "checkVar");
        setFlag(options, "jscomp_warning", "checkVar");
        setFlag(options, "jscomp_off", "checkVar");

        // The last flag should take precedence
        assertEquals(CompilerOptions.Off, options.getWarningLevel("checkVar"));

        // Change the order to verify precedence
        setFlag(options, "jscomp_off", "checkVar");
        setFlag(options, "jscomp_error", "checkVar");
        setFlag(options, "jscomp_warning", "checkVar");

        // The last flag should take precedence, which is "warning" now
        assertEquals(CompilerOptions.Warning, options.getWarningLevel("checkVar"));
    }

    private void setFlag(CompilerOptions options, String flagType, String warningName) {
        // Dummy method to simulate setting flags
        switch (flagType) {
            case "jscomp_error":
                options.setWarningLevel(warningName, CompilerOptions.Error);
                break;
            case "jscomp_warning":
                options.setWarningLevel(warningName, CompilerOptions.Warning);
                break;
            case "jscomp_off":
                options.setWarningLevel(warningName, CompilerOptions.Off);
                break;
        }
    }

    private static class CompilerOptions {
        public static final int Error = 2;
        public static final int Warning = 1;
        public static final int Off = 0;
        
        private HashMap<String, Integer> warningLevels = new HashMap<>();
        
        public void setWarningLevel(String name, int level) {
            warningLevels.put(name, level);
        }

        public int getWarningLevel(String name) {
            return warningLevels.getOrDefault(name, Off);
        }
    }
}
