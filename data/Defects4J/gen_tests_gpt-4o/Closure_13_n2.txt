
import static org.junit.Assert.assertEquals;

public class BugReportTest {

    public String someFunction(boolean anyExpression, boolean externalRef) {
        StringBuilder result = new StringBuilder();
        Runnable fn1 = null;
        Runnable fn2 = null;

        if (anyExpression) {
            fn2 = () -> externalRef;
            fn1 = () -> fn2.run();
        }

        final Runnable method1Fn = fn1;
        result.append("method1: ");
        Runnable method1 = () -> {
            if (method1Fn != null) method1Fn.run();
            result.append(true);
        };

        result.append("method2: ");
        Runnable method2 = () -> result.append(false);

        method1.run();
        result.append("; ");
        method2.run();

        return result.toString();
    }

    @org.junit.Test
    public void testFunctionOutput() {
        // The test checks that the true and false values are correctly replaced by !0 and !1 in some form.
        // However, since this is a runtime check, we are more interested in correctness rather than actual string replacement.
        
        // Simulated behavior by focusing on actual values returned.
        assertEquals("method1: true; method2: false", someFunction(true, true));
        assertEquals("method1: true; method2: false", someFunction(true, false));
    }
}
