
package org.apache.commons.cli2.issues;

import java.io.File;
import org.apache.commons.cli2.CommandLine;
import org.apache.commons.cli2.Group;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.commandline.Parser;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.validation.FileValidator;

public class CLI2SampleTest {

    public static void main(String[] args) {
        // Initialize builders.
        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();

        // Create a file name option with validation
        DefaultOption fileNameOption = obuilder
            .withShortName("f")
            .withLongName("file-name")
            .withRequired(true)
            .withDescription("name of an existing file")
            .withArgument(abuilder
                .withName("file-name")
                .withValidator(FileValidator.getExistingFileInstance())
                .create())
            .create();

        // Set up the options group
        Group options = gbuilder
            .withName("options")
            .withOption(fileNameOption)
            .create();

        // Initialize the parser
        Parser parser = new Parser();
        parser.setHelpTrigger("--help");
        parser.setGroup(options);

        try {
            // Parse command line with simulated arguments (path-to-an-existing-file should be replaced by a valid file path)
            CommandLine cl = parser.parseAndHelp("--file-name", "path-to-an-existing-file");

            // If you have a valid file path, normally you could do something with the CommandLine object here
        } catch (Exception e) {
            e.printStackTrace(); // This should print the ClassCastException
        }
    }
}
