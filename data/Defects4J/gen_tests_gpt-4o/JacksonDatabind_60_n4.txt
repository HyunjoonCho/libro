
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class PolymorphicTypeTest {

    private static final ObjectMapper mapper = new ObjectMapper();

    static {
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();
    }

    @Test
    public void testPolymorphicTypeWithJsonValue() throws Exception {
        // Create an instance of CommandAPDU
        CommandAPDU original = new CommandAPDU(new byte[] {0, 1, 2, 3, 4, 5});

        // Serialize the object
        String json = mapper.writeValueAsString(original);

        // Deserialize the object
        CommandAPDU deserialized = mapper.readValue(json, CommandAPDU.class);

        // Verify that the deserialized object is equal to the original
        assertEquals(original, deserialized);
    }

    public static class CommandAPDU {
        private byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty("bytes") byte[] apdu) {
            this.apdu = apdu.clone();
        }

        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }

        @Override
        public boolean equals(Object obj) {
            if (!(obj instanceof CommandAPDU)) {
                return false;
            }
            CommandAPDU other = (CommandAPDU) obj;
            return java.util.Arrays.equals(this.apdu, other.apdu);
        }

        @Override
        public int hashCode() {
            return java.util.Arrays.hashCode(apdu);
        }
    }
}
