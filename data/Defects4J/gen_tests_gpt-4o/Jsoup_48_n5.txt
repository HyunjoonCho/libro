
import org.jsoup.Connection.Response;
import org.jsoup.helper.HttpConnection;
import org.jsoup.helper.HttpConnection.Response;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class DuplicateHeaderTestCase {

    @Test
    public void testDuplicateHeaders() {
        // Simulate the response headers with duplicate 'X-Powered-By' entries
        Map<String, List<String>> responseHeaders = new HashMap<>();
        List<String> poweredByValues = new ArrayList<>();
        poweredByValues.add("PHP/5.2.8");
        poweredByValues.add("ASP.NET");
        responseHeaders.put("X-Powered-By", poweredByValues);

        // Using a wrapped Response to simulate processResponseHeaders call
        Response response = new Response();
        processResponseHeaders(responseHeaders, response);

        // Test to check concatenated values are as expected
        String xPoweredByHeader = response.header("X-Powered-By");
        assertEquals("PHP/5.2.8 ASP.NET", xPoweredByHeader);
    }

    // Custom method to mock the processing of response headers as per the bug report fix
    private void processResponseHeaders(Map<String, List<String>> resHeaders, Response response) {
        for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {
            String name = entry.getKey();
            if (name == null)
                continue;

            List<String> values = entry.getValue();
            if (!values.isEmpty()) {
                StringBuilder val = new StringBuilder();
                for (String str : values) {
                    val.append(str).append(" ");
                }
                // Trim the trailing space and set header in response
                response.header(name, val.toString().trim());
            }
        }
    }

    // Mock Response class from Jsoup for testing purpose
    static class Response extends HttpConnection.Response {
        Response() {
            super(null);
        }

        // Expose the 'header' method public for our test case
        @Override
        public Response header(String name, String value) {
            super.header(name, value);
            return this;
        }
    }
}
