
import org.apache.commons.math3.fitting.*;
import org.apache.commons.math3.fitting.leastsquares.*;
import org.apache.commons.math3.analysis.function.PolynomialFunction;
import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
import org.junit.Test;
import static org.junit.Assert.fail;

public class LargeWeightsTest {

    @Test
    public void testLargeNumberOfWeightsCausingMemoryExhaustion() {
        final int numberOfPoints = 41200;

        // Create a large dataset of size 41200
        WeightedObservedPoints points = new WeightedObservedPoints();
        for (int i = 0; i < numberOfPoints; i++) {
            points.add(i, Math.pow(i, 2)); // Adding quadratic data points
        }

        // Initialize the polynomial fitter
        PolynomialCurveFitter fitter = PolynomialCurveFitter.create(2); // Quadratic polynomial

        try {
            // Attempt to fit the polynomial
            double[] coeffs = fitter.fit(points.toList());
        } catch (OutOfMemoryError e) {
            // Expected behavior due to exhaustive memory usage
            System.out.println("Test passed: OutOfMemoryError encountered as expected due to large weights handling.");
            return;
        }

        // If no exception was thrown, then the test has failed
        fail("Test failed: Expected an OutOfMemoryError due to large weights handling.");
    }
}
