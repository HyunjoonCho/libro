public void testLevenbergMarquardtOptimizerIgnoresConvergenceChecker() {
    VectorialConvergenceChecker checker = new VectorialConvergenceChecker() {
        @Override
        public boolean converged(int iteration, VectorialPointValuePair previous, VectorialPointValuePair current) {
            // Define a simple convergence condition that should trigger early
            return true;
        }
    };

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(1e-10, 1e-10, 1e-10, checker);

    DifferentiableMultivariateVectorFunction function = new DifferentiableMultivariateVectorFunction() {
        @Override
        public MultivariateMatrixFunction jacobian() {
            return point -> new double[][] {{2 * point[0]}};
        }

        @Override
        public double[] value(double[] point) {
            return new double[] {point[0] * point[0]};
        }
    };

    double[] target = {0};
    double[] weights = {1};
    double[] initialGuess = {1.0};

    // Attempt to optimize the function
    VectorialPointValuePair result = optimizer.optimize(1000, function, target, weights, initialGuess);
    
    // Check that the optimizer respected the custom convergence checker
    // By expecting the point value to be near the initial guess due to early stopping
    assertEquals(1.0, result.getPoint()[0], 1e-5);
}