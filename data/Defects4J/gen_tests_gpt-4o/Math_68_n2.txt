
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.Optimum;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testIgnoringConvergenceChecker() {
        // Custom ConvergenceChecker that triggers convergence based on a simple condition
        ConvergenceChecker<LeastSquaresProblem.Evaluation> convergenceChecker =
                new ConvergenceChecker<LeastSquaresProblem.Evaluation>() {
            @Override
            public boolean converged(int iteration, LeastSquaresProblem.Evaluation previous, LeastSquaresProblem.Evaluation current) {
                // Arbitrary condition for test; just for demonstration
                RealVector p = current.getPoint();
                return p.getLInfNorm() < 1.0e-9;
            }
        };

        // Simple quadratic function as the model
        LeastSquaresProblem problem = LeastSquaresFactory.create(
                this::modelFunction,
                this::targetValues,
                new RealVectorStart() {
                    public double[] toArray() {
                        return new double[] {1.0, 1.0};
                    }
                },
                convergenceChecker,
                1000, // Max Evaluations
                1000  // Max Iterations
        );

        // Instantiate optimizer with the custom convergence checker
        LeastSquaresOptimizer optimizer = new LevenbergMarquardtOptimizer();

        // Perform the optimization
        Optimum result = optimizer.optimize(problem);

        // We assert to see if the convergence was affected by our custom checker.
        assertTrue("Expected the optimizer to converge with the custom checker condition", result.getEvaluationCount() < 1000);
    }

    private RealVector modelFunction(RealVector point) {
        // Example quadratic model function
        double[] params = point.toArray();
        double[] values = new double[]{params[0] * params[0] + params[1] * params[1]};
        return new ArrayRealVector(values);
    }

    private RealVector targetValues() {
        // Our target is minimizing the vector [0, 0]
        return new ArrayRealVector(new double[]{0.0, 0.0});
    }
}
