
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

public class NullObjectIdDeserializationTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id", scope = Item.class)
    static class Item {
        public Integer id;
        public String name;

        // Default constructor, getters, and setters
        public Item() {}
        
        public Item(Integer id, String name) {
            this.id = id;
            this.name = name;
        }

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

    @Test
    public void testDeserializeNullObjectId() throws Exception {
        String jsonWithNullId = "{\"id\":null, \"name\":\"Item Name\"}";

        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES, false);

        Item item = mapper.readValue(jsonWithNullId, Item.class);
        
        // Check if the deserialization doesn't throw an exception and the id is null
        assertNotNull(item);
        assertNull(item.getId());

        // Optionally check that the name was deserialized properly
        assertNotNull(item.getName());
    }
}
