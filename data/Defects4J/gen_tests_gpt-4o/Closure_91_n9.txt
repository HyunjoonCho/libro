
import static org.junit.Assert.assertDoesNotThrow;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

public class LendsAnnotationTest {

    @Test
    public void testLendsAnnotationSupport() {
        String jsCode = ""
            + "/**\n"
            + " * @name MyClass\n"
            + " * @class\n"
            + " * @extends superClass1\n"
            + " * @extends superClass2\n"
            + " */\n"
            + "dojo.declare('MyClass', [superClass1, superClass2], /** @lends MyClass.prototype */ {\n"
            + "    /**\n"
            + "     * @this {MyClass}\n"
            + "     */\n"
            + "    foo: function() {\n"
            + "        this.someProperty = 42;\n"
            + "    },\n"
            + "    /**\n"
            + "     * @this {MyClass}\n"
            + "     */\n"
            + "    bar: function() {\n"
            + "        console.log(this.someProperty);\n"
            + "    }\n"
            + "});";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setPrettyPrint(true);

        // Simulating a source file for the compiler
        JSSourceFile jsInput = JSSourceFile.fromCode("input.js", jsCode);
        JSSourceFile externs = JSSourceFile.fromCode("externs.js", "");

        // Run the compiler with the source
        Result result = compiler.compile(externs, jsInput, options);

        // The test should ensure no errors are present
        assertDoesNotThrow(() -> {
            if (result.warnings.length > 0 || result.errors.length > 0) {
                throw new RuntimeException("Compiler encountered warnings/errors");
            }
        });
    }
}
