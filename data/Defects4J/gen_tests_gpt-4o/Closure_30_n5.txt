script
// Helper function to mimic Math.floor
function sgxFloor(value) {
    return Math.floor(value);
}

// Color class with a method that shows the problem
function sgxColorRGBA(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
}

sgxColorRGBA.prototype.asHex = function() {
    // Undeclared str variable - this is the issue
    str = (sgxFloor(this.r * 255)).toString(16);
    if (str.length < 2) { str = "0" + str; }
    let hexString = str;

    str = (sgxFloor(this.g * 255)).toString(16);
    if (str.length < 2) { str = "0" + str; }
    hexString += str;

    str = (sgxFloor(this.b * 255)).toString(16);
    if (str.length < 2) { str = "0" + str; }
    hexString += str;

    str = (sgxFloor(this.a * 255)).toString(16);
    if (str.length < 2) { str = "0" + str; }
    hexString += str;

    return hexString;
};

// Test case
function testAsHexFunction() {
    // Create an instance of sgxColorRGBA
    let color = new sgxColorRGBA(0.5, 0.5, 0.5, 0.5);

    // Execute the problematic method
    let result = color.asHex();

    // Expected hex output for 0.5 should be '7f7f7f7f' if broken, it might return incorrect values
    let expected = "7f7f7f7f";

    // Assert the result matches expectation
    console.assert(result === expected, `Test failed: Expected ${expected}, but got ${result}`);
}

// Run the test
testAsHexFunction();
