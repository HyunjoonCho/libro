
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class DeserializationTest {

    public static class MyValue {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) {
            this.object = object;
        }

        @JsonValue
        public ObjectNode getObject() {
            return object;
        }
    }
  
    @Test
    public void testEmptyObjectNodeDeserialization() {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode emptyObjectNode = new ObjectNode(JsonNodeFactory.instance);

        try {
            String json = objectMapper.writeValueAsString(emptyObjectNode);
            ObjectNode deserializedObjectNode = objectMapper.readValue(json, ObjectNode.class);
            assertEquals(emptyObjectNode, deserializedObjectNode);

            // This line is expected to fail based on the described bug
            MyValue deserializedMyValue = objectMapper.readValue(json, MyValue.class);
            assertEquals(emptyObjectNode, deserializedMyValue.getObject());
        } catch (JsonProcessingException e) {
            fail("Deserialization failed with exception: " + e.getMessage());
        }
    }
}
