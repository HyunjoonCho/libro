
import org.junit.Test;
import com.google.javascript.jscomp.*;

import static org.junit.Assert.*;

public class DifferentThisTypeWarningTest {

    @Test
    public void testDifferentThisTypeWarning() {
        String code = "/** @constructor */\n" +
                      "function F() {}\n" +
                      "F.prototype.bar = function() { this.baz(); };\n" +
                      "F.prototype.baz = function() { };\n" +
                      "/** @constructor */\n" +
                      "function G() {}\n" +
                      "G.prototype.bar = F.prototype.bar;";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

        // Compile the code
        compiler.initOptions(options);
        Node node = compiler.parseTestCode(code);
        assertNotNull(node);

        // The ErrorManager should capture type-checking warnings
        compiler.setErrorManager(new BasicErrorManager() {
            @Override
            public void report(CheckLevel level, JSError error) {
                if (level == CheckLevel.WARNING) {
                    String expectedMessage = "Misleading 'this' type for method 'bar'";
                    assertTrue(error.description.contains(expectedMessage));
                }
            }

            @Override
            protected void printSummary() {
            }
        });

        // Run the type checker
        TypeCheck typeCheck = new TypeCheck(compiler, compiler.getReverseAbstractInterpreter(), compiler.getTypeRegistry());
        typeCheck.processForTesting(null, node);
    }
}
