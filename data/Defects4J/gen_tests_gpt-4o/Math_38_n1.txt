
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateObjectiveFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BOBYQAOptimizerTest {

    @Test
    public void testBOBYQAOptimizerInterpolationPoints() {
        // Define a simple quadratic function for testing
        MultivariateObjectiveFunction objectiveFunction = new ObjectiveFunction(point -> {
            double sum = 0;
            for (double x : point) {
                sum += x * x;
            }
            return sum;
        });

        // Set up the optimizer - increasing interpolation points by one
        int dim = 2; // dimension of the problem
        int numberOfInterpolationPoints = 2 * dim + 2; // Number of interpolation points

        BOBYQAOptimizer optimizer = new BOBYQAOptimizer(numberOfInterpolationPoints);

        // Define optimization parameters
        MaxEval maxEvaluations = new MaxEval(1000);
        GoalType goal = GoalType.MINIMIZE;
        double[] startPoint = {1.0, 1.0};
        double[] lowerBounds = {-5.0, -5.0};
        double[] upperBounds = {5.0, 5.0};
        SimpleBounds simpleBounds = new SimpleBounds(lowerBounds, upperBounds);

        // Perform optimization
        PointValuePair result = optimizer.optimize(
            maxEvaluations,
            objectiveFunction,
            goal,
            simpleBounds,
            new org.apache.commons.math3.optim.InitialGuess(startPoint)
        );

        // Verify results; minimum should be at [0, 0] for this quadratic function
        assertEquals(0.0, result.getPoint()[0], 1e-6);
        assertEquals(0.0, result.getPoint()[1], 1e-6);
    }
}
