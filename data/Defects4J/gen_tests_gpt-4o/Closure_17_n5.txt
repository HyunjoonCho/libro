public void testConstTypeInformationDump() {
    // Setting up the closure compiler environment
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

    String jsCode = "/**\n" +
        " * Class defining an interface with two numbers.\n" +
        " * @interface\n" +
        " */\n" +
        "function TwoNumbers() {}\n" +
        "/** @type number */\n" +
        "TwoNumbers.prototype.first;\n" +
        "/** @type number */\n" +
        "TwoNumbers.prototype.second;\n" +
        "\n" +
        "/** @const */ var SOME_DEFAULT =\n" +
        " /** @type {TwoNumbers} */ ({first: 1, second: 2});\n" +
        "\n" +
        "/**\n" +
        " * Class with a two number member.\n" +
        " * @constructor\n" +
        " */\n" +
        "function HasTwoNumbers() {\n" +
        " /** @type {TwoNumbers} */\n" +
        " this.twoNumbers = this.getTwoNumbers();\n" +
        "}\n" +
        "\n" +
        "/**\n" +
        " * Get the default two numbers.\n" +
        " * @return {TwoNumbers}\n" +
        " */\n" +
        "HasTwoNumbers.prototype.getTwoNumbers = function() {\n" +
        " return SOME_DEFAULT;\n" +
        "};";

    Compiler compiler = new Compiler();
    compiler.initOptions(options);
    Node root = compiler.parseTestCode(jsCode);

    // Assert that there is a type warning due to @const
    JSError[] warnings = compiler.getWarnings();
    boolean hasTypeWarning = false;
    for (JSError warning : warnings) {
        if (warning.getType() == RhinoErrorReporter.TYPE_PARSE_END) {
            hasTypeWarning = true;
            break;
        }
    }
    assertTrue("The code should produce a type warning related to @const.", hasTypeWarning);
}