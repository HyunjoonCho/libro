
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testConstTypeCastWarning() {
        String script = ""
                + "/**\n"
                + " * Class defining an interface with two numbers.\n"
                + " * @interface\n"
                + " */\n"
                + "function TwoNumbers() {}\n"
                + "\n"
                + "/** @type number */\n"
                + "TwoNumbers.prototype.first;\n"
                + "\n"
                + "/** @type number */\n"
                + "TwoNumbers.prototype.second;\n"
                + "\n"
                + "/** @const */ var SOME_DEFAULT =\n"
                + "/** @type {TwoNumbers} */ ({first: 1, second: 2});\n"
                + "\n"
                + "/**\n"
                + " * Class with a two number member.\n"
                + " * @constructor\n"
                + " */\n"
                + "function HasTwoNumbers() {\n"
                + " /** @type {TwoNumbers} */\n"
                + " this.twoNumbers = this.getTwoNumbers();\n"
                + "}\n"
                + "\n"
                + "/**\n"
                + " * Get the default two numbers.\n"
                + " * @return {TwoNumbers}\n"
                + " */\n"
                + "HasTwoNumbers.prototype.getTwoNumbers = function() {\n"
                + " return SOME_DEFAULT;\n"
                + "};";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Set options similar to those used by the Closure Compiler Service.
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES, CompilerOptions.WarningLevel.WARNING);
        
        // Compile the JavaScript code
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("input.js", script), options);

        // Assert that no errors occurred during the compilation
        assertTrue("Compilation should be successful without type-casting warnings", result.success);
    }
}
