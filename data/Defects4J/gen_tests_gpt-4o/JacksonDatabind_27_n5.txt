
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

// POJO class
class MyPojo {
    public String name;

    // Default constructor for deserialization
    public MyPojo() {}

    public MyPojo(String name) {
        this.name = name;
    }
}

// Custom type id resolver
class CustomTypeIdResolver extends TypeIdResolverBase {
    @Override
    public String idFromValue(Object value) {
        return ((MyPojo) value).name; // For simplicity, use name as id
    }

    @Override
    public String idFromValueAndType(Object value, Class<?> suggestedType) {
        return idFromValue(value);
    }

    @Override
    public Id getMechanism() {
        return Id.CUSTOM;
    }

    @Override
    public JavaType typeFromId(DatabindContext context, String id) throws IOException {
        return context.constructType(MyPojo.class);
    }
}

// Wrapper class to use external type id pattern
class Wrapper {
    @JsonTypeInfo(use = Id.CUSTOM, include = As.EXTERNAL_PROPERTY, property = "type", visible = true)
    @JsonTypeIdResolver(CustomTypeIdResolver.class)
    public MyPojo myPojo;
}

public class ExternalTypeIdTest {
    @Test
    public void testExternalTypeIdDeserialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();

        String json = "{\"type\":\"pojoType\", \"myPojo\":{\"name\":\"John Doe\"}}";
        
        // Attempt to deserialize
        Wrapper wrapper = mapper.readValue(json, Wrapper.class);

        // Validate the deserialization result
        assertEquals("John Doe", wrapper.myPojo.name);
    }
}
