public void testExternalTypeIdDeserialization() throws IOException {
    ObjectMapper mapper = new ObjectMapper();

    String jsonData = "{\"type\":\"customType\",\"pojo\":{\"name\":\"example\"}}";

    ExternalTypeIdWrapper expected = new ExternalTypeIdWrapper();
    expected.pojo = new CustomPojo("example");
    expected.type = "customType";

    ExternalTypeIdWrapper result = mapper.readValue(jsonData, ExternalTypeIdWrapper.class);

    assertEquals(expected, result);
}

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type")
static class ExternalTypeIdWrapper {
    public String type;
    public CustomPojo pojo;

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ExternalTypeIdWrapper that = (ExternalTypeIdWrapper) o;
        return Objects.equals(type, that.type) &&
               Objects.equals(pojo, that.pojo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(type, pojo);
    }
}

static class CustomPojo {
    public String name;

    public CustomPojo() {}

    public CustomPojo(String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        CustomPojo that = (CustomPojo) o;
        return Objects.equals(name, that.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name);
    }
}