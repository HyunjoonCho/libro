
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;
import org.apache.commons.math3.stat.correlation.Covariance;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class PearsonsCorrelationTest {

    @Test
    public void testPearsonsCorrelationPValuePrecision() {
        // Create a data set that produces a very large correlation value
        double[][] data = new double[][] {
            {1.0, 2.0, 3.0, 4.0, 5.0},
            {2.0, 4.0, 6.0, 8.0, 10.0},
            {3.0, 6.0, 9.0, 12.0, 15.0},
            {4.0, 8.0, 12.0, 16.0, 20.0},
            {5.0, 10.0, 15.0, 20.0, 25.0}
        };
        
        RealMatrix matrix = new BlockRealMatrix(data);
        PearsonsCorrelation correlation = new PearsonsCorrelation(matrix); 
        
        double[][] correlationPValues = correlation.getCorrelationPValues().getData();
        
        // Iterate through the calculated p-values to find those that are zero due to precision issues
        for (int i = 0; i < correlationPValues.length; i++) {
            for (int j = 0; j < correlationPValues[i].length; j++) {
                if (i != j) { // Only interested in off-diagonal p-values
                    // Print p-values, expecting some to be zero due to the machine epsilon issue
                    System.out.println("P-value for variables " + i + " and " + j + ": " + correlationPValues[i][j]);
                    // Assert that no p-value should be exactly zero
                    assertTrue("P-value should not be zero due to precision issues", correlationPValues[i][j] > 0);
                }
            }
        }
    }
}
