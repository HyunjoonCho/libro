
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;

public class NestedListDeserializationTest {

    static class Definition {
        @JsonProperty("records")
        @JsonDeserialize(contentAs = Record.class)
        public List<Record> records;

        public Definition() {}
    }

    static class Record {
        @JsonProperty("fields")
        @JsonDeserialize(contentAs = Field.class)
        public List<Field> fields;

        public Record() {}
    }

    static class Field {
        public String name;

        public Field() {}
    }

    @Test
    public void testDeserializationWithEmptyInnerList() throws Exception {
        String json = "{\"records\": [{\"fields\": []}]}";

        ObjectMapper mapper = new ObjectMapper();
        Definition definition = mapper.readValue(json, Definition.class);

        // Verify that the `records` list was properly deserialized
        assertEquals(1, definition.records.size());
        
        // Check that the `fields` list inside the first record is empty
        assertEquals(0, definition.records.get(0).fields.size());
    }
}
