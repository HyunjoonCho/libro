
import org.apache.commons.lang3.reflect.TypeUtils;
import org.junit.Assert;
import org.junit.Test;

import java.lang.reflect.Type;
import java.util.Map;

public class TypeUtilsTest {

    @Test
    public void testGetTypeArguments() {
        // Given types and interfaces
        Map<Type, Type> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);

        // Assert that the map contains the expected number of entries
        Assert.assertEquals(2, typeVarAssigns.size());

        // Verify that the first type parameter is correctly assigned to String
        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));

        // Verify that the second type parameter is correctly assigned to the Other class's type parameter
        Assert.assertEquals(
                Other.class.getTypeParameters()[0],
                typeVarAssigns.get(This.class.getTypeParameters()[1])
        );
    }

    // Example interface with type parameters
    public interface This<K, V> {
    }

    // Implementing class with its own type parameters
    public class Other<T> implements This<String, T> {
    }
}
