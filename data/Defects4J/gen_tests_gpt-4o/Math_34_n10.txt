
import org.junit.Test;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.ListPopulation;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class ListPopulationTest {

    @Test
    public void testIteratorModification() {
        List<Chromosome> chromosomes = new ArrayList<>();
        chromosomes.add(new DummyChromosome());
        chromosomes.add(new DummyChromosome());

        ListPopulation population = new ListPopulation(chromosomes, chromosomes.size());

        // Get iterator from the population
        Iterator<Chromosome> iterator = population.iterator();

        // Attempt to remove the first element using the iterator, this should not be allowed
        try {
            iterator.next();
            iterator.remove();
            fail("Expected UnsupportedOperationException");
        } catch (UnsupportedOperationException e) {
            // Expected exception since the iterator should be unmodifiable
        }

        // Ensure the population size remains unchanged
        assertEquals("Population size should remain unchanged", 2, population.getPopulationSize());
    }

    // DummyChromosome is a simple implementation of Chromosome for testing purposes.
    private static class DummyChromosome extends Chromosome {
        @Override
        public double fitness() {
            return 0;
        }

        @Override
        public DummyChromosome newFixedLengthChromosome(List newRepresentation) {
            return this;
        }
    }
}
