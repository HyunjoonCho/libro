
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class FuncTest {

    /**
     * A simple structure to simulate the expected result of func function.
     */
    class Result {
        Object prop1;
        String prop2;
        String prop3;
    }

    /**
     * This function simulates the behavior of the JavaScript func(a, b) function.
     */
    Result func(boolean a, boolean b) {
        Result results = null;
        if (a) {
            results = new Result();
            results.prop1 = new Object();
        }
        if (b) {
            if (results == null) {
                results = new Result();
            }
            results.prop2 = "prop2";
        } else {
            if (results == null) {
                results = new Result();
            }
            results.prop3 = "prop3";
        }
        return results;
    }

    @Test
    public void testFunc() {
        // Case when both a and b are true
        Result result1 = func(true, true);
        assertNotNull(result1);
        assertNotNull(result1.prop1);
        assertEquals("prop2", result1.prop2);
        assertNull(result1.prop3);

        // Case when a is true and b is false
        Result result2 = func(true, false);
        assertNotNull(result2);
        assertNotNull(result2.prop1);
        assertNull(result2.prop2);
        assertEquals("prop3", result2.prop3);

        // Case when a is false and b is true
        Result result3 = func(false, true);
        assertNotNull(result3);
        assertNull(result3.prop1);
        assertEquals("prop2", result3.prop2);
        assertNull(result3.prop3);

        // Case when both a and b are false
        Result result4 = func(false, false);
        assertNotNull(result4);
        assertNull(result4.prop1);
        assertNull(result4.prop2);
        assertEquals("prop3", result4.prop3);
    }
}
