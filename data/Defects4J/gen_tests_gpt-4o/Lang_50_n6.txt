
import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.Test;

import java.text.ParseException;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import static org.junit.Assert.assertEquals;

public class FastDateFormatTest {

    @Test
    public void testLocaleChangeAffectsFastDateFormat() throws ParseException {
        Locale originalLocale = Locale.getDefault();
        try {
            // Setting the default locale to France
            Locale.setDefault(Locale.FRANCE);
            
            // Creating a date instance for France locale
            FastDateFormat dateFormatFR = FastDateFormat.getDateInstance(FastDateFormat.SHORT, null);
            String dateText = "31/12/2023";
            Date dateFR = dateFormatFR.parse(dateText);
            
            // Change the default locale to US
            Locale.setDefault(Locale.US);
            
            // The same date string would be considered invalid if locale does not change properly
            ParsePosition pos = new ParsePosition(0);
            Date dateUS = dateFormatFR.getParser().parse(dateText, pos);
            
            // Assert that the date parsing should not be successful after locale change without explicit cache handling
            assertEquals("Parsing should fail due to locale change affecting date patterns", null, dateUS);
            
        } finally {
            // Reset the default locale back to the original
            Locale.setDefault(originalLocale);
        }
    }
}
