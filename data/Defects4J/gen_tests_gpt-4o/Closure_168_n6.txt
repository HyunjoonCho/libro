public void testWrongArgumentCountError() {
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.ERROR);
    options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.ERROR);
    options.setWarningLevel(DiagnosticGroups.CHECK_VARS, CheckLevel.ERROR);
    options.setWarningLevel(DiagnosticGroups.USELESS_CODE, CheckLevel.ERROR);
    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);

    String code = "var makeClass = function(protoMethods) {" +
                  "  var clazz = function() { this.initialize.apply(this, arguments); }" +
                  "  for (var i in protoMethods) { clazz.prototype[i] = protoMethods[i]; }" +
                  "  return clazz;" +
                  "}" +
                  "/** @constructor */" +
                  "var Person = function(name){};" +
                  "Person = makeClass(/** @lends Person.prototype */ {" +
                  "  /** @this {Person} */" +
                  "  initialize: function(name) { this.name = name; }," +
                  "  /** @this {Person} */" +
                  "  getName: function() { return this.name; }," +
                  "  /**" +
                  "   * @param {string} message" +
                  "   * @this {Person}" +
                  "   */" +
                  "  say: function(message) {" +
                  "    var self = this;" +
                  "    setTimeout(function() {" +
                  "      window.console.log(self.getName(1) + ' says: ' + message);" +
                  "    }, 500);" +
                  "  }" +
                  "});" +
                  "var joe = new Person('joe');" +
                  "joe.say('hi');" +
                  "var jane = new Person('jane');" +
                  "jane.say('hello');";

    SourceFile extern = SourceFile.fromCode("externs.js", "");
    SourceFile input = SourceFile.fromCode("test2-2.js", code);

    Result result = compiler.compile(extern, input, options);

    assertTrue("Expected compilation error", !result.success);
    assertFalse(compiler.getErrors().isEmpty());
    assertEquals("Function Person.prototype.getName: called with 1 argument(s). Function requires at least 0 argument(s) and no more than 0 argument(s).",
                 compiler.getErrors().get(0).description);
}