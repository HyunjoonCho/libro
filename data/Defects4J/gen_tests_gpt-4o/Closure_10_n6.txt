
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testTernaryOperatorWithMixedTypes() {
        String jsCode = "var a = (Math.random() > 0.5 ? '1' : 2) + 3 + 4;";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", jsCode);

        Result result = compiler.compile(extern, input, options);
        String output = compiler.toSource();

        // Assert that the output is as expected and does not evaluate the ternary to a numeric addition incorrectly
        assertTrue("Expected '1' + 3 + 4 = '134'. Got: " + output,
            output.contains("(Math.random()>0.5?\"1\":2)+3+4") || 
            output.contains("(0.5<Math.random()?\"1\":2)+3+4"));
    }
}
