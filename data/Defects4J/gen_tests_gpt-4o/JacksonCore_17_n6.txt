
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonGenerationException;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;

import static org.junit.Assert.fail;

public class JsonGenerationExceptionTest {

    @Test
    public void testSplitSurrogateOnWriteRawInput() {
        // Create a JsonFactory instance
        JsonFactory factory = new JsonFactory();

        // Define a JSON string with valid multi-byte Unicode characters, potentially causing the issue
        // This character is a high surrogate (U+D83D) followed by a low surrogate (U+DC36), which combined forms a valid emoji: üê∂
        String jsonString = "{" +
                "\"randomText\": \"" + createStringWithSurrogates() + "\"}";
        
        StringWriter writer = new StringWriter();

        try (JsonGenerator jsonGenerator = factory.createGenerator(writer)) {
            jsonGenerator.writeRaw(jsonString);
        } catch (JsonGenerationException e) {
            fail("JsonGenerationException should not be thrown: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private String createStringWithSurrogates() {
        // Returning a string containing a high and low surrogate pair (dog face emoji)
        return "xxxx\uD83D\uDC36xxxx";
    }
}
