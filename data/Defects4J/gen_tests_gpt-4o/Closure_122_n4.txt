
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import junit.framework.TestCase;

public class NonJSDocCommentTest extends TestCase {

    public void testNonJSDocCommentHandling() {
        String code = "/* @preserve Foo License */\nalert('foo');";

        // Compile with default options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.NON_STANDARD_JSDOC, CompilerOptions.WarningLevel.WARNING);
        
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", code);

        Result result = compiler.compile(extern, input, options);

        // Check for expected warning
        assertTrue("Expected a warning", result.warnings.length > 0);
        assertTrue("Warning message mismatch", result.warnings[0].description.contains("Non-JSDoc comment has annotations"));

        // Now test with /*! to see if it incorrectly avoids the warning
        code = "/*! @preserve Foo License */\nalert('foo');";
        input = SourceFile.fromCode("input.js", code);

        result = compiler.compile(extern, input, options);

        // Asserting that there is no warning
        assertEquals("Expected no warnings with /*!", 0, result.warnings.length);
    }
}
