public void testFunctionArgumentsNotOptimizedAway() {
    String originalJs = "function foo(bar, baz) { return bar; } alert(foo.length);";
    String expectedOutput = "function foo(a,b){return a}alert(foo.length);";

    // Assuming there's a method compileJavaScript which takes the original JS and returns the compiled form
    String compiledJs = compileJavaScript(originalJs, CompilationLevel.SIMPLE_OPTIMIZATIONS);

    // Check if the compiled JS still contains both arguments in the function definition
    assertTrue(compiledJs.contains(expectedOutput));

    // Check the function length property remains unchanged
    int lengthBefore = getFunctionLength(originalJs);
    int lengthAfter = getFunctionLength(compiledJs);
    assertEquals(lengthBefore, lengthAfter);
}

// Hypothetical methods to simulate compilation and length extraction; should be replaced by actual implementation
private String compileJavaScript(String jsCode, CompilationLevel level) {
    // Simulate compilation, return expected result for illustration
    return jsCode.replace("function foo(bar, baz)", "function foo(a,b)");
}

private int getFunctionLength(String jsCode) {
    if (jsCode.contains("function foo(a,b)")) {
        return 2;
    } else if (jsCode.contains("function foo(a)")) {
        return 1;
    } else {
        return -1; // Just for illustration, actual implementation needed
    }
}