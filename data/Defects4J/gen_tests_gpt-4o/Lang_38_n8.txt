
import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.Test;

import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class DateFormatUtilsTest {

    @Test
    public void testFormat_CalendarIsoMsZulu_Failure() {
        final String dateTime = "2009-10-16T16:42:16.000Z";

        // Create a calendar with GMT-8 time zone
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, Calendar.OCTOBER, 16, 8, 42, 16);

        // Convert the calendar's time zone to GMT
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));

        // This assertion will fail due to the bug
        assertEquals("dateTime", dateTime, format.format(cal));
    }

    @Test
    public void testFormat_CalendarIsoMsZulu_Workaround() {
        final String dateTime = "2009-10-16T16:42:16.000Z";

        // Create a calendar with GMT-8 time zone
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, Calendar.OCTOBER, 16, 8, 42, 16);

        // Accessing cal.getTime() fixes the issue, forcing recalculation of time fields
        cal.getTime();

        // Convert the calendar's time zone to GMT
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));

        // This assertion will pass due to accessing cal.getTime()
        assertEquals("dateTime", dateTime, format.format(cal));
    }
}
