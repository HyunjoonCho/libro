public void testFunctionWithRecordTypeReturn() {
    // Define a small JavaScript environment
    Context context = Context.enter();
    ScriptableObject scope = context.initStandardObjects();

    // Define the JavaScript function
    String script = "/** @returns {{prop1: (Object|undefined), prop2: (string|undefined), prop3: (string|undefined)}} */\n" +
                    "function func(a, b) {\n" +
                    " var results;\n" +
                    " if (a) {\n" +
                    " results = {};\n" +
                    " results.prop1 = {a: 3};\n" +
                    " }\n" +
                    " if (b) {\n" +
                    " results = results || {};\n" +
                    " results.prop2 = 'prop2';\n" +
                    " } else {\n" +
                    " results = results || {};\n" +
                    " results.prop3 = 'prop3';\n" +
                    " }\n" +
                    " return results;\n" +
                    "}\n";
    context.evaluateString(scope, script, "testScript", 1, null);

    // Call the function with specific parameters to reproduce the issue
    Object functionResult = context.evaluateString(scope, "func(true, false);", "testScript", 1, null);

    // Check if the function result matches the expected output using assertions
    ScriptableObject result = (ScriptableObject) functionResult;
    assertNotNull(result);
    assertEquals("{a=3}", Context.jsToJava(result.get("prop1", result), Object.class).toString());
    assertEquals("prop3", Context.jsToJava(result.get("prop3", result), String.class));

    Context.exit();
}