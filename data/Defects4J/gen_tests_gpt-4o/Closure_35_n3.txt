script
/**
 * @returns {{prop1: (Object|undefined), prop2: (string|undefined), prop3: (string|undefined)}} 
 */
function func(a, b) {
    var results;
    if (a) {
        results = {};
        results.prop1 = {a: 3};
    }
    if (b) {
        results = results || {};
        results.prop2 = 'prop2';
    } else {
        results = results || {};
        results.prop3 = 'prop3';
    }
    return results;
}

function testFunc() {
    // Test case where both a and b are true.
    let result1 = func(true, true);
    console.assert(typeof result1 === 'object', "Expected an object");
    console.assert(result1.prop1 !== undefined, "Expected prop1 to be defined");
    console.assert(result1.prop2 === 'prop2', "Expected prop2 to be 'prop2'");
    console.assert(result1.prop3 === undefined, "Expected prop3 to be undefined");

    // Test case where a is true and b is false.
    let result2 = func(true, false);
    console.assert(typeof result2 === 'object', "Expected an object");
    console.assert(result2.prop1 !== undefined, "Expected prop1 to be defined");
    console.assert(result2.prop2 === undefined, "Expected prop2 to be undefined");
    console.assert(result2.prop3 === 'prop3', "Expected prop3 to be 'prop3'");

    // Test case where a is false and b is true.
    let result3 = func(false, true);
    console.assert(typeof result3 === 'object', "Expected an object");
    console.assert(result3.prop1 === undefined, "Expected prop1 to be undefined");
    console.assert(result3.prop2 === 'prop2', "Expected prop2 to be 'prop2'");
    console.assert(result3.prop3 === undefined, "Expected prop3 to be undefined");

    // Test case where both a and b are false.
    let result4 = func(false, false);
    console.assert(typeof result4 === 'object', "Expected an object");
    console.assert(result4.prop1 === undefined, "Expected prop1 to be undefined");
    console.assert(result4.prop2 === undefined, "Expected prop2 to be undefined");
    console.assert(result4.prop3 === 'prop3', "Expected prop3 to be 'prop3'");
}

testFunc();
