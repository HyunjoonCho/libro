
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

// Base class Vehicle
class Vehicle {
    String type;
}

// Derived classes
class Car extends Vehicle {
    int wheels;
}

class Truck extends Vehicle {
    int payload;
}

public class TypeHierarchyTest {

    @Test
    public void testTypeHierarchyAdapter() {
        String json = "{\"type\":\"Truck\",\"payload\":5000}";

        try {
            // Create Gson instance with a type hierarchy adapter for Vehicle
            Gson gson = new GsonBuilder()
                    .registerTypeHierarchyAdapter(Vehicle.class, (src, typeOfSrc, context) -> {
                        if (src instanceof Car) {
                            return gson.toJsonTree(src, Car.class);
                        } else if (src instanceof Truck) {
                            return gson.toJsonTree(src, Truck.class);
                        } else {
                            throw new RuntimeException("Unknown Vehicle type");
                        }
                    })
                    .create();

            // Attempt to parse JSON as a Car
            Car car = gson.fromJson(json, Car.class);
            fail("Expected JsonSyntaxException but did not get it.");
        } catch (JsonSyntaxException e) {
            // Expected behavior when wrong type hierarchy causes a mismatch
            assertTrue(e.getMessage().contains("Expected Car but found Truck"));
        }
    }
}
