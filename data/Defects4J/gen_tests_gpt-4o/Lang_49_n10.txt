
import org.junit.Test;
import static org.junit.Assert.*;

// Hypothetical Fraction class where the issue might reside
class Fraction {
    private int numerator;
    private int denominator;
    
    public Fraction(int numerator, int denominator) {
        this.numerator = numerator;
        this.denominator = denominator;
    }
    
    public Fraction reduce() {
        // Sample placeholder logic that might cause an infinite loop
        int gcd = gcd(numerator, denominator);
        return new Fraction(numerator / gcd, denominator / gcd);
    }
    
    private int gcd(int a, int b) {
        // Method could have a bug that causes infinite loop if a is 0
        while (b != 0) {
            int temp = b;
            b = a % b;
            a = temp;
        }
        return a;
    }
    
    public int getNumerator() {
        return numerator;
    }
    
    public int getDenominator() {
        return denominator;
    }
}

public class FractionTest {
    
    @Test(timeout = 1000)
    public void testReduceWithZeroNumerator() {
        Fraction fraction = new Fraction(0, 5);
        Fraction reducedFraction = fraction.reduce();
        
        assertEquals(0, reducedFraction.getNumerator());
        assertEquals(1, reducedFraction.getDenominator());
    }
}
