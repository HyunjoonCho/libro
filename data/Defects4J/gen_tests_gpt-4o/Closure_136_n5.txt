
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

public class SuperRenamingTest {

    @Test
    public void testSuperRenamingWithAdvancedOptimizations() {
        // Sample JavaScript code using Prototype's $super
        String jsCode = 
            "var Class = function() {};\n" +
            "Class.prototype.method = function($super) {\n" +
            "  return $super();\n" +
            "};";
        
        // Create a Compiler instance
        Compiler compiler = new Compiler();
        
        // Set compiler options with advanced optimizations
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        // Compile the source code
        Result result = compiler.compile(
            SourceFile.fromCode("externs.js", ""),  // Assuming externs are not needed here
            SourceFile.fromCode("test.js", jsCode),
            options
        );
        
        // Verify the compiled code
        String compiledCode = compiler.toSource();
        
        // Check that $super is not renamed inappropriately
        assertTrue("The compiled code should contain '$super'", compiledCode.contains("$super"));
    }
}
