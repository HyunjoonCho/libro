public void testVarCheckCrashWhenUsingModules() {
    try {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setModuleResolutionMode(ModuleIdentifier.Plugin.NONE);
        options.setPrettyPrint(true);
        options.setDebugOptions(true);
        
        JSModule jqueryModule = new JSModule("jquery");
        jqueryModule.add(SourceFile.fromCode("jquery.js", "code for jquery"));

        JSModule coreModule = new JSModule("core");
        coreModule.add(SourceFile.fromCode("core.js", "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );"));
        coreModule.addDependency(jqueryModule);

        List<JSModule> modules = Arrays.asList(jqueryModule, coreModule);

        Result result = compiler.compileModules(
                Collections.singletonList(SourceFile.fromCode("qunit_externs.js", "")),
                modules,
                options);

        assertFalse("The compilation should have failed with an unexpected variable", result.success);
    } catch (RuntimeException e) {
        assertTrue("Expected INTERNAL COMPILER ERROR for unexpected variable jQuery$$2", e.getMessage().contains("Unexpected variable jQuery$$2"));
    }
}