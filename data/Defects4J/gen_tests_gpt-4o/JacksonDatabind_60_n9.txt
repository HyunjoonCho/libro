
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;

public class PolymorphicTypeTest {

    static class CommandAPDU {
        /** @serial */
        @JsonIgnore // Suppressing all other getters
        private byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
            this.apdu = apdu.clone();
        }

        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }
    }

    @Test
    public void testPolymorphicTypeRetention() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT);

        byte[] apduBytes = {0, 1, 2, 3, 4, 5};
        CommandAPDU original = new CommandAPDU(apduBytes);

        // Serialize
        String json = mapper.writeValueAsString(original);
        System.out.println("Serialized Output: " + json);

        // Deserialize
        CommandAPDU deserialized = mapper.readValue(json, CommandAPDU.class);

        // Verify that the deserialized object retains type and can construct correctly
        assertArrayEquals(apduBytes, deserialized.getBytes());
    }
}
