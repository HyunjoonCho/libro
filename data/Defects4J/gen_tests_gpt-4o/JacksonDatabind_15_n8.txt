
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;

import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class IntegerListXmlAdapterTest {
    
    @Test
    public void testBasic() throws JsonProcessingException {
        ObjectMapper mapper = JsonMapper.builder()
                .annotationIntrospector(new JaxbAnnotationIntrospector())
                .build();
        SomeIntListHolder listHolder = new SomeIntListHolder();
        listHolder.setListOne(Stream.of(1, 2, 3).collect(Collectors.toList()));
        
        // This will throw a JsonMappingException with the original XmlAdapter
        // because it uses Object as the type, which causes issues with Jackson
        try {
            String jsonString = mapper.writeValueAsString(listHolder);
            System.out.println(jsonString);
            // Expecting a serialization
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            assertEquals("No serializer found for class java.lang.String and no properties discovered to create BeanSerializer", e.getOriginalMessage().substring(0, 100));
        }
    }

    public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {
        @Override
        public List<Integer> unmarshal(Object value) throws Exception {
            return null;
        }

        @Override
        public Object marshal(List<Integer> list) throws Exception {
            return list.stream().map(String::valueOf).collect(Collectors.joining(","));
        }
    }

    @XmlRootElement
    @XmlAccessorType(XmlAccessType.NONE)
    public static class SomeIntListHolder {

        @XmlAttribute
        @XmlJavaTypeAdapter(IntegerListXmlAdapter.class)
        private List<Integer> listOne;

        public List<Integer> getListOne() {
            return listOne;
        }

        public void setListOne(List<Integer> listOne) {
            this.listOne = listOne;
        }
    }
}
