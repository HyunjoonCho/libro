
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class TarArchiveInputStreamTest {

    @Test
    public void testParsePaxHeadersWithEmptyLineFails() {
        // Manually crafted PAX header with an empty line
        String paxHeaders = "25 path=example/file.txt\n\n"; // Notice the empty line at the end
        String tarEntryHeader = "00000000000000000000"; // Simplified placeholder for remaining header parts

        // Combine the PAX headers and the tar entry headers. 
        // Normally you would append the full header, but this is just to stimulate the fault.
        byte[] tarEntryData = (paxHeaders + tarEntryHeader + "content").getBytes();

        try (TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(tarEntryData))) {
            TarArchiveEntry entry;
            while ((entry = tarInputStream.getNextTarEntry()) != null) {
                // Trigger the parsing logic
            }
            fail("Expected a NegativeArraySizeException to be thrown");
        } catch (NegativeArraySizeException e) {
            // Expected, test passes
            assertTrue(e instanceof NegativeArraySizeException);
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
    }
}
