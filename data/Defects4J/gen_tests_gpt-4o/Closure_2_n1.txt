
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerBugTest {

    @Test
    public void testInterfaceWithMultipleExtendsCausingCrash() {
        Compiler compiler = new Compiler();

        // Set the options for the compiler
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ALL, CompilerOptions.WarningsGuard.Level.WARNING);

        // JavaScript code from the bug report that should cause the crash
        String jsCode = ""
                + "/**\n"
                + " * @interface\n"
                + " * @extends {unknown_1}\n"
                + " * @extends {unknown_2}\n"
                + " */\n"
                + "function Foo() {}\n";

        // Create the source file for the code
        List<SourceFile> externs = Collections.emptyList();
        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("input.js", jsCode));

        // Catch exceptions to see if the compile crashes
        boolean exceptionThrown = false;
        try {
            // Run the compilation
            Result result = compiler.compile(externs, inputs, options);

            // Print all compiler errors
            for (JSError error : result.errors) {
                System.err.println(error.toString());
            }
        } catch (NullPointerException e) {
            exceptionThrown = true;
        }

        // Check that the NullPointerException was indeed thrown
        assertTrue("Expected NullPointerException to be thrown", exceptionThrown);
    }
}
