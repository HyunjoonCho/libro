
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class JsonAnyGetterSerializeTest {

    public static class TestClass {
        private Map<String, String> parameters;

        public TestClass() {
            parameters = new HashMap<>();
            parameters.put("key", "value");
        }

        @JsonSerialize(using = CustomSerializer.class)
        @JsonAnyGetter
        public Map<String, String> getParameters() {
            return parameters;
        }
    }

    public static class CustomSerializer extends ToStringSerializer {
        // Custom serialization logic if required
    }

    @Test
    public void testJsonAnyGetterWithJsonSerialize() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // Register custom serializer to illustrate the problem
        SimpleModule module = new SimpleModule();
        module.addSerializer(Map.class, new CustomSerializer());
        objectMapper.registerModule(module);

        TestClass instance = new TestClass();
        String result = objectMapper.writeValueAsString(instance);

        // Expecting that the custom serializer will be used, but in this case, it will be ignored.
        String expected = "\"CustomSerializedOutput\""; // Expected output if CustomSerializer was used
        assertEquals(expected, result);
    }
}
