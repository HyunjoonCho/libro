public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    
    TestClass testClass = new TestClass();
    testClass.parameters = new HashMap<>();
    testClass.parameters.put("key1", "value1");
    testClass.parameters.put("key2", "value2");

    String jsonResult = mapper.writeValueAsString(testClass);

    assertTrue(jsonResult.contains("converted_value1"));
    assertTrue(jsonResult.contains("converted_value2"));
}

public static class TestClass {
    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }

    public Map<String, String> parameters;
}

public static class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey(), "converted_" + entry.getValue());
        }
        gen.writeEndObject();
    }
}