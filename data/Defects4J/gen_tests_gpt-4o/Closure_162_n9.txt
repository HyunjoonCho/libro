
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.*;

public class TypeAliasTest {
    
    @Test
    public void testTypeAliasesBeforeDefinition() {
        String jsCode = "/**\n" +
                " * @fileoverview\n" +
                " * @suppress {uselessCode|visibility}\n" +
                " */\n" +
                "goog.provide('foo.Foo');\n" +
                "goog.provide('foo.Foo.Bar');\n" +
                "\n" +
                "goog.scope(function() {\n" +
                " /**\n" +
                "  * @param {Foo.Bar} bar\n" +
                "  * @constructor\n" +
                "  */\n" +
                " foo.Foo = function(bar) {\n" +
                "   this.bar = bar;\n" +
                " };\n" +
                " var Foo = foo.Foo;\n" +
                "\n" +
                " /** @type {Foo.Bar} */\n" +
                " Foo.prototype.bar = null;\n" +
                "\n" +
                " /** @constructor */\n" +
                " Foo.Bar = function() {};\n" +
                "});";
        
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
        
        SourceFile extern = SourceFile.fromCode("externs", "");
        SourceFile input = SourceFile.fromCode("input", jsCode);
        
        Result result = compiler.compile(extern, input, options);
        
        // Check that there is a warning and it matches the expected message
        assertFalse(result.success);
        assertNotNull(result.errors);
        assertEquals(1, result.errors.length);
        assertEquals("Bad type annotation. Unknown type Foo.Bar", 
                     result.errors[0].description);
    }
}
