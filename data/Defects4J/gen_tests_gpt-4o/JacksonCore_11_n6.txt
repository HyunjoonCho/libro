
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;
import java.util.Map.Entry;
import java.util.Random;

public class SerializationTest {
    private static final UUID user = UUID.randomUUID();

    @Test
    public void testRepeatedSerialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        Map<ObjectUserKey, ServerIndexPair> ssip = new ConcurrentHashMap<>();

        for (int i = 0; i < 10000; ++i) {
            byte[] indexPairBytes = new byte[2080];
            new Random().nextBytes(indexPairBytes);
            ServerIndexPair sip = new ServerIndexPair(indexPairBytes);

            // Serialize the ServerIndexPair to a JSON byte array
            byte[] s = mapper.writeValueAsBytes(Map.of(UUID.randomUUID().toString(), sip));

            // Deserialize the JSON byte array back to a map
            Map<String, ServerIndexPair> metadata = mapper.readValue(s,
                    new TypeReference<Map<String, ServerIndexPair>>() {});

            for (Entry<String, ServerIndexPair> metadataEntry : metadata.entrySet()) {
                ServerIndexPair indexPair = metadataEntry.getValue();
                ssip.put(new ObjectUserKey(metadataEntry.getKey(), user), indexPair);
            }
        }
    }

    public static class ServerIndexPair {
        public static final String INDEX_PAIR_FIELD = "indexPair";
        private final byte[] indexPair;

        @JsonCreator
        public ServerIndexPair(@JsonProperty(INDEX_PAIR_FIELD) byte[] indexPair) {
            if (indexPair.length != 2080) {
                throw new IllegalArgumentException("Index pair must be 2080 bytes long.");
            }
            this.indexPair = indexPair;
        }

        @JsonProperty(INDEX_PAIR_FIELD)
        public byte[] getIndexPair() {
            return indexPair;
        }
    }

    public static class ObjectUserKey {
        public static final String SEPARATOR = ":";
        private final String objectId;
        private final UUID userKey;

        @JsonCreator
        public ObjectUserKey(@JsonProperty("objectId") String objectId,
                             @JsonProperty("userKey") UUID userKey) {
            this.objectId = objectId;
            this.userKey = userKey;
        }

        @JsonProperty("objectId")
        public String getObjectId() {
            return objectId;
        }

        @JsonProperty("userKey")
        public UUID getUserKey() {
            return userKey;
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((objectId == null) ? 0 : objectId.hashCode());
            result = prime * result + ((userKey == null) ? 0 : userKey.hashCode());
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || getClass() != obj.getClass()) {
                return false;
            }
            ObjectUserKey other = (ObjectUserKey) obj;
            return objectId.equals(other.objectId) && userKey.equals(other.userKey);
        }

        @Override
        public String toString() {
            return userKey.toString() + SEPARATOR + objectId;
        }
    }
}
