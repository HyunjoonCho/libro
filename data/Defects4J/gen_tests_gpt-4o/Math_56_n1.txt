
import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.fail;

import java.util.Arrays;

public class MultidimensionalCounterTest {

    private static class MultidimensionalCounter {
        private final int[] sizes;
        private final int totalSize;

        public MultidimensionalCounter(int... sizes) {
            this.sizes = sizes;
            this.totalSize = Arrays.stream(sizes).reduce(1, (a, b) -> a * b);
        }

        public int[] getCounts(int index) {
            int[] counts = new int[sizes.length];
            int remainder = index;
            for (int i = sizes.length - 1; i >= 0; i--) {
                counts[i] = remainder % sizes[i];
                remainder /= sizes[i];
            }
            return counts;
        }

        public Iterable<Integer> iterator() {
            return () -> new Iterator<Integer>() {
                private int count = 0;

                @Override
                public boolean hasNext() {
                    return count < totalSize;
                }

                @Override
                public Integer next() {
                    return count++;
                }
            };
        }
    }

    @Test
    public void testMultidimensionalCounterGetCounts() {
        MultidimensionalCounter counter = new MultidimensionalCounter(2, 4);

        int[][] expectedCounts = {
            {0, 0},
            {0, 1},
            {0, 2},
            {0, 3},
            {1, 0},
            {1, 1},
            {1, 2},
            {1, 3}
        };

        int index = 0;
        for (Integer i : counter.iterator()) {
            int[] actualCounts = counter.getCounts(i);
            assertArrayEquals("Mismatch at index " + i, expectedCounts[index], actualCounts);
            index++;
        }

        if (index != expectedCounts.length) {
            fail("The number of iterations did not match the expected count.");
        }
    }
}
