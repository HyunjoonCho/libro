
import com.google.javascript.jscomp.*;
import org.junit.Test;

import static org.junit.Assert.*;

public class PreconditionCrashTest {

    @Test(expected = IllegalStateException.class)
    public void testPreconditionCrash() {
        String code = ""
                + "var goog = {};\n"
                + "goog.scope;\n"
                + "\n"
                + "var ns = {};\n"
                + "ns.sub = {};\n"
                + "\n"
                + "/** @constructor */\n"
                + "ns.sub.C = function() {};\n"
                + "\n"
                + "goog.scope(function() {\n"
                + " var sub = ns.sub;\n"
                + " /** @type {sub.C} */\n"
                + " var x = null;\n"
                + "});\n";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Enabling the processing of goog.scope to simulate the environment
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Attempt to compile the code
        // This should throw an IllegalStateException based on the bug report
        compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", code), options);
    }
}
