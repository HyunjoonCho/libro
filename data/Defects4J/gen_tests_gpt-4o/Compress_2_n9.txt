
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.io.IOUtils;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import static org.junit.Assert.assertEquals;

public class ArArchiveTest {

    @Test
    public void testArArchiveDelete() throws Exception {
        File originalAr = File.createTempFile("original", ".ar");

        // Creating an AR archive with two files: test1.xml and test2.xml
        try (ArArchiveOutputStream arOut = new ArArchiveOutputStream(new FileOutputStream(originalAr))) {
            addFileToArchive(arOut, "test1.xml", "Content of test1.xml");
            addFileToArchive(arOut, "test2.xml", "Content of test2.xml");
        }

        // Delete test2.xml from the AR archive
        File modifiedAr = File.createTempFile("modified", ".ar");
        try (ArArchiveInputStream arIn = new ArArchiveInputStream(new FileInputStream(originalAr));
             ArArchiveOutputStream arOut = new ArArchiveOutputStream(new FileOutputStream(modifiedAr))) {

            ArArchiveEntry entry;
            while ((entry = arIn.getNextArEntry()) != null) {
                if (!entry.getName().equals("test2.xml")) {
                    // Copying remaining entries (excluding test2.xml) to a new ar archive
                    arOut.putArchiveEntry(new ArArchiveEntry(entry.getName(), entry.getLength()));
                    IOUtils.copy(arIn, arOut);
                    arOut.closeArchiveEntry();
                }
            }
        }

        // Validate the archive contents using ArArchiveInputStream
        try (ArArchiveInputStream arIn = new ArArchiveInputStream(new FileInputStream(modifiedAr))) {
            ArArchiveEntry entry;
            ByteArrayOutputStream extractedContent = new ByteArrayOutputStream();
            while ((entry = arIn.getNextArEntry()) != null) {
                extractedContent.write(entry.getName().getBytes());
            }
            // Check if only test1.xml remains
            assertEquals("test1.xml", extractedContent.toString().trim());
        }

        // Clean up temporary files
        originalAr.delete();
        modifiedAr.delete();
    }

    private void addFileToArchive(ArArchiveOutputStream arOut, String fileName, String content) throws Exception {
        byte[] contentBytes = content.getBytes();
        ArArchiveEntry entry = new ArArchiveEntry(fileName, contentBytes.length);
        arOut.putArchiveEntry(entry);
        IOUtils.copy(new ByteArrayInputStream(contentBytes), arOut);
        arOut.closeArchiveEntry();
    }
}
