public void testTypeCheckingErrorWithStubReplacement() {
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setLanguage(CompilerOptions.LanguageMode.ECMASCRIPT_NEXT);
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

    String jsCode = "/** @constructor */\n" +
                    "var myclass = function() {}\n" +
                    "/** @param {boolean} success */\n" +
                    "myclass.prototype.fn = function(success) {}\n" +
                    "myclass.prototype.test = function() {\n" +
                    "  this.fn();\n" +
                    "  this.fn = function() {};\n" +
                    "}";

    SourceFile extern = SourceFile.fromCode("externs.js", "");
    SourceFile input = SourceFile.fromCode("input.js", jsCode);

    compiler.compile(extern, input, options);
    JSError[] warnings = compiler.getWarnings();
    
    assertEquals(2, warnings.length);
    assertEquals("Function this.fn: called with 0 argument(s). Function requires at least 1 argument(s) of type boolean.", warnings[0].description);
    assertEquals("Function this.fn: not all parameters are provided.", warnings[1].description);
}