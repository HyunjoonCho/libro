
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.lang3.tuple.Pair;

public class DiscreteDistributionTest {

    @Test(expected = ArrayStoreException.class)
    public void testSampleWithSubclassType() {
        List<Pair<Object, Double>> list = new ArrayList<Pair<Object, Double>>();
        list.add(new Pair<Object, Double>(new SubType(), 0.0));
        list.add(new Pair<Object, Double>(new Object(), 1.0));

        DiscreteDistribution<Object> distribution = new DiscreteDistribution<Object>(list);
        distribution.sample(1);
    }

    static class SubType extends Object {
        // A subclass of Object for testing purpose
    }
    
    static class DiscreteDistribution<T> {
        private final List<Pair<T, Double>> singletons;

        public DiscreteDistribution(List<Pair<T, Double>> list) {
            this.singletons = list;
        }

        public T[] sample(int sampleSize) {
            @SuppressWarnings("unchecked")
            T[] result = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
            // Sample logic here
            return result;
        }
    }
}
