public void testLargeNumberOfWeights() {
    int n = 41200;
    double[] weights = new double[n];
    double[] target = new double[n];
    double[] initialGuess = new double[2]; // assuming a simple polynomial fitting problem
    
    // Populate weights and target with some data
    for (int i = 0; i < n; i++) {
        weights[i] = 1.0;
        target[i] = Math.sin(i); // example target function, can be any function
    }
    
    CurveFitter<PolynomialCurveFitter.Parametric> fitter = 
        new CurveFitter<>(new LevenbergMarquardtOptimizer());
    
    fitter.addObservedPoints(weights, target);

    try {
        double[] result = fitter.fit(new PolynomialCurveFitter(1), initialGuess);
        assertNotNull(result);
    } catch (OutOfMemoryError e) {
        fail("Optimizer exhausted memory with large number of weights: " + e.getMessage());
    }
}