
import org.apache.commons.math.estimation.AbstractEstimator;
import org.apache.commons.math.estimation.EstimationProblem;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

public class AbstractEstimatorTest {

    private static class TestEstimator extends AbstractEstimator {
        @Override
        public void estimate(EstimationProblem problem) {
            // Minimal estimation logic, not relevant for the test
        }
    }

    private static class TestEstimationProblem implements EstimationProblem {
        private final List<EstimatedParameter> parameters;

        public TestEstimationProblem(List<EstimatedParameter> parameters) {
            this.parameters = parameters;
        }

        @Override
        public EstimatedParameter[] getAllParameters() {
            return parameters.toArray(new EstimatedParameter[0]);
        }

        @Override
        public EstimatedParameter[] getUnboundParameters() {
            List<EstimatedParameter> unbound = new ArrayList<>();
            for (EstimatedParameter p : parameters) {
                if (!p.isBound()) {
                    unbound.add(p);
                }
            }
            return unbound.toArray(new EstimatedParameter[0]);
        }

        @Override
        public WeightedMeasurement[] getMeasurements() {
            // Minimal measurements, not relevant for the test
            return new WeightedMeasurement[0];
        }
    }

    @Test
    public void testGetCovariancesWithBoundParameters() {
        List<EstimatedParameter> parameters = new ArrayList<>();
        parameters.add(new EstimatedParameter("param1", 1.0, true));
        parameters.add(new EstimatedParameter("param2", 2.0, false)); // unbound
        parameters.add(new EstimatedParameter("param3", 3.0, true));

        EstimationProblem problem = new TestEstimationProblem(parameters);
        TestEstimator estimator = new TestEstimator();

        try {
            estimator.getCovariances(problem);
            Assert.fail("Expected ArrayIndexOutOfBoundsException due to bound parameters");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Test passes if this exception is caught
        }
    }

    @Test
    public void testGuessParametersErrorsWithBoundParameters() {
        List<EstimatedParameter> parameters = new ArrayList<>();
        parameters.add(new EstimatedParameter("param1", 1.0, true));
        parameters.add(new EstimatedParameter("param2", 2.0, false)); // unbound
        parameters.add(new EstimatedParameter("param3", 3.0, true));

        EstimationProblem problem = new TestEstimationProblem(parameters);
        TestEstimator estimator = new TestEstimator();

        try {
            estimator.guessParametersErrors(problem);
            Assert.fail("Expected ArrayIndexOutOfBoundsException due to bound parameters");
        } catch (ArrayIndexOutOfBoundsException e) {
            // Test passes if this exception is caught
        }
    }
}
