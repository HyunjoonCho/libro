
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
import org.junit.Test;

import javax.xml.bind.JAXBException;
import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.List;

import static java.util.Arrays.asList;
import static org.junit.Assert.*;

public class IntegerListXmlAdapterTest {

    @Test
    public void testBasic() {
        try {
            ObjectMapper mapper = (new ObjectMapper())
                    .setAnnotationIntrospector(new JaxbAnnotationIntrospector());

            SomeIntListHolder listHolder = new SomeIntListHolder();
            listHolder.setListOne(asList(1, 2, 3));

            // This line should throw an exception because of the marshalling issue
            mapper.writeValueAsString(listHolder);

            // Test should fail if no exception is thrown
            fail("Expected a JsonMappingException due to incorrect marshalling");
        } catch (JsonProcessingException e) {
            // Verify that the exception is due to the absence of a serializer for the String class
            assertTrue(e.getMessage().contains("No serializer found for class java.lang.String"));
        }
    }

    public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {
        @Override
        public List<Integer> unmarshal(Object value) throws Exception {
            return null;
        }

        @Override
        public Object marshal(List<Integer> list) throws Exception {
            return String.join(",", list.toString());
        }
    }

    @XmlRootElement
    @XmlAccessorType(XmlAccessType.NONE)
    public static class SomeIntListHolder {
        
        @XmlAttribute
        @XmlJavaTypeAdapter(IntegerListXmlAdapter.class)
        private List<Integer> listOne;

        public List<Integer> getListOne() {
            return listOne;
        }

        public void setListOne(List<Integer> listOne) {
            this.listOne = listOne;
        }
    }
}
