
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class PrimitiveWrapperDeserializationTest {

    // Custom deserializer for Integer to illustrate the issue
    public static class IntegerDeserializer extends JsonDeserializer<Integer> {
        @Override
        public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
            return p.getIntValue();
        }
    }

    // Sample class that uses both primitive int and Integer
    public static class SampleClass {
        public int primitiveValue;
        public Integer wrapperValue;
    }

    @Test
    public void testPrimitiveAndWrapperDeserialization() throws IOException {
        String json = "{\"primitiveValue\": 42, \"wrapperValue\": 42}";

        ObjectMapper objectMapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(Integer.class, new IntegerDeserializer());
        objectMapper.registerModule(module);

        SampleClass result = objectMapper.readValue(json, SampleClass.class);
        
        // The test checks if both the primitive and wrapper fields are correctly deserialized
        assertEquals(42, result.primitiveValue);
        assertEquals(Integer.valueOf(42), result.wrapperValue);
    }
}
