
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.DefaultTypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.TypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.TypeResolverBuilder;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import org.junit.Test;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;

import static org.junit.Assert.assertEquals;

public class UnmodifiableListDeserializationTest {

    @Test(expected = com.fasterxml.jackson.databind.exc.InvalidDefinitionException.class)
    public void testUnmodifiableNonRandomAccessList() throws Exception {
        // Create an unmodifiable list using a LinkedList (which does not implement RandomAccess)
        Collection<?> exp = Collections.unmodifiableList(new LinkedList<>(Arrays.asList("first", "second")));
        
        // Setup ObjectMapper with default typing
        ObjectMapper mapper = new ObjectMapper();
        mapper.setDefaultTyping(new ObjectMapper.DefaultTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL)
                .init(JsonTypeInfo.Id.CLASS, null)
                .inclusion(JsonTypeInfo.As.PROPERTY)
                .typeProperty("@class")
                .typeIdVisibility(false)
                .build()
        );
        
        // Convert the collection to JSON
        String json = mapper.writeValueAsString(exp);

        // Deserialize JSON back to a collection
        Collection<?> act = mapper.readValue(json, Collection.class);

        // Assertions
        assertEquals(exp, act);
        assertEquals(exp.getClass(), act.getClass());
    }
}
