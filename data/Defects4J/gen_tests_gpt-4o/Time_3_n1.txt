
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class MutableDateTimeTest {

    @Test
    public void testAddDaysOnDstTransition() {
        // Create a MutableDateTime object for the DST transition date in Europe/Berlin
        final MutableDateTime mdt = new MutableDateTime(
                2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID("Europe/Berlin"));
        
        System.out.println("Start date: " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        mdt.addHours(-1);
        System.out.println("addHours(-1): " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        // Save the state after addHours(0)
        mdt.addHours(0);
        System.out.println("addHours(0): " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        
        long expectedMillisAfterHours = mdt.toInstant().getMillis();

        // Save the state after original addDays(0)
        mdt.addDays(0);
        System.out.println("addDays(0): " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        // Assert that the state hasn't changed after addDays(0)
        assertEquals("addDays(0) should not alter the time", expectedMillisAfterHours, mdt.toInstant().getMillis());
    }
}
