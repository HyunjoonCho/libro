
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerReturnsBestPoint() {
        // Define a simple unimodal function, e.g., a quadratic function with a minimum at x = 2.
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };
        
        // Set up the BrentOptimizer with a small threshold for accuracy.
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Define search interval from 1 to 4.
        SearchInterval interval = new SearchInterval(1, 4);

        // Perform optimization to find minimum.
        UnivariatePointValuePair result = optimizer.optimize(
                new UnivariateObjectiveFunction(function), interval, BrentOptimizer.GoalType.MINIMIZE);

        // Assert that the optimizer finds the minimum at x = 2.
        assertEquals("The optimizer should return the best point it encountered.", 
                     2.0, result.getPoint(), 1e-8);
    }
}
