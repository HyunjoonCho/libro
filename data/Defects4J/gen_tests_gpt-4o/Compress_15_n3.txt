
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.Assert.*;

public class ZipArchiveEntryTest {

    @Test
    public void testZipArchiveEntryEquality() throws IOException {
        // Create a temporary ZIP file in memory with a single entry
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (ZipOutputStream zos = new ZipOutputStream(baos)) {
            ZipEntry entry = new ZipEntry("testEntry.txt");
            zos.putNextEntry(entry);
            zos.write("Test content".getBytes());
            zos.closeEntry();
        }

        // Convert ByteArrayOutputStream to ByteArrayInputStream
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());

        // Read the entry with ZipArchiveInputStream
        ZipArchiveEntry entryFromInputStream = null;
        try (ZipArchiveInputStream zis = new ZipArchiveInputStream(bais)) {
            entryFromInputStream = zis.getNextZipEntry();
        }

        // Write ByteArrayInputStream data to a temporary file
        File tempZipFile = File.createTempFile("testZip", ".zip");
        tempZipFile.deleteOnExit();
        
        try (ZipOutputStream zos = new ZipOutputStream(baos)) {
            ZipEntry entry = new ZipEntry("testEntry.txt");
            zos.putNextEntry(entry);
            zos.write("Test content".getBytes());
            zos.closeEntry();
        }

        // Read the same entry with ZipFile
        ZipArchiveEntry entryFromFile = null;
        try (ZipFile zipFile = new ZipFile(tempZipFile)) {
            Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
            if (entries.hasMoreElements()) {
                entryFromFile = entries.nextElement();
            }
        }

        // Assert that the entries are equal
        assertNotNull("Entry from input stream should not be null", entryFromInputStream);
        assertNotNull("Entry from zip file should not be null", entryFromFile);
        assertEquals("Entries should be equal", entryFromInputStream, entryFromFile);
    }
}
