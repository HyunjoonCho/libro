public void testExceptionWithCodeContainingGetters() {
    String jsCode = "const obj = { get name() { return 'default'; } };";
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();

    // To reproduce the issue, we need to ensure that the necessary passes that trigger the error are enabled.
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    try {
        compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("Settings.js", jsCode), options);
        fail("Expected RuntimeException due to getter-based issue in JS code.");
    } catch (RuntimeException e) {
        // Check that RuntimeException is caused by the specific issue described.
        assertTrue(e.getCause() instanceof IllegalStateException);
        assertTrue(e.getCause().getMessage().contains("Expected function but was call Reference node CALL"));
    }
}