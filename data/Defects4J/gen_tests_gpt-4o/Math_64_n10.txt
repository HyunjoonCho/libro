public void testLevenbergMarquardtInconsistency() {
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    
    MultivariateJacobianFunction objectiveFunction = new MultivariateJacobianFunction() {
        @Override
        public Pair<RealVector, RealMatrix> value(final RealVector point) {
            RealVector value = new ArrayRealVector(new double[] { Math.pow(point.getEntry(0), 2) });
            RealMatrix jacobian = new Array2DRowRealMatrix(new double[][] { { 2 * point.getEntry(0) } });
            return new Pair<>(value, jacobian);
        }
    };

    PointVectorValuePair result = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(objectiveFunction),
        new InitialGuess(new double[] { 1.0 }),
        new Target(new double[] { 0.0 }),
        new Weight(new double[] { 1.0 }));

    double[] expectedPoint = result.getPoint();
    double expectedCost = result.getValue()[0];
    
    optimizer = new LevenbergMarquardtOptimizer(); // Reset optimizer
    PointVectorValuePair comparisonResult = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(objectiveFunction),
        new InitialGuess(expectedPoint),
        new Target(new double[] { expectedCost }),
        new Weight(new double[] { 1.0 }));
    
    assertArrayEquals(expectedPoint, comparisonResult.getPoint(), 1e-6);
    assertEquals(expectedCost, optimizer.getRMS(), 1e-6);
}