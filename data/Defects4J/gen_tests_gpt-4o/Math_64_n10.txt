
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.optim.PointVectorValuePair;
import org.apache.commons.math3.fitting.CurveFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.apache.commons.math3.analysis.function.Gaussian;
import org.junit.Test;
import java.util.List;
import java.util.ArrayList;

import static org.junit.Assert.*;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testLevenbergMarquardtConsistency() {
        // Define observed data points
        List<WeightedObservedPoint> observations = new ArrayList<>();
        observations.add(new WeightedObservedPoint(1, 1, 2.0));
        observations.add(new WeightedObservedPoint(1, 2, 2.5));
        observations.add(new WeightedObservedPoint(1, 3, 3.5));
        observations.add(new WeightedObservedPoint(1, 4, 5.0));

        // Initial guess for parameters
        double[] initialGuess = {1.0, 1.0, 1.0};

        // Create Levenberg-Marquardt optimizer and curve fitter
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
        CurveFitter<Gaussian.Parametric> fitter = new CurveFitter<>(optimizer);

        // Add observations to fitter
        for (WeightedObservedPoint point : observations) {
            fitter.addObservedPoint(point);
        }

        // Perform optimization
        double[] optimalParameters = fitter.fit(new Gaussian.Parametric(), initialGuess);

        // Retrieve point-value pair from optimizer for comparison
        PointVectorValuePair result = optimizer.optimize();

        // Assume that the optimizer provides residuals and cost
        double[] residuals = optimizer.getResiduals();
        double cost = optimizer.getRMS();

        // Check if the optimal point leads to the provided residuals and cost
        double calculatedCost = 0.0;
        for (int i = 0; i < residuals.length; i++) {
            calculatedCost += residuals[i] * residuals[i];
        }
        calculatedCost = Math.sqrt(calculatedCost / residuals.length);

        assertArrayEquals(optimalParameters, result.getPoint(), 1e-6);
        assertEquals(cost, calculatedCost, 1e-6);
    }
}
