
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.junit.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertTrue;

public class TestCase {

    public final static ObjectMapper mapper = new ObjectMapper();

    @JsonSerialize(using = CustomSer.class)
    public static class Data {
        public String aStr;
    }

    public static class CustomSer extends StdSerializer<Data> {
        public CustomSer() {
            super(Data.class);
        }

        @Override
        public void serialize(Data value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            String attrStr = (String) provider.getAttribute("myAttr");
            gen.writeStartObject();
            gen.writeObjectField("aStr", "The value is: " + (attrStr == null ? "NULL" : attrStr));
            gen.writeEndObject();
        }
    }

    @Test
    public void testCustomSerializerAttributes() throws IOException {
        Data data = new Data();
        data.aStr = "Hello";

        Map<String, Object> mapTest = new HashMap<>();
        mapTest.put("data", data);

        ObjectNode treeTest = mapper.createObjectNode();
        treeTest.putPOJO("data", data);

        // Serialize the HashMap
        String mapOut = mapper.writer().withAttribute("myAttr", "Hello!").writeValueAsString(mapTest);
        System.out.println(mapOut);
        assertTrue("Map serialization should include the attribute.",
                mapOut.contains("The value is: Hello!"));

        // Serialize the ObjectNode
        String treeOut = mapper.writer().withAttribute("myAttr", "Hello!").writeValueAsString(treeTest);
        System.out.println(treeOut);
        assertTrue("ObjectNode serialization should include the attribute.",
                treeOut.contains("The value is: Hello!"));
    }
}

