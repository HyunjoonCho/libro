
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.Node;
import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerCrashTest {

    @Test
    public void testCompilerCrashWithNonStringProvide() {
        Compiler compiler = new Compiler();
        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");
        JSSourceFile input = JSSourceFile.fromCode("file.js", "goog.provide(mine.Spike);");

        try {
            Result result = compiler.compile(extern, input, Compiler.getOptionsForCompilationLevel(Compiler.CompilationLevel.SIMPLE_OPTIMIZATIONS));

            // Check if compilation resulted in errors.
            assertFalse("Expected compiler errors", result.success);

            Node scriptNode = compiler.getRoot().getLastChild().getFirstChild();
            assertNotNull("Expected scriptNode to be not null", scriptNode);

            // Ensure the error was due to a non-string argument to goog.provide
            assertTrue("Unexpected error node: " + scriptNode.toStringTree(),
                       scriptNode.toStringTree().contains("is not a string node"));
        } catch (Exception e) {
            fail("Compiler crash with exception: " + e.getMessage());
        }
    }
}
