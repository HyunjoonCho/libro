
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testMinificationWithoutStringEscaping() throws Exception {
        // Original JavaScript with non-ASCII characters
        String inputJs = "var hyphenationPattern = 'äöüÄÖÜß';";

        // Expected option to disable string escaping (hypothetical feature)
        CompilerOptions options = new CompilerOptions();
        // Assume there's a method like options.setStringEscaping(false); // Hypothetical

        // Create the compiler runner with the input and options
        CommandLineRunner runner = new CommandLineRunner(new String[]{
            "--js", "input.js", 
            "--compilation_level", "SIMPLE_OPTIMIZATIONS"
            // Assume there's a command-line argument like "--no_string_escaping"
        }) {
            @Override
            protected void setRunOptions(CompilerOptions options) {
                super.setRunOptions(options);
                // Hypothetical disabling of string escaping
                // options.setStringEscaping(false);
            }
        };

        // Capture the output
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(outputStream);

        // Simulate the command-line compilation
        runner.setExitCodeReceiver(exitCode -> {});
        runner.setOutputStream(ps);
        runner.run();

        String outputJs = outputStream.toString();

        // Assert that the minified file is smaller than the original
        assertTrue("Minified output should be smaller without string escaping", outputJs.length() < inputJs.length());
    }
}
