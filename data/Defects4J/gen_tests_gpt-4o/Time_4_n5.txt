
import org.joda.time.DateTimeFieldType;
import org.joda.time.Partial;
import org.junit.Test;
import static org.junit.Assert.*;

public class PartialTest {

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidPartialConstructionWithArray() {
        // This should throw an IllegalArgumentException due to duplicate types
        new Partial(
            new DateTimeFieldType[] { DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }, 
            new int[] { 1, 1 }
        );
    }

    @Test
    public void testInvalidPartialConstructionWithWithMethod() {
        // This should not allow valid Partial due to incompatible fields
        Partial partial1 = new Partial(DateTimeFieldType.clockhourOfDay(), 1).with(DateTimeFieldType.hourOfDay(), 1);
        Partial partial2 = new Partial(DateTimeFieldType.hourOfDay(), 1).with(DateTimeFieldType.clockhourOfDay(), 1);
        
        // The two partials should not be considered equal if they are invalid
        assertThrows(IllegalArgumentException.class, () -> partial1.isEqual(partial2));
    }
}
