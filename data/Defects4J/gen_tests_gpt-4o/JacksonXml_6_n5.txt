
import com.fasterxml.jackson.core.Base64Variants;
import com.fasterxml.jackson.dataformat.xml.XmlFactory;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.fail;

public class ToXmlGeneratorTest {

    @Test
    public void testWriteBinaryWithInputStreamNotSupported() {
        XmlFactory xmlFactory = new XmlFactory();
        XmlMapper xmlMapper = new XmlMapper(xmlFactory);
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        try {
            ToXmlGenerator toXmlGenerator = xmlFactory.createGenerator(outputStream);
            toXmlGenerator.writeStartObject();
            toXmlGenerator.writeFieldName("binaryData");
            
            // Here we attempt to use writeBinary with InputStream which is not implemented
            ByteArrayInputStream inputStream = new ByteArrayInputStream("test data".getBytes(StandardCharsets.UTF_8));
            try {
                toXmlGenerator.writeBinary(Base64Variants.MODIFIED_FOR_URL, inputStream, -1);
                fail("Expected UnsupportedOperationException");
            } catch (UnsupportedOperationException e) {
                // This is expected since this method is not implemented in ToXmlGenerator
                System.out.println("UnsupportedOperationException was thrown as expected.");
            }
            
            toXmlGenerator.writeEndObject();
            toXmlGenerator.close();
        } catch (Exception e) {
            fail("Test failed with unexpected exception: " + e.getMessage());
        }
    }
}
