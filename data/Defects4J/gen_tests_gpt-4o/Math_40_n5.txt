
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class BracketingNthOrderBrentSolverTest {

    @Test
    public void testAgingFeatureFails() {
        // Define a function with known problematic behavior for the solver
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                // The function is designed to be nearly flat, simulating small yA and large yB
                return (x - 12500) * (x - 12500.03);
            }
        };

        // Setup solver with reduced maximum iterations to trigger iteration count exceedance
        BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(1e-15, 1e-15, 1e-15, 5);

        // Provide the interval [12500, 12500.03] capturing the problematic behavior
        try {
            solver.solve(100, function, 12500.0, 12500.03);
        } catch (IllegalArgumentException e) {
            // Ensure the test fails because max iteration count is exceeded, showing the issue
            assertTrue(e.getMessage().contains("maximal count exceeded"));
        }
    }
}
