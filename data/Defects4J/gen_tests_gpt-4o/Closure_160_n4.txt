public void testJscompWarningCheckVars() {
    String[] commandCheckVars = {
        "java", "-jar", "compiler.jar", "--js", "test.js", "--jscomp_warning", "checkVars"
    };
    String[] commandUndefinedVars = {
        "java", "-jar", "compiler.jar", "--js", "test.js", "--jscomp_warning", "undefinedVars"
    };
    String[] commandVerbose = {
        "java", "-jar", "compiler.jar", "--js", "test.js", "--warning_level", "VERBOSE"
    };
    
    // Execute commands
    Process processCheckVars = Runtime.getRuntime().exec(commandCheckVars);
    BufferedReader stdInputCheckVars = new BufferedReader(new InputStreamReader(processCheckVars.getInputStream()));
    String checkVarsOutput = stdInputCheckVars.lines().collect(Collectors.joining("\n"));
    
    Process processUndefinedVars = Runtime.getRuntime().exec(commandUndefinedVars);
    BufferedReader stdInputUndefinedVars = new BufferedReader(new InputStreamReader(processUndefinedVars.getInputStream()));
    String undefinedVarsOutput = stdInputUndefinedVars.lines().collect(Collectors.joining("\n"));

    Process processVerbose = Runtime.getRuntime().exec(commandVerbose);
    BufferedReader stdInputVerbose = new BufferedReader(new InputStreamReader(processVerbose.getInputStream()));
    String verboseOutput = stdInputVerbose.lines().collect(Collectors.joining("\n"));

    // Check that `VERBOSE` produces different outputs compared to the specific flags
    assertNotEquals(verboseOutput, checkVarsOutput);
    assertNotEquals(verboseOutput, undefinedVarsOutput);

    // Verify `VERBOSE` output contains the expected error which is absent otherwise
    assertTrue(verboseOutput.contains("variable foo is undefined"));
    assertFalse(checkVarsOutput.contains("variable foo is undefined"));
    assertFalse(undefinedVarsOutput.contains("variable foo is undefined"));
}