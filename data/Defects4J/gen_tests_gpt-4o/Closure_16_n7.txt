
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import java.util.Collections;

public class JSCompilerTest {

    public static void main(String[] args) {
        String code = ""
                + "goog.provide('a.b.c');\n"
                + "\n"
                + "goog.scope(function() {\n"
                + "  var b = a.b;\n"
                + "  var c = b.c;\n"
                + "\n"
                + "  /** @typedef {string} */\n"
                + "  c.MyType;\n"
                + "\n"
                + "  /** @param {c.MyType} x The variable. */\n"
                + "  c.myFunc = function(x) {};\n"
                + "});\n";

        // Create a Compiler instance
        Compiler compiler = new Compiler();
        
        // Set CompilerOptions
        CompilerOptions options = new CompilerOptions();
        options.setCheckTypes(true); // Enable type checking

        // Run the compiler
        Result result = compiler.compile(Collections.emptyList(), 
                                         Collections.singletonList(SourceFile.fromCode("testcode.js", code)), 
                                         options);

        // Output any errors
        if (result.errors.length > 0) {
            System.out.println("Compilation errors:");
            for (com.google.javascript.jscomp.JSError error : result.errors) {
                System.out.println(error.toString());
            }
        } else {
            System.out.println("No compilation errors.");
        }
    }
}
