
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.*;

public class CompilerTest {

    @Test
    public void testJarFileVsWebUIOutput() throws IOException, InterruptedException {
        // Assume this is the JavaScript content to compile
        String inputJs = "var foreignObject = gfx.parentNode.parentNode;\n" +
                         "var parentContainer = foreignObject.parentNode.parentNode;";

        // Simulate output from Web UI (expected output based on bug report)
        String expectedWebUIOutput = "if(b){if(a=b.parentNode.parentNode,b=a.parentNode.parentNode,null!==b)";

        // Get output from the jar file compilation
        String jarFileOutput = compileWithJar(inputJs);

        // Simulate compilation via method (replace with actual method if available)
        String simulatedWebUIOutput = simulateWebUICompilation(inputJs);

        // Assert that the jar file output does not match the expected Web UI output
        assertNotEquals("Jar file output should not match expected Web UI output", expectedWebUIOutput, jarFileOutput);

        // Assert that the simulated Web UI output matches the expected Web UI output
        assertEquals("Simulated Web UI output should match expected Web UI output", expectedWebUIOutput, simulatedWebUIOutput);
    }

    private String compileWithJar(String inputJs) throws IOException, InterruptedException {
        // Create a temporary JavaScript file
        File tempFile = File.createTempFile("test", ".js");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
            writer.write(inputJs);
        }

        // Compile using the command line jar
        ProcessBuilder processBuilder = new ProcessBuilder("java", "-jar", "compiler.jar", "--js", tempFile.getAbsolutePath());
        Process process = processBuilder.start();

        // Capture the output of the process
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        StringBuilder output = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line);
        }

        // Wait for the process to finish
        process.waitFor();

        // Delete the temporary file
        tempFile.delete();

        return output.toString();
    }

    private String simulateWebUICompilation(String inputJs) {
        // Simulate the expected output from web UI (assumed for testing purposes)
        return "if(b){if(a=b.parentNode.parentNode,b=a.parentNode.parentNode,null!==b)";
    }
}
