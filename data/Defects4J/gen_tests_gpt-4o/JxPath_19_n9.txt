
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.xml.DOMParser;
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class JXPathNamespaceTest {

    @Test
    public void testIteratePointersWithMultiplePrefixes() throws ParserConfigurationException, IOException, SAXException {
        String xml = "<a:doc xmlns:a=\"ns\">" +
                     "  <a:elem />" +
                     "  <b:elem xmlns:b=\"ns\" />" +
                     "</a:doc>";

        // Parse the XML document
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(new ByteArrayInputStream(xml.getBytes()));

        // Create a JXPathContext for the XML document
        JXPathContext context = JXPathContext.newContext(doc);

        // Use iteratePointers to iterate over elements in the namespace
        Iterable<Pointer> pointers = () -> context.iteratePointers("//ns:elem").iterator();

        // Collect retrieved elements
        List<String> elements = new ArrayList<>();
        for (Pointer pointer : pointers) {
            elements.add(pointer.asPath());
        }

        // Verify both elements are returned
        assertEquals(2, elements.size());
    }
}
