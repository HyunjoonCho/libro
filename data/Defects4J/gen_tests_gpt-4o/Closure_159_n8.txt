
import static org.junit.Assert.assertTrue;
import org.junit.Test;
import java.io.File;
import java.nio.file.Files;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;

public class ClosureCompilerTest {
    
    @Test
    public void testClosureCompilerFunctionRenaming() throws Exception {
        // JavaScript code to be compiled
        String jsCode = """
            function preload_check_all() {
                // Some functionality
                return true;
            }
            
            // Some unrelated code....
            
            // Call the function
            preload_check_all();
            """;
        
        // Write the JavaScript code to a temporary file
        File tempFile = File.createTempFile("test", ".js");
        Files.write(tempFile.toPath(), jsCode.getBytes());
        
        // Run Closure Compiler with SIMPLE optimization
        String[] args = {
            "--compilation_level", "SIMPLE",
            "--js", tempFile.getAbsolutePath(),
            "--js_output_file", "out.js"
        };

        // CommandLineRunner will run the compiler
        CommandLineRunner runner = new CommandLineRunner(args);
        runner.run();
        
        // Read the compiled output
        String compiledCode = Files.readString(new File("out.js").toPath());

        // Check if function name in invocation is properly renamed
        assertTrue("The function call should be renamed consistently",
            compiledCode.contains("a()") && !compiledCode.contains("preload_check_all"));
    }
}
