
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.linear.PointValuePair;
import org.apache.commons.math3.optim.OptimizationData;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testOptimize() {
        // Objective Function: Maximize 3x + 2y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3, 2 }, 0);

        // Constraints:
        // 2x + y <= 20
        // x + 2y <= 20
        // x >= 0
        // y >= 0
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 2, 1 }, Relationship.LEQ, 20));
        constraints.add(new LinearConstraint(new double[] { 1, 2 }, Relationship.LEQ, 20));

        // Create and run the solver
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(
                new MaxIter(100),
                f,
                new LinearConstraintSet(constraints),
                GoalType.MAXIMIZE,
                new NonNegativeConstraint(true));

        // The expected optimal values for x and y are 8 and 6 respectively,
        // which gives the max value of 3*8 + 2*6 = 24 + 12 = 36
        double[] point = solution.getPoint();
        
        assertEquals(8.0, point[0], 1e-5);
        assertEquals(6.0, point[1], 1e-5);
        assertEquals(36.0, f.value(point), 1e-5);
    }
}
