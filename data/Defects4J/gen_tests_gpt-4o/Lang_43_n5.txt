
import org.apache.commons.text.ExtendedMessageFormat;
import org.apache.commons.text.format.FormatFactory;

import java.text.Format;
import java.util.HashMap;
import java.util.Map;

public class ExtendedMessageFormatTest {
    
    private static class DummyFormatFactory implements FormatFactory {
        public Format getFormat(String name, String args, Map<String, ? extends FormatFactory> registry) {
            return new DummyFormat();
        }
    }

    private static class DummyFormat extends Format {
        @Override
        public StringBuffer format(Object obj, StringBuffer toAppendTo, java.text.FieldPosition pos) {
            if (obj instanceof String) {
                toAppendTo.append((String) obj);
            }
            return toAppendTo;
        }

        @Override
        public Object parseObject(String source, java.text.ParsePosition pos) {
            return null;
        }
    }

    private static Map<String, FormatFactory> formatRegistry = new HashMap<>();

    static {
        formatRegistry.put("dummy", new DummyFormatFactory());
    }

    public static void main(String[] args) {
        testOutOfMemoryWithQuotes();
    }

    public static void testOutOfMemoryWithQuotes() {
        ExtendedMessageFormat mf = new ExtendedMessageFormat("it''s a {dummy} 'test'!", formatRegistry);
        String formattedPattern = mf.format(new String[]{"great"});
        System.out.println(formattedPattern);
    }
}
