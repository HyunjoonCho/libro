
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.util.BasicNodeSet;
import org.apache.commons.jxpath.ext.ExtensionFunction;
import org.apache.commons.jxpath.ext.FunctionLibrary;
import org.apache.commons.jxpath.ext.functions.MethodFunction;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.model.dom.DOMNodePointer;
import org.junit.Assert;
import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import java.util.ArrayList;
import java.util.List;

public class NodeSetHandlingTest {

    public static NodeSet observations(Object context) {
        NodePointer contextNodePointer = (NodePointer) ((Pointer) context).clone();
        List<NodePointer> ptrs = extractObservations(contextNodePointer, new ArrayList<>());
        BasicNodeSet result = new BasicNodeSet();
        for (NodePointer ptr : ptrs) {
            result.add(ptr);
        }
        return result;
    }

    private static List<NodePointer> extractObservations(NodePointer contextNodePointer, List<NodePointer> nodes) {
        // Mock implementation: Always return a single node for simplicity
        nodes.add(contextNodePointer);
        return nodes;
    }

    @Test
    public void testNodeSetHandling() throws ParserConfigurationException {
        // Create a simple XML document as the context
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.newDocument();
        Element root = doc.createElement("root");
        doc.appendChild(root);

        // Set up JXPathContext with custom function
        JXPathContext context = JXPathContext.newContext(doc);
        FunctionLibrary library = new FunctionLibrary();
        library.addFunctions(new ExtensionFunction() {
            @Override
            public Object invoke(Object[] objects, JXPathContext jxPathContext) {
                return observations(objects[0]);
            }
        }, "ems");
        
        context.setFunctions(library);

        // Execute XPath query
        List<?> nodes = context.selectNodes("ems:observations()");
        
        // We expect to receive individual nodes, not the NodeSet itself
        Assert.assertTrue("Returned list should contain pointers only", nodes.stream().allMatch(Pointer.class::isInstance));
        Assert.assertTrue("Expected one node in the NodeSet", nodes.size() == 1);
    }
}
