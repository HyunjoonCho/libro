
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class JsonParserSequenceTest {

    @Test
    public void testJsonParserSequenceTokenSkipping() throws IOException {
        JsonFactory factory = new JsonFactory();

        // Create first parser with a single JSON token
        JsonParser parser1 = factory.createParser("{\"key1\":\"value1\"}");
        parser1.nextToken(); // Start object
        parser1.nextToken(); // Move to field name "key1"

        // Create second parser with a second JSON object
        JsonParser parser2 = factory.createParser("{\"key2\":\"value2\"}");
        parser2.nextToken(); // Start object
        parser2.nextToken(); // Move to field name "key2"

        // Combine the parsers into a sequence
        JsonParserSequence sequence = JsonParserSequence.createFlattened(false, parser1, parser2);

        // Get tokens from the sequence
        JsonToken token1 = sequence.nextToken(); // Should be field name "key1"
        JsonToken token2 = sequence.nextToken(); // Should be value "value1"
        JsonToken token3 = sequence.nextToken(); // Should be field name "key2"
        JsonToken token4 = sequence.nextToken(); // Should be value "value2"

        assertNotNull(token1, "Token 1 should not be null");
        assertEquals(JsonToken.FIELD_NAME, token1);
        
        assertNotNull(token2, "Token 2 should not be null");
        assertEquals(JsonToken.VALUE_STRING, token2);
        
        assertNotNull(token3, "Token 3 should not be null");
        assertEquals(JsonToken.FIELD_NAME, token3);

        assertNotNull(token4, "Token 4 should not be null");
        assertEquals(JsonToken.VALUE_STRING, token4);
    }
}
