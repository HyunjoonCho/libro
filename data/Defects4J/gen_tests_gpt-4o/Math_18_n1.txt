
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.Sigma;
import org.apache.commons.math3.optim.InitialGuess;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CMAESOptimizerTest {
    @Test
    public void testCMAESOptimizerBoundsResolution() {
        CMAESOptimizer optimizer = new CMAESOptimizer(
                1000, 
                1e-9, 
                true, 
                0, 
                0, 
                new SimplePointChecker<>(1e-9, 1e-9), 
                true, 
                null
        );

        // Define a simple quadratic function
        ObjectiveFunction objectiveFunction = new ObjectiveFunction(point -> {
            double x = point[0];
            return (x - 0.75) * (x - 0.75); // Minimum at x = 0.75
        });

        // Set the initial guess, bounds and standard deviation
        InitialGuess initialGuess = new InitialGuess(new double[] { 0.5 });
        SimpleBounds bounds = new SimpleBounds(new double[] { 0.0 }, new double[] { 1.0 });
        Sigma sigma = new Sigma(new double[] { 0.1 });

        // Optimize
        double[] result = optimizer.optimize(
                new MaxEval(10000),
                objectiveFunction,
                GoalType.MINIMIZE,
                bounds,
                initialGuess,
                sigma
        ).getPoint();

        // Check if the optimizer correctly finds the minimum within bounds
        assertEquals(0.75, result[0], 0.01);  // Allowing for a reasonable tolerance
    }
}
