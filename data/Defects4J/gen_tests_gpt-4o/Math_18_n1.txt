public void testCMAESOptimizerBoundsPrecision() {
    double[] lowerBound = {0.0};
    double[] upperBound = {10.0};
    MultivariateFunction objectiveFunction = point -> {
        double x = point[0];
        return (x - 5.0) * (x - 5.0); // Simple parabola with minimum at x = 5
    };

    CMAESOptimizer optimizer = new CMAESOptimizer(10000, 1e-10, true, 10, 0, new Random(), false, null);
    PointValuePair result = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(objectiveFunction),
        GoalType.MINIMIZE,
        new CMAESOptimizer.PopulationSize(10),
        SimpleBounds.unbounded(1),
        SimpleBounds.of(lowerBound, upperBound),
        new InitialGuess(new double[] {0.01}) // Starting near lower bound for finer resolution
    );

    double upperBoundValue = result.getPoint()[0];
    
    // Assert that optimization has reached near the expected minimum value (i.e., x ~= 5)
    // Verify that optimizer has resolution issues when starting near upper bound
    assertTrue(Math.abs(upperBoundValue - 5.0) < 1.0, "The optimizer did not converge closely to the expected minimum when starting near the lower bound.");
}