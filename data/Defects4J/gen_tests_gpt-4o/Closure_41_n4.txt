script
// ==ClosureCompiler==
// @compilation_level ADVANCED_OPTIMIZATIONS
// @output_file_name default.js
// @use_closure_library true
// ==/ClosureCompiler==

goog.provide('Foo');
goog.provide('Bar');

/** @constructor */
Foo = function() {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
Foo.prototype.add = function(a, b) {
  return a + b;
};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
Foo.prototype.sub = goog.abstractMethod;

/**
 * @constructor
 * @extends {Foo}
 */
Bar = function() {
  goog.base(this);
};
goog.inherits(Bar, Foo);

/** @inheritDoc */
Bar.prototype.add = function(one) {
  return one; // Different signature
};

/** @inheritDoc */
Bar.prototype.sub = function(one) {
  return one; // Different signature
};

function testAdvancedModeOverrides() {
  // This should trigger a warning/error regarding the method signatures
  var foo = /** @type {Foo} */ (new Bar());
  // This call should raise JSC_WRONG_ARGUMENT_COUNT in advanced mode
  alert(foo.add(3, 4));

  var bar = new Bar();
  // This call should raise JSC_WRONG_ARGUMENT_COUNT in advanced mode
  alert(bar.add(3, 4));
}

// Execute the test function to trigger compiler checks
testAdvancedModeOverrides();
