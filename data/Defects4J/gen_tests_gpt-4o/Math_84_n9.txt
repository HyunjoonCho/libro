public void testMultiDirectionalCorrectStart() {
    MultivariateFunction function = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            // Assume the optimal solution is when all elements are 0
            return Arrays.stream(point).map(x -> x * x).sum();
        }
    };
    
    MultiDirectional multiDirectional = new MultiDirectional();
    double[] startPoint = {0.0, 0.0, 0.0}; // Correct solution is all zeros
    
    // Using a SimpleBounds object with arbitrary data for execution purposes
    // This should generally match your specific use case
    SimpleBounds bounds = new SimpleBounds(new double[] {-1.0, -1.0, -1.0}, new double[] {1.0, 1.0, 1.0});
    
    PointValuePair result = multiDirectional.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(function),
        GoalType.MINIMIZE,
        SimpleBounds.unbounded(startPoint.length),
        new InitialGuess(startPoint)
    );

    // Verify that we reach the correct solution
    assertArrayEquals(startPoint, result.getPoint(), 1e-9);
}