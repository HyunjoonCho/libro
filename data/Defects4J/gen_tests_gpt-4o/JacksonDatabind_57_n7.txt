
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.Test;

import java.io.IOException;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class ObjectReaderTest {

    public static class TestData {
        public int id;
        public String name;
    }

    @Test
    public void testReadValuesWithOffsetAndLength() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        ObjectReader reader = mapper.readerFor(TestData.class);

        // JSON data
        byte[] jsonData = new byte[] {
            '{', '"', 'i', 'd', '"', ':', '1', ',', '"', 'n', 'a', 'm', 'e', '"', ':', '"', 'T', 'e', 's', 't', '"', '}', 
            '{', '"', 'i', 'd', '"', ':', '2', ',', '"', 'n', 'a', 'm', 'e', '"', ':', '"', 'S', 'a', 'm', 'p', 'l', 'e', '"', '}'
        };

        // Offset and length to read second JSON object only
        int offset = 24; // Start of second JSON object in the array
        int length = 24; // Length of the second JSON object

        // Read values using offset and length
        ObjectReader readSequence = reader.withoutAttribute(null).forType(TestData.class);
        List<TestData> result = readSequence.readValuesAs(new java.io.ByteArrayInputStream(jsonData, offset, length)).readAll();

        // Verify that the readValues respects offset and length
        assertEquals(1, result.size());
        assertEquals(2, result.get(0).id);
        assertEquals("Sample", result.get(0).name);
    }
}
