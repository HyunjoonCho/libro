
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;

public class MemoryLeakTest {
    public static void main(String[] args) throws InterruptedException {
        // Simulate multiple webapp reloads
        for (int i = 0; i < 10; i++) {
            simulateWebAppReload();
            System.gc();
            Thread.sleep(1000); // Wait for a second to let the GC do its thing
        }

        // In a true container environment, at this point we would check the heap to see if
        // there are lingering instances of ToStringStyle causing memory leak.
    }

    public static void simulateWebAppReload() {
        ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();

        try {
            // Create a new class loader for the "webapp"
            ClassLoader newClassLoader = new CustomClassLoader();
            Thread.currentThread().setContextClassLoader(newClassLoader);

            // Trigger loading of the ToStringStyle class using the new class loader
            ToStringBuilder.reflectionToString(new Object(), ToStringStyle.DEFAULT_STYLE); 

            // Here, in a real scenario, the webapp would be unloaded and the ClassLoader would be collected
        } finally {
            // Reset to the original class loader
            Thread.currentThread().setContextClassLoader(originalClassLoader);
        }
    }

    static class CustomClassLoader extends ClassLoader {
        // A simple custom class loader to simulate webapp class loading.
    }
}
