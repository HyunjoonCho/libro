public void testMemoryLeakInToStringStyle() {
    // Create a ToStringStyle which uses ThreadLocal internally
    ToStringStyle style = ToStringStyle.DEFAULT_STYLE;
    
    // Use the style in a sample object to trigger ThreadLocal assignment
    String sample = new ToStringBuilder(new Object(), style).toString();

    // Force a System GC to emulate reload scenario in container environments
    System.gc();

    // This is a simplistic check; in a real container test, we'd check if the ThreadLocal cleared
    assertNull(getThreadLocalInstance(ToStringStyle.class, "REGISTRY"));
}

private Object getThreadLocalInstance(Class<?> clazz, String fieldName) {
    try {
        Field field = clazz.getDeclaredField(fieldName);
        field.setAccessible(true);
        ThreadLocal<?> threadLocal = (ThreadLocal<?>) field.get(null);
        return threadLocal != null ? threadLocal.get() : null;
    } catch (Exception e) {
        fail("Reflection access failed: " + e.getMessage());
        return null;
    }
}