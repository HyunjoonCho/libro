
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.junit.Test;

import static org.junit.Assert.*;

public class PosixParserTest {

    @Test
    public void testPosixParserUnrecognizedToken() {
        Options options = new Options();
        options.addOption("a", false, "Option a");
        
        String[] args = new String[]{"-z", "-a", "foo"};
        DefaultParser posixParser = new DefaultParser();
        
        try {
            CommandLine cmd = posixParser.parse(options, args, true);
            
            // Assert that option 'a' is recognized
            assertTrue(cmd.hasOption("a"));
            
            // Assert that the argument for 'a' is correctly parsed
            String[] remainingArgs = cmd.getArgs();
            assertEquals(1, remainingArgs.length);
            assertEquals("foo", remainingArgs[0]);

            // Here, expect to recognize "-z" as an unrecognized option causing a parsing error
            // or to be available in the remainingArgs if parsed correctly.
            // However, due to the bug, "-z" is ignored.
            // Check to ensure "-z" is wrongly ignored in the current failing behavior.
            assertEquals(0, cmd.getOptions().length); // Here we expect no recognized options
            assertEquals(2, remainingArgs.length); // Should have been ["-z", "foo"]
            assertEquals("-z", remainingArgs[0]);
            assertEquals("foo", remainingArgs[1]);
            
        } catch (ParseException e) {
            fail("Parsing failed: " + e.getMessage());
        }
    }
}
