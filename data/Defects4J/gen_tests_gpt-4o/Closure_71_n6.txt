
import static org.junit.Assert.fail;
import static com.google.javascript.jscomp.CompilerTypeTestCase.testExterns;
import com.google.javascript.jscomp.CompilerTestCase;
import com.google.javascript.jscomp.CompilerOptions;

public class VisibilityCheckTest extends CompilerTestCase {
    
    @Override
    protected CompilerOptions getOptions() {
        CompilerOptions options = new CompilerOptions();
        // Enable visibility error checking
        options.setChecksOnly(true);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY, com.google.javascript.jscomp.CheckLevel.ERROR);
        return options;
    }

    public void testPrivatePropertyRedeclaration() {
        String code = ""
            + "/** @constructor */\n"
            + "function Foo() { /** @private */ this.x_ = 3; }\n"
            + "/** @constructor \n"
            + " * @extends {Foo} */\n"
            + "function SubFoo() { /** @private */ this.x_ = 3; }\n";

        // Expecting a visibility error for redeclaring a private property in a subclass
        testExterns("", code, null, null, null)
            .expectErrors("Visibility violation error expected");
    }
    
    // Run the test
    public static void main(String[] args) {
        VisibilityCheckTest test = new VisibilityCheckTest();
        test.testPrivatePropertyRedeclaration();
    }
}
