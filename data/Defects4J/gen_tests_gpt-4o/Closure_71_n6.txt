public void testPrivatePropertyRedeclarationWarning() {
    String foo = "/** @constructor */ function Foo() { /** @private */ this.x_ = 3; }";
    String subFoo = "/** @constructor \n * @extends {Foo} */ function SubFoo() { /** @private */ this.x_ = 3; }";
    
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    compiler.initOptions(options);
    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);

    JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");
    JSSourceFile inputFoo = JSSourceFile.fromCode("Foo.js", foo);
    JSSourceFile inputSubFoo = JSSourceFile.fromCode("SubFoo.js", subFoo);

    Result result = compiler.compile(extern, new JSSourceFile[]{inputFoo, inputSubFoo}, options);

    assertTrue("Expected a visibility error due to redeclaration, but none was found", result.getErrors().length > 0);
}