
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class MyExceptionTest {

    @JsonIgnoreProperties("cause")
    public static class MyException extends RuntimeException {
        private String message;

        public MyException() {
        }

        public MyException(String message) {
            this.message = message;
        }

        @Override
        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }

    @Test
    public void testDeserializeMyException() {
        ObjectMapper objectMapper = new ObjectMapper();

        String json = "{\"message\":\"Test exception message\"}";

        try {
            MyException e = objectMapper.readValue(json, MyException.class);
            assertEquals("Test exception message", e.getMessage());
        } catch (Exception e) {
            // Simulate restricted environment error check
            if (e.getCause() instanceof IllegalAccessException) {
                System.out.println("Reflection is not allowed on private fields in this environment: " + e.getMessage());
            }
        }
    }
}
