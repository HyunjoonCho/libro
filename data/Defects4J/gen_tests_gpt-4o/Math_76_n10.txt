
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import org.junit.Test;
import static org.junit.Assert.*;

public class SVDBugTest {

    @Test
    public void testNaNSingularValue() {
        // Creating a rank-deficient matrix
        double[][] data = {
            {1.0, 2.0, 3.0},
            {2.0, 3.0, 4.0},
            {3.0, 5.0, 7.0}
        };
        RealMatrix matrix = new Array2DRowRealMatrix(data);
        
        // Performing Singular Value Decomposition
        SingularValueDecomposition svd = new SingularValueDecomposition(matrix);
        
        // Extracting singular values
        double[] singularValues = svd.getSingularValues();
        
        // Check if any of the singular values are NaN
        for (double singularValue : singularValues) {
            assertFalse("Singular value should not be NaN", Double.isNaN(singularValue));
        }
        
        // Optionally print the singular values for manual inspection
        System.out.println("Singular Values: ");
        for (double singularValue : singularValues) {
            System.out.println(singularValue);
        }
    }
}
