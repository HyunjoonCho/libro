
import static org.junit.Assert.assertEquals;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Before;
import org.junit.Test;
import java.util.TimeZone;

public class DateTimeTest {

    @Before
    public void setUp() {
        // Set default time zones to ensure consistent behavior across different environments.
        TimeZone.setDefault(TimeZone.getTimeZone("America/Sao_Paulo"));
        DateTimeZone.setDefault(DateTimeZone.forID("America/Sao_Paulo"));
    }

    @Test
    public void testWithLaterOffsetAtOverlap() {
        DateTime dtch = new DateTime(2012, 2, 25, 5, 5, 5, 5).millisOfDay().withMaximumValue();
        System.out.println(dtch); // Expected: 2012-02-25T23:59:59.999-02:00

        dtch = dtch.plus(60001);
        System.out.println(dtch); // Expected: 2012-02-25T23:01:00.000-03:00

        dtch = dtch.withEarlierOffsetAtOverlap();
        System.out.println(dtch); // Expected: 2012-02-25T23:01:00.000-02:00

        dtch = dtch.withLaterOffsetAtOverlap();
        System.out.println(dtch); // Expected: 2012-02-25T23:01:00.000-03:00

        // Assert the expected time zone offset after applying withLaterOffsetAtOverlap()
        assertEquals("-03:00", dtch.getZone().toTimeZone().getDisplayName(false, TimeZone.SHORT));
    }
}
