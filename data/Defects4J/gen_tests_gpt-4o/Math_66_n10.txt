
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.SimpleUnivariateValueChecker;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizer() {
        // Define a simple quadratic function
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 3) * (x - 3); // Minimum at x = 3
            }
        };

        // Create a Brent optimizer with specified tolerance
        BrentOptimizer brentOptimizer = new BrentOptimizer(1e-10, 1e-14, new SimpleUnivariateValueChecker(1e-10, 1e-10));
        
        // Define the interval for the search
        SearchInterval searchInterval = new SearchInterval(-10, 10);

        // Optimize the function
        UnivariatePointValuePair result = brentOptimizer.optimize(
                new UnivariateObjectiveFunction(function),
                searchInterval,
                org.apache.commons.math3.optim.univariate.GoalType.MINIMIZE);

        // Assert the minimizer is close to the expected value
        assertEquals(3.0, result.getPoint(), 1e-5);
    }
}
