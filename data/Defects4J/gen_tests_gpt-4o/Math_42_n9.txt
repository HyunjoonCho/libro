
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexSolver;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class SimplexSolverTest {

    @Test
    public void testRestrictNonNegative() {
        // Objective function: 1 * x + 1 * y + 0
        LinearObjectiveFunction function = new LinearObjectiveFunction(new double[]{1, 1}, 0);

        // Constraints: 1 * x + 0 * y = 1
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0}, Relationship.EQ, 1));

        SimplexSolver solver = new SimplexSolver();

        try {
            // Optimize: minimize the function with restrictToNonnegative flag set to true
            RealPointValuePair solution = solver.optimize(function, constraints, GoalType.MINIMIZE, true);

            double x = solution.getPoint()[0];
            double y = solution.getPoint()[1];
            
            // Assert x is correctly non-negative and result is correct
            assertTrue("x should be non-negative", x >= 0);
            // Assert y is non-negative given the constraint
            assertTrue("y should be non-negative", y >= 0);

        } catch (Exception e) {
            e.printStackTrace();
            fail("Optimization failed due to an exception.");
        }
    }
}
