
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicReference;

class MyBean {
    private AtomicReference<AtomicReference<Integer>> refRef;

    public AtomicReference<AtomicReference<Integer>> getRefRef() {
        return refRef;
    }

    public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {
        this.refRef = refRef;
    }
}

public class DeserializeNullTest {

    @Test
    void testAtomicReferenceDeserialization() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectReader objectReader = objectMapper.readerFor(MyBean.class);

        // Test case with a valid integer value
        MyBean intRef = objectReader.readValue("{\"refRef\": 2 }");
        Assertions.assertNotNull(intRef.getRefRef(), "The outer AtomicReference should not be null");
        Assertions.assertNotNull(intRef.getRefRef().get(), "The inner AtomicReference should not be null");
        Assertions.assertEquals(new Integer(2), intRef.getRefRef().get().get(), "The value inside should be 2");

        // Test case with a null value
        MyBean nullRef = objectReader.readValue("{\"refRef\": null }");
        Assertions.assertNotNull(nullRef.getRefRef(), "The outer AtomicReference should not be null");
        Assertions.assertNotNull(nullRef.getRefRef().get(), "The inner AtomicReference should still be initialized");
        Assertions.assertNull(nullRef.getRefRef().get().get(), "The value inside the inner AtomicReference should be null");
    }
}
