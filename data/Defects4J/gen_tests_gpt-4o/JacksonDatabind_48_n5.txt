public void testBasicClassIntrospectorRespectsAutoDetect() {
    class TCls {
        @JsonProperty("groupname")
        private String groupname;

        public void setName(String str) {
            this.groupname = str;
        }

        public String getName() {
            return groupname;
        }
    }

    ObjectMapper om = new ObjectMapper();
    om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS, false);
    om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS, false);
    om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS, false);
    om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS, false);
    om.configure(com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS, false);
    om.configure(com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);
    om.configure(com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS, false);
    om.configure(com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS, true);

    JavaType javaType = om.getTypeFactory().constructType(TCls.class);

    BasicClassIntrospector introspector = new BasicClassIntrospector();
    BasicBeanDescription bdesc = introspector.forSerialization(om.getSerializationConfig(), javaType, null);
    List<BeanPropertyDefinition> bprops = bdesc.findProperties();

    assertEquals(1, bprops.size(), "Found property count " + bprops.size() + ", there should only be one??");
    assertEquals("groupname", bprops.get(0).getName());
    assertEquals("groupname", bprops.get(0).getInternalName());
}