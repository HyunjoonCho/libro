
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

public class JsonDeserializationTest {

    public static class MyValue {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) {
            this.object = object;
        }

        @JsonValue
        public ObjectNode getObject() {
            return object;
        }
    }

    @Test(expected = com.fasterxml.jackson.databind.JsonMappingException.class)
    public void testDeserializationOfEmptyObjectToMyValue() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode emptyObjectNode = new ObjectNode(JsonNodeFactory.instance);

        // Serialize the empty ObjectNode to JSON
        String json = objectMapper.writeValueAsString(emptyObjectNode);

        // Attempt to deserialize the JSON into MyValue, expecting an exception
        MyValue myValue = objectMapper.readValue(json, MyValue.class);
    }
}
