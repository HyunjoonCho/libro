
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

public class DeserializationTest {

    public static class MyValue {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) {
            this.object = object;
        }

        @JsonValue
        public ObjectNode getObject() {
            return object;
        }
    }

    @Test
    public void testDeserializationEmptyObjectNode() {
        try {
            ObjectMapper om = new ObjectMapper();
            ObjectNode object = new ObjectNode(JsonNodeFactory.instance);

            // Serializing an empty ObjectNode to JSON
            String json = om.writeValueAsString(object);
            System.out.println("json: " + json);

            // Deserializing directly to ObjectNode
            ObjectNode de1 = om.readValue(json, ObjectNode.class);
            System.out.println("Deserialized to ObjectNode: " + de1);

            // Attempting to deserialize to MyValue, which fails
            MyValue de2 = om.readValue(json, MyValue.class);
            System.out.println("Deserialized to MyValue: " + de2);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
