
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

public class TarArchiveInputStreamTest {

    @Test(expected = NegativeArraySizeException.class)
    public void testParsingPaxHeadersFailsWithNegativeArraySizeException() throws IOException {
        // Create a sample PAX header with an empty line at the end
        String paxHeader = "25 path=example/file.txt\n\n"; // PAX header followed by a newline

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(paxHeader.getBytes());
        TarArchiveInputStream tarArchiveInputStream = new TarArchiveInputStream(byteArrayInputStream);
        
        // Attempt to get the next TarArchiveEntry, which will invoke `parsePaxHeaders`.
        // This should cause the NegativeArraySizeException based on the bug report.
        TarArchiveEntry entry = tarArchiveInputStream.getNextTarEntry();

        // Although we expect an exception before the following code could execute,
        // this ensures that if implementation changes, the test is correctly aligned.
        if (entry != null) {
            tarArchiveInputStream.closeEntry();
        }
        
        tarArchiveInputStream.close();
    }
}
