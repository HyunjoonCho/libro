
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;

// Simulating Event class
class Event {
    private String name;

    public Event(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

// Simulating EventProcessor class
class EventProcessor {
    private boolean stateReset = false;
    private List<String> eventsProcessed = new ArrayList<>();

    public void handleEvent(Event event) {
        if (event.getName().equals("Event1")) {
            // Resetting state after handling the first event
            stateReset = true;
        } else if (stateReset) {
            eventsProcessed.add(event.getName());
        } else {
            throw new IllegalStateException("State was not properly reset.");
        }
    }

    public List<String> getEventsProcessed() {
        return eventsProcessed;
    }
}

public class EventHandlingTest {

    @org.junit.Test
    public void testIncompleteReinitializationWithEvents() {
        EventProcessor processor = new EventProcessor();

        Event event1 = new Event("Event1");
        Event event2 = new Event("Event2");

        processor.handleEvent(event1); // This should reset the state
        processor.handleEvent(event2); // This should be processed after reset

        // We expect "Event2" to be processed because the state should have been reset
        assertEquals(1, processor.getEventsProcessed().size());
        assertEquals("Event2", processor.getEventsProcessed().get(0));
    }
}
