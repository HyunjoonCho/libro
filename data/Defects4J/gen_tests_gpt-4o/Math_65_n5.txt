
import org.apache.commons.math3.fitting.leastsquares.AbstractLeastSquaresOptimizer;
import org.junit.Test;
import static org.junit.Assert.*;

public class AbstractLeastSquaresTest {

    @Test
    public void testChiSquareWeightHandling() {
        // Create a mock subclass of AbstractLeastSquaresOptimizer for testing
        AbstractLeastSquaresOptimizer optimizer = new MockLeastSquaresOptimizer();

        // Initialize the optimizer with some weights and observed data
        double[] weights = {1.0, 2.0};
        double[] observed = {1.0, 2.0};
        double[] residuals = {0.1, 0.2};

        optimizer.setWeights(weights);
        optimizer.setResiduals(residuals);

        // Calculate Chi-Square
        double chiSquare = optimizer.getChiSquare();

        // Calculate expected Chi-Square value with correct weight application
        double expectedChiSquare = 0;
        for (int i = 0; i < weights.length; i++) {
            expectedChiSquare += weights[i] * Math.pow(residuals[i], 2);
        }

        // Assert if the Chi-Square calculation is correct
        assertEquals(expectedChiSquare, chiSquare, 1e-9);
    }
    
    // Mock class that extends AbstractLeastSquaresOptimizer for testing purposes
    private static class MockLeastSquaresOptimizer extends AbstractLeastSquaresOptimizer {
        
        private double[] weights = new double[0];
        private double[] residuals = new double[0];

        public void setWeights(double[] weights) {
            this.weights = weights;
        }

        public void setResiduals(double[] residuals) {
            this.residuals = residuals;
        }

        @Override
        public double[] getResiduals() {
            return residuals;
        }

        @Override
        public double getChiSquare() {
            double chiSquare = 0;
            for (int i = 0; i < weights.length; i++) {
                chiSquare += weights[i] / (residuals[i] * residuals[i]);
            }
            return chiSquare;
        }
    }
}
