
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.JsonNodeFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

import static org.junit.Assert.*;

public class DeserializationTest {

    public static class MyValue {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) {
            this.object = object;
        }

        @JsonValue
        public ObjectNode getObject() {
            return object;
        }
    }

    @Test
    public void testDeserializationToMyValue() throws Exception {
        ObjectMapper om = new ObjectMapper();

        // Create an empty ObjectNode
        ObjectNode object = new ObjectNode(JsonNodeFactory.instance);

        // Serialize to JSON
        String json = om.writeValueAsString(object);
        assertEquals("{}", json);

        // Deserialize directly to ObjectNode - this should work
        ObjectNode de1 = om.readValue(json, ObjectNode.class);
        assertNotNull(de1);
        assertEquals(object, de1);

        // Deserialize to MyValue - this throws an exception in the current bug scenario
        try {
            MyValue de2 = om.readValue(json, MyValue.class);
            assertNotNull(de2);
            assertEquals(object, de2.getObject());
        } catch (Exception e) {
            fail("Deserialization to MyValue failed with exception: " + e.getMessage());
        }
    }
}
