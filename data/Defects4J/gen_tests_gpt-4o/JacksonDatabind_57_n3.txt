
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;
import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class ObjectReaderTest {

    private ObjectMapper objectMapper;

    @Before
    public void setUp() {
        objectMapper = new ObjectMapper();
    }

    @Test
    public void testReadValuesWithOffsetAndLength() throws IOException {
        // JSON array with two objects
        byte[] jsonData = "{\"name\":\"John\"},{\"name\":\"Doe\"}".getBytes();
        
        // Create ObjectReader for the given class
        ObjectReader reader = objectMapper.readerFor(MyClass.class);

        // Set offset and length to read only the first object
        int offset = 0;
        int length = "{\"name\":\"John\"}".getBytes().length;

        // Read the JSON data with specified offset and length
        MappingIterator<MyClass> iterator = reader.readValues(jsonData, offset, length);
        
        // Assert that only one object has been read
        MyClass result = iterator.next();
        assertEquals("John", result.getName());

        // Ensure that the iterator has no more data to read
        assertEquals(false, iterator.hasNext());
    }

    // Define a simple class for deserialization
    static class MyClass {
        private String name;

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }
}
