script
/**
 * @param {function(string, number): boolean} param
 */
function func(param) {
  // Call the function with expected parameters to see if it behaves correctly
  return param("test", 123);
}

/** @type {function(string, number, boolean): boolean} */
function paramFunc1(str, num, bool) {
  // Example implementation
  return typeof str === "string" && typeof num === "number" && typeof bool === "boolean";
}

/** @type {function(string): boolean} */
function paramFunc2(str) {
  // Example implementation
  return typeof str === "string";
}

// To reproduce the issue, try to pass the wrong types:

// This call should be able to pass because paramFunc1 has a compatible parameter list accepting `string` and `number`
console.log(func(paramFunc1)); // Expected to work

// The following problematic call should NOT compile or work when strict type checking is in place, but if it does:
// An error or unexpected behavior occurs when trying to execute it
try {
  console.log(func(paramFunc2)); // This should cause a type error in a strictly typed scenario
} catch (error) {
  console.error('Caught Type Error: ', error);
}
