
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import java.util.TimeZone;
import org.junit.Test;
import static org.junit.Assert.*;

public class DateTimeOverlapTest {

    @Test
    public void testWithLaterOffsetAtOverlap() {
        // Set default time zones
        TimeZone.setDefault(TimeZone.getTimeZone("America/Sao_Paulo"));
        DateTimeZone.setDefault(DateTimeZone.forID("America/Sao_Paulo"));

        // Initial DateTime setup
        DateTime dtch = new DateTime(2012, 2, 25, 23, 59, 59, 999);
        System.out.println(dtch); // Expected: 2012-02-25T23:59:59.999-02:00

        // Add 60001 milliseconds to the time
        dtch = dtch.plus(60001);
        System.out.println(dtch); // Expected: 2012-02-25T23:01:00.000-03:00

        // Use withEarlierOffsetAtOverlap
        dtch = dtch.withEarlierOffsetAtOverlap();
        System.out.println(dtch); // Expected: 2012-02-25T23:01:00.000-02:00

        // Use withLaterOffsetAtOverlap and check the behavior
        dtch = dtch.withLaterOffsetAtOverlap();
        System.out.println(dtch); // Expected: 2012-02-25T23:01:00.000-03:00

        // Verify the offset change
        assertEquals(DateTimeZone.forID("America/Sao_Paulo").getStandardOffset(dtch.getMillis()), dtch.getZone().getOffset(dtch));
    }
}
