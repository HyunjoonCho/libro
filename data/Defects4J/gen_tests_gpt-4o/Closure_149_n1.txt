
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testMinificationWithStringEscaping() throws IOException {
        // Creating a sample JavaScript file with non-ASCII characters
        String originalJsContent = "var pattern = 'hyphenation паттерн';\n";
        File originalJsFile = File.createTempFile("orig", ".js");
        try (FileWriter writer = new FileWriter(originalJsFile)) {
            writer.write(originalJsContent);
        }

        // Compile the file with Closure Compiler
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Add custom option logic here if you implement turning off string escaping
        // e.g., options.setStringEscapingEnabled(false);

        Compiler compiler = new Compiler();
        Result result = compiler.compile(
                CommandLineRunner.getDefaultExternsForOptions(options),
                SourceFile.fromFile(originalJsFile),
                options
        );

        // Retrieving the compiled code
        String minifiedJsContent = compiler.toSource();

        // Test the size comparison
        assertTrue("Minified JS should not be larger than original", minifiedJsContent.length() <= originalJsContent.length());
    }
}
