
import static org.junit.Assert.*;

import com.google.javascript.jscomp.*;
import org.junit.Test;

public class CompilerOptimizationTest {

    @Test
    public void testAdvancedOptimizations() {
        // Set up source code
        String jsCode = "window['anchor'] = function (obj, modifiesProp) {"
                      + "  return (function (saved) {"
                      + "    return modifiesProp(obj) + saved;"
                      + "  })(obj['prop']);"
                      + "};";

        // Expected output
        String expectedOutput = "window.anchor=function(a,b){var HOLD=a.prop;return b(a)+HOLD;};";

        // Set up compiler options for advanced optimizations
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Set up a basic extern (empty for this test)
        SourceFile extern = SourceFile.fromCode("externs.js", "var window;");

        // Compile the JavaScript
        Compiler compiler = new Compiler();
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        Result result = compiler.compile(extern, input, options);

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Assert the compiled code matches the expected output
        assertEquals("Expected and actual compiled code do not match", expectedOutput.trim(), compiledCode.trim());
    }
}
