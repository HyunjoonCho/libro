
import org.junit.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;

public class ArgumentCaptorVarargsTest {

    interface SomeService {
        void doSomething(String... values);
    }

    @Test
    public void testArgumentCaptorWithVarargs() {
        SomeService mockService = mock(SomeService.class);

        // Captor for the varargs
        ArgumentCaptor<String> varargsCaptor = ArgumentCaptor.forClass(String.class);

        // Mock behavior
        doAnswer(new Answer<Void>() {
            @Override
            public Void answer(InvocationOnMock invocation) throws Throwable {
                // Retrieve the arguments as an array
                Object[] args = invocation.getArguments();
                if (args.length > 0) {
                    String[] varargs = (String[]) args[0];
                }
                return null;
            }
        }).when(mockService).doSomething(anyVararg());

        // Call the mock method with varargs
        mockService.doSomething("one", "two", "three");

        // Verification
        verify(mockService).doSomething(varargsCaptor.capture());

        // Assert that the captured arguments match the expected values
        List<String> capturedValues = varargsCaptor.getAllValues();
        assertEquals("one", capturedValues.get(0));
        assertEquals("two", capturedValues.get(1));
        assertEquals("three", capturedValues.get(2));
    }
}
