
import org.joda.time.Duration;
import org.joda.time.DateTimeConstants;
import org.joda.time.Period;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.ISOChronology;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DurationToPeriodTest {

    @Test
    public void testDurationToPeriodWithGMT() {
        // Set the default time zone to GMT
        DateTimeZone.setDefault(DateTimeZone.forID("Etc/GMT"));
        System.out.println("Timezone: " + DateTimeZone.getDefault());

        // Duration of more than 24 hours
        Duration aDuration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 +
                                          DateTimeConstants.MILLIS_PER_MINUTE * 50 +
                                          DateTimeConstants.MILLIS_PER_SECOND * 14);

        System.out.println("Duration before: " + aDuration);
        Period period = aDuration.toPeriod(ISOChronology.getInstanceUTC());
        System.out.println("Period after: " + period);

        // Expected result
        assertEquals(new Period(0, 0, 0, 1, 6, 50, 14, 0), period);
    }

    @Test
    public void testDurationToPeriodWithDST() {
        // Set the default time zone to a DST timezone
        DateTimeZone.setDefault(DateTimeZone.forID("America/Chicago"));
        System.out.println("Timezone: " + DateTimeZone.getDefault());

        // Duration of more than 24 hours
        Duration aDuration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 +
                                          DateTimeConstants.MILLIS_PER_MINUTE * 50 +
                                          DateTimeConstants.MILLIS_PER_SECOND * 14);

        System.out.println("Duration before: " + aDuration);
        Period period = aDuration.toPeriod(ISOChronology.getInstanceUTC());
        System.out.println("Period after: " + period);

        // Expected result
        assertEquals(new Period(0, 0, 0, 0, 30, 50, 14, 0), period);
    }
}
