
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.assertEquals;

public class ZipTest {

    @Test
    public void testZipFileReading() throws IOException {
        byte[] zip = {
            (byte) 0x50, (byte) 0x4b, (byte) 0x03, (byte) 0x04, (byte) 0x0a, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03, (byte) 0x7b,
            (byte) 0xd1, (byte) 0x42, (byte) 0x82, (byte) 0xc5, (byte) 0xc1, (byte) 0xe6,
            (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x1c, (byte) 0x00,
            (byte) 0x74, (byte) 0x65, (byte) 0x73, (byte) 0x74, (byte) 0x2e, (byte) 0x74,
            (byte) 0x78, (byte) 0x74, (byte) 0x55, (byte) 0x54, (byte) 0x09, (byte) 0x00,
            (byte) 0x03, (byte) 0x56, (byte) 0x62, (byte) 0xbf, (byte) 0x51, (byte) 0x2a,
            (byte) 0x63, (byte) 0xbf, (byte) 0x51, (byte) 0x75, (byte) 0x78, (byte) 0x0b,
            (byte) 0x00, (byte) 0x01, (byte) 0x04, (byte) 0x01, (byte) 0xff, (byte) 0x01,
            (byte) 0x00, (byte) 0x04, (byte) 0x88, (byte) 0x13, (byte) 0x00, (byte) 0x00,
            (byte) 0x64, (byte) 0x61, (byte) 0x74, (byte) 0x61, (byte) 0x0a, (byte) 0x50,
            (byte) 0x4b, (byte) 0x01, (byte) 0x02, (byte) 0x1e, (byte) 0x03, (byte) 0x0a,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x03,
            (byte) 0x7b, (byte) 0xd1, (byte) 0x42, (byte) 0x82, (byte) 0xc5, (byte) 0xc1,
            (byte) 0xe6, (byte) 0x05, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x05,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x08, (byte) 0x00, (byte) 0x18,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xa0, (byte) 0x81, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x74, (byte) 0x65, (byte) 0x73,
            (byte) 0x74, (byte) 0x2e, (byte) 0x74, (byte) 0x78, (byte) 0x74, (byte) 0x55,
            (byte) 0x54, (byte) 0x05, (byte) 0x00, (byte) 0x03, (byte) 0x56, (byte) 0x62,
            (byte) 0xbf, (byte) 0x51, (byte) 0x75, (byte) 0x78, (byte) 0x0b, (byte) 0x00,
            (byte) 0x01, (byte) 0x04, (byte) 0x01, (byte) 0xff, (byte) 0x01, (byte) 0x00,
            (byte) 0x04, (byte) 0x88, (byte) 0x13, (byte) 0x00, (byte) 0x00, (byte) 0x50,
            (byte) 0x4b, (byte) 0x05, (byte) 0x06, (byte) 0x00, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x4e,
            (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x47, (byte) 0x00, (byte) 0x00,
            (byte) 0x00, (byte) 0x00, (byte) 0x00
        };

        ByteArrayInputStream bin = new ByteArrayInputStream(zip);
        try (ZipArchiveInputStream in = new ZipArchiveInputStream(bin);
             ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            ZipArchiveEntry entry;
            while ((entry = in.getNextZipEntry()) != null) {
                byte[] buf = new byte[(int) entry.getSize()];
                in.read(buf);
                out.write(buf);
            }
            String actualContent = new String(out.toByteArray(), StandardCharsets.UTF_8);
            String expectedContent = "data\n";

            assertEquals("Content should match expected data", expectedContent, actualContent);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
