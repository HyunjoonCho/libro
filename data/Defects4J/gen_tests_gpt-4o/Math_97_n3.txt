
import org.apache.commons.math.analysis.BrentSolver;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
import org.apache.commons.math.exception.MaxIterationsExceededException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentSolverTest {

    @Test
    public void testBrentSolverWithZeroEndpoint() throws Exception {
        // Define a function where f(x) = x, such that f(0) = 0
        UnivariateRealFunction function = new UnivariateRealFunction() {
            public double value(double x) {
                return x;
            }
        };

        // Create a BrentSolver instance
        UnivariateRealSolver solver = new BrentSolver();

        // Define the endpoints of the interval
        double min = -100000.0;
        double max = 1.7976931348623157E308;

        // Attempt to solve the function within the given interval
        try {
            double root = solver.solve(1000, function, min, max);
            // The correct behavior according to bug report is to return 0 as the root
            assertEquals(0.0, root, 1e-6);
        } catch (IllegalArgumentException e) {
            // If the bug exists, it will throw an IllegalArgumentException
            // The test should catch this and fail because the exception should not be thrown
            throw new AssertionError("Bug exists: Exception was thrown when a root was expected.", e);
        } catch (MaxIterationsExceededException e) {
            // This handles potential max iterations exceptions that might be thrown
            throw new AssertionError("Test failed due to unexpected iteration limit.", e);
        }
    }
}
