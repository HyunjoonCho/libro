public void testFunctionAssignmentCompatibility() {
    // Define a simulate assignment check between functions
    boolean firstCallCompiles = isAssignable(paramFunc1(), new FunctionWithStringAndNumber());
    boolean secondCallCompiles = isAssignable(paramFunc2(), new FunctionWithStringAndNumber());

    // Check if first call is accepted
    assertTrue(firstCallCompiles);

    // Check if second call is incorrectly accepted
    assertFalse(secondCallCompiles);
}

interface FunctionWithStringAndNumber {
    boolean apply(String s, int n);
}

interface ParamFunc1 {
    boolean apply(String s, int n, boolean b);
}

interface ParamFunc2 {
    boolean apply(String s);
}

boolean isAssignable(Object source, Object target) {
    // Mock implementation of assignable check
    if (source instanceof ParamFunc1 && target instanceof FunctionWithStringAndNumber) {
        return true;
    }
    if (source instanceof ParamFunc2 && target instanceof FunctionWithStringAndNumber) {
        return false;
    }
    return false;
}

ParamFunc1 paramFunc1() {
    return (s, n, b) -> true;
}

ParamFunc2 paramFunc2() {
    return s -> true;
}