public void testShouldGetExtraInterfaces() {
    Bar bar = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));
    MockingDetails details = mockingDetails(bar);
    assertTrue(details.getExtraInterfaces().contains(List.class));
    assertTrue(details.getExtraInterfaces().contains(Observer.class));
}

public void testPureMockitoShouldNotDependJUnitByteBuddy() {
    try {
        Class<?> clazz = getClassLoader().loadClass("org.mockito.configuration.MockitoConfiguration");
        fail("'org/mockito/configuration/MockitoConfiguration' should not depend on JUnit");
    } catch (ClassNotFoundException e) {
        // expected because the class should not be found if it depends on JUnit
    }
}

public void testExcludingClassLoaderCannotLoadClassesWhenNoCorrectSourceUrlSet() {
    try {
        ClassLoader classLoader = getClassLoader();
        classLoader.loadClass("some.class.that.should.not.load");
        fail("Excluded class should not be loaded");
    } catch (ClassNotFoundException e) {
        // expected because the class should not be loaded
    }
}

private ClassLoader getClassLoader() {
    return new URLClassLoader(new URL[] {}, new ClassLoader() {
        public Class<?> loadClass(String name) throws ClassNotFoundException {
            if (name.startsWith("junit") || name.startsWith("org.junit")) {
                throw new ClassNotFoundException("classes with prefix : [junit, org.junit] are excluded");
            }
            return super.loadClass(name);
        }
    });
}