
import static org.junit.Assert.*;

import org.junit.Test;

public class FunctionCastingTest {

    @Test
    public void testFunctionCastingWithAdvancedOptimizations() {
        // Original JS code with casting function
        String scriptWithCasting = "/** @type {function(!string):!string} */ ((new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash'))['GetVariable'])('$version')";
        
        // Expected JS output after compilation with ADVANCED_OPTIMIZATIONS
        String expectedOutputWithCasting = "'use strict';console.log((new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash')).GetVariable('$version'))";
        
        // Simulate compilation and minification process with a hypothetical JavaScript compiler
        String actualOutputWithCasting = compileWithAdvancedOptimizations(scriptWithCasting);
        
        // Assert that the output is incorrectly wrapped with (0,...)
        assertNotEquals(expectedOutputWithCasting, actualOutputWithCasting);

        // Original JS code without casting function
        String scriptWithoutCasting = "/** @type {!string} */ ((new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash'))['GetVariable']('$version'))";
        
        // Expected JS output after compilation without casting
        String expectedOutputWithoutCasting = "'use strict';console.log((new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash')).GetVariable('$version'))";
        
        // Simulate compilation and minification process with a hypothetical JavaScript compiler
        String actualOutputWithoutCasting = compileWithAdvancedOptimizations(scriptWithoutCasting);
        
        // Assert that the output is as expected without casting
        assertEquals(expectedOutputWithoutCasting, actualOutputWithoutCasting);
    }

    // Hypothetical method to simulate JavaScript minification with ADVANCED_OPTIMIZATIONS
    private String compileWithAdvancedOptimizations(String script) {
        // Simulate minification result, returning a known incorrect minification result
        if (script.contains("@type {function(!string):!string}")) {
            return "'use strict';console.log((0,(new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash')).GetVariable)('$version'))";
        }
        // Simulating the correct minification without casting issue
        return "'use strict';console.log((new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash')).GetVariable('$version'))";
    }
}
