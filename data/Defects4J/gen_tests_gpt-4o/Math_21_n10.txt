
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.CholeskyDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.random.CorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.GaussianRandomGenerator;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CorrelatedRandomVectorGeneratorBugTest {

    @Test
    public void testCovarianceMatrixWithZeroRows() {
        double[][] covarianceMatrix1 = {
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.0, 0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        };

        double[][] covarianceMatrix2 = {
            {0.013445532, 0.01039469, 0.0, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        };

        double[][] covarianceMatrix3 = {
            {0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.009210099, 0.019107243}
        };

        testMatrix(covarianceMatrix1, 5);
        testMatrix(covarianceMatrix2, 3); // Expecting rank 3 due to zero row
        testMatrix(covarianceMatrix3, 4);
    }

    private void testMatrix(double[][] data, int expectedRank) {
        RealMatrix covarianceMatrix = new Array2DRowRealMatrix(data);
        JDKRandomGenerator randomGenerator = new JDKRandomGenerator();
        GaussianRandomGenerator rawGenerator = new GaussianRandomGenerator(randomGenerator);
        CorrelatedRandomVectorGenerator generator = new CorrelatedRandomVectorGenerator(
                covarianceMatrix, 0, rawGenerator);

        // Check the rank
        int calculatedRank = new CholeskyDecomposition(covarianceMatrix).getL().getColumnDimension();
        assertEquals(expectedRank, calculatedRank, "Unexpected rank for the matrix");
    }
}
