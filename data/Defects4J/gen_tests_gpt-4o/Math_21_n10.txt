public void testCorrelatedRandomVectorGeneratorWithZeroRows() {
    double[][] covarianceMatrix = {
        {0.013445532, 0.01039469, 0.0, 0.009881156, 0.010499559},
        {0.01039469, 0.023006616, 0.0, 0.008196856, 0.010732709},
        {0.0, 0.0, 0.0, 0.0, 0.0},
        {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
        {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
    };
    
    Array2DRowRealMatrix covariance = new Array2DRowRealMatrix(covarianceMatrix);
    MultivariateNormalDistribution distribution = new MultivariateNormalDistribution(
        new double[] {0, 0, 0, 0, 0},
        covariance.getData()
    );
    
    // Generate a large number of samples to assess the covariance 
    RealMatrix sampleCovarianceMatrix = new Array2DRowRealMatrix(5, 5);
    int numSamples = 10000;
    
    for (int i = 0; i < numSamples; i++) {
        double[] sample = distribution.sample();
        RealMatrix sampleVector = new Array2DRowRealMatrix(sample);
        sampleCovarianceMatrix = sampleCovarianceMatrix.add(sampleVector.multiply(sampleVector.transpose()));
    }
    
    sampleCovarianceMatrix = sampleCovarianceMatrix.scalarMultiply(1.0 / numSamples);
    
    // Since we expect the covariance to identify the independent variable (zero row/column)
    // Check if all covariances involving the third variable (zero row) are indeed approximately zero.
    assertEquals(0.0, sampleCovarianceMatrix.getEntry(2, 0), 0.0001);
    assertEquals(0.0, sampleCovarianceMatrix.getEntry(2, 1), 0.0001);
    assertEquals(0.0, sampleCovarianceMatrix.getEntry(2, 2), 0.0001);
    assertEquals(0.0, sampleCovarianceMatrix.getEntry(2, 3), 0.0001);
    assertEquals(0.0, sampleCovarianceMatrix.getEntry(2, 4), 0.0001);
}