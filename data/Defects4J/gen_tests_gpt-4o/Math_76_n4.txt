
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertFalse;

public class SingularValueDecompositionTest {

    @Test
    public void testNaNSingularValueFromSVD() {
        double[][] matrixData = {
            {1.0, 2.0, 3.0},
            {2.0, 3.0, 4.0},
            {3.0, 5.0, 7.0}
        };

        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(matrixData);
        SingularValueDecomposition svd = new SingularValueDecomposition(matrix);
        double[] singularValues = svd.getSingularValues();

        // Validate that there are no NaN values in the singular values
        for (double value : singularValues) {
            assertFalse("NaN found in singular values", Double.isNaN(value));
        }

        // Validate that the singular values are approximately correct
        double[] expectedValues = {11.218599757513008, 0.3781791648535976, 0.0};
        double epsilon = 1e-8;
        assertArrayEquals("Singular values are not as expected", expectedValues, singularValues, epsilon);
    }
}
