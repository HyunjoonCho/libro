public void testTrueFalseReplacement() {
    // Simulating compiler behavior by manually replacing true/false with !0/!1
    boolean trueValue = !0; // Replace true with !0
    boolean falseValue = !1; // Replace false with !1

    MyObject obj = some_function();

    // Check if method1 returns the expected true value
    assertEquals(trueValue, obj.method1());

    // Check if method2 returns the expected false value
    assertEquals(falseValue, obj.method2());
}

private MyObject some_function() {
    final boolean any_expression = true; // Simulated expression
    ExternalRef external_ref = new ExternalRef();
    boolean[] invoked = {false}; // To track if fn1 was invoked
    Function<String, String> fn1 = null;
    if (any_expression) {
        final ExternalRef fn2 = external_ref;
        fn1 = new Function<String, String>() {
            @Override
            public String apply(String content) {
                invoked[0] = true;
                return fn2.method();
            }
        };
    }
    final Function<String, String> fn1Final = fn1;
    final boolean[] invokedFinal = invoked;
    return new MyObject() {
        @Override
        public boolean method1() {
            if (fn1Final != null) fn1Final.apply("");
            return !0; // Replacing true with !0
        }

        @Override
        public boolean method2() {
            return !1; // Replacing false with !1
        }
        
        @Override
        public boolean isMethod1Invoked() {
            return invokedFinal[0];
        }
    };
}

private interface MyObject {
    boolean method1();
    boolean method2();
    boolean isMethod1Invoked();
}

private class ExternalRef {
    public String method() {
        return "external";
    }
}