
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.JavaType;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class GenericTypeIdResolverTest {

    // Define a sample class with a generic field
    public static class Container<T> {
        public T item;
    }

    // Define a sample TypeIdResolver to handle generic types
    public static class CustomTypeIdResolver extends TypeIdResolverBase {

        @Override
        public void init(JavaType baseType) {
            super.init(baseType);
        }

        @Override
        public String idFromValue(Object value) {
            return "genericType";
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return "genericType";
        }

        @Override
        public String idFromBaseType() {
            return "genericType";
        }

        @Override
        public JavaType typeFromId(DatabindContext context, String id) {
            // Return a generic type, e.g., Container<String>
            return context.constructType(new TypeReference<Container<String>>() {});
        }

        @Override
        public String getDescForKnownTypeIds() {
            return "Container";
        }

        @Override
        public JsonTypeInfo.Id getMechanism() {
            return JsonTypeInfo.Id.CUSTOM;
        }
    }

    // Create a test to check that the generic type is handled properly
    @Test
    public void testGenericTypeIdResolver() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();

        // Register the custom type id resolver
        SimpleModule module = new SimpleModule();
        module.addDeserializer(Container.class, new CustomContainerDeserializer());
        objectMapper.registerModule(module);

        String json = "{\"item\":\"Test String\"}";

        Container<String> result = objectMapper.readValue(json, new TypeReference<Container<String>>() {});
        assertEquals("Test String", result.item);
    }
}
