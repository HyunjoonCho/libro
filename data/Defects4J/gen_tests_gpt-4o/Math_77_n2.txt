
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class RealVectorTest {

    @Test
    public void testArrayRealVectorGetLInfNorm() {
        double[] data = {-1.0, 2.0, -3.0, 4.0};
        ArrayRealVector vector = new ArrayRealVector(data);

        // Incorrect behavior with current implementation
        double incorrectNorm = vector.getLInfNorm();
        assertEquals("Incorrect implementation should not pass.", 4.0, incorrectNorm, 0.0); // Expect failure

        // Correct behavior using max absolute value
        double correctNorm = getCorrectLInfNormForArrayRealVector(vector);
        assertEquals("Expected correct LInf norm for ArrayRealVector.", 4.0, correctNorm, 0.0);
    }

    @Test
    public void testOpenMapRealVectorGetLInfNorm() {
        double[] data = {-1.0, 2.0, -3.0, 4.0};
        OpenMapRealVector vector = new OpenMapRealVector(data);

        // Incorrect behavior with current implementation
        double incorrectNorm = vector.getLInfNorm();
        assertEquals("Incorrect implementation should not pass.", 4.0, incorrectNorm, 0.0); // Expect failure

        // Correct behavior using max absolute value
        double correctNorm = getCorrectLInfNormForOpenMapRealVector(vector);
        assertEquals("Expected correct LInf norm for OpenMapRealVector.", 4.0, correctNorm, 0.0);
    }

    private double getCorrectLInfNormForArrayRealVector(ArrayRealVector vector) {
        double max = 0;
        for (double a : vector.toArray()) {
            max = Math.max(max, Math.abs(a));
        }
        return max;
    }

    private double getCorrectLInfNormForOpenMapRealVector(OpenMapRealVector vector) {
        double max = 0;
        for (RealVector.Entry e : vector.sparseIterator()) {
            max = Math.max(max, Math.abs(e.getValue()));
        }
        return max;
    }
}
