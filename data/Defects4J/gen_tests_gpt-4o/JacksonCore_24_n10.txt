
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.exc.InputCoercionException;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.fail;
import static org.junit.Assert.assertTrue;

public class InputCoercionExceptionTest {

    @Test
    public void testNumericOverflowWithInputCoercionException() {
        String json = "2147483648"; // One more than Integer.MAX_VALUE to cause overflow
        
        JsonFactory factory = new JsonFactory();
        try (JsonParser parser = factory.createParser(json)) {
            parser.nextToken();
            parser.getIntValue(); // This should cause an overflow
            
            fail("Expected an InputCoercionException to be thrown due to numeric overflow");
        } catch (InputCoercionException e) {
            assertTrue(e.getMessage().contains("Numeric value (2147483648) out of range of int"));
        } catch (JsonProcessingException e) {
            fail("Expected InputCoercionException, but got " + e.getClass().getSimpleName());
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
    }
}
