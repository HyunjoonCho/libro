
import org.apache.commons.math.MathException;
import org.apache.commons.math.distribution.DistributionFactory;
import org.apache.commons.math.distribution.NormalDistribution;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class NormalDistributionTest {

    @Test
    public void testInverseCumulativeProbability() {
        try {
            DistributionFactory factory = DistributionFactory.newInstance();
            NormalDistribution normal = factory.createNormalDistribution(0, 1);

            // Test case that should return approximately 2.0000
            assertEquals(2.0, normal.inverseCumulativeProbability(0.9772498680518209), 0.0001);

            // Test case that should return approximately 3.0000
            assertEquals(3.0, normal.inverseCumulativeProbability(0.9986501019683698), 0.0001);

            // Test case that should return approximately 4.0000
            assertEquals(4.0, normal.inverseCumulativeProbability(0.9999683287581673), 0.0001);

        } catch (MathException e) {
            fail("Unexpected MathException: " + e.getMessage());
        }
    }
}
