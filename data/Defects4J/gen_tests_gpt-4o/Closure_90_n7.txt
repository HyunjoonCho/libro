public void testThisEmitsWarningWithTypedef() {
    // Setup the code to be compiled
    String code = ""
        + "goog.provide('bug');\n"
        + "/**\n"
        + " * @this {bug.Thing}\n"
        + " */\n"
        + "bug.sharedMethod = function() {};\n"
        + "/**\n"
        + " * @constructor\n"
        + " */\n"
        + "bug.A = function() {};\n"
        + "/**\n"
        + " * @constructor\n"
        + " */\n"
        + "bug.B = function() {};\n"
        + "/**\n"
        + " * @type {bug.A|bug.B}\n"
        + " */\n"
        + "bug.Thing = goog.typedef;\n";
    
    // Set up the compiler and options
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
    
    // Compile the code
    compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("input.js", code), options);
    
    // Assert the warning is emitted
    assertEquals(1, compiler.getWarnings().length);
    assertEquals("JSC_TYPE_MISMATCH", compiler.getWarnings()[0].getType().key);
    assertTrue(compiler.getWarnings()[0].getDescription().contains("@this type of a function must be an object"));
}