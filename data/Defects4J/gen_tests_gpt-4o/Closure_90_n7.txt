
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.WarningLevel;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class BugThisTypedefTest {

    @Test
    public void testThisWithTypedef() {
        Compiler compiler = new Compiler();
        Compiler.setLoggingLevel(java.util.logging.Level.SEVERE);

        // JavaScript source with the bug
        String jsFileContent = 
        "goog.provide('bug');\n" +
        "/**\n" +
        " * @this {bug.Thing}\n" +
        " */\n" +
        "bug.sharedMethod = function() {};\n" +
        "/**\n" +
        " * @constructor\n" +
        " */\n" +
        "bug.A = function() {};\n" +
        "/**\n" +
        " * @constructor\n" +
        " */\n" +
        "bug.B = function() {};\n" +
        "/**\n" +
        " * @type {bug.A|bug.B}\n" +
        " */\n" +
        "bug.Thing = goog.typedef;";

        SourceFile extern = JSSourceFile.fromCode("externs.js", "");
        SourceFile input = JSSourceFile.fromCode("test.js", jsFileContent);

        // Compile the code
        Result result = compiler.compile(extern, input, getDefaultCompilerOptions());

        // Assert that there were no warnings related to @this type
        boolean hasWarnings = result.warnings.length > 0;
        assertFalse("Expected no warnings, but found some related to @this type!", hasWarnings);
    }

    private com.google.javascript.jscomp.CompilerOptions getDefaultCompilerOptions() {
        com.google.javascript.jscomp.CompilerOptions options = new com.google.javascript.jscomp.CompilerOptions();
        WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
        options.setCheckTypes(true);
        return options;
    }
}
