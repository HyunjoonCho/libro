
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerReturnsBestPoint() {
        // Define a simple quadratic function
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                return -(x - 2) * (x - 2) + 4; // Maximum at x = 2
            }
        };

        // Create BrentOptimizer with a small tolerance
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Optimize within the search interval
        UnivariatePointValuePair result = optimizer.optimize(
                new UnivariateObjectiveFunction(function),
                new SearchInterval(0, 4));

        // Check if the optimizer returns the best point
        double expectedBestPoint = 2.0;
        assertEquals("The optimizer did not return the best point", 
                     expectedBestPoint, result.getPoint(), 1e-10);
    }
}
