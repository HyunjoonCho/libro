
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
import org.junit.Test;
import static org.junit.Assert.*;

public class JacksonDeserializationTest {

    static class VulnerablePayload {
        public String command;
    }

    @Test
    public void testDeserializationSecurityRisk() {
        // Prepare the object mapper with default typing enabled
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enableDefaultTyping(DefaultTyping.NON_FINAL);

        // Example JSON with injected payload
        String jsonPayload = "[\"com.fasterxml.jackson.databind.deser.DefaultDeserializationContext$WritableObjectId\"]";

        try {
            // Deserialize payload
            Object obj = objectMapper.readValue(jsonPayload, Object.class);
            
            // Just checking the type here for demonstration, normally a malicious object would be used
            assertNotNull(obj);
            System.out.println("Deserialized object of type: " + obj.getClass().getName());
        } catch (Exception e) {
            fail("Deserialization failed due to: " + e.getMessage());
        }
    }
}
