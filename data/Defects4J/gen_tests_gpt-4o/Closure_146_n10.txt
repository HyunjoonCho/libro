
import static org.junit.Assert.*;

import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import com.google.javascript.rhino.Node;
import org.junit.Test;

public class BugReport107Test {

    @Test
    public void testTypeInferenceWithUndefined() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        options.setLanguageIn(LanguageMode.ECMASCRIPT5);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

        String code = 
              "/** @param {string} x */\n"
            + "function g(x) {}\n"
            + "/** @param {undefined} x */\n"
            + "function f(x) {\n"
            + "  if (x != undefined) { g(x); }\n"
            + "}\n";

        SourceFile input = SourceFile.fromCode("test.js", code);
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);
        
        for (JSError warning : result.warnings) {
            if (warning.getType().key.equals("JSC_TYPE_MISMATCH")) {
                fail("Unexpected type mismatch warning: " + warning.description);
            }
        }
    }
}
