public void testBadTypeInference() {
    String closureCompilerInput = "/** @param {string} x */ function g(x) {}\n"
            + "/** @param {undefined} x */ function f(x) {\n"
            + " if (x != undefined) { g(x); }\n"
            + "}";
            
    // Compile this with closure-compiler in advanced mode, e.g., 
    // Result result = compile(closureCompilerInput, CompilationLevel.ADVANCED_OPTIMIZATIONS);
    // Assume some compile method exists that returns a Result object
    
    Result result = compile(closureCompilerInput, CompilationLevel.ADVANCED_OPTIMIZATIONS);
    
    for (JSError error : result.errors) {
        if (error.getDescription().contains("actual parameter 1 of g does not match formal parameter")) {
            fail("Encountered a bogus type mismatch warning");
        }
    }
    
    for (JSError warning : result.warnings) {
        if (warning.getDescription().contains("condition always evaluates to false")) {
            fail("Encountered a wrong deterministic test warning");
        }
    }
    
    // The test should pass if there are no bogus warnings or errors
    assertTrue(result.success);
}