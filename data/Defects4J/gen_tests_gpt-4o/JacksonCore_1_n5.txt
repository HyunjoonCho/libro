
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.fail;

public class NaNAsBigDecimalTest {

    @Test
    public void testNaNAsBigDecimal() {
        JsonFactory factory = new JsonFactory();
        // Enable ALLOW_NON_NUMERIC_NUMBERS feature
        factory.enable(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS);
        
        String json = "NaN";

        try (JsonParser parser = factory.createParser(json)) {
            // We expect a float number token
            if (parser.nextToken() == JsonToken.VALUE_NUMBER_FLOAT) {
                // This line should throw a NumberFormatException instead of NullPointerException
                parser.getDecimalValue();
                fail("Expected NumberFormatException to be thrown, but no exception was thrown.");
            } else {
                fail("Expected a VALUE_NUMBER_FLOAT token, but was: " + parser.currentToken());
            }
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        } catch (NullPointerException e) {
            fail("Unexpected NullPointerException. Expected NumberFormatException.");
        } catch (NumberFormatException e) {
            // Expected this exception to be thrown
        }
    }
}
