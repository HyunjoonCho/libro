public void testPrivatePropertyRedeclarationWarning() {
    // Set up the compiler with error reporting level set to treat warnings as errors.
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);

    // Define the subclass code with redeclared private property
    String subclassCode = ""
        + "/** @constructor */ function Foo() { /** @private */ this.x_ = 3; }\n"
        + "/** @constructor \n"
        + " * @extends {Foo} */\n"
        + "function SubFoo() { /** @private */ this.x_ = 3; }\n";

    // Compile the code
    Result result = compiler.compile(
        Compiler.toSourceArray(),
        ImmutableList.of(SourceFile.fromCode("test.js", subclassCode)),
        options
    );

    // Check that there is a warning or error
    assertTrue("Expected compilation to fail due to visibility warning", !result.success);
}