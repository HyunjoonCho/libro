
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class ExternalPropertyDeserializationTest {

    // Base class with annotations for JSON type info
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, 
                  include = JsonTypeInfo.As.EXTERNAL_PROPERTY, 
                  property = "type")
    @JsonSubTypes({
        @JsonSubTypes.Type(value = SubTypeA.class, name = "A")
    })
    public static abstract class BaseType {
        public abstract String getData();
    }

    // Subtype with implementation and a field for testing
    public static class SubTypeA extends BaseType {
        private String data;
        
        // Constructors, getters, and setters
        public SubTypeA() {}
        
        public SubTypeA(String data) {
            this.data = data;
        }

        @Override
        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }
    }

    // Container class holding the external property and the polymorphic type
    public static class Container {
        public String type;
        public BaseType content;

        // Constructors, getters, and setters
        public Container() {}

        public Container(String type, BaseType content) {
            this.type = type;
            this.content = content;
        }

        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public BaseType getContent() {
            return content;
        }

        public void setContent(BaseType content) {
            this.content = content;
        }
    }

    @Test
    public void testExternalPropertyDeserialization() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"type\":\"A\", \"content\":{\"data\":\"testData\"}}";

        Container container = mapper.readValue(json, Container.class);

        assertNotNull("Content should not be null", container.getContent());
        assertNotNull("Data inside content should not be null", container.getContent().getData());
    }
}
