
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;

import java.util.Objects;

public class NullObjectIdDeserializationTest {

    public static void main(String[] args) throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Test object with null id deserialization
        mapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, false);

        String json = "{\"id\":null,\"name\":\"test\"}";

        TestEntity entity = mapper.readValue(json, TestEntity.class);

        // Verify that object is deserialized correctly even with null ID
        assertNull(entity.getId());
        assertEquals("test", entity.getName());
        
        System.out.println("Test passed: " + entity);
    }

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    private static class TestEntity {
        private Integer id;
        private String name;

        // Getters and setters

        public Integer getId() {
            return id;
        }

        public void setId(Integer id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return "TestEntity{" +
                    "id=" + id +
                    ", name='" + name + '\'' +
                    '}';
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            TestEntity that = (TestEntity) o;
            return Objects.equals(id, that.id) &&
                    Objects.equals(name, that.name);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, name);
        }
    }

    private static void assertNull(Object obj) {
        if (obj != null) {
            throw new AssertionError("Expected null but got " + obj);
        }
    }

    private static void assertEquals(Object expected, Object actual) {
        if (!Objects.equals(expected, actual)) {
            throw new AssertionError("Expected " + expected + " but got " + actual);
        }
    }
}
