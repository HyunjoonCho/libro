
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonGenerator.Feature;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;

import static org.junit.Assert.fail;

public class JsonGenerationExceptionTest {

    @Test
    public void testSplitSurrogatePairError() {
        // Construct an input string that triggers the exception
        // This includes a specific sequence of characters, especially surrogate pairs.
        
        // A sequence that would have a surrogate pair at the boundary
        String problematicUnicode = "xxx\uD83D\uDE00xxx"; // includes an emoji that is represented using a surrogate pair

        // Use a StringWriter to capture the output
        StringWriter writer = new StringWriter();
        JsonFactory factory = new JsonFactory();

        try {
            JsonGenerator generator = factory.createGenerator(writer);
            generator.enable(Feature.WRITE_NUMBERS_AS_STRINGS);

            // Attempt to write the problematic unicode as raw, simulating the error scenario
            generator.writeStartObject();
            generator.writeRawValue(problematicUnicode);
            generator.writeEndObject();
            generator.close();

            // If we get here, it means no exception was thrown, which is unexpected
            fail("Expected JsonGenerationException was not thrown.");
        } catch (JsonGenerationException e) {
            // We expect a JsonGenerationException to be thrown
            System.out.println("Caught expected JsonGenerationException: " + e.getMessage());
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        JsonGenerationExceptionTest test = new JsonGenerationExceptionTest();
        test.testSplitSurrogatePairError();
    }
}
