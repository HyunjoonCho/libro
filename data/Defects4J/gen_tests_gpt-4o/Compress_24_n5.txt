
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import static org.junit.Assert.assertNotNull;

public class TarArchiveInputStreamTest {

    @Test(expected = IllegalArgumentException.class)
    public void testLargeUserIdInTarEntry() throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (TarArchiveOutputStream taos = new TarArchiveOutputStream(baos)) {
            // Create a tar entry with a large user-id
            TarArchiveEntry entry = new TarArchiveEntry("testfile.txt");
            entry.setSize(100);
            entry.setUserId(Integer.MAX_VALUE + 1L); // This will cause the large user-id issue
            taos.putArchiveEntry(entry);
            taos.write(new byte[100]);
            taos.closeArchiveEntry();
        }

        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        try (TarArchiveInputStream tais = new TarArchiveInputStream(bais)) {
            TarArchiveEntry entry = tais.getNextTarEntry();
            // The following line should throw an IllegalArgumentException
            assertNotNull(entry);
        }
    }
}
