
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.MaxEval;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizerTest.WrapUnivariatePointValuePair;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class BrentOptimizerBugTest {

    @Test
    public void testBrentOptimizer() {
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        double rel = 1e-10;
        double abs = 1e-14;
        BrentOptimizer optimizer = new BrentOptimizer(rel, abs);

        // Expect the minimum at x = 2 for the function (x - 2)^2
        double expectedMinimum = 2.0;

        WrapUnivariatePointValuePair solution = optimizer.optimize(
            new MaxEval(1000),
            new UnivariateObjectiveFunction(function),
            new SearchInterval(0, 5),
            GoalType.MINIMIZE);

        double result = solution.getPoint();
        assertEquals(expectedMinimum, result, abs);
    }
}
