
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class ArchiveOutputStreamTest {

    @Test
    public void testTarArchiveOutputStreamFinish() throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        TarArchiveOutputStream tarOut = new TarArchiveOutputStream(baos);

        // Directly calling finish() can lead to state corruption
        tarOut.finish();
        
        // Attempting to write after finish should not be normally allowed
        try {
            tarOut.putArchiveEntry(new TarArchiveEntry("dummy.txt"));
            tarOut.closeArchiveEntry();
            fail("Expected IOException after calling finish()");
        } catch (IOException e) {
            // Exception is expected since the stream should be finished
        } finally {
            tarOut.close();
        }
    }

    @Test
    public void testZipArchiveOutputStreamFinish() throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipOut = new ZipArchiveOutputStream(baos);

        // Directly calling finish() can lead to state corruption
        zipOut.finish();

        // Attempting to write after finish should not be normally allowed
        try {
            zipOut.putArchiveEntry(new ZipArchiveEntry("dummy.txt"));
            zipOut.closeArchiveEntry();
            fail("Expected IOException after calling finish()");
        } catch (IOException e) {
            // Exception is expected since the stream should be finished
        } finally {
            zipOut.close();
        }
    }

    private void fail(String message) {
        throw new AssertionError(message);
    }
}
