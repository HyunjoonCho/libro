
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.GregorianChronology;
import org.junit.Assert;
import org.junit.Test;

public class TimeZoneDSTTest {

    @Test
    public void testDSTTransition() {
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);

        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);

        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));

        Assert.assertTrue("Should be standard time",
                chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));
        Assert.assertFalse("Should be daylight time",
                chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));

        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);
        
        Assert.assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());
        Assert.assertEquals(usCentralStandardInUSCentral.getHourOfDay(),
                usCentralDaylightInUSCentral.getHourOfDay());
        Assert.assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());

        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);

        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));

        Assert.assertTrue("Should be standard time",
                chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));
        Assert.assertFalse("Should be daylight time",
                chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));

        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAustraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);
        
        Assert.assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());
        Assert.assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(),
                australiaNSWDaylightInAustraliaNSW.getHourOfDay());
        Assert.assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAustraliaNSW.getMillis());

        // Verify that setting the hour of day on the DST boundary results in a daylight time for
        // both time zones.
        Assert.assertEquals(usCentralDaylightInUSCentral,
                usCentralStandardInUSCentral.withHourOfDay(1));
        Assert.assertEquals(australiaNSWDaylightInAustraliaNSW,
                australiaNSWStandardInAustraliaNSW.withHourOfDay(2));
    }
}
