
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

// Step 1: Define the enum
enum InviteType {
    CONTACT, EMAIL
}

// Step 2: Define the base class with JsonTypeInfo for external property
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXTERNAL_PROPERTY,
        property = "kind"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = ContactInvite.class, name = "CONTACT"),
        @JsonSubTypes.Type(value = EmailInvite.class, name = "EMAIL")
})
abstract class Invite {
    // common fields go here
}

// Step 3: Define the subclass for CONTACT
class ContactInvite extends Invite {
    public String name;

    public ContactInvite() {
    }

    public ContactInvite(String name) {
        this.name = name;
    }

    // getters and setters
}

// Step 4: Define another subclass for EMAIL
class EmailInvite extends Invite {
    public String emailAddress;

    public EmailInvite() {
    }

    public EmailInvite(String emailAddress) {
        this.emailAddress = emailAddress;
    }

    // getters and setters
}

// Step 5: Create the test class
public class PolymorphicEnumDeserializationTest {

    @Test
    public void testExternalPropertyWithEnum() throws JsonProcessingException {
        String json = "{ \"kind\": \"CONTACT\", \"name\": \"Foo\" }";

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            Invite invite = objectMapper.readValue(json, Invite.class);
            System.out.println(invite);
        } catch (Exception e) {
            e.printStackTrace();
            throw e;
        }
    }
}
