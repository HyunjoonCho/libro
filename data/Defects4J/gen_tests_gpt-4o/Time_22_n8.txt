
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class DurationToPeriodTest {

    @Test
    public void testDurationToPeriodWithFixedTimeZone() {
        // Set the default time zone to a fixed time zone like GMT
        DateTimeZone.setDefault(DateTimeZone.forID("Etc/GMT"));

        // Create a duration of more than 24 hours
        Duration aDuration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 +
                                          DateTimeConstants.MILLIS_PER_MINUTE * 50 +
                                          DateTimeConstants.MILLIS_PER_SECOND * 14);

        // Convert duration to period
        Period period = aDuration.toPeriod();

        // Verify that the conversion considers extra hours as part of day
        assertEquals("P1DT6H50M14S", period.toString());
    }

    @Test
    public void testDurationToPeriodWithDSTTimeZone() {
        // Set the default time zone to a DST time zone like America/Chicago
        DateTimeZone.setDefault(DateTimeZone.forID("America/Chicago"));

        // Create a duration of more than 24 hours
        Duration aDuration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 +
                                          DateTimeConstants.MILLIS_PER_MINUTE * 50 +
                                          DateTimeConstants.MILLIS_PER_SECOND * 14);

        // Convert duration to period
        Period period = aDuration.toPeriod();

        // Verify that the conversion does not distribute hours into days due to DST influence
        assertEquals("PT30H50M14S", period.toString());
    }
}
