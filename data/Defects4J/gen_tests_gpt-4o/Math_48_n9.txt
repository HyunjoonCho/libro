
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class SolverTest {

    @Test
    public void testRegulaFalsiSolver() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new RegulaFalsiSolver();
        try {
            double root = solver.solve(100, f, 1, 10);
            // If code reaches here, the test should likely fail since 
            // it's expected to throw due to exceeding evaluations.
            assertEquals("Unexpectedly found a root using Regula Falsi Solver", false, true);
        } catch (IllegalArgumentException ex) {
            assertEquals("illegal state: maximal count (100) exceeded", ex.getMessage());
        } catch (RuntimeException ex) {
            // Catching the specific exception about evaluations exceeded 
            // might change based on version or configuration of the library
            assert ex.getMessage().contains("evaluations");
        }
    }
    
    @Test
    public void testPegasusSolver() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new PegasusSolver();
        double root = solver.solve(100, f, 1, 10);
        // Verify the root is correct within a reasonable tolerance
        double expectedRoot = Math.log(Math.pow(Math.PI, 3.0));
        assertEquals(expectedRoot, root, 1e-6);
    }
}
