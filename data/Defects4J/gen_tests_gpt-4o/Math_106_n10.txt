
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.ProperFractionFormat;

import java.text.ParsePosition;
import org.junit.Test;
import static org.junit.Assert.*;

public class ProperFractionFormatTest {

    @Test
    public void testParseNegativeWholeNumber() {
        ProperFractionFormat properFormat = new ProperFractionFormat();
        String source = "-1 -2 / 3";
        ParsePosition pos = new ParsePosition(0);

        Fraction actual = properFormat.parse(source, pos);
        assertNull("Expected null when parsing an illogical fraction", actual);
    }

    @Test
    public void testParseNegativeNumerator() {
        ProperFractionFormat properFormat = new ProperFractionFormat();
        String source = "1 -2 / 3";
        ParsePosition pos = new ParsePosition(0);

        Fraction actual = properFormat.parse(source, pos);
        assertNull("Expected null when parsing an illogical fraction", actual);
    }
    
    @Test
    public void testParseNegativeDenominator() {
        ProperFractionFormat properFormat = new ProperFractionFormat();
        String source = "1 2 / -3";
        ParsePosition pos = new ParsePosition(0);

        Fraction actual = properFormat.parse(source, pos);
        assertNull("Expected null when parsing a fraction with a negative denominator", actual);
    }

    @Test
    public void testParseValidFraction() {
        ProperFractionFormat properFormat = new ProperFractionFormat();
        String source = "1 2 / 3";
        ParsePosition pos = new ParsePosition(0);

        Fraction actual = properFormat.parse(source, pos);
        assertNotNull("Expected a valid fraction when parsing a logical fraction", actual);
        assertEquals(1, actual.getWhole());
        assertEquals(2, actual.getNumerator());
        assertEquals(3, actual.getDenominator());
    }
}
