
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilter.Inclusion;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class FilteringParserDelegateTest {

    public static class NameMatchFilter extends TokenFilter {
        private final String nameToMatch;

        public NameMatchFilter(String nameToMatch) {
            this.nameToMatch = nameToMatch;
        }

        @Override
        public TokenFilter includeProperty(String name) {
            return name.equals(nameToMatch) ? TokenFilter.INCLUDE_ALL : null;
        }
    }

    @Test
    public void testFilteringParserDelegate() throws IOException {
        String jsonInput = "{"
                + "\"a\":123,"
                + "\"array\":[1,2],"
                + "\"ob\": {"
                + "\"value0\":2,"
                + "\"value\":3,"
                + "\"value2\":4"
                + "},"
                + "\"b\":true"
                + "}";

        JsonFactory factory = new JsonFactory();
        JsonParser p0 = factory.createParser(jsonInput);
        JsonParser p = new FilteringParserDelegate(p0,
                new NameMatchFilter("value"),
                true, // includePath
                false // multipleMatches
        );

        StringBuilder output = new StringBuilder();
        JsonToken token;
        while ((token = p.nextToken()) != null) {
            output.append(p.getText());
            if (token == JsonToken.END_OBJECT || token == JsonToken.END_ARRAY) {
                output.append("}");
            } else if (token == JsonToken.START_OBJECT || token == JsonToken.START_ARRAY) {
                output.append("{");
            }
        }

        String expectedOutput = "{\"ob\":{{\"value\":3{}}}";
        assertEquals(expectedOutput, output.toString(), "The JSON output is missing expected closing END_OBJECT");
    }
}
