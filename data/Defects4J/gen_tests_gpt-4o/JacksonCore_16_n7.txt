
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class JsonParserSequenceTest {

    @Test
    public void testJsonParserSequenceTokenSkipping() throws Exception {
        // Mock first parser
        JsonParser parser1 = mock(JsonParser.class);
        when(parser1.nextToken()).thenReturn(JsonToken.END_OBJECT);

        // Mock second parser with a token ready
        JsonParser parser2 = mock(JsonParser.class);
        when(parser2.nextToken()).thenReturn(JsonToken.VALUE_STRING);

        // Create JsonParserSequence
        JsonParserSequence parserSequence = JsonParserSequence.createFlattened(parser1, parser2);

        // The first nextToken call should consume END_OBJECT from parser1
        assertEquals(JsonToken.END_OBJECT, parserSequence.nextToken());

        // The second nextToken should not skip and should consume VALUE_STRING from parser2
        assertEquals(JsonToken.VALUE_STRING, parserSequence.nextToken());

        // Verify that nextToken() was called only once on each parser
        verify(parser1, times(1)).nextToken();
        verify(parser2, times(1)).nextToken();
    }
}
