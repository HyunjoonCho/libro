
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testDefineAnnotationWithMultiLineString() throws IOException {
        // Create a temporary JavaScript file with the test case
        File tempJSFile = File.createTempFile("test", ".js");
        tempJSFile.deleteOnExit();

        try (FileWriter writer = new FileWriter(tempJSFile)) {
            writer.write("/** @define {string} */\n");
            writer.write("var CONSTANT = \"some very long string name that I want to wrap \" +\n");
            writer.write("\"and so break using a + since I don't want to \" +\n");
            writer.write("\"introduce a newline into the string.\";\n");
        }

        // Run Closure Compiler on the JavaScript file and capture output
        String[] args = {
                "--js", tempJSFile.getAbsolutePath(),
                "--compilation_level", "ADVANCED_OPTIMIZATIONS"
        };

        CommandLineRunner runner = new CommandLineRunner(args);
        int result = runner.doRun();

        // Assert that the compilation should fail based on the bug report
        assertTrue("Closure Compiler should report an error due to multiline string with @define.", result != 0);
    }
}
