
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertTrue;

public class PrototypeDeclarationTest {

    @Test
    public void testPrototypeDeclaredWithQuotesProducesWarning() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        WarningLevel.VERBOSE.setOptionsForWarningLevel(options);

        String externs = ""
            + "/** @interface */\n"
            + "function MyParent() {}\n"
            + "/** @param {*} a */\n"
            + "MyParent.prototype.MyMethod = function(a) {}\n";

        String code = ""
            + "/** @constructor */\n"
            + "function MyClass() {}\n"
            + "MyClass.prototype[\"MyMethod\"] = function(a) {\n"
            + "  this.a = a;\n"
            + "};\n"
            + "window[\"MyClass\"] = MyClass;\n";

        List<SourceFile> externFiles = List.of(SourceFile.fromCode("externs", externs));
        List<SourceFile> inputFiles = List.of(SourceFile.fromCode("input", code));

        // Compile the code
        compiler.compile(externFiles, inputFiles, options);

        // Get the warnings
        List<JSError> warnings = compiler.getWarnings();

        // Check for the specific global 'this' warning
        boolean foundGlobalThisWarning = false;
        for (JSError warning : warnings) {
            if (warning.description.contains("dangerous use of the global this object")) {
                foundGlobalThisWarning = true;
                break;
            }
        }

        assertTrue("Expected to find global this warning", foundGlobalThisWarning);
    }
}
