public void testPrototypeDeclaredWithQuotesWarning() {
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);

    // Source code
    String code = "/** @constructor */\n" +
                  "function MyClass() {}\n" +
                  "MyClass.prototype[\"MyMethod\"] = function(a) {\n" +
                  " this.a = a;\n" +
                  "}\n" +
                  "window[\"MyClass\"] = MyClass;";

    // Externs
    String externs = "/**@interface */\n" +
                     "function MyParent() {}\n" +
                     "/** @param {*} a */\n" +
                     "MyParent.prototype.MyMethod = function(a) {}";

    // Process compilation
    Result result = compiler.compile(
        CommandLineRunner.getDefaultExterns(compiler.getOptions()), 
        ImmutableList.of(SourceFile.fromCode("externs", externs), SourceFile.fromCode("test", code)), 
        options
    );

    // Check warnings
    boolean foundGlobalThisWarning = false;
    for (JSError error : result.warnings) {
        if (error.getType().key.equals("JSC_USED_GLOBAL_THIS")) {
            foundGlobalThisWarning = true;
            break;
        }
    }

    assertTrue("Expected JSC_USED_GLOBAL_THIS warning.", foundGlobalThisWarning);
}