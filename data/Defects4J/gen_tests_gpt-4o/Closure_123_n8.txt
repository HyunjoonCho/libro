
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.Compiler;
import org.junit.Test;
import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testForInLeftHandSyntaxError() {
        // The source code to be compiled
        String jsSource = "window.Foo = function(A, B, C, D) { "
                        + "if ( A ) { "
                        + "if ( B ) { "
                        + "C = 0; "
                        + "} else { "
                        + "C = 0 in D; "
                        + "} "
                        + "while ( C-- ) {} "
                        + "} "
                        + "}";

        // Expected compiled output (correct syntax)
        String expectedOutput = "window.Foo=function(b,c,a,d){if(b)for(a=c?0:(0 in d);a--;);}";

        // Compiler setup
        Compiler compiler = new Compiler();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(compiler.getOptions());
        
        // Source files
        JSSourceFile[] externs = CommandLineRunner.getDefaultExterns();
        JSSourceFile[] inputs = { JSSourceFile.fromCode("test", jsSource) };

        // Compile and get result
        Result result = compiler.compile(externs, inputs, compiler.getOptions());

        // Check for compilation success
        assertTrue(result.success);

        // Get compiled code
        String compiledCode = compiler.toSource();

        // Check if compiled output matches expected (if it were correct)
        assertEquals(expectedOutput, compiledCode);
    }
}
