
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class JacksonPolymorphicTypeIssueTest {

    private static class CommandAPDU {

        /** @serial */
        private byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
            this.apdu = apdu.clone();
        }
        
        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }
        
        // Other methods, such as 'parse()', which may be part of the real class, are omitted.
    }

    @Test
    public void testPolymorphicTypeWithJsonValue() throws Exception {
        // Configure the ObjectMapper
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();

        // Create an instance of CommandAPDU
        byte[] apduData = new byte[]{1, 2, 3, 4, 5};
        CommandAPDU original = new CommandAPDU(apduData);

        // Serialize the CommandAPDU instance
        String json = mapper.writeValueAsString(original);
        
        // Assert the json representation contains typing information
        assert json.contains("[B"); // The type information expected to be improper
        
        // Deserialize the JSON back into CommandAPDU
        CommandAPDU deserialized = mapper.readValue(json, CommandAPDU.class);
        
        // Assert equivalent contents between original and deserialized object, if desired
        assertEquals(new String(original.getBytes()), new String(deserialized.getBytes()));
        
        // Further checks could include verifying that deserialization was incorrect and failed
        // to maintain expected object identity due to type issues.
    }
}
