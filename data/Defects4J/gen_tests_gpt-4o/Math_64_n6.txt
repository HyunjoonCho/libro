public void testLevenbergMarquardtInconsistentResult() {
    // Assuming LevenbergMarquardtOptimizer and specific test function are properly defined elsewhere in the test suite
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    MultivariateDifferentiableVectorFunction testFunction = new TestFunction();

    double[] startPoint = {1.0, 1.0}; // Example starting point
    double[] target = {0.0, 0.0};     // Example target values
    double[] weights = {1.0, 1.0};    // Example weights

    VectorialPointValuePair result = optimizer.doOptimize();

    // These assertions are based on the expectation that result.getPoint() should correspond to the optimum
    double[] residuals = calculateResiduals(result.getPoint(), testFunction, target);
    double expectedCost = calculateCost(residuals, weights);

    assertArrayEquals("Residuals do not match expected point.", result.getResiduals(), residuals, 1e-6);
    assertEquals("Cost does not match expectation.", expectedCost, result.getCost(), 1e-6);
}

private double[] calculateResiduals(double[] point, MultivariateDifferentiableVectorFunction function, double[] target) {
    double[] value = function.value(point);
    double[] residuals = new double[value.length];
    for (int i = 0; i < value.length; i++) {
        residuals[i] = target[i] - value[i];
    }
    return residuals;
}

private double calculateCost(double[] residuals, double[] weights) {
    double cost = 0.0;
    for (int i = 0; i < residuals.length; i++) {
        cost += weights[i] * residuals[i] * residuals[i];
    }
    return cost;
}