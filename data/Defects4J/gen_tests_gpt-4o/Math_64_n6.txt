
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.util.Pair;
import org.junit.Test;
import static org.junit.Assert.*;

public class LevenbergMarquardtBugTest {
    
    @Test
    public void testLevenbergMarquardtInconsistency() {
        // Define an example objective function
        MultivariateJacobianFunction model = new MultivariateJacobianFunction() {
            public Pair<RealVector, RealVector> value(RealVector point) {
                double[] values = new double[] {
                    point.getEntry(0) * 2 + point.getEntry(1),
                    point.getEntry(0) + point.getEntry(1) * 2
                };
                double[] jacobian = new double[] {
                    2, 1,
                    1, 2
                };
                return new Pair<>(new ArrayRealVector(values), new ArrayRealVector(jacobian));
            }
        };

        // Create a least squares problem
        LeastSquaresProblem problem = new LeastSquaresBuilder()
            .start(new double[] {0, 0}) // Initial guess
            .model(model)
            .target(new double[] {5, 7}) // Target values
            .lazyEvaluation(false)
            .maxEvaluations(1000)
            .maxIterations(1000)
            .build();

        // Optimize using Levenberg-Marquardt
        LeastSquaresOptimizer optimizer = new LevenbergMarquardtOptimizer();
        LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problem);

        // Retrieve results
        double[] optimizedPoint = optimum.getPoint().toArray();
        double[] residuals = optimum.getResiduals().toArray();
        double cost = optimum.getRMS();

        // Perform some checks for consistency
        assertNotNull(optimizedPoint);
        
        // Example assertion to check if the optimized point matches the expected
        assertEquals(5.0, model.value(new ArrayRealVector(optimizedPoint)).getFirst().getEntry(0), 1e-5);
        assertEquals(7.0, model.value(new ArrayRealVector(optimizedPoint)).getFirst().getEntry(1), 1e-5);

        // Ensure cost and residuals calculated from the optimum are consistent
        assertFalse(Double.isNaN(cost));
    }
}
