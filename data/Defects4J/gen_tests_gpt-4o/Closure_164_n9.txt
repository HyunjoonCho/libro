public void testFunctionTypeAssignments() {
    // Define the types using a functional interface for testing
    FunctionalInterfaceWithParams func = (param) -> true;
    FunctionalInterfaceTwoParams paramFunc1 = (s, n) -> true;
    FunctionalInterfaceOneParam paramFunc2 = (s) -> true;

    // First call: expecting no issue as paramFunc1 matches func's param signature
    func.apply(paramFunc1);

    // Second call: should cause an issue as paramFunc2 does not fully match func's param signature
    // Expecting a compilation failure or assertion error here
    assertThrows(IllegalArgumentException.class, () -> func.apply(paramFunc2));
}

@FunctionalInterface
interface FunctionalInterfaceWithParams {
    boolean apply(Object param); // This should reflect the condition being tested, though we cannot reproduce compile errors exactly
}

@FunctionalInterface
interface FunctionalInterfaceTwoParams {
    boolean execute(String s, int n);
}

@FunctionalInterface
interface FunctionalInterfaceOneParam {
    boolean execute(String s);
}