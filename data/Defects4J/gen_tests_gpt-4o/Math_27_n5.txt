
import org.apache.commons.lang3.math.Fraction;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import org.junit.Test;

public class FractionPercentageValueTest {

    @Test
    public void testPercentageValueOverflow() {
        // Creating a fraction that could cause overflow in percentageValue()
        try {
            Fraction fraction = Fraction.getFraction(Integer.MAX_VALUE / 100 + 1, 1);
            // The expected percentage value should still be correct
            double expectedPercentage = ((double) fraction.getNumerator() / fraction.getDenominator()) * 100;

            // Running percentageValue() method which should not overflow but match expectedPercentage
            double percentageValue = fraction.percentageValue();

            assertEquals("Percentage value did not match expected result due to overflow.", 
                         expectedPercentage, percentageValue, 0.0001);
        } catch (ArithmeticException e) {
            fail("The method caused an overflow: " + e.getMessage());
        }
    }
}
