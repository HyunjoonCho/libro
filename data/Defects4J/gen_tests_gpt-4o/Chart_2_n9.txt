
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DatasetUtilities;
import org.junit.Test;

public class DatasetUtilitiesTest {
    
    @Test
    public void testIterateRangeBoundsForEmptyDataset() {
        CategoryDataset dataset = new DefaultCategoryDataset();
        Range range = DatasetUtilities.iterateRangeBounds(dataset);
        assertNull("Range should be null for an empty dataset", range);
    }

    @Test
    public void testIterateRangeBoundsForSingleValue() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(5.0, "Row1", "Col1");
        Range range = DatasetUtilities.iterateRangeBounds(dataset);
        assertEquals("Range lower bound should be 5.0", 5.0, range.getLowerBound(), 0.0001);
        assertEquals("Range upper bound should be 5.0", 5.0, range.getUpperBound(), 0.0001);
    }

    @Test
    public void testIterateRangeBoundsForNegativeValues() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(-10.0, "Row1", "Col1");
        dataset.addValue(-5.0, "Row1", "Col2");
        Range range = DatasetUtilities.iterateRangeBounds(dataset);
        assertEquals("Range lower bound should be -10.0", -10.0, range.getLowerBound(), 0.0001);
        assertEquals("Range upper bound should be -5.0", -5.0, range.getUpperBound(), 0.0001);
    }

    @Test
    public void testIterateRangeBoundsForMixedValues() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(-10.0, "Row1", "Col1");
        dataset.addValue(20.0, "Row1", "Col2");
        Range range = DatasetUtilities.iterateRangeBounds(dataset);
        assertEquals("Range lower bound should be -10.0", -10.0, range.getLowerBound(), 0.0001);
        assertEquals("Range upper bound should be 20.0", 20.0, range.getUpperBound(), 0.0001);
    }
}
