
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class JsonParserSequenceTest {

    @Test
    public void testJsonParserSequenceSkipsToken() throws IOException {
        JsonFactory factory = new JsonFactory();

        // First parser with an empty JSON Array
        JsonParser parser1 = factory.createParser("[]");

        // Second parser with a simple JSON object
        JsonParser parser2 = factory.createParser("{\"key\":\"value\"}");

        // Create a parser sequence with these two parsers
        JsonParserSequence parserSequence = JsonParserSequence.createFlattened(false, parser1, parser2);

        // Move to the start of the array in the first parser
        assertEquals(JsonToken.START_ARRAY, parserSequence.nextToken());

        // Move to the end of the array in the first parser
        assertEquals(JsonToken.END_ARRAY, parserSequence.nextToken());

        // Now we should be at the start of the object in the second parser
        assertEquals(JsonToken.START_OBJECT, parserSequence.nextToken());
        
        // Assert that this token is "FIELD_NAME" and its value is "key"
        assertEquals(JsonToken.FIELD_NAME, parserSequence.currentToken());
        assertEquals("key", parserSequence.getCurrentName());

        // Move to the value token of "key"
        assertEquals(JsonToken.VALUE_STRING, parserSequence.nextToken());
        assertEquals("value", parserSequence.getText());

        // Move to the end of the object
        assertEquals(JsonToken.END_OBJECT, parserSequence.nextToken());
    }
}
