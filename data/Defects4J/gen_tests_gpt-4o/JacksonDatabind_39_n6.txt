public void testJacksonDeserializationContinueAfterFailOnInvalidSubtype() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper()
        .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                 DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                 DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord record = objectMapper.readValue(json, CallRecord.class);
    assertEquals(0.0f, record.version, 0.0f);
    assertEquals("123", record.application);
    assertNull(record.item); // Assuming 'xevent' is an invalid subtype, it should be null
    assertNotNull(record.item2); // 'event' is valid so item2 should be parsed
    assertEquals("location1", ((Event)record.item2).location);

    json = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}}";
    record = objectMapper.readValue(json, CallRecord.class);
    assertEquals("123", record.application);
    assertNull(record.item); // 'xevent' should cause item to be null

    json = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, \"version\":0.0,\"application\":\"123\"}";
    record = objectMapper.readValue(json, CallRecord.class);
    assertEquals(0.0f, record.version, 0.0f);
    assertEquals("123", record.application);
    assertNull(record.item); // 'xevent' should cause item to be null
}