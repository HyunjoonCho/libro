
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.IOException;
import java.io.StringReader;

import static org.junit.Assert.assertEquals;

public class CSVFormatTest {

    @Test
    public void testCSVFormatExcelWithEmptyHeaderNames() throws IOException {
        String csvContent = "A,B,C,,\n" +
                            "a,b,c,d,e\n";
        CSVParser parser = null;

        try {
            parser = CSVParser.parse(new StringReader(csvContent), CSVFormat.EXCEL.withFirstRecordAsHeader());
            for (CSVRecord record : parser) {
                // Expect no exception is thrown, ignore columns with empty header names
                assertEquals("a", record.get("A"));
                assertEquals("b", record.get("B"));
                assertEquals("c", record.get("C"));
                // Attempts to access the empty header columns should not throw exception
                // but these assertions ensure we only access non-empty headers
            }
        } catch (IllegalArgumentException e) {
            // Fail the test if an IllegalArgumentException is thrown due to empty header names
            throw new AssertionError("Test failed due to IllegalArgumentException: " + e.getMessage());
        } finally {
            if (parser != null) {
                parser.close();
            }
        }
    }
}
