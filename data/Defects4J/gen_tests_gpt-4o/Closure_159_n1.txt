
import com.google.javascript.jscomp.*;

public class ClosureCompilerFunctionNameTest {
  
    public void testFunctionNameTranslation() {
        String jsCode = "function preload_check_all() {\n" +
                        "  // function implementation\n" +
                        "}\n" +
                        "preload_check_all();";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        SourceFile extern = SourceFile.fromCode("externs.js", "");

        compiler.compile(extern, input, options);

        String compiledCode = compiler.toSource();

        // Check that both the function declaration and the call are appropriately translated
        boolean functionNameChanged = !compiledCode.contains("preload_check_all");
        assertTrue("Function name was not consistently changed in the compiled code", functionNameChanged);
    }
    
    private void assertTrue(String message, boolean condition) {
        if (!condition) {
            throw new AssertionError(message);
        }
    }
    
    public static void main(String[] args) {
        ClosureCompilerFunctionNameTest test = new ClosureCompilerFunctionNameTest();
        test.testFunctionNameTranslation();
        System.out.println("Test completed successfully.");
    }
}
