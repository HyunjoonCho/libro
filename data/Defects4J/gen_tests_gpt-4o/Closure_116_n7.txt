
import org.junit.Test;
import java.io.*;
import java.util.concurrent.TimeUnit;

import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testAdvancedOptimizations() throws IOException, InterruptedException {
        // Path to the Closure Compiler jar file
        String closureCompilerPath = "/path/to/compiler.jar";

        // Define the input JavaScript
        String inputJS = "window[\"anchor\"] = function (obj, modifiesProp) { " +
                         "return (function (saved) { " +
                         "return modifiesProp(obj) + saved; " +
                         "})(obj[\"prop\"]); " +
                         "}";

        // Write the input JavaScript to a temporary file
        File inputFile = File.createTempFile("input", ".js");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(inputFile))) {
            writer.write(inputJS);
        }

        // Output file
        File outputFile = File.createTempFile("output", ".js");

        // Prepare the compilation command
        ProcessBuilder pb = new ProcessBuilder("java", "-jar", closureCompilerPath,
                "--compilation_level", "ADVANCED_OPTIMIZATIONS",
                "--warning_level", "VERBOSE",
                "--externs", "window.js", // Assuming window.js is available in the working directory
                "--js", inputFile.getAbsolutePath(),
                "--js_output_file", outputFile.getAbsolutePath());

        // Run the compiler
        Process process = pb.start();
        process.waitFor(5, TimeUnit.SECONDS);

        // Read the compiled result
        String compiledJS;
        try (BufferedReader reader = new BufferedReader(new FileReader(outputFile))) {
            compiledJS = reader.readLine();
        }

        // Expected Output JS
        String expectedOutputJS = "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};";

        // Assert that the compiled JS matches the expected output
        assertEquals(expectedOutputJS, compiledJS);
    }
}
