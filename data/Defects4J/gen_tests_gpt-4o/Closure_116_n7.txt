public void testErroneousOptimizationInAdvancedMode() {
    // Simulate the compilation and execute the result to verify the issue
    String originalFunction = 
        "window['anchor'] = function (obj, modifiesProp) {" +
        "  return (function (saved) {" +
        "    return modifiesProp(obj) + saved;" +
        "  })(obj['prop']);" +
        "}";
    
    // Simulated execution result after erroneous optimization
    String optimizedFunctionResult = "modifiesProp(obj) + obj.prop;";

    // Initialize test variables
    Map<String, Integer> testObj = new HashMap<>();
    testObj.put("prop", 10);

    AnchorFunction anchorFunction = new AnchorFunction();
    Integer modifiedProp = 5;

    // When modifications take place, the final result should be influenced by the order
    Integer resultAfterErroneousOptimization = applyAnchorFunction(anchorFunction, testObj,
                                                                   x -> {
                                                                       x.put("prop", modifiedProp);
                                                                       return 20;
                                                                   });
    
    Integer expectedCorrectResult = 30; // The saved value 10 + 20 from modifiesProp()
    
    // Assert that the result after erroneous optimization is different from the expected
    assertFalse(expectedCorrectResult.equals(resultAfterErroneousOptimization));
}

private class AnchorFunction {
    public int apply(Map<String, Integer> obj, Function<Map<String, Integer>, Integer> modifiesProp) {
        Integer saved = obj.get("prop");
        return modifiesProp.apply(obj) + saved;
    }
}