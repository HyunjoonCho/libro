
import static org.junit.Assert.assertEquals;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;

public class DateTimeZoneDSTTest {

    @Test
    public void testAmbiguousDSTTransition() {
        // Create the DateTimeZone instance for America/Los_Angeles
        DateTimeZone zone = DateTimeZone.forID("America/Los_Angeles");

        // Create DateTime instances to check during the DST transition
        // 1:30 AM is ambiguous due to the DST change
        DateTime when1 = new DateTime(2009, 11, 1, 0, 30, 0, 0, zone);
        DateTime when2 = new DateTime(2009, 11, 1, 1, 30, 0, 0, zone);
        DateTime when3 = new DateTime(2009, 11, 1, 2, 30, 0, 0, zone);

        // Check the offset for each of the DateTime instances
        assertEquals(when1.getOffset(), DateTimeZone.forOffsetHours(-7).getOffset(when1));
        assertEquals(when2.getOffset(), DateTimeZone.forOffsetHours(-8).getOffset(when2)); // Expected to be -08:00
        assertEquals(when3.getOffset(), DateTimeZone.forOffsetHours(-8).getOffset(when3));

        // Print out the results for verification
        System.out.println("when1: " + when1); // 2009-11-01T00:30:00.000-07:00 Expected
        System.out.println("when2: " + when2); // 2009-11-01T01:30:00.000-08:00 Expected (-8:00 after ambiguity)
        System.out.println("when3: " + when3); // 2009-11-01T02:30:00.000-08:00 Expected
    }
}
