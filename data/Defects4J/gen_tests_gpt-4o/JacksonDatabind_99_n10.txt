
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.LRUMap;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.ReferenceType;

// Assume PlaceholderForType is a valid class available in your codebase
class PlaceholderForType extends JavaType {
    protected PlaceholderForType(int index) {
        super(Object.class, index);
    }

    @Override
    public StringBuilder getGenericSignature(StringBuilder sb) {
        sb.append('$').append(super.getIndex());
        return sb;
    }

    @Override
    public JavaType withContentType(JavaType contentType) {
        return null; // Simplified implementation
    }
}

public class ReferenceTypeTest {

    @Test
    public void testReferenceTypeCanonicalString() {
        LRUMap<Object, JavaType> lruMap = new LRUMap<>(0, 10000);
        TypeFactory typeFactory = new TypeFactory(lruMap);
        JavaType baseType = typeFactory.constructType(Object.class);

        ReferenceType referenceType = new ReferenceType(baseType, new PlaceholderForType(0));

        String expectedCanonical = "java.lang.Object<$1>";
        String actualCanonical = referenceType.toCanonical();

        assertEquals(expectedCanonical, actualCanonical);
    }
}
