
import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.doAnswer;
import static org.mockito.Mockito.when;

public class MockitoAbstractClassTest {

    interface UserAccount {
        List<String> getEmails();
        void addEmail(String email);
    }

    abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        public List<String> getEmails() {
            return new ArrayList<>(emails);
        }
    }

    interface AccountService {
        void getAccount(String id, AsyncCallback<UserAccount> callback);
    }

    abstract class MockAccountService implements AccountService {
        @Override
        public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }

        abstract UserAccount getAccount(String id);
    }

    interface AsyncCallback<T> {
        void onSuccess(T result);
    }

    @Test
    public void testFakeUserAccount() {
        FakeUserAccount userAccount = Mockito.mock(FakeUserAccount.class,
                Mockito.withSettings().useConstructor().defaultAnswer(Mockito.CALLS_REAL_METHODS));

        userAccount.addEmail("test@example.com");
        assertEquals(1, userAccount.getEmails().size());
        assertEquals("test@example.com", userAccount.getEmails().get(0));
    }

    @Test
    public void testMockAccountService() {
        MockAccountService service = Mockito.mock(MockAccountService.class,
                Mockito.withSettings().useConstructor().defaultAnswer(Mockito.CALLS_REAL_METHODS));

        UserAccount mockAccount = Mockito.mock(UserAccount.class);
        when(service.getAccount("123")).thenReturn(mockAccount);

        doAnswer(new Answer<Void>() {
            public Void answer(InvocationOnMock invocation) {
                AsyncCallback<UserAccount> callback = invocation.getArgument(1);
                callback.onSuccess(mockAccount);
                return null;
            }
        }).when(service).getAccount(any(String.class), any(AsyncCallback.class));

        // Simulate callback handling
        service.getAccount("123", new AsyncCallback<>() {
            @Override
            public void onSuccess(UserAccount result) {
                assertEquals(mockAccount, result);
            }
        });
    }
}
