
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.Token;

public class CompilerTest {
    public static void main(String[] args) {
        // Configure the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Source code string that reproduces the issue
        String sourceCode = ""
                + "goog.provide('Foo');\n"
                + "goog.provide('Bar');\n"
                + "\n"
                + "function Foo() {}\n"
                + "\n"
                + "/**\n"
                + " * @param {number} a\n"
                + " * @param {number} b\n"
                + " * @return {number}\n"
                + " */\n"
                + "Foo.prototype.add = function(a, b) {\n"
                + "  return a + b;\n"
                + "};\n"
                + "\n"
                + "/**\n"
                + " * @param {number} a\n"
                + " * @param {number} b\n"
                + " * @return {number}\n"
                + " */\n"
                + "Foo.prototype.sub = goog.abstractMethod;\n"
                + "\n"
                + "/**\n"
                + " * @constructor\n"
                + " * @extends {Foo}\n"
                + " */\n"
                + "function Bar() {\n"
                + "  Foo.call(this);\n"
                + "}\n"
                + "Bar.prototype = Object.create(Foo.prototype);\n"
                + "Bar.prototype.constructor = Bar;\n"
                + "\n"
                + "/** @inheritDoc */\n"
                + "Bar.prototype.add = function(one) {\n"
                + "  return one;\n"
                + "};\n"
                + "\n"
                + "/** @inheritDoc */\n"
                + "Bar.prototype.sub = function(one) {\n"
                + "  return one;\n"
                + "};\n"
                + "\n"
                + "var foo = /** @type {Foo} */ (new Bar());\n"
                + "alert(foo.add(3, 4));\n"
                + "\n"
                + "var bar = new Bar();\n"
                + "// THIS PRODUCES JSC_WRONG_ARGUMENT_COUNT\n"
                + "alert(bar.add(3, 4));\n";

        SourceFile sourceFile = SourceFile.fromCode("test.js", sourceCode);
        
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), sourceFile, options);

        // Print the results
        if (result.success) {
            System.out.println("Compilation succeeded, but expected warnings were not triggered.");
        } else {
            System.out.println("Compilation failed with errors/warnings:");
            for (JSError warning : result.warnings) {
                System.out.println("Warning: " + warning);
            }
            for (JSError error : result.errors) {
                System.out.println("Error: " + error);
            }
        }
    }
}
