
import com.fasterxml.jackson.databind.util.StdDateFormat;
import org.junit.Test;

import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class LargeYearDateFormatTest {

    @Test
    public void testLargeYearDateFormatting() {
        StdDateFormat formatter = new StdDateFormat();
        
        // Create a Date with a large year value by setting it explicitly using Calendar
        Calendar calendar = Calendar.getInstance();
        calendar.clear();
        calendar.set(10000, Calendar.JANUARY, 1, 0, 0, 0); // Year 10000

        try {
            Date date = calendar.getTime();
            String formattedDate = formatter.format(date);
            System.out.println("Formatted Date: " + formattedDate);
            
            // Re-parse the formatted date string
            Date parsedDate = formatter.parse(formattedDate);
            
            // Verify that the parsed date matches the original date 
            // (This step might not work correctly if the implementation is broken)
            assertEquals(date, parsedDate);
        } catch (ParseException e) {
            fail("Parsing failed: " + e.getMessage());
        } catch (Exception e) {
            // Check if "Year not within the range" exception is thrown
            if (!e.getMessage().contains("Year not within the range")) {
                fail("Unexpected exception: " + e.getMessage());
            }
        }
    }
}
