
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import java.io.IOException;
import java.util.Map;
import java.util.UUID;

import static org.junit.Assert.assertNotNull;

public class JsonDeserializeTest {

    static class MyHashMap<K, V> extends java.util.HashMap<K, V> {
        // Custom logic assuming some generic processing, omitted for brevity
    }

    interface MyCustomIdInterface {
        UUID getId();
    }

    static class Foo implements MyCustomIdInterface {
        private final UUID id;
        private final String property;

        @JsonCreator
        public Foo(@JsonProperty("id") UUID id, @JsonProperty("property") String property) {
            this.id = id;
            this.property = property;
        }

        @Override
        public UUID getId() {
            return id;
        }

        public String getProperty() {
            return property;
        }
    }

    static class Container {
        @JsonDeserialize(as = MyHashMap.class)
        private Map<UUID, Foo> something;

        public Map<UUID, Foo> getSomething() {
            return something;
        }

        public void setSomething(Map<UUID, Foo> incomingValue) {
            this.something = incomingValue;
        }
    }

    @Test
    public void testDeserializationIssue() throws IOException {
        String json = "{ \"something\": [ { \"id\": \"1e4d345e-5b7d-4c58-a3a9-939df1e6e12a\", \"property\": \"value\" } ] }";
        ObjectMapper mapper = new ObjectMapper();
        
        try {
            Container container = mapper.readValue(json, Container.class);
            assertNotNull(container.getSomething());
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            throw e; // Re-throw to fail the test if exception occurs
        }
    }
}
