public void testMapDeserializationWithJsonDeserializeAnnotation() throws Exception {
    ObjectMapper objectMapper = new ObjectMapper();

    String json = "{ \"something\": [{ \"id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\", \"property\": \"value\" }] }";

    Exception exception = null;
    try {
        objectMapper.readValue(json, TestClass.class);
    } catch (Exception e) {
        exception = e;
    }

    assertNotNull("Expected deserialization to throw an exception", exception);
    assertTrue(exception.getMessage().contains("Can not construct instance of MyCustomIdInterface"));
}

static class TestClass {
    @JsonDeserialize(as = MyHashMap.class)
    private void setSomething(Map<UUID, Foo> incomingValue) {
        // Setter logic
    }
}

static class MyHashMap<K, V extends MyCustomIdInterface> extends HashMap<K, V> {
    // Custom logic for mapping and enforcement
}

interface MyCustomIdInterface {
    String getId();
}

static class Foo implements MyCustomIdInterface {
    private UUID id;
    private String property;

    @Override
    public String getId() {
        return id.toString();
    }
}