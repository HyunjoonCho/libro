
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.junit.Test;

import java.text.SimpleDateFormat;
import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class ObjectMapperDateFormatTest {

    @Test
    public void testDateFormatTimeZoneInJackson() throws JsonProcessingException {
        ObjectMapper mapper = createObjectMapper();

        DateTime dateTime = new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC);
        String json = mapper.writeValueAsString(dateTime);

        TimeZone expectedTimeZone = TimeZone.getTimeZone("GMT");
        assertEquals(expectedTimeZone, mapper.getSerializationConfig().getTimeZone());

        String expectedJsonV254 = "\"1988-06-25 20:30:00\"";
        String expectedJsonV260 = "\"1988-06-25 21:30:00\"";

        // We cannot dynamically test against different dependencies in a single test case,
        // instead, use appropriate assertions based on the Jackson version you are testing.
        // Uncomment the appropriate assertion line below for your specific version test:

        // Test expectation for Jackson 2.5.4
        // assertEquals(expectedJsonV254, json);

        // Test expectation for Jackson 2.6.0
        assertEquals(expectedJsonV260, json);
    }

    private ObjectMapper createObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(createJodaModule());
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        
        // Printing timezone before and after setting the DateFormat
        System.out.println("Timezone before setting DateFormat: " + mapper.getSerializationConfig().getTimeZone());
        
        // Set the DateFormat and observe the timezone change
        mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
        
        System.out.println("Timezone after setting DateFormat: " + mapper.getSerializationConfig().getTimeZone());

        return mapper;
    }

    private SimpleModule createJodaModule() {
        SimpleModule module = new SimpleModule();
        module.addSerializer(DateTime.class, new DateTimeSerializer(
            new com.fasterxml.jackson.datatype.joda.cfg.JacksonJodaDateFormat(
                DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss")
                    .withZoneUTC())
        ));
        return module;
    }
}
