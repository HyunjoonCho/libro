script
// Import the Closure Library and Compiler (assuming they are available)

goog.provide('test.googIsArray');

goog.require('goog.isArray');

/**
 * @param {*} object
 * @return {*}
 */
test.googIsArray.checkType = function(object) {
  if (goog.isArray(object)) {
    /** @type {Array} */ var x = object;
    return x;
  }
  
  return null;
};

// Setting up to run the Closure Compiler
const compileTest = () => {
  const closureCompiler = require('google-closure-compiler').gulp();

  const gulp = require('gulp');
  const gulpReplace = require('gulp-replace');

  // The test script
  const testScript = `
    goog.provide('test.googIsArray');
    goog.require('goog.isArray');

    /**
     * @param {*} object
     * @return {*}
     */
    test.googIsArray.checkType = function(object) {
      if (goog.isArray(object)) {
        /** @type {Array} */ var x = object;
        return x;
      }
      return null;
    };

    test.googIsArray.checkType([]);
  `;

  // Running the compiler with advanced optimizations
  gulp.src('src/**/*.js')
      .pipe(gulpReplace(/^/, testScript))
      .pipe(closureCompiler({
        compilation_level: 'ADVANCED_OPTIMIZATIONS',
        js_output_file: 'compiled.js'
      }))
      .pipe(gulp.dest('./dist'));
};

compileTest();
