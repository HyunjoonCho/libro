
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optim.ConvergenceChecker;
import org.junit.Test;

public class LevenbergMarquardtOptimizerTest {

    private static class CustomConvergenceChecker implements ConvergenceChecker<LeastSquaresProblem.Evaluation> {
        private boolean called = false;

        @Override
        public boolean converged(int iteration, Evaluation previous, Evaluation current) {
            called = true; // We track if this method is called
            // Custom convergence logic (for illustration, we just stop after 1 iteration)
            return iteration > 1;
        }

        public boolean wasCalled() {
            return called;
        }
    }

    @Test
    public void testCustomConvergenceChecker() {
        CustomConvergenceChecker checker = new CustomConvergenceChecker();

        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer()
                .withConvergenceChecker(checker);

        // Define a simple least squares problem
        LeastSquaresProblem problem = new LeastSquaresProblem() {
            @Override
            public int getObservationSize() {
                return 0;
            }

            @Override
            public int getParameterSize() {
                return 0;
            }

            @Override
            public RealVector getStart() {
                return null;
            }

            @Override
            public Evaluation evaluate(RealVector point) {
                return new Evaluation() {
                    @Override
                    public RealVector getResiduals() {
                        return null;
                    }

                    @Override
                    public RealMatrix getJacobian() {
                        return null;
                    }

                    @Override
                    public double getRMS() {
                        return 0;
                    }

                    @Override
                    public RealVector getPoint() {
                        return null;
                    }
                };
            }

            @Override
            public ConvergenceChecker<Evaluation> getConvergenceChecker() {
                return checker;
            }

            @Override
            public int getMaxEvaluations() {
                return 10;
            }

            @Override
            public int getMaxIterations() {
                return 10;
            }
        };

        optimizer.optimize(problem);

        // If the convergence checker was utilized, this should be true
        assertTrue("Custom convergence checker was not utilized", checker.wasCalled());
    }
}
