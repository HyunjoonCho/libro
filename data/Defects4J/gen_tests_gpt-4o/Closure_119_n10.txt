
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testCatchWithAdvancedCompilation() {
        // Source code to be compiled
        String jsCode = 
            "try {" +
            "  var x = 5;" +
            "} catch(e) {" +
            "  var s = 'FAIL' + e.name + ': ' + e.message;" +
            "}";

        // Set up the compiler
        Compiler compiler = new Compiler();

        // Set up compiler options for advanced compilation
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JS code
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        Result result = compiler.compile(extern, input, options);

        // Check if there were any errors
        boolean hasErrors = result.errors.length > 0;

        // We expect that there will be warnings/errors
        assertTrue(hasErrors);

        // Check specifically for the warnings/messages related to the issue
        boolean hasUndefinedNameError = false;
        for (JSError error : result.errors) {
            if (error.description.contains("is never defined")) {
                hasUndefinedNameError = true;
                break;
            }
        }

        assertTrue("Expected JSC_UNDEFINED_NAME warning was not found.", hasUndefinedNameError);
    }
}
