
import static org.junit.Assert.assertTrue;

import com.google.javascript.jscomp.CommandLineRunner;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testMinificationWithoutStringEscaping() throws IOException {
        // Create a sample JavaScript file with non-ASCII content
        String jsContent = "var patterns = 'äbcdefghijklmnopqrstuvwxyzöäü';";
        File inputFile = File.createTempFile("input", ".js");
        try (FileWriter writer = new FileWriter(inputFile)) {
            writer.write(jsContent);
        }

        // Create options for closure compiler
        String[] args = {
            "--compilation_level", "SIMPLE_OPTIMIZATIONS",
            "--charset", "UTF-8",
            "--js", inputFile.getAbsolutePath()
        };

        // Run closure compiler
        CommandLineRunner runner = new CommandLineRunner(args);
        int result = runner.run();

        // Assert the compiled size is reasonable
        File outputFile = new File(inputFile.getParent(), inputFile.getName().replace(".js", ".min.js"));
        assertTrue("Compilation should succeed", result == 0);
        assertTrue("Compiled file should be smaller than the original",
                outputFile.length() < inputFile.length());

        // Cleanup
        inputFile.delete();
        outputFile.delete();
    }
}
