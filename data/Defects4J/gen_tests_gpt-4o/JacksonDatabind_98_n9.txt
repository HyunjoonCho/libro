
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

// Enum representing the kind of object
enum Kind {
    CONTACT, OTHER;
}

// Base class with type information
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "kind")
@JsonSubTypes({
    @JsonSubTypes.Type(value = Contact.class, name = "CONTACT")
})
interface InviteMixIn { }

// Implementation class
class Contact {
    public String name;

    @JsonCreator
    public Contact(String name) {
        this.name = name;
    }
}

// Class we are attempting to deserialize
class Invite {
    public Kind kind;
    public Contact to;
}

public class ExternalPropertyPolymorphicTest {

    @Test
    public void testPolymorphicDeserializationWithExternalProperty() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // Bind the mix-in to introduce type handling based on external property
        objectMapper.addMixIn(Invite.class, InviteMixIn.class);

        String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";

        Invite invite = objectMapper.readValue(json, Invite.class);
        
        // Assertions to verify that deserialization works as expected
        assertEquals(Kind.CONTACT, invite.kind);
        assertEquals("Foo", invite.to.name);
    }
}
