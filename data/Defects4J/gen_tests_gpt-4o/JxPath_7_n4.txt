
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.junit.Test;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.StringReader;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.fail;

public class XPathComparisonTest {

    @Test
    public void testBinaryOperatorWithEmptyNodeSet() {
        try {
            // Set up a simple XML document for testing
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new InputSource(new StringReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<doc/>")));

            // Create a JXPathContext for the document
            JXPathContext pathContext = JXPathContext.newContext(doc);

            // Evaluate the XPath expression with a non-existing node
            Boolean result = (Boolean) pathContext.getValue("2.0 > child1", Boolean.class);

            // According to the bug report, the expected result is false since the node-set comparison should fail
            assertFalse("Expected result to be FALSE, because right operand node set is empty.", result.booleanValue());
        } catch (JXPathException e) {
            fail("An unexpected JXPathException occurred: " + e.getMessage());
        } catch (Exception e) {
            fail("An unexpected exception occurred: " + e.getMessage());
        }
    }
}
