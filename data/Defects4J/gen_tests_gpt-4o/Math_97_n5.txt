
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.junit.Test;
import static org.junit.Assert.*;

public class BrentSolverTest {

    @Test
    public void testBrentSolverHandlesZeroCrossingCorrectly() {
        // Define the function for which we will find the root
        UnivariateRealFunction function = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                // Let's create a simple linear function where f(-100000) = 0
                // and f(max) is negative, which should not throw exception
                return x + 100000;
            }
        };

        // Instantiate BrentSolver
        BrentSolver solver = new BrentSolver();

        try {
            // Solve the function on the interval where endpoints include 0
            double root = solver.solve(100, function, -100000.0, Double.MAX_VALUE);
            
            // Assert that the root is correctly identified as -100000
            assertEquals(-100000.0, root, 1e-9);
        } catch (IllegalArgumentException e) {
            fail("The exception should not be thrown when one endpoint is zero.");
        }
    }
}
