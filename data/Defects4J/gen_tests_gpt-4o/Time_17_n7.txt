
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;
import java.util.TimeZone;
import static org.junit.Assert.assertEquals;

public class DateTimeOverlapTest {

    @Test
    public void testWithLaterOffsetAtOverlap() {
        // Setting the default time zone to America/Sao_Paulo
        TimeZone.setDefault(TimeZone.getTimeZone("America/Sao_Paulo"));  
        DateTimeZone.setDefault(DateTimeZone.forID("America/Sao_Paulo"));

        // Create the DateTime at the end of day
        DateTime dtch = new DateTime(2012, 2, 25, 5, 5, 5, 5).millisOfDay().withMaximumValue();
        assertEquals("2012-02-25T23:59:59.999-02:00", dtch.toString());
        
        // Add a minute and one millisecond
        dtch = dtch.plus(60001);
        assertEquals("2012-02-25T23:01:00.000-03:00", dtch.toString());
        
        // Use withEarlierOffsetAtOverlap
        dtch = dtch.withEarlierOffsetAtOverlap();
        assertEquals("2012-02-25T23:01:00.000-02:00", dtch.toString());
        
        // Use withLaterOffsetAtOverlap and validate the offset behavior
        dtch = dtch.withLaterOffsetAtOverlap();
        // Expected to be "2012-02-25T23:01:00.000-03:00" after correcting the bug
        assertEquals("2012-02-25T23:01:00.000-03:00", dtch.toString());
    }
}
