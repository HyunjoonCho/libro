
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;
import org.junit.Assert;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class BZip2CompressorInputStreamTest {

    @Test
    public void testBZip2CompressorInputStreamReturnsNegativeOne() throws IOException {
        // Create random data
        byte[] rawData = new byte[1048576]; // 1 MB of random data
        for (int i = 0; i < rawData.length; ++i) {
            rawData[i] = (byte) Math.floor(Math.random() * 256);
        }

        // Compress the data
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos)) {
            bzipOut.write(rawData);
        }

        // Read compressed data back
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        try (BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais)) {
            byte[] buffer = new byte[1024];

            // This should correctly read 1024 bytes into the buffer
            Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));

            // Reading with length 0 should not return -1, but instead
            // indicate that no bytes were read (returning 0)
            Assert.assertEquals(0, bzipIn.read(buffer, 1024, 0));

            // Verify that subsequent reads still function correctly
            int bytesRead = bzipIn.read(buffer, 0, 1024);
            Assert.assertTrue(String.format("Expected more data but got %d bytes", bytesRead), bytesRead > 0);
        }
    }
}
