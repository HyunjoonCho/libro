
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Assert;
import org.junit.Test;

public class GlobalThisWarningTest {

    @Test
    public void testGlobalThisWarning() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Enable the specific diagnostic group for global 'this'.
        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, com.google.javascript.jscomp.CheckLevel.WARNING);

        String jsCode = ""
            + "var NS = {"
            + "  read: function() {"
            + "    return this.foo;"
            + "  },"
            + "  write: function() {"
            + "    this.foo = 123;"
            + "  }" 
            + "};"
            + "NS.write2 = function() {"
            + "  this.foo = 123;"
            + "};";

        // Run the compiler
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                         SourceFile.fromCode("test.js", jsCode), 
                                         options);

        // Check results
        Assert.assertTrue("Expected diagnostics count was not met!",
                          result.warnings.size() > 0);
        
        long globalThisWarnings = result.warnings.stream()
            .filter(warning -> warning.getType().key.equals("JSC_USED_GLOBAL_THIS"))
            .count();

        // Verify there are 'JSC_USED_GLOBAL_THIS' warnings in the methods
        Assert.assertEquals("Expected 3 'JSC_USED_GLOBAL_THIS' warnings in total", 3, globalThisWarnings);
    }
}
