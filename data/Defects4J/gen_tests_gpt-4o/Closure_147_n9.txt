public void testJSC_USED_GLOBAL_THISWarning() {
    String code = "var NS = {"
                + " read: function() {"
                + "   return this.foo;"
                + " },"
                + " write: function() {"
                + "   this.foo = 123;"
                + " }"
                + "};"
                + "NS.write2 = function() {"
                + " this.foo = 123;"
                + "};";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
    
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", code), options);

    JSError[] warnings = result.warnings;
    boolean foundReadWarning = false;
    boolean foundWriteWarning = false;
    boolean foundWrite2Warning = false;

    for (JSError warning : warnings) {
        if (warning.getDescription().contains("JSC_USED_GLOBAL_THIS")) {
            if (warning.sourceName.equals("test.js") && warning.lineNumber == 3) {
                foundReadWarning = true;
            } else if (warning.sourceName.equals("test.js") && warning.lineNumber == 7) {
                foundWriteWarning = true;
            } else if (warning.sourceName.equals("test.js") && warning.lineNumber == 12) {
                foundWrite2Warning = true;
            }
        }
    }

    assertTrue("Expected warning for NS.read()", foundReadWarning);
    assertTrue("Expected warning for NS.write()", foundWriteWarning);
    assertTrue("Expected warning for NS.write2()", foundWrite2Warning);
}