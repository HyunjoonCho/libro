public void testLevenbergMarquardtOptimizerIgnoresConvergenceChecker() {
    MultivariateVectorFunction modelFunction = point -> new double[] { point[0] };
    MultivariateDifferentiableVectorFunction function = new MultivariateDifferentiableVectorFunction() {
        public double[] value(double[] point) {
            return modelFunction.value(point);
        }

        public DerivativeStructure[] value(DerivativeStructure[] t) {
            return new DerivativeStructure[] { t[0] };
        }
    };

    VectorialConvergenceChecker convergenceChecker = (previous, current) -> {
        // Custom convergence condition that should trigger
        return (current.getPoint()[0] - previous.getPoint()[0]) < 0.1;
    };

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(1000, 1.0e-10, 1.0e-10);
    optimizer.setConvergenceChecker(convergenceChecker);

    PointVectorValuePair result = optimizer.optimize(
            new MaxEval(100),
            new Target(new double[] { 0 }),
            new InitialGuess(new double[] { 10 }),
            new ModelFunction(function),
            new ModelFunctionJacobian(point -> new double[][] { { 1 } })
    );

    assertTrue("The convergence checker was ignored", convergenceChecker.converged(null, result));
}