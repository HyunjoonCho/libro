
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.Optimum;
import org.apache.commons.math3.fitting.leastsquares.MultivariateJacobianFunction;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;

import org.junit.Test;
import static org.junit.Assert.*;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testVectorialConvergenceCheckerIsUsed() {
        // Create a dummy problem 
        MultivariateJacobianFunction model = new MultivariateJacobianFunction() {
            @Override
            public Pair<RealVector, RealMatrix> value(final RealVector params) {
                return new Pair<>(params, null);
            }
        };

        RealVector target = new ArrayRealVector(new double[] {1.0});
        RealVector start = new ArrayRealVector(new double[] {0.0});

        // Custom convergence checker that should enforce a single iteration
        LeastSquaresOptimizer.OptimumChecker checker = new LeastSquaresOptimizer.OptimumChecker() {
            @Override           
            public boolean converged(int iteration, LeastSquaresProblem.Evaluation previous, LeastSquaresProblem.Evaluation current) {
                // Stop optimization after a single iteration
                return iteration > 0;    
            }
        };
        
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer()
                .withChecker(checker);

        // Construct the least squares problem
        LeastSquaresProblem problem = new LeastSquaresBuilder()
            .model(model)
            .target(target)
            .start(start)
            .lazyEvaluation(false)
            .maxEvaluations(1000)
            .maxIterations(1000)
            .build();

        // Solve the problem
        Optimum result = optimizer.optimize(problem);
        
        // Check that input checker made it stop after a single iteration
        assertEquals(1, result.getIterations());
    }
}
