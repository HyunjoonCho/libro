
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

public class TarArchiveInputStreamTest {

    @Test(expected = IOException.class)
    public void testCorruptedBzip2() throws IOException {
        // Simulating an intentionally corrupted (truncated) bzip2-compressed tar file.
        byte[] corruptedTarData = {
            // This data should normally represent part of a valid .tar.bz2 file.
            // But is left with deliberately insufficient data to simulate truncation.
            (byte) 0x42, (byte) 0x5A, (byte) 0x68 // BZip2 header placeholder bytes.
            // A valid tar.bz2 would have a lot more data.
        };

        try (InputStream in = new ByteArrayInputStream(corruptedTarData);
             BZip2CompressorInputStream bzip2Input = new BZip2CompressorInputStream(in, true);
             TarArchiveInputStream tarInput = new TarArchiveInputStream(bzip2Input)) {

            // Attempt to read entries from the corrupted tar.
            ArchiveEntry entry = tarInput.getNextEntry();
            while (entry != null) {
                // Extract the contents to some output
                String outputPath = "/tmp/" + entry.getName();
                OutputStream out = new FileOutputStream(outputPath);
                try {
                    while (tarInput.available() > 0) {
                        out.write(tarInput.read());
                    }
                } finally {
                    out.close();
                }
                entry = tarInput.getNextEntry();
            }
        }
    }
}
