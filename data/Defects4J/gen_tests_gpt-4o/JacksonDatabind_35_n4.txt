
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ObjectIdAndTypeIdTest {
  
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = "@id")
    public static class Base {
        public String name;

        public Base() {}
        
        public Base(String name) {
            this.name = name;
        }
    }

    public static class Sub extends Base {
        public int value;

        public Sub() {}

        public Sub(String name, int value) {
            super(name);
            this.value = value;
        }
    }

    @Test
    public void testObjectIdAndTypeIdSerialization() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        Sub sub1 = new Sub("Test", 42);
        
        String json = mapper.writeValueAsString(sub1);
        // Expected format might differ, but it's about ensuring wrapping and handling ids is correct
        assertEquals("{\"Sub\":{\"@id\":1,\"name\":\"Test\",\"value\":42}}", json);

        // Also test deserialization
        Base result = mapper.readValue(json, Base.class);
        assertEquals("Test", result.name);
    }
}
