
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DurationTest {

    @Test
    public void testDurationToPeriodWithFixedTimeZone() {
        // Set the default time zone to one without Daylight Saving Time (DST)
        DateTimeZone.setDefault(DateTimeZone.forID("Etc/GMT"));
        Duration duration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 +
                                         DateTimeConstants.MILLIS_PER_MINUTE * 50 +
                                         DateTimeConstants.MILLIS_PER_SECOND * 14);

        // Convert the duration to a period
        Period period = duration.toPeriod();

        // Verifying the conversion in a non-DST aware time zone
        assertEquals("P1DT6H50M14S", period.toString());

        // Set the default time zone to one with Daylight Saving Time (DST)
        DateTimeZone.setDefault(DateTimeZone.forID("America/Chicago"));
        Period periodDST = duration.toPeriod();

        // Verifying the conversion in a DST aware time zone
        // Expectation here is to show that due to DST, behavior changes, leading to differing results.
        // You may want to assert the behavior that you're expecting, but based on the report:
        assertEquals("PT30H50M14S", periodDST.toString());
    }
}
