
import java.text.DateFormat;
import java.util.Locale;
import java.util.Date;
import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.Test;
import static org.junit.Assert.*;

public class FastDateFormatTest {

    @Test
    public void testDefaultLocaleChangeAffectsDateInstance() {
        // Set default locale to US
        Locale.setDefault(Locale.US);
        
        // Create a FastDateFormat instance with default locale
        FastDateFormat dateFormat = FastDateFormat.getDateInstance(DateFormat.SHORT, null);
        
        // Format the current date
        String formattedDateUS = dateFormat.format(new Date());

        // Change the default locale to FRANCE
        Locale.setDefault(Locale.FRANCE);

        // The formatted date should remain in US format due to caching
        String formattedDateAfterChange = dateFormat.format(new Date());

        // Assert the formatted dates are equal to ensure it didn't change
        assertEquals(formattedDateUS, formattedDateAfterChange);
    }

    @Test
    public void testDefaultLocaleChangeAffectsDateTimeInstance() {
        // Set default locale to US
        Locale.setDefault(Locale.US);

        // Create a FastDateFormat instance with default locale including time
        FastDateFormat dateTimeFormat = FastDateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, null);

        // Format the current date and time
        String formattedDateTimeUS = dateTimeFormat.format(new Date());

        // Change the default locale to FRANCE
        Locale.setDefault(Locale.FRANCE);

        // The formatted date and time should remain in US format due to caching
        String formattedDateTimeAfterChange = dateTimeFormat.format(new Date());

        // Assert the formatted date times are equal to ensure it didn't change
        assertEquals(formattedDateTimeUS, formattedDateTimeAfterChange);
    }
}
