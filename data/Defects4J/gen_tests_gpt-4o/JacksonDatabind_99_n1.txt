
import org.junit.Test;
import static org.junit.Assert.assertEquals;

// Note: Replace with actual import statements for the classes from your library
// import your.package.ReferenceType;
// import your.package.TypeFactory;
// import your.package.JavaType;
// import your.package.PlaceholderForType;
// import org.apache.commons.collections4.map.LRUMap;

public class ReferenceTypeTest {

    @Test
    public void testCanonicalStringForReferenceType() {
        // Assume these classes are part of your specific library dealing with type descriptions
        TypeFactory typeFactory = new TypeFactory(new LRUMap<Object, JavaType>(0, 10000));
        JavaType objectType = typeFactory.constructType(Object.class);
        PlaceholderForType placeholder = new PlaceholderForType(0);
        
        // Create a ReferenceType using the objectType and placeholder
        ReferenceType referenceType = new ReferenceType(objectType, placeholder);
        
        // Get the canonical representation
        String canonicalString = referenceType.toCanonical();
        
        // Assert that the canonical string is correctly formatted with the closing '>'
        assertEquals("java.lang.Object<$1>", canonicalString);
    }
}
