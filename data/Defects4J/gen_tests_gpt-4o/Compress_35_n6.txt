
import java.io.ByteArrayInputStream;
import java.io.IOException;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class TarChecksumTest {
    
    @Test
    public void testChecksumWithRightAlignedPadding() throws IOException {
        // This is a simplified TAR header with a checksum that is right-aligned with zero-padding
        byte[] tarHeader = new byte[512];
        
        // Adding some default values for other fields might be necessary
        System.arraycopy("test.txt".getBytes(), 0, tarHeader, 0, 8); // file name
        System.arraycopy("0000644 ".getBytes(), 0, tarHeader, 100, 8); // file mode
        System.arraycopy("0000000 ".getBytes(), 0, tarHeader, 108, 8); // owner uid
        System.arraycopy("0000000 ".getBytes(), 0, tarHeader, 116, 8); // owner gid
        System.arraycopy("0000000 ".getBytes(), 0, tarHeader, 124, 12); // file size
        System.arraycopy("0000000 ".getBytes(), 0, tarHeader, 136, 12); // mtime
        
        // Setting a checksum with zero padding instead of spaces
        String checksum = "001234\0 ";
        System.arraycopy(checksum.getBytes(), 0, tarHeader, 148, 8);

        // Using a byte array stream to simulate a TAR file
        try (ByteArrayInputStream bais = new ByteArrayInputStream(tarHeader);
             TarArchiveInputStream tais = new TarArchiveInputStream(bais)) {

            TarArchiveEntry entry = tais.getNextTarEntry();
            assertTrue("The entry should be valid if the checksum is right aligned handled correctly", entry != null);
        }
    }
}
