
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.FirstOrderIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.events.EventHandler.Action;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ODEEventHandlerResetStateTest {

    @Test
    public void testEventHandlerResetState() {
        // Define a simple ODE: dy/dt = -y
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = -y[0];
            }
        };

        // Create an integrator
        FirstOrderIntegrator integrator = new DormandPrince853Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10);

        // First event handler resets the state
        integrator.addEventHandler(new EventHandler() {
            public double g(double t, double[] y) {
                return t - 2.0; // Trigger at t = 2
            }

            public Action eventOccurred(double t, double[] y, boolean increasing) {
                y[0] = 1.0; // Reset state
                return Action.RESET_STATE;
            }

            public void resetState(double t, double[] y) {
                // State was already reset in eventOccurred
            }
        }, 1.0, 1.0e-8, 100);

        // Second event handler, expected to handle the updated state correctly post-reset
        StateCheckingEventHandler secondEventHandler = new StateCheckingEventHandler();

        integrator.addEventHandler(secondEventHandler, 1.0, 1.0e-8, 100);

        // Initial conditions: y(0) = 10
        double[] y = {10.0};
        integrator.integrate(ode, 0.0, y, 5.0, y);

        // Check expected outcome of second event handler
        assertEquals(1.0, secondEventHandler.getLastFinalState(), 1.0e-10);
    }

    private static class StateCheckingEventHandler implements EventHandler {
        private double lastFinalState = Double.NaN;

        @Override
        public double g(double t, double[] y) {
            return t - 3.0; // Trigger at t = 3
        }

        @Override
        public Action eventOccurred(double t, double[] y, boolean increasing) {
            // Store the current state to verify it was updated correctly
            lastFinalState = y[0];
            return Action.CONTINUE;
        }

        @Override
        public void resetState(double t, double[] y) {
            // No state reset needed here
        }

        public double getLastFinalState() {
            return lastFinalState;
        }
    }
}
