
import org.junit.Test;
import static org.junit.Assert.*;

public class TypeCheckerTest {

    class C2 {
        // C2 class without 'prop' property
    }

    class C3 {
        private C2 c2_;

        public C3(C2 c2) {
            this.c2_ = c2;
        }

        public void useC2() {
            // Simulating 'use(this.c2_.prop)' which leads to the error
            assertTrue("Property 'prop' should be checked against C2 type",
                isPropertyDefinedOnC2Type(this.c2_));
        }

        private boolean isPropertyDefinedOnC2Type(C2 c2) {
            // Simulating a type checking process
            // As C2 doesn't have 'prop', this should return false.
            try {
                c2.getClass().getDeclaredField("prop");
                return true;
            } catch (NoSuchFieldException e) {
                return false;
            }
        }
    }

    @Test
    public void testMissingPropertyError() {
        C2 c2Instance = new C2();
        C3 c3Instance = new C3(c2Instance);

        try {
            c3Instance.useC2();
            fail("TypeCheckerError expected");
        } catch (AssertionError e) {
            assertEquals("Property 'prop' should be checked against C2 type", e.getMessage());
        }
    }
}
