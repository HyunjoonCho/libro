
import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;

public class ClosureCompilerTest {

    // This is the JavaScript code to be tested
    private static final String JS_CODE = 
        "/*global window*/\n" +
        "/*jslint sub: true*/\n" +
        "/**\n" +
        " * @constructor\n" +
        " * @param {!Element} element\n" +
        " */\n" +
        "function Example(element) {\n" +
        "    /**\n" +
        "     * @param {!string} ns\n" +
        "     * @param {!string} name\n" +
        "     * @return {undefined}\n" +
        "     */\n" +
        "    this.appendElement = function appendElement(ns, name) {\n" +
        "        var e = element.ownerDocument.createElementNS(ns, name);\n" +
        "        element.appendChild(e);\n" +
        "    };\n" +
        "}\n" +
        "window[\"Example\"] = Example;\n";

    @org.junit.Test
    public void testTypedCoverage() throws Exception {
        // Create a temporary JavaScript file
        File jsFile = File.createTempFile("example", ".js");
        try {
            java.nio.file.Files.write(jsFile.toPath(), JS_CODE.getBytes());

            // Run the Closure Compiler with the given JavaScript code
            ProcessBuilder pb = new ProcessBuilder("java", "-jar", "compiler.jar",
                    "--jscomp_error", "checkTypes",
                    "--summary_detail_level", "3",
                    "--js", jsFile.getAbsolutePath(),
                    "--js_output_file", "compiled.js");

            Process process = pb.start();

            // Capture the output
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            StringBuilder output = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }

            // Wait for the process to terminate and check for the result
            int exitCode = process.waitFor();

            String expectedOutput = "0 error(s), 0 warning(s), 100% typed";
            assertTrue("Expected output was not found in the compiler's result.",
                    output.toString().contains(expectedOutput));

            System.out.println(output.toString());
        } finally {
            jsFile.delete();  // Clean up the temporary file
        }
    }
}
