script
/** @constructor */
function MyClass() {}

/** @param {boolean} success */
MyClass.prototype.fn = function(success) {};

/** Test function that exhibits the bug */
MyClass.prototype.test = function() {
    try {
        // This should raise a type error because 'fn' expects a boolean parameter
        this.fn();
        console.error('Error: Expected a type checking error on the first call to fn without parameter.');
    } catch (e) {
        console.log('Type error caught as expected on the first call: ', e.message);
    }
    
    // Overwrite 'fn' with a new function that takes no parameters
    this.fn = function() {};
    
    try {
        // This should not raise a type error because the 'fn' is now a different function
        this.fn();
        console.log('No type error as expected on the second call after replacing the function.');
    } catch (e) {
        console.error('Unexpected error on the second call: ', e.message);
    }
};

// Create a MyClass instance and run the test
var instance = new MyClass();
instance.test();
