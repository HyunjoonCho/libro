public void testClassifyNonRightmostExpressions() {
    // Case 1: (1, 2, 42) should issue a warning for '1'
    List<String> expressions1 = Arrays.asList("1, 2, 42");
    List<Boolean> expectedWarnings1 = Arrays.asList(true, false, false);
    List<Boolean> actualWarnings1 = classifyExpressionsAsProblematic(expressions1);
    assertEquals(expectedWarnings1, actualWarnings1);

    // Case 2: (bar(), 2, 42) should not issue any warnings
    List<String> expressions2 = Arrays.asList("bar(), 2, 42");
    List<Boolean> expectedWarnings2 = Arrays.asList(false, false, false);
    List<Boolean> actualWarnings2 = classifyExpressionsAsProblematic(expressions2);
    assertEquals(expectedWarnings2, actualWarnings2);

    // Case 3: ((1, 2, 3), (4, 5, 42)) should issue warnings for '1' and '4'
    List<String> expressions3 = Arrays.asList("(1, 2, 3), (4, 5, 42)");
    List<Boolean> expectedWarnings3 = Arrays.asList(true, false, false, true, false, false);
    List<Boolean> actualWarnings3 = classifyExpressionsAsProblematic(expressions3);
    assertEquals(expectedWarnings3, actualWarnings3);
}

private List<Boolean> classifyExpressionsAsProblematic(List<String> expressions) {
    // This is a placeholder method to simulate the classification
    // The actual implementation would analyze each expression and determine if it is problematic
    return expressions.stream().map(exp -> exp.contains("1") || exp.contains("4")).collect(Collectors.toList());
}