
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class CommentHandlingTest {

    @Test
    public void testNonJSDocCommentHandling() {
        // This is the source code with a regular comment
        String jsSourceCodeWithRegularComment = "/* @preserve Foo License */\nalert('foo');";
        // Source code changing to /*! comment
        String jsSourceCodeWithExclamationComment = "/*! @preserve Foo License */\nalert('foo');";

        // Initialize compiler
        Compiler compiler = new Compiler();
        
        // Compile the source code with regular comment
        Node root1 = compileSourceCode(compiler, jsSourceCodeWithRegularComment);
        String output1 = compiler.toSource(root1);
        // Check if the warning is produced (note: this is more complex in real-world scenarios)
        assertTrue(compiler.getWarningCount() == 1);

        // Compile the source code with exclamation comment
        Node root2 = compileSourceCode(compiler, jsSourceCodeWithExclamationComment);
        String output2 = compiler.toSource(root2);
        // Check if the warning is NOT produced
        assertTrue(compiler.getWarningCount() == 0);
        
        // Ensure that /*! does not preserve the comment
        assertTrue(!output2.contains("Foo License"));
    }

    private Node compileSourceCode(Compiler compiler, String jsSourceCode) {
        CommandLineRunner runner = new CommandLineRunner(new String[]{
            "--jscomp_off=checkVars"
        });
        compiler.initOptions(runner.createOptions());
        return compiler.parse(SourceFile.fromCode("test.js", jsSourceCode));
    }
}
