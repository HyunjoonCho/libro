
import org.apache.commons.lang3.builder.EqualsBuilder;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Test;
import java.math.BigDecimal;

public class EqualsBuilderTest {

    @Test
    public void testBigDecimalComparison() {
        BigDecimal decimal1 = new BigDecimal("1.0");
        BigDecimal decimal2 = new BigDecimal("1.00");

        // Traditional equals method on BigDecimal returns false
        assertFalse(decimal1.equals(decimal2));

        // Using compareTo method on BigDecimal returns true
        assertTrue(decimal1.compareTo(decimal2) == 0);

        // Current EqualsBuilder behavior may fail this due to using equals method
        boolean areEqualUsingEqualsBuilder = new EqualsBuilder().append(decimal1, decimal2).isEquals();

        // Expecting this test to fail to showcase the bug
        assertTrue("EqualsBuilder should consider BigDecimals with same value but different scale as equal", areEqualUsingEqualsBuilder);
    }
}
