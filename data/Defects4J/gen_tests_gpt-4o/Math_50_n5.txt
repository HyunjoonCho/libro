
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BaseUnivariateSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.junit.Test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class SolverTest {

    @Test
    public void testRegulaFalsiSolverBug() {
        final UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        BaseUnivariateSolver<UnivariateFunction> solver = new RegulaFalsiSolver();
        try {
            double root = solver.solve(100, f, 1, 10);
            // Fail the test if it does not throw an exception
            fail("Expected an IllegalStateException due to exceeding maximum evaluations");
        } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) {
            // Expected exception
            assertTrue("Expected exception due to maximal evaluation exceeded", true);
        }
    }
    
    @Test
    public void testPegasusSolver() {
        final UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        BaseUnivariateSolver<UnivariateFunction> solver = new PegasusSolver();
        try {
            double root = solver.solve(100, f, 1, 10);
            // Asserting that the solver successfully finds the root within 100 evaluations
            assertTrue("Solver found the root successfully", !Double.isNaN(root));
        } catch (Exception e) {
            fail("PegasusSolver should have found the root without exceeding maximum evaluations");
        }
    }
}
