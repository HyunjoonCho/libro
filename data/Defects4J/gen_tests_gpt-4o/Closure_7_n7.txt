
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class TestTypeInference {

    /** Simulating the goog.isDef method. */
    private static boolean isDef(Object obj) {
        return obj != null;
    }

    /** Simulating the goog.isFunction method. */
    private static boolean isFunction(Object obj) {
        return obj instanceof Runnable; // Simplistic representation
    }

    /** Simulating the goog.isBoolean method. */
    private static boolean isBoolean(Object obj) {
        return obj instanceof Boolean;
    }

    /** Simulating the goog.isString method. */
    private static boolean isString(Object obj) {
        return obj instanceof String;
    }

    /** Simulating the goog.isArray method. */
    private static boolean isArray(Object obj) {
        return obj instanceof Object[]; // Simplistic array check.
    }

    /**
     * @param {*} object Any object.
     * @return {boolean}
     */
    public boolean isMatched(Object object) {
        if (isDef(object)) {
            if (isFunction(object)) {
                // Simulating function call
                // ((Runnable)object).run();
            } else if (isBoolean(object)) {
                // Simulating boolean usage
                // return (Boolean) object;
            } else if (isString(object)) {
                // Simulating string check
                // return isDef(object);
            } else if (isArray(object)) {
                int i = ((Object[])object).length; // Point of interest for the bug report
            }
        }
        return false;
    }

    @org.junit.Test
    public void testIsMatched() {
        TestTypeInference testTypeInference = new TestTypeInference();

        // Passing an array to trigger the length evaluation
        Object[] array = new Object[5];
        assertFalse(testTypeInference.isMatched(array)); // This should work without warnings

        // Test with different data types
        assertFalse(testTypeInference.isMatched("string"));
        assertFalse(testTypeInference.isMatched(false));
        assertFalse(testTypeInference.isMatched((Runnable) () -> {}));
        assertFalse(testTypeInference.isMatched(null));
    }
}
