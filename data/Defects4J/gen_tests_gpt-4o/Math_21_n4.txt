
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.CholeskyDecomposition;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.CorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.GaussianRandomGenerator;
import org.junit.Test;

import static org.junit.Assert.*;

public class CorrelatedRandomVectorGeneratorTest {

    @Test
    public void testCovarianceMatrixWithZeroRow() {
        double[][] matrixWithZeroRow = {
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.0, 0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        };

        Array2DRowRealMatrix covarianceMatrix = new Array2DRowRealMatrix(matrixWithZeroRow);
        GaussianRandomGenerator gaussianRandom = new GaussianRandomGenerator(new JDKRandomGenerator());

        try {
            CorrelatedRandomVectorGenerator generator = new CorrelatedRandomVectorGenerator(
                covarianceMatrix, 1e-12, gaussianRandom
            );

            // The intent here is to see if a sample can be properly generated or if an error manifests.
            double[] sample = generator.nextVector();
            assertNotNull(sample);
            assertEquals(5, sample.length);

            // Expected behavior: Check that the covariance calculation produces results close to the input matrix
            // Since we expect a rank deficiency, verify correct handling
            int rank = new CholeskyDecomposition(covarianceMatrix, 1e-12, 1e-12).getL().getColumnDimension();
            assertEquals(4, rank);  // We expect a rank of 4, even if the matrix originally has more columns

        } catch (Exception e) {
            fail("Exception should not occur with the given covariance matrix: " + e.getMessage());
        }
    }
}
