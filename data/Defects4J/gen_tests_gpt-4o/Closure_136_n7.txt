
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testSuperReplacementWithAdvancedOptimizations() {
        String jsCode = "var Class = function() {}; " +
                        "Class.prototype.method = function($super) { return $super; };";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Set the compiler options for advanced optimizations
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("test.js", jsCode);
        Result result = compiler.compile(extern, input, options);

        // Examine the result to check if $super is renamed
        String compiledCode = compiler.toSource();

        // Check if $super has been renamed (indicating the bug)
        boolean superRenamed = compiledCode.contains("$super$$");
        
        // Assert that $super should not be renamed
        assertTrue("Expected $super to not be renamed, but found it was renamed in: " + compiledCode, !superRenamed);
    }
}
