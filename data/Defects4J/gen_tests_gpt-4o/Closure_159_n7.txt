
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testFunctionRenamingConsistency() {
        // JavaScript code snippet replicating the issue
        String jsCode = 
            "function preload_check_all() { } " +
            "preload_check_all();";

        // Expected function name in compiled output
        String expectedFunctionName = "a";

        // Initialize the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Set the compilation level to SIMPLE, as mentioned in the bug report
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Set ECMASCRIPT5 as the language mode for both input and output
        options.setLanguage(LanguageMode.ECMASCRIPT5);
        options.setLanguageOut(LanguageMode.ECMASCRIPT5);

        // Compile the JS code
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Get the compiled output
        String compiledCode = compiler.toSource();

        // Check if the function 'preload_check_all' is properly renamed throughout the code
        assertTrue("The function name should be consistently renamed.", 
                   compiledCode.contains(expectedFunctionName) && !compiledCode.contains("preload_check_all"));
    }
}
