
import org.apache.commons.math.distribution.DistributionFactory;
import org.apache.commons.math.distribution.NormalDistribution;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class NormalDistributionTest {

    @Test
    public void testInverseCumulativeProbability() {
        try {
            DistributionFactory factory = new DistributionFactoryImpl(); // Replace with your actual factory if different
            NormalDistribution normal = factory.createNormalDistribution(0, 1);

            // Test for the probability values mentioned in the bug report
            double result = normal.inverseCumulativeProbability(0.9772498680518209);
            assertEquals("Expected result for p=0.9772498680518209 is approximately 2.0", 2.0, result, 1e-4);

            result = normal.inverseCumulativeProbability(0.9986501019683698);
            assertEquals("Expected result for p=0.9986501019683698 is approximately 3.0", 3.0, result, 1e-4);

            result = normal.inverseCumulativeProbability(0.9999683287581673);
            assertEquals("Expected result for p=0.9999683287581673 is approximately 4.0", 4.0, result, 1e-4);

        } catch (org.apache.commons.math.MathException e) {
            e.printStackTrace();
            fail("Expected not to throw an exception, but got: " + e.getMessage());
        }
    }

    // You may need to implement or use an existing DistributionFactory implementation
    static class DistributionFactoryImpl implements DistributionFactory {

        @Override
        public NormalDistribution createNormalDistribution(double mean, double sd) {
            return new NormalDistributionImpl(mean, sd);
        }
    }
}
