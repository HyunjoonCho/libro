
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class ObjectIdTest {

    public static class Foo {
        @JsonIdentityReference(alwaysAsId = true)
        public Bar bar1;

        @JsonIdentityReference()
        public Bar bar2;
    }

    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)
    public static class Bar {
    }

    @Test
    public void testForwardReferenceSerialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // create structure to serialize
        Foo mo = new Foo();
        mo.bar1 = new Bar();
        mo.bar2 = mo.bar1;

        // serialize it
        String jsonString = mapper.writeValueAsString(mo);
        
        // Assert the JSON string
        assertTrue(jsonString.contains("\"bar1\":1"));
        assertTrue(jsonString.contains("\"bar2\":1"));
        
        // Parse the JSON back to an object
        Foo deserialized = mapper.readValue(jsonString, Foo.class);
        
        // Assert that bar1 and bar2 refer to the same object
        assertEquals(deserialized.bar1, deserialized.bar2);
    }

    public static void main(String[] args) throws Exception {
        ObjectIdTest test = new ObjectIdTest();
        test.testForwardReferenceSerialization();
    }
}
