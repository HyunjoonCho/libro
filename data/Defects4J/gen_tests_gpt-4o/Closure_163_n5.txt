public void testVarCheckCrashWithModules() {
    try {
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setFormatting(CompilerOptions.PrettyPrint.PRETTY_PRINT);
        List<JSModule> modules = new ArrayList<>();
        
        JSModule jqueryModule = new JSModule("jquery");
        jqueryModule.add(new SourceFile("../dist/jquery.js"));
        modules.add(jqueryModule);
        
        JSModule coreModule = new JSModule("core");
        coreModule.addDependency(jqueryModule);
        coreModule.add(new SourceFile("core.js"));
        modules.add(coreModule);
        
        Compiler compiler = new Compiler();
        compiler.compileModules(
            ImmutableList.of(SourceFile.fromFile("..\\qunit_externs.js")),
            modules,
            options
        );
        
        fail("Expected RuntimeException due to compiler error");
    } catch (RuntimeException e) {
        assertTrue(e.getMessage().contains("INTERNAL COMPILER ERROR"));
        assertTrue(e.getMessage().contains("Unexpected variable jQuery$$2"));
    }
}