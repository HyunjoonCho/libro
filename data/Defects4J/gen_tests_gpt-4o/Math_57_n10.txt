
import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class KMeansPlusPlusClustererTest {

    @Test
    public void testTruncationIssueInChooseInitialClusters() {
        // Create a dataset where the distances are less than 1
        List<DoublePoint> points = new ArrayList<>();
        points.add(new DoublePoint(new double[]{0.1, 0.1}));
        points.add(new DoublePoint(new double[]{0.2, 0.2}));
        points.add(new DoublePoint(new double[]{0.3, 0.3}));
        points.add(new DoublePoint(new double[]{0.4, 0.4}));
        points.add(new DoublePoint(new double[]{0.5, 0.5}));

        // Initialize KMeansPlusPlusClusterer with 2 clusters and some random seed
        int k = 2;
        KMeansPlusPlusClusterer<DoublePoint> clusterer = new KMeansPlusPlusClusterer<>(k, 100, null, KMeansPlusPlusClusterer.EmptyClusterStrategy.LARGEST_VARIANCE);

        // Perform clustering
        List<Cluster<DoublePoint>> clusters = clusterer.cluster(points);

        // Verify that the clusters are not empty, and check the size of clusters
        // Before the fix, the truncation issue could lead to one cluster being empty
        for (Cluster<DoublePoint> cluster : clusters) {
            System.out.println("Cluster size: " + cluster.getPoints().size());
            // Check that no cluster is empty
            if (cluster.getPoints().isEmpty()) {
                throw new AssertionError("Cluster is unexpectedly empty due to truncation error.");
            }
        }
    }
}
