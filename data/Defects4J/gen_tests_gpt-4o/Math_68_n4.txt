public void testLevenbergMarquardtOptimizerWithCustomConvergenceChecker() {
    DifferentiableMultivariateVectorOptimizer optimizer = new LevenbergMarquardtOptimizer()
    {
        @Override
        public PointVectorValuePair optimize(int maxEval, DifferentiableMultivariateVectorFunction f, double[] target, double[] weights, double[] startPoint) {
            setConvergenceChecker((iteration, previous, current) -> current != null && current.getPointRef()[0] > 10);
            return super.optimize(maxEval, f, target, weights, startPoint);
        }
    };
    
    DifferentiableMultivariateVectorFunction model = new DifferentiableMultivariateVectorFunction() {
        public double[] value(final double[] point) {
            return new double[] { point[0] * point[0] };
        }

        public MultivariateMatrixFunction jacobian() {
            return point -> new double[][] { { 2 * point[0] } };
        }
    };
    
    double[] initialGuess = { 0.1 };
    PointVectorValuePair result = optimizer.optimize(100, model, new double[] { 4 }, new double[] { 1 }, initialGuess);
    
    assertTrue("Convergence checker should have stopped the optimization", result.getPointRef()[0] > 10);
}