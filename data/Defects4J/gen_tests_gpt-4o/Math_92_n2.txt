
import org.junit.Test;
import java.math.BigInteger;
import static org.junit.Assert.assertEquals;

public class MathUtilsTest {

    @Test
    public void testBinomialCoefficientOverflow() {
        // Test using the recursive property
        assertEquals(
            MathUtils.binomialCoefficient(65, 32) + MathUtils.binomialCoefficient(65, 33),
            MathUtils.binomialCoefficient(66, 33)
        );

        // Test using the externally calculated expected value
        assertEquals(
            7219428434016265740L,
            MathUtils.binomialCoefficient(66, 33)
        );

        // Verify against the exact implementation
        assertEquals(
            binomialCoefficient(66, 33),
            MathUtils.binomialCoefficient(66, 33)
        );
    }

    /**
     * Exact implementation using BigInteger and the explicit formula
     * (n, k) == ((k-1)*...*n) / (1*...*(n-k))
     */
    public static long binomialCoefficient(int n, int k) {
        if (k == 0 || k == n) {
            return 1;
        }
        
        BigInteger result = BigInteger.ONE;
        for (int i = k + 1; i <= n; i++) {
            result = result.multiply(BigInteger.valueOf(i));
        }
        for (int i = 1; i <= n - k; i++) {
            result = result.divide(BigInteger.valueOf(i));
        }
        if (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {
            throw new ArithmeticException("Binomial coefficient overflow: " + n + ", " + k);
        }
        return result.longValue();
    }
}
