
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.*;

public class GlobalThisWarningTest {
    public void testWarnsOnGlobalThisUsage() {
        // Sample JavaScript code that should trigger JSC_USED_GLOBAL_THIS warnings
        String jsCode = "var NS = {\n" +
                        "   read: function() {\n" +
                        "       return this.foo;\n" + // This should warn
                        "   },\n" +
                        "   write: function() {\n" +
                        "       this.foo = 123;\n" + // This should warn
                        "   }\n" +
                        "};\n" +
                        "NS.write2 = function() {\n" +
                        "   this.foo = 123;\n" + // This should warn
                        "};";

        // Compiler options
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);

        // Compile the JavaScript code
        Compiler compiler = new Compiler();
        SourceFile extern = SourceFile.fromCode("externs", "");
        SourceFile input = SourceFile.fromCode("input", jsCode);

        // Evaluate the compiled result
        Result result = compiler.compile(extern, input, options);

        // Expecting warnings related to the use of the global this object
        assertTrue(result.warnings.length > 0);

        // Check for specific warning type JSC_USED_GLOBAL_THIS
        boolean foundGlobalThisWarning = false;
        for (JSError warning : result.warnings) {
            if (warning.getType().equals(DiagnosticGroups.GLOBAL_THIS)) {
                foundGlobalThisWarning = true;
                break;
            }
        }
        assertTrue("JSC_USED_GLOBAL_THIS warnings should be present", foundGlobalThisWarning);
    }
}
