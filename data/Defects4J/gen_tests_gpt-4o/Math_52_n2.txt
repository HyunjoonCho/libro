
import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.junit.Test;
import static org.junit.Assert.*;

public class RotationTest {

    @Test
    public void testRotationCreation() {
        // Define the vector pairs
        Vector3D u1 = new Vector3D(-4921140.837095533, -2.1512094250440013E7, -890093.279426377);
        Vector3D u2 = new Vector3D(-2.7238580938724895E9, -2.169664921341876E9, 6.749688708885301E10);
        
        Vector3D v1 = new Vector3D(1, 0, 0);
        Vector3D v2 = new Vector3D(0, 0, 1);

        try {
            // Create the rotation based on the vector pairs
            Rotation rotation = new Rotation(u1, u2, v1, v2);

            // If no exception is thrown, we should assert the validity of the rotation
            // For this test case, it's primarily to see if it produces NaN
            assertFalse("Rotation should not result in NaN", Double.isNaN(rotation.getQ0()));
            assertFalse("Rotation should not result in NaN", Double.isNaN(rotation.getQ1()));
            assertFalse("Rotation should not result in NaN", Double.isNaN(rotation.getQ2()));
            assertFalse("Rotation should not result in NaN", Double.isNaN(rotation.getQ3()));
        } catch (Exception e) {
            fail("Exception should not have been thrown: " + e.getMessage());
        }
    }
}
