
import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import java.io.ByteArrayInputStream;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class XPathUnionOrderTest {

    @Test
    public void testXPathUnionDocumentOrder() throws Exception {
        // Set up XML document
        String xmlContent = "<MAIN><A>avalue</A><B>bvalue</B></MAIN>";
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        
        // Parse XML content
        Document document = builder.parse(new ByteArrayInputStream(xmlContent.getBytes()));

        // Set up XPath
        XPathFactory xPathFactory = XPathFactory.newInstance();
        XPath xPath = xPathFactory.newXPath();

        // XPath expression to test
        String xPathExpression = "string(/MAIN/B | /MAIN/A)";
        
        // Evaluate the XPath expression
        try {
            XPathExpression expr = xPath.compile(xPathExpression);
            String result = (String) expr.evaluate(document, XPathConstants.STRING);
        
            // Assert that the result is as expected
            assertEquals("avalue", result);
        } catch (XPathExpressionException e) {
            e.printStackTrace();
        }
    }
}
