
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.ObjectType;
import com.google.javascript.rhino.jstype.RecordType;

import org.junit.Test;
import static org.junit.Assert.fail;

public class TypeCheckTest {

    @Test
    public void testProxyObjectTypeWithRecordType() {
        String jsCode = ""
                + "/** @typedef {{foo: string, bar: number}} */\n"
                + "var RecordType;\n"
                + "/** @type {RecordType} */\n"
                + "var myRecord = {foo: 'hello', bar: 42};\n"
                + "/** @type {?} */\n"
                + "var unknownType;\n"
                + "unknownType = myRecord;\n";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setLanguage(LanguageMode.ECMASCRIPT6);
        compiler.initOptions(options);
        
        try {
            compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", jsCode), options);
            JSType myRecordType = compiler.getTypeRegistry().getType("RecordType");
            if (!(myRecordType instanceof ObjectType)) {
                fail("Expected MyRecord type to be an ObjectType");
            }
        } catch (ClassCastException e) {
            fail("ClassCastException encountered: " + e.getMessage());
        }
    }
}
