script
// Including a mock function for `use` to avoid runtime errors.
function use(param) {
    // Simulate the use of the parameter
    return param;
}

/**
 * @constructor
 */
function C2() {
    // No properties explicitly defined here
}

/**
 * @constructor
 */
function C3(c2) {
    /**
     * @type {C2} 
     * @private
     */
    this.c2_ = c2;

    // Attempt to use a non-existent property 'prop' from C2
    use(this.c2_.prop);
}

// Test case
function testMissingPropertyError() {
    // Create an instance of C2
    var c2Instance = new C2();
    // Create an instance of C3 passing the C2 instance
    var c3Instance = new C3(c2Instance);
    
    try {
        // This use call is supposed to fail the test with a missing property error as reported.
        use(c3Instance.c2_.prop);
        console.log("Test Failed: Missing property not detected.");
    } catch (e) {
        // Here's where you would normally capture and assert the error message.
        if (e.message.includes('C2')) {
            console.log("Test Passed: Correct missing property error reported.");
        } else {
            console.log("Test Failed: Incorrect type name reported.");
        }
    }
}

// Run the test
testMissingPropertyError();
