public void testDeserializationWithTypeResolverBuilder() {
    try {
        // Create test data
        Data data = new Data();
        data.key = 1L;
        Map<String, Object> mapData = new HashMap<>();
        mapData.put("longInMap", 2L);
        mapData.put("longAsField", data);

        // Configure Jackson to preserve types
        JsonFactory factory = new JsonFactory();
        ObjectMapper mapper = new ObjectMapper(factory);
        StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();
        resolver.init(JsonTypeInfo.Id.CLASS, null);
        resolver.inclusion(JsonTypeInfo.As.PROPERTY);
        resolver.typeProperty("__t");
        mapper.setDefaultTyping(resolver);
        mapper.enable(SerializationFeature.INDENT_OUTPUT);

        // Serialize
        String json = mapper.writeValueAsString(mapData);

        // Deserialize
        Map deserializedData = mapper.readValue(json, Map.class);

        // Check deserialized field
        Data deserializedDataField = (Data) deserializedData.get("longAsField");
        assertNotNull(deserializedDataField);
        assertEquals(1L, deserializedDataField.key);

    } catch (IOException e) {
        fail("IOException was thrown: " + e.getMessage());
    } catch (ClassCastException e) {
        fail("ClassCastException was thrown: " + e.getMessage());
    }
}

static class Data {
    public long key;
}