
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import org.junit.Test;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class JacksonLongDeserializationTest {

    static class Data {
        public long key;
    }

    @Test(expected = com.fasterxml.jackson.databind.JsonMappingException.class)
    public void testLongFieldDeserializationIssue() throws IOException {
        // Create test data
        Data data = new Data();
        data.key = 1L;
        Map<String, Object> mapData = new HashMap<>();
        mapData.put("longInMap", 2L);
        mapData.put("longAsField", data);

        // Configure Jackson to preserve types
        JsonFactory factory = new JsonFactory();
        ObjectMapper mapper = new ObjectMapper(factory);
        StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();
        resolver.init(JsonTypeInfo.Id.CLASS, null);
        resolver.inclusion(JsonTypeInfo.As.PROPERTY);
        resolver.typeProperty("__t");
        mapper.setDefaultTyping(resolver);
        mapper.enable(SerializationFeature.INDENT_OUTPUT);

        // Serialize
        String json = mapper.writeValueAsString(mapData);
        System.out.println("json = " + json);

        // Attempt to Deserialize (this should fail and throw JsonMappingException)
        Map<String, Object> deserializedData = mapper.readValue(json, Map.class);

        // Verify if the problem persists, exception should have been thrown before this point
        Data deserializedDataObject = (Data) deserializedData.get("longAsField");
        assertEquals(1L, deserializedDataObject.key);
    }
}
