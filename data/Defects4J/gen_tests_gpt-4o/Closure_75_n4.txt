
import static org.junit.Assert.*;
import com.google.javascript.jscomp.*;
import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testClosureCompiledSWFObjectError() {
        // Original function from swfobject.js
        String originalJs = 
            "function urlEncodeIfNecessary(s) {" +
            " var regex = /[\\\\\"<>\\.;]/;" +
            " var hasBadChars = regex.exec(s) != null;" +
            " return hasBadChars && typeof encodeURIComponent != 'undefined' ? encodeURIComponent(s) : s;" +
            "}";

        // Use Closure Compiler to compile the JavaScript code
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Perform the compilation
        SourceFile input = SourceFile.fromCode("input.js", originalJs);
        SourceFile extern = SourceFile.fromCode("externs.js", "");

        try {
            Result result = compiler.compile(extern, input, options);

            // Assert no errors during compilation
            assertFalse("Compilation had errors.", result.errors.length > 0);

            // Get the compiled code
            String compiledJs = compiler.toSource();

            // Check the compiled result to ensure it has correct regex escaping
            assertTrue("Compiled JS contains unexpected string.", compiledJs.contains("/[\\\\\"<>\\.;]/"));

        } catch (Exception e) {
            fail("Compilation threw an exception: " + e.getMessage());
        }
    }
}
