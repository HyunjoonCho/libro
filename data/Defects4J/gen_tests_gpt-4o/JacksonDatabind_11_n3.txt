
import org.junit.Test;

import java.io.*;

import static org.junit.Assert.*;

public class SerializationTest {

    static class Ruleform implements Serializable {
        private static final long serialVersionUID = 1L;
        
        private String data;

        public Ruleform(String data) {
            this.data = data;
        }

        public String getData() {
            return data;
        }

        public void setData(String data) {
            this.data = data;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) return true;
            if (o == null || getClass() != o.getClass()) return false;
            Ruleform ruleform = (Ruleform) o;
            return data.equals(ruleform.data);
        }
    }

    static class Something implements Serializable {
        private static final long serialVersionUID = 1L;

        private Ruleform entity;

        public <T extends Ruleform> T getEntity() {
            return (T) entity;
        }

        public <T extends Ruleform> void setEntity(T entity) {
            this.entity = entity;
        }
    }

    @Test
    public void testSerializationDeserialization() {
        try {
            Something original = new Something();
            original.setEntity(new Ruleform("Test data"));

            // Serialize to a byte array
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(original);
            oos.close();

            // Deserialize from a byte array
            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            Something deserialized = (Something) ois.readObject();

            Ruleform deserializedEntity = deserialized.getEntity();
            assertNotNull(deserializedEntity);
            assertEquals("Test data", deserializedEntity.getData());
        } catch (IOException | ClassNotFoundException e) {
            fail("Serialization or Deserialization failed with exception: " + e.getMessage());
        }
    }
}
