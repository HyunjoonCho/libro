
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;

import static org.junit.Assert.fail;

public class TypeIdMappingTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
    static abstract class BaseType {
    }

    static class ConcreteType extends BaseType {
        public String value;
    }

    @Test
    public void testExtraneousTypeIdMapping() {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"type\":\"BaseType\", \"value\":\"test\"}";

        // Attempt to deserialize a JSON object with type id corresponding to the base type name
        // Should fail if the extraneous mapping is incorrectly added
        try {
            BaseType obj = mapper.readValue(json, BaseType.class);
            fail("Deserialization should not succeed when 'type' is the base type name without explicit mapping.");
        } catch (InvalidTypeIdException e) {
            // Expected exception due to incorrect type id for the base type
        } catch (Exception e) {
            fail("Expected InvalidTypeIdException but got " + e);
        }
    }
}
