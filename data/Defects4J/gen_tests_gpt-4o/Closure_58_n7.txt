
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClients;
import org.apache.http.util.EntityUtils;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testClosureCompilerBug() throws IOException {
        String jsCode = "function keys(obj) { var a = [], i = 0; for (a[i++] in obj); return a; }";
        String expectedErrorSnippet = "Error"; // This will depend on the actual error message received.

        // URL for the Closure Compiler API endpoint
        String closureCompilerApiUrl = "https://closure-compiler.appspot.com/compile";

        try (CloseableHttpClient httpClient = HttpClients.createDefault()) {
            HttpPost postRequest = new HttpPost(closureCompilerApiUrl);
            
            // Define payload to send in the POST request
            String payload = "js_code=" + jsCode + "&compilation_level=SIMPLE_OPTIMIZATIONS&output_format=text&output_info=errors";
            postRequest.setEntity(new StringEntity(payload));
            postRequest.setHeader("Content-Type", "application/x-www-form-urlencoded");

            // Execute the request
            String responseContent = EntityUtils.toString(httpClient.execute(postRequest).getEntity());

            // Assert that the response contains an error (since this test demonstrates reproducing a bug)
            assertTrue(responseContent.contains(expectedErrorSnippet), "Expected error not found in response");
        }
    }
}
