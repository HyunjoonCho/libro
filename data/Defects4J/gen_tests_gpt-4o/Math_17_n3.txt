
import org.apache.commons.math3.dfp.Dfp;
import org.apache.commons.math3.dfp.DfpField;
import org.junit.Test;
import static org.junit.Assert.*;

public class DfpMultiplyTest {

    @Test
    public void testDfpMultiply() {
        DfpField field = new DfpField(10);
        Dfp dfpValue = field.newDfp(2.5);

        // Test multiplication within the specified range (0 <= n <= 9999)
        Dfp resultWithinRange = dfpValue.multiply(9999);
        assertEquals("24997.5", resultWithinRange.toString());

        // Test multiplication with a value beyond the 9999 limit
        // According to the bug, this should violate the general contract by throwing an error or returning an incorrect value
        Dfp resultBeyondRange = dfpValue.multiply(10000);
        
        // The expected result should be 25000 in string representation.
        assertEquals("25000.0", resultBeyondRange.toString());
    }
}
