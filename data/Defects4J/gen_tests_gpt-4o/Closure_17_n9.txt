script
/**
 * Class defining an interface with two numbers.
 * @interface
 */
function TwoNumbers() {}

/** @type number */
TwoNumbers.prototype.first;

/** @type number */
TwoNumbers.prototype.second;

/** @const @type {TwoNumbers} */
var SOME_DEFAULT = /** @type {TwoNumbers} */ ({first: 1, second: 2});

/** 
 * Class with a two number member.
 * @constructor
 */
function HasTwoNumbers() {
  /** @type {TwoNumbers} */
  this.twoNumbers = this.getTwoNumbers();
}

/** 
 * Get the default two numbers.
 * @return {TwoNumbers}
 */
HasTwoNumbers.prototype.getTwoNumbers = function() {
  return SOME_DEFAULT;
};

// Test case to simulate compilation
function testIssueConstTypeCast() {
  try {
    var instance = new HasTwoNumbers();
    console.log(instance.twoNumbers.first);   // Expect 1
    console.log(instance.twoNumbers.second);  // Expect 2
    
    console.assert(instance.twoNumbers.first === 1, "First number should be 1");
    console.assert(instance.twoNumbers.second === 2, "Second number should be 2");
  } catch (e) {
    // Here is where you'd catch type-related errors if they occurred
    console.error(e);
  }
}

testIssueConstTypeCast();
