public void testConstTypeCastInformation() {
    // This is a JavaScript-related bug, translated to JavaScript test in JUnit format
    
    String jsCodeWithoutConst = "/** @type {TwoNumbers} */ var SOME_DEFAULT = {first: 1, second: 2};\n" +
                                "/** @constructor */\n" +
                                "function HasTwoNumbers() {\n" +
                                "   /** @type {TwoNumbers} */\n" +
                                "   this.twoNumbers = this.getTwoNumbers();\n" +
                                "}\n" +
                                "/** @return {TwoNumbers} */\n" +
                                "HasTwoNumbers.prototype.getTwoNumbers = function() {\n" +
                                "   return SOME_DEFAULT;\n" +
                                "};";
    
    String jsCodeWithConst = "/** @const */ /** @type {TwoNumbers} */ var SOME_DEFAULT = {first: 1, second: 2};\n" +
                             "/** @constructor */\n" +
                             "function HasTwoNumbers() {\n" +
                             "   /** @type {TwoNumbers} */\n" +
                             "   this.twoNumbers = this.getTwoNumbers();\n" +
                             "}\n" +
                             "/** @return {TwoNumbers} */\n" +
                             "HasTwoNumbers.prototype.getTwoNumbers = function() {\n" +
                             "   return SOME_DEFAULT;\n" +
                             "};";

    // Assuming we have some function runClosureCompiler to simulate the running of a JavaScript in Closure Compiler environment
    boolean compilesWithoutConst = runClosureCompiler(jsCodeWithoutConst).isCompilesWithoutWarnings();
    boolean compilesWithConst = runClosureCompiler(jsCodeWithConst).isCompilesWithoutWarnings();

    assertTrue("Code should compile without warnings when not using @const", compilesWithoutConst);
    assertFalse("Code should not compile without warnings when using @const", compilesWithConst);
}