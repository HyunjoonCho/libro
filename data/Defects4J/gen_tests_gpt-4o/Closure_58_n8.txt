
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testOnlineCcBug() {
        String jsCode = "function keys(obj) { " +
                        "var a = [], i = 0; " +
                        "for (a[i++] in obj) ; " +
                        "return a; " +
                        "}";

        CompilerOptions options = new CompilerOptions();
        CommandLineRunner runner = new CommandLineRunner(
                new String[]{},
                options);

        try {
            runner.setInput(
                    SourceFile.fromCode("test.js", jsCode));
            runner.run();
            
            // Check for success; in a real test, you would be more specific
            String[] errors = runner.getErrors().stream().map(
                    diagnostic -> diagnostic.toString()
            ).toArray(String[]::new);

            assertEquals(0, errors.length);
        } catch (Exception e) {
            fail("Expected no exceptions, but got: " + e.getMessage());
        }
    }
}
