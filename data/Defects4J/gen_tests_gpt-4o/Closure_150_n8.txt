script
public class TypeCheckerTest {
    
    @Test
    public void testTypeCheckerWithFunctionAnnotations() {
        // Define the namespace and function within an anonymous function
        String codeWithAnonFunction = """
            var ns = {};
            
            (function() {
                /** @param {string=} b */
                ns.a = function(b) {}
            })();
            
            function d() {
                ns.a();
                ns.a(123);
            }
            """;

        // Parse and compile the code with a hypothetical type checker
        compileWithTypeChecker(codeWithAnonFunction);
        
        // Assert that warnings are detected correctly
        // Expected behavior: should receive a warning for ns.a(123)
        // Actual behavior (bug): warning for ns.a(), no warning for ns.a(123)
        assertWarnings("Expected warning for ns.a(123) not detected", ...);
    }

    @Test
    public void testTypeCheckerWithDirectFunctionAssignment() {
        // Define the namespace and function directly
        String codeWithoutAnonFunction = """
            var ns = {};
            
            /** @param {string=} b */
            ns.a = function(b) {}
            
            function d() {
                ns.a();
                ns.a(123);
            }
            """;

        // Parse and compile the code with a hypothetical type checker
        compileWithTypeChecker(codeWithoutAnonFunction);
        
        // Assert that warnings are detected correctly
        // Expected behavior: should receive a warning for ns.a(123)
        assertWarnings("Warning detected for ns.a(123) as expected", ...);
    }
    
    @Test
    public void testTypeCheckerWithCallsOutsideFunction() {
        // Define the namespace and function within an anonymous function
        String codeOutsideFunctionCall = """
            var ns = {};
            
            (function() {
                /** @param {string=} b */
                ns.a = function(b) {}
            })();
            
            ns.a();
            ns.a(123);
            """;

        // Parse and compile the code with a hypothetical type checker
        compileWithTypeChecker(codeOutsideFunctionCall);
        
        // Assert that warnings are detected correctly
        // Expected behavior: should receive a warning for ns.a(123)
        assertWarnings("Expected warning for ns.a(123) not detected when called outside a function", ...);
    }

    private void compileWithTypeChecker(String code) {
        // Hypothetical implementation for compiling JavaScript code
        // and generating type checking warnings.
        // This is a placeholder and should be replaced by actual type checker framework logic.
    }

    private void assertWarnings(String message, Object... conditions) {
        // Hypothetical implementation for asserting warnings generated by the type checker.
        // This should be implemented based on the specifics of the type checker and test framework.
    }
}
