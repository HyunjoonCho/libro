
import org.apache.commons.codec.binary.Base64InputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class Base64InputStreamTest {

    @Test
    public void testBase64InputStreamRead() {
        byte[] data = "abcxyz".getBytes(); // A 6-byte array (which is a multiple of 3)
        Base64InputStream base64InputStream = new Base64InputStream(new ByteArrayInputStream(data), true);

        try (Reader reader = new InputStreamReader(base64InputStream)) {
            char[] buffer = new char[8];
            int bytesRead = 0;
            int totalRead = 0;

            // Attempt to read the stream contents until the end of stream is reached
            while ((bytesRead = reader.read(buffer)) != -1) {
                if (bytesRead == 0) {
                    fail("Base64InputStream should not return zero indicating end of stream issue.");
                }
                totalRead += bytesRead;
            }

            // Check that the total number of characters read matches expected base64 length
            int expectedBase64Length = (int) Math.ceil(data.length / 3.0) * 4;
            assertEquals(expectedBase64Length, totalRead);

        } catch (IOException e) {
            fail("IOException should not be thrown: " + e.getMessage());
        }
    }
}
