
import org.joda.time.DateTime;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.Test;
import static org.junit.Assert.*;

public class GJChronologyTest {

    @Test
    public void testValidJulianDateWithGJChronology() {
        // Create a DateTime with JulianChronology
        DateTime jdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, JulianChronology.getInstanceUTC());

        // Assert that the Julian date is indeed valid
        assertEquals(1500, jdt.getYear());
        assertEquals(2, jdt.getMonthOfYear());
        assertEquals(29, jdt.getDayOfMonth());

        try {
            // Attempt to create the same date with GJChronology
            DateTime gjdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, GJChronology.getInstanceUTC());
            fail("Expected IllegalFieldValueException not thrown");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Verify the exception message
            assertTrue(e.getMessage().contains("Value 29 for dayOfMonth must be in the range [1,28]"));
        }
    }
}
