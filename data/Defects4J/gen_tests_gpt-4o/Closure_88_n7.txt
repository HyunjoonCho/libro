script
// Original JavaScript function
function closureCompilerTest(someNode) {
    var nodeId;
    return ((nodeId = someNode.id) && (nodeId = parseInt(nodeId.substr(1))) && nodeId > 0);
}

// Test case to demonstrate the issue
function testClosureCompilerIssue107() {
    // Create a mock node object with an id
    const mockNode = {
        id: "n123"
    };
    
    // Expected output: true, because nodeId will be set to 123, which is greater than 0
    const expected = true;

    // Actual output before compilation
    const actualBefore = closureCompilerTest(mockNode);
    console.assert(actualBefore === expected, `Test failed before compilation: expected ${expected}, but got ${actualBefore}`);

    // Simulating the incorrect compilation by Closure Compiler
    function closureCompilerTestCompiled(b) {
        var a;
        return b.id && (a = parseInt(a.substr(1))) && a > 0;
    }

    // Actual output after incorrect compilation
    const actualAfter = closureCompilerTestCompiled(mockNode);
    console.assert(actualAfter === expected, `Test failed after incorrect compilation: expected ${expected}, but got ${actualAfter}`);
}

// Run the test case
testClosureCompilerIssue107();
