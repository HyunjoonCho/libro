
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.Test;

import java.util.Map;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class CharSequenceKeyDeserializationTest {

    public static class CharSequenceKeyPOJO {
        public Map<CharSequence, String> map;

        // Include default constructor, getters, setters for Jackson
        public CharSequenceKeyPOJO() {}

        public Map<CharSequence, String> getMap() {
            return map;
        }

        public void setMap(Map<CharSequence, String> map) {
            this.map = map;
        }
    }

    @Test
    public void testDeserializationWithCharSequenceKey() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        String json = "{\"map\": {\"key\": \"value\"}}";
        try {
            // Attempting to deserialize JSON with CharSequence as key
            CharSequenceKeyPOJO result = objectMapper.readValue(json, CharSequenceKeyPOJO.class);
            fail("Expected a JsonMappingException due to missing KeyDeserializer for CharSequence");
        } catch (JsonProcessingException e) {
            // Validate that the error is due to the missing KeyDeserializer for CharSequence
            assertTrue(e instanceof InvalidDefinitionException);
            System.out.println("Caught expected InvalidDefinitionException: " + e.getMessage());
        }
    }
}
