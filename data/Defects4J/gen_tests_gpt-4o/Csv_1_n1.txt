
import org.junit.Test;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;

import static org.junit.Assert.assertEquals;

class ExtendedBufferReader extends BufferedReader {
    private int lineCount = 0;
    private boolean lastCharWasCR = false;

    public ExtendedBufferReader(Reader in) {
        super(in);
    }

    @Override
    public int read() throws IOException {
        int ch = super.read();
        if (ch == '\n' && !lastCharWasCR) {
            lineCount++;
        }
        if (ch == '\r') {
            lineCount++;
            lastCharWasCR = true;
        } else {
            lastCharWasCR = false;
        }
        return ch;
    }

    @Override
    public String readLine() throws IOException {
        String line = super.readLine();
        // Increment line count (BufferedReader.readLine() handles all types by default)
        if (line != null) {
            lineCount++;
        }
        return line;
    }

    public int getLineCount() {
        return lineCount;
    }
}

public class ExtendedBufferReaderTest {

    @Test
    public void testLineCountWithVariousEOLs() throws IOException {
        String content = "line1\rline2\nline3\r\nline4";
        ExtendedBufferReader reader = new ExtendedBufferReader(new StringReader(content));

        // Read through the whole content to increase line count
        while (reader.read() != -1) {}

        // Expect 4 lines: \r, \n, and \r\n should each increment count by 1
        assertEquals(4, reader.getLineCount());
    }
}
