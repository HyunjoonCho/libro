public void testCompilerRemovesFunctionProperties() {
    // Simulate what the Closure Compiler does
    Map<String, Function<Void, Void>> map = new HashMap<>();

    Function<Void, Void> f1 = new Function<Void, Void>() {
        public Void apply(Void v) {
            System.out.println("f1");
            return null;
        }
    };
    Function<Void, Void> f2 = new Function<Void, Void>() {
        public Void apply(Void v) {
            System.out.println("f2");
            return null;
        }
    };

    map.put("f1", f1);
    map.put("f2", f2);

    // This would normally be stripped by the compiler if not quoted
    f1.getClass().getField("alwaysCall").set(f1, true);

    Function<Void, Void> funcToCall = map.get(Math.random() > 0.5 ? "f1" : "f2");

    try {
        if ((Boolean) funcToCall.getClass().getField("alwaysCall").get(funcToCall)) {
            funcToCall.apply(null);
        }
    } catch (Exception e) {
        // Property `alwaysCall` was likely removed or not set
        fail("Function property was removed or not set correctly.");
    }
}