script
// A simple function to simulate test assertions in JavaScript
function assert(condition, message) {
    if (!condition) {
        throw new Error(message || "Assertion failed");
    }
}

// Test function to reproduce the bug behavior
function testCompilerRemovesFunctionProperties() {
    var map = {};

    var addToMap = function(key, func) {
        map[key] = func;
    };

    var f1 = function() { console.log('f1'); };
    f1.alwaysCall = true;  // This property is removed by advanced compilation without quotes
    var f2 = function() { console.log('f2'); };

    addToMap('f1', f1);
    addToMap('f2', f2);

    var callFunctionByKey = function(key) {
        var f = map[key];
        if (f.alwaysCall) {  // This check fails after advanced compilation
            f();
            return true;
        }
        return false;
    };

    // Use Math.random > 0.5 to ensure randomness in callFunctionByKey
    var result1 = callFunctionByKey('f1');
    var result2 = callFunctionByKey('f2');

    // Assert that f1 is always called when its key is used
    assert(result1 === true, "f1 should be called since it has alwaysCall property");
    assert(result2 === false, "f2 should not be called when checked for alwaysCall property");
}

try {
    testCompilerRemovesFunctionProperties();
    console.log("All tests passed.");
} catch (e) {
    console.error(e.message);
}
