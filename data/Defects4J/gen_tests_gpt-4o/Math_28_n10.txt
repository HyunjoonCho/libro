
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.UnboundedSolutionException;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.fail;

public class SimplexSolverTest {

    private static final int ENTITIES_COUNT = 15; // Change this to 2 to not see the exception

    @Test(expected = UnboundedSolutionException.class)
    public void testUnboundedSolutionException() {
        // Define the coefficients of the objective function
        double[] coefficients = new double[ENTITIES_COUNT + 1];
        coefficients[0] = 1.0; // Coefficient for t
        for (int i = 1; i <= ENTITIES_COUNT; i++) {
            coefficients[i] = 0.0; // Coefficient for L
        }
        
        LinearObjectiveFunction function = new LinearObjectiveFunction(coefficients, 0);

        // Create the list of constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        
        for (int r = 0; r < ENTITIES_COUNT; r++) {
            double[] qConstraint = new double[ENTITIES_COUNT + 1];
            qConstraint[r + 1] = 1;
            constraints.add(new LinearConstraint(qConstraint, Relationship.GEQ, r));

            double[] xConstraint = new double[ENTITIES_COUNT + 1];
            xConstraint[0] = 1; // t coefficient
            xConstraint[r + 1] = -1;
            constraints.add(new LinearConstraint(xConstraint, Relationship.LEQ, 0));
        }

        // Create the solver and solve the problem
        SimplexSolver solver = new SimplexSolver();
        try {
            solver.optimize(function, constraints, new NonNegativeConstraint(true));
            fail("Expected UnboundedSolutionException to be thrown");
        } catch (UnboundedSolutionException e) {
            // Expected exception, test should pass
            e.printStackTrace();
        }
    }
}
