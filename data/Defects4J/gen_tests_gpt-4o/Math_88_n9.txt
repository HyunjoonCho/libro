
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIncorrectSolution() {
        // Objective function: Maximize 3x + 4y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{3, 4}, 0);

        // Constraints:
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 1}, Relationship.LEQ, 5)); // x + y <= 5
        constraints.add(new LinearConstraint(new double[]{1, 0}, Relationship.LEQ, 3)); // x <= 3
        constraints.add(new LinearConstraint(new double[]{0, 1}, Relationship.LEQ, 2)); // y <= 2

        // Create and solve the problem
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, new NonNegativeConstraint(true));

        // The expected solution: x = 3, y = 2, max = 3*3 + 4*2 = 17
        assertEquals(3.0, solution.getPoint()[0], 1e-6);
        assertEquals(2.0, solution.getPoint()[1], 1e-6);
        assertEquals(17.0, solution.getValue(), 1e-6);
    }
}
