
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;
import org.apache.commons.math3.distribution.TDistribution;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class PearsonsCorrelationTest {

    @Test
    public void testPValuePrecision() {
        // Example data with a very large correlation coefficient, leading to a small p-value
        double[] x = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
        double[] y = {10, 9, 8, 7, 6, 5, 4, 3, 2, 1};

        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();

        // Obtain correlation coefficient
        double correlationCoefficient = pearsonsCorrelation.correlation(x, y);

        // Degrees of freedom
        int degreesOfFreedom = x.length - 2;

        // Compute t value
        double t = Math.abs(correlationCoefficient) * Math.sqrt((degreesOfFreedom) / (1 - correlationCoefficient * correlationCoefficient));

        // Initialize TDistribution with the degrees of freedom
        TDistribution tDistribution = new TDistribution(degreesOfFreedom);

        // Calculate p-value using the current implementation
        double pValueCurrentImplementation = 2 * (1 - tDistribution.cumulativeProbability(t));

        // Proposed solution for calculating the p-value
        double pValueProposedSolution = 2 * tDistribution.cumulativeProbability(-t);

        // Assert that the p-value from the proposed solution is more precise and not zero
        assertTrue(pValueCurrentImplementation == 0); // Current implementation leads to zero
        assertTrue(pValueProposedSolution > 0);       // Proposed solution should provide a small non-zero p-value
    }
}
