
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class EnumPolymorphismTest {

    // Define an enum for types
    public enum TypeEnum {
        CONTACT, EMAIL
    }

    // Define a base class with type info
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "kind")
    @JsonSubTypes({
        @JsonSubTypes.Type(value = Contact.class, name = "CONTACT"),
        @JsonSubTypes.Type(value = Email.class, name = "EMAIL")
    })
    public static class Base {
        public String name;
    }

    // Define a subclass for 'CONTACT'
    public static class Contact extends Base {
    }

    // Define another subclass for 'EMAIL'
    public static class Email extends Base {
        public String email;
    }

    // Test method to reproduce the bug
    @Test
    public void testPolymorphicEnumDeserialization() throws JsonProcessingException {
        String json = "{ \"kind\": \"CONTACT\", \"name\": \"Foo\" }";

        ObjectMapper objectMapper = new ObjectMapper();

        try {
            Base result = objectMapper.readValue(json, Base.class);
            assertTrue(result instanceof Contact); // The test expects this to be true
        } catch (Exception e) {
            // Print stack trace if exception occurs, indicating the issue was reproduced
            e.printStackTrace();
            throw e;
        }
    }
}
