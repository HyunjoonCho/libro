
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.Assert.assertNotEquals;

public class ZipArchiveEntryTest {

    @Test
    public void testZipArchiveEntryEquality() throws IOException {
        // Create a sample ZIP file as a byte array
        byte[] zipData = createSampleZipWithComment();

        // Read from ZipArchiveInputStream
        ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(zipData));
        ZipArchiveEntry entryFromInputStream = zipInputStream.getNextZipEntry();
        zipInputStream.close();

        // Read from ZipFile
        ZipFile zipFile = new ZipFile(new ByteArrayInputStream(zipData));
        Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
        ZipArchiveEntry entryFromZipFile = entries.nextElement();
        zipFile.close();

        // Assert that both entries are not equal
        assertNotEquals("Expected different entries due to comment discrepancy", entryFromInputStream, entryFromZipFile);
    }

    private byte[] createSampleZipWithComment() throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ZipOutputStream zipOutputStream = new ZipOutputStream(byteArrayOutputStream);

        // Create a sample entry with a comment
        ZipEntry zipEntry = new ZipEntry("sample.txt");
        zipEntry.setComment("sample comment");
        zipOutputStream.putNextEntry(zipEntry);
        zipOutputStream.write("Hello, World!".getBytes());
        zipOutputStream.closeEntry();
        zipOutputStream.close();

        return byteArrayOutputStream.toByteArray();
    }
}
