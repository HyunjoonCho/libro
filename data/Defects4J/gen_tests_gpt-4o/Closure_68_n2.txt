
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class CompilerErrorMessageTest {

    @Test
    public void testInvalidTypeFunctionAnnotation() {
        // Java-based setup to simulate the command line process
        String[] command = {"java", "-jar", "compiler.jar", "--js", "test.js"};

        // Prepare expected and actual output capturing
        String expectedErrorMessage = "expected '('";
        String unexpectedErrorMessage = "Parse error. Unexpected end of file";
        
        // Capture the system error stream to analyze compiler output
        ByteArrayOutputStream errorContent = new ByteArrayOutputStream();
        System.setErr(new PrintStream(errorContent));

        try {
            Process process = Runtime.getRuntime().exec(command);
            process.waitFor();

            // Handle the output and verify expected behavior
            String actualErrorMessage = errorContent.toString().trim();
            assertFalse("Unexpected error message found", actualErrorMessage.contains(unexpectedErrorMessage));
            assertTrue("Expected error message not found", actualErrorMessage.contains(expectedErrorMessage));

        } catch (Exception e) {
            fail("An exception occurred during test execution: " + e.getMessage());
        } finally {
            // Reset the error stream
            System.setErr(System.err);
        }
    }
}
