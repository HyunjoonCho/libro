
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.WarningLevel;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testJSC_DETERMINISTIC_TEST() {
        // Initialize the Compiler
        Compiler compiler = new Compiler();

        // Set Compiler Options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        WarningLevel.QUIET.setOptionsForWarningLevel(options);

        // JavaScript source code
        String jsCode = 
            "var t = null;\n" +
            "window.test = function() {\n" +
            "  if (t != null) {\n" +
            "    t = null;\n" +
            "  }\n" +
            "  t = 1;\n" +
            "};";

        // Provide input source file
        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("testcode", jsCode));

        // Execute Compilation
        compiler.compile(new ArrayList<>(), inputs, options);

        // Check for Deteministic Test Warnings
        boolean hasJscDeterministicTestWarning = compiler.getWarnings().stream()
                .anyMatch(warning -> "JSC_DETERMINISTIC_TEST".equals(warning.getType().key));

        // Assert that there is no JSC_DETERMINISTIC_TEST warning
        assertTrue("Expected no JSC_DETERMINISTIC_TEST warnings", !hasJscDeterministicTestWarning);
    }
}
