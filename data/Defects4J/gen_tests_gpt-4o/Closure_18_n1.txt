
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DependencyOptions;
import com.google.javascript.jscomp.SourceFile;
import junit.framework.TestCase;

import java.util.Arrays;

public class DependencySortingTest extends TestCase {

    public void testDependencySortingWithoutClosurePass() {
        // Create a new instance of the Compiler
        Compiler compiler = new Compiler();

        // Set up Compiler options
        CompilerOptions options = new CompilerOptions();

        // Set closurePass to false
        options.setClosurePass(false);

        // Enable dependency sorting
        DependencyOptions dependencyOptions = new DependencyOptions();
        dependencyOptions.setDependencySorting(true);
        options.setDependencyOptions(dependencyOptions);

        // Source files with dependencies
        SourceFile file1 = SourceFile.fromCode("file1.js", "goog.provide('ns1.file1');\n" +
                "goog.require('ns2.file2');\n" +
                "function f1() {}");
        SourceFile file2 = SourceFile.fromCode("file2.js", "goog.provide('ns2.file2');\n" +
                "function f2() {}");

        // Compile the sources
        compiler.compile(Arrays.asList(SourceFile.fromCode("externs.js", "")), 
                         Arrays.asList(file1, file2), 
                         options);

        // The expected output should have file2 (which provides 'ns2.file2') before file1
        String expected = "goog.provide('ns2.file2');\n" +
                          "function f2() {}\n" +
                          "goog.provide('ns1.file1');\n" +
                          "goog.require('ns2.file2');\n" +
                          "function f1() {}";

        assertEquals(expected, compiler.toSource());
    }
}
