
import org.junit.Assert;
import org.junit.Test;
import org.apache.commons.lang3.StringUtils;

public class StringUtilsTest {

    private class CustomCharSequence implements CharSequence {

        private final String internalString;

        public CustomCharSequence(String str) {
            this.internalString = str;
        }

        @Override
        public int length() {
            return internalString.length();
        }

        @Override
        public char charAt(int index) {
            return internalString.charAt(index);
        }

        @Override
        public CharSequence subSequence(int start, int end) {
            return internalString.subSequence(start, end);
        }

        @Override
        public String toString() {
            return internalString;
        }

        // Does not override equals() method deliberately
    }

    @Test
    public void testStringUtilsEqualsWithDifferentCharSequenceImplementations() {
        String str = "test";
        CharSequence cs1 = new CustomCharSequence(str);
        CharSequence cs2 = new String(str);

        // Direct equals check would fail as CustomCharSequence does not override equals
        Assert.assertFalse(cs1.equals(cs2));

        // StringUtils.equals() should behave correctly for such cases even though it's not guaranteed
        Assert.assertTrue("StringUtils.equals should return true for CharSequences representing the same text", 
                          StringUtils.equals(cs1, cs2));
    }
}
