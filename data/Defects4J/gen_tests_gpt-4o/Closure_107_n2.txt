
import com.google.javascript.jscomp.CommandLineRunner;
import java.io.ByteArrayOutputStream;

public class ClosureCompilerTest {

    public static void main(String[] args) {
        String inputCode = "var MSG_foo = 'bar';";
        
        // Use ByteArrayOutputStream to capture the output and error streams from the compiler
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        ByteArrayOutputStream errStream = new ByteArrayOutputStream();
        
        // Setup command line arguments for Closure Compiler
        String[] compilationArgs = {
            "--compilation_level", "ADVANCED_OPTIMIZATIONS",
            "--js", "-", // Read from standard input
        };

        // Create a custom CommandRunner with capturing output streams
        CommandLineRunner runner = new CommandLineRunner(compilationArgs) {
            @Override
            protected ByteArrayOutputStream createOutputStream() {
                return outStream;
            }

            @Override
            protected ByteArrayOutputStream createErrorStream() {
                return errStream;
            }
        };

        // Execute the compilation
        runner.execute();

        // Convert output and error streams to strings
        String output = new String(outStream.toByteArray());
        String errors = new String(errStream.toByteArray());

        System.out.println("Output:");
        System.out.println(output);
        System.out.println("Errors:");
        System.out.println(errors);

        // Assertion to check that the error message is raised
        if (!errors.contains("message not initialized using goog.getMsg")) {
            throw new AssertionError("Expected error message was not found.");
        }

        System.out.println("Test case passed. Error message as expected.");
    }
}
