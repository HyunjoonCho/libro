
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.InitialGuess;
import org.apache.commons.math3.optimization.SimpleBounds;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.optimization.direct.MultivariateOptimizer;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class CMAESOptimizerTest {

    @Test
    public void testNaNParameters() {
        // Setting up the optimizer with extreme bounds
        MultivariateOptimizer optimizer = new CMAESOptimizer(
                5000,
                Double.MIN_VALUE,
                true,
                100,
                0,
                new JDKRandomGenerator(),
                false,
                null);

        double[] startPoint = new double[]{0.0};
        double[] lowerBound = new double[]{-Double.MAX_VALUE};
        double[] upperBound = new double[]{Double.MAX_VALUE};

        // Test using a basic fitness function that fails if a parameter is NaN
        CMAESOptimizer.FitnessFunction fitnessFunction = new CMAESOptimizer.FitnessFunction() {
            @Override
            public double value(double[] parameters) {
                for (double param : parameters) {
                    if (Double.isNaN(param)) {
                        throw new IllegalStateException("Parameter cannot be NaN");
                    }
                }
                // Simple example returning a fixed value, as optimization goal is secondary here
                return 0.0;
            }

            @Override
            public boolean isInSearchInterval(double[] parameters) {
                return true;
            }

            @Override
            public boolean isInSimplex(double[] parameters) {
                return true;
            }
        };

        try {
            optimizer.optimize(
                    new CMAESOptimizer.SimpleCMAESFitnessFunction(fitnessFunction),
                    GoalType.MINIMIZE,
                    new InitialGuess(startPoint),
                    SimpleBounds.unbounded(lowerBound, upperBound));
        } catch (IllegalStateException e) {
            // Assert we are catching our custom exception indicating NaN parameters
            assertFalse("Fitness function was called with NaN parameter", true);
        }
    }
}
