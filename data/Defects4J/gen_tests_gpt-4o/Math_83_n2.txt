
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.ArrayList;
import java.util.Collection;

import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.RealPointValuePair;
import org.apache.commons.math3.optim.linear.GoalType;
import org.junit.Test;

public class SimplexSolverBugTest {

    @Test
    public void testSimplexSolverBug() {
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{0.8, 0.2, 0.7, 0.3, 0.6, 0.4}, 0);
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        
        constraints.add(new LinearConstraint(new double[]{1, 0, 1, 0, 1, 0}, Relationship.EQ, 23.0));
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 1, 0, 1}, Relationship.EQ, 23.0));
        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0, 0, 0}, Relationship.GEQ, 10.0));
        constraints.add(new LinearConstraint(new double[]{0, 0, 1, 0, 0, 0}, Relationship.GEQ, 8.0));
        constraints.add(new LinearConstraint(new double[]{0, 0, 0, 0, 1, 0}, Relationship.GEQ, 5.0));

        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);

        // Correct optimal value is 25.8 according to the bug report
        assertEquals(25.8, solution.getValue(), 1e-9);

        double[] point = solution.getPoint();

        // Check if the constraints are satisfied
        assertTrue(point[0] + point[2] + point[4] == 23.0);
        assertTrue(point[1] + point[3] + point[5] == 23.0);
        assertTrue(point[0] >= 10.0);
        assertTrue(point[2] >= 8.0);
        assertTrue(point[4] >= 5.0);

        // Check solution values x0 = 10.0, x1 = 0.0, x2 = 8.0, x3 = 0.0, x4 = 5.0, x5 = 23.0
        assertEquals(10.0, point[0], 1e-9);
        assertEquals(0.0, point[1], 1e-9);
        assertEquals(8.0, point[2], 1e-9);
        assertEquals(0.0, point[3], 1e-9);
        assertEquals(5.0, point[4], 1e-9);
        assertEquals(23.0, point[5], 1e-9);
    }
}
