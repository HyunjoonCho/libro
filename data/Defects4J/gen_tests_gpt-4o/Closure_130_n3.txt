
import static org.junit.Assert.*;
import org.junit.Test;

public class ArgumentsScopeTest {

    @Test
    public void testArgumentsScopeNotCollapsed() {
        // Original JavaScript behavior simulation
        Object[] originalArguments = { 1, 2, 3 };
        Runnable originalFunction = createFunction(originalArguments);
        
        // This would simulate the output: "1, 2, 3", if alerting happened
        assertEquals("1, 2, 3", executeFunction(originalFunction));
        
        // Simulate "compiled" JavaScript behavior which is incorrect
        Object[] compiledArguments = { 1, 2, 3 };
        Runnable compiledFunction = compileFunction(compiledArguments);
        
        // This would incorrectly simulate the output: "undefined", if alerting happened
        assertNotEquals("1, 2, 3", executeFunction(compiledFunction));
    }
    
    private Runnable createFunction(Object[] args) {
        return new Runnable() {
            private Object[] arguments = args;
            
            @Override
            public void run() {
                setTimeout(() -> alert(arguments), 0);
            }
            
            private void setTimeout(Runnable r, int delay) {
                // Mock timeout for immediate execution
                r.run();
            }
            
            private void alert(Object[] message) {
                // Log or capture the "alert" message
            }
        };
    }
    
    private Runnable compileFunction(Object[] args) {
        // Simulate wrong behavior after incorrect "compilation"
        return new Runnable() {
            @Override
            public void run() {
                setTimeout(() -> alert(args), 0);  // Incorrect: This would use the global scope arguments
            }
            
            private void setTimeout(Runnable r, int delay) {
                // Mock timeout for immediate execution
                r.run();
            }
            
            private void alert(Object[] message) {
                // Log or capture the "alert" message
            }
        };
    }
    
    private String executeFunction(Runnable function) {
        // Instead of actually printing or alerting, capture what's given
        return "captured result"; // Placeholder to simulate captured alert
    }
}
