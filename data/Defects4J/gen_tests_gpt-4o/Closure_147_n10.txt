
import com.google.javascript.jscomp.*;

public class GlobalThisWarningTest {
    
    public static void testGlobalThisWarning() {
        // Setup a compiler instance
        Compiler compiler = new Compiler();
        
        // Define test options
        CompilerOptions options = new CompilerOptions();
        // Enable warnings for using global this
        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);

        // JavaScript code to compile
        String code = 
            "var NS = {\n" +
            "  read: function() {\n" +
            "    return this.foo;\n" +
            "  },\n" +
            "  write: function() {\n" +
            "    this.foo = 123;\n" +
            "  }\n" +
            "};\n" +
            "NS.write2 = function() {\n" +
            "  this.foo = 123;\n" +
            "};\n";

        // Compile the JavaScript code
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("test.js", code);
        Result result = compiler.compile(extern, input, options);

        // Check for warnings, specifically the GLOBAL_THIS warning
        boolean globalThisWarningFound = result.warnings.stream()
            .anyMatch(diagnostic -> diagnostic.getType().key.equals("JSC_USED_GLOBAL_THIS"));

        // Assert that the warning is found
        assert globalThisWarningFound : "Expected GLOBAL_THIS warning not found.";
    }

    public static void main(String[] args) {
        testGlobalThisWarning();
        System.out.println("Test completed");
    }
}
