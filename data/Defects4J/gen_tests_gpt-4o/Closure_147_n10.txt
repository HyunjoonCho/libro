public void testGlobalThisWarning() {
    String code = "var NS = {"
                + " read: function() {"
                + "   return this.foo;"
                + " },"
                + " write: function() {"
                + "   this.foo = 123;"
                + " }"
                + "};"
                + "NS.write2 = function() {"
                + " this.foo = 123;"
                + "};";

    JSError[] warnings = compileWithWarnings(code);
    boolean foundReadWarning = false;
    boolean foundWriteWarning = false;

    for (JSError warning : warnings) {
        if (warning.getType().equals(DiagnosticType.warning("JSC_USED_GLOBAL_THIS", "dangerous use of the global this object"))) {
            if (warning.getLineNumber() == 3) {
                foundReadWarning = true;  // Line with 'return this.foo;'
            }
            if (warning.getLineNumber() == 7) {
                foundWriteWarning = true;  // Line with 'this.foo = 123;' in 'write'
            }
        }
    }

    assertTrue("Expected JSC_USED_GLOBAL_THIS warning in read method", foundReadWarning);
    assertTrue("Expected JSC_USED_GLOBAL_THIS warning in write method", foundWriteWarning);
}

private JSError[] compileWithWarnings(String code) {
    // Mock method: Replace with actual code compilation and warning retrieval logic
    return new JSError[]{};
}