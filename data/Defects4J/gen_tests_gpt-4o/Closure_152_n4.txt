public void testResolveTypesCastException() {
    try {
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARS, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
        options.setErrorLevel(DiagnosticGroups.STRICT_MODULE_DEP_CHECK, CheckLevel.ERROR);
        options.setErrorLevel(DiagnosticGroups.INVALID_CASTS, CheckLevel.ERROR);
        options.setSummaryDetailLevel(3);
        
        options.setProcessClosurePrimitives(true);
        options.setLoggingLevel(java.util.logging.Level.ALL);
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setProperty(PropertyNameOptimizationPolicy.AGGRESSIVE);
        
        // This represents the code that triggers the bug
        List<SourceFile> inputs = Arrays.asList(SourceFile.fromCode("input.js", ""),
                                                SourceFile.fromCode("other.js", "var x = {}; x.foo = function(/** ? */ unionType) {};"));
        
        Compiler compiler = new Compiler();
        compiler.compile(new ArrayList<>(), inputs, options);
        fail("Expected ClassCastException to be thrown");
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof ClassCastException);
        assertTrue(e.getMessage().contains("com.google.javascript.rhino.jstype.UnionType cannot be cast to com.google.javascript.rhino.jstype.ObjectType"));
    }
}