
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

public class ClosureCompilerBugTest {

    @Test(expected = ClassCastException.class)
    public void testResolveTypesBug() {
        String[] args = {
            "--create_name_map_files=true",
            "--jscomp_warning=missingProperties",
            "--jscomp_warning=undefinedVars",
            "--jscomp_warning=checkTypes",
            "--warning_level=VERBOSE",
            "--summary_detail_level=3",
            "--process_closure_primitives=true",
            "--jscomp_error=strictModuleDepCheck",
            "--jscomp_error=invalidCasts",
            "--logging_level=ALL",
            "--compilation_level=ADVANCED_OPTIMIZATIONS"
        };
        
        String jsCode = "function sampleFunction(a) { return a.prop; }\n";
        
        JSSourceFile input = JSSourceFile.fromCode("example.js", jsCode);
        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");

        CompilerOptions options = new CompilerOptions();
        // Set options based on the described bug options
        options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CompilerOptions.WarningLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARS, CompilerOptions.WarningLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CompilerOptions.WarningLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.STRICT_MODULE_DEP_CHECK, CompilerOptions.WarningLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.INVALID_CASTS, CompilerOptions.WarningLevel.ERROR);
        options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);

        // Simulate running the compiler as it would occur during the build
        CommandLineRunner runner = new CommandLineRunner(args) {};
        
        // We expect a ClassCastException to be thrown
        Result result = runner.doRun(input, extern, options);

        // Assert result to check compilation success or failure, expecting a failure here.
        // Usually, we might assertTrue(result.success), but since we expect failure...
        if (result.success) {
            throw new AssertionError("Expected compilation to fail with ClassCastException.");
        }
    }
}
