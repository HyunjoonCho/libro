public void testISO8601DateParsing() {
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule module = new SimpleModule();
    module.addDeserializer(Date.class, new StdDeserializer<Date>(Date.class) {
        @Override
        public Date deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
            String date = p.getText();
            // Custom parsing logic should be here if the default cannot handle
            return Date.from(Instant.parse(date));
        }
    });
    mapper.registerModule(module);
    
    try {
        assertNotNull(mapper.readValue("\"2014-10-03T18:00:00.6-05:00\"", Date.class));
    } catch (IOException e) {
        fail("Failed to parse 2014-10-03T18:00:00.6-05:00");
    }
    
    try {
        assertNotNull(mapper.readValue("\"2014-10-03T18:00:00.61-05:00\"", Date.class));
    } catch (IOException e) {
        fail("Failed to parse 2014-10-03T18:00:00.61-05:00");
    }
    
    try {
        assertNotNull(mapper.readValue("\"1997-07-16T19:20+01:00\"", Date.class));
    } catch (IOException e) {
        fail("Failed to parse 1997-07-16T19:20+01:00");
    }
    
    try {
        assertNotNull(mapper.readValue("\"1997-07-16T19:20:30.45+01:00\"", Date.class));
    } catch (IOException e) {
        fail("Failed to parse 1997-07-16T19:20:30.45+01:00");
    }
}