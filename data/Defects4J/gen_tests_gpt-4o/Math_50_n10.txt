
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class SolverTest {

    @Test
    public void testRegulaFalsiSolverBug() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new RegulaFalsiSolver();
        try {
            // This call is expected to fail under the current bug
            solver.solve(100, f, 1, 10);
            fail("Expected IllegalStateException due to excessive evaluations");
        } catch (IllegalStateException e) {
            assertTrue(e.getMessage().contains("maximal count (100) exceeded"));
        }
    }

    @Test
    public void testPegasusSolverSuccessful() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new PegasusSolver();
        double root = solver.solve(100, f, 1, 10);
        assertEquals(root, 3.5, 0.1); // Adjust the expected value and tolerance as needed
    }
}
