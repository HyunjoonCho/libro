public void testModifyKeyDeserializerForEnum() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule module = new SimpleModule();
    module.setDeserializerModifier(new BeanDeserializerModifier() {
        @Override
        public KeyDeserializer modifyKeyDeserializer(
                DeserializationConfig config,
                JavaType type,
                KeyDeserializer deserializer) {
            if (!type.isEnumType()) {
                return super.modifyKeyDeserializer(config, type, deserializer);
            }
            return new KeyDeserializer() {
                @Override
                @SuppressWarnings("unchecked")
                public Object deserializeKey(String key, DeserializationContext ctxt)
                        throws IOException, JsonProcessingException {
                    Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                    return Enum.valueOf(rawClass, key.toUpperCase());
                }
            };
        }
    });
    mapper.registerModule(module);

    String json = "{\"key1\":\"value1\"}";
    TypeReference<Map<SampleEnum, String>> typeRef = new TypeReference<Map<SampleEnum, String>>() {};

    Map<SampleEnum, String> map = mapper.readValue(json, typeRef);

    assertEquals("value1", map.get(SampleEnum.KEY1));
}

private enum SampleEnum {
    KEY1, KEY2;
}