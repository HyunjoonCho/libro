public void testCompilerFunctionPropertyPreservation() {
    // Setup the original function with property
    Map<String, Runnable> map = new HashMap<>();
    
    Runnable f1 = new Runnable() {
        public void run() {
            System.out.println("f1");
        }
    };
    
    // Add property to function
    Map<String, Boolean> functionProperties = new HashMap<>();
    functionProperties.put("alwaysCall", true);
    
    map.put("f1", f1);
    
    Runnable f2 = new Runnable() {
        public void run() {
            System.out.println("f2");
        }
    };
    map.put("f2", f2);
    
    // Generate a random key to simulate the original behavior
    String randomKey = Math.random() > 0.5 ? "f1" : "f2";
    Runnable selectedFunction = map.get(randomKey);
    
    // Check the property before calling
    if (Boolean.TRUE.equals(functionProperties.get(randomKey.equals("f1") ? "alwaysCall" : null))) {
        selectedFunction.run();  // Should call f1 if property is preserved correctly
    } else {
        // If not, no function runs, expecting f1 to be called when its property is present
        assertEquals("f1", ((randomKey.equals("f1")) ? "f1" : "none"));
    }
}