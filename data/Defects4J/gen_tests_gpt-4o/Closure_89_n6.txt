script
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

public class ClosureCompilerTestCase {

    @Test
    public void testFunctionPropertyPreservation() {
        // Simulated setup before Closure Compiler's ADVANCED_OPTIMIZATIONS
        var map = new java.util.HashMap<String, Runnable>();

        var f1 = new Runnable() {
            public boolean alwaysCall = true; // Property we want preserved
            @Override
            public void run() {
                System.out.println("f1");
            }
        };

        var f2 = new Runnable() {
            @Override
            public void run() {
                System.out.println("f2");
            }
        };

        map.put("f1", f1);
        map.put("f2", f2);

        // Function that utilizes the property
        var callFunctionByKey = (String key) -> {
            Runnable f = map.get(key);
            try {
                var field = f.getClass().getDeclaredField("alwaysCall");
                if (field != null && field.getBoolean(f)) {
                    f.run();
                }
            } catch (NoSuchFieldException | IllegalAccessException e) {
                // Property does not exist; do nothing
            }
        };

        // This simulates the call after compilation
        callFunctionByKey(Math.random() > 0.5 ? "f1" : "f2");
    }
}
