
import org.joda.time.DateTimeFieldType;
import org.joda.time.Partial;
import org.junit.Test;

public class PartialTest {

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidPartialConstructor() {
        new Partial(new DateTimeFieldType[]{DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay()}, new int[]{1, 1});
    }

    @Test
    public void testInvalidPartialCreationWithWithMethod() {
        Partial partialA = new Partial(DateTimeFieldType.clockhourOfDay(), 1).with(DateTimeFieldType.hourOfDay(), 1);
        Partial partialB = new Partial(DateTimeFieldType.hourOfDay(), 1).with(DateTimeFieldType.clockhourOfDay(), 1);

        try {
            // This should throw an exception because the types do not match
            boolean isEqual = partialA.isEqual(partialB);
            // Fail the test if no exception is thrown
            fail("Expected IllegalArgumentException because object field types do not match");
        } catch (IllegalArgumentException e) {
            // Expected behavior
            assertEquals("objects must have matching field types", e.getMessage());
        }
    }
}
