public void testIsFunctionClosureCompilerBug() {
    Function<Object, Boolean> originalIsFunction = functionToCheck -> {
        Object getType = new Object();
        return functionToCheck != null && "[object Function]".equals(getType.getClass().getMethod("toString").invoke(functionToCheck));
    };

    Function<Object, Boolean> arrayWorkaroundIsFunction = functionToCheck -> {
        Object getType = new ArrayList<>();
        return functionToCheck != null && "[object Function]".equals(getType.getClass().getMethod("toString").invoke(functionToCheck));
    };

    // Create a simple function for testing
    Runnable testFunction = () -> {};

    // The original implementation should fail due to closure compiler bug
    assertFalse(originalIsFunction.apply(testFunction));

    // The workaround should succeed
    assertTrue(arrayWorkaroundIsFunction.apply(testFunction));
}