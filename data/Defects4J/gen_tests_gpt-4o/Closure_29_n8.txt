
import static org.junit.Assert.*;
import org.junit.Test;
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;

public class ClosureCompilerBugTest {

    @Test
    public void testIsFunctionImplementationUsingObject() {
        String script = 
            "var isFunction = function(functionToCheck) {\n" +
            "    var getType;\n" +
            "    getType = {};\n" + 
            "    return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';\n" +
            "};\n" + 
            "isFunction(function() {});"; // Should return true for a function

        Context context = Context.enter();
        try {
            Scriptable scope = context.initStandardObjects();
            Object result = context.evaluateString(scope, script, "testIsFunctionUsingObject", 1, null);
            assertEquals(true, Context.toBoolean(result));
        } finally {
            Context.exit();
        }
    }

    @Test
    public void testIsFunctionImplementationUsingArray() {
        String script = 
            "var isFunction = function(functionToCheck) {\n" +
            "    var getType;\n" +
            "    getType = [];\n" + 
            "    return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';\n" +
            "};\n" + 
            "isFunction(function() {});"; // Should return true for a function

        Context context = Context.enter();
        try {
            Scriptable scope = context.initStandardObjects();
            Object result = context.evaluateString(scope, script, "testIsFunctionUsingArray", 1, null);
            assertEquals(true, Context.toBoolean(result));
        } finally {
            Context.exit();
        }
    }
}
