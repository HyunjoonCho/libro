
import org.junit.Test;
import static org.junit.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class JavaScriptCompilerTest {

    @Test
    public void testMissingCaretInErrorOutput() {
        String scriptWithErrorSingleLine = "alert(1;";
        String scriptWithErrorMultiLine = "alert(1;\n";

        String expectedOutputWithCaret = "alert(1;\n ^\n";
        
        // Assuming we have a method 'runCompiler' that simulates invoking the compiler
        // and returns the output string.
        String outputSingleLine = runCompiler(scriptWithErrorSingleLine);
        String outputMultiLine = runCompiler(scriptWithErrorMultiLine);

        // Caret should not be present in the single-line error
        assertFalse(outputSingleLine.contains("^"));

        // Caret should be present in the multi-line error
        assertTrue(outputMultiLine.contains(expectedOutputWithCaret));
    }

    private String runCompiler(String script) {
        // Mock method to simulate compiler output
        // In a real test, this is where you would integrate with the actual compiler code
        ByteArrayOutputStream outContent = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outContent));
        
        // Simulate the compiler behavior
        if (script.contains("\n")) {
            System.out.println("alert(1;\n ^\n");
        } else {
            System.out.println("test.js:1: ERROR - Parse error. missing ) after argument list");
            System.out.println("1 error(s), 0 warning(s)");
        }

        // Restore original System.out
        System.setOut(originalOut);

        return outContent.toString();
    }
}
