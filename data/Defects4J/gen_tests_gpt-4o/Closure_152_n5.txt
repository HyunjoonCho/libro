public void testResolveTypesUnionTypeCastException() {
    try {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARS, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
        options.setStrictModuleDepCheck(CheckLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.INVALID_CASTS, CheckLevel.ERROR);
        options.setCreateNameMapFiles(true);
        options.setProcessCommonJSModules(true);
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setSummaryDetailLevel(3);
        options.setLoggingLevel(Level.ALL);

        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", ""
            + "function f(x) { return x; }" 
            + "var a = f(/** @type {Object|number} */(1));"
            + "a.b = 5;");

        compiler.compile(extern, input, options);
        fail("Expected ClassCastException was not thrown.");
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof ClassCastException);
        assertTrue(e.getCause().getMessage().contains("UnionType cannot be cast to ObjectType"));
    }
}