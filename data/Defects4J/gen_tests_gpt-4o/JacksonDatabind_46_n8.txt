
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.util.concurrent.atomic.AtomicReference;

import static org.junit.Assert.assertEquals;

public class JavaTypeSignatureTest {

    @Test
    public void testGenericSignatureWithMissingBracket() {
        ObjectMapper objectMapper = new ObjectMapper();
        TypeFactory typeFactory = objectMapper.getTypeFactory();
        
        // Create the JavaType for AtomicReference<String>
        JavaType type = typeFactory.constructParametricType(AtomicReference.class, String.class);
        
        // Get the generic signature
        String genericSignature = type.getGenericSignature();
        
        // Expected signature
        String expectedSignature = "()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;";
        
        // Assert that the generated signature matches the expected signature
        assertEquals("Generic signature did not have the correct format", expectedSignature, genericSignature);
    }
}
