
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;

public class LabeledLoopBreakTest {

    @Test
    public void testLabeledLoopsBreaksClosureCompiler() {
        String inputJavaScript = "var i = 0;" +
                "lab1: do {" +
                "   lab2: do {" +
                "      i++;" +
                "      if (1) {" +
                "         break lab2;" +
                "      } else {" +
                "         break lab1;" +
                "      }" +
                "   } while(false);" +
                "} while(false);" +
                "console.log(i);";

        String expectedJavaScript = "var i = 0; do {lab2: do {i++; break lab2} while(0)} while(0); console.log(i);";

        // Setting up Closure Compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Default compilation level
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        // Source files to be compiled
        JSSourceFile input = JSSourceFile.fromCode("input.js", inputJavaScript);
        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");

        // Compile the code
        compiler.compile(extern, input, options);

        // The compiled JavaScript code
        String resultJavaScript = compiler.toSource();

        // Assert that the compiled code matches the expected output
        assertEquals(expectedJavaScript, resultJavaScript);
    }
}
