
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class TarChecksumTest {

    @Test
    public void testChecksumWithLeftZeroPadding() throws IOException {
        // Create a dummy TAR header with a checksum that is right-aligned
        byte[] tarHeader = new byte[512];
        
        // Set a valid name for the TAR entry
        String name = "test.txt";
        System.arraycopy(name.getBytes(), 0, tarHeader, 0, name.length());

        // Simulate a stored checksum with left zero padding
        String checksum = "001237";
        System.arraycopy(checksum.getBytes(), 0, tarHeader, 148, checksum.length());

        // Fill remaining checksum bytes with nulls
        tarHeader[148 + checksum.length()] = 0;
        
        // Use a ByteArrayInputStream to simulate reading the TAR entry
        ByteArrayInputStream bais = new ByteArrayInputStream(tarHeader);

        // Try to read the entry using TarArchiveInputStream which should fail if checksum handling is incorrect
        TarArchiveInputStream tais = new TarArchiveInputStream(bais);
        
        // This should throw an exception or lead to an error if the checksum is not handled correctly
        assertThrows(IOException.class, () -> {
            TarArchiveEntry entry = (TarArchiveEntry) tais.getNextEntry();
        });
    }
}
