
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Test;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

public class RoundingFunctionTest {

    private Double evaluateXPath(String expression) throws XPathExpressionException {
        XPath xPath = XPathFactory.newInstance().newXPath();
        return (Double) xPath.evaluate(expression, null, XPathConstants.NUMBER);
    }

    @Test
    public void testFloorWithNaN() throws XPathExpressionException {
        Double result = evaluateXPath("floor(number('NaN'))");
        assertTrue(Double.isNaN(result));
    }

    @Test
    public void testFloorWithNegativeInfinity() throws XPathExpressionException {
        Double result = evaluateXPath("floor(-2 div 0)");
        assertEquals(Double.NEGATIVE_INFINITY, result, 0);
    }

    @Test
    public void testFloorWithPositiveInfinity() throws XPathExpressionException {
        Double result = evaluateXPath("floor(2 div 0)");
        assertEquals(Double.POSITIVE_INFINITY, result, 0);
    }

    @Test
    public void testCeilingWithNaN() throws XPathExpressionException {
        Double result = evaluateXPath("ceiling(number('NaN'))");
        assertTrue(Double.isNaN(result));
    }

    @Test
    public void testCeilingWithNegativeInfinity() throws XPathExpressionException {
        Double result = evaluateXPath("ceiling(-2 div 0)");
        assertEquals(Double.NEGATIVE_INFINITY, result, 0);
    }

    @Test
    public void testCeilingWithPositiveInfinity() throws XPathExpressionException {
        Double result = evaluateXPath("ceiling(2 div 0)");
        assertEquals(Double.POSITIVE_INFINITY, result, 0);
    }

    @Test
    public void testRoundWithNaN() throws XPathExpressionException {
        Double result = evaluateXPath("round(number('NaN'))");
        assertTrue(Double.isNaN(result));
    }

    @Test
    public void testRoundWithNegativeInfinity() throws XPathExpressionException {
        Double result = evaluateXPath("round(-2 div 0)");
        assertEquals(Double.NEGATIVE_INFINITY, result, 0);
    }

    @Test
    public void testRoundWithPositiveInfinity() throws XPathExpressionException {
        Double result = evaluateXPath("round(2 div 0)");
        assertEquals(Double.POSITIVE_INFINITY, result, 0);
    }
}
