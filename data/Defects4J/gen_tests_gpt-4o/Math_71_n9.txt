
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.IntegratorException;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.FirstOrderIntegrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.junit.Assert;
import org.junit.Test;

public class ODEIntegratorTest {

    @Test
    public void testMissedEvent() throws DimensionMismatchException, IntegratorException {
        final double t0 = 1878250320.0000029;
        final double t =  1878250379.9999986;
        
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            public int getDimension() {
                return 1;
            }
            
            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = y[0] * 1.0e-6;
            }
        };

        DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 100.0, 1.0e-10, 1.0e-10);

        double[] y = { 1.0 };
        integrator.setInitialStepSize(60.0);

        // This step handler is used to print every step, which can help in debugging
        integrator.addStepHandler(new StepHandler() {
            public boolean requiresDenseOutput() {
                return false;
            }

            public void reset() {
            }

            public void handleStep(StepInterpolator interpolator, boolean isLast) {
                System.out.println("At time t = " + interpolator.getCurrentTime());
            }
        });

        double finalT = integrator.integrate(ode, t0, y, t, y);
        Assert.assertEquals(t, finalT, 1.0e-6);
    }
}
