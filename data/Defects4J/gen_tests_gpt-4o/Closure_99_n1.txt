
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.PropertyRenamingPolicy;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testJSC_USED_GLOBAL_THISWarning() {
        // Initialize compiler options
        CompilerOptions options = new CompilerOptions();
        options.setPropertyRenaming(PropertyRenamingPolicy.HEURISTIC);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS, com.google.javascript.jscomp.CheckLevel.WARNING);

        // JavaScript code to be compiled
        String[] jsCode = {
            "/** @constructor */ function MyClass() {}",
            "MyClass.prototype['MyMethod'] = function(a) {",
            "  this.a = a;",
            "}",
            "window['MyClass'] = MyClass;"
        };

        // Set up the inputs for the compiler
        List<String> arguments = new ArrayList<>();
        arguments.add("--compilation_level");
        arguments.add("ADVANCED_OPTIMIZATIONS");
        for (String code : jsCode) {
            arguments.add("--js");
            arguments.add(code);
        }
        
        // Use the command line runner to execute the compilation
        CommandLineRunner runner = new CommandLineRunner(arguments.toArray(new String[0]));
        
        // Execute the compiler
        Result result = runner.runCommand();

        // Check for JSC_USED_GLOBAL_THIS warning
        assertTrue("Compiler should have produced a JSC_USED_GLOBAL_THIS warning", result.warnings.stream().anyMatch(
            warning -> warning.getType().key.equals("JSC_USED_GLOBAL_THIS")
        ));
    }
}
