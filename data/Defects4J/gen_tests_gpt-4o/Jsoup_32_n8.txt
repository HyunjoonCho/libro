
import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Set;
import java.util.HashSet;

public class ElementCloneTest {

    // A simple simulation of the Element class for demonstration purposes
    class Element implements Cloneable {
        private Set<String> classNames = new HashSet<>();

        public void addClassName(String className) {
            classNames.add(className);
        }

        public Set<String> getClassNames() {
            return classNames;
        }

        @Override
        protected Object clone() {
            try {
                return super.clone();
            } catch (CloneNotSupportedException e) {
                throw new AssertionError(); // Can't happen
            }
        }
    }

    @Test
    public void testElementCloneSharesClassNamesSet() {
        Element original = new Element();
        original.addClassName("test-class");

        // Clone the element
        Element cloned = (Element) original.clone();

        // This test will demonstrate the bug by showing that both original and cloned share the same Set instance

        // Add a class name to the cloned element
        cloned.addClassName("cloned-class");

        // Check if the original element's classNames set reflects changes made to the cloned element.
        assertTrue("The original element's classNames should not contain 'cloned-class'", 
                   original.getClassNames().contains("cloned-class"));
    }
}

