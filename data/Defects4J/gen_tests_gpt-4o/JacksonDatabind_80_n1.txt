public void testExtraneousTypeIdMapping() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);

    // Define a base class with one subclass
    abstract class Animal {
        public String name;
    }

    @JsonTypeName("cat")
    static class Cat extends Animal {
        public int lives;
    }

    // Attempt to serialize and deserialize with default type handling
    Cat cat = new Cat();
    cat.name = "Whiskers";
    cat.lives = 9;

    String json;
    try {
        json = mapper.writeValueAsString(cat);
    } catch (JsonProcessingException e) {
        throw new RuntimeException("Serialization failed", e);
    }

    Animal result;
    try {
        result = mapper.readValue(json, Animal.class);
    } catch (IOException e) {
        throw new RuntimeException("Deserialization failed", e);
    }

    assertTrue(result instanceof Cat);
    assertEquals(cat.name, result.name);
    assertEquals(cat.lives, ((Cat) result).lives);
}