
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.NonNegativeConstraint;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.linear.PointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testIncorrectSolution() {
        // Objective function: Maximize 3x + 5y
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[] { 3, 5 }, 0);

        // Constraints:
        // 2x + 8y <= 13
        // 5x - 2y <= 11
        // x >= 0, y >= 0 (non-negative constraints handled separately)
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 2, 8 }, Relationship.LEQ, 13));
        constraints.add(new LinearConstraint(new double[] { 5, -2 }, Relationship.LEQ, 11));

        // Instantiate solver
        SimplexSolver solver = new SimplexSolver();

        // Solve the problem with non-negativity constraint
        PointValuePair solution = solver.optimize(
            objectiveFunction, 
            new org.apache.commons.math3.optim.nonlinear.scalar.GoalType.Maximize(), 
            new NonNegativeConstraint(true)
        );

        // Verify expected solution
        // As per the bug report, expecting a specific known solution
        double[] expectedSolution = { 1, 1 }; // Replace with the known expected values if available
        double epsilon = 1e-5; // Tolerance for floating-point comparisons

        // Assert that the solution matches the expected values
        assertEquals(expectedSolution[0], solution.getPoint()[0], epsilon);
        assertEquals(expectedSolution[1], solution.getPoint()[1], epsilon);
        assertEquals(3 * expectedSolution[0] + 5 * expectedSolution[1], solution.getValue(), epsilon);
    }
}
