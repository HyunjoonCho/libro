
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class ClosureCompilerBugTest {

    @Test
    public void testAssignmentRemovedInArrayPushExpression() {
        // Original JavaScript code
        String originalJs = ""
            + "function f() {\n"
            + "  var a = [], b;\n"
            + "  a.push(b = []);\n"
            + "  b[0] = 1;\n"
            + "  return a;\n"
            + "}";

        // Expected JavaScript output (minified but correct)
        String expectedJs = ""
            + "function f(){var a=[],b;a.push(b=[]);b[0]=1;return a;}";
        
        // Create a new compiler object
        Compiler compiler = new Compiler();

        // Set compiler options
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_READS, com.google.javascript.jscomp.CheckLevel.WARNING);

        // Compile the JavaScript
        Result result = compiler.compile(
            SourceFile.fromCode("externs.js", ""), // External input (typically browser or node.js externs)
            SourceFile.fromCode("input.js", originalJs), // JavaScript input to be compiled
            options
        );

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Assert that the compiled JavaScript is as expected
        assertTrue("The compiled code did not produce the expected output.", compiledCode.contains("a.push(b=[])"));
    }
}
