
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class PolymorphicTypeIdTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = "@class")
    static abstract class BaseClass {
        public String commonField;
    }

    static class SubClassA extends BaseClass {
        public String fieldA;
    }

    static class SubClassB extends BaseClass {
        public int fieldB;
    }

    @Test
    public void testIncompatibleTypeHandling() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // Create an instance of SubClassA
        SubClassA instanceA = new SubClassA();
        instanceA.commonField = "commonValue";
        instanceA.fieldA = "valueA";

        // Serialize instanceA as if it were an instance of SubClassB
        String json = objectMapper.writeValueAsString(instanceA);

        // Deserialize it back and expect a failure due to type incompatibility
        assertThrows(InvalidTypeIdException.class, () -> {
            objectMapper.readValue(json, SubClassB.class);
        });
    }
}
