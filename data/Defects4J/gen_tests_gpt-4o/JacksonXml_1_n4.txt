
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class DeserializationTest {

    static class Definition {
        @JsonProperty("records")
        @JsonSerialize(contentAs = Record.class)
        @JsonDeserialize(contentAs = Record.class)
        public List<Record> records = new ArrayList<>();
    }

    static class Record {
        @JsonProperty("fields")
        @JsonSerialize(contentAs = Field.class)
        @JsonDeserialize(contentAs = Field.class)
        public List<Field> fields = new ArrayList<>();
    }

    static class Field {
        @JsonProperty("name")
        public String name;

        @JsonProperty("value")
        public String value;

        public Field() {}

        public Field(String name, String value) {
            this.name = name;
            this.value = value;
        }
    }

    @Test
    public void testDeserializationOfNestedEmptyList() throws Exception {
        String json = "{ \"records\": [ { \"fields\": [] } ] }";

        ObjectMapper objectMapper = new ObjectMapper();
        Definition definition = objectMapper.readValue(json, Definition.class);

        assertEquals(1, definition.records.size());
        assertEquals(0, definition.records.get(0).fields.size());
    }
}
