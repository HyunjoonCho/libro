
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearConstraintSet;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIncorrectSolution() {
        // Define the coefficients of the objective function
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { -2, -3, -4 }, 0);

        // Define the constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 1, 1 }, Relationship.LEQ, 40));
        constraints.add(new LinearConstraint(new double[] { 2, 1, 1 }, Relationship.LEQ, 50));
        constraints.add(new LinearConstraint(new double[] { 1, 2, 3 }, Relationship.LEQ, 60));

        // Create a Simplex Solver
        SimplexSolver solver = new SimplexSolver();

        // Solve the problem
        PointValuePair solution = solver.optimize(
            GoalType.MAXIMIZE,
            f,
            new LinearConstraintSet(constraints),
            new NonNegativeConstraint(true)
        );

        // The expected optimal solution should be checked against known values
        double[] expectedSolution = { 10, 0, 30 };
        double expectedObjectiveValue = -140; // Since the function is -2x - 3y - 4z, and we are maximizing

        // Assert that the solution is as expected
        for (int i = 0; i < expectedSolution.length; i++) {
            assertEquals(expectedSolution[i], solution.getPoint()[i], 1e-5);
        }

        // Assert that the objective function value is as expected
        assertEquals(expectedObjectiveValue, solution.getValue(), 1e-5);
    }
}
