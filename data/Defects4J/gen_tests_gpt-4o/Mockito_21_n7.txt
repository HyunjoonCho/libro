
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import java.util.List;
import java.util.ArrayList;

import org.junit.Test;

public class AbstractClassMockingTest {

    interface UserAccount {
        List<String> getEmails();
        void addEmail(String email);
    }
    
    // Example 1: Fake with trivial Logic - showcasing the current challenge
    @Test
    public void testMockUserAccount() {
        UserAccount userAccount = mock(UserAccount.class);
        
        List<String> emailList = new ArrayList<>();
        doAnswer(invocation -> {
            String email = invocation.getArgument(0);
            emailList.add(email);
            return null;
        }).when(userAccount).addEmail(anyString());
        
        when(userAccount.getEmails()).thenReturn(emailList);
        
        userAccount.addEmail("test@example.com");
        assertTrue(userAccount.getEmails().contains("test@example.com"));
    }

    // Example 2: callback-style API - demonstrating both before and after proposed simplification
    interface AccountService {
        void getAccount(String id, AsyncCallback<UserAccount> callback);
    }

    interface AsyncCallback<T> {
        void onSuccess(T result);
        void onFailure(Throwable t);
    }

    @Test
    public void testMockAccountServiceWithCallback() {
        AccountService service = mock(AccountService.class);
        UserAccount mockAccount = mock(UserAccount.class);

        doAnswer(invocation -> {
            AsyncCallback<UserAccount> callback = invocation.getArgument(1);
            callback.onSuccess(mockAccount);
            return null;
        }).when(service).getAccount(eq("id"), any());

        service.getAccount("id", new AsyncCallback<UserAccount>() {
            @Override
            public void onSuccess(UserAccount result) {
                assertNotNull(result);
            }

            @Override
            public void onFailure(Throwable t) {}
        });
    }

    // Example 3: Uninteresting parameters - using isA() to ignore uninteresting parameter
    interface AccountRpcService {
        FutureAccount getAccount(RpcContext context, String id);
    }

    class FutureAccount {} // Dummy placeholder class for FutureAccount
    class RpcContext {} // Dummy placeholder class for RpcContext

    @Test
    public void testMockAccountRpcServiceWithUninterestingParameters() {
        AccountRpcService service = mock(AccountRpcService.class);
        FutureAccount futureAccount = new FutureAccount();

        when(service.getAccount(isA(RpcContext.class), eq("id"))).thenReturn(futureAccount);

        RpcContext context = new RpcContext();
        FutureAccount result = service.getAccount(context, "id");
        assertEquals(futureAccount, result);
    }
}
