
import org.junit.Test;
import java.util.Calendar;
import java.util.GregorianCalendar;
import org.joda.time.LocalDate;

import static org.junit.Assert.assertEquals;

public class LocalDateTest {

    @Test
    public void testCalendarEraInFromCalendarFields() {
        // Create a calendar date for BC era
        Calendar calendarBC = new GregorianCalendar();
        calendarBC.set(Calendar.ERA, GregorianCalendar.BC);
        calendarBC.set(Calendar.YEAR, 5); // 5 BC
        calendarBC.set(Calendar.MONTH, 0); // January
        calendarBC.set(Calendar.DAY_OF_MONTH, 1); // 1st

        LocalDate localDateBC = LocalDate.fromCalendarFields(calendarBC);

        // Verify BC era representation in LocalDate (Using proleptic year system)
        assertEquals(-4, localDateBC.getYear()); // BC 5 is year -4 in proleptic Gregorian calendar
        assertEquals(1, localDateBC.getMonthOfYear());
        assertEquals(1, localDateBC.getDayOfMonth());

        // Create a calendar date for AD era
        Calendar calendarAD = new GregorianCalendar();
        calendarAD.set(Calendar.ERA, GregorianCalendar.AD);
        calendarAD.set(Calendar.YEAR, 2023);
        calendarAD.set(Calendar.MONTH, 9); // October (zero-based for months)
        calendarAD.set(Calendar.DAY_OF_MONTH, 15);

        LocalDate localDateAD = LocalDate.fromCalendarFields(calendarAD);

        // Verify AD era representation in LocalDate
        assertEquals(2023, localDateAD.getYear());
        assertEquals(10, localDateAD.getMonthOfYear());
        assertEquals(15, localDateAD.getDayOfMonth());
    }
}
