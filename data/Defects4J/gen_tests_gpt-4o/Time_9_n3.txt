
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.junit.Test;
import static org.junit.Assert.*;

public class DateTimeZoneTest {

    @Test
    public void testMaxOffset() {
        // This formatter will parse custom date strings with time zone offsets
        DateTimeFormatter formatter = new DateTimeFormatterBuilder()
                                        .appendPattern("yyyy-MM-dd'T'HH:mm:ss")
                                        .appendTimeZoneOffset("", true, 2, 4)
                                        .toFormatter();

        // This is a valid maximum offset "+23:59"
        String validOffsetDate = "2023-10-10T10:00:00+23:59";
        try {
            DateTimeZone timeZone = formatter.parseDateTime(validOffsetDate).getZone();
            assertEquals("+23:59", timeZone.getID());
        } catch (IllegalArgumentException e) {
            fail("Exception should not have been thrown for a valid maximum offset");
        }

        // This is an invalid offset "+23:59:59.999"
        String invalidOffsetDate = "2023-10-10T10:00:00+23:59:59.999";
        try {
            formatter.parseDateTime(invalidOffsetDate);
            fail("Exception was expected for an invalid offset greater than +23:59");
        } catch (IllegalArgumentException e) {
            assertTrue("Expected exception message for invalid offset",
                       e.getMessage().contains("Invalid format:"));
        }
    }
}
