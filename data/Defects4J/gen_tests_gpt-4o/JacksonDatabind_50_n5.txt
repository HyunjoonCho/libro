
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JsonDeserializationTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    static class Node {
        public int id;
        public String name;
        public Node child;

        @JsonCreator
        public Node(int id, String name, Node child) {
            this.id = id;
            this.name = name;
            this.child = child;
        }

        // Constructor for plain object construction
        public Node(int id, String name) {
            this(id, name, null);
        }

        // Empty constructor for deserialization
        public Node() {}
    }

    @Test
    public void testJsonDeserializationWithJsonIdentityInfo() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();

        // JSON representing a cyclic relationship via the use of IDs
        String json = "{\"id\":1,\"name\":\"parent\",\"child\":{\"id\":2,\"name\":\"child\",\"child\":1}}";

        Node root = mapper.readValue(json, Node.class);

        // Validating the object structure after deserialization
        assertEquals(1, root.id);
        assertEquals("parent", root.name);
        assertEquals(2, root.child.id);
        assertEquals("child", root.child.name);

        // Check if the cycle is correctly deserialized
        assertEquals(root, root.child.child);
    }
}
