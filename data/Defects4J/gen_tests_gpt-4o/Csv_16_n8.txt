
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.Iterator;

import static org.junit.Assert.assertEquals;

public class CSVParserBugTest {

    @Test
    public void testNewIteratorSameLexer() throws Exception {
        String fiveRows = "1\n2\n3\n4\n5\n";
        
        System.out.println("Enhanced for loop, with peek:");
        CSVParser parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);

        // Consuming first two records using an enhanced for loop
        int recordNumber = 0;
        for (CSVRecord record : parser) {
            recordNumber++;
            System.out.println(recordNumber + " -> " + record.get(0));
            if (recordNumber >= 2) {
                break;
            }
        }

        // Attempting to peek with hasNext() using a new iterator
        Iterator<CSVRecord> iterator = parser.iterator();
        System.out.println("hasNext(): " + iterator.hasNext());

        // Expecting the next record to be "3", but due to the bug, it prints "4"
        for (CSVRecord record : parser) {
            recordNumber++;
            System.out.println(recordNumber + " -> " + record.get(0));
        }

        // Assertions to reproduce the bug behavior
        assertEquals("Iterator should start at record 3, but actually starts at record 4 due to bug", 4, recordNumber);
    }
}
