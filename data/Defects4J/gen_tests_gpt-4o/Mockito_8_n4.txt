
import org.junit.Test;
import org.mockito.internal.util.reflection.GenericMetadataSupport;

import static org.assertj.core.api.Assertions.assertThat;

public class GenericMetadataSupportTest {

    interface GenericsSelfReference<T extends GenericsSelfReference<T>> {
        T self();
    }

    @Test
    public void typeVariable_of_self_type() {
        GenericMetadataSupport genericMetadata = GenericMetadataSupport.inferFrom(GenericsSelfReference.class)
            .resolveGenericReturnType(firstNamedMethod("self", GenericsSelfReference.class));

        assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);
    }

    private static java.lang.reflect.Method firstNamedMethod(String methodName, Class<?> clazz) {
        for (java.lang.reflect.Method method : clazz.getDeclaredMethods()) {
            if (method.getName().equals(methodName)) {
                return method;
            }
        }
        throw new IllegalArgumentException("Method not found: " + methodName);
    }
}
