
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.junit.Test;

import static org.junit.Assert.*;

public class ElementSiblingIndexTest {

    @Test
    public void testElementSiblingIndexUnexpectedBehavior() {
        String html = "<table>" +
                      "<tr><td>Cell1</td><td>Cell2</td></tr>" +
                      "<tr><td>Cell3</td><td>Cell4</td></tr>" +
                      "<tr><td>Cell5</td><td>Cell6</td></tr>" +
                      "</table>";

        Document doc = Jsoup.parse(html);
        Element firstRow = doc.select("tr").first();
        Element secondRow = doc.select("tr").get(1);

        // According to the documentation, firstRow should be at index 0
        int firstRowIndex = firstRow.elementSiblingIndex();
        assertEquals(0, firstRowIndex);

        // Retrieve the same element from its parent's children list using the index
        Element retrievedElementByIndex = firstRow.parent().children().get(firstRowIndex);

        // Expect to retrieve the exact element, not just an equal one
        assertTrue("Retrieved element should be the same instance", retrievedElementByIndex == firstRow);
        
        // This is where the unexpected behavior occurs
        int secondRowIndex = secondRow.elementSiblingIndex();

        // Verify the second row index assumption based on documentation
        assertEquals(1, secondRowIndex);

        // Re-assess that the parent-child relationship holds correctly for second row
        Element retrievedElementSecondIndex = secondRow.parent().children().get(secondRowIndex);
        assertTrue("Both should point to the same reference", retrievedElementSecondIndex == secondRow);
    }
}
