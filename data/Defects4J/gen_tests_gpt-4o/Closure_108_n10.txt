
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.*;

public class ScopedAliasesTest {

    @Test
    public void testPreconditionCrashWithAliasInTypeDeclaration() {
        String code = "var goog = {};\n" +
                      "goog.scope;\n" +
                      "\n" +
                      "var ns = {};\n" +
                      "ns.sub = {};\n" +
                      "/** @constructor */\n" +
                      "ns.sub.C = function() {};\n" +
                      "\n" +
                      "goog.scope(function() {\n" +
                      " var sub = ns.sub;\n" +
                      " /** @type {sub.C} */\n" +
                      " var x = null;\n" +
                      "});";

        // Mock a Compiler object
        Compiler compiler = new Compiler();

        // Create a CompilerOptions object
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.OFF); // Assuming this is necessary for this scenario

        // Parse the input
        Node root = compiler.parseTestCode(code);
        assertNotNull("Parsing failed.", root);

        // Apply the ScopedAliases pass
        ScopedAliases scopedAliasesPass = new ScopedAliases(compiler);
        try {
            scopedAliasesPass.process(null, root);
            fail("Expected an IllegalStateException to be thrown");
        } catch (IllegalStateException e) {
            // Verify the exception satisfies the conditions described in the bug report
            assertEquals("Precondition failed", e.getMessage());
        }
    }
}
