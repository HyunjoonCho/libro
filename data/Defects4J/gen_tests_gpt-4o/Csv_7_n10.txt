
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Map;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class CSVFormatTest {

    @Test
    public void testDuplicateHeaderNames() {
        String csvContent = "Col1,Col2,Col2,Col3,Col4\n"
                            + "1,2,3,4,5\n"
                            + "4,5,6,7,8\n";

        CSVFormat format = CSVFormat.RFC4180.withDelimiter(',')
                                            .withQuote('"')
                                            .withQuotePolicy(CSVFormat.DEFAULT.getQuotePolicy())
                                            .withIgnoreSurroundingSpaces(true)
                                            .withHeader()
                                            .withSkipHeaderRecord(true);

        try (Reader reader = new StringReader(csvContent);
             CSVParser parser = new CSVParser(reader, format)) {

            Map<String, Integer> headerMap = parser.getHeaderMap();

            // Check if there's a duplicate, which should not be silently ignored
            assertTrue("Header map should report the duplicate header name error", headerMap.containsKey("Col2"));

            // Process records without using missing header
            for (CSVRecord record : parser) {
                // Access values using headers, expecting proper handling or error for duplicates
                System.out.println(record.toString());
            }

            fail("Expected exception due to duplicate header names, but none was thrown.");

        } catch (IllegalArgumentException e) {
            System.out.println("Expected exception caught: " + e.getMessage());
        } catch (IOException e) {
            fail("IOException should not have occurred");
        }
    }
}
