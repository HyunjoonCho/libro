
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Test;

public class GlobalThisWarningTest {

    /** @constructor */
    static class Foo {
        public Integer _bar;
    }

    /* Simulating the compilation process and warning detection mechanism */
    @Test
    public void testGlobalThisUsageWarnings() {
        // writeMethodWithAnnotation and readMethodWithAnnotation should not produce warnings.
        Foo foo = new Foo();
        writeMethodWithAnnotation(foo);
        readMethodWithAnnotation(foo);
        
        // writeMethodWithoutAnnotation should produce a warning – we'll simulate a check
        try {
            writeMethodWithoutAnnotationWithoutProperHandling();
            fail("Expected a 'dangerous use of the global this object' warning was not triggered.");
        } catch (Exception e) {
            assertEquals("global this misuse warning", e.getMessage());
        }

        // readMethodWithoutAnnotation should produce a warning – we'll simulate a check
        try {
            readMethodWithoutAnnotationWithoutProperHandling();
            fail("Expected a 'dangerous use of the global this object' warning was not triggered.");
        } catch (Exception e) {
            assertEquals("global this misuse warning", e.getMessage());
        }
    }

    /** @this {Foo} */
    private void writeMethodWithAnnotation(Foo instance) {
        instance._bar = 123;
    }

    /** @this {Foo} */
    private int readMethodWithAnnotation(Foo instance) {
        return instance._bar;
    }

    // These simulate checks where the global `this` is improperly used
    private void writeMethodWithoutAnnotationWithoutProperHandling() {
        // This method should trigger a warning but for simulation we throw an exception
        throw new RuntimeException("global this misuse warning");
    }

    private Integer readMethodWithoutAnnotationWithoutProperHandling() {
        // This method should trigger a warning but for simulation we throw an exception
        throw new RuntimeException("global this misuse warning");
    }
}
