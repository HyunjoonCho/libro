
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.junit.Test;
import static org.junit.Assert.*;

public class GsonTypeAdapterFactoryTest {

    @Test
    public void testNullTypeAdapterFactoryDoesNotCauseNPE() {
        // Create a Gson instance with a custom TypeAdapterFactory that returns null.
        Gson gson = new GsonBuilder()
                .registerTypeAdapterFactory(new NullReturningTypeAdapterFactory())
                .create();

        try {
            // Attempt to serialize a simple object and verify no exception is thrown.
            String json = gson.toJson(new TestObject("test"));
            assertNotNull(json);
        } catch (NullPointerException e) {
            fail("Gson should not cause a NullPointerException when a TypeAdapterFactory returns null.");
        }
    }

    private static class TestObject {
        String field;

        TestObject(String field) {
            this.field = field;
        }
    }

    private static class NullReturningTypeAdapterFactory implements TypeAdapterFactory {
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            // Intentionally return null to simulate the error scenario.
            return null;
        }
    }
}
