
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.fail;

public class UUIDDeserializerTest {

    @Test
    public void testDeserializationProblemHandlerWithUUID() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public Object handleWeirdStringValue(DeserializationContext ctxt, 
                                                 Class<?> targetType, 
                                                 String valueToConvert, 
                                                 String failureMsg) throws IOException {
                if (targetType == UUID.class) {
                    return null; // or provide a default UUID if necessary, e.g., UUID.randomUUID();
                }
                return super.handleWeirdStringValue(ctxt, targetType, valueToConvert, failureMsg);
            }
        });

        try {
            IdBean result = mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
            if (result.getId() != null) {
                fail("Expected ID to be null due to problem handler."); 
            }
        } catch (InvalidFormatException e) {
            fail("DeserializationProblemHandler should have prevented exception from being thrown.");
        } catch (IOException e) {
            e.printStackTrace();
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    public static class IdBean {
        private UUID id;

        public UUID getId() {
            return id;
        }

        public void setId(UUID id) {
            this.id = id;
        }
    }
}
