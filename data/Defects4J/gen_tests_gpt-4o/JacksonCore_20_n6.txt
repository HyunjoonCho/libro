
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import org.junit.Test;

import static org.junit.Assert.*;

public class JsonGeneratorTest {

    @Test
    public void testWriteEmbeddedObjectWithByteArray() throws IOException {
        JsonFactory jsonFactory = new JsonFactory();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        JsonGenerator jsonGenerator = jsonFactory.createGenerator(outputStream);
        
        byte[] byteArray = {1, 2, 3, 4, 5};

        // Attempt to write byte[] using writeEmbeddedObject
        jsonGenerator.writeStartObject();
        jsonGenerator.writeFieldName("data");
        
        try {
            jsonGenerator.writeEmbeddedObject(byteArray);
        } catch (UnsupportedOperationException e) {
            fail("writeEmbeddedObject should support writing byte[] without throwing an UnsupportedOperationException.");
        }
        
        jsonGenerator.writeEndObject();
        jsonGenerator.close();
        
        // Deserialize the output and verify the result
        ObjectMapper mapper = new ObjectMapper();
        String jsonOutput = outputStream.toString();

        // Assert that the output can be deserialized correctly and contains the base64 encoded byte array
        assertTrue(jsonOutput.contains("data"));
        assertNotNull(mapper.readTree(jsonOutput).get("data").asText());
    }
}
