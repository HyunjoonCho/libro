
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class ClosureCompilerTest {

    private static final String SCRIPT_URL = "https://raw.githubusercontent.com/scottschiller/SoundManager2/master/script/soundmanager2-nodebug.js";
    private static final String EXPECTED_ERROR_MESSAGE = "index(1) must be less than size(1)";

    @Test
    public void testClosureCompilerCrash() throws Exception {
        // Retrieve the JavaScript from the URL
        String jsCode = downloadJavaScript(SCRIPT_URL);

        // Prepare options for the Compiler
        String[] args = new String[] {
            "--compilation_level", "SIMPLE_OPTIMIZATIONS",
            "--js_code", jsCode
        };

        // Redirect standard output to capture Compiler output
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        System.setOut(new java.io.PrintStream(outputStream));

        // Run the Compiler
        CommandLineRunner runner = new CommandLineRunner(args);
        runner.run();

        // Check for the specific "index(1) must be less than size(1)" error in the output
        String output = outputStream.toString();
        assertTrue(output.contains(EXPECTED_ERROR_MESSAGE), "Compiler should have crashed with the expected error.");
    }

    private String downloadJavaScript(String scriptUrl) throws Exception {
        StringBuilder jsCode = new StringBuilder();
        URL url = new URL(scriptUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        try (InputStream is = connection.getInputStream()) {
            int ch;
            while ((ch = is.read()) != -1) {
                jsCode.append((char) ch);
            }
        }
        return jsCode.toString();
    }
}
