public void testVeryCloseEventsDetection() {
    // Define a simple harmonic oscillator as the ODE to be integrated
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return 2;
        }
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = y[1];
            yDot[1] = -y[0];
        }
    };

    // Event handler that triggers when y[0] crosses zero
    EventHandler eventHandler = new EventHandler() {
        public double g(double t, double[] y) {
            return y[0];
        }
        public Action eventOccurred(double t, double[] y, boolean increasing) {
            return Action.STOP;
        }
        public void resetState(double t, double[] y) {}
    };

    // Initial state with y[0]=0 close to zero boundary, y[1]=1
    double[] y = {1.0e-7, 1.0};

    // Set up the integrator with a small step size
    AdamsBashforthIntegrator integrator = new AdamsBashforthIntegrator(
        2, 1.0e-8, 1.0, 1.0e-8, 1.0e-8);
    integrator.addEventHandler(eventHandler, 1.0, 1.0e-9, 1000);

    // Integrate the ODE
    double finalTime = integrator.integrate(ode, 0.0, y, 153.0, y);

    // Assert that the integrator stopped at the expected close event time
    assertEquals(90.0, finalTime, 0.1);
}