
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.fail;

public class UUIDDeserializerTest {

  @Test
  public void testDeserializationProblemHandlerForUUID() throws IOException {
    ObjectMapper mapper = new ObjectMapper().addHandler(new DeserializationProblemHandler() {
      @Override
      public Object handleWeirdStringValue(final DeserializationContext ctxt, final Class<?> targetType, final String valueToConvert, final String failureMsg) throws IOException {
        // Custom handling logic; for the test case, let's assume we return a fixed UUID
        return UUID.randomUUID();
      }
    });

    try {
      // Attempt to deserialize a UUID from a malformed string
      mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
    } catch (IOException e) {
      // Fail the test if an exception is thrown indicating the bug
      fail("DeserializationProblemHandler was not used as expected: " + e.getMessage());
    }
  }

  public static class IdBean {
    private UUID id;

    public UUID getId() {
      return id;
    }

    public void setId(final UUID id) {
      this.id = id;
    }
  }
}
