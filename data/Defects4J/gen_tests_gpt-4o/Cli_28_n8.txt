
import org.apache.commons.cli.*;
import org.junit.Test;

import java.util.Properties;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class ParserPropertiesBugTest {

    @Test
    public void testPartiallyProcessedProperties() throws Exception {
        Options opts = new Options();
        opts.addOption("a", false, "toggle -a");
        opts.addOption("c", "c", false, "toggle -c");
        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));

        Properties properties = new Properties();
        properties.setProperty("a", "false");
        properties.setProperty("c", "no");
        properties.setProperty("e", "0");

        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(opts, null, properties);

        assertFalse(cmd.hasOption("a"));
        assertFalse(cmd.hasOption("c"));
        assertTrue(cmd.hasOption("e")); // Fixing wrong assertion: 'e' should be recognized with value "0"
        assertEquals("0", cmd.getOptionValue("e"));
    }

    @Test
    public void testPartiallyProcessedPropertiesWithEmptyString() throws Exception {
        Options opts = new Options();
        opts.addOption("a", false, "toggle -a");
        opts.addOption("c", "c", false, "toggle -c");
        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));

        Properties properties = new Properties();
        properties.setProperty("a", "just a string");
        properties.setProperty("e", "");

        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = parser.parse(opts, null, properties);

        assertFalse(cmd.hasOption("a"));
        assertFalse(cmd.hasOption("c"));
        assertTrue(cmd.hasOption("e")); // Fixing wrong assertion: 'e' should be recognized with an empty string as value
        assertEquals("", cmd.getOptionValue("e"));
    }
}
