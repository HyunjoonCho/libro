
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import org.junit.Test;
import static org.junit.Assert.*;

public class SuperReplacementTest {
    
    @Test
    public void testSuperNotRenamed() {
        // Source code simulating the use of Prototype's $super
        String jsCode = ""
            + "var MyClass = Class.create({"
            + "  method1: function() {"
            + "    return $super();"
            + "  }"
            + "});";
        
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        // Enable advanced optimizations
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", jsCode), options);

        // Get the compiled output
        String optimizedJsCode = compiler.toSource();

        // Check that $super was not renamed in the optimized JavaScript code
        assertTrue("Expected $super to remain unchanged", optimizedJsCode.contains("$super"));
    }
}
