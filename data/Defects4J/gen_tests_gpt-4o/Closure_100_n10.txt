public void testDangerousUseOfGlobalThisWarning() {
    String jsCode = "function Foo() { this._bar = null; };" +
                    "function writeMethodWithoutAnnotation() { this._bar = 123; }" +
                    "function readMethodWithoutAnnotation() { return this._bar; }";
    
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    
    Compiler compiler = new Compiler();
    SourceFile extern = SourceFile.fromCode("externs.js", "");
    SourceFile input = SourceFile.fromCode("input.js", jsCode);

    compiler.compile(extern, input, options);
    
    String[] compileWarnings = compiler.getWarnings().stream()
            .map(warning -> warning.getDescription())
            .toArray(String[]::new);

    boolean warningInWrite = false;
    boolean warningInRead = false;

    for (String warning : compileWarnings) {
        if (warning.contains("writeMethodWithoutAnnotation")) {
            warningInWrite = true;
        }
        if (warning.contains("readMethodWithoutAnnotation")) {
            warningInRead = true;
        }
    }

    assertTrue("Expected a warning in writeMethodWithoutAnnotation method", warningInWrite);
    assertTrue("Expected a warning in readMethodWithoutAnnotation method", warningInRead);
}