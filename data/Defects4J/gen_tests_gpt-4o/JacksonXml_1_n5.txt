
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

// POJO for the Field
class Field {
    private String name;

    public Field() {}

    public Field(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

// POJO for the Record containing Fields
class Record {
    @JsonUnwrapped
    private List<Field> fields = new ArrayList<>();

    public Record() {}

    public Record(List<Field> fields) {
        this.fields = fields;
    }

    public List<Field> getFields() {
        return fields;
    }

    public void setFields(List<Field> fields) {
        this.fields = fields;
    }
}

// Main POJO with a list of Records
class Definition {
    @JsonUnwrapped
    private List<Record> records = new ArrayList<>();

    public Definition() {}

    public Definition(List<Record> records) {
        this.records = records;
    }

    public List<Record> getRecords() {
        return records;
    }

    public void setRecords(List<Record> records) {
        this.records = records;
    }
}

public class DeserializationTest {
    
    private final ObjectMapper objectMapper = new ObjectMapper();
    
    @Test
    public void testDeserializeNestedNonWrappedListsWithEmptyInnerList() throws Exception {
        // JSON input with nested structure, where inner list `fields` is empty
        String json = "{\"records\": [{\"fields\": []}]}";

        // Attempt to deserialize
        Definition definition = objectMapper.readValue(json, Definition.class);

        // Assert that the list of records is not null and has one record
        assertEquals(1, definition.getRecords().size());

        // Assert that the fields list in the record is not null and is empty
        assertEquals(0, definition.getRecords().get(0).getFields().size());
    }
}
