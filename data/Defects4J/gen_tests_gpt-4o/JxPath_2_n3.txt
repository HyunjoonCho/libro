public void testNodeSetReturnedByExtensionFunction() {
    JXPathContext context = JXPathContext.newContext(new Object());
    context.setFunctions(new ClassFunctions(this.getClass(), "ems"));

    // Attempt to select nodes using the custom extension function
    List<?> result = (List<?>) context.selectNodes("ems:observations()");

    // Check if the result properly returns as a NodeSet rather than a single node
    assertTrue(result instanceof List<?>);
    assertFalse(result.isEmpty());
    
    // Further validate by checking the internal structure of returned nodes
    for (Object obj : result) {
        assertTrue(obj instanceof NodePointer);
    }
}

public static NodeSet ems_observations(ExpressionContext context) {
    List<NodePointer> ptrs = extractObservations(
        (NodePointer) context.getContextNodePointer(),
        new ArrayList<NodePointer>()
    );
    BasicNodeSet result = new BasicNodeSet();
    for (NodePointer ptr : ptrs) {
        result.add(ptr);
    }
    return result;
}

private static List<NodePointer> extractObservations(NodePointer nodePointer, List<NodePointer> pointers) {
    // Mock implementation of extracting NodePointers
    // This should be replaced with the actual logic to extract observations
    pointers.add(nodePointer);  // Example addition
    return pointers;
}