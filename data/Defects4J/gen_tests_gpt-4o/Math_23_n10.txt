
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerReturnsBestPoint() {
        // Define a simple quadratic function: f(x) = (x - 2)^2
        UnivariateFunction function = x -> Math.pow(x - 2, 2);

        // Construct the BrentOptimizer with reasonable tolerance settings
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Perform optimization within the interval [0, 4] and start at 2
        UnivariatePointValuePair result = optimizer.optimize(
            org.apache.commons.math3.optim.MaxEval.unlimited(),
            new org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction(function),
            new SearchInterval(0, 4),
            org.apache.commons.math3.optim.GoalType.MINIMIZE
        );

        // The optimal point for f(x) = (x - 2)^2 is x = 2
        double bestPoint = result.getPoint();

        // Verify that the optimizer returns the correct, optimal point
        assertEquals(2.0, bestPoint, 1e-10);
    }
}
