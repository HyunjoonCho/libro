
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.InitialGuess;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.PopulationSize;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.Sigma;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunctionGradient;
import org.apache.commons.math3.optim.nonlinear.scalar.SimpleBounds;
import org.junit.Test;
import static org.junit.Assert.*;

public class CMAESOptimizerTest {
    @Test
    public void testCMAESOptimizerWithBounds() {
        // Define a simple quadratic objective function f(x) = (x-2)^2, minimum at x = 2
        ObjectiveFunction function = new ObjectiveFunction(point -> {
            double x = point[0];
            return (x - 2) * (x - 2);
        });

        // Define the optimizer with the default checkFeasableCount
        CMAESOptimizer optimizer = new CMAESOptimizer(
            new MaxEval(1000),
            new SimpleValueChecker(1e-9, 1e-9)
        );

        // Define bounds where the lower bound is 1.5 and the upper bound is 2.5
        SimpleBounds bounds = new SimpleBounds(new double[]{1.5}, new double[]{2.5});

        // Initial search point
        InitialGuess initialGuess = new InitialGuess(new double[]{0});

        // Perform the optimization
        double[] result = optimizer.optimize(
                function,
                bounds,
                GoalType.MINIMIZE,
                new PopulationSize(5),
                new Sigma(new double[]{0.1}),
                initialGuess
        ).getPoint();

        // Verify that the result is within the specified bounds
        assertTrue("Result is below lower bound", result[0] >= 1.5);
        assertTrue("Result is above upper bound", result[0] <= 2.5);
    }
}
