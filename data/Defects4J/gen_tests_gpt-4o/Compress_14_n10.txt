
import org.junit.Test;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.fail;

public class TarArchiveInputStreamTest {

    @Test
    public void testAIXSymlinkTarFile() {
        // The byte array should represent a tar file with a symbolic link created by AIX's tar.
        // Since we cannot easily replicate AIX behavior without the actual tar file, this is illustrative.
        byte[] fakeAIXTarFileWithSymlink = new byte[] {
            // Insert byte representation of problematic tar file here...
            // A simple mock example:
            0x00, 0x31, 0x32, 0x34, 0x35, 0x36, 0x78, 0x79, 0x7A
            // Note: an actual problematic bytes would be more complex and extracted from a real case.
        };

        ByteArrayInputStream bais = new ByteArrayInputStream(fakeAIXTarFileWithSymlink);
        TarArchiveInputStream tarInput = new TarArchiveInputStream(bais);

        try {
            while (tarInput.getNextTarEntry() != null) {
                // just iterate over entries
            }
        } catch (IOException e) {
            String expectedMessage = "Error detected parsing the header";
            
            // Check if exception message matches expected buggy behavior
            if (e.getMessage().contains(expectedMessage)) {
                // The test successfully reproduced the issue
                System.out.println("Reproduced issue #107 with simulation.");
            } else {
                fail("Unexpected IO exception: " + e.getMessage());
            }
        } finally {
            try {
                tarInput.close();
            } catch (IOException e) {
                // Closing quietly
            }
        }
    }
}
