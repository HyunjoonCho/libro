
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

class CommandAPDUTest {

    static class CommandAPDU {
        /** @serial */
        private byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty("bytes") byte[] apdu) {
            this.apdu = apdu;
        }

        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }
    }

    @Test
    void testPolymorphicTypePreservedWithJsonValue() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();

        byte[] originalData = new byte[]{0x01, 0x02, 0x03};
        CommandAPDU originalCommand = new CommandAPDU(originalData);

        // Serialize the CommandAPDU object
        String json = mapper.writeValueAsString(originalCommand);

        // Deserialize to a CommandAPDU object
        CommandAPDU deserializedCommand = mapper.readValue(json, CommandAPDU.class);

        // Verify the deserialized object has the same data
        assertArrayEquals(originalData, deserializedCommand.getBytes());
    }
}
