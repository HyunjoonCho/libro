public void testJsonAnyGetterWithJsonSerialize() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    TestClass testClass = new TestClass();
    
    String json = mapper.writeValueAsString(testClass);
    
    // Assuming MySerializer or MyConverter is supposed to alter the serialization
    // Let's check if it matches expected serialized output based on the serializer/converter logic
    String expectedJson = "{\"key-transformed\":\"value-transformed\"}";
    assertEquals(expectedJson, json);
}

public static class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey() + "-transformed", entry.getValue() + "-transformed");
        }
        gen.writeEndObject();
    }
}

public static class TestClass {
    private final Map<String, String> parameters = Collections.singletonMap("key", "value");

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}