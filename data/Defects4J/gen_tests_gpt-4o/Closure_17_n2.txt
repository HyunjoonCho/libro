public void testConstTypeCastWarning() {
    String jsCode = ""
            + "/**\n"
            + " * Class defining an interface with two numbers.\n"
            + " * @interface\n"
            + " */\n"
            + "function TwoNumbers() {}\n"
            + "\n"
            + "/** @type number */\n"
            + "TwoNumbers.prototype.first;\n"
            + "\n"
            + "/** @type number */\n"
            + "TwoNumbers.prototype.second;\n"
            + "\n"
            + "/** @const */ var SOME_DEFAULT =\n"
            + " /** @type {TwoNumbers} */ ({first: 1, second: 2});\n"
            + "\n"
            + "/**\n"
            + " * Class with a two number member.\n"
            + " * @constructor\n"
            + " */\n"
            + "function HasTwoNumbers() {\n"
            + " /** @type {TwoNumbers} */\n"
            + " this.twoNumbers = this.getTwoNumbers();\n"
            + "}\n"
            + "\n"
            + "/**\n"
            + " * Get the default two numbers.\n"
            + " * @return {TwoNumbers}\n"
            + " */\n"
            + "HasTwoNumbers.prototype.getTwoNumbers = function() {\n"
            + " return SOME_DEFAULT;\n"
            + "};";

    Result result = closureCompiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", jsCode), options);

    List<JSError> warnings = result.warnings;
    assertTrue("Warnings were thrown", !warnings.isEmpty());
    assertEquals("There should only be one warning", 1, warnings.size());

    String message = warnings.get(0).getDescription();
    assertTrue("Unexpected warning message: " + message, message.contains("xxxx"));
}