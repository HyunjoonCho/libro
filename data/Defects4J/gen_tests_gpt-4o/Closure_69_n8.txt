
import org.junit.Test;
import static org.junit.Assert.*;

public class PathTest {

    class Path {
        boolean moved = false;

        public void moveTo(int x, int y) {
            if (this == null) {
                throw new IllegalStateException("Method used without object context.");
            }
            moved = true;
        }

        public void lineTo(int x, int y) {
            if (this == null) {
                throw new IllegalStateException("Method used without object context.");
            }
        }

        public boolean hasMoved() {
            return moved;
        }
    }

    @Test
    public void testInstanceMethodContextLoss() {
        Path path = new Path();
        int[][] points = { {1, 1}, {2, 2} };

        for (int i = 0; i < points.length; i++) {
            try {
                // Mimicking JavaScript dynamic method context
                if (i == 0) {
                    Path.class.getMethod("moveTo", int.class, int.class)
                              .invoke(i == 0 ? path : null, points[i][0], points[i][1]);
                } else {
                    Path.class.getMethod("lineTo", int.class, int.class)
                              .invoke(i != 0 ? path : null, points[i][0], points[i][1]);
                }
                assertTrue("The method should be using the instance's context.", path.hasMoved());
            } catch (Exception e) {
                fail("An instance method was called without the proper object context: " + e.getMessage());
            }
        }
    }
}
