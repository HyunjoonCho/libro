
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;
import org.apache.commons.math3.distribution.TDistribution;
import org.junit.Test;
import static org.junit.Assert.*;

public class PearsonsCorrelationTest {

    @Test
    public void testCorrelationPValuePrecision() {
        // Mock data that would result in a very small p-value
        double[] data1 = {10, 20, 30, 40, 50, 60, 70, 80, 90, 100};
        double[] data2 = {10.01, 19.99, 30.02, 40.03, 50.05, 60.06, 70.06, 79.98, 89.97, 99.95};
        
        PearsonsCorrelation correlation = new PearsonsCorrelation();
        double r = correlation.correlation(data1, data2);
        
        // Degrees of freedom
        int n = data1.length;
        int df = n - 2;

        // Calculate t-statistic
        double tStatistic = Math.abs(r * Math.sqrt((df) / (1.0 - r * r)));
        
        // Original p-value calculation
        TDistribution tDistribution = new TDistribution(df);
        double originalPValue = 2 * (1 - tDistribution.cumulativeProbability(tStatistic));
        
        assertFalse("Expected a non-zero p-value, but got zero", originalPValue == 0.0);
        
        // Revised p-value calculation
        double revisedPValue = 2 * tDistribution.cumulativeProbability(-tStatistic);
        
        assertNotEquals("Revised and original p-values should not be equal", originalPValue, revisedPValue);
        assertTrue("Expected revised p-value to be non-zero and precise", revisedPValue > 0.0);
    }
}
