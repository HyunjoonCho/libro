
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;
import static org.junit.Assert.*;

public class DependencySortingTest {

    @Test
    public void testDependencySortingWithClosurePassFalse() {
        // JavaScript source code with goog.provide and goog.require statements
        String js1 = "goog.provide('my.namespace');\n"
                   + "goog.require('my.dependency');\n"
                   + "function foo() {};";

        String js2 = "goog.provide('my.dependency');\n"
                   + "function bar() {};";

        // Compilation options
        CompilerOptions options = new CompilerOptions();
        options.setClosurePass(false); // Ensure goog.provide/require calls are not removed

        // Set up dependency sorting
        DependencyOptions depOptions = new DependencyOptions();
        depOptions.setDependencySorting(true);
        options.setDependencyOptions(depOptions);

        // Create and run the compiler
        Compiler compiler = new Compiler();
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input1 = SourceFile.fromCode("input1.js", js1);
        SourceFile input2 = SourceFile.fromCode("input2.js", js2);

        // Compile the input sources
        Result result = compiler.compile(extern, ImmutableList.of(input1, input2), options);

        // Check if the sources are sorted correctly in the compiled output
        String output = compiler.toSource();
        String expected = "goog.provide(\"my.dependency\");function bar(){}goog.provide(\"my.namespace\");goog.require(\"my.dependency\");function foo(){}";
        
        assertTrue(result.success);
        assertEquals(expected.replaceAll("\\s+", ""), output.replaceAll("\\s+", ""));
    }
}
