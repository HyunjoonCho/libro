
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.kotlin.KotlinModule;
import org.junit.Test;

import static org.junit.Assert.*;

public class ExternalPropertyEnumDeserializationTest {

    enum Kind {
        CONTACT, EMAIL
    }

    static class To {
        public String name;

        public To() {}
        public To(String name) { this.name = name; }
    }

    @JsonTypeInfo(
        use = Id.NAME,
        include = As.EXTERNAL_PROPERTY,
        property = "kind"
    )
    @JsonSubTypes({
        @JsonSubTypes.Type(value = Contact.class, name = "CONTACT"),
        @JsonSubTypes.Type(value = Email.class, name = "EMAIL")
    })
    static abstract class Invite {
        public To to;
    }

    static class Contact extends Invite {
        public Contact() {}
        public Contact(To to) { this.to = to; }
    }

    static class Email extends Invite {
        public Email() {}
        public Email(To to) { this.to = to; }
    }

    @Test
    public void testEnumDeserialization() {
        String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";

        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new KotlinModule());

        try {
            Invite invite = objectMapper.readValue(json, Invite.class);
            assertNotNull(invite);
            assertTrue(invite instanceof Contact);
            assertEquals("Foo", invite.to.name);
        } catch (Exception e) {
            fail("Deserialization failed: " + e.getMessage());
        }
    }
}
