
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnit;
import org.mockito.junit.MockitoRule;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;

// This class represents the existing behavior that requires a test instance
public class MockitoJUnitRuleWithTestInstance {

    @Rule
    public MockitoRule mockitoRule = MockitoJUnit.rule().strictness(Strictness.STRICT_STUBS);

    @Mock
    private List<String> mockedList;

    @Test
    public void testMockInjection() {
        mockedList.add("test");
        verify(mockedList).add("test");
    }

    public static void main(String[] args) {
        Result result = JUnitCore.runClasses(MockitoJUnitRuleWithTestInstance.class);
        for (Failure failure : result.getFailures()) {
            System.out.println(failure.toString());
        }
        System.out.println("Test successful: " + result.wasSuccessful());
    }
}

// This class represents the expected behavior of not needing to pass the test instance
public class MockitoJUnitRuleEasyUsage {

    @Rule
    public MockitoRule mockitoRule = MockitoJUnit.rule();

    @Mock
    private List<String> mockedList;

    @Test
    public void testMockInjection() {
        mockedList.add("test");
        verify(mockedList).add("test");
    }

    public static void main(String[] args) {
        Result result = JUnitCore.runClasses(MockitoJUnitRuleEasyUsage.class);
        for (Failure failure : result.getFailures()) {
            System.out.println(failure.toString());
        }
        System.out.println("Test successful: " + result.wasSuccessful());
    }
}
