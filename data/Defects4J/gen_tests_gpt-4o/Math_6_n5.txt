
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;
import static org.junit.Assert.*;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testGetIterations() {
        // Setup
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();

        // Objective function and parameters
        LeastSquaresProblem problem = new LeastSquaresBuilder()
                .maxEvaluations(100)
                .maxIterations(100)
                .target(new double[]{1.0})
                .weight(new double[]{1.0})
                .start(new double[]{3.0})
                .model(point -> new double[]{FastMath.pow(point[0], 4)},
                       point -> new double[][]{{0.25 * FastMath.pow(point[0], 3)}})
                .build();

        // Action
        optimizer.optimize(problem);

        // Verify
        assertTrue("Evaluations count should be greater than 1", optimizer.getEvaluations() > 1);
        assertTrue("Iterations count should be greater than 1", optimizer.getIterations() > 0); // Should be > 1 as per bug report
    }

    public static void main(String[] args) {
        LevenbergMarquardtOptimizerTest test = new LevenbergMarquardtOptimizerTest();
        test.testGetIterations();
    }
}
