
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.util.EnumMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class EnumMapJsonTest {

    // Enum using @JsonProperty for custom names
    private enum MyEnum {
        @JsonProperty("first_value")
        FIRST,
        
        @JsonProperty("second_value")
        SECOND
    }

    @Test
    public void testEnumMapSerialization() {
        // Initialize an EnumMap with the custom Enum
        EnumMap<MyEnum, String> enumMap = new EnumMap<>(MyEnum.class);
        enumMap.put(MyEnum.FIRST, "Value for first");
        enumMap.put(MyEnum.SECOND, "Value for second");

        // ObjectMapper for JSON serialization
        ObjectMapper mapper = new ObjectMapper();

        try {
            // Serialize the EnumMap
            String json = mapper.writeValueAsString(enumMap);
            
            // Print or Log the JSON for reference
            System.out.println("Serialized JSON: " + json);

            // Check the expected JSON keys based on @JsonProperty values
            String expectedJson = "{\"first_value\":\"Value for first\",\"second_value\":\"Value for second\"}";
            
            assertEquals(expectedJson, json);
        } catch (JsonProcessingException e) {
            fail("Serialization failed with exception: " + e.getMessage());
        }
    }
}
