
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import org.junit.Test;
import static org.junit.Assert.assertFalse;

public class SingularValueDecompositionTest {

    @Test
    public void testNaNSingularValueFromSVD() {
        // Define a rank-deficient matrix
        double[][] matrixData = {
            {1.0, 2.0, 3.0},
            {2.0, 3.0, 4.0},
            {3.0, 5.0, 7.0}
        };
        
        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(matrixData);
        SingularValueDecomposition svd = new SingularValueDecomposition(matrix);
        
        // Retrieve singular values
        double[] singularValues = svd.getSingularValues();
        
        // Check if any singular value is NaN
        for (double singularValue : singularValues) {
            assertFalse("Singular value should not be NaN", Double.isNaN(singularValue));
        }
    }
}
