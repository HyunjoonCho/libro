
import java.util.List;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.Test;
import static org.junit.Assert.*;

public class ArrayDelegateDeserializationTest {

    public static class MyTypeImpl implements MyType {
        private final List<Integer> values;

        MyTypeImpl(List<Integer> values) {
            this.values = values;
        }

        @Override
        public List<Integer> getValues() {
            return values;
        }
    }

    public interface MyType {
        @JsonValue
        List<Integer> getValues();

        @JsonCreator
        static MyType of(List<Integer> values) {
            return new MyTypeImpl(values);
        }
    }

    @Test
    public void testArrayDelegateDeserialization() {
        ObjectMapper mapper = new ObjectMapper();
        try {
            MyType thing = mapper.readValue("[]", MyType.class);
            assertNotNull(thing);
            assertEquals(0, thing.getValues().size()); // Expecting an empty list.
        } catch (InvalidDefinitionException e) {
            fail("Deserialization failed due to configuration issue: " + e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    public static void main(String[] args) throws Exception {
        ArrayDelegateDeserializationTest test = new ArrayDelegateDeserializationTest();
        test.testArrayDelegateDeserialization();
    }
}
