
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class TokenBufferDeserializationTest {

    static class Value {
        @JsonCreator
        public static Value from(TokenBuffer buffer) {
            try {
                JsonParser parser = buffer.asParser();
                JsonToken firstToken = parser.nextToken();
                if (firstToken != JsonToken.START_OBJECT) {
                    fail("Expected START_OBJECT but got: " + firstToken);
                }
                
                StringBuilder tokenSequence = new StringBuilder();
                JsonToken token;
                while ((token = parser.nextToken()) != null) {
                    tokenSequence.append(token).append(", ");
                }
                
                // Trim the last comma and space
                if (tokenSequence.length() > 2) {
                    tokenSequence.setLength(tokenSequence.length() - 2);
                }

                assertEquals("START_OBJECT, FIELD_NAME, VALUE_NUMBER_INT, FIELD_NAME, VALUE_NULL, END_OBJECT",
                        tokenSequence.toString());

            } catch (Exception e) {
                e.printStackTrace();
                fail("Exception occurred: " + e.getMessage());
            }
            return new Value();
        }
    }

    @Test
    public void testTokenBufferDeserialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{ \"a\":1, \"b\":null }";
        
        // Attempt to deserialize JSON into Value using the static factory method
        mapper.readValue(json, Value.class);
    }
}
