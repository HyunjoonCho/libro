@Test
public void testValuedEnumCompareToNotTypeSafe() {
    MyValuedEnum a = MyValuedEnum.ENUM_ONE;
    MyValuedEnum b = MyValuedEnum.ENUM_TWO;
    AnotherValuedEnum c = AnotherValuedEnum.ENUM_ONE;

    // MyValuedEnum with the same value should compare to zero
    assertEquals(0, a.compareTo(b));

    try {
        // Different subclasses with the same value incorrectly compare to zero
        // This should throw a ClassCastException if type-safe
        a.compareTo(c);
        fail("Expected ClassCastException not thrown");
    } catch (ClassCastException e) {
        // Expected exception for type safety
    }
}

private static class MyValuedEnum extends ValuedEnum {
    private static final long serialVersionUID = 1L;

    public static final MyValuedEnum ENUM_ONE = new MyValuedEnum("EnumOne", 1);
    public static final MyValuedEnum ENUM_TWO = new MyValuedEnum("EnumTwo", 1);

    protected MyValuedEnum(String name, int value) {
        super(name, value);
    }
}

private static class AnotherValuedEnum extends ValuedEnum {
    private static final long serialVersionUID = 1L;

    public static final AnotherValuedEnum ENUM_ONE = new AnotherValuedEnum("EnumOne", 1);

    protected AnotherValuedEnum(String name, int value) {
        super(name, value);
    }
}