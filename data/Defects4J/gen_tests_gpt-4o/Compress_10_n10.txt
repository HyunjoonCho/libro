
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Enumeration;

import static org.junit.Assert.*;

public class ZipFileUnicodeTest {

    @Test
    public void testZipFileWithUnicodeExtraFields() throws IOException {
        // Simulating a zip file with unicode extra fields
        // In practice, use an actual zip file created by WinZip with unicode names as test.zip
        Path zipPath = Files.createTempFile("test", ".zip");
        Files.write(zipPath, new byte[] {/* Romulate a proper zip binary with unicode names */});

        File zipFile = zipPath.toFile();
        try (ZipFile zf = new ZipFile(zipFile)) {
            Enumeration<ZipArchiveEntry> entries = zf.getEntries();
            while (entries.hasMoreElements()) {
                ZipArchiveEntry entry = entries.nextElement();
                // Typically the problem arises here when reading an entry
                assertNotNull("Entry should not be null", entry);

                // This is where the bug typically surfaces
                assertNotNull("InputStream should not be null for entry: " + entry.getName(),
                        zf.getInputStream(entry));
            }
        } finally {
            Files.deleteIfExists(zipPath);
        }
    }
}
