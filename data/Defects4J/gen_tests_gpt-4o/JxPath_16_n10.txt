
import org.junit.Test;
import static org.junit.Assert.*;

import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

// Dummy classes to simulate the bug environment
class Compiler {
    static final int NODE_TYPE_NODE = 1;
}

class DOMNodePointer {

    // Simulate the condition that should be changed
    public boolean isNodeTypeMatch(short nodeType) {
        switch (Compiler.NODE_TYPE_NODE) {
            case Compiler.NODE_TYPE_NODE:
                return nodeType == Node.ELEMENT_NODE || nodeType == Node.DOCUMENT_NODE;
            // Other cases...
        }
        return false;
    }
}

public class DOMNodePointerTest {

    @Test
    public void testNodeTypeNodeMatchesAnyNode() throws Exception {
        DOMNodePointer pointer = new DOMNodePointer();

        DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
        Document doc = dBuilder.newDocument();

        Element element = doc.createElement("testElement");
        Text textNode = doc.createTextNode("text");
        Comment commentNode = doc.createComment("comment");
        
        // Assemble the document
        doc.appendChild(element);
        element.appendChild(textNode);
        doc.appendChild(commentNode);

        // Test different node types to see if they match
        assertTrue("Element should match node()", pointer.isNodeTypeMatch(element.getNodeType()));
        assertTrue("Text Node should match node()", pointer.isNodeTypeMatch(textNode.getNodeType()));
        assertTrue("Comment Node should match node()", pointer.isNodeTypeMatch(commentNode.getNodeType()));

        // The bug would cause the above assertions to fail for non-element and non-document nodes.
    }
}
