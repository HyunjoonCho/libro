
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.exception.NoBracketingException;
import org.junit.Test;

public class BracketingNthOrderBrentSolverTest {

    @Test(expected = MaxCountExceededException.class)
    public void testUnbalancedBracketing() {
        // Define a function with a root near 12500.0
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                // Function chosen to represent the described issue
                // The root is around x = 12500.0
                return (x - 12500.0) * (x - 12500.03);
            }
        };

        // Create solver with a small tolerance and maximum iterations
        BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(1.0e-10, 5);

        // Attempt to find root, expecting a MaxCountExceededException due to unbalanced bracketing
        try {
            solver.solve(100, function, 12499.9, 12500.1, 12500.0);
        } catch (NoBracketingException e) {
            // Catch and rethrow NoBracketingException to allow the test to fail naturally
            throw new AssertionError("NoBracketingException: Interval does not bracket a root", e);
        }
    }
}
