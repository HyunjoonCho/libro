
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;

public class ClosureCompilerTest {

    public static void main(String[] args) {
        String code = ""
            + "/** @constructor */\n"
            + "function Foo() {}\n"
            + "/**\n"
            + " * @param {number} a\n"
            + " * @param {number} b\n"
            + " * @return {number}\n"
            + " */\n"
            + "Foo.prototype.add = function(a, b) { return a + b; };\n"
            + "/**\n"
            + " * @param {number} a\n"
            + " * @param {number} b\n"
            + " * @return {number}\n"
            + " */\n"
            + "Foo.prototype.sub = function(a, b) {};\n"
            + "/**\n"
            + " * @constructor\n"
            + " * @extends {Foo}\n"
            + " */\n"
            + "function Bar() { Foo.call(this); }\n"
            + "Bar.prototype = Object.create(Foo.prototype);\n"
            + "Bar.prototype.constructor = Bar;\n"
            + "/** @inheritDoc */\n"
            + "Bar.prototype.add = function(one) { return one; };\n"
            + "/** @inheritDoc */\n"
            + "Bar.prototype.sub = function(one) { return one; };\n"
            + "var foo = /** @type {Foo} */ (new Bar());\n"
            + "console.log(foo.add(3, 4));\n"
            + "var bar = new Bar();\n"
            + "console.log(bar.add(3, 4));\n";

        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        Compiler compiler = new Compiler();
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", code);
        
        Result result = compiler.compile(extern, input, options);

        for (JSError warning : result.warnings) {
            System.out.println("Warning: " + warning.description);
        }
        
        for (JSError error : result.errors) {
            System.out.println("Error: " + error.description);
        }

        if (result.success) {
            System.out.println("Compilation successful.");
            Node root = compiler.getRoot();
            System.out.println(compiler.toSource(root));
        } else {
            System.out.println("Compilation failed.");
        }
    }
}
