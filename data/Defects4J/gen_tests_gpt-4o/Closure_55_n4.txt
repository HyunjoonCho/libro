
import com.google.javascript.jscomp.*;
import org.junit.Test;

import static com.google.common.truth.Truth.assertWithMessage;

public class GetterCompileTest {

    @Test
    public void testCompileWithGetter() {
        String jsCode = "var obj = { get name() { return 'test'; } };";
        
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        SourceFile externFile = SourceFile.fromCode("externs.js", "");
        SourceFile jsSourceFile = SourceFile.fromCode("test.js", jsCode);

        try {
            // Trigger the compilation with a getter
            Result result = compiler.compile(externFile, jsSourceFile, options);
            
            // Since we expect an exception, failing if it compiles without issues.
            assertWithMessage("Expected an exception during compilation but compilation succeeded").that(result.success).isFalse();
        } catch (RuntimeException e) {
            // Here we catch the specific exception to ensure it's the same as the reported one
            assertWithMessage("Unexpected exception message")
                    .that(e.getMessage())
                    .contains("java.lang.IllegalStateException: Expected function but was call Reference node CALL");
        }
    }
}
