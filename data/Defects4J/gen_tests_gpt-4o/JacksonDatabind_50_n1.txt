
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import junit.framework.TestCase;

import java.util.List;

// Class representing the structure which experiences deserialization failure
class Node {
    public String name;
    public Node next;

    @JsonCreator
    public Node(String name) {
        this.name = name;
    }
}

@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
class Graph {
    public String id;
    public Node start;
    public List<Node> nodes;

    @JsonCreator
    public Graph(String id) {
        this.id = id;
    }
}

public class JsonIdentityInfoTest extends TestCase {

    public void testDeserializationWithCycleAndIdentity() throws JsonProcessingException {
        String json = "{\"id\":\"graph1\",\"start\":{\"name\":\"start\"},\"nodes\":[{\"name\":\"node1\"}, {\"name\":\"node2\"}]}";

        ObjectMapper mapper = new ObjectMapper();
        Graph graph = mapper.readValue(json, Graph.class);

        assertNotNull(graph);
        assertEquals("graph1", graph.id);
        assertEquals("start", graph.start.name);
        assertEquals(2, graph.nodes.size());
        assertEquals("node1", graph.nodes.get(0).name);
        assertEquals("node2", graph.nodes.get(1).name);

        // Check for cycles or identity-related deserialization issues
        assertNull(graph.start.next);
    }

    public static void main(String[] args) throws JsonProcessingException {
        JsonIdentityInfoTest test = new JsonIdentityInfoTest();
        test.testDeserializationWithCycleAndIdentity();
        System.out.println("Test passed.");
    }
}
