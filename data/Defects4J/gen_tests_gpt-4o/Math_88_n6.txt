
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.NonNegativeConstraint;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.GoalType;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIncorrectSolution() {
        // Define the linear objective function: maximize 3x + 2y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{3, 2}, 0);

        // Create a collection of linear constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{2, 1}, Relationship.LEQ, 14));
        constraints.add(new LinearConstraint(new double[]{4, 3}, Relationship.LEQ, 35));
        constraints.add(new LinearConstraint(new double[]{1, 1}, Relationship.LEQ, 10));

        // Initialize the SimplexSolver
        SimplexSolver solver = new SimplexSolver();

        // Solve the problem
        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, new NonNegativeConstraint(true));

        // The expected results are x=3, y=7 with maximum value of 3*3 + 2*7 = 23
        double[] point = solution.getPoint();
        assertEquals(3, point[0], 1e-5);
        assertEquals(7, point[1], 1e-5);
        assertEquals(23, solution.getValue(), 1e-5);
    }
}
