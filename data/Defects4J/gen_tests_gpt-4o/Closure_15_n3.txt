
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class BugReportTest {

    @Test
    public void testRemoveKey() {
        // Original input function
        var customData = new HashMap<String, String>();
        customData.put("key", "value");
        
        String result = testRemoveKey(customData, "key");
        
        // Verify the result should be "value"
        assertEquals("value", result);
        
        // Verify key does not exist after the function
        assertFalse(customData.containsKey("key"));
    }
    
    @Test
    public void testRemoveKey_CompiledVersion() {
        // Simulating the compiled version
        var customData = new HashMap<String, String>();
        customData.put("key", "value");
        
        String result = testRemoveKey_CompiledVersion(customData, "key");
        
        // Verify the result is null
        assertNull(result);
        
        // Verify key does not exist after simulated compiled function
        assertFalse(customData.containsKey("key"));
    }

    // Original Input Function
    public String testRemoveKey(HashMap<String, String> customData, String key) {
        var dataSlot = customData;
        String retval = (dataSlot != null) ? dataSlot.get(key) : null;
        boolean hadKey = (dataSlot != null) && dataSlot.containsKey(key);

        if (dataSlot != null)
            dataSlot.remove(key);

        return hadKey ? retval : null;
    }
    
    // Simulated Compiled Version
    public String testRemoveKey_CompiledVersion(HashMap<String, String> customData, String key) {
        var a = customData;
        String c = (a != null) ? a.get(key) : null;
        if (a != null)
            a.remove(key);
        return (a != null && a.containsKey(key)) ? c : null;
    }
}
