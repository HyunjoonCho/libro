
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class SuperReplacementTest {

    @Test
    public void testSuperNotRenamed() {
        Compiler compiler = new Compiler();

        CompilerOptions options = new CompilerOptions();
        // Enable advanced optimizations
        options.setCompilationLevel(CompilerOptions.CompilationLevel.ADVANCED_OPTIMIZATIONS);

        // Sample JavaScript code using prototype's $super
        String code = ""
            + "var MyClass = Class.create({ \n"
            + "  initialize: function($super, arg) { \n"
            + "    $super(); \n"
            + "    this.arg = arg; \n"
            + "  } \n"
            + "});";

        SourceFile extern = SourceFile.fromCode("externs.js", "function Class() {}");
        SourceFile input = SourceFile.fromCode("input.js", code);

        Result result = compiler.compile(extern, input, options);

        // The compiled code should not have renamed $super
        String compiledCode = compiler.toSource();
        assertFalse("The $super should not be renamed in the compiled code.",
                compiledCode.contains("$super$$4"));
    }
}
