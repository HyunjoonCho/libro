
import org.junit.Test;
import static org.mockito.Mockito.*;
import static org.assertj.core.api.Assertions.*;

public class GenericMetadataSupportTest {

    interface GenericsSelfReference<T extends GenericsSelfReference<T>> {
        T self();
    }

    @Test
    public void typeVariable_of_self_type() {
        // Assume GenericMetadataSupport and the related method logic are available
        GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class)
                .resolveGenericReturnType(firstNamedMethod("self", GenericsSelfReference.class));

        assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);
    }

    // Mock or define inferFrom and firstNamedMethod as per your implementation
    private GenericMetadataSupport inferFrom(Class<?> clazz) {
        // Mock behavior of inferFrom for demonstration
        GenericMetadataSupport mockSupport = mock(GenericMetadataSupport.class);
        when(mockSupport.resolveGenericReturnType(any())).thenReturn(mockSupport);
        when(mockSupport.rawType()).thenReturn(GenericsSelfReference.class);
        return mockSupport;
    }

    private java.lang.reflect.Method firstNamedMethod(String methodName, Class<?> clazz) {
        // Utility to find the first method with the given name in the class
        for (java.lang.reflect.Method method : clazz.getMethods()) {
            if (method.getName().equals(methodName)) {
                return method;
            }
        }
        return null;
    }
}
