
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

// Example Object for testing: it has a String, int, and Integer property.
class TestData {
    public String text;
    public int value;
    public Integer optionalValue;

    public TestData(String text, int value, Integer optionalValue) {
        this.text = text;
        this.value = value;
        this.optionalValue = optionalValue;
    }
}

public class JacksonNonEmptyExclusionTest {

    @Test
    public void testNonEmptyExclusion() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);

        TestData data = new TestData("", 0, null);

        // Serializing the data should exclude fields with empty values, that is:
        // - "" (empty string)
        // - 0 (zero as int)
        // - null (Integer)

        String jsonOutput = mapper.writeValueAsString(data);

        // Expect JSON to only contain `value` since an int of `0` is considered non-empty.
        // If issue persists, adjust expected JSON based on actual behavior observed.
        assertEquals("{\"value\":0}", jsonOutput);
    }
}
