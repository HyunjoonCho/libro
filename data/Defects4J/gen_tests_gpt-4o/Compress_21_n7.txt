
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.junit.Test;
import java.io.File;
import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class SevenZTest {

    @Test
    public void testScenario1_SevenEmptyFiles() {
        String[] files = {"file1.txt", "file2.txt", "file3.txt", "file4.txt", 
                          "file5.txt", "file6.txt", "file7.txt"};
        createAndTestArchive(files, true, 0, true);
    }

    @Test
    public void testScenario2_SevenFilesSomeEmptySomeNot() {
        String[] files = {"file1.txt", "file2.txt", "file3.txt", "file4.txt", 
                          "file5.txt", "file6.txt", "file7.txt"};
        createAndTestArchive(files, true, 3, true);
    }

    @Test
    public void testScenario3_EightEmptyFiles() {
        String[] files = {"file1.txt", "file2.txt", "file3.txt", "file4.txt", 
                          "file5.txt", "file6.txt", "file7.txt", "file8.txt"};
        createAndTestArchive(files, true, 0, false);
    }

    @Test
    public void testScenario4_1_EightFilesLastWithContent() {
        String[] files = {"file1.txt", "file2.txt", "file3.txt", "file4.txt", 
                          "file5.txt", "file6.txt", "file7.txt", "file8.txt"};
        createAndTestArchive(files, true, 4, true);
    }

    @Test
    public void testScenario4_2_LastFileEmpty() {
        String[] files = {"file1.txt", "file2.txt", "file3.txt", "file4.txt", 
                          "file5.txt", "file6.txt", "file7.txt", "file8.txt"};
        createAndTestArchive(files, false, 4, false);
    }

    private void createAndTestArchive(String[] fileNames, boolean lastFileWithContent, int nonEmptyFilesCount, boolean expectedResult) {
        File archiveFile = new File("test.7z");
        try (SevenZOutputFile archive = new SevenZOutputFile(archiveFile)) {
            for (int i = 0; i < fileNames.length; i++) {
                SevenZArchiveEntry entry = archive.createArchiveEntry(new File(fileNames[i]), fileNames[i]);
                archive.putArchiveEntry(entry);
                // Add content only for specified number of non-empty files
                if (nonEmptyFilesCount-- > 0 || (lastFileWithContent && i == fileNames.length - 1)) {
                    archive.write("content".getBytes());
                }
                archive.closeArchiveEntry();
            }
        } catch (IOException e) {
            e.printStackTrace();
            fail("Archiving failed: " + e.getMessage());
        }

        // Verify the created archive
        try (SevenZFile sevenZFile = new SevenZFile(archiveFile)) {
            int count = 0;
            while (sevenZFile.getNextEntry() != null) {
                count++;
            }
            if (expectedResult) {
                assertEquals(fileNames.length, count);
            } else {
                fail("The archive should be corrupt but wasn't.");
            }
        } catch (IOException e) {
            if (expectedResult) {
                fail("Failed to read archive: " + e.getMessage());
            }
        }

        if (archiveFile.exists()) {
            archiveFile.delete();
        }
    }
}
