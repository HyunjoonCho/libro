
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;

import java.util.Arrays;

public class AdvancedOptimizationsBugTest {

    public static void main(String[] args) {
        String jsInput = "window['anchor'] = function (obj, modifiesProp) {" +
                         "  return (function (saved) {" +
                         "    return modifiesProp(obj) + saved;" +
                         "  })(obj['prop']);" +
                         "};";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilerOptions.CompilationLevel.ADVANCED_OPTIMIZATIONS);

        SourceFile input = SourceFile.fromCode("input.js", jsInput);
        SourceFile externs = SourceFile.fromCode("window.js", "");

        Result result = compiler.compile(Arrays.asList(externs), Arrays.asList(input), options);

        if (result.success) {
            Node root = compiler.getRoot();
            String output = compiler.toSource();
            System.out.println("Compiled output: " + output);

            String expectedOutput = "window.anchor=function(a,b){var c=a.prop;return b(a)+c};";

            if (expectedOutput.equals(output)) {
                System.out.println("Test passed: Output is as expected.");
            } else {
                System.out.println("Test failed: Output is not as expected.");
            }
        } else {
            System.out.println("Compilation failed with errors:");
            result.errors.forEach(error -> System.out.println(error.toString()));
        }
    }
}
