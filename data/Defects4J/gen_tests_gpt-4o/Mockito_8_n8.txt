
import org.junit.Test;
import org.mockito.internal.util.reflection.GenericMetadataSupport;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.internal.util.MockUtil.inferFrom;

public class GenericMetadataSupportTest {

    interface GenericsSelfReference<T extends GenericsSelfReference<T>> {
        T self();
    }

    @Test
    public void typeVariable_of_self_type() {
        try {
            GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class)
                    .resolveGenericReturnType(firstNamedMethod("self", GenericsSelfReference.class));

            assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);
        } catch (StackOverflowError e) {
            // If not properly handled this can end up in a stack overflow
            assert false : "Test failed with StackOverflowError";
        }
    }

    /**
     * This function simulates the retrieval of the method named 'self' from
     * the interface GenericsSelfReference.
     */
    private java.lang.reflect.Method firstNamedMethod(String name, Class<?> clazz) {
        for (java.lang.reflect.Method method : clazz.getDeclaredMethods()) {
            if (method.getName().equals(name)) {
                return method;
            }
        }
        throw new IllegalArgumentException("Method not found: " + name);
    }
}
