
import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerTest {

    public String executeOriginalFunction() {
        StringBuilder output = new StringBuilder();
        for (int i = 0; i < 2; i++) {
            output.append(runOriginal());
        }
        return output.toString();
    }

    public String executeCompiledFunction() {
        StringBuilder output = new StringBuilder();
        for (int i = 0; i < 2; i++) {
            output.append(runCompiled());
        }
        return output.toString();
    }
    
    private String runOriginal() {
        String x = "1";
        try {
            x += somefunction();
        } catch (Exception e) {
        }
        x += "2";
        try {
            x += somefunction();
        } catch (Exception e) {
        }
        return x;
    }

    private String runCompiled() {
        String a;
        try {
            a = "1" + somefunction();
        } catch (Exception c) {
            a = "1";
        }
        try {
            a = a + "2" + somefunction();
        } catch (Exception d) {
            a = a + "2";
        }
        return a;
    }

    private String somefunction() throws Exception {
        throw new Exception("Simulated exception");
    }

    @Test
    public void testTryCatchBlockBehavior() {
        String originalResult = executeOriginalFunction();
        String compiledResult = executeCompiledFunction();
        
        assertEquals("1212", originalResult);
        assertEquals("1212", compiledResult);
    }
}
