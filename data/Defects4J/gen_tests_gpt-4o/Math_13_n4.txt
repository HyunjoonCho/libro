public void testLargeNumberOfWeights() {
    try {
        int n = 41200;
        double[] weights = new double[n];
        Arrays.fill(weights, 1.0); // Using uniform weights for simplicity.
        
        // Mock the optimizer setup that uses weights
        MultivariateVectorOptimizer optimizer = new SomeOptimizer(); // replace with actual optimizer
        // Assuming curve fitting that uses weights
        CurveFitter fitter = new PolynomialCurveFitter(2, weights); // degree 2 polynomial

        double[] initialGuess = new double[] {0.0, 0.0, 0.0};
        double[] x = new double[n];
        double[] y = new double[n];

        // Fill x and y with some test data
        for (int i = 0; i < n; i++) {
            x[i] = i;
            y[i] = Math.pow(i, 2); // Quadratic data
        }

        // Run the fit
        fitter.optimize(initialGuess, x, y);

    } catch (OutOfMemoryError e) {
        fail("Memory exhaust error: Optimizer should handle large weights without OutOfMemoryError");
    }
}