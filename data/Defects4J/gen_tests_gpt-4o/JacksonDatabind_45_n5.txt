
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonFormat.Shape;
import com.fasterxml.jackson.databind.ObjectMapper;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class ShapeHandlingTest {

    static class TestClass {
        @JsonFormat(shape = Shape.NUMBER, locale = "en_US")
        public int value;
        
        public TestClass() {}  // Default constructor for deserialization
        
        public TestClass(int value) {
            this.value = value;
        }
    }

    @Test
    public void testExplicitShapeNumber() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        
        // Create a JSON from the TestClass with value 42
        String json = objectMapper.writeValueAsString(new TestClass(42));
        
        // The JSON should just contain the number, not a string
        assertEquals("42", json);

        // Given the shape is explicitly NUMBER, the following should parse correctly
        TestClass result = objectMapper.readValue(json, TestClass.class);
        
        // Ensure that the value is correctly deserialized back to 42
        assertEquals(42, result.value);
    }
}
