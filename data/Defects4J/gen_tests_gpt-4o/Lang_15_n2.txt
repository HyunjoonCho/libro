
import org.apache.commons.lang3.reflect.TypeUtils;
import org.junit.Assert;
import org.junit.Test;

import java.lang.reflect.Type;
import java.util.Map;

public class TypeUtilsTest {

    public interface This<K, V> {
    }

    public class Other<T> implements This<String, T> {
    }

    @Test
    public void testGetTypeArgumentsForPartiallyAssignedClasses() {
        Map<Type, Type> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        
        // Check the expected size of the type arguments map
        Assert.assertEquals("The size of the type variable map should be 2", 2, typeVarAssigns.size());
        
        // Check the binding of the first type parameter (K) of This to String.class
        Assert.assertEquals("The type K should be resolved to String.class", 
                            String.class, 
                            typeVarAssigns.get(This.class.getTypeParameters()[0]));
        
        // Check the binding of the second type parameter (V) of This to the type parameter T of Other
        Assert.assertEquals("The type V should be resolved to Other.class' type parameter T", 
                            Other.class.getTypeParameters()[0], 
                            typeVarAssigns.get(This.class.getTypeParameters()[1]));
    }
}
