
import org.apache.commons.compress.archivers.ar.ArArchiveEntry;
import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;
import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class ArArchiveTest {

    @Test
    public void testArDeleteIssue() throws IOException {
        // Create a byte array to simulate the AR archive
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

        // Create an AR archive with test1.xml and test2.xml
        try (ArArchiveOutputStream arOut = new ArArchiveOutputStream(byteArrayOutputStream)) {
            
            // Add test1.xml
            byte[] test1Content = "This is test1".getBytes();
            ArArchiveEntry test1Entry = new ArArchiveEntry("test1.xml", test1Content.length);
            arOut.putArchiveEntry(test1Entry);
            arOut.write(test1Content);
            arOut.closeArchiveEntry();

            // Add test2.xml
            byte[] test2Content = "This is test2".getBytes();
            ArArchiveEntry test2Entry = new ArArchiveEntry("test2.xml", test2Content.length);
            arOut.putArchiveEntry(test2Entry);
            arOut.write(test2Content);
            arOut.closeArchiveEntry();
        }

        // Convert output to a byte array for reading
        byte[] arData = byteArrayOutputStream.toByteArray();

        // Simulate deleting test2.xml from the AR archive by creating a new archive without test2.xml
        ByteArrayOutputStream modifiedOutputStream = new ByteArrayOutputStream();
        
        try (ArArchiveInputStream arIn = new ArArchiveInputStream(new ByteArrayInputStream(arData)); 
             ArArchiveOutputStream arOutModified = new ArArchiveOutputStream(modifiedOutputStream)) {

            ArArchiveEntry entry;
            // Copy entries except for test2.xml
            while ((entry = arIn.getNextArEntry()) != null) {
                if (!entry.getName().equals("test2.xml")) {
                    arOutModified.putArchiveEntry(new ArArchiveEntry(entry.getName(), entry.getLength()));
                    IOUtils.copy(arIn, arOutModified);
                    arOutModified.closeArchiveEntry();
                }
            }
        }

        // Verify the contents of the modified archive
        byte[] modifiedArData = modifiedOutputStream.toByteArray();

        // Check if test2.xml is still present by reading new entries
        try (ArArchiveInputStream arIn = new ArArchiveInputStream(new ByteArrayInputStream(modifiedArData))) {
            assertFalse(() -> {
                ArArchiveEntry entry;
                while ((entry = arIn.getNextArEntry()) != null) {
                    if (entry.getName().equals("test2.xml")) {
                        return true;
                    }
                }
                return false;
            }, "test2.xml should not be in the AR archive");
        }

        // The test will expose that even though we removed it logically through the API, it still physically exists, 
        // causing issues when replaced or added to.
    }
}
