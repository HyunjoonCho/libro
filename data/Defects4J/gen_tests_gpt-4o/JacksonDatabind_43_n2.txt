
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertNull;

// Custom deserializer that mishandles nulls
class CustomObject {
    public String id;
}

class CustomObjectDeserializer extends StdDeserializer<CustomObject> {
    public CustomObjectDeserializer() {
        super(CustomObject.class);
    }

    @Override
    public CustomObject deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
        JsonNode node = jp.getCodec().readTree(jp);
        CustomObject obj = new CustomObject();
        // Intentionally not checking if node is null
        obj.id = node.get("id").asText();  // This line will fail if node is null
        return obj;
    }
}

public class CustomDeserializerTest {
    @Test
    public void testDeserializeNullValue() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        // Register the custom deserializer
        mapper.registerModule(new SimpleModule().addDeserializer(CustomObject.class, new CustomObjectDeserializer()));

        // Simulating the null root value
        String json = "null";
        CustomObject result = mapper.readValue(json, CustomObject.class);

        // Expects null object to be returned
        assertNull(result);
    }
}
