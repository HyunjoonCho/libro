
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class ObjectReaderTest {

    private static final String JSON_DATA = "[{\"name\":\"John\"},{\"name\":\"Doe\"},{name:\"Invalid\"},{\"name\":\"Smith\"}]";

    public static class Person {
        public String name;
    }

    @Test
    public void testReadValuesWithErrorRecovery() {
        ObjectMapper mapper = new ObjectMapper();
        ObjectReader reader = mapper.readerFor(Person.class);

        List<Person> persons = new ArrayList<>();
        try {
            MappingIterator<Person> iterator = reader.readValues(JSON_DATA);
            while (iterator.hasNext()) {
                try {
                    Person person = iterator.next();
                    persons.add(person);
                } catch (JsonProcessingException e) {
                    // Handle individual item processing exception (e.g., log it)
                    System.out.println("Error processing a Person object: " + e.getMessage());
                }
            }
        } catch (IOException e) {
            fail("Failed to read values: " + e.getMessage());
        }

        // Ensure we recovered and found the valid objects
        assertEquals(3, persons.size());
        assertEquals("John", persons.get(0).name);
        assertEquals("Doe", persons.get(1).name);
        assertEquals("Smith", persons.get(2).name);
    }
}
