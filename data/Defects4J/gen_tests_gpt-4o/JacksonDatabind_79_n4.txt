
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.ObjectMapper;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.Test;

public class JsonIdentityReferenceTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = "id")
    @JsonIdentityReference(alwaysAsId = true)
    static class AlwaysAsIdClass {
        public int value;

        public AlwaysAsIdClass() { this(0); }
        public AlwaysAsIdClass(int v) { value = v; }
    }

    @JsonPropertyOrder(alphabetic = true)
    static class Container {
        // This will work as expected because it has the annotation at the field level.
        @JsonIdentityReference(alwaysAsId = true)
        public AlwaysAsIdClass fieldWithAnnotation = new AlwaysAsIdClass(1);

        // This will not work as expected because it relies on the class-level annotation.
        public AlwaysAsIdClass fieldWithoutAnnotation = new AlwaysAsIdClass(2);
    }

    private static final ObjectMapper MAPPER = new ObjectMapper();

    @Test
    public void testJsonIdentityReference() throws Exception {
        String json = MAPPER.writeValueAsString(new Container());
        assertEquals("{\"fieldWithAnnotation\":1,\"fieldWithoutAnnotation\":2}", json);
    }
}
