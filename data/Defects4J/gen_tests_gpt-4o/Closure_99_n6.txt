
import com.google.javascript.jscomp.*;

public class WarningReproductionTest {

    public void testGlobalThisWarning() {
        String jsCode = ""
          + "/** @constructor */\n"
          + "function MyClass() {}\n"
          + "MyClass.prototype[\"MyMethod\"] = function(a) {\n"
          + "  this.a = a;\n"
          + "};\n"
          + "window[\"MyClass\"] = MyClass;\n";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);

        Result result = compiler.compile(SourceFile.fromCode("externs", ""), 
                                         SourceFile.fromCode("test", jsCode), 
                                         options);

        // Use assertions to check if the warning was produced
        boolean containsGlobalThisWarning = 
            result.warnings.stream().anyMatch(
                warning -> warning.getType().equals(DiagnosticGroups.GLOBAL_THIS)
            );

        assertTrue("Should have produced a 'dangerous use of the global this object' warning", 
                   containsGlobalThisWarning);
    }

    public void testInterfaceImplementationWarning() {
        String externs = ""
          + "/** @interface */\n"
          + "function MyParent() {}\n"
          + "/** @param {*} a */\n"
          + "MyParent.prototype.MyMethod = function(a) {};\n";

        String jsCode = ""
          + "/**\n"
          + " * @constructor\n"
          + " * @implements {MyParent}\n"
          + " */\n"
          + "function MyClass() {}\n"
          + "MyClass.prototype[\"MyMethod\"] = function(a) {\n"
          + "  this.a2 = a;\n"
          + "};\n"
          + "window[\"MyClass\"] = MyClass;\n";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.MISSING_IMPLEMENTATION, CheckLevel.WARNING);

        Result result = compiler.compile(SourceFile.fromCode("externs", externs), 
                                         SourceFile.fromCode("test", jsCode), 
                                         options);

        // Use assertions to check if the warning was produced
        boolean containsImplementationWarning = 
            result.warnings.stream().anyMatch(
                warning -> warning.description.contains("property MyMethod on interface MyParent is not implemented by type MyClass")
            );

        assertTrue("Should have produced a warning about MyMethod not being implemented correctly", 
                   containsImplementationWarning);
    }

    // Placeholder for a basic assertion method, could be replaced by an assertion library
    private void assertTrue(String message, boolean condition) {
        if (!condition) {
            throw new AssertionError(message);
        }
    }

    public static void main(String[] args) {
        WarningReproductionTest test = new WarningReproductionTest();
        test.testGlobalThisWarning();
        test.testInterfaceImplementationWarning();
    }
}
