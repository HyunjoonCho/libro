
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ZipVersionTest {

    @Test
    public void testZipLocalVsCentralDirectoryVersion() throws IOException {
        // Create a byte array output stream to hold the zip data
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        
        // Wrap the output stream in a ZipArchiveOutputStream
        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(baos);
        
        // Create a zip entry
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipEntry.DEFLATED);
        
        // Add the entry to the zip output stream
        zos.putArchiveEntry(entry);
        
        // Write some data to the entry
        zos.write("Hello, World!".getBytes());
        
        // Close the entry
        zos.closeArchiveEntry();
        
        // Finish the zip output stream
        zos.finish();
        zos.close();
        
        // Convert the output to a byte array
        byte[] zipBytes = baos.toByteArray();
        
        // Now inspect the zip file using a ZipArchiveInputStream
        ByteArrayInputStream bais = new ByteArrayInputStream(zipBytes);
        ZipArchiveInputStream zis = new ZipArchiveInputStream(bais);
        
        ZipArchiveEntry readEntry = zis.getNextZipEntry();
        assertEquals("test.txt", readEntry.getName());
        
        // Check the versions needed to extract
        int centralDirectoryVersion = readEntry.getVersionNeeded();
        int localHeaderVersion = fetchLocalFileHeaderVersion(zipBytes);
        
        // Assert that the versions match (they should not according to the bug)
        assertEquals("Local header version and central directory version should match", centralDirectoryVersion, localHeaderVersion);
    }

    private int fetchLocalFileHeaderVersion(byte[] zipBytes) {
        // Reads the version needed to extract from the local file header (offset 4-5)
        // in a very simplified manner; assumes no encryption, etc.
        return ((zipBytes[5] << 8) & 0xFF00) | (zipBytes[4] & 0xFF);
    }
}
