
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import java.io.IOException;
import static org.junit.Assert.assertEquals;

public class CallRecordTest {

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class CallRecord {
        public float version;
        public String application;
        public Item item;
        public Item item2;

        @Override
        public String toString() {
            final StringBuilder builder = new StringBuilder();
            builder.append("CallRecord [version=").append(version).append(", ");
            if (application != null) {
                builder.append("application=").append(application).append(", ");
            }
            if (item != null) {
                builder.append("item=").append(item);
            }
            builder.append("]");
            return builder.toString();
        }
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
    @JsonSubTypes({@Type(value = Event.class, name = Event.TYPE)})
    public interface Item {
    }

    public static final class Event implements Item {
        public String location;
        public static final String TYPE = "event";
    }

    @Test
    public void testDeserializationWithInvalidSubtypes() throws IOException {
        final ObjectMapper objectMapper = new ObjectMapper()
                .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                        DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                        DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

        String json = "{\"version\":0.0,\"application\":\"123\","
                + "\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},"
                + "\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";

        CallRecord record = objectMapper.readValue(json, CallRecord.class);
        assertEquals("123", record.application);
        assertEquals("CallRecord [version=0.0, application=123, ]", record.toString());

        json = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}}";
        record = objectMapper.readValue(json, CallRecord.class);
        assertEquals("123", record.application);
        assertEquals("CallRecord [version=0.0, application=123, ]", record.toString());

        json = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, "
                + "\"version\":0.0,\"application\":\"123\"}";
        record = objectMapper.readValue(json, CallRecord.class);
        assertEquals("123", record.application);
        assertEquals("CallRecord [version=0.0, ]", record.toString());
    }
}
