
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;

public class TarArchiveInputStreamTest {

    @Test
    public void testLargeUserIdParsing() throws IOException {
        // Create a tar entry with a large UID
        // Prepare a byte array to simulate a tar entry with a large UID
        byte[] header = new byte[512];
        
        // Fill the name field with some data
        String name = "testEntry.txt";
        System.arraycopy(name.getBytes(), 0, header, 0, name.length());

        // Fill the UID field (offset 108 to 115) with '62410554' which causes the issue
        String largeUID = "62410554\0";
        System.arraycopy(largeUID.getBytes(), 0, header, 108, largeUID.length());

        // Fill other required fields for a valid tar entry -
        String size = "00000000000\0\0";
        System.arraycopy(size.getBytes(), 0, header, 124, size.length());

        String magic = "ustar\0";
        System.arraycopy(magic.getBytes(), 0, header, 257, magic.length());

        String version = "00";
        System.arraycopy(version.getBytes(), 0, header, 263, version.length());

        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            baos.write(header);
            baos.write(new byte[512]); // Content could follow, but header is enough to trigger the issue
            baos.writeTo(System.out);

            try (TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(baos.toByteArray()))) {
                TarArchiveEntry entry;
                while ((entry = tais.getNextTarEntry()) != null) {
                    System.out.println("Entry: " + entry.getName());
                }
            }
        }
    }

}
