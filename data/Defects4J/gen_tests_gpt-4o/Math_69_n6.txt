
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.distribution.TDistribution;

import static org.junit.Assert.*;

public class PearsonsCorrelationTest {

    @org.junit.Test
    public void testPearsonsCorrelationPValuePrecision() {
        // Construct a matrix with a strong correlation
        double[][] data = {
            {1.0, 2.0, 3.0},
            {2.0, 4.0, 6.0},
            {3.0, 6.0, 9.0},
            {4.0, 8.0, 12.0},
            {5.0, 10.0, 15.0},
            {6.0, 12.0, 18.0},
            {7.0, 14.0, 21.0},
            {8.0, 16.0, 24.0},
            {9.0, 18.0, 27.0},
            {10.0, 20.0, 30.0}
        };

        RealMatrix matrix = new BlockRealMatrix(data);

        // Calculate the Pearson correlation
        PearsonsCorrelation correlation = new PearsonsCorrelation(matrix);

        // Get the p-values for the correlation coefficients
        RealMatrix pValuesMatrix = correlation.getCorrelationPValues();

        // Directly calculate the p-value with modified formula
        double correlationCoeff = 1.0;  // As expected for a perfectly correlated dataset
        int n = data.length;
        // T-statistic for the correlation
        double t = Math.abs(correlationCoeff) * Math.sqrt((n - 2) / (1 - correlationCoeff * correlationCoeff));
        // Degrees of freedom
        double degreesOfFreedom = n - 2;
        TDistribution tDist = new TDistribution(degreesOfFreedom);
        // Modified p-value calculation
        double expectedPValue = 2 * tDist.cumulativeProbability(-t);

        // Test if the p-value from the Pearson correlation is not zero
        assertTrue(pValuesMatrix.getEntry(0, 1) > 0);

        // Check that the calculated p-value matches the expected p-value
        assertEquals(expectedPValue, pValuesMatrix.getEntry(0, 1), 1e-16);
    }
}
