
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.List;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testJoinOptimization() throws Exception {
        String jsCode = "var variable = confirm('value from user');\n" +
                        "var array = [ 'constant', variable ];\n" +
                        "alert(array.join(','));";
        
        // Set up compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Prepare source and extern files
        List<SourceFile> externs = CommandLineRunner.getBuiltinExterns(CompilerOptions.Environment.BROWSER);
        List<SourceFile> inputs = List.of(SourceFile.fromCode("test.js", jsCode));

        // Compile the code
        compiler.compile(externs, inputs, options);

        // Get the compiled code
        String compiledCode = compiler.toSource();
        System.out.println(compiledCode);  // Prints the compiled code for manual inspection

        // Assert optimization
        assertTrue("Expected join() instead of join(',')", compiledCode.contains("a.join()"));
    }
}
