
import static com.google.common.truth.Truth.assertThat;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import java.util.Collections;
import org.junit.Test;

public class GoogScopeCrashTest {

    @Test
    public void testPreconditionCrashWithGoogScope() {
        // JavaScript code that triggers the bug
        String jsCode = ""
                + "var goog = {};\n"
                + "goog.scope;\n"
                + "\n"
                + "var ns = {};\n"
                + "ns.sub = {};\n"
                + "/** @constructor */\n"
                + "ns.sub.C = function() {};\n"
                + "\n"
                + "goog.scope(function() {\n"
                + "  var sub = ns.sub;\n"
                + "  /** @type {sub.C} */\n"
                + "  var x = null;\n"
                + "});";

        // Set up the compiler
        Compiler compiler = new Compiler();

        // Define compiler options
        CompilerOptions options = new CompilerOptions();
        // Enable specific options if necessary
        // e.g., options.setSomeCompilerOption(true);

        // Compile the provided JavaScript code
        Result result = compiler.compile(
            Collections.emptyList(), // No externs
            Collections.singletonList(JSSourceFile.fromCode("test.js", jsCode)),
            options
        );

        // Assert that there is an error and it matches the description
        assertThat(result.success).isFalse(); // Expect the compilation to fail due to the bug

        // Assert there is a specific error reported related to the bug
        // This would be improved with more detailed assertion if the actual error message is known
        assertThat(compiler.getErrors().length).isGreaterThan(0);
    }
}
