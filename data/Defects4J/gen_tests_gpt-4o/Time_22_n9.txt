
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DurationToPeriodTest {

    @Test
    public void testDurationToPeriodWithFixedTimeZone() {
        // Set the default time zone to a fixed time zone (e.g., GMT)
        DateTimeZone.setDefault(DateTimeZone.forID("Etc/GMT"));
        System.out.println("Timezone: " + DateTimeZone.getDefault());

        Duration aDuration = new Duration(
                DateTimeConstants.MILLIS_PER_HOUR * 30 +
                DateTimeConstants.MILLIS_PER_MINUTE * 50 +
                DateTimeConstants.MILLIS_PER_SECOND * 14
        );

        System.out.println("Duration before: " + aDuration);
        Period period = aDuration.toPeriod();
        System.out.println("Period after: " + period);

        // Assert that the period includes 1 day, 6 hours, 50 minutes, and 14 seconds
        assertEquals("P1DT6H50M14S", period.toString());
    }

    @Test
    public void testDurationToPeriodWithDstTimeZone() {
        // Set the default time zone to a DST time zone (e.g., America/Chicago)
        DateTimeZone.setDefault(DateTimeZone.forID("America/Chicago"));
        System.out.println("Timezone: " + DateTimeZone.getDefault());

        Duration aDuration = new Duration(
                DateTimeConstants.MILLIS_PER_HOUR * 30 +
                DateTimeConstants.MILLIS_PER_MINUTE * 50 +
                DateTimeConstants.MILLIS_PER_SECOND * 14
        );

        System.out.println("Duration before: " + aDuration);
        Period period = aDuration.toPeriod();
        System.out.println("Period after: " + period);

        // Assert that the period includes 30 hours, 50 minutes, and 14 seconds
        assertEquals("PT30H50M14S", period.toString());
    }
}
