
import com.google.javascript.jscomp.*;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CompilerTest {

    @Test
    public void testPrototypeInheritanceWarning() {
        // JavaScript code from the bug report
        String jsCode = "/**\n" +
                " * @constructor\n" +
                " */\n" +
                "function SuperClass() {\n" +
                "}\n" +
                "SuperClass.prototype.CustomMethod = function() {\n" +
                "}\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @extends {SuperClass}\n" +
                " */\n" +
                "function SubClass() {\n" +
                "}\n" +
                "SubClass.prototype = new SuperClass();\n" +
                "/**\n" +
                " * @override\n" +
                " */\n" +
                "SubClass.prototype.CustomMethod = function() {\n" +
                "    this.myProperty = \"value\";\n" +
                "};\n" +
                "window['SubClassInstance'] = new SubClass();";

        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);
        options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);

        Compiler compiler = new Compiler();
        compiler.compile(CommandLineRunner.getBuiltinExterns(CompilerOptions.Environment.BROWSER), SourceFile.fromCode("test.js", jsCode), options);

        String warningMessage = compiler.getWarnings().length > 0 ? compiler.getWarnings()[0].toString() : "No warnings.";
        assertEquals("Warning message is incorrect", true,
                warningMessage.contains("JSC_UNKNOWN_OVERRIDE: property CustomMethod not defined on any superclass of SubClass"));
    }
}
