
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ClosureCompilerTest {

    @Test
    public void testJavaScriptCompilationError() {
        // Instantiate the compiler
        Compiler compiler = new Compiler();

        // Create the compiler options
        CompilerOptions options = new CompilerOptions();

        // Input JavaScript code
        String jsCode = "function keys(obj) {\n" +
                        "    var a = [], i = 0;\n" +
                        "    for (a[i++] in obj);\n" +
                        "    return a;\n" +
                        "}";

        // Provide input and external source files
        SourceFile input = SourceFile.fromCode("test.js", jsCode);
        
        // Perform the compilation
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Assert that there shouldn't be any errors
        assertEquals("Expected compilation to be successful", 0, result.errors.length);

        // If errors exist output them
        for (JSError error : result.errors) {
            System.err.println(error.toString());
        }
    }
}
