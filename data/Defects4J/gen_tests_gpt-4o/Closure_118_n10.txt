
import com.google.javascript.jscomp.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class PrototypeMethodTest {

    @Test
    public void testPrototypeMethodNotRemoved() {
        // JS code to be compiled
        String jsCode = "/** @const */\n" +
                        "var foo = {};\n" +
                        "foo.bar = {\n" +
                        " 'bar1': function() { console.log('bar1'); }\n" +
                        "}\n" +
                        "/** @constructor */\n" +
                        "function foobar() {}\n" +
                        "foobar.prototype = foo.bar;\n" +
                        "foo.foobar = new foobar;\n" +
                        "console.log(foo.foobar['bar1']);";

        // Configure closure compiler
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setPrettyPrint(true);

        // Create a compiler instance and compile the JS code
        Compiler compiler = new Compiler();
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        Result result = compiler.compile(CommandLineRunner.getDefaultExterns(), input, options);

        // Check that the compilation was successful
        assertTrue(result.success);

        // Check if the method 'bar1' is still present in the optimized JS code
        String outputCode = compiler.toSource();
        assertTrue(outputCode.contains("bar1"));
    }
}
