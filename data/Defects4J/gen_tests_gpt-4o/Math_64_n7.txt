public void testLevenbergMarquardtInconsistentResult() {
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    
    // Define a simple problem
    DifferentiableMultivariateVectorFunction problem = new DifferentiableMultivariateVectorFunction() {
        public double[] value(double[] point) {
            return new double[] {
                point[0] * point[0] - 1,
                point[1] * point[1] - 1
            };
        }

        public MultivariateMatrixFunction jacobian() {
            return new MultivariateMatrixFunction() {
                public double[][] value(double[] point) {
                    return new double[][] {
                        {2 * point[0], 0},
                        {0, 2 * point[1]}
                    };
                }
            };
        }
    };

    double[] initialGuess = {2.0, 0.5};
    double[] target = {0, 0}; // target for both functions value should be zero
    double[] weights = {1, 1};

    VectorialPointValuePair result = optimizer.optimize(problem, target, weights, initialGuess);

    // Check if the solution point corresponds to the residuals and cost
    double[] expectedPoint = {1.0, 1.0}; // optimal solution point expected
    double[] resultPoint = result.getPoint();

    assertArrayEquals(expectedPoint, resultPoint, 1.0e-6);

    double expectedCost = 0.0; // target reached, so cost should be 0
    double actualCost = optimizer.getCost();

    assertEquals(expectedCost, actualCost, 1.0e-6);
}