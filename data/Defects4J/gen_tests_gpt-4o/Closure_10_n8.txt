
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TernaryOperatorBugTest {

    @Test
    public void testTernaryOperatorWithMixedTypes() {
        String codeToCompile = "var a = (Math.random() > 0.5 ? '1' : 2) + 3 + 4;";
        
        // Expected result would be similar to input because no optimization should combine + 3 + 4
        // when there is the possibility of string concatenation.
        String expectedOutput = "var a = (Math.random() > 0.5 ? '1' : 2) + 3 + 4;";
        
        // Use the Google Closure Compiler API to compile the code
        CommandLineRunner runner = new CommandLineRunner(new String[]{});
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        Result result = runner.doRunSimple(new String[] {codeToCompile}, options);

        // Verify that the output is as expected (though due to bug, it might not be)
        String compiledCode = runner.getLastCompiler().toSource();
        assertEquals(expectedOutput, compiledCode);
    }
}
