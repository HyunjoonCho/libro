
import org.apache.commons.math3.stat.Frequency;
import org.junit.Test;
import static org.junit.Assert.*;

public class FrequencyTest {

    @Test(expected = IllegalArgumentException.class)
    public void testAddNonComparableObjectShouldFail() {
        Frequency f = new Frequency();
        // A plain Object is not Comparable
        Object nonComparableObject = new Object();
        
        // This should throw an IllegalArgumentException as adding
        // a non-Comparable object should not be allowed.
        f.addValue(nonComparableObject);
    }
    
    @Test
    public void testGetCountAndPctWithNonComparableObject() {
        Frequency f = new Frequency();
        Object nonComparableObject = new Object();
        
        // Directly checking for counts and percentages with non-Comparable
        // object should return 0, as per current buggy behavior.
        assertEquals(0, f.getCount(nonComparableObject));
        assertEquals(0.0, f.getPct(nonComparableObject), 0.0001);
    }
}
