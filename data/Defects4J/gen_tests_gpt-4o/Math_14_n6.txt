
import org.apache.commons.math3.fitting.PolynomialCurveFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoints;
import org.apache.commons.math3.optim.OptimizationData;
import org.junit.Test;

public class OptimizerMemoryIssueTest {

    @Test
    public void testLargeNumberOfWeightsMemoryIssue() {
        // Simulate a large number of data points for curve fitting
        int largeNumberOfPoints = 41200;
        WeightedObservedPoints points = new WeightedObservedPoints();

        // Add data points
        for (int i = 0; i < largeNumberOfPoints; i++) {
            // Arbitrarily chosen function: f(x) = x^2 for simplicity
            points.add(i, Math.pow(i, 2));
        }

        // Try to fit a polynomial with a relatively low degree
        PolynomialCurveFitter fitter = PolynomialCurveFitter.create(2); // quadratic polynomial

        try {
            // Perform the curve fitting
            double[] coefficients = fitter.fit(points.toList());
            
            // If the process didn't run out of memory, then check if there are coefficients
            assert coefficients.length > 0;
        } catch (OutOfMemoryError e) {
            // This is the expected failure mode for this test
            e.printStackTrace();
            fail("The optimizer ran out of memory when handling a large set of weights.");
        }
    }
}
