
import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertFalse;

public class KMeansPlusPlusClustererTest {

    @Test
    public void testTruncationIssue() {
        // Create very close points where distances are typically less than 1
        List<DoublePoint> points = new ArrayList<>();
        points.add(new DoublePoint(new double[]{0.001, 0.001}));
        points.add(new DoublePoint(new double[]{0.002, 0.002}));
        points.add(new DoublePoint(new double[]{0.003, 0.003}));
        points.add(new DoublePoint(new double[]{0.004, 0.004}));
        points.add(new DoublePoint(new double[]{0.005, 0.005}));

        // Run KMeansPlusPlusClusterer with a small number of clusters
        KMeansPlusPlusClusterer<DoublePoint> clusterer = new KMeansPlusPlusClusterer<>(2);
        
        List<Cluster<DoublePoint>> clusters = clusterer.cluster(points);

        // Assert that no cluster is empty due to distance truncation issue
        for (Cluster<DoublePoint> cluster : clusters) {
            assertFalse("Cluster should not be empty", cluster.getPoints().isEmpty());
        }
    }
}
