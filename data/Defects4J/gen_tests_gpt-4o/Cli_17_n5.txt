
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class PosixParserTest {

    @Test
    public void testStopBurstingOnNonOption() {
        // Define options
        Options options = new Options();
        options.addOption("a", false, "option a");
        options.addOption("b", false, "option b");

        // Input command line
        String[] args = new String[] { "-azb" };

        CommandLineParser parser = new PosixParser();
        
        // Enable stopAtNonOption
        try {
            CommandLine cmd = parser.parse(options, args, true);
            
            // Verify options
            assertEquals(true, cmd.hasOption("a"));
            assertEquals(false, cmd.hasOption("b"));
            
            // Verify non-options
            // The non-option characters should be grouped together as expected
            assertArrayEquals(new String[] { "zb" }, cmd.getArgs());
            
        } catch (ParseException e) {
            fail("Parsing failed. Reason: " + e.getMessage());
        }
    }
}
