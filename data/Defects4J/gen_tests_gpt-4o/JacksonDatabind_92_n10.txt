
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;

import static org.junit.Assert.fail;

public class JdkTypeBlockingTest {

    @Test
    public void testBlockJdkTypesFromPolymorphicDeserialization() {
        ObjectMapper mapper = new ObjectMapper();
        
        // Sample JSON payload simulating a potentially malicious polymorphic type
        String maliciousJson = "{ \"@class\": \"java.rmi.server.UID\" }";

        try {
            // Attempt to deserialize
            Object obj = mapper.readValue(maliciousJson, Object.class);
            fail("Expected security exception when deserializing risky JDK type.");
        } catch (InvalidTypeIdException e) {
            // Expected behavior: the type should be blocked from polymorphic deserialization
            System.out.println("Blocked deserialization of risky JDK type as expected: " + e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception type: " + e.getClass().getName() + " - " + e.getMessage());
        }
    }
}
