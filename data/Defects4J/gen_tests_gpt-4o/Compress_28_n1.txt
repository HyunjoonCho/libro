
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.junit.Test;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.junit.Assert.fail;

public class TarArchiveInputStreamTest {
    @Test
    public void testCorruptedBzip2() {
        String archivePath = "path/to/your/corrupted/test.tar.bz2"; // Update this line with the path to a corrupted tar.bz2 file
        TarArchiveInputStream input = null;
        try {
            InputStream fileIn = new FileInputStream(archivePath);
            BZip2CompressorInputStream bzIn = new BZip2CompressorInputStream(fileIn, true);
            input = new TarArchiveInputStream(bzIn);
            
            ArchiveEntry nextMatchedEntry = input.getNextEntry();
            while (nextMatchedEntry != null) {
                // Simulate extraction process
                nextMatchedEntry = input.getNextEntry();
            }
            
            // If we reach here without an IOException, the test case has failed to catch the issue
            fail("Expected an IOException due to corrupted archive but did not encounter one.");
        } catch (IOException e) {
            // Expected an IOException due to the corrupted file, test case passed
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException ignored) {}
            }
        }
    }
}
