
import static org.junit.Assert.*;
import org.junit.Test;

public class ValueOverloadTest {

    // Hypothetical method to illustrate the issue:
    public Object value(boolean b) {
        return b ? "True" : "False";
    }

    // Overload for boxed types:
    public Object value(Number n) {
        return n == null ? "Null Number" : n.toString();
    }

    @Test(expected = NullPointerException.class)
    public void testValueWithBoxedBoolean() {
        Boolean bool = null;
        // This should ideally be handled by an overload that accepts boxed Booleans,
        // or should otherwise provide a way to avoid NullPointerException:
        Object result = value(bool);
        assertNull(result);
    }
    
    // For demonstration, adding a correctly behaving overload:
    public Object value(Boolean b) {
        return b == null ? "Null Boolean" : (b ? "True" : "False");
    }

    @Test
    public void testValueWithFixedBoxedBoolean() {
        Boolean bool = null;
        // After fixing the overload issue:
        Object result = value(bool);
        assertEquals("Null Boolean", result);
    }
}
