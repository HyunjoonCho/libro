
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JavascriptSourceFile;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerObfuscationTest {

    @Test
    public void testArgumentRedeclareTypeError() {
        String originalJs = ""
            + "function exampleFunction(argument) {"
            + "    console.log(argument);"
            + "    var variable1 = 5;"
            + "    var variable2 = 10;"
            + "}";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);
        options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);

        JavascriptSourceFile extern = CommandLineRunner.getDefaultExterns(COMPILER_PATH).get(0);
        JavascriptSourceFile input = JavascriptSourceFile.fromCode("input.js", originalJs);

        compiler.compile(extern, input, options);

        String compiledCode = compiler.toSource();

        // Assert that the compiled code should not rename variables to cause redeclaration
        // of a parameter. We're expecting the output will not cause Firefox TypeError.
        assertTrue("Compiled code should not contain redeclaration of parameter",
                   !compiledCode.contains("var argument ="));
    }
}
