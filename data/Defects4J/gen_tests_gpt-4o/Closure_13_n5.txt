
import static org.junit.Assert.*;
import org.junit.Test;

public class JsMinificationTest {

    @Test
    public void testTrueFalseReplacement() {
        // Simulating the expected minified output behavior
        String initialFunction = "function some_function() {\n" +
                                 " var fn1;\n" +
                                 " var fn2;\n" +
                                 " if (any_expression) {\n" +
                                 " fn2 = external_ref;\n" +
                                 " fn1 = function (content) {\n" +
                                 " return fn2();\n" +
                                 " }\n" +
                                 " }\n" +
                                 " return {\n" +
                                 " method1: function () {\n" +
                                 " if (fn1) fn1();\n" +
                                 " return true;\n" +
                                 " },\n" +
                                 " method2: function () {\n" +
                                 " return false;\n" +
                                 " }\n" +
                                 " }\n" +
                                 "}";

        String expectedMinifiedFunction = "function some_function(){" +
                                          "var a,b;" +
                                          "any_expression&&(b=external_ref,a=function(){" +
                                          "return b()" +
                                          "});" +
                                          "return{" +
                                          "method1:function(){" +
                                          "a&&a();" +
                                          "return!0" +  // expecting !0 instead of true
                                          "}," +
                                          "method2:function(){" +
                                          "return!1" +  // expecting !1 instead of false
                                          "}" +
                                          "}" +
                                          "}";

        // This should be the actual task or method that attempts to minify the function
        // In practice, you'd use something like Closure Compiler to transform initialFunction

        // For simulation purposes, a method here should perform replacement like:
        String actualMinifiedFunction = simulateMinification(initialFunction);

        assertEquals(expectedMinifiedFunction, actualMinifiedFunction);
    }

    private String simulateMinification(String jsCode) {
        // Simulate the behavior where true/false are replaced by !0/!1
        return jsCode.replace("true", "!0").replace("false", "!1");
    }
}
