public void testTrueFalseReplacement() {
    // Define a function similar to the one described in the bug report
    String jsFunction = "function some_function() { " +
        "var fn1; " +
        "var fn2; " +
        "if (any_expression) { " +
        "fn2 = external_ref; " +
        "fn1 = function (content) { return fn2(); } " +
        "} " +
        "return { " +
        "method1: function () { if (fn1) fn1(); return true; }, " +
        "method2: function () { return false; } " +
        "} " +
        "}";

    // Compile the JavaScript function using the Closure Compiler
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
        SourceFile.fromCode("input.js", jsFunction), options);

    // Assert that the compiled code replaces true/false with !0/!1
    String compiledCode = compiler.toSource();
    assertFalse(compiledCode.contains("true"));
    assertFalse(compiledCode.contains("false"));
    assertTrue(compiledCode.contains("!0"));
    assertTrue(compiledCode.contains("!1"));
}