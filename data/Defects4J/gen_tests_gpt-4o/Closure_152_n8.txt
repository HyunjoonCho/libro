
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testClosureCompilerCastException() {
        // These are the options that trigger the bug.
        String[] compilerOptions = {
            "--create_name_map_files", "true",
            "--jscomp_warning", "missingProperties",
            "--jscomp_warning", "undefinedVars",
            "--jscomp_warning", "checkTypes",
            "--warning_level", "VERBOSE",
            "--summary_detail_level", "3",
            "--process_closure_primitives", "true",
            "--jscomp_error", "strictModuleDepCheck",
            "--jscomp_error", "invalidCasts",
            "--logging_level", "ALL",
            "--compilation_level", "ADVANCED_OPTIMIZATIONS"
        };

        // Sample JavaScript content to trigger the issue.
        String[] sourceFiles = {
            "/path/to/source1.js",
            "/path/to/source2.js"
        };

        try {
            // Simulate command line execution
            CommandLineRunner runner = new CommandLineRunner(concatenate(compilerOptions, sourceFiles));
            runner.doRun();
            // If we reach this point, the test did not reproduce the expected issue
            fail("Expected ClassCastException did not occur.");
        } catch (RuntimeException e) {
            Throwable cause = e.getCause();
            if (cause instanceof ClassCastException) {
                // Check exception message to ensure it's related to the reported bug
                assertTrue("Cause should mention Unable to cast UnionType to ObjectType",
                                cause.getMessage().contains("UnionType cannot be cast to ObjectType"));
            } else {
                // If another kind of exception occurred, that's unexpected
                fail("Unexpected exception occurred: " + e.toString());
            }
        }
    }
    
    private String[] concatenate(String[] first, String[] second) {
        int aLen = first.length;
        int bLen = second.length;
        String[] result = new String[aLen + bLen];
        System.arraycopy(first, 0, result, 0, aLen);
        System.arraycopy(second, 0, result, aLen, bLen);
        return result;
    }
}
