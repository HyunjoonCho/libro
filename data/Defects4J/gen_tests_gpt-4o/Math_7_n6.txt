public void testEventStateNotUpdatedAfterResetState() throws Exception {
    // Define example ODE with two event handlers
    FirstOrderDifferentialEquations ode = new ExampleODE();
    double[] y = new double[] { 0.0 };

    // Create integration method
    AdamsBashforthIntegrator integrator = new AdamsBashforthIntegrator(5, 1.0e-12, 1.0e-12, 1.0e-10, 1.0e-10);

    // Define event handlers
    integrator.addEventHandler(new EventHandler() {
        public double g(double t, double[] y) {
            return y[0] - 1.0;
        }

        public Action eventOccurred(double t, double[] y, boolean increasing) {
            // Trigger RESET_STATE
            return Action.RESET_STATE;
        }

        public void resetState(double t, double[] y) {
            y[0] = 0.0;
        }

        public double getMaxCheckInterval() {
            return 1.0;
        }

        public double getConvergence() {
            return 1.0e-12;
        }

        public int getMaxIterationCount() {
            return 1000;
        }
    }, 1.0, 1.0e-6, 100);

    integrator.addEventHandler(new EventHandler() {
        public double g(double t, double[] y) {
            return y[0] + 0.5;
        }

        public Action eventOccurred(double t, double[] y, boolean increasing) {
            // No action, just check the g function is called with correct state
            return Action.CONTINUE;
        }

        public void resetState(double t, double[] y) {}

        public double getMaxCheckInterval() {
            return 1.0;
        }

        public double getConvergence() {
            return 1.0e-12;
        }

        public int getMaxIterationCount() {
            return 1000;
        }
    }, 1.0, 1.0e-6, 100);

    // Integrate the ODE
    integrator.integrate(ode, 0.0, y, 10.0, y);

    // Test that state y is consistent and doesn't have incorrect values like 1e20
    assertTrue("Expected y value between -1 and 1, got " + y[0], -1.0 <= y[0] && y[0] <= 1.0);
}