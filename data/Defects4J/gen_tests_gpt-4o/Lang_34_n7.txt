
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.junit.Test;

import java.lang.ref.WeakReference;

import static org.junit.Assert.assertNull;

public class ToStringStyleMemoryLeakTest {

    private static class Dummy {
        private final String name = "dummy";

        @Override
        public String toString() {
            // Use ToStringBuilder with ThreadLocal ToStringStyle
            return new ToStringBuilder(this, ToStringStyle.DEFAULT_STYLE).append("name", name).toString();
        }
    }

    @Test
    public void testToStringStyleDoesNotCauseMemoryLeak() {
        // Create a Dummy object
        Dummy dummy = new Dummy();
        
        // Invoke toString to initialize internal ThreadLocal
        String toStringResult = dummy.toString();

        // Obtain a weak reference to the ToStringStyle object
        WeakReference<ToStringStyle> styleReference = new WeakReference<>(ToStringStyle.DEFAULT_STYLE);

        // Nullify reference and trigger garbage collection
        toStringResult = null;
        dummy = null;

        // This is a somewhat non-deterministic way to ensure GC has occurred
        System.gc();

        // Verify if ToStringStyle object can be garbage collected
        assertNull("ToStringStyle should be eligible for garbage collection", styleReference.get());
    }
}
