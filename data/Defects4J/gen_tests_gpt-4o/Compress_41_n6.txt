public void testZipArchiveInputStreamInvalidEntry() {
    byte[] invalidZipData = new byte[] {
        0x50, 0x4B, 0x03, 0x04, // Local file header signature
        0x14, 0x00, 0x00, 0x00, // Version needed to extract
        0x00, 0x00, 0x00, 0x00, // General purpose bit flag
        0x00, 0x00, 0x00, 0x00, // Compression method
        0x00, 0x00, 0x00, 0x00, // Last mod file time/date
        0x00, 0x00, 0x00, 0x00, // CRC-32
        0x00, 0x00, 0x00, 0x00, // Compressed size
        0x00, 0x00, 0x00, 0x00, // Uncompressed size
        0x08, 0x00, 0x00, 0x00, // File name length
        0x00, 0x00, 0x00, 0x00  // File name (empty to simulate invalid entry)
    };
    
    ByteArrayInputStream bais = new ByteArrayInputStream(invalidZipData);
    ZipArchiveInputStream zis = new ZipArchiveInputStream(bais);
    
    try {
        ZipArchiveEntry entry = zis.getNextZipEntry();
        fail("Expected ZipException due to invalid entry");
    } catch (ZipException e) {
        // Expected exception for invalid entry
    } catch (IOException e) {
        fail("Expected ZipException, but got IOException: " + e.getMessage());
    }
}