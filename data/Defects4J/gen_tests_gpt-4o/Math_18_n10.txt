
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.SimpleBounds;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class CMAESOptimizerTest {

    @Test
    public void testCMAESOptimizerResolutionNearBounds() {
        // Define the optimization problem
        MultivariateFunction sphereFunction = new MultivariateFunction() {
            @Override
            public double value(double[] point) {
                double sum = 0;
                for (double x : point) {
                    sum += x * x;
                }
                return sum;
            }
        };

        // Lower and upper bounds of the parameter space
        double[] lowerBound = new double[] {0.0};
        double[] upperBound = new double[] {1.0};

        // Initial guess
        double[] startPoint = new double[] {0.5};

        // Set up CMAES optimizer with bounds
        CMAESOptimizer optimizer = new CMAESOptimizer(1000, 1e-10, true, 10, 0, new java.util.Random(), false);

        // Optimize
        PointValuePair result = optimizer.optimize(10000, sphereFunction, GoalType.MINIMIZE, startPoint, new SimpleBounds(lowerBound, upperBound));

        // Get the value of the optimized parameter
        double[] optimizedPoint = result.getPoint();

        // Assert the resolution difference near bounds
        // Check if the resolution near zero is visibly better than near one
        double resolutionNearLowerBound = Math.ulp(lowerBound[0] + 1e-10);
        double resolutionNearUpperBound = Math.ulp(upperBound[0] - 1e-10);

        // Check that optimization finds a point and assert the resolution problem
        assertTrue(optimizedPoint[0] >= lowerBound[0] && optimizedPoint[0] <= upperBound[0]);
        assertTrue("Resolution near lower bound should be finer than near upper bound",
                   resolutionNearLowerBound < resolutionNearUpperBound);
    }
}
