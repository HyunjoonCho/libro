public void testCMAESOptimizerBoundsPrecision() {
    CMAESOptimizer optimizer = new CMAESOptimizer(10000, 0.0, true, 10, 0, new JDKRandomGenerator(), false, new SimplePointChecker<>(1e-9, 1e-9));
    
    double[] lowerBound = {0.0};
    double[] upperBound = {1.0};

    MultivariateFunction objectiveFunction = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return Math.abs(0.75 - point[0]); // The function has a minimum at 0.75
        }
    };

    PointValuePair result = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(objectiveFunction),
        GoalType.MINIMIZE,
        new InitialGuess(new double[] {0.5}),
        new SimpleBounds(lowerBound, upperBound)
    );

    double optimizedValue = result.getPoint()[0];
    assertTrue("The optimization should be close to 0.75", Math.abs(0.75 - optimizedValue) < 1e-3);

    // Test if the resolution is finer near the lower bound by optimizing near it
    PointValuePair resultNearLower = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(objectiveFunction),
        GoalType.MINIMIZE,
        new InitialGuess(new double[] {0.02}), // Start near lower bound
        new SimpleBounds(lowerBound, upperBound)
    );

    double optimizedValueNearLower = resultNearLower.getPoint()[0];
    // Test if the resolution is significantly finer near lower bound
    assertTrue("Fitting resolution is expected to be finer near lower bound", optimizedValueNearLower < 1e-2);
    
    // Test if the resolution is coarser near the upper bound by optimizing near it
    PointValuePair resultNearUpper = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(objectiveFunction),
        GoalType.MINIMIZE,
        new InitialGuess(new double[] {0.98}), // Start near upper bound
        new SimpleBounds(lowerBound, upperBound)
    );

    double optimizedValueNearUpper = resultNearUpper.getPoint()[0];
    // Test if the resolution is significantly coarser near upper bound
    assertTrue("Fitting resolution is expected to be coarser near upper bound", optimizedValueNearUpper > 0.98);
}