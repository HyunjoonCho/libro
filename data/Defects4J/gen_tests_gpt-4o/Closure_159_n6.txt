
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testFunctionNameTranslation() {
        // Example JavaScript code with a function and a function call
        String originalJs = 
            "function preload_check_all() {\n" +
            "    // Function Implementation\n" +
            "}\n" +
            "function execute() {\n" +
            "    preload_check_all();\n" + // Call to the function
            "}";

        // Setup the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        SourceFile input = SourceFile.fromCode("input.js", originalJs);
        SourceFile externs = SourceFile.fromCode("externs.js", "");
        Result result = compiler.compile(externs, input, options);

        // Obtain the compiled code
        String compiledJs = compiler.toSource();

        // Check if the function name in the declaration matches the one in the call
        // This checks if the function call was appropriately renamed
        boolean functionCallIsRenamed = compiledJs.contains("preload_check_all()");

        // Output any errors during compilation
        List<JSError> errors = result.errors;
        assertTrue("Expected no compilation errors, found: " + errors, errors.isEmpty());

        // Assert that the function call is renamed correctly in the compiled code
        assertTrue("Function call name was not translated appropriately", functionCallIsRenamed);
    }
}
