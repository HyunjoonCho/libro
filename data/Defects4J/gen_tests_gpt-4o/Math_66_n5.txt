
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.BracketFinder;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testOptimizeQuadratic() {
        // Define a simple quadratic function that has a minimum at x = 2
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        // Initialize the optimizer with a small tolerance
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Set up the bracket for the optimizer: let's say we know the minimum is between 0 and 4
        SearchInterval searchInterval = new SearchInterval(0, 4);

        // Optimize: find the minimum of the function within the interval
        UnivariatePointValuePair result = optimizer.optimize(
                new MaxEval(1000),
                new UnivariateObjectiveFunction(function),
                searchInterval,
                org.apache.commons.math3.optim.univariate.GoalType.MINIMIZE
        );

        // Check that the result is close to expected minimum (x = 2)
        assertEquals(2.0, result.getPoint(), 1e-8);
    }
}
