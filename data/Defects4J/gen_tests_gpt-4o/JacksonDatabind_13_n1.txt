
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

public class ObjectIdDeserializationTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    static class Entity {
        public Integer id;
        public String name;
    }

    @Test
    public void testDeserializeEntityWithNullObjectId() throws Exception {
        String jsonWithNullId = "{\"id\":null,\"name\":\"Test Entity\"}";
        String jsonWithoutId = "{\"name\":\"Test Entity\"}";

        ObjectMapper mapper = new ObjectMapper();
        
        // Deserialization with explicit null id
        Entity entityWithNullId = mapper.readValue(jsonWithNullId, Entity.class);
        assertNotNull("Entity should be successfully deserialized even with null id", entityWithNullId);
        assertNull("Entity id should be null", entityWithNullId.id);
        assertNotNull("Entity name should not be null", entityWithNullId.name);

        // Deserialization without id property
        Entity entityWithoutId = mapper.readValue(jsonWithoutId, Entity.class);
        assertNotNull("Entity should be successfully deserialized even without id", entityWithoutId);
        assertNull("Entity id should be null when id is missing", entityWithoutId.id);
        assertNotNull("Entity name should not be null", entityWithoutId.name);
    }
}
