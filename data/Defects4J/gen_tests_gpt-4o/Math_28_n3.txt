
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.UnboundedSolutionException;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.linear.GoalType;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.fail;

public class SimplexSolverTest {

    private static final int ENTITIES_COUNT = 15; // Try with 2 first, then increase to 15

    @Test
    public void testUnboundedSolutionException() {
        SimplexSolver solver = new SimplexSolver();

        // Objective function: minimize 1*t + 0*L
        LinearObjectiveFunction f = new LinearObjectiveFunction(createArray(ENTITIES_COUNT + 1, 1.0, 0.0), 0);

        List<LinearConstraint> constraints = new ArrayList<>();

        // Add constraints for each r-th subject
        for (int r = 0; r < ENTITIES_COUNT; r++) {
            // Constraint: -q(r) + QL >= 0
            double[] qConstraintArray = new double[ENTITIES_COUNT + 1];
            qConstraintArray[0] = -1.0;
            for (int i = 1; i <= ENTITIES_COUNT; i++) {
                qConstraintArray[i] = Math.random();
            }
            constraints.add(new LinearConstraint(qConstraintArray, Relationship.GEQ, 0));

            // Constraint: x(r)t - XL >= 0
            double[] xConstraintArray = new double[ENTITIES_COUNT + 1];
            xConstraintArray[0] = Math.random();
            for (int i = 1; i <= ENTITIES_COUNT; i++) {
                xConstraintArray[i] = -Math.random();
            }
            constraints.add(new LinearConstraint(xConstraintArray, Relationship.GEQ, 0));
        }

        // Solve the problem
        try {
            PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, new NonNegativeConstraint(true));
            // Optionally add assertion checks for solutions here
        } catch (UnboundedSolutionException e) {
            fail("UnboundedSolutionException thrown for ENTITIES_COUNT = " + ENTITIES_COUNT);
        }
    }

    private double[] createArray(int length, double first, double rest) {
        double[] array = new double[length];
        array[0] = first;
        for (int i = 1; i < length; i++) {
            array[i] = rest;
        }
        return array;
    }
}
