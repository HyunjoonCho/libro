
import static org.mockito.Mockito.*;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.Verifier;

// Assuming we have the following class to be tested
class SampleService {
    Dependency dependency;

    public SampleService(Dependency dependency) {
        this.dependency = dependency;
    }

    public String performAction() {
        return dependency.getData();
    }
}

class Dependency {
    public String getData() {
        return "Real Data";
    }
}

// Test case demonstrating current behavior and desired ease of use
public class MockitoJUnitRuleTest {
    @Rule
    public MockitoRule mockitoRule = new MockitoRule();

    @Mock
    Dependency dependency;

    @Test
    public void testWithMockitoRule() {
        // Current approach, requiring passing test instance might look like this:
        // MockitoAnnotations.initMocks(this); // If manually initializing mocks

        SampleService service = new SampleService(dependency);

        // Define mock behavior
        when(dependency.getData()).thenReturn("Mock Data");

        // Execute method under test
        String result = service.performAction();

        // Verify interactions and state
        verify(dependency).getData();
        assertEquals("Mock Data", result);
    }
}

// Custom MockitoRule handling for illustration
class MockitoRule extends Verifier {
    @Override
    protected void verify() {
        // Logic to verify test conditions or clean up, could be enhanced to not require initMocks(this)
    }
}
