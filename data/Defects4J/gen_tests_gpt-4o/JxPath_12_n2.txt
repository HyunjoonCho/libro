
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import java.io.StringReader;

import static org.junit.Assert.*;

public class NamespaceHandlingTest {

    @Test
    public void testNamespaceHandlingForAttributes() throws Exception {
        // XML with namespaces and attributes
        String xmlContent = "<ElementA xmlns:A=\"http://example.com/A\" xmlns:B=\"http://example.com/B\" A:myAttr=\"Mytype\">" +
                            "<B:ElementB>MY VALUE</B:ElementB>" +
                            "</ElementA>";

        // Setup a DocumentBuilder to parse the XML
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true); // Important to handle namespaces
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document doc = builder.parse(new InputSource(new StringReader(xmlContent)));

        // Setup XPath to query XML document
        XPathFactory xPathFactory = XPathFactory.newInstance();
        XPath xpath = xPathFactory.newXPath();
        
        // Optionally, set a custom NamespaceContext (not necessary here as we're not querying with prefixes)
        // NamespaceContextImpl nc = new NamespaceContextImpl();
        // xpath.setNamespaceContext(nc);
        
        // Query for the attribute using XPath
        String expression = "/ElementA/@A:myAttr";
        String value = (String) xpath.evaluate(expression, doc, XPathConstants.STRING);

        // Verify the attribute value is as expected
        assertEquals("Mytype", value);
    }

    // Optionally, define a NamespaceContext implementation if you need to handle custom prefix-to-URI bindings
    // public class NamespaceContextImpl implements javax.xml.namespace.NamespaceContext {
    //     @Override
    //     public String getNamespaceURI(String prefix) {
    //         switch (prefix) {
    //             case "A":
    //                 return "http://example.com/A";
    //             case "B":
    //                 return "http://example.com/B";
    //             default:
    //                 return javax.xml.XMLConstants.NULL_NS_URI;
    //         }
    //     }
    //
    //     @Override
    //     public String getPrefix(String namespaceURI) {
    //         // Handle reverse lookup if needed
    //         return null;
    //     }
    //
    //     @Override
    //     public java.util.Iterator getPrefixes(String namespaceURI) {
    //         return null;
    //     }
    // }

}
