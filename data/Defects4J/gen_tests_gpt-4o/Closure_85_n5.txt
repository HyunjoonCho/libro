
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.fail;

public class CompilerCrashTest {

    @Test(expected = RuntimeException.class)
    public void testSwitchStatementCompilationCrash() {
        // JavaScript code that causes the compiler to crash
        String jsCode = 
            "function a(b) {\n" +
            " switch (b.v) {\n" +
            " case 'SWITCH':\n" +
            " if (b.i >= 0) {\n" +
            " return b.o;\n" +
            " } else {\n" +
            " return undefined;\n" +
            " }\n" +
            " break;\n" +
            " }\n" +
            "}";

        // Set up the compiler and its options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);

        try {
            // Compile the JavaScript code
            compiler.compile(SourceFile.fromCode("externs.js", ""),
                             SourceFile.fromCode("test.js", jsCode),
                             options);
        } catch (RuntimeException e) {
            // Expect a specific exception message indicating the internal compiler error
            if (e.getMessage().contains("INTERNAL COMPILER ERROR")) {
                throw e;
            }
        }

        // If no exception or an unexpected exception occurs, the test should fail
        fail("Expected an INTERNAL COMPILER ERROR to be thrown.");
    }
}
