public void testAdvancedModeCompilerWarnings() {
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);

    String jsCode = ""
        + "goog.provide('Foo');"
        + "goog.provide('Bar');"
        + "/** @constructor */"
        + "Foo = function() {};"
        + "/**"
        + " * @param {number} a"
        + " * @param {number} b"
        + " * @return {number}"
        + " */"
        + "Foo.prototype.add = function(a, b) {"
        + "  return a + b;"
        + "};"
        + "/**"
        + " * @param {number} a"
        + " * @param {number} b"
        + " * @return {number}"
        + " */"
        + "Foo.prototype.sub = goog.abstractMethod;"
        + "/**"
        + " * @constructor"
        + " * @extends {Foo}"
        + " */"
        + "Bar = function() {"
        + "  goog.base(this);"
        + "};"
        + "goog.inherits(Bar, Foo);"
        + "/** @inheritDoc */"
        + "Bar.prototype.add = function(one) {"
        + "  return one;"
        + "};"
        + "/** @inheritDoc */"
        + "Bar.prototype.sub = function(one) {"
        + "  return one;"
        + "};"
        + "var foo = /** @type {Foo} */ (new Bar());"
        + "alert(foo.add(3, 4));"
        + "var bar = new Bar();"
        + "alert(bar.add(3, 4));";

    compiler.compile(Externs.builder().builtIns(), SourceFile.fromCode("test.js", jsCode), options);

    assertEquals(2, compiler.getWarnings().length);
    assertEquals("JSC_WRONG_ARGUMENT_COUNT", compiler.getWarnings()[0].getType().key);
    assertEquals("JSC_WRONG_ARGUMENT_COUNT", compiler.getWarnings()[1].getType().key);
}