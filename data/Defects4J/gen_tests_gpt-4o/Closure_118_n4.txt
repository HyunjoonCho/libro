public void testPrototypeMethodRemoval() {
    // Setup the Closure Compiler with Advanced Optimizations
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    // JavaScript input code
    String jsInput = "/** @const */\n"
                   + "var foo = {};\n"
                   + "foo.bar = {\n"
                   + " 'bar1': function() { console.log('bar1'); }\n"
                   + "}\n\n"
                   + "/** @constructor */\n"
                   + "function foobar() {}\n"
                   + "foobar.prototype = foo.bar;\n\n"
                   + "foo.foobar = new foobar;\n\n"
                   + "console.log(foo.foobar['bar1']);";

    // Compile the input string
    SourceFile sourceFile = SourceFile.fromCode("input.js", jsInput);
    compiler.compile(SourceFile.fromCode("externs.js", ""), sourceFile, options);

    // Get the compiled code
    String compiledCode = compiler.toSource();

    // Verify that the method 'bar1' is preserved in the compiled code
    assertTrue("Compiled code should contain 'bar1'", compiledCode.contains("bar1"));
}