public void testLargeInitialStepWithDormandPrince853Integrator() {
    double minStep = 1.0e-10;
    double maxStep = 1.0;
    double relativeTolerance = 1.0e-10;
    double absoluteTolerance = 1.0e-10;
    
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(minStep, maxStep, relativeTolerance, absoluteTolerance);
    
    FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return 1;
        }
        
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = -0.5 * y[0];  // Simple decay function for testing
        }
    };
    
    double[] yStart = { 1.0 };  // Initial condition
    double[] yEnd = new double[1];
    
    double initialTime = 0.0;
    double finalTime = 1.0e-12;  // Very short integration range
    
    try {
        integrator.integrate(equations, initialTime, yStart, finalTime, yEnd);
        fail("Expected MaxCountExceededException due to large initial step size");
    } catch (MaxCountExceededException e) {
        // Expected behavior: exception should be thrown due to too large step size in a very short integration interval
    }
}