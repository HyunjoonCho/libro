
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.ByteArrayOutputStream;
import java.io.BufferedOutputStream;

import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.jupiter.api.Test;

public class ZipVersionMismatchTest {

    @Test
    public void testVersionMismatchBetweenLocalAndCentralHeaders() throws Exception {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(bos);

        // Create the ZipArchiveOutputStream with BufferedOutputStream
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(bufferedOutputStream);

        // Add an entry to the zip with deflation method (compression)
        ZipArchiveEntry entry = new ZipArchiveEntry("testEntry.txt");
        entry.setMethod(ZipArchiveOutputStream.DEFLATED);
        zipOutputStream.putArchiveEntry(entry);
        zipOutputStream.write("Sample data".getBytes());
        zipOutputStream.closeArchiveEntry();
        zipOutputStream.finish();
        zipOutputStream.close();

        // Read the generated zip data and check version fields
        byte[] zipData = bos.toByteArray();
        ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new java.io.ByteArrayInputStream(zipData));
        ZipArchiveEntry readEntry = zipInputStream.getNextZipEntry();

        // Verify the "version needed to extract" in the local file header
        int localHeaderVersion = readLocalFileHeaderVersion(zipData);
        // Verify the "version needed to extract" in the central directory header
        int centralDirectoryVersion = readEntry.getVersionRequired();

        // The test fails if these two version values do not match
        assertEquals(localHeaderVersion, centralDirectoryVersion, 
            "Local header version and Central Directory version should match.");
    }

    private int readLocalFileHeaderVersion(byte[] zipData) {
        // The version needed to extract is stored in bytes 4 to 5 of the Local File Header
        // See: https://en.wikipedia.org/wiki/ZIP_(file_format)#File_headers
        return (zipData[4] & 0xFF) | ((zipData[5] & 0xFF) << 8);
    }
}
