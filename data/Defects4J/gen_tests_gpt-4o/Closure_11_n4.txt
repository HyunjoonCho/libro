
import org.junit.Test;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

import static org.junit.Assert.fail;

public class JavaScriptTest {
    
    @Test
    public void testInvalidPropertyReported() {
        // Setup JavaScript engine
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn"); // Java's JavaScript engine
        
        String script = 
                "var makeClass = function(protoMethods) {\n" +
                "   var clazz = function() {\n" +
                "       this.initialize.apply(this, arguments);\n" +
                "   };\n" +
                "   for (var i in protoMethods) {\n" +
                "       clazz.prototype[i] = protoMethods[i];\n" +
                "   }\n" +
                "   return clazz;\n" +
                "};\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @param {{name: string, height: number}} options\n" +
                " */\n" +
                "var Person = function(options){};\n" +
                "Person = makeClass(/** @lends Person.prototype */ {\n" +
                "   /**\n" +
                "    * @this {Person}\n" +
                "    * @param {{name: string, height: number}} options\n" +
                "    */\n" +
                "   initialize: function(options) {\n" +
                "       /** @type {string} */ this.name_ = options.thisPropDoesNotExist;\n" +
                "   },\n" +
                "   /**\n" +
                "    * @param {string} message\n" +
                "    * @this {Person}\n" +
                "    */\n" +
                "   say: function(message) {\n" +
                "       window.console.log(this.name_ + ' says: ' + message);\n" +
                "   }\n" +
                "});\n" +
                "var joe = new Person({name: 'joe', height: 300});\n" +
                "joe.say('hi');";
        
        try {
            engine.eval(script); // Execute script using Nashorn
        } catch (ScriptException e) {
            fail("Script execution failed: " + e.getMessage());
        }
        
        // The test should flag the use of an undefined property `thisPropDoesNotExist`.
    }
}
