public void testUnboundedSolutionException() {
    int ENTITIES_COUNT = 15;

    // Creating random coefficient matrices Q and X
    double[] q = new double[ENTITIES_COUNT];
    double[][] Q = new double[2][ENTITIES_COUNT];
    double[][] X = new double[2][ENTITIES_COUNT];
    
    // Populate q, Q, X with random values for testing
    for (int i = 0; i < ENTITIES_COUNT; i++) {
        q[i] = Math.random();
        for (int j = 0; j < 2; j++) {
            Q[j][i] = Math.random();
            X[j][i] = Math.random();
        }
    }
    
    // Objective function: min(1*t + 0*L), which is equivalent to min(t)
    LinearObjectiveFunction objective = new LinearObjectiveFunction(
        new double[]{1}, 0);

    // Constraints setup
    Collection<LinearConstraint> constraints = new ArrayList<>();
    for (int r = 0; r < ENTITIES_COUNT; r++) {
        constraints.add(new LinearConstraint(new double[]{0}, Relationship.GEQ, q[r] - Q[0][r]));
        constraints.add(new LinearConstraint(new double[]{1}, Relationship.GEQ, X[0][r]));
    }

    // L >= 0; however, since L is not part of our objective function,
    // constraints are introduced as part of the problem setup
    constraints.add(new LinearConstraint(new double[]{0}, Relationship.GEQ, 0));

    // Create and solve the LP problem
    SimplexSolver solver = new SimplexSolver();
    
    try {
        PointValuePair solution = solver.optimize(objective, constraints, GoalType.MINIMIZE);
        System.out.println("Solution: t = " + solution.getPoint()[0]);
    } catch (UnboundedSolutionException e) {
        fail("UnboundedSolutionException was thrown incorrectly");
    }
}