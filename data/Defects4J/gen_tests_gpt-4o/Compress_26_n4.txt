
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.Test;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class IOUtilsTest {

    @Test
    public void testSkipWithCipherInputStream() throws Exception {
        // Create a simple cipher for testing purpose
        Cipher cipher = Cipher.getInstance("AES");
        SecretKey secretKey = KeyGenerator.getInstance("AES").generateKey();
        cipher.init(Cipher.ENCRYPT_MODE, secretKey);

        // Create some sample data and encrypt it
        byte[] inputData = "This is some test data, longer than usual buffer size to test skipping.".getBytes();
        ByteArrayInputStream bais = new ByteArrayInputStream(inputData);
        CipherInputStream cipherInputStream = new CipherInputStream(bais, cipher);

        // Now attempt to skip bytes using IOUtils.skip
        long bytesToSkip = 10;
        long skippedBytes = IOUtils.skip(cipherInputStream, bytesToSkip);

        // According to the bug, IOUtils.skip should skip the requested bytes unless EOF is reached
        assertEquals(bytesToSkip, skippedBytes, "IOUtils.skip() did not skip the correct number of bytes");

        // Optionally read to ensure we are at the right position
        cipherInputStream.close();
    }
    
    private static Cipher getAESCipher() throws NoSuchAlgorithmException {
        // Create and initialize a Cipher instance for test purposes
        SecretKey secretKey = KeyGenerator.getInstance("AES").generateKey();
        Cipher cipher = Cipher.getInstance("AES");
        return cipher;
    }
}
