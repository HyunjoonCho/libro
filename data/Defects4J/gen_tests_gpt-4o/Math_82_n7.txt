
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.RealPointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIssue() {
        // Define objective function: max 7a + 3b
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{7, 3, 0, 0}, 0);

        // Define constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.LEQ, 1));     // a <= 1
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.LEQ, 1));     // b <= 1
        constraints.add(new LinearConstraint(new double[]{3, 0, -5, 0}, Relationship.LEQ, 0));    // 3a - 5c <= 0
        constraints.add(new LinearConstraint(new double[]{2, 0, 0, -5}, Relationship.LEQ, 0));    // 2a - 5d <= 0
        constraints.add(new LinearConstraint(new double[]{0, 2, -5, 0}, Relationship.LEQ, 0));    // 2b - 5c <= 0
        constraints.add(new LinearConstraint(new double[]{0, 3, 0, -5}, Relationship.LEQ, 0));    // 3b - 5d <= 0
        constraints.add(new LinearConstraint(new double[]{3, 2, 0, 0}, Relationship.LEQ, 5));     // 3a + 2b <= 5
        constraints.add(new LinearConstraint(new double[]{2, 3, 0, 0}, Relationship.LEQ, 5));     // 2a + 3b <= 5

        // Create a SimplexSolver and solve the optimization problem
        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(objectiveFunction, constraints, GoalType.MAXIMIZE, true);

        // Expected results as mentioned in the bug report
        double expectedA = 1.0;
        double expectedB = 1.0;
        double expectedValue = 10.0;

        // Assert the results
        assertEquals(expectedA, solution.getPoint()[0], 1e-6);
        assertEquals(expectedB, solution.getPoint()[1], 1e-6);
        assertEquals(expectedValue, solution.getValue(), 1e-6);
    }
}
