
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIncorrectSolution() {
        // Objective function: maximize 3 * x + 2 * y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3, 2 }, 0);

        // Constraints:
        // x + y <= 10
        // x - y >= 1
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 10));
        constraints.add(new LinearConstraint(new double[] { 1, -1 }, Relationship.GEQ, 1));

        // Create an instance of SimplexSolver
        SimplexSolver solver = new SimplexSolver();

        // Optimize
        PointValuePair solution = solver.optimize(new OptimizationData[] {
            f,
            new org.apache.commons.math3.optim.nonlinear.scalar.GoalType(GoalType.MAXIMIZE),
            new NonNegativeConstraint(true),
            new org.apache.commons.math3.optim.linear.LinearConstraintSet(constraints)
        });

        // Expected solution (based on manual calculation or valid reference output)
        // Assuming the expected values for x and y are known.
        double expectedX = 5.5;
        double expectedY = 4.5;

        // Assert the solution
        assertEquals(expectedX, solution.getPoint()[0], 1e-5);
        assertEquals(expectedY, solution.getPoint()[1], 1e-5);
    }
}
