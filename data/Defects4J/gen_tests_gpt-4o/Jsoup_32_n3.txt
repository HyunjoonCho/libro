
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashSet;
import java.util.Set;

public class ElementCloneTest {

    class Element implements Cloneable {
        private Set<String> classNames;

        public Element() {
            this.classNames = new HashSet<>();
        }

        public void addClassName(String className) {
            classNames.add(className);
        }

        public Set<String> getClassNames() {
            return classNames;
        }

        @Override
        protected Object clone() throws CloneNotSupportedException {
            return super.clone(); // Incorrectly sharing the classNames instance
        }
    }

    @Test
    public void testCloneSharesClassNamesInstance() throws CloneNotSupportedException {
        Element original = new Element();
        original.addClassName("original-class");

        Element cloned = (Element) original.clone();
        cloned.addClassName("new-clone-class");

        // The failure: the cloned should have its own set, but it shares with the original
        assertEquals("Both original and cloned should have separate classNames instances",
                     1, original.getClassNames().size());

        assertTrue("Original should not contain 'new-clone-class'.",
                    !original.getClassNames().contains("new-clone-class"));
    }
}
