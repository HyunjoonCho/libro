
import static org.mockito.ArgumentMatchers.anyInt;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import org.junit.Test;

public class TypingIssueTest {

    interface SomeService {
        void someMethod(int a, Integer b);
        void someOther(int a, String b);
    }

    @Test
    public void testStringTypeMismatchPrinting() {
        // Create a mock of the SomeService interface
        SomeService mockService = mock(SomeService.class);

        // Invoke someOther with the wrong parameter types to trigger a verification error
        mockService.someOther(1, "2");

        try {
            // Verify with incorrectly typed matches to see how the failure message is printed
            verify(mockService).someOther(anyInt(), "(String) 2"); // This should fail
        } catch (AssertionError e) {
            // Print the error message to see how Mockito formats it
            System.out.println(e.getMessage());

            // Assert expected error message format to identify the bug
            // Expecting that the expected format would indicate the mismatch
            String expectedMessageSnippet = "someOther(1, \"(String) 2\")";
            assert e.getMessage().contains(expectedMessageSnippet) : "Error message was not formatted as expected";
        }
    }
}
