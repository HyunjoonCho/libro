
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.apache.commons.math3.optim.MaxEval;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerReturnsBestPoint() {
        // Define a simple quadratic function
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                return (x - 2) * (x - 2) + 1;  // Minimum value is 1, at x = 2
            }
        };

        // Instantiate BrentOptimizer with tolerance and maximum evaluations
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-9, 1e-14);
        
        // Define a search interval within which to find the optimum point
        SearchInterval interval = new SearchInterval(0.0, 4.0);

        // Optimize the function, aiming to minimize it
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(1000),
            new UnivariateObjectiveFunction(function),
            interval
        );

        // Extract the found point and value
        double foundPoint = result.getPoint();
        double foundValue = result.getValue();
        
        // Validate that the best found x-value is effectively close to 2.
        assertTrue("The optimizer did not find the best point.", Math.abs(foundPoint - 2.0) < 1e-7);
        // Validate that the function value at the found point is the minimum
        assertTrue("The optimizer did not find the minimum value.", Math.abs(foundValue - 1.0) < 1e-7);
    }
}
