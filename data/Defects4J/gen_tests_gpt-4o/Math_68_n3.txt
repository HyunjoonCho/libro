
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory;
import org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.util.Pair;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testConvergenceCheckerIsUsed() {
        // Create a simple least squares problem
        LeastSquaresProblem problem = LeastSquaresFactory.create(
            new LeastSquaresProblem.Evaluation() {
                @Override
                public RealMatrix getJacobian() {
                    return new Array2DRowRealMatrix(new double[][]{{1}});
                }

                @Override
                public RealVector getResiduals() {
                    return new ArrayRealVector(new double[] {1});
                }

                @Override
                public int getObservationSize() {
                    return 1;
                }

                @Override
                public int getParameterSize() {
                    return 1;
                }
            },
            new ArrayRealVector(new double[] {0}),
            new EvaluationRmsChecker(1e-5, 1e-5),
            1000, // maximum evaluations
            0 // no limit on runtime
        );

        // Create Levenberg-Marquardt optimizer with a simple convergence checker
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();

        // Run the optimizer
        LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problem);

        // Verify that the convergence checker was used (expecting convergence because our problem is trivial)
        // Although our evaluation might use an assertTrue like this to confirm the break condition.
        assertTrue(optimum.getIterations() < 1000);  // We are expecting it to converge much earlier.
    }
}
