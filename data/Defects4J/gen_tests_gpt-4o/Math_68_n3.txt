public void testLevenbergMarquardtOptimizerConvergenceChecker() {
    ConvergenceChecker<PointVectorValuePair> customChecker = new ConvergenceChecker<PointVectorValuePair>() {
        @Override
        public boolean converged(int iteration, PointVectorValuePair previous, PointVectorValuePair current) {
            return true; // Custom stopping criterion
        }
    };

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    optimizer.setConvergenceChecker(customChecker);

    // Dummy target and model to force the optimizer to run
    double[] target = { 0.0, 1.0 };
    double[] initialPoint = { 0.0, 0.0 };
    MultivariateVectorFunction model = new MultivariateVectorFunction() {
        @Override
        public double[] value(double[] point) {
            return new double[] { point[0], point[1] };
        }
    };

    try {
        PointVectorValuePair result = optimizer.optimize(100, model, target, initialPoint);
        fail("Expected optimization to stop immediately due to custom convergence checker");
    } catch (ConvergenceException e) {
        // Expected exception due to the custom convergence checker
    }
}