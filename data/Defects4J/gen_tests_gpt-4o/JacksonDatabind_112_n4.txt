
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;

// Custom immutable collection
class ImmutableStringCollection extends ArrayList<String> {
    public ImmutableStringCollection(Collection<? extends String> c) {
        super(c);
    }

    // Preventing modification
    @Override
    public boolean add(String s) {
        throw new UnsupportedOperationException("This collection is immutable");
    }

    @Override
    public boolean addAll(Collection<? extends String> c) {
        throw new UnsupportedOperationException("This collection is immutable");
    }
}

// Custom deserializer
class CustomStringCollectionDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<ImmutableStringCollection> {
    @Override
    public ImmutableStringCollection deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException, JsonProcessingException {
        java.util.List<String> list = p.readValueAs(java.util.List.class);
        return new ImmutableStringCollection(list);
    }
}

// Test object that uses the custom collection
class Container {
    @JsonDeserialize(using = CustomStringCollectionDeserializer.class)
    private ImmutableStringCollection strings;

    public ImmutableStringCollection getStrings() {
        return strings;
    }
}

public class CustomCollectionDeserializationTest {

    @Test(expected = JsonProcessingException.class)
    public void testCustomCollectionDeserialization() throws JsonProcessingException {
        String json = "{\"strings\": [\"one\", \"two\", \"three\"]}";

        ObjectMapper mapper = new ObjectMapper();

        // Attempt to deserialize the JSON into the Container object
        Container container = mapper.readValue(json, Container.class);

        // Verify that the collection was correctly deserialized as immutable
        assertEquals(3, container.getStrings().size());
        assertTrue(container.getStrings().contains("one"));
    }
}
