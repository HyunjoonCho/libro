
import static org.junit.Assert.assertTrue;

import org.jaxen.dom.DOMXPath;
import org.jaxen.jdom.JDOMXPath;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.Text;
import org.junit.Test;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

public class NodeTest {

    @Test
    public void testDOMNodePointer() throws Exception {
        // Create a simple DOM document
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        org.w3c.dom.Document doc = builder.newDocument();
        
        org.w3c.dom.Element root = doc.createElement("root");
        org.w3c.dom.Comment comment = doc.createComment("comment");
        org.w3c.dom.Text textNode = doc.createTextNode("text");
        
        root.appendChild(comment);
        root.appendChild(textNode);
        doc.appendChild(root);

        // XPath to select node()
        DOMXPath xpath = new DOMXPath("node()");
        
        // Evaluate on the document root
        Object result = xpath.evaluate(doc);
        
        // Ensure the result includes nodes other than just ELEMENT_NODE or DOCUMENT_NODE
        assertTrue("The node() should match non-element nodes like comments and text", ((java.util.List<?>) result).contains(comment) && ((java.util.List<?>) result).contains(textNode));
    }

    @Test
    public void testJDOMNodePointer() throws Exception {
        // Create a simple JDOM document
        Element root = new Element("root");
        Text textNode = new Text("text");
        org.jdom2.Comment comment = new org.jdom2.Comment("comment");

        root.addContent(comment);
        root.addContent(textNode);
        Document doc = new Document(root);

        // XPath to select node()
        JDOMXPath xpath = new JDOMXPath("node()");
        
        // Evaluate on the document root
        Object result = xpath.evaluate(doc);

        // Ensure the result includes nodes other than just Elements or Documents
        assertTrue("The node() should match non-element nodes like comments and text", ((java.util.List<?>) result).contains(comment) && ((java.util.List<?>) result).contains(textNode));
    }
}
