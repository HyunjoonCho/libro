
import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;

public class LevenbergMarquardtBugTest {

    @Test
    public void testLevenbergMarquardtInconsistency() {
        // Define a sample model function
        MultivariateVectorFunction modelFunction = new MultivariateVectorFunction() {
            @Override
            public double[] value(double[] point) {
                return new double[]{point[0] * point[0], Math.pow(point[0], 3)};
            }
        };

        // Observed data
        double[] observed = new double[]{1.0, 1.0};
        
        // Initial guess
        double[] start = {2.0};

        // Create the optimizer and problem
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
        LeastSquaresProblem problem = LeastSquaresFactory.create(
                JacobianModel.ofExplicit(modelFunction),
                new ArrayRealVector(observed, false),
                new ArrayRealVector(start, false),
                null,
                Integer.MAX_VALUE,
                Integer.MAX_VALUE);

        // Optimize and check results
        RealVector solution = optimizer.optimize(problem).getPoint();

        // Define what is expected
        double[] expected = {1.0}; // hypothetical correct solution

        // Verify if the solution contains the minimum point matching the expected
        assertArrayEquals(expected, solution.toArray(), 1e-6);
    }
}
