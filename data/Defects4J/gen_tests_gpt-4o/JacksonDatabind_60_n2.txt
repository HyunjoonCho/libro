
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

public class JsonFilterTest {

    private final ObjectMapper mapper;

    public JsonFilterTest() {
        this.mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();
    }

    @Test
    public void testPolymorphicTypeLostWithJsonValue() throws JsonProcessingException {
        CommandAPDU original = new CommandAPDU(new byte[]{1, 2, 3, 4});

        // Serialize the object
        String json = mapper.writeValueAsString(original);

        // Deserialize the object
        CommandAPDU deserialized = mapper.readValue(json, CommandAPDU.class);

        assertArrayEquals(original.getBytes(), deserialized.getBytes());
    }

    // Mock class replicating the issue
    public static class CommandAPDU {
        private byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
            this.apdu = apdu.clone();
        }

        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }
    }
}
