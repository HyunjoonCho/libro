
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.LinearOptimizer;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolver() {
        // Objective function: Maximize 7a + 3b + 0c + 0d
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[] {7, 3, 0, 0}, 0);

        // Constraints
        List<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] {1, 0, 0, 0}, Relationship.LEQ, 1)); // a <= 1
        constraints.add(new LinearConstraint(new double[] {0, 1, 0, 0}, Relationship.LEQ, 1)); // b <= 1
        constraints.add(new LinearConstraint(new double[] {3, 0, -5, 0}, Relationship.LEQ, 0)); // 3a - 5c <= 0
        constraints.add(new LinearConstraint(new double[] {2, 0, 0, -5}, Relationship.LEQ, 0)); // 2a - 5d <= 0
        constraints.add(new LinearConstraint(new double[] {0, 2, -5, 0}, Relationship.LEQ, 0)); // 2b - 5c <= 0
        constraints.add(new LinearConstraint(new double[] {0, 3, 0, -5}, Relationship.LEQ, 0)); // 3b - 5d <= 0
        constraints.add(new LinearConstraint(new double[] {3, 2, 0, 0}, Relationship.LEQ, 5));  // 3a + 2b <= 5
        constraints.add(new LinearConstraint(new double[] {2, 3, 0, 0}, Relationship.LEQ, 5));  // 2a + 3b <= 5

        // Create SimplexSolver and find the maximum value
        LinearOptimizer solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(
            new OptimizationData[] {
                objectiveFunction,
                new NonNegativeConstraint(true),
                GoalType.MAXIMIZE,
                constraints.toArray(new LinearConstraint[constraints.size()])
            }
        );

        // Extract the solution for variables a and b
        double a = solution.getPoint()[0];
        double b = solution.getPoint()[1];
        double optimalValue = solution.getValue();

        // Expected values
        double expectedA = 1.0;
        double expectedB = 1.0;
        double expectedValue = 10.0;

        assertEquals(expectedA, a, 1e-9);
        assertEquals(expectedB, b, 1e-9);
        assertEquals(expectedValue, optimalValue, 1e-9);
    }
}
