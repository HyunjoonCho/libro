
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;

import java.util.List;
import java.util.ArrayList;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.*;

// Example 1: Fake with trivial Logic
interface UserAccount {
    List<String> getEmails();
    void addEmail(String email);
    // ... other methods
}

abstract class FakeUserAccount implements UserAccount {
    private final List<String> emails = new ArrayList<>();

    @Override
    public void addEmail(String email) {
        emails.add(email);
    }

    @Override
    public List<String> getEmails() {
        return new ArrayList<>(emails);
    }
}

// Example 2: Callback-style API
interface AccountService {
    void getAccount(String id, AsyncCallback<UserAccount> callback);
}

interface AsyncCallback<T> {
    void onSuccess(T result);
    void onFailure(Throwable t);
}

abstract class MockAccountService implements AccountService {
    @Override
    public void getAccount(String id, AsyncCallback<UserAccount> callback) {
        callback.onSuccess(getAccount(id));
    }
    
    abstract UserAccount getAccount(String id);
}

// Example 3: Uninteresting parameters
interface AccountRpcService {
    FutureAccount getAccount(RpcContext context, String id);
}

interface FutureAccount {} // Placeholder for the example

class RpcContext {} // Placeholder for the example

abstract class MockAccountRpcService implements AccountRpcService {
    @Override
    public FutureAccount getAccount(RpcContext context, String id) {
        assertNotNull(context);
        return getAccount(id);
    }
    
    abstract FutureAccount getAccount(String id);
}

public class MockitoAbstractClassTest {

    @Test
    public void testFakeUserAccount() {
        FakeUserAccount account = Mockito.mock(FakeUserAccount.class, Mockito.CALLS_REAL_METHODS);
        
        account.addEmail("test@example.com");
        account.addEmail("hello@example.com");
        
        assertEquals(2, account.getEmails().size());
        assertEquals("test@example.com", account.getEmails().get(0));
    }

    @Test
    public void testMockAccountService() {
        MockAccountService service = Mockito.mock(MockAccountService.class, Mockito.CALLS_REAL_METHODS);
        UserAccount mockAccount = new FakeUserAccount() {};
        when(service.getAccount("testId")).thenReturn(mockAccount);
        
        AsyncCallback<UserAccount> callback = Mockito.mock(AsyncCallback.class);
        service.getAccount("testId", callback);
        
        ArgumentCaptor<UserAccount> userAccountCaptor = ArgumentCaptor.forClass(UserAccount.class);
        verify(callback).onSuccess(userAccountCaptor.capture());
        assertNotNull(userAccountCaptor.getValue());
    }
    
    @Test
    public void testMockAccountRpcService() {
        MockAccountRpcService service = Mockito.mock(MockAccountRpcService.class, Mockito.CALLS_REAL_METHODS);
        FutureAccount mockFutureAccount = mock(FutureAccount.class);
        
        when(service.getAccount("testId")).thenReturn(mockFutureAccount);
        
        RpcContext context = new RpcContext();
        FutureAccount result = service.getAccount(context, "testId");
        
        assertNotNull(result);
        verify(service).getAccount(eq(context), eq("testId"));
    }
}
