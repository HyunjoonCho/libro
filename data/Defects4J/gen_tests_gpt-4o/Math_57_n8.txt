
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.Cluster;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertFalse;

public class KMeansPlusPlusClustererTest {

    @Test
    public void testTruncationIssue() {
        // Define a list of points very close to each other, ensuring distances < 1
        List<Clusterable> smallDistancePoints = new ArrayList<>();
        smallDistancePoints.add(new DoublePoint(new double[]{0.01, 0.01}));
        smallDistancePoints.add(new DoublePoint(new double[]{0.02, 0.01}));
        smallDistancePoints.add(new DoublePoint(new double[]{0.01, 0.02}));
        smallDistancePoints.add(new DoublePoint(new double[]{0.02, 0.02}));

        // Initialize the KMeansPlusPlusClusterer with 2 clusters
        KMeansPlusPlusClusterer<DoublePoint> clusterer = new KMeansPlusPlusClusterer<>(2);

        // Perform clustering
        List<Cluster<DoublePoint>> clusters = clusterer.cluster(smallDistancePoints);

        // Check if any cluster is empty or not
        boolean hasEmptyCluster = clusters.stream().anyMatch(cluster -> cluster.getPoints().isEmpty());

        // This will fail if truncation caused an empty cluster
        assertFalse("There should not be any empty clusters due to truncation", hasEmptyCluster);
    }
}
