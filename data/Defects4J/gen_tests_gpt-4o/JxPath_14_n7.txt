
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

public class XPathFunctionsTest {
    
    @Test
    public void testRoundingFunctionsForSpecialValues() throws XPathExpressionException {
        XPath xPath = XPathFactory.newInstance().newXPath();
        
        // Test floor function
        assertXPathValue(xPath, "floor('NaN')", Double.NaN);
        assertXPathValue(xPath, "floor(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(xPath, "floor(2 div 0)", Double.POSITIVE_INFINITY);

        // Test ceiling function
        assertXPathValue(xPath, "ceiling('NaN')", Double.NaN);
        assertXPathValue(xPath, "ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(xPath, "ceiling(2 div 0)", Double.POSITIVE_INFINITY);
        
        // Test round function
        assertXPathValue(xPath, "round('NaN')", Double.NaN);
        assertXPathValue(xPath, "round(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(xPath, "round(2 div 0)", Double.POSITIVE_INFINITY);
    }

    private void assertXPathValue(XPath xPath, String expression, double expected) throws XPathExpressionException {
        Double result = (Double) xPath.evaluate(expression, null, XPathConstants.NUMBER);
        if (Double.isNaN(expected)) {
            assertEquals(Double.isNaN(result), true);
        } else {
            assertEquals(expected, result, 0.0);
        }
    }
}
