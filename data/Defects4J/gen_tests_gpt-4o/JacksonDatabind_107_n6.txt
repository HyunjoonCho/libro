
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.io.IOException;

public class HandleUnknownTypeIdTest {

    public static class CustomType {
        public String name;
    }

    @Test(expected = NullPointerException.class)
    public void testDeserializationWithDeserializationProblemHandler() throws IOException {
        String jsonString = "{ \"@type\":\"unknownType\", \"name\":\"test\" }";

        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);
        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId,
                                                TypeIdResolver idResolver, String failureMsg) throws IOException {
                // Returning Void.class to simulate the problematic behavior
                return TypeFactory.defaultInstance().constructSimpleType(Void.class, null);
            }
        });

        mapper.readValue(jsonString, CustomType.class);
    }
}
