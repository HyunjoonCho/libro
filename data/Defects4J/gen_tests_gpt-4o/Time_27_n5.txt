
import org.joda.time.Period;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.ISOPeriodFormat;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class PeriodFormatterTest {

    @Test
    public void testIssue64() {
        // Create period formatter using ISOPeriodFormat.standard()
        PeriodFormatter inputFormatter = ISOPeriodFormat.standard();

        // Parse a period string using the formatter
        Period inputPeriod = inputFormatter.parsePeriod("P2Y3M6W4DT12H30M5S");

        // Create period formatter using explicit PeriodFormatterBuilder
        PeriodFormatterBuilder builder = new PeriodFormatterBuilder()
                .appendLiteral("P")
                .appendYears().appendSuffix("Y")
                .appendMonths().appendSuffix("M")
                .appendWeeks().appendSuffix("W")
                .appendDays().appendSuffix("D")
                .appendSeparatorIfFieldsAfter("T")
                .appendHours().appendSuffix("H")
                .appendMinutes().appendSuffix("M")
                .appendSecondsWithOptionalMillis().appendSuffix("S");

        PeriodFormatter customFormatter = builder.toFormatter();

        // Format the period back to string using both formatters
        String formattedWithStandard = inputFormatter.print(inputPeriod);
        String formattedWithBuilder = customFormatter.print(inputPeriod);

        // Compare the results
        assertEquals("Expected both formatters to produce the same output", formattedWithStandard, formattedWithBuilder);
    }
}
