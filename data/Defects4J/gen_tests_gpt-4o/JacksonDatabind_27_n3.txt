
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import org.junit.Test;
import static org.junit.Assert.*;

public class ExternalTypeIdDeserializationTest {

    // Custom type resolver to manage External Type Id
    public static class CustomTypeResolver extends com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase {

        @Override
        public String idFromValue(Object value) {
            if (value instanceof SubType) {
                return "subtype";
            }
            return null;
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public JavaType typeFromId(DatabindContext context, String id) {
            if ("subtype".equals(id)) {
                return context.constructType(SubType.class);
            }
            return null;
        }

        @Override
        public Id getMechanism() {
            return Id.CUSTOM;
        }
    }

    @JsonTypeInfo(use = Id.CUSTOM, include = As.EXTERNAL_PROPERTY, property = "type")
    @JsonTypeIdResolver(CustomTypeResolver.class)
    public static class BaseType {
        public String name;
    }

    @JsonTypeName("subtype")
    public static class SubType extends BaseType {
        public int value;
    }

    @Test
    public void testExternalTypeIdDeserialization() throws JsonProcessingException {
        String json = "{\"type\":\"subtype\",\"subtype\":{\"name\":\"Test Name\", \"value\":42}}";

        ObjectMapper mapper = new ObjectMapper();
        BaseType result = mapper.readValue(json, BaseType.class);

        assertTrue(result instanceof SubType);
        SubType subTypeResult = (SubType) result;

        assertEquals("Test Name", subTypeResult.name);
        assertEquals(42, subTypeResult.value);
    }
}
