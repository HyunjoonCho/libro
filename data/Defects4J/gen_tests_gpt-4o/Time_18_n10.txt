
import org.joda.time.DateTime;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.Test;

public class GJChronologyTest {

    @Test
    public void testJulianChronologyValidDate() {
        // This should be a valid date in the Julian calendar
        DateTime jdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, JulianChronology.getInstanceUTC());
        assert jdt.getYear() == 1500;
        assert jdt.getMonthOfYear() == 2;
        assert jdt.getDayOfMonth() == 29;
    }

    @Test
    public void testGJChronologyInvalidDate() {
        // This should be a valid date given the Gregorian-Julian cutover rules
        try {
            DateTime gjdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, GJChronology.getInstanceUTC());
            fail("Expected IllegalFieldValueException was not thrown for GJChronology.");
        } catch (org.joda.time.IllegalFieldValueException e) {
            assertEquals("Value 29 for dayOfMonth must be in the range [1,28]", e.getMessage());
        }
    }
}
