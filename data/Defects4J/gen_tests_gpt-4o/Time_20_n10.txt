
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Test;

import java.util.Set;

import static org.junit.Assert.assertEquals;

public class JodaDateTimeZoneTesterTest {

    private static DateTimeFormatter formatter = DateTimeFormat.forPattern("MM/dd/yyyy HH:mm:ss.SSS ZZZ");

    @Test
    public void testTimeZoneFormatting() {
        Set<String> timeZones = DateTimeZone.getAvailableIDs();

        int numTimeZonesTested = 0;
        int numTimeZonesFailed = 0;
        int numTimeZonesException = 0;

        for (String timeZone : timeZones) {
            numTimeZonesTested++;
            try {
                DateTime dateTime = DateTime.now().withZone(DateTimeZone.forID(timeZone));
                String formatted = formatter.print(dateTime);
                DateTime parsedDateTime = formatter.parseDateTime(formatted);

                String originalZoneId = dateTime.getZone().getID();
                String parsedZoneId = parsedDateTime.getZone().getID();

                // Assert if the time zones match after conversion and parsing
                assertEquals("Time zone mismatch for time zone ID: " + originalZoneId, originalZoneId, parsedZoneId);

            } catch (IllegalArgumentException iae) {
                numTimeZonesException++;
                System.out.println("Formatter threw exception for time zone id: " + timeZone);
            } catch (AssertionError e) {
                numTimeZonesFailed++;
                System.out.println(e.getMessage());
            }
        }

        System.out.println();
        System.out.println("Number of Time Zones tested: " + numTimeZonesTested);
        System.out.println("Number failed: " + numTimeZonesFailed);
        System.out.println("Number exceptions: " + numTimeZonesException);
        System.out.println();
        
        // Optionally, check that the number of failed and exception cases match the bug report
        assertEquals(130, numTimeZonesFailed);
        assertEquals(30, numTimeZonesException);
    }
}
