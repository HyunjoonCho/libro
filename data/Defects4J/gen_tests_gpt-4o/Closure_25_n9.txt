script
/**
 * This function is defined to simulate the testing case
 */
// Function definition without constructor
/**
 * @param {{prop1: string, prop2: (number|undefined)}} parry
 */
function callz(parry) {
    if (parry.prop2 && parry.prop2 < 5) alert('alright!');
    alert(parry.prop1);
}

// Test case using normal function call
// This should compile without any type checking error under advanced optimizations
callz({ prop1: 'hi' });

/**
 * Constructor function to produce the error
 */
// Constructor definition
/**
 * @param {{prop1: string, prop2: (number|undefined)}} parry
 * @constructor
 */
function CallzConstructor(parry) {
    if (parry.prop2 && parry.prop2 < 5) alert('alright!');
    alert(parry.prop1);
}

// Test case using constructor
// This reproduces the type error, as the parameter lacks 'prop2'
new CallzConstructor({ prop1: 'hi' });
