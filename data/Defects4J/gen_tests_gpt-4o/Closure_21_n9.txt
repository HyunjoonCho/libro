
import java.util.ArrayList;
import java.util.List;

public class BugReportTest {

    public static void main(String[] args) {
        testCommaExpressionTransformation();
    }

    public static void testCommaExpressionTransformation() {
        List<String> warnings = new ArrayList<>();

        // Test case 1: foo((1, 2, 42))
        int result1 = evaluateCommaExpression(false, warnings, 1, 2, 42);
        assert result1 == 42 : "Test Case 1 Failed: Expected 42";
        assert warnings.size() == 1 : "Test Case 1 Failed: Expected 1 warning";
        
        // Test case 2: foo((bar(), 2, 42)) 
        // Simulate bar() having side-effects
        boolean hasSideEffects = true;
        int result2 = evaluateCommaExpression(hasSideEffects, warnings, 2, 42);
        assert result2 == 42 : "Test Case 2 Failed: Expected 42";
        assert warnings.size() == 1 : "Test Case 2 Failed: Expected 1 warning";

        // Test case 3: foo(((1, 2, 3), (4, 5, 42)))
        int result3 = evaluateCommaExpression(false, warnings, 1, 2, 3, 4, 5, 42);
        assert result3 == 42 : "Test Case 3 Failed: Expected 42";
        assert warnings.size() == 2 : "Test Case 3 Failed: Expected 2 warnings";

        System.out.println("All test cases passed.");
    }

    private static int evaluateCommaExpression(
            boolean hasSideEffects, List<String> warnings, int... values) {

        // Emulate checking all except rightmost values for side effects:
        for (int i = 0; i < values.length - 1; i++) {
            if (!hasSideEffects) {
                warnings.add("Warning: Non-rightmost expression " + values[i] + " is free of side effects.");
            }
        }
        // Return the last value as the result of the comma expression
        return values[values.length - 1];
    }
}
