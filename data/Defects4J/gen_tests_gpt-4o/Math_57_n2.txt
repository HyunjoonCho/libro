
import org.apache.commons.math3.ml.clustering.CentroidCluster;
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class KMeansPlusPlusClustererTest {

    @Test
    public void testTruncationIssueInChooseInitialClusters() {
        // Create data points which have decimal distances between them
        List<Clusterable> points = new ArrayList<>();
        points.add(new DoublePoint(new double[]{0.1, 0.1}));
        points.add(new DoublePoint(new double[]{0.2, 0.2}));
        points.add(new DoublePoint(new double[]{0.3, 0.3}));

        // Initialize KMeansPlusPlusClusterer
        KMeansPlusPlusClusterer<Clusterable> clusterer = new KMeansPlusPlusClusterer<>(2);

        // Run choosing initial clusters, which uses the distance sum
        List<CentroidCluster<Clusterable>> clusters = clusterer.cluster(points);

        // As this is a reproduction case, we don't assert a specific behavior
        // Instead, focus on whether initial cluster choice ends up with empty clusters
        boolean hasEmptyClusters = clusters.stream().anyMatch(cluster -> cluster.getPoints().isEmpty());

        // Assert that there are no empty clusters, which may indicate truncation issue
        assertTrue("The algorithm should not produce any empty clusters.", !hasEmptyClusters);
    }
}
