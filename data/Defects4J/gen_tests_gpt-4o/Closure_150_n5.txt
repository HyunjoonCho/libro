
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import java.util.List;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class TypeCheckerTest {

    @Test
    public void testTypeCheckerWarnings() {
        String codeWithWarning = "var ns = {};\n" +
                "/** @param {string=} b */\n" +
                "ns.a = function(b) {}\n" +
                "function d() {\n" +
                " ns.a();\n" +
                " ns.a(123);\n" +
                "}";

        String codeWithoutWarningInsideFunction = "var ns = {};\n" +
                "(function() {\n" +
                " /** @param {string=} b */\n" +
                " ns.a = function(b) {}\n" +
                "})();\n" +
                "function d() {\n" +
                " ns.a();\n" +
                " ns.a(123);\n" +
                "}";

        String codeWithoutWarningOutsideFunction = "var ns = {};\n" +
                "(function() {\n" +
                " /** @param {string=} b */\n" +
                " ns.a = function(b) {}\n" +
                "})();\n" +
                "ns.a();\n" +
                "ns.a(123);";

        // Expecting 1 warning for the first snippet
        assertTrue(hasTypeWarnings(codeWithWarning, 1));

        // Type is wrongly ignored, expecting 1 warning but the incorrect one
        assertTrue(hasTypeWarnings(codeWithoutWarningInsideFunction, 1));

        // No warnings when type annotation is ignored and calls are outside any function
        assertTrue(hasTypeWarnings(codeWithoutWarningOutsideFunction, 0));
    }

    private boolean hasTypeWarnings(String code, int expectedWarningCount) {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.VERBOSE);
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", code);

        Result result = compiler.compile(extern, input, options);
        List<JSError> warnings = result.warnings;

        return warnings.size() == expectedWarningCount;
    }
}
