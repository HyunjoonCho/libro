
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import static org.junit.Assert.*;
import org.junit.Test;

public class DefaultPrettyPrinterTest {

    @Test
    public void testCreateInstanceWithSubclass() {
        class MyPrettyPrinter extends DefaultPrettyPrinter {
            // Intentionally do not override createInstance()
        }

        MyPrettyPrinter customPrinter = new MyPrettyPrinter();
        DefaultPrettyPrinter newInstance = (DefaultPrettyPrinter) customPrinter.createInstance();

        // The expected behavior might depend on the exact specifics of how
        // createInstance is intended to work in subclasses, but since
        // base behavior suggests this should fail, we'll check the type.
        // This should ideally be a clear indication that subclassing requires
        // createInstance to be overridden.

        // Check that while an instance is created, it's of the parent type due to default implementation.
        assertEquals("Instance should be of type DefaultPrettyPrinter, not subclass", 
                     DefaultPrettyPrinter.class, newInstance.getClass());
    }
}
