
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.PointValuePair;

import java.util.ArrayList;
import java.util.Collection;
import org.junit.Test;
import static org.junit.Assert.*;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverBug() {
        // Define the objective function: 7a + 3b + 0c + 0d
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{7, 3, 0, 0}, 0);

        // Create the constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.LEQ, 1));  // a <= 1
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.LEQ, 1));  // b <= 1
        constraints.add(new LinearConstraint(new double[]{3, 0, -5, 0}, Relationship.LEQ, 0)); // 3a - 5c <= 0
        constraints.add(new LinearConstraint(new double[]{2, 0, 0, -5}, Relationship.LEQ, 0)); // 2a - 5d <= 0
        constraints.add(new LinearConstraint(new double[]{0, 2, -5, 0}, Relationship.LEQ, 0)); // 2b - 5c <= 0
        constraints.add(new LinearConstraint(new double[]{0, 3, 0, -5}, Relationship.LEQ, 0)); // 3b - 5d <= 0
        constraints.add(new LinearConstraint(new double[]{3, 2, 0, 0}, Relationship.LEQ, 5));  // 3a + 2b <= 5
        constraints.add(new LinearConstraint(new double[]{2, 3, 0, 0}, Relationship.LEQ, 5));  // 2a + 3b <= 5

        // Solve the problem
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(objectiveFunction, constraints, GoalType.MAXIMIZE, true);

        // Extract solution
        double a = solution.getPoint()[0];
        double b = solution.getPoint()[1];
        double val = solution.getValue();

        // Ensure the solution matches expected optimal values
        assertEquals(1.0, a, 1e-6);
        assertEquals(1.0, b, 1e-6);
        assertEquals(10.0, val, 1e-6);
    }
}
