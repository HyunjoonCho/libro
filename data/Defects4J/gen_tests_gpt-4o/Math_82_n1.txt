
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.PointValuePair;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertArrayEquals;
import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIssue() {
        // Objective function: max(7 * a + 3 * b)
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[] { 7, 3, 0, 0 }, 0);

        // Constraints
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0 }, Relationship.LEQ, 1)); // a <= 1
        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 0 }, Relationship.LEQ, 1)); // b <= 1
        constraints.add(new LinearConstraint(new double[] { 3, 0, -5, 0 }, Relationship.LEQ, 0)); // 3a - 5c <= 0
        constraints.add(new LinearConstraint(new double[] { 2, 0, 0, -5 }, Relationship.LEQ, 0)); // 2a - 5d <= 0
        constraints.add(new LinearConstraint(new double[] { 0, 2, -5, 0 }, Relationship.LEQ, 0)); // 2b - 5c <= 0
        constraints.add(new LinearConstraint(new double[] { 0, 3, 0, -5 }, Relationship.LEQ, 0)); // 3b - 5d <= 0
        constraints.add(new LinearConstraint(new double[] { 3, 2, 0, 0 }, Relationship.LEQ, 5));  // 3a + 2b <= 5
        constraints.add(new LinearConstraint(new double[] { 2, 3, 0, 0 }, Relationship.LEQ, 5));  // 2a + 3b <= 5

        // Create simplex solver and perform optimization
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(objectiveFunction, constraints, GoalType.MAXIMIZE, true);

        // Extract the values of a and b
        double[] point = solution.getPoint();
        double objectiveValue = solution.getValue();

        // Assertions for expected outcome
        assertArrayEquals(new double[] { 1.0, 1.0 }, new double[] { point[0], point[1] }, 1e-6);
        assertEquals(10.0, objectiveValue, 1e-6);
    }
}
