
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import org.junit.jupiter.api.Test;

import java.util.Base64;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class TreeTraversingParserTest {

    @Test
    public void testBase64VariantHandling() throws Exception {
        // Sample Base64-encoded data
        byte[] originalData = "Hello, World!".getBytes();

        // Custom Base64 variant (url-safe, no padding)
        Base64Variant customVariant = new Base64Variant("Custom", 
                                                        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
                                                        false, 
                                                        Base64Variant.BASE64_VALUE_PADDING_CHAR, 
                                                        76);

        // Encode using custom Base64 variant
        String base64Encoded = Base64.getUrlEncoder().withoutPadding().encodeToString(originalData);

        // Create JSON node with the encoded base64 string
        ObjectMapper mapper = new ObjectMapper();
        JsonNode base64Node = mapper.readTree("\"" + base64Encoded + "\"");

        // Use TreeTraversingParser and specify the custom Base64 variant
        try (JsonParser parser = new TreeTraversingParser(base64Node)) {
            parser.setCodec(mapper);
            parser.nextToken(); // Advance to the JSON token

            // Read binary value using custom Base64 variant
            byte[] decodedData = parser.getBinaryValue(customVariant);

            // Assert that the original data and decoded data are the same
            assertArrayEquals(originalData, decodedData, "Decoded data should match original data");
        }
    }
}
