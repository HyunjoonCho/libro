
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class CompilerErrorTest {

    @Test
    public void testGoogProvideWithNonString() {
        // Setup Compiler and options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Source code with incorrect goog.provide usage
        String code = "goog.provide(mine.Spike);";

        // Create an input with the provided code
        SourceFile input = SourceFile.fromCode("file.js", code);
        SourceFile extern = SourceFile.fromCode("externs.js", "var goog = {}; goog.provide = function(x) {};");

        // Compile the input code
        compiler.compile(extern, input, options);

        // Check for errors, especially looking for the internal compiler error message
        boolean hasErrors = compiler.getErrorCount() > 0;
        assertTrue("Expected compilation error due to non-string goog.provide", hasErrors);

        // Optional: Assert specific error
        for (JSError error : compiler.getErrors()) {
            if (error.getDescription().contains("is not a string node")) {
                assertTrue("Error contains the expected INTERNAL COMPILER ERROR message", true);
                return;
            }
        }

        // Fail the test if no expected error was found
        assertTrue("Expected to find a specific error about non-string node", false);
    }
}
