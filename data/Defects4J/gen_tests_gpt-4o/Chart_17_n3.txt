
import static org.junit.Assert.*;

import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.Year;
import org.junit.Test;

public class TimeSeriesCloneTest {

    @Test
    public void testCloneEmptyTimeSeries() {
        try {
            // Create an empty TimeSeries object
            TimeSeries original = new TimeSeries("Test Series");

            // Attempt to clone the empty TimeSeries
            TimeSeries cloned = (TimeSeries) original.clone();

            // Assert that the clone was successful and no exception was thrown
            assertNotNull(cloned);
            assertEquals(original.getItemCount(), cloned.getItemCount());
        } catch (IllegalArgumentException e) {
            fail("Cloning an empty TimeSeries threw an IllegalArgumentException: " + e.getMessage());
        }
    }

    @Test
    public void testCloneNonEmptyTimeSeries() {
        try {
            // Create a TimeSeries object with one item
            TimeSeries original = new TimeSeries("Test Series");
            original.add(new Year(2023), 100);

            // Attempt to clone the non-empty TimeSeries
            TimeSeries cloned = (TimeSeries) original.clone();

            // Check that clone is not null and is equal to the original
            assertNotNull(cloned);
            assertEquals(original.getItemCount(), cloned.getItemCount());
            assertEquals(original.getValue(new Year(2023)), cloned.getValue(new Year(2023)));
        } catch (Exception e) {
            fail("Cloning a non-empty TimeSeries caused an unexpected exception: " + e.getMessage());
        }
    }
}
