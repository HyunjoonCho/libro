
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexSolver;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertTrue;

public class SimplexSolverTest {

    @Test
    public void testRestrictNonNegativeFlag() {
        // Linear objective function: 1*x + 1*y + 0
        LinearObjectiveFunction function = new LinearObjectiveFunction(new double[]{1, 1}, 0);

        // Constraints: 1*x + 0*y = 1
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0}, Relationship.EQ, 1));

        // Use SimplexSolver to minimize the function with non-negative restriction
        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(function, constraints, GoalType.MINIMIZE, true);

        // Obtain the x and y results from the solution
        double x = solution.getPoint()[0];
        double y = solution.getPoint()[1];

        // Assert that both x and y are non-negative, as the restrictToNonNegative flag is true
        assertTrue("x should be non-negative", x >= 0);
        assertTrue("y should be non-negative", y >= 0);
    }
}
