public void testWideBoundsCMAESOptimizer() {
    CMAESOptimizer optimizer = new CMAESOptimizer(1000, 1e-9, true, 0, 0, RandomUtils.getRandom(), false, null);
    FitnessFunction fitnessFunction = new FitnessFunction() {
        @Override
        public double value(double[] point) {
            for (double param : point) {
                if (Double.isNaN(param)) {
                    fail("NaN parameter passed to fitness function");
                }
            }
            return 0; // Dummy implementation
        }
    };
    
    double[] startPoint = new double[] {0, 0};
    double[] lowerBounds = new double[] {-Double.MAX_VALUE, -Double.MAX_VALUE};
    double[] upperBounds = new double[] {Double.MAX_VALUE, Double.MAX_VALUE};

    optimizer.optimize(1000, fitnessFunction, new SimpleBounds(lowerBounds, upperBounds), GoalType.MINIMIZE, startPoint);
}