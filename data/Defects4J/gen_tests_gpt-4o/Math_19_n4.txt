
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class CMAESOptimizerTest {

    @Test
    public void testLargeBoundsCausingNaN() {
        // Define the fitness function
        CMAESOptimizer.FitnessFunction fitnessFunction = new CMAESOptimizer.FitnessFunction() {
            @Override
            public double value(double[] point) {
                for (double p : point) {
                    // Check if any of the parameters is NaN
                    assertFalse("Parameter is NaN", Double.isNaN(p));
                }
                // Simple sum of squares as objective
                double sum = 0;
                for (double p : point) {
                    sum += p * p;
                }
                return sum;
            }
        };

        // Define large bounds
        double[] lowerBounds = new double[]{-Double.MAX_VALUE};
        double[] upperBounds = new double[]{Double.MAX_VALUE};

        // Use the MultivariateFunctionMappingAdapter to manage the bounds
        MultivariateFunctionMappingAdapter mappingFunction =
                new MultivariateFunctionMappingAdapter(fitnessFunction, lowerBounds, upperBounds);

        // Set optimizer parameters
        CMAESOptimizer optimizer = new CMAESOptimizer(10000, 1e-5, true, 0, 0, null, false, null);
        
        try {
            // Optimize
            PointValuePair result = optimizer.optimize(
                    new CMAESOptimizer.SimpleBounds(lowerBounds, upperBounds), // Use bounding constraints
                    CMAESOptimizer.GoalType.MINIMIZE,
                    mappingFunction,
                    new double[]{0.1}, // Initial guess
                    0 // Initial sigma value
            );
        } catch (Exception e) {
            // Fail the test if there's an exception
            assertFalse("The optimizer threw an exception: " + e.getMessage(), true);
        }
    }
}
