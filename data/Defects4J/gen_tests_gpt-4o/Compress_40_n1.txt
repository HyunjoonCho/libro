
import org.apache.commons.compress.utils.BitInputStream;
import org.junit.Test;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.ByteOrder;

import static org.junit.Assert.assertEquals;

public class BitInputStreamTest {

    @Test
    public void testOverflowInReadBits() {
        byte[] data = new byte[]{87, 45, 66, 15, 90, 29, 88, 61, 33, 74};
        ByteArrayInputStream in = new ByteArrayInputStream(data);
        BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);

        try {
            long result1 = bin.readBits(5);
            long result2 = bin.readBits(63); // This read is expected to cause an overflow.
            long result3 = bin.readBits(12);

            // Check that the values are what we expect: 
            // Note: Since this demonstrates a bug, the expected values have not been defined as the bug results in incorrect outputs.
            System.out.println("Result 1: " + result1);
            System.out.println("Result 2: " + result2);
            System.out.println("Result 3: " + result3);

            // Optionally, you can use assertions to check expected incorrect behavior
            // assertEquals(expectedWrongResult2, result2);
            // assertEquals(expectedWrongResult3, result3);
            
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
