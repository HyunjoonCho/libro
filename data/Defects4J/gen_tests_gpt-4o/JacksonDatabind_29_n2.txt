
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

public class PolymorphicDeserializationTest {

    @JsonTypeInfo(use = Id.CUSTOM, include = As.EXTERNAL_PROPERTY, property = "type")
    @JsonTypeIdResolver(MyTypeIdResolver.class)
    public static abstract class Base {
        public String name;
    }

    public static class SubTypeA extends Base {
        public int valueA;
    }

    public static class SubTypeB extends Base {
        public String valueB;
    }

    public static class MyTypeIdResolver extends TypeIdResolverBase {
        @Override
        public String idFromValue(Object value) {
            if (value instanceof SubTypeA) {
                return "A";
            } else if (value instanceof SubTypeB) {
                return "B";
            }
            return null;
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public Id getMechanism() {
            return Id.CUSTOM;
        }
    }

    @Test
    public void testDeserializationWithNullTypeId() throws Exception {
        String json = "{\"name\":\"test\",\"valueA\":42}";

        ObjectMapper mapper = new ObjectMapper();

        // Ensure polymorphic type validation is set up correctly
        PolymorphicTypeValidator ptv = LaissezFaireSubTypeValidator.instance;
        mapper.activateDefaultTyping(ptv, ObjectMapper.DefaultTyping.NON_FINAL, As.PROPERTY);

        // This will throw an InvalidTypeIdException due to the missing type id
        assertThrows(InvalidTypeIdException.class, () -> {
            mapper.readValue(json, Base.class);
        });
    }
}
