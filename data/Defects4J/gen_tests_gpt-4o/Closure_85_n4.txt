
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class CompilerCrashTest {

    @Test
    public void testSwitchStatementCrash() {
        // The JavaScript code that is causing the crash
        String jsCode = "function a(b) {" +
                        " switch (b.v) {" +
                        " case 'SWITCH':" +
                        " if (b.i >= 0) {" +
                        " return b.o;" +
                        " } else {" +
                        " return undefined;" +
                        " }" +
                        " break;" +
                        " }" +
                        "}";

        // Create a Compiler instance
        Compiler compiler = new Compiler();

        // Set compiler options
        CompilerOptions options = new CompilerOptions();
        // You can specify additional compiler options here if needed

        // Compile the JavaScript code
        JSSourceFile input = JSSourceFile.fromCode("test.js", jsCode);
        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");

        Result result = compiler.compile(extern, input, options);

        // Check if an error message contains "INTERNAL COMPILER ERROR"
        assertNotNull("The compilation did not produce a valid result.", result);
        assertTrue("Ensure the compiler did not throw an 'INTERNAL COMPILER ERROR'.", 
                    !compiler.hasErrors());

        if (compiler.hasErrors()) {
            String errors = compiler.getErrors().toString();
            assertTrue("The compiled result should not contain 'INTERNAL COMPILER ERROR'.",
                       !errors.contains("INTERNAL COMPILER ERROR"));
            System.out.println(errors);
        }
    }
}
