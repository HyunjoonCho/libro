
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.*;

public class ArchiveDetectionTest {

    @Test
    public void testShortTextFileNotDetectedAsTarArchive() {
        // This is a short text content less than 100 bytes
        String shortText = "This is a sample text file. It is less than 100 bytes long.";

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(shortText.getBytes(StandardCharsets.UTF_8));

        try {
            ArchiveInputStream archiveInputStream = new ArchiveStreamFactory()
                    .createArchiveInputStream(byteArrayInputStream);

            // If no exception is thrown, we need to check the type of archive stream created
            assertFalse("The short text file should not be detected as a TAR archive.",
                    archiveInputStream instanceof TarArchiveInputStream);

        } catch (Exception e) {
            // If an exception is thrown, it could mean it correctly identified that this isn't an archive file
            // depending on the implementation details of ArchiveStreamFactory for non-archive content.
            // We might want to catch no exception if it handles non-archives quietly.
            fail("An exception should not be thrown when handling a short text file: " + e.getMessage());
        }
    }
}
