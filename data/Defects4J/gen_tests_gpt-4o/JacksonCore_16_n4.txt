
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.io.IOException;

public class JsonParserSequenceTest {

    @Test
    public void testJsonParserSequenceTokenSkipping() throws IOException {
        String json1 = "{\"key1\":\"value1\"}";
        String json2 = "{\"key2\":\"value2\"}";

        JsonFactory jsonFactory = new JsonFactory();
        JsonParser parser1 = jsonFactory.createParser(json1);
        JsonParser parser2 = jsonFactory.createParser(json2);

        // Create a sequence of the two parsers
        JsonParserSequence parserSequence = JsonParserSequence.createFlattened(false, parser1, parser2);

        // Moving to the first token of parser1
        assertEquals(JsonToken.START_OBJECT, parserSequence.nextToken());
        assertEquals(JsonToken.FIELD_NAME, parserSequence.nextToken());
        assertEquals("key1", parserSequence.getCurrentName());
        assertEquals(JsonToken.VALUE_STRING, parserSequence.nextToken());
        assertEquals("value1", parserSequence.getText());
        assertEquals(JsonToken.END_OBJECT, parserSequence.nextToken());

        // Moving to the first token of parser2, expecting no skipping
        assertEquals(JsonToken.START_OBJECT, parserSequence.nextToken());
        assertEquals(JsonToken.FIELD_NAME, parserSequence.nextToken());
        assertEquals("key2", parserSequence.getCurrentName());
        assertEquals(JsonToken.VALUE_STRING, parserSequence.nextToken());
        assertEquals("value2", parserSequence.getText());
        assertEquals(JsonToken.END_OBJECT, parserSequence.nextToken());

        // Ensure that there are no more tokens
        assertEquals(null, parserSequence.nextToken());
    }
}
