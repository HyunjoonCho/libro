
import static org.junit.Assert.fail;

import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.rhino.ErrorReporter;
import org.junit.Before;
import org.junit.Test;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.EvaluatorException;

public class AnonymousTypeInferenceTest {

    private CompilerOptions options;
    private Compiler compiler;

    @Before
    public void setUp() {
        options = new CompilerOptions();
        // Enable type checking
        options.setCheckTypes(true);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.TYPES, com.google.javascript.jscomp.CheckLevel.WARNING);
        compiler = new Compiler(System.out);
    }

    @Test
    public void testTypeInferenceInUnion() {
        String code = "/** @param {{prop: string, prop2: (string|undefined)}} record */\n" +
                      "var func = function(record) {\n" +
                      "  window.console.log(record.prop);\n" +
                      "};\n" +
                      "/** @param {{prop: string, prop2: (string|undefined)}|string} record */\n" +
                      "var func2 = function(record) {\n" +
                      "  if (typeof record == 'string') {\n" +
                      "    window.console.log(record);\n" +
                      "  } else {\n" +
                      "    window.console.log(record.prop);\n" +
                      "  }\n" +
                      "};\n" +
                      "\n" +
                      "func({prop: 'a'});\n" +
                      "func2({prop: 'a'});\n";

        // Compile the code
        Result result = compiler.compile(com.google.javascript.jscomp.SourceFile.fromCode("externs.js", ""), com.google.javascript.jscomp.SourceFile.fromCode("test.js", code), options);

        // Check for a specific type mismatch error expected in the test
        if (!result.success) {
            boolean foundExpectedError = false;
            for (com.google.javascript.jscomp.JSError error : result.errors) {
                if (error.description.contains("found : {prop: string}\nrequired: (string|{prop: string, prop2: (string|undefined)})")) {
                    foundExpectedError = true;
                    break;
                }
            }
            if (!foundExpectedError) {
                fail("Expected type inference error not found.");
            }
        } else {
            fail("Compilation succeeded unexpectedly; expected a type inference error.");
        }
    }
}
