public void testExternalTypeIdDeserialization() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    
    String json = 
        "{" +
        "\"type\":\"child\"," +
        "\"value\":{\"name\":\"test\"}" +
        "}";
    
    Parent result = mapper.readValue(json, Parent.class);
    
    assertTrue(result instanceof Child);
    assertEquals("test", ((Child) result).getName());
}

// Assuming Parent and Child classes with annotated fields for demonstration
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type")
@JsonSubTypes({
    @JsonSubTypes.Type(value = Child.class, name = "child")
})
public static abstract class Parent {
}

public static class Child extends Parent {
    private String name;

    // Getters and setters
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}