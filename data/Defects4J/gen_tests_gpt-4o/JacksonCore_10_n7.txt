
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.nio.charset.StandardCharsets;
import java.util.Map;

import static org.junit.Assert.fail;

public class ByteQuadsCanonicalizerTest {

    private static final int SEED = -523743345;

    private static void injectReproducibleSeed(ObjectMapper objectMapper) throws Exception {
        JsonFactory jsonFactory = objectMapper.getFactory();
        
        // Access the _byteSymbolCanonicalizer field within JsonFactory
        Field byteSymbolCanonicalizerField = JsonFactory.class.getDeclaredField("_byteSymbolCanonicalizer");
        byteSymbolCanonicalizerField.setAccessible(true);

        // Get the createRoot method from ByteQuadsCanonicalizer
        Method factoryMethod = ByteQuadsCanonicalizer.class.getDeclaredMethod("createRoot", int.class);
        factoryMethod.setAccessible(true);
        
        // Set the method's result into the byteSymbolCanonicalizerField
        byteSymbolCanonicalizerField.set(jsonFactory, factoryMethod.invoke(null, SEED));
    }

    @Test
    public void testArrayIndexOutOfBoundsInByteQuadsCanonicalizer() {
        try {
            ObjectMapper objectMapper = new ObjectMapper();
            injectReproducibleSeed(objectMapper);
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.append("{\n");
            stringBuilder.append(" \"expectedGCperPosition\": null");
            for (int i = 0; i < 60; ++i) {
                stringBuilder.append(",\n \"").append(i + 1).append("\": null");
            }
            stringBuilder.append("\n}");

            // Attempt to read the JSON to trigger the bug
            objectMapper.readValue(stringBuilder.toString().getBytes(StandardCharsets.UTF_8), Map.class);
        } catch (ArrayIndexOutOfBoundsException e) {
            // Expected exception due to the bug should be caught here
            // Pass the test since it's reproducing the reported issue
            return;
        } catch (Exception e) {
            // Fail if any other exception occurs
            fail("Unexpected exception thrown: " + e.getMessage());
        }

        // If no exception is thrown, the test should fail as we are expecting the bug to occur
        fail("Expected ArrayIndexOutOfBoundsException was not thrown.");
    }
}
