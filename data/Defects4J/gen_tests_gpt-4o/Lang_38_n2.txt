
import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.Test;

import java.util.GregorianCalendar;
import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class DateFormatUtilsTest {

    @Test
    public void testFormat_CalendarIsoMsZulu_Fails() {
        final String dateTime = "2009-10-16T16:42:16.000Z";

        // Create calendar with TimeZone GMT-8
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);

        // Use FastDateFormat with GMT
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
        
        // This assertion will fail due to the TimeZone issue
        assertEquals("dateTime", dateTime, format.format(cal));
    }

    @Test
    public void testFormat_CalendarIsoMsZulu_Passes() {
        final String expectedDateTime = "2009-10-16T16:42:16.000Z";

        // Create calendar with TimeZone GMT-8
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);
        
        // Fix the problem by invoking getTime
        cal.getTime();

        // Use FastDateFormat with GMT
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
        
        // This assertion will pass as getTime() adjusts the calendar fields correctly.
        assertEquals("dateTime", expectedDateTime, format.format(cal));
    }
}
