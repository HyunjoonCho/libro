
import org.joda.time.DateTimeZone;
import org.junit.Assert;
import org.junit.Test;

public class DateTimeZoneTest {

    @Test
    public void testDateTimeZoneMaxOffset() {
        // Attempt to create a DateTimeZone with a large offset (beyond 23:59 which is allowed)
        try {
            // Offset of 24:00 should not be valid
            DateTimeZone dateTimeZone = DateTimeZone.forOffsetHoursMinutes(24, 0);
            Assert.fail("Should have thrown an IllegalArgumentException for offset beyond 23:59");
        } catch (IllegalArgumentException e) {
            // Expected exception for invalid offset
            Assert.assertTrue(e.getMessage().contains("Offset is too large"));
        }

        // Ensure 23:59 is valid
        try {
            DateTimeZone validDateTimeZone = DateTimeZone.forOffsetHoursMinutes(23, 59);
            Assert.assertNotNull("23:59 should be a valid offset", validDateTimeZone);
        } catch (IllegalArgumentException e) {
            Assert.fail("23:59 should be a valid offset but threw an exception");
        }
        
        // Testing the max valid possible offset including seconds and milliseconds
        try {
            // Normally the maximum offset should be handled with seconds and milliseconds
            DateTimeZone maxValidOffset = DateTimeZone.forOffsetMillis((23 * 60 + 59) * 60 * 1000 + 59999);
            Assert.assertNotNull("23:59:59.999 should be a valid maximum offset", maxValidOffset);
        } catch (IllegalArgumentException e) {
            Assert.fail("23:59:59.999 should be a valid offset but threw an exception");
        }
    }
}
