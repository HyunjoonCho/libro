
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.zip.GZIPOutputStream;

import static org.junit.Assert.fail;

public class TarGzTest {

    @Test
    public void testNullUsernameAndGroupExtraction() {
        // Path to a tar.gz file that represents the described bug scenario
        Path pathToTarGz = Path.of("path/to/your/test-tar.gz");

        try (FileInputStream fis = new FileInputStream(pathToTarGz.toFile());
             GzipCompressorInputStream gzipIn = new GzipCompressorInputStream(fis);
             TarArchiveInputStream tarInputStream = new TarArchiveInputStream(gzipIn)) {

            TarArchiveEntry entry;
            while ((entry = tarInputStream.getNextTarEntry()) != null) {
                System.out.println("Entry Name: " + entry.getName());
                System.out.println("User/Group: " + entry.getUserName() + "/" + entry.getGroupName());
            }

        } catch (IOException e) {
            e.printStackTrace();
            fail("Exception occurred while extracting TAR.GZ: " + e.getMessage());
        }
    }

    private static Path createTestTarGz() throws IOException {
        // Create a TAR file with a null username and group
        ByteArrayOutputStream tarOut = new ByteArrayOutputStream();
        try (TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(tarOut)) {
            TarArchiveEntry entry = new TarArchiveEntry("test-entry");
            entry.setUserName(null); // simulates null username
            entry.setGroupName(null); // simulates null group
            entry.setSize(0);
            tarArchiveOutputStream.putArchiveEntry(entry);
            tarArchiveOutputStream.closeArchiveEntry();
        }

        // Compress the TAR file using GZIP
        ByteArrayOutputStream gzOut = new ByteArrayOutputStream();
        try (GZIPOutputStream gzipOutputStream = new GZIPOutputStream(gzOut)) {
            gzipOutputStream.write(tarOut.toByteArray());
        }

        // Save it to a temporary file
        Path tempFile = Files.createTempFile("test", ".tar.gz");
        Files.write(tempFile, gzOut.toByteArray());
        return tempFile;
    }

}
