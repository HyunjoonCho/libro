
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.apache.commons.math3.fitting.PolynomialCurveFitter;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

public class MultivariateOptimizerTest {

    @Test
    public void testLargeNumberOfWeightsMemoryExhaustion() {
        try {
            int numPoints = 41200;
            List<WeightedObservedPoint> points = new ArrayList<>();

            // Simulate a number of observed points with weights
            for (int i = 0; i < numPoints; i++) {
                double x = i;
                double y = 5 * FastMath.pow(x, 2) + 3 * x + 2; // An example polynomial function
                // Weight is random for demonstration, you can change it as needed
                double weight = 1.0 / (i + 1);
                points.add(new WeightedObservedPoint(weight, x, y));
            }

            // Use PolynomialCurveFitter with a degree 2 polynomial (just an example)
            PolynomialCurveFitter fitter = PolynomialCurveFitter.create(2);
            fitter.fit(points);

            // The test should fail due to memory constraints if the bug is present
            System.out.println("Curve fitting finished without exhausting memory.");
        } catch (OutOfMemoryError e) {
            System.out.println("Memory was exhausted as expected with large weights.");
            throw e;
        }
    }
}
