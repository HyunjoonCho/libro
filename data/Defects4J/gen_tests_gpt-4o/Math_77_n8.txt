
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class RealVectorTest {

    @Test
    public void testArrayRealVectorLInfNorm() {
        // Creating a vector with known values
        double[] data = {-3.0, -4.0, -5.0};
        ArrayRealVector vector = new ArrayRealVector(data);
        
        // Expected result based on buggy implementation
        double expected = 0.0; // due to the incorrect accumulation in the bug
        
        assertEquals(expected, vector.getLInfNorm(), 0.0);
    }

    @Test
    public void testOpenMapRealVectorLInfNorm() {
        // Similarly, testing OpenMapRealVector
        OpenMapRealVector vector = new OpenMapRealVector(3);
        vector.setEntry(0, -3.0);
        vector.setEntry(1, -4.0);
        vector.setEntry(2, -5.0);

        // Expected result based on buggy implementation
        double expected = -12.0;  // due to simple summing of elements

        assertEquals(expected, vector.getLInfNorm(), 0.0);
    }

    @Test
    public void testCorrectArrayRealVectorLInfNorm() {
        // Assuming the bug is fixed, the correct behavior would be:
        double[] data = {-3.0, -4.0, -5.0};
        ArrayRealVector vector = new ArrayRealVector(data);

        // Correct expected result for the L-inf norm
        double expected = 5.0;

        assertEquals(expected, vector.getLInfNorm(), 0.0);
    }

    @Test
    public void testCorrectOpenMapRealVectorLInfNorm() {
        // Again, assuming the bug is fixed
        OpenMapRealVector vector = new OpenMapRealVector(3);
        vector.setEntry(0, -3.0);
        vector.setEntry(1, -4.0);
        vector.setEntry(2, -5.0);

        // Correct expected result for the L-inf norm
        double expected = 5.0;

        assertEquals(expected, vector.getLInfNorm(), 0.0);
    }
}
