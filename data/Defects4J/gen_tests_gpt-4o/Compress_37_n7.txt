
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.GZIPOutputStream;

public class TarArchiveInputStreamTest {

    @Test(expected = NegativeArraySizeException.class)
    public void testParsePaxHeadersNegativeArraySizeException() throws IOException {
        // Create sample PAX header data with an empty line at the end
        String paxHeader = "25 path=./test.txt\n25 path=./test2.txt\n\n";
        
        // Create a TAR entry with the PAX header
        ByteArrayOutputStream tarOut = new ByteArrayOutputStream();
        tarOut.write(paxHeader.getBytes());
        
        // Compress the TAR entry using GZIP
        ByteArrayOutputStream gzipOut = new ByteArrayOutputStream();
        try (GZIPOutputStream gzipStream = new GZIPOutputStream(gzipOut)) {
            tarOut.writeTo(gzipStream);
        }

        // Wrap the GZIP stream in a ByteArrayInputStream to simulate an input stream
        ByteArrayInputStream bais = new ByteArrayInputStream(gzipOut.toByteArray());
        
        // Use TarArchiveInputStream to parse it
        try (TarArchiveInputStream tarInput = new TarArchiveInputStream(new GzipCompressorInputStream(bais))) {
            tarInput.getNextTarEntry(); // This should trigger the NegativeArraySizeException due to empty line
        }
    }
}
