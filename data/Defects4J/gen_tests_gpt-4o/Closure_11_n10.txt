
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testInvalidPropertyNotReportedWhenUsingAtThisAnnotation() {
        // JavaScript code snippet to test
        String jsCode = ""
            + "var makeClass = function(protoMethods) {\n"
            + " var clazz = function() {\n"
            + " this.initialize.apply(this, arguments);\n"
            + " }\n"
            + " for (var i in protoMethods) {\n"
            + " clazz.prototype[i] = protoMethods[i];\n"
            + " }\n"
            + " return clazz;\n"
            + "}\n"
            + "/**\n"
            + " * @constructor\n"
            + " * @param {{name: string, height: number}} options\n"
            + " */\n"
            + "var Person = function(options){};\n"
            + "Person = makeClass(/** @lends Person.prototype */ {\n"
            + " /**\n"
            + " * @this {Person}\n"
            + " * @param {{name: string, height: number}} options\n"
            + " */\n"
            + " initialize: function(options) {\n"
            + " /** @type {string} */ this.name_ = options.thisPropDoesNotExist;\n"
            + " },\n"
            + " /**\n"
            + " * @param {string} message\n"
            + " * @this {Person}\n"
            + " */\n"
            + " say: function(message) {\n"
            + " window.console.log(this.name_ + ' says: ' + message);\n"
            + " }\n"
            + "});\n"
            + "var joe = new Person({name: 'joe', height: 300});\n"
            + "joe.say('hi');\n";

        // Set up the compiler and compilation options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setPrettyPrint(true);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, com.google.javascript.jscomp.CheckLevel.ERROR);

        // Compile the JavaScript code
        SourceFile external = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("test.js", jsCode);
        Result result = compiler.compile(external, input, options);

        // Check if there were any type-checking errors reported
        assertTrue("Expected a type-checking error regarding the non-existent property `thisPropDoesNotExist`.",
            result.errors.length > 0);
        
        // Print errors for debugging purposes
        if(result.errors.length > 0) {
            System.out.println(result.errors[0].toString());
        }
    }
}
