public void testInvalidPropertyWithThisAnnotation() {
    String jsCode = ""
        + "var makeClass = function(protoMethods) {"
        + " var clazz = function() {"
        + " this.initialize.apply(this, arguments);"
        + " }"
        + " for (var i in protoMethods) {"
        + " clazz.prototype[i] = protoMethods[i];"
        + " }"
        + " return clazz;"
        + "};"
        + "/**"
        + " * @constructor"
        + " * @param {{name: string, height: number}} options"
        + " */"
        + "var Person = function(options){};"
        + "Person = makeClass(/** @lends Person.prototype */ {"
        + " /**"
        + " * @this {Person}"
        + " * @param {{name: string, height: number}} options"
        + " */"
        + " initialize: function(options) {"
        + " /** @type {string} */ this.name_ = options.thisPropDoesNotExist;"
        + " },"
        + " /**"
        + " * @param {string} message"
        + " * @this {Person}"
        + " */"
        + " say: function(message) {"
        + " window.console.log(this.name_ + ' says: ' + message);"
        + " }"
        + "});"
        + "var joe = new Person({name: 'joe', height: 300});"
        + "joe.say('hi');";

    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.ERROR);

    Compiler compiler = new Compiler();
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("repro.js", jsCode), options);

    assertTrue(result.errors.length > 0);
    assertEquals("Property thisPropDoesNotExist not defined on options", result.errors[0].description);
}