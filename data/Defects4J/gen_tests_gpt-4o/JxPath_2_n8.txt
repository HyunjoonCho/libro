
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.ExpressionContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.compiler.BasicNodeSet;
import org.apache.commons.jxpath.ri.model.NodePointer;

import java.util.ArrayList;
import java.util.List;

public class NodeSetExtensionFunctionTest {

    public static void main(String[] args) {
        testNodeSetHandling();
    }

    public static void testNodeSetHandling() {
        JXPathContext context = JXPathContext.newContext(new Object());
        context.getVariables().declareVariable("ems", new NodeSetExtension());

        List<Object> results = context.selectNodes("ems:observations()");

        // Assuming the function should return an iterable of nodes
        for (Object result : results) {
            if (result instanceof NodePointer) {
                NodePointer pointer = (NodePointer) result;
                System.out.println(pointer.asPath());
            } else {
                System.out.println("Unexpected result type: " + result.getClass());
            }
        }
    }

    public static class NodeSetExtension {

        public static NodeSet observations(ExpressionContext context) {
            List<NodePointer> ptrs = extractObservations(
                    (NodePointer) context.getContextNodePointer(),
                    new ArrayList<NodePointer>()
            );

            BasicNodeSet result = new BasicNodeSet();
            for (NodePointer ptr : ptrs) {
                result.add(ptr);
            }
            return result;
        }

        private static List<NodePointer> extractObservations(NodePointer contextNodePointer, List<NodePointer> list) {
            // Stub method for the sake of example. Replace with actual implementation.
            return list;
        }
    }
}
