
import org.junit.Test;
import static org.junit.Assert.*;

public class ClosurePrimitivesTest {

    @Test
    public void testProcessClosurePrimitivesFalse() {
        // Simulate a compile call with the --process_closure_primitives false flag
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setProcessClosurePrimitives(false);
        
        // Example test file content with goog.provide/require
        String testFileContent = "goog.provide('my.test'); goog.require('my.dependency');";

        Result result = compiler.compile(SourceFile.fromCode("test.js", testFileContent), options);
        
        // Assert that goog.provide/require were not processed
        String compiledCode = compiler.toSource();
        assertTrue(compiledCode.contains("goog.provide('my.test');"));
        assertTrue(compiledCode.contains("goog.require('my.dependency');"));
    }
    
    @Test
    public void testProcessClosurePrimitivesTrue() {
        // Simulate a compile call with the --process_closure_primitives true (default) flag
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setProcessClosurePrimitives(true);
        
        // Example test file content with goog.provide/require
        String testFileContent = "goog.provide('my.test'); goog.require('my.dependency');";
        
        Result result = compiler.compile(SourceFile.fromCode("test.js", testFileContent), options);
        
        // Assert that goog.provide/require were processed
        String compiledCode = compiler.toSource();
        assertFalse(compiledCode.contains("goog.provide('my.test');"));
        assertFalse(compiledCode.contains("goog.require('my.dependency');"));
    }
}
