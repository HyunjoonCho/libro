
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import java.util.Collections;

public class ClosureCompilerTest {

    public static void main(String[] args) {
        ClosureCompilerTest test = new ClosureCompilerTest();
        test.testDefineAnnotationWithWrappedString();
    }

    public void testDefineAnnotationWithWrappedString() {
        String jsCode = "/** @define {string} */\n" +
                        "var CONSTANT = \"some very long string name that I want to wrap \" +\n" +
                        "              \"and so break using a + since I don't want to \" +\n" +
                        "              \"introduce a newline into the string.\";";

        SourceFile inputFile = SourceFile.fromCode("input.js", jsCode);
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        Result result = compiler.compile(Collections.emptyList(), Collections.singletonList(inputFile), options);

        // We expect the compilation to pass without errors
        if (result.success) {
            System.out.println("Test passed! Closure Compiler successfully handled the wrapped string.");
        } else {
            System.out.println("Test failed! There was an error handling the wrapped string:");
            compiler.getErrors().forEach(error -> System.out.println(error.toString()));
        }

        // Assert that the result is successful
        assert result.success : "Compilation failed for wrapped string in @define annotation.";
    }
}
