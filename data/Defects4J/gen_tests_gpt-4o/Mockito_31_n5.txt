public void testDefaultMockingDetailsShouldGetExtraInterfaces() {
    Bar bar = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));
    MockingDetails mockingDetails = mockingDetails(bar);
    assertThat(mockingDetails.getExtraInterfaces()).contains(List.class, Observer.class);
}

public void testNoJUnitDependenciesWithByteBuddy() {
    try {
        NoJUnitDependencyClassLoader classLoader = new NoJUnitDependencyClassLoader();
        Class<?> mockitoConfigClass = classLoader.loadClass("org.mockito.internal.progress.TimesTest");
        fail("Expected a ClassNotFoundException due to JUnit dependency, but none occurred.");
    } catch (ClassNotFoundException e) {
        assertTrue(e.getMessage().contains("junit/framework/Assert"));
    }
}

public void testExcludingClassLoaderCannotLoadClassesWithoutCorrectSourceUrl() {
    boolean exceptionThrown = false;
    try {
        ClassLoaders.excludingClassLoader()
            .exclude("org.mockito.internal.stubbing")
            .loadClass("org.mockito.internal.stubbing.Stubber");
    } catch (ClassNotFoundException e) {
        exceptionThrown = true;
    }
    assertTrue("Expected ClassNotFoundException for excluded classes", exceptionThrown);
}