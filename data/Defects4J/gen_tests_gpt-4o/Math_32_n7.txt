
import org.junit.Test;
import org.apache.commons.geometry.euclidean.threed.BSPTree;
import org.apache.commons.geometry.euclidean.threed.BoundaryRep;
import org.apache.commons.geometry.euclidean.threed.PolyhedronsSet;

import static org.junit.Assert.assertTrue;

public class BSPTreeTest {

    @Test
    public void testBSPTreeConstructionAndRecovery() {
        // Define vertices for a cube
        double[][] vertices = {
            {0.0, 0.0, 0.0},
            {1.0, 0.0, 0.0},
            {1.0, 1.0, 0.0},
            {0.0, 1.0, 0.0},
            {0.0, 0.0, 1.0},
            {1.0, 0.0, 1.0},
            {1.0, 1.0, 1.0},
            {0.0, 1.0, 1.0}
        };

        // Define indices for cube faces (12 triplets for 6 faces)
        int[][] indices = {
            {0, 1, 2}, {0, 2, 3}, // bottom
            {4, 5, 6}, {4, 6, 7}, // top
            {0, 1, 5}, {0, 5, 4}, // front
            {2, 3, 7}, {2, 7, 6}, // back
            {1, 2, 6}, {1, 6, 5}, // right
            {0, 3, 7}, {0, 7, 4}  // left
        };

        // Create the BoundaryRep from vertices and indices
        BoundaryRep brep = new BoundaryRep(vertices, indices);

        // Construct the PolyhedronsSet
        PolyhedronsSet polyhedronSet = new PolyhedronsSet(brep);

        // Extract BSPTree
        BSPTree<?> bspTree = polyhedronSet.getTree(false);

        // Validate that BSPTree was constructed correctly from the BRep
        // (Assuming we have some meaningful validation, dummy check here)
        assertTrue(bspTree != null);

        // Introduce a small change in a vertex
        double[][] modifiedVertices = {
            {0.0, 0.0, 0.1}, // modified vertex
            {1.0, 0.0, 0.0},
            {1.0, 1.0, 0.0},
            {0.0, 1.0, 0.0},
            {0.0, 0.0, 1.0},
            {1.0, 0.0, 1.0},
            {1.0, 1.0, 1.0},
            {0.0, 1.0, 1.0}
        };

        // Reconstruct with modified vertices
        BoundaryRep modifiedBrep = new BoundaryRep(modifiedVertices, indices);
        PolyhedronsSet modifiedPolyhedronSet = new PolyhedronsSet(modifiedBrep);
        BSPTree<?> modifiedBspTree = modifiedPolyhedronSet.getTree(false);

        // Validate modified BSPTree
        assertTrue(modifiedBspTree != null);

        // Here, you'd perform assertions to compare the original and modified
        // structures to see the impact of the vertex change.
    }
}
