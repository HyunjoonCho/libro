public void testBSPTreeBRepRecovery() {
    // Define vertices of a cube
    double[][] vertices = {
        {0, 0, 0},
        {1, 0, 0},
        {1, 1, 0},
        {0, 1, 0},
        {0, 0, 1},
        {1, 0, 1},
        {1, 1, 1},
        {0, 1, 1}
    };

    // Define faces of the cube using indices to the vertices array
    int[][] faces = {
        {0, 1, 2, 3},
        {7, 6, 5, 4},
        {0, 4, 5, 1},
        {1, 5, 6, 2},
        {2, 6, 7, 3},
        {3, 7, 4, 0}
    };

    // Create the BSPTree from the cube definition
    BSPMesh mesh = new BSPMesh(vertices, faces);
    PolyhedronsSet polyhedron = new PolyhedronsSet(mesh);

    // Simply verify if we can extract the faces back without causing issues
    List<Face> extractedFaces = polyhedron.getFaces();
    
    // Check if the number of extracted faces is correct
    assertEquals(6, extractedFaces.size());
}