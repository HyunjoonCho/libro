
import org.apache.commons.math4.optim.linear.SimplexTableau;
import org.apache.commons.math4.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math4.optim.linear.Relationship;
import org.apache.commons.math4.optim.linear.LinearConstraint;
import org.apache.commons.math4.optim.linear.NonNegativeConstraint;
import org.apache.commons.math4.optim.linear.GoalType;
import org.apache.commons.math4.optim.PointValuePair;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexTableauTest {

    @Test
    public void testBasicVariableIdentification() {
        // Define the linear objective function (e.g., Maximize 3x + 5y)
        LinearObjectiveFunction function = new LinearObjectiveFunction(
            new double[] { 3, 5 }, 0);

        // Define the constraints (e.g., x + y <= 4 and x >= 0 and y >= 0)
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 4));
        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));

        // Create a SimplexTableau
        SimplexTableau tableau = new SimplexTableau(
            function, constraints, GoalType.MAXIMIZE, true, 0);

        // Solve the linear problem and check the solution
        PointValuePair solution = tableau.getSolution();
        
        // Assert that the basic variables correspond to values equal to 1 in the tableau
        double[][] tableauData = tableau.getTableau();
        for (int i = 0; i < tableauData.length; i++) {
            double tableauEntry = tableauData[i][tableau.getNumObjectiveFunctions()];
            if (tableauEntry == 1.0) {
                // Check that it is identified correctly, for instance at index i
                assertEquals(1.0, tableauEntry, 0:0);
            }
        }
    }
}
