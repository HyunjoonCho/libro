
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.*;

public class InvalidFormatExceptionTest {

    static class DataHolder {
        public List<Integer> numbers;
    }

    @Test
    public void testInvalidFormatExceptionIndex() {
        String incorrectJson = "{\"numbers\": [\"abc\", 2, 3]}";  // First element will cause an InvalidFormatException
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            objectMapper.readValue(incorrectJson, DataHolder.class);
            fail("Exception not thrown"); // test should fail if exception is not thrown
        } catch (JsonMappingException e) {
            if (e instanceof InvalidFormatException) {
                InvalidFormatException ife = (InvalidFormatException) e;
                List<JsonMappingException.Reference> path = ife.getPath();

                assertFalse(path.isEmpty());
                JsonMappingException.Reference ref = path.get(path.size() - 1);

                // Check if the index is set for the reference (expectation is that it should not be -1)
                assertNotEquals("Index was not set correctly in InvalidFormatException.Reference", -1, ref.getIndex());
            } else {
                fail("Expected InvalidFormatException");
            }
        } catch (JsonProcessingException e) {
            fail("Expected a JsonMappingException, specifically an InvalidFormatException");
        }
    }
}
