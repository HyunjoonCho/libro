
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TypedefResolutionTest {

    @Test
    public void testTypedefResolution() {
        String jsCode = "goog.provide('a.b.c');\n" +
                "goog.scope(function() {\n" +
                "  var b = a.b;\n" +
                "  var c = b.c;\n" +
                "\n" +
                "  /** @typedef {string} */\n" +
                "  c.MyType;\n" +
                "\n" +
                "  /** @param {c.MyType} x The variable. */\n" +
                "  c.myFunc = function(x) {};\n" +
                "});";

        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);
        options.setChecksOnly(true);

        Compiler compiler = new Compiler();
        SourceFile externs = SourceFile.fromCode("externs", ""); // Empty externs
        SourceFile input = SourceFile.fromCode("input", jsCode);

        Result result = compiler.compile(externs, input, options);
        
        // We expect no errors if typedef resolution is correct
        assertEquals("There should be no compilation errors regarding typedef resolution.", 0, result.errors.length);
    }
}
