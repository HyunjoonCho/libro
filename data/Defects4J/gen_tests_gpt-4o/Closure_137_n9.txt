
import com.google.javascript.jscomp.*;
import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;

public class ClosureCompilerTest {

    @Test
    public void testDeterministicTestWarning() {
        // Setup
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        
        // Dummy Test source code with ADVANCED_OPTIMIZATIONS
        String jsCode = "var t = null;"
                      + "window.test = function() {"
                      + "  if (t != null) {"
                      + "    t = null;"
                      + "  }"
                      + "  t = 1;"
                      + "};";

        // Create a compiler
        Compiler compiler = new Compiler();
        
        // Compile the JS code
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("test.js", jsCode);
        Result result = compiler.compile(extern, input, options);
        
        // Collect warnings
        List<JSError> warnings = result.warnings;
        
        // Check if there is a JSC_DETERMINISTIC_TEST warning
        boolean deterministicTestWarningFound = false;
        for (JSError warning : warnings) {
            if ("JSC_DETERMINISTIC_TEST".equals(warning.getType().key)) {
                deterministicTestWarningFound = true;
                break;
            }
        }
        
        // Assert that there should be no JSC_DETERMINISTIC_TEST warnings
        assertFalse("JSC_DETERMINISTIC_TEST warning should not be present", deterministicTestWarningFound);
    }
}
