
import static org.junit.Assert.*;
import org.junit.Test;

public class SideEffectsTest {

    @Test
    public void testFunctionShortCircuitEvaluation() {
        // Simulating function calls and side effect tracking
        MyFunctionEvaluator evaluator = new MyFunctionEvaluator();
        boolean result = evaluator.evaluateFunctions(Math::sin, Math::cos, 0);

        assertTrue("The result should be truthy if either function returns a non-zero value", result);
        assertEquals("Unexpected side effects count", 1, evaluator.getSideEffectCount());
    }
}

class MyFunctionEvaluator {
    private int sideEffectCount = 0;

    /**
     * Evaluates two functions with short-circuit logic, increments side effect count if second function is called.
     */
    public boolean evaluateFunctions(DoubleFunction<Double> func1, DoubleFunction<Double> func2, double input) {
        boolean firstResult = func1.apply(input) != 0;
        if (firstResult) {
            sideEffectCount++;
            return true;
        } else {
            boolean secondResult = func2.apply(input) != 0;
            if (secondResult) {
                sideEffectCount++;
            }
            return secondResult;
        }
    }

    public int getSideEffectCount() {
        return sideEffectCount;
    }
}
