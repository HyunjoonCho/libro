
import org.apache.commons.math3.linear.AbstractRealVector;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class RealVectorTest {

    @Test
    public void testArrayRealVectorLInfNorm() {
        // Test data
        double[] data = new double[]{-3.0, 4.0, -2.0, -5.0};

        // Incorrect behavior
        ArrayRealVector arrayVector = new ArrayRealVector(data);
        double incorrectNorm = arrayVector.getLInfNorm();
        
        // Correct behavior (expected)
        double correctNorm = calculateCorrectLInfNorm(data);

        assertEquals("ArrayRealVector LInfNorm calculation is incorrect.", correctNorm, incorrectNorm, 0.0);
    }

    @Test
    public void testOpenMapRealVectorLInfNorm() {
        // Test data
        OpenMapRealVector openMapVector = new OpenMapRealVector(4);
        openMapVector.setEntry(0, -3.0);
        openMapVector.setEntry(1, 4.0);
        openMapVector.setEntry(2, -2.0);
        openMapVector.setEntry(3, -5.0);

        // Incorrect behavior
        double incorrectNorm = openMapVector.getLInfNorm();
        
        // Correct behavior (expected)
        double correctNorm = calculateCorrectLInfNorm(new double[]{-3.0, 4.0, -2.0, -5.0});

        assertEquals("OpenMapRealVector LInfNorm calculation is incorrect.", correctNorm, incorrectNorm, 0.0);
    }

    private double calculateCorrectLInfNorm(double[] data) {
        double max = 0;
        for (double value : data) {
            max = Math.max(max, Math.abs(value));
        }
        return max;
    }
}
