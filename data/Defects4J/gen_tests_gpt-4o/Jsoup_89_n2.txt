
import org.junit.Test;
import static org.junit.Assert.*;

public class AttributeTest {

    private static class Attributes {
        public static final int NotFound = -1;
        private String[] keys = new String[10];
        private String[] vals = new String[10];

        public int indexOfKey(String key) {
            for (int i = 0; i < keys.length; i++) {
                if (keys[i] != null && keys[i].equals(key)) {
                    return i;
                }
            }
            return NotFound;
        }

        public String get(String key) {
            int index = indexOfKey(key);
            if (index != NotFound) {
                return vals[index];
            }
            return null;
        }
    }

    private static class Attribute {
        private String key;
        private String val;
        private Attributes parent;

        public Attribute(String key, String val, Attributes parent) {
            this.key = key;
            this.val = val;
            this.parent = parent;
        }

        public String setValue(String val) {
            String oldVal = parent.get(this.key); // This will throw NPE if parent is null
            if (parent != null) { // This check is too late if parent was null above
                int i = parent.indexOfKey(this.key);
                if (i != Attributes.NotFound)
                    parent.vals[i] = val;
            }
            this.val = val;
            return oldVal;
        }
    }

    @Test(expected = NullPointerException.class)
    public void testSetValue_NPEWithoutParent() {
        Attribute attribute = new Attribute("key1", "value1", null); // No parent
        attribute.setValue("newValue"); // Should throw NPE
    }
}

