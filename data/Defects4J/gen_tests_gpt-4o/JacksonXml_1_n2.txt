
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class NestedListDeserializationTest {

    public static class Definition {
        @JsonProperty("records")
        public List<Record> records;
    }

    public static class Record {
        @JsonProperty("fields")
        public List<Field> fields;
    }

    public static class Field {
        @JsonProperty("data")
        public String data;
    }

    @Test
    public void testDeserializationOfNestedNonWrappedLists() throws JsonProcessingException {
        String json = "{ \"records\": [ { \"fields\": [] }, { \"fields\": [ { \"data\": \"value\" } ] } ] }";

        ObjectMapper mapper = new ObjectMapper();
        // Disabling FAIL_ON_UNKNOWN_PROPERTIES for simplicity, adjust if needed
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        Definition definition = mapper.readValue(json, Definition.class);

        assertNotNull(definition.records);
        assertEquals(2, definition.records.size());
        
        // First record should have an empty fields list
        assertNotNull(definition.records.get(0).fields);
        assertEquals(0, definition.records.get(0).fields.size());
        
        // Second record should have one Field object
        assertNotNull(definition.records.get(1).fields);
        assertEquals(1, definition.records.get(1).fields.size());
        assertEquals("value", definition.records.get(1).fields.get(0).data);
    }
}
