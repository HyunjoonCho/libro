
import org.junit.Test;
import static org.junit.Assert.*;

public class FunctionRedefinitionTest {

    @Test
    public void testFunctionRedefinitionMiscompilation() {
        // Define a function to simulate the assert behavior
        CheckError assertFunc = new CheckError();

        // Initial assertion before any f definition
        assertFunc.assertTrue(f() == 1);

        // Define f as a variable function assignment
        FInterface f = () -> 2;

        // Assert with redefined f
        assertFunc.assertTrue(f.f() == 2);

        // Re-declare f as a function, expected behavior should match first assert
        // This should cause an error in certain compilation settings
        f = new FInterface() {
            public int f() {
                return 1;
            }
        };

        // If the bug is present, this will cause an error due to incorrect function redefinition handling
        assertFunc.assertTrue(f.f() == 1);
    }

    // Minimal functional interface to simulate function behavior in Java
    @FunctionalInterface
    interface FInterface {
        int f();
    }

    // Custom assertion class to replace JavaScript-style assertion behavior
    static class CheckError {
        void assertTrue(boolean condition) {
            if (!condition) {
                throw new AssertionError("error");
            }
        }
    }

    // Initial function definition
    public static int f() {
        return 1;
    }
}
