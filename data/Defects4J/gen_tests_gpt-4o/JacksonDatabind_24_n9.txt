
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.datatype.joda.JacksonJodaDateFormat;
import com.fasterxml.jackson.datatype.joda.JodaModule;
import com.fasterxml.jackson.datatype.joda.ser.DateTimeSerializer;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.jupiter.api.Test;

import java.text.SimpleDateFormat;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ObjectMapperDateFormatTest {

    @Test
    public void testDateTimeSerialization() throws JsonProcessingException {
        ObjectMapper mapper = createObjectMapper();
        DateTime dateTime = new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC);

        String json = mapper.writeValueAsString(dateTime);
        System.out.println(json);
        
        // In version 2.5.4, it should be "1988-06-25 20:30:00"
        // In version 2.6.0, Java default timezone affects the result
        assertEquals("\"1988-06-25 20:30:00\"", json);
    }

    private static ObjectMapper createObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(createJodaModule());
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        System.out.println("Before setting DateFormat: " + mapper.getSerializationConfig().getTimeZone());

        mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));

        System.out.println("After setting DateFormat: " + mapper.getSerializationConfig().getTimeZone());
        return mapper;
    }

    private static SimpleModule createJodaModule() {
        SimpleModule module = new SimpleModule();
        DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss").withZoneUTC();
        module.addSerializer(DateTime.class, new DateTimeSerializer(new JacksonJodaDateFormat(formatter)));
        return module;
    }
}
