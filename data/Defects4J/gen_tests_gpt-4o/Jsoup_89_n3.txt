
import org.junit.Test;
import static org.junit.Assert.*;

public class AttributeTest {

    @Test(expected = NullPointerException.class)
    public void testSetValueWithNoParent() {
        // Given: An Attribute instance with no parent
        Attribute attribute = new Attribute("key", "initialValue", null);

        // When: Set a new value
        attribute.setValue("newValue");

        // Then: A NullPointerException should be thrown
    }
}

// Mock classes to support the test case

class Attribute {
    String key;
    String val;
    Attributes parent;

    public Attribute(String key, String val, Attributes parent) {
        this.key = key;
        this.val = val;
        this.parent = parent;
    }

    public String setValue(String val) {
        if (parent != null) {
            String oldVal = parent.get(this.key); // this line will throw NPE if parent is null
            int i = parent.indexOfKey(this.key);
            if (i != Attributes.NotFound)
                parent.vals[i] = val;
            this.val = val;
            return oldVal;
        }
        this.val = val;
        return null; // In case of no parent, return null or handle differently
    }
}

class Attributes {
    static final int NotFound = -1;
    String[] vals;
    String[] keys;

    public int indexOfKey(String key) {
        // Dummy implementation for index lookup.
        return NotFound;
    }

    public String get(String key) {
        // Dummy get method
        return null;
    }
}
