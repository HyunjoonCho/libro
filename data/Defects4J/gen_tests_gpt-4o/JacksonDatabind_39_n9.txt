public void testJacksonFailsToContinueParseAfterInvalidSubtype() throws IOException {
    final ObjectMapper objectMapper = new ObjectMapper()
            .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                     DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                     DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";

    CallRecord callRecord = objectMapper.readValue(json, CallRecord.class);
    assertEquals(0.0f, callRecord.version, 0.0f);
    assertEquals("123", callRecord.application);
    // item should be null due to invalid subtype
    assertNull(callRecord.item);
    // item2 should be parsed correctly
    assertNotNull(callRecord.item2);
    assertTrue(callRecord.item2 instanceof Event);
    assertEquals("location1", ((Event) callRecord.item2).location);

    json = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}";
    callRecord = objectMapper.readValue(json, CallRecord.class);
    assertEquals(0.0f, callRecord.version, 0.0f);
    assertNull(callRecord.item);
    assertNull(callRecord.application);

    json = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, \"version\":0.0,\"application\":\"123\"}";
    callRecord = objectMapper.readValue(json, CallRecord.class);
    assertEquals(0.0f, callRecord.version, 0.0f);
    assertNull(callRecord.item);
    assertNull(callRecord.application);
}