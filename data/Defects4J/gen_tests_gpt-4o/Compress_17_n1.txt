
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.junit.Assert.fail;

public class TarFileTest {

    @Test
    public void testInvalidTarFormatHandling() {
        // Simulating a corrupted tar header
        byte[] corruptedTarHeader = new byte[]{
                0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x75, 0x30, 0x17, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                // Rest of the invalid header goes here
        };
        
        try (InputStream is = new ByteArrayInputStream(corruptedTarHeader);
             TarArchiveInputStream tis = new TarArchiveInputStream(is)) {

            // Attempt to read the "corrupted" tar entry
            TarArchiveEntry entry = tis.getNextTarEntry();
            if (entry != null) {
                // Consuming the entry
                IOUtils.toByteArray(tis);
            }

            // If we reached this point without an exception, the behavior is unexpected based on the bug report
            fail("Expected an IllegalArgumentException due to invalid tar format.");
            
        } catch (IllegalArgumentException e) {
            // Expected exception based on the bug report
            System.out.println("Caught expected IllegalArgumentException: " + e.getMessage());
        } catch (IOException e) {
            fail("Test failed due to unexpected IOException: " + e.getMessage());
        }
    }
}
