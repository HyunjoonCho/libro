
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.CholeskyDecomposition;
import org.apache.commons.math3.random.CorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.GaussianRandomGenerator;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CorrelatedRandomVectorGeneratorTest {

    private static final double EPSILON = 1e-10;

    @Test
    public void testCorrelatedRandomVectorGeneratorWithZeroRows() {
        // Covariance matrix with zero rows
        double[][] covarianceMatrix = {
            {0.013445532, 0.01039469, 0.0, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        };

        Array2DRowRealMatrix covarianceMatrixReal = new Array2DRowRealMatrix(covarianceMatrix);
        JDKRandomGenerator randomGenerator = new JDKRandomGenerator();
        GaussianRandomGenerator gaussianRandomGenerator = new GaussianRandomGenerator(randomGenerator);

        // Construct the CorrelatedRandomVectorGenerator
        CorrelatedRandomVectorGenerator generator = new CorrelatedRandomVectorGenerator(
            new double[covarianceMatrix.length], covarianceMatrixReal, 1.0e-12, gaussianRandomGenerator);

        // Validate the rank of the generated root matrix
        CholeskyDecomposition decomposition = new CholeskyDecomposition(covarianceMatrixReal, EPSILON, EPSILON);
        int rank = decomposition.getL().getColumnDimension();

        // Assert expected rank to be 4, but generator returns incorrect rank of 3
        assertEquals(4, rank);
    }
}
