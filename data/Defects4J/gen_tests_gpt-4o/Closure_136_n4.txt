
import static org.junit.Assert.assertTrue;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;

import org.junit.Test;

public class SuperKeywordTest {

    @Test
    public void testSuperKeywordNotRenamed() {
        // JavaScript function using Prototype.js's $super keyword
        String jsCode = ""
            + "var MyClass = Class.create({\n"
            + "    initialize: function($super, options) {\n"
            + "        $super();\n"
            + "        this.options = options;\n"
            + "    }\n"
            + "});\n";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilerOptions.CompilationLevel.ADVANCED_OPTIMIZATIONS);

        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");
        JSSourceFile input = JSSourceFile.fromCode("input.js", jsCode);

        Result result = compiler.compile(extern, input, options);

        // Ensure that compilation was successful and that $super is not renamed
        assertTrue(result.success);
        String compiledCode = compiler.toSource();
        
        // Check that $super is not renamed in the resulting source code
        assertTrue(compiledCode.contains("$super"));
    }
}
