
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;

public class FilteringParserDelegateTest {
    
    @Test
    public void testAllowMultipleMatchesNotUtilized() throws IOException {
        String json = "{\"items\":[{\"id\":1,\"name\":\"Item1\"},{\"id\":2,\"name\":\"Item2\"}]}";

        JsonFactory jsonFactory = new JsonFactory();
        JsonParser parser = jsonFactory.createParser(json);

        // TokenFilter to filter out objects within the "items" array
        TokenFilter filter = new TokenFilter() {
            @Override
            public TokenFilter includeObjectStart() {
                return TokenFilter.INCLUDE_ALL;
            }

            @Override
            public TokenFilter includeProperty(String name) {
                if ("items".equals(name)) {
                    return TokenFilter.INCLUDE_ALL;
                }
                return null;
            }
        };

        // Create FilteringParserDelegate with allowMultipleMatches set to true
        FilteringParserDelegate filteringParser = new FilteringParserDelegate(parser, filter, true, true);

        assertEquals(JsonToken.START_OBJECT, filteringParser.nextToken());
        assertEquals(JsonToken.FIELD_NAME, filteringParser.nextToken());
        assertEquals("items", filteringParser.getCurrentName());
        assertEquals(JsonToken.START_ARRAY, filteringParser.nextToken());

        // Check if only the first object is parsed due to lack of _allowMultipleMatches implementation
        assertEquals(JsonToken.START_OBJECT, filteringParser.nextToken());
        assertEquals(JsonToken.FIELD_NAME, filteringParser.nextToken());
        assertEquals("id", filteringParser.getCurrentName());
        assertEquals(JsonToken.VALUE_NUMBER_INT, filteringParser.nextToken());
        assertEquals(1, filteringParser.getIntValue());
        assertEquals(JsonToken.FIELD_NAME, filteringParser.nextToken());
        assertEquals("name", filteringParser.getCurrentName());
        assertEquals(JsonToken.VALUE_STRING, filteringParser.nextToken());
        assertEquals("Item1", filteringParser.getText());
        assertEquals(JsonToken.END_OBJECT, filteringParser.nextToken());

        // Ideally, with allowMultipleMatches: the next token should start another object, but it does not due to the bug
        JsonToken nextToken = filteringParser.nextToken();
        assertFalse("Unexpectedly received another object's start", nextToken == JsonToken.START_OBJECT || nextToken == JsonToken.FIELD_NAME);

        filteringParser.close();
        parser.close();
    }
}
