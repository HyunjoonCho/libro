
import org.joda.time.DateTimeZone;
import org.joda.time.DateTime;
import org.junit.Test;
import static org.junit.Assert.*;

public class DateTimeZoneOffsetTest {

    @Test
    public void testMaxOffset() {
        // Test parsing for the maximum offset allowed
        try {
            DateTimeZone zone = DateTimeZone.forOffsetHoursMinutes(23, 59);
            DateTime dateTime = new DateTime(zone);
            assertEquals(23, zone.getStandardOffset(dateTime.getMillis()) / (60 * 60 * 1000));
            assertEquals(59, (zone.getStandardOffset(dateTime.getMillis()) / (60 * 1000)) % 60);
        } catch (IllegalArgumentException e) {
            fail("An exception should not be thrown for maximum valid offset 23:59.");
        }

        // Test parsing for an offset beyond the maximum valid range
        try {
            DateTimeZone.forOffsetHoursMinutes(24, 0);
            fail("An exception should have been thrown for an offset greater than 23:59.");
        } catch (IllegalArgumentException e) {
            // Expected: exception should be thrown for invalid offset
            assertEquals("Minutes out of range: 1380", e.getMessage());
        }
    }
}
