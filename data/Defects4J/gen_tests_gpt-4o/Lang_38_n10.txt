
import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.Test;
import java.util.GregorianCalendar;
import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class DateFormatUtilsTest {

    @Test
    public void testFormat_CalendarIsoMsZulu_FailsWithoutGetTime() {
        final String expectedDateTime = "2009-10-16T16:42:16.000Z";

        // Initialize the calendar with a specific timezone (GMT-8)
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        // Set the calendar to the specified time
        cal.set(2009, 9, 16, 8, 42, 16);

        // Format the calendar with a formatter using UTC (GMT)
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
        
        // This assertion is expected to fail because the timezone change
        // is not reflected correctly in the calendar's field values
        assertEquals("dateTime", expectedDateTime, format.format(cal));
    }

    @Test
    public void testFormat_CalendarIsoMsZulu_PassesWithGetTime() {
        final String expectedDateTime = "2009-10-16T16:42:16.000Z";

        // Initialize the calendar with a specific timezone (GMT-8)
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        // Set the calendar to the specified time
        cal.set(2009, 9, 16, 8, 42, 16);
        // Call getTime() to properly apply timezone changes
        cal.getTime();

        // Format the calendar with a formatter using UTC (GMT)
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
        
        // This assertion is expected to pass due to the timezone adjustment
        assertEquals("dateTime", expectedDateTime, format.format(cal));
    }
}
