
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.junit.Test;
import static org.junit.Assert.*;

public class MutableDateTimeTest {

    @Test
    public void testAddDaysZero() {
        final MutableDateTime mdt = new MutableDateTime(2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID("Europe/Berlin"));
        System.out.println("Start date: " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        mdt.addHours(-1);
        System.out.println("addHours(-1): " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        mdt.addHours(0);
        System.out.println("addHours(0): " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        long beforeAddDays = mdt.toInstant().getMillis();
        mdt.addDays(0);
        long afterAddDays = mdt.toInstant().getMillis();
        System.out.println("addDays(0): " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        assertEquals("Adding zero days should not change the timestamp", beforeAddDays, afterAddDays);
    }
}
