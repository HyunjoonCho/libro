
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

public class ClosureCompilerTest {

    @Test
    public void testJscDeterministicTestWarning() {
        // JavaScript code to compile
        String jsCode = 
            "var t = null;\n" +
            "\n" +
            "window.test = function() {\n" +
            "  if (t != null) {\n" +
            "    t = null;\n" +
            "  }\n" +
            "  t = 1;\n" +
            "};\n";

        // Set up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Create SourceFile
        List<SourceFile> input = new ArrayList<>();
        input.add(SourceFile.fromCode("test.js", jsCode));
        List<SourceFile> externs = new ArrayList<>();

        // Compile and capture Result
        Result result = compiler.compile(externs, input, options);

        // Check for warnings
        if (result.warnings.length > 0) {
            StringBuilder warnings = new StringBuilder();
            for (int i = 0; i < result.warnings.length; i++) {
                warnings.append(result.warnings[i].description).append("\n");
            }
            Assert.fail("Expected no warnings, but found:\n" + warnings.toString());
        } else {
            Assert.assertTrue("No warnings should be found.", result.warnings.length == 0);
        }
    }
}
