
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.jupiter.api.Test;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class InvalidFormatExceptionTest {

    static class TestData {
        public List<Integer> numbers;
    }

    @Test
    public void testInvalidFormatExceptionIndex() {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"numbers\": [1, 2, \"three\", 4]}"; // "three" is invalid for integer deserialization

        try {
            mapper.readValue(json, TestData.class);
            fail("Expected an InvalidFormatException to be thrown");
        } catch (InvalidFormatException e) {
            // Check if index is set
            assertNotEquals(-1, e.getPath().get(0).getIndex(), "The index should be set for the invalid element.");
            assertEquals(2, e.getPath().get(0).getIndex(), "Expected index to be 2 for the erroneous element.");
        } catch (Exception e) {
            fail("Expected an InvalidFormatException, but got: " + e);
        }
    }
}
