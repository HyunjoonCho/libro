
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.FirstOrderIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.junit.Test;

import static org.junit.Assert.*;

public class AdaptiveStepSizeIntegratorTest {

    @Test
    public void testExtremelyShortIntegrationRange() {
        // Define a simple differential equation dy/dt = y
        FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = y[0];
            }
        };

        // Initial state
        double[] yStart = {1.0};

        // Define the integrator with extremely short integration range
        double minStep = 1.0e-20;
        double maxStep = 1.0;
        double absoluteTolerance = 1.0e-8;
        double relativeTolerance = 1.0e-8;

        FirstOrderIntegrator integrator = new DormandPrince853Integrator(
                minStep, maxStep, absoluteTolerance, relativeTolerance);

        // Add a step handler to track the integration process
        integrator.addStepHandler(new StepHandler() {
            @Override
            public void init(double t0, double[] y0, double t) {
                // Initialize if necessary
            }

            @Override
            public void handleStep(StepInterpolator interpolator, boolean isLast) {
                double currentTime = interpolator.getCurrentTime();
                assertTrue("Current time should not exceed the integration range", currentTime <= 1.0e-9);
            }
        });

        // Perform the integration over an extremely short range
        integrator.integrate(equations, 0.0, yStart, 1.0e-9, yStart);
    }
}
