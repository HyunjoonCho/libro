public void testTooLargeFirstStep() {
    double[] y0 = { 0.0 };
    double t0 = 0.0;
    double t1 = 1e-10; // Extremely short integration range
    double stepSize = 1.0;
    
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return 1;
        }
        
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = -y[0];
        }
    };
    
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(
        1e-12, 1.0, 1e-10, 1e-10);
    
    integrator.integrate(ode, t0, y0, t1, new double[1]);
    
    assertEquals("Integration should finish at t1", t1, integrator.getCurrentStepStart(), 1e-12);
}