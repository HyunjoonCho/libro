
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;

import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.junit.Test;

public class ArchiveStreamFactoryTest {

    @Test
    public void testEncodingForArjArchiveInputStream() {
        try {
            InputStream arjStream = new ByteArrayInputStream(new byte[0]);
            ArchiveInputStream archiveInputStream = new ArchiveStreamFactory()
                    .createArchiveInputStream(ArchiveStreamFactory.ARJ, arjStream, "UTF-8");
            assertNotNull(archiveInputStream);
        } catch (ArchiveException e) {
            fail("Failed to create ArjArchiveInputStream with encoding: " + e.getMessage());
        }
    }

    @Test
    public void testEncodingForCpioArchiveInputStream() {
        try {
            InputStream cpioStream = new ByteArrayInputStream(new byte[0]);
            ArchiveInputStream archiveInputStream = new ArchiveStreamFactory()
                    .createArchiveInputStream(ArchiveStreamFactory.CPIO, cpioStream, "UTF-8");
            assertNotNull(archiveInputStream);
        } catch (ArchiveException e) {
            fail("Failed to create CpioArchiveInputStream with encoding: " + e.getMessage());
        }
    }

    @Test
    public void testEncodingForDumpArchiveInputStream() {
        try {
            InputStream dumpStream = new ByteArrayInputStream(new byte[0]);
            ArchiveInputStream archiveInputStream = new ArchiveStreamFactory()
                    .createArchiveInputStream(ArchiveStreamFactory.DUMP, dumpStream, "UTF-8");
            assertNotNull(archiveInputStream);
        } catch (ArchiveException e) {
            fail("Failed to create DumpArchiveInputStream with encoding: " + e.getMessage());
        }
    }

    @Test
    public void testEncodingForJarArchiveInputStream() {
        try {
            InputStream jarStream = new ByteArrayInputStream(new byte[0]);
            ArchiveInputStream archiveInputStream = new ArchiveStreamFactory()
                    .createArchiveInputStream(ArchiveStreamFactory.JAR, jarStream, "UTF-8");
            assertNotNull(archiveInputStream);
        } catch (ArchiveException e) {
            fail("Failed to create JarArchiveInputStream with encoding: " + e.getMessage());
        }
    }

    @Test
    public void testEncodingForJarArchiveOutputStream() {
        try {
            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
            ArchiveOutputStream archiveOutputStream = new ArchiveStreamFactory()
                    .createArchiveOutputStream(ArchiveStreamFactory.JAR, byteArrayOutputStream, "UTF-8");
            assertNotNull(archiveOutputStream);
        } catch (ArchiveException e) {
            fail("Failed to create JarArchiveOutputStream with encoding: " + e.getMessage());
        }
    }
}
