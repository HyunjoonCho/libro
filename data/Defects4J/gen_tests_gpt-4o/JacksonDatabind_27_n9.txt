
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ExternalTypeIdDeserializationTest {

    static class MyTypeResolver extends TypeIdResolverBase {
        @Override
        public String idFromValue(Object value) {
            // Normally implement logic to return appropriate id
            return ((BaseType) value).getType();
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public Id getMechanism() {
            return Id.CUSTOM;
        }

        @Override
        public JavaType typeFromId(DatabindContext context, String id) {
            // Translate id to actual Java type
            if ("subtype".equals(id)) {
                return context.constructType(SubType.class);
            }
            return null;
        }
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type")
    @JsonTypeIdResolver(MyTypeResolver.class)
    static class BaseType {
        private String type;
        private String name;

        // Getters and setters
        public String getType() {
            return type;
        }

        public void setType(String type) {
            this.type = type;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

    static class SubType extends BaseType {
        private int value;

        // Getters and setters
        public int getValue() {
            return value;
        }

        public void setValue(int value) {
            this.value = value;
        }
    }

    @Test
    public void testDeserializeExternalTypeId() throws Exception {
        String json = "{ \"type\":\"subtype\", \"name\":\"test\", \"value\":123 }";

        BaseType result = new ObjectMapper().readValue(json, BaseType.class);

        assertEquals(SubType.class, result.getClass());
        assertEquals("test", ((SubType) result).getName());
        assertEquals(123, ((SubType) result).getValue());
    }
}
