public void testDeserializeExternalTypeIdBeforePojo() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    
    final String json = "{\"type\":\"myType\",\"value\":{\"name\":\"testName\"}}";
    
    SimpleModule module = new SimpleModule();
    module.addDeserializer(MyClass.class, new MyClassDeserializer());
    mapper.registerModule(module);

    MyClass result = mapper.readValue(json, MyClass.class);
    
    assertNotNull(result);
    assertEquals("myType", result.getType());
    assertEquals("testName", result.getValue().getName());
}

static class MyClass {
    private String type;
    private Value value;

    // Getters and Setters

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public Value getValue() {
        return value;
    }

    public void setValue(Value value) {
        this.value = value;
    }
}

static class Value {
    private String name;

    // Getters and Setters

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

static class MyClassDeserializer extends StdDeserializer<MyClass> {
    
    public MyClassDeserializer() {
        super(MyClass.class);
    }
    
    @Override
    public MyClass deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
        TreeNode treeNode = jp.readValueAsTree();
        TreeNode typeNode = treeNode.get("type");
        TreeNode valueNode = treeNode.get("value");

        MyClass result = new MyClass();
        result.setType(typeNode.toString().replace("\"", ""));
        result.setValue(new ObjectMapper().treeToValue(valueNode, Value.class));
        
        return result;
    }
}