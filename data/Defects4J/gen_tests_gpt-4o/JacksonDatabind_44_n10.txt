public void testPolymorphicTypeResolutionWithDefaultImpl() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    
    mapper.addMixIn(BaseType.class, BaseTypeMixin.class);
    mapper.addMixIn(SubType.class, SubTypeMixIn.class);
    
    String json = "{\"type\":\"subtype\",\"baseProperty\":\"baseValue\",\"subProperty\":\"subValue\"}";
    BaseType result = mapper.readValue(json, BaseType.class);
    
    assertTrue(result instanceof SubType);
    assertEquals("baseValue", result.getBaseProperty());
    assertEquals("subValue", ((SubType) result).getSubProperty());
}

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = SubType.class)
@JsonSubTypes({
    @JsonSubTypes.Type(value = SubType.class, name = "subtype")
})
abstract class BaseTypeMixin {}

abstract class BaseType {
    private String baseProperty;

    public String getBaseProperty() {
        return baseProperty;
    }

    public void setBaseProperty(String baseProperty) {
        this.baseProperty = baseProperty;
    }
}

@JsonTypeName("subtype")
class SubType extends BaseType {
    private String subProperty;

    public String getSubProperty() {
        return subProperty;
    }

    public void setSubProperty(String subProperty) {
        this.subProperty = subProperty;
    }
}

abstract class SubTypeMixIn {}