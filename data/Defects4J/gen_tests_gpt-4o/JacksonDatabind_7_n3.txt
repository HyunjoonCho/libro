
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TokenBufferDeserializationTest {

    static class Value {
        @JsonCreator
        public static Value from(TokenBuffer buffer) throws Exception {
            JsonParser parser = buffer.asParser();
            JsonToken[] tokens = new JsonToken[] {
                parser.nextToken(), // Should be START_OBJECT
                parser.nextToken(), // FIELD_NAME
                parser.nextToken(), // VALUE_NUMBER_INT
                parser.nextToken(), // FIELD_NAME
                parser.nextToken(), // VALUE_NULL
                parser.nextToken()  // END_OBJECT
            };
            verifyTokens(tokens);
            return new Value();
        }

        private static void verifyTokens(JsonToken[] tokens) {
            assertEquals(JsonToken.START_OBJECT, tokens[0]);
            assertEquals(JsonToken.FIELD_NAME, tokens[1]);
            assertEquals(JsonToken.VALUE_NUMBER_INT, tokens[2]);
            assertEquals(JsonToken.FIELD_NAME, tokens[3]);
            assertEquals(JsonToken.VALUE_NULL, tokens[4]);
            assertEquals(JsonToken.END_OBJECT, tokens[5]);
        }
    }

    @Test
    public void testDelegateDeserializationWithTokenBuffer() throws Exception {
        String json = "{ \"a\":1, \"b\":null }";
        ObjectMapper mapper = new ObjectMapper();
        mapper.readValue(json, Value.class);
    }
}
