
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.Collections;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testMsgPrefixVariableName() {
        // Define the JS code to test
        String jsCode = "var MSG_foo = 'bar';";

        // Create a source file from the String
        SourceFile input = SourceFile.fromCode("test.js", jsCode);

        // Output placeholder
        SourceFile output = SourceFile.fromCode("output.js", "");

        // Set up the compiler options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the code
        com.google.javascript.jscomp.Compiler compiler = new com.google.javascript.jscomp.Compiler();
        Result result = compiler.compile(Collections.emptyList(), Collections.singletonList(input), options);

        // Assert that there are errors (i.e., reproduce the bug)
        assertTrue("Expected compilation errors", result.errors.length > 0);
        // Alternatively, you can check for the specific error message:
        assertTrue("Expected error message not found",
                result.errors[0].description.contains("message not initialized using goog.getMsg"));
    }
}
