
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import org.junit.Test;
import java.util.Arrays;

import static org.junit.Assert.assertTrue;

public class CompilerTest {

    @Test
    public void testIncorrectOptimizationInAdvancedMode() {
        // Input JavaScript code as a string
        String jsCode = "window['anchor'] = function (obj, modifiesProp) { "
                      + "  return (function (saved) { "
                      + "    return modifiesProp(obj) + saved; "
                      + "  })(obj['prop']); "
                      + "};";

        // Expected part of the output which should include preserving ordering.
        // Expected behavior as described in the report to preserve 'saved'
        String expectedCodeFragment = "var HOLD=a.prop;return b(a)+HOLD";

        // External definitions for 'window' object
        SourceFile extern = SourceFile.fromCode("externs/window.js", 
                           "var window = { anchor: function() {} };");

        // Input JavaScript file
        SourceFile input = SourceFile.fromCode("input.js", jsCode);

        // Setting up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Run the compiler
        Result result = compiler.compile(extern, input, options);

        // Check for compilation success
        assertTrue("Compilation error: " + result.errors, result.success);

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Verify that the compiled code includes the expected fragment
        assertTrue("Compiled code is missing expected snippet: " + expectedCodeFragment,
                   compiledCode.contains(expectedCodeFragment));
    }
}
