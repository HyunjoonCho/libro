
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearConstraintSet;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.PointValuePair;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIncorrectResult() {
        // Objective function: Maximize 3x + 5y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3, 5 }, 0);

        // Constraints:
        // 2x + 8y <= 13
        // 5x + 2y <= 11
        // x, y >= 0
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] { 2, 8 }, Relationship.LEQ, 13));
        constraints.add(new LinearConstraint(new double[] { 5, 2 }, Relationship.LEQ, 11));

        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(
                f,
                new LinearConstraintSet(constraints),
                GoalType.MAXIMIZE,
                new NonNegativeConstraint(true)
        );

        // Check if the solution is as expected
        // The expected values depend on the problem setup
        double expectedX = 1; // Example expected value, adjust accordingly
        double expectedY = 1.25; // Example expected value, adjust accordingly
        double[] point = solution.getPoint();

        assertEquals(expectedX, point[0], 1e-5);
        assertEquals(expectedY, point[1], 1e-5);
        assertEquals(9.25, solution.getValue(), 1e-5); // Expected objective function value, adjust accordingly
    }
}
