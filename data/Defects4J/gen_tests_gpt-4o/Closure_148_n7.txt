
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertEquals;

import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import java.util.List;

public class ClosureCompilerWritingModeTest {

    @Test
    public void testWritingModePreserved() {
        // JavaScript code to test
        String jsCode = "var element = document.createElement('div');" +
                        "element.style.writingMode = 'vertical-rl';" +
                        "console.log(element.style.writingMode);";

        // Expected output containing 'writingMode'
        String expectedOutput = "vertical-rl";

        // Initialize the compiler and options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Set to ADVANCED_OPTIMIZATIONS which often causes issues
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Extract optimized code and compile status
        String compiledCode = compiler.toSource();
        List<JSError> errors = result.errors;

        // Verify that no errors occurred during compilation
        assertEquals("No errors should be present during compilation", 0, errors.size());

        // Check if the transformed code still contains 'writingMode'
        assertNotEquals("The 'writingMode' property should not be mangled", -1, compiledCode.indexOf("writingMode"));
    }
}
