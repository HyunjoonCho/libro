
import static org.junit.Assert.assertEquals;

import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import org.junit.Test;

public class ClosureCompilerBugTest {

    @Test
    public void testMixedTypesInTernaryOperator() {
        // Initialize the compiler and options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Define the JavaScript source to be compiled
        String jsCode = "var a =(Math.random()>0.5? '1' : 2 ) + 3 + 4;";
        
        // Specify input and output
        JSSourceFile input = JSSourceFile.fromCode("input.js", jsCode);
        JSSourceFile extern = JSSourceFile.fromCode("extern.js", "");

        // Compile the code
        compiler.compile(extern, input, options);
        String compiledCode = compiler.toSource();

        // The expected output should preserve the intended operation order and type coercion
        String expectedCompiledCode = "var a = (0.5 < Math.random() ? '1' : 2) + 3 + 4;";

        // Verify if the compiled code matches the expected result
        assertEquals(expectedCompiledCode, compiledCode);
    }
}
