
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonPOJOBuilder;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;
import static org.junit.Assert.*;

public class EmployeeDeserializationTest {

    @Test
    public void testDeserializationWithJsonUnwrapped() throws Exception {
        String jsonData = "{"
                + "\"emp_id\": 1234,"
                + "\"emp_first_name\": \"John\","
                + "\"emp_last_name\": \"Doe\","
                + "\"emp_age\": 30"
                + "}";

        ObjectMapper objectMapper = new ObjectMapper();
        Employee emp = objectMapper.readValue(jsonData, Employee.class);

        assertEquals(1234, emp.getId());
        assertNotNull(emp.getName());
        assertEquals("John", emp.getName().getFirst());
        assertEquals("Doe", emp.getName().getLast());
        assertEquals(30, emp.getAge());
    }

    @Test
    public void testDeserializationWithIdAtEnd() throws Exception {
        String jsonData = "{"
                + "\"emp_age\": 30,"
                + "\"emp_first_name\": \"John\","
                + "\"emp_last_name\": \"Doe\","
                + "\"emp_id\": 1234"
                + "}";

        ObjectMapper objectMapper = new ObjectMapper();
        Employee emp = objectMapper.readValue(jsonData, Employee.class);

        assertEquals(1234, emp.getId());
        assertNotNull(emp.getName());
        assertEquals("John", emp.getName().getFirst());
        assertEquals("Doe", emp.getName().getLast());
        assertEquals(30, emp.getAge());
    }
}

@JsonDeserialize(builder = Employee.Builder.class)
class Employee {
    private final long id;
    private final Name name;
    private final int age;

    private Employee(Builder builder) {
        this.id = builder.id;
        this.name = builder.name;
        this.age = builder.age;
    }

    public long getId() {
        return id;
    }

    public Name getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @JsonPOJOBuilder(withPrefix = "set")
    public static class Builder {
        private final long id;
        private Name name;
        private int age;

        @JsonCreator
        public Builder(@JsonProperty("emp_id") long id) {
            this.id = id;
        }

        @JsonUnwrapped
        public void setName(Name name) {
            this.name = name;
        }

        @JsonProperty("emp_age")
        public void setAge(int age) {
            this.age = age;
        }

        public Employee build() {
            return new Employee(this);
        }
    }
}

class Name {
    private final String first;
    private final String last;

    @JsonCreator
    public Name(
        @JsonProperty("emp_first_name") String first,
        @JsonProperty("emp_last_name") String last
    ) {
        this.first = first;
        this.last = last;
    }

    public String getFirst() {
        return first;
    }

    public String getLast() {
        return last;
    }
}
