
import com.google.gson.stream.JsonWriter;
import org.junit.Test;
import java.io.IOException;
import java.io.StringWriter;

public class JsonWriterTest {

    @Test(expected = IllegalArgumentException.class)
    public void testJsonWriterValueWithDoubleInLenientMode() throws IOException {
        StringWriter stringWriter = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(stringWriter);

        // Set lenient to true
        jsonWriter.setLenient(true);

        // This should work in lenient mode, but it throws an exception because of the implementation
        jsonWriter.beginArray();
        jsonWriter.value(Double.NaN);
        jsonWriter.endArray();
    }

    @Test
    public void testJsonWriterValueWithNumberInLenientMode() throws IOException {
        StringWriter stringWriter = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(stringWriter);

        // Set lenient to true
        jsonWriter.setLenient(true);

        // Using the boxed Number type should work in lenient mode
        jsonWriter.beginArray();
        jsonWriter.value((Number) Double.valueOf(Double.NaN)); // This works
        jsonWriter.endArray();

        // Asserting that the written JSON matches the expected output
        String expectedJson = "[NaN]";
        assertEquals(expectedJson, stringWriter.toString());
    }
}
