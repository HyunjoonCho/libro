
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.JsonPointerBasedFilter;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class FilteringParserDelegateTest {

    @Test
    public void testAllowMultipleMatches() throws IOException {
        String json = "{\"items\":[{\"name\":\"item1\"},{\"name\":\"item2\"},{\"name\":\"item1\"}]}";
        JsonFactory jsonFactory = new JsonFactory();
        ObjectMapper objectMapper = new ObjectMapper(jsonFactory);

        // Create JsonParser with the original JSON content
        JsonParser parser = jsonFactory.createParser(json);

        // Create a FilteringParserDelegate to filter the JSON
        JsonPointerBasedFilter filter = new JsonPointerBasedFilter("/items/0/name");
        FilteringParserDelegate filteringParser = new FilteringParserDelegate(parser, filter, true, false);

        // Attempt to parse the filtered JSON content
        String[] expectedNames = {"item1", "item1"}; // assuming _allowMultipleMatches would allow multiple occurrences

        int count = 0;
        while (!filteringParser.isClosed() && count < expectedNames.length) {
            JsonParser.Event event = filteringParser.next();
            if (event == JsonParser.Event.START_OBJECT || event == JsonParser.Event.END_OBJECT) {
                String name = filteringParser.getText();
                if ("item1".equals(name)) {
                    assertEquals(expectedNames[count], name);
                    count++;
                }
            }
        }

        // Assert that all expected occurrences were found
        assertEquals(expectedNames.length, count);
    }
}
