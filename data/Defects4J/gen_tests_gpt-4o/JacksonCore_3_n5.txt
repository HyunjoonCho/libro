
import static org.junit.Assert.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import org.junit.Test;

import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.base.ParserBase;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.io.IOContext;

public class UTF8StreamJsonParserTest {

    @Test
    public void testColumnPositionError() throws Exception {
        // Sample JSON data
        String json = "{ \"key\": \"value\" }";
        InputStream in = new ByteArrayInputStream(json.getBytes("UTF-8"));

        // Setting up the necessary components for the UTF8StreamJsonParser
        IOContext ctxt = new IOContext(new BufferRecycler(), in, false);
        BytesToNameCanonicalizer symbols = BytesToNameCanonicalizer.createRoot();

        byte[] inputBuffer = new byte[512];

        // Simulating a start position that is not zero
        int startPosition = 5;
        int endPosition = json.length();

        UTF8StreamJsonParser parser = new UTF8StreamJsonParser(
                ctxt, 0, in, (ObjectCodec) null, symbols,
                inputBuffer, startPosition, endPosition, false);

        try {
            parser.nextToken(); // attempting to parse should trigger an exception due to improper initialization

            // Parse the JSON object to trigger the calculation of column position
            while (parser.nextToken() != null) {}

        } catch (JsonParseException e) {
            // Get the column position from the exception
            int column = e.getLocation().getColumnNr();
            // Assuming the bug caused incorrect column calculation, the expected column is skewed
            // Adjust the expected value based on how the start position impacts this calculation.
            int expectedColumn = startPosition + 1;

            assertEquals("Column number should match after fix", expectedColumn, column);
        }
    }
}
