
import org.apache.commons.cli.*;

import java.io.File;
import java.io.FileInputStream;

import org.junit.Test;
import static org.junit.Assert.*;

public class OptionParserTest {

    @Test
    public void testFileOptionWithExistingFile() throws Exception {
        // Path to an existing file for testing
        String existingFilePath = "path/to/existing/file.txt"; // Ensure this file exists for the test

        Options options = new Options();
        options.addOption(Option.builder("f")
                .hasArg()
                .type(FileInputStream.class)
                .build());

        String[] args = new String[]{"-f", existingFilePath};
        
        CommandLine cline = new DefaultParser().parse(options, args);

        FileInputStream fileInputStream = null;
        try {
            fileInputStream = (FileInputStream) cline.getParsedOptionValue("f");
            assertNotNull("FileInputStream should not be null", fileInputStream);
            File file = new File(existingFilePath);
            assertTrue("File should exist", file.exists());
        } finally {
            if (fileInputStream != null) {
                fileInputStream.close();
            }
        }
    }

    @Test(expected = Exception.class)
    public void testFileOptionWithNonExistingFile() throws Exception {
        // Path to a non-existing file for testing
        String nonExistingFilePath = "path/to/non/existing/file.txt";

        Options options = new Options();
        options.addOption(Option.builder("f")
                .hasArg()
                .type(FileInputStream.class)
                .build());

        String[] args = new String[]{"-f", nonExistingFilePath};

        CommandLine cline = new DefaultParser().parse(options, args);

        // Attempting to get FileInputStream for a non-existing file should throw an exception
        FileInputStream fileInputStream = (FileInputStream) cline.getParsedOptionValue("f");
    }
}
