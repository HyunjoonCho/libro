
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DateTimeDSTTest {

    @Test
    public void testAmbiguousDSTTransition() {
        DateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID("Europe/London"));
        DateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID("Europe/Oslo"));
        DateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID("Europe/Helsinki"));

        // Convert all times to UTC for comparison
        DateTime britishDateUTC = britishDate.withZone(DateTimeZone.UTC);
        DateTime norwDateUTC = norwDate.withZone(DateTimeZone.UTC);
        DateTime finnishDateUTC = finnishDate.withZone(DateTimeZone.UTC);

        // Print the times for visual inspection
        System.out.println(britishDateUTC);
        System.out.println(norwDateUTC);
        System.out.println(finnishDateUTC);

        // Assert that all the times are equal when converted to UTC
        assertEquals(britishDateUTC, norwDateUTC);
        assertEquals(britishDateUTC, finnishDateUTC);

        // Assert that British time should be interpreted correctly according to the bug report
        assertEquals("2011-10-30T01:59:00.000+01:00", britishDate.toString());
    }
}
