
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.AllowedSolution;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class BracketingNthOrderBrentSolverTest {

    @Test
    public void testBracketingNthOrderBrentSolverAgingIssue() {
        // Define a function with a root at a known location
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                return Math.pow(x - 12500.000001, 3); // Root is extremely close to 12500
            }
        };
        
        // Setup the solver with a high maximum iteration count to see if it hangs
        BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(
                1e-10, 1e-14, 5); // Third argument is the order
        
        try {
            double min = 12500.0;
            double max = 12500.03;
            double startValue = 12500.01;

            // Try solving the function within these unbalanced brackets
            double root = solver.solve(1000, function, min, max, startValue, AllowedSolution.ANY_SIDE);
            
            // Check if the found root is actually close to the desired root
            assertTrue(Math.abs(root - 12500.000001) < 1e-10);
        } catch (Exception e) {
            // This test is primarily to observe if solver hangs or does excessive iterations
            e.printStackTrace();
        }
    }
}
