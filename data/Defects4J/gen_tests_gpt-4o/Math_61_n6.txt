
import org.junit.Test;
import static org.junit.Assert.assertEquals;

class NormalDistribution {
    // Assuming some implementation of NormalDistribution
}

class PoissonDistributionImpl {
    private NormalDistribution normal;
    private double mean;

    public PoissonDistributionImpl(double p, NormalDistribution z) {
        super();
        setNormal(z);
        setMean(p);
    }

    protected void setNormal(NormalDistribution z) {
        this.normal = z;
    }

    protected void setMean(double p) {
        this.mean = p;
    }
    
    public NormalDistribution getNormal() {
        return normal;
    }

    public double getMean() {
        return mean;
    }
}

public class PoissonDistributionImplTest {
    private static class TestPoissonDistributionImpl extends PoissonDistributionImpl {
        private boolean setNormalCalled = false;
        private boolean setMeanCalled = false;

        public TestPoissonDistributionImpl(double p, NormalDistribution z) {
            super(p, z);
        }

        @Override
        protected void setNormal(NormalDistribution z) {
            setNormalCalled = true;
            super.setNormal(z);
        }

        @Override
        protected void setMean(double p) {
            setMeanCalled = true;
            super.setMean(p);
        }

        public boolean isSetNormalCalled() {
            return setNormalCalled;
        }

        public boolean isSetMeanCalled() {
            return setMeanCalled;
        }
    }

    @Test
    public void testConstructorCallsOverriddenMethods() {
        NormalDistribution normalDist = new NormalDistribution();
        double mean = 5.0;

        TestPoissonDistributionImpl instance = new TestPoissonDistributionImpl(mean, normalDist);

        // Examining if the overridden methods were called during construction
        assertEquals(true, instance.isSetNormalCalled());
        assertEquals(true, instance.isSetMeanCalled());
        assertEquals(normalDist, instance.getNormal());
        assertEquals(mean, instance.getMean(), 0.0);
    }
}
