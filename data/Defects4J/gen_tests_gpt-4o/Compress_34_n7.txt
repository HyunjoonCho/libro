
import org.apache.commons.compress.archivers.zip.X7875_NewUnix;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.tika.Tika;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.nio.file.Files;

import static org.junit.Assert.assertThrows;

public class TikaDetectTest {

    @Test
    public void testParseFromLocalFileDataException() throws Exception {
        // Create a zip with a specific problematic entry
        byte[] zipContent = createTestZip();
        
        Tika tika = new Tika();
        assertThrows(ArrayIndexOutOfBoundsException.class, () -> {
            // Simulate reading this as a file
            InputStream inputStream = new ByteArrayInputStream(zipContent);
            File tempFile = File.createTempFile("test", ".zip");
            tempFile.deleteOnExit();
            try (FileOutputStream fos = new FileOutputStream(tempFile)) {
                fos.write(zipContent);
            }
            
            byte[] content = Files.readAllBytes(tempFile.toPath());
            String name = "TR_01.ZIP";

            // This should throw ArrayIndexOutOfBoundsException due to the bug
            tika.detect(content, name);
        });
    }

    private byte[] createTestZip() throws Exception {
        // Here, you would create a zip file in memory that has the structure
        // similar to the described in the bug report, essentially mimicking the
        // local zip entry with 0-sized 'ux' field.

        // Return hardcoded byte array to represent this zip
        return new byte[] {
            80, 75, 3, 4, 20, 0, 0, 0, 8, 0, 64, 0, -49, -115, -8, 73, -19,
            124, 82, 5, 0, 0, 0, 5, 0, 0, 0, 3, 0, 4, 0, 117, 120, 0, 0, 0, 0,
            // The rest of the bytes should be the same as what triggers the bug.
        };
    }
}
