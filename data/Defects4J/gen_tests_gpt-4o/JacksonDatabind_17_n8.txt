public void testReadTreeWithDefaultTypingEnabled() throws IOException {
    ObjectMapper mapper = new ObjectMapper()
            .enableDefaultTyping()
            .enable(MapperFeature.AUTO_DETECT_GETTERS)
            .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)
            .disable(MapperFeature.USE_GETTERS_AS_SETTERS)
            .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
            .enable(SerializationFeature.INDENT_OUTPUT)
            .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

    Foo foo = new Foo("bar");
    String serialized = mapper.writeValueAsString(foo); // {"bar" : "bar"}

    try {
        JsonNode jsonNode = mapper.readTree(serialized); // Expecting exception here
        fail("Expected JsonMappingException due to default typing enabled with no type info provided.");
    } catch (JsonMappingException e) {
        assertTrue(e.getMessage().contains("Unexpected token (START_OBJECT), expected START_ARRAY"));
    }
}

static class Foo {
    private String bar;

    public Foo() {
    }

    public Foo(String bar) {
        this.bar = bar;
    }

    public String getBar() {
        return bar;
    }

    public void setBar(String bar) {
        this.bar = bar;
    }
}