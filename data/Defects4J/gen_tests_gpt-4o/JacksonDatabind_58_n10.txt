
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.Test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

@JsonIgnoreProperties("cause")
public class MyException extends RuntimeException {
    private String message;

    public MyException(String message) {
        this.message = message;
    }

    // No-argument constructor for Jackson
    private MyException() {}

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}

public class ExceptionDeserializationTest {

    @Test
    public void testDeserializeException() {
        String json = "{\"message\": \"Test exception message\"}";

        ObjectMapper mapper = new ObjectMapper();
        try {
            MyException exception = mapper.readValue(json, MyException.class);
            fail("Expected an InvalidDefinitionException to be thrown");
        } catch (InvalidDefinitionException e) {
            // Check if the cause of exception is related to accessing the private 'cause' field
            assertTrue(e.getMessage().contains("Illegal access"));
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
