public void testCMAESOptimizerBoundsResolution() {
    double lowerBound = 0.0;
    double upperBound = 10.0;
    double targetNearLowerBound = 0.1;
    double targetNearUpperBound = 9.9;

    CMAESOptimizer optimizer = new CMAESOptimizer(10000, 1e-9, true, 0, 0, 
        new MersenneTwister(), false, new SimplePointChecker<>(1e-9, 1e-9));

    MaxEval maxEval = new MaxEval(10000);
    SimpleBounds bounds = new SimpleBounds(new double[]{lowerBound}, new double[]{upperBound});
    SimpleValueChecker checker = new SimpleValueChecker(1e-9, 1e-9);
    OptimizationData[] data = new OptimizationData[] {new MaxEval(maxEval), bounds, checker};

    MultivariateFunction targetFunction = point -> Math.pow(point[0] - targetNearLowerBound, 2);

    PointValuePair resultNearLower = optimizer.optimize(
        new ObjectiveFunction(targetFunction),
        GoalType.MINIMIZE,
        new InitialGuess(new double[]{5.0}),
        bounds,
        maxEval
    );

    targetFunction = point -> Math.pow(point[0] - targetNearUpperBound, 2);

    PointValuePair resultNearUpper = optimizer.optimize(
        new ObjectiveFunction(targetFunction),
        GoalType.MINIMIZE,
        new InitialGuess(new double[]{5.0}),
        bounds,
        maxEval
    );

    assertEquals(targetNearLowerBound, resultNearLower.getPoint()[0], 1e-6);
    assertEquals(targetNearUpperBound, resultNearUpper.getPoint()[0], 1e-6);
}