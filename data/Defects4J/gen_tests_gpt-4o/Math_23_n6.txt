
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;

import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @org.junit.Test
    public void testBrentOptimizerReportsBestPoint() {
        // Define a simple quadratic function, where the minimum is known
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        UnivariatePointValuePair result = optimizer.optimize(
                new MaxEval(100),
                new UnivariateObjectiveFunction(function),
                new SearchInterval(-10, 10)
        );

        // Assert that the optimizer finds the minimum at x = 2
        assertEquals(2.0, result.getPoint(), 1e-8);
        // Assert that the minimum value is 0 at x = 2
        assertEquals(0.0, result.getValue(), 1e-8);
    }
}
