
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.json.JsonMapper;
import java.text.SimpleDateFormat;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.junit.Test;
import static org.junit.Assert.*;

public class SqlDateSerializationTest {

    @Test
    public void testCustomSqlDateSerialization() throws Exception {
        // Set up the ObjectMapper with a custom format for java.sql.Date
        ObjectMapper mapper = JsonMapper.builder()
                .addModule(new JavaTimeModule())
                .build();
        
        mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));

        // Disable timestamps to ensure java.sql.Date is serialized as a string
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        // The expected date to be serialized
        java.sql.Date sqlDate = java.sql.Date.valueOf("2023-03-15");

        // Serialize the java.sql.Date
        String json = mapper.writeValueAsString(sqlDate);

        // Assert that the serialized date matches the expected string format
        assertEquals("\"2023-03-15\"", json);
    }
}
