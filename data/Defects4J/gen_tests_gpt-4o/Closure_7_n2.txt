
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class TypeInferenceTest {

    @Test
    public void testTypeInferenceForArray() {
        Object object = new int[] { 1, 2, 3 };
        
        boolean isMatched = isMatched(object);
        
        // Verify that the check leads to the correct length determination
        // Here, we're confirming it doesn't throw errors and computes the "length"
        assertFalse(isMatched);  // Assuming isMatched() ultimately returns false
    }
    
    public boolean isMatched(Object object) {
        if (googIsDef(object)) {
            if (googIsFunction(object)) {
                // return (boolean) object();
            } else if (googIsBoolean(object)) {
                // return (boolean) object;
            } else if (googIsString(object)) {
                // return googIsDef(object);
            } else if (googIsArray(object)) {
                int i = ((int[]) object).length;  // Cast to int[] to get the length
                assertEquals(3, i);  // This would not be part of the original code, but checks
                                     // the current test scenario (3 items in the array)
            }
        }
        return false;
    }

    // Dummy implementations of the goog.* checks to mimic the JavaScript functions
    private boolean googIsDef(Object object) {
        return object != null;
    }

    private boolean googIsFunction(Object object) {
        return object instanceof Runnable; // Simplified check for demo purposes
    }

    private boolean googIsBoolean(Object object) {
        return object instanceof Boolean;
    }

    private boolean googIsString(Object object) {
        return object instanceof String;
    }

    private boolean googIsArray(Object object) {
        return object instanceof int[];
    }
}
