public void testPolymorphicEnumDeserialization() throws Exception {
    String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";
    
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new KotlinModule());
    
    Base expected = new Contact(new To("Foo"));
    Base result = mapper.readValue(json, Base.class);
    
    assertEquals(expected, result);
}

interface Base {}

@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.EXTERNAL_PROPERTY,
    property = "kind"
)
@JsonSubTypes({
    @JsonSubTypes.Type(value = Contact.class, name = "CONTACT")
})
class Contact implements Base {
    public To to;
    
    @JsonCreator
    public Contact(@JsonProperty("to") To to) {
        this.to = to;
    }
    
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Contact contact = (Contact) o;
        return Objects.equals(to, contact.to);
    }

    @Override
    public int hashCode() {
        return Objects.hash(to);
    }
}

class To {
    public String name;

    @JsonCreator
    public To(@JsonProperty("name") String name) {
        this.name = name;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        To to = (To) o;
        return Objects.equals(name, to.name);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name);
    }
}