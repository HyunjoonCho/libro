
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.kotlin.KotlinModule;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

// Define the Enum for Kind
enum Kind {
    CONTACT
}

// Define the abstract base class with type info
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "kind")
@JsonSubTypes({
    @JsonSubTypes.Type(value = Contact.class, name = "CONTACT")
})
abstract class Invite {
    public abstract Kind getKind();
}

// Implement subclass
class Contact extends Invite {
    public Kind kind;
    public String name;

    public Contact() {}

    @Override
    public Kind getKind() {
        return kind;
    }
}

// Test class
public class EnumPolymorphismTest {
    @Test
    public void testEnumPolymorphismDeserialization() throws JsonProcessingException {
        // JSON to be deserialized
        String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";

        // ObjectMapper with Kotlin Module
        ObjectMapper objectMapper = new ObjectMapper().registerModule(new KotlinModule());

        // Perform deserialization
        Invite invite = objectMapper.readValue(json, Invite.class);
        
        // Validate the result
        assertEquals(Kind.CONTACT, invite.getKind());
        assertEquals("Foo", ((Contact) invite).name);
    }
}
