
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.BracketFinder;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBestPointReporting() {
        // Define a simple quadratic function
        UnivariateFunction function = x -> -(x - 1) * (x - 1);

        // Initial search interval
        SearchInterval interval = new SearchInterval(0, 2);

        // Brent optimizer with a specified convergence absolute and relative threshold
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        
        // Optimize
        UnivariatePointValuePair result = optimizer.optimize(
                new MaxEval(100),
                new UnivariateObjectiveFunction(function),
                interval
        );

        // Check that the optimizer returns the known global maximum at x = 1
        assertEquals("Optimizer did not return the best point.", 1, result.getPoint(), 1e-6);
    }
}
