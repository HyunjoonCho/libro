public void testInheritanceDetectionWithDirectPrototypeAssignment() {
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    String jsCode = "/**\n" +
                    "* @constructor\n" +
                    "*/\n" +
                    "function SuperClass() {}\n" +
                    "SuperClass.prototype.CustomMethod = function() {};\n" +
                    "/**\n" +
                    "* @constructor\n" +
                    "* @extends {SuperClass}\n" +
                    "*/\n" +
                    "function SubClass() {}\n" +
                    "SubClass.prototype = new SuperClass();\n" +
                    "/**\n" +
                    "* @override\n" +
                    "*/\n" +
                    "SubClass.prototype.CustomMethod = function() {\n" +
                    " this.myProperty = \"value\";\n" +
                    "};\n" +
                    "window['SubClassInstance'] = new SubClass();";
    Result result = compile(jsCode, options);
    assertTrue(result.warnings.length > 0);
    assertTrue(result.warnings[0].getType().equals(DiagnosticGroups.UNKNOWN_OVERRIDE));
}