
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;

import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class DateTimeTest {

    @Test
    public void testWithLaterOffsetAtOverlap() {
        // Set the time zone to America/Sao_Paulo
        TimeZone.setDefault(TimeZone.getTimeZone("America/Sao_Paulo"));
        DateTimeZone.setDefault(DateTimeZone.forID("America/Sao_Paulo"));

        DateTime dtch;

        // Create a DateTime object at the end of the day with -02:00 offset
        dtch = new DateTime(2012, 2, 25, 5, 5, 5, 5).millisOfDay().withMaximumValue();
        assertEquals(-2, dtch.getZone().getOffset(dtch) / (60 * 60 * 1000));

        // Adding milliseconds to move into the overlap period
        dtch = dtch.plus(60001);
        assertEquals(-3, dtch.getZone().getOffset(dtch) / (60 * 60 * 1000));

        // Change to the earlier offset
        dtch = dtch.withEarlierOffsetAtOverlap();
        assertEquals(-2, dtch.getZone().getOffset(dtch) / (60 * 60 * 1000));

        // Attempt to change back to the later offset
        dtch = dtch.withLaterOffsetAtOverlap();
        // Expected to have offset of -03:00, but it remains -02:00 due to the bug
        assertEquals(-3, dtch.getZone().getOffset(dtch) / (60 * 60 * 1000));
    }
}
