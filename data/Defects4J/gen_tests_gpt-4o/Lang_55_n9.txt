
import org.apache.commons.lang3.time.StopWatch;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class StopWatchTest {

    @Test
    public void testSuspendDoesNotActAsSplitWhenStopped() throws InterruptedException {
        StopWatch sw = new StopWatch();

        // Start the stopwatch and let it run for 1 second
        sw.start();
        Thread.sleep(1000); // Simulate time passing
        sw.suspend(); // Suspend the stopwatch

        // Capture the time after the first second and ensure it is recorded correctly
        long time1 = sw.getTime();
        assertEquals(1000, time1);

        // Let 2 more seconds pass while suspended
        Thread.sleep(2000);

        // Ensure the time hasn't changed while suspended
        assertEquals(time1, sw.getTime());

        // Resume and let it run for an additional 3 seconds
        sw.resume();
        Thread.sleep(3000);
        sw.suspend(); // Suspend again

        // Capture the new time after resuming and running for 3 seconds
        long time2 = sw.getTime();
        assertEquals(4000, time2); // Expecting 1000 (first) + 3000 (second)

        // Let 4 more seconds pass while suspended
        Thread.sleep(4000);

        // Ensure the time hasn't changed while suspended
        assertEquals(time2, sw.getTime());

        // Stop the stopwatch, without it recording the suspended period
        sw.stop();

        // The time should remain the same as during the last suspend
        assertEquals(time2, sw.getTime());
    }
}
