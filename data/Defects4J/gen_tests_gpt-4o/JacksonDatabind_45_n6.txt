
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;

import java.util.Locale;

public class NumberParserTest {

    private NumberParser numberParser;

    @Before
    public void setUp() {
        numberParser = new NumberParser();
    }

    @Test
    public void testNumberParsingWithExplicitNumberShape() {
        // Before the fix, this test would fail due to locale allowing text representation
        try {
            Object result = numberParser.parseNumber("one", NumberParser.Shape.NUMBER, Locale.US);
            fail("Expected an exception for textual input with shape NUMBER");
        } catch (IllegalArgumentException e) {
            assertEquals("Shape is NUMBER but input is textual", e.getMessage());
        }
    }

    // Hypothetical NumberParser class to illustrate the issue
    private static class NumberParser {
        enum Shape { NUMBER, TEXT }

        public Object parseNumber(String input, Shape shape, Locale locale) {
            if (shape == Shape.NUMBER) {
                // Prior to the fix, the following logic incorrectly allowed parsing text based on locale
                if (isTextualInput(input) && localeAllowsTextual(locale)) {
                    throw new IllegalArgumentException("Shape is NUMBER but input is textual");
                }
                return Integer.parseInt(input); // Simplified for illustration purposes
            } else {
                return parseTextualNumber(input, locale);
            }
        }

        private boolean isTextualInput(String input) {
            // Dummy implementation for test illustration
            return !input.matches("\\d+");
        }

        private boolean localeAllowsTextual(Locale locale) {
            // Dummy implementation for test illustration
            return true;
        }

        private Object parseTextualNumber(String input, Locale locale) {
            // Simplified: real implementation would need to parse based on locale
            if ("one".equals(input)) return 1;
            throw new IllegalArgumentException("Unsupported textual input " + input);
        }
    }
}
