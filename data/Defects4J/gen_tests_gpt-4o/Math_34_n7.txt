
import org.junit.Test;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.ListPopulation;
import org.apache.commons.math3.genetics.Population;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class ListPopulationTest {

    @Test
    public void testIteratorModification() {
        List<Chromosome> initialChromosomes = new ArrayList<>();
        // Assume ChromosomeImpl is a valid implementation of Chromosome
        initialChromosomes.add(new ChromosomeImpl()); 
        initialChromosomes.add(new ChromosomeImpl());

        Population population = new ListPopulation(initialChromosomes, 10);

        Iterator<Chromosome> iterator = population.iterator();
        
        try {
            iterator.next();
            iterator.remove(); // Attempt to remove chromosome
            fail("Expected UnsupportedOperationException because the iterator should be unmodifiable.");
        } catch (UnsupportedOperationException e) {
            // Expected exception, do nothing
        }

        assertEquals(2, population.getPopulationSize());
    }
    
    // Mock Chromosome implementation for testing purposes
    private static class ChromosomeImpl extends Chromosome {
        @Override
        public double fitness() {
            return 0;
        }
    }
}
