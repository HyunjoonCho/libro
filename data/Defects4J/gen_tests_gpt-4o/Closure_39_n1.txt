public void testExternExportWithTypedef() {
    String source = ""
        + "/** @typedef {Object} */\n"
        + "var MyType;\n"
        + "/** @typedef {{property: string, value: number}} */\n"
        + "var ComplexType;\n"
        + "/**\n"
        + " * @param {MyType=} data\n"
        + " * @return {ComplexType}\n"
        + " */\n"
        + "function processData(data) {\n"
        + "  return {property: 'test', value: 123};\n"
        + "}\n"
        + "var result = processData({});\n";

    CompilerOptions options = new CompilerOptions();
    options.setExternExports(true);
    options.setIdeMode(true);

    Compiler compiler = new Compiler();
    Result result = compiler.compile(ImmutableList.of(SourceFile.fromCode("externs.js", "")),
                                     ImmutableList.of(SourceFile.fromCode("source.js", source)),
                                     options);

    String externExports = result.externExport;
    String expectedExternExports = "/** @typedef {...} MyType */\n"
                                 + "/** @typedef {{property:string,value:number}} ComplexType */\n"
                                 + "/**\n"
                                 + " * @param {ComplexType=} data\n"
                                 + " * @return {ComplexType}\n"
                                 + " */\n"
                                 + "function processData(data) {}\n";

    assertEquals(expectedExternExports.trim(), externExports.trim());
}