public void testErrorsCreatingParsingDatesWithSpecificTimeZones() {
    Set<String> timeZones = DateTimeZone.getAvailableIDs();
    DateTimeFormatter formatter = DateTimeFormat.forPattern("MM/dd/yyyy HH:mm:ss.SSS ZZZ");
    int numTimeZonesTested = 0;
    int numTimeZonesFailed = 0;
    int numTimeZonesException = 0;

    for (String timeZone : timeZones) {
        numTimeZonesTested++;
        DateTime dateTime = DateTime.now().withZone(DateTimeZone.forID(timeZone));
        String dateTimeZoneId = dateTime.getZone().getID();

        if (!timeZone.equals(dateTimeZoneId)) {
            numTimeZonesFailed++;
            continue;
        }

        try {
            DateTime convertedDateTime = formatter.parseDateTime(formatter.print(dateTime));

            if (!dateTime.equals(convertedDateTime)) {
                numTimeZonesFailed++;
            }
        } catch (IllegalArgumentException iae) {
            numTimeZonesException++;
        }
    }

    assertTrue("There should not be any failed time zone conversions", numTimeZonesFailed > 0);
    assertTrue("There should not be any exceptions thrown for time zones", numTimeZonesException > 0);
}