
import org.apache.commons.text.ExtendedMessageFormat;
import org.apache.commons.text.FormatFactory;
import java.text.Format;
import java.util.HashMap;
import java.util.Map;
import junit.framework.TestCase;

public class ExtendedMessageFormatTest extends TestCase {

    public void testOutOfMemoryWithQuotes() {
        Map<String, FormatFactory> formatRegistry = new HashMap<>();
        formatRegistry.put(DummyFormatFactory.DUMMY_FORMAT, new DummyFormatFactory());

        // This pattern contains single quotes which are causing the issue
        String pattern = "it''s a {dummy} 'test'!";

        try {
            // Instantiation of ExtendedMessageFormat with the problematic pattern
            ExtendedMessageFormat mf = new ExtendedMessageFormat(pattern, formatRegistry);

            // Try formatting a message to trigger the OutOfMemoryError
            String formattedPattern = mf.format(new Object[]{"great"});
            fail("Expected OutOfMemoryError due to formatting, but received: " + formattedPattern);
        } catch (OutOfMemoryError e) {
            // Test passes if OutOfMemoryError is thrown
            System.out.println("Caught expected OutOfMemoryError: " + e.getMessage());
        }
    }

    // Dummy format factory for testing
    static class DummyFormatFactory implements FormatFactory {

        public static final String DUMMY_FORMAT = "dummy";

        @Override
        public Format getFormat(String name, String args, Map<String, ?> registry) {
            return new DummyFormat();
        }
    }

    // Dummy format class for simple handling
    static class DummyFormat extends Format {
        @Override
        public StringBuffer format(Object obj, StringBuffer toAppendTo, java.text.FieldPosition pos) {
            return toAppendTo.append(obj.toString());
        }

        @Override
        public Object parseObject(String source, java.text.ParsePosition pos) {
            return source;
        }
    }
}
