public void testTruncatedZipFileErrorMessage() {
    try {
        // Assuming `createTruncatedZipFile` generates a truncated .zip file for testing purposes
        File truncatedZip = createTruncatedZipFile();
        try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(truncatedZip))) {
            while (zipInputStream.getNextEntry() != null) {
                // Just attempt to read entries
            }
        }
        fail("Expected EOFException was not thrown");
    } catch (EOFException e) {
        String message = e.getMessage();
        // Check that the message does not contain excessive data
        assertTrue("Error message is too large", message.length() < 1024);
    } catch (IOException e) {
        fail("Unexpected IOException: " + e.getMessage());
    }
}

private File createTruncatedZipFile() throws IOException {
    // Implement a method to create a deliberately truncated zip file
    File tempFile = File.createTempFile("truncated", ".zip");
    try (FileOutputStream fos = new FileOutputStream(tempFile);
         ZipOutputStream zos = new ZipOutputStream(fos)) {
        ZipEntry entry = new ZipEntry("test.txt");
        zos.putNextEntry(entry);
        zos.write("Hello".getBytes());
        // Do not close the entry or the zip to ensure it is truncated
    }
    return tempFile;
}