public void testTypeHierarchyAdapter() {
    GsonBuilder builder = new GsonBuilder();
    builder.registerTypeHierarchyAdapter(Vehicle.class, new JsonDeserializer<Vehicle>() {
        @Override
        public Vehicle deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
            JsonObject jsonObject = json.getAsJsonObject();
            String type = jsonObject.get("type").getAsString();
            if ("Truck".equals(type)) {
                return new Truck();
            } else if ("Car".equals(type)) {
                return new Car();
            }
            throw new JsonParseException("Unknown element type: " + type);
        }
    });

    Gson gson = builder.create();
    String carJson = "{\"type\":\"Car\"}";
    Vehicle car = gson.fromJson(carJson, Car.class);
    assertTrue(car instanceof Car);
    
    String truckJson = "{\"type\":\"Truck\"}";
    try {
        Car truck = gson.fromJson(truckJson, Car.class);
        fail("Expected a JsonParseException to be thrown");
    } catch (JsonParseException e) {
        assertEquals("Unknown element type: Truck", e.getMessage());
    }
}