
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class RegulaFalsiSolverTest {

    @Test(expected = org.apache.commons.math3.exception.TooManyEvaluationsException.class)
    public void testRegulaFalsiSolverFailure() {
        // Define the univariate function
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        // Initialize the Regula Falsi Solver
        UnivariateSolver solver = new RegulaFalsiSolver();
        
        // Attempt to find the root, expect failure due to exceeding evaluation limit
        solver.solve(100, f, 1, 10);
    }

    @Test
    public void testPegasusSolverSuccess() {
        // Define the same univariate function
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        // Initialize the Pegasus Solver
        UnivariateSolver solver = new PegasusSolver();

        // Find the root with the Pegasus Solver
        double root = solver.solve(100, f, 1, 10);

        // Assert the expected approximate root value
        assertEquals(Math.log(Math.pow(Math.PI, 3.0)), root, 1e-6);
    }
}
