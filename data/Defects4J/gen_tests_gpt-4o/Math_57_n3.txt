
import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

public class KMeansPlusPlusClustererTest {

    @Test
    public void testTruncationIssue() {
        List<Clusterable> points = new ArrayList<>();
        // Adding points with very small distances
        points.add(new DoublePoint(new double[]{0.001, 0.001}));
        points.add(new DoublePoint(new double[]{0.002, 0.002}));
        points.add(new DoublePoint(new double[]{0.003, 0.003}));
        points.add(new DoublePoint(new double[]{0.004, 0.004}));
        
        // Using KMeansPlusPlusClusterer to test initial cluster selection
        KMeansPlusPlusClusterer<Clusterable> clusterer = new KMeansPlusPlusClusterer<>(2, 100);
        List<Cluster<Clusterable>> clusters = clusterer.cluster(points);
        
        // Assert that we have created non-empty clusters
        assertFalse(clusters.isEmpty());
        for (Cluster<Clusterable> cluster : clusters) {
            assertFalse(cluster.getPoints().isEmpty());
        }
    }
}
