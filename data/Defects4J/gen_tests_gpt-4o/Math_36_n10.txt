
import org.apache.commons.math3.fraction.BigFraction;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.math.BigInteger;

public class BigFractionTest {

    @Test
    public void testDoubleValueWithLargeNumeratorAndDenominator() {
        // Use a numerator and denominator that are both larger than Double.MAX_VALUE
        BigInteger largeNumerator = new BigInteger("1".repeat(309)); // Create a BigInteger with 309 digits
        BigInteger largeDenominator = new BigInteger("2".repeat(308)); // Create a smaller BigInteger but still large

        BigFraction bigFraction = new BigFraction(largeNumerator, largeDenominator);

        // Calculate expected value in a way that avoids direct division
        double expectedValue = largeNumerator.doubleValue() / largeDenominator.doubleValue();

        // Due to the issue, this assertion will currently fail and return Double.NaN
        assertEquals(expectedValue, bigFraction.doubleValue(), 1e-10);
    }
}
