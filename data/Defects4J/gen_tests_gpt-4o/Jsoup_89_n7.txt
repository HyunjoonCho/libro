
import org.junit.Test;
import static org.junit.Assert.*;

public class AttributeTest {

    // Mock class to simulate the Attributes parent class.
    // This is a simplified version for test purposes.
    static class Attributes {
        // Assuming there's a NotFound constant, typical usage in collections.
        public static final int NotFound = -1;

        public String[] vals;
        public String[] keys;

        public String get(String key) {
            // Dummy implementation
            return null;
        }

        public int indexOfKey(String key) {
            // Dummy implementation
            return NotFound;
        }
    }

    // The actual Attribute class we need to test.
    static class Attribute {
        private String key;
        private String val;
        private Attributes parent;

        public Attribute(String key, Attributes parent) {
            this.key = key;
            this.parent = parent;
        }

        public String setValue(String val) {
            // The method under test
            String oldVal = parent != null ? parent.get(this.key) : null;
            if (parent != null) {
                int i = parent.indexOfKey(this.key);
                if (i != Attributes.NotFound)
                    parent.vals[i] = val;
            }
            this.val = val;
            return oldVal;
        }
    }

    @Test
    public void testSetValueWithoutParent() {
        Attribute attribute = new Attribute("testKey", null);
        try {
            attribute.setValue("newValue");
            // If no exception occurs, the test fails.
            fail("Expected NullPointerException was not thrown.");
        } catch (NullPointerException e) {
            // The NPE should occur at the line: String oldVal = parent.get(this.key);
            // If exception is thrown, the behavior is as expected initially.
            assertEquals(e.getMessage(), "Cannot read field \"vals\" because \"parent\" is null");
        }
    }
}
