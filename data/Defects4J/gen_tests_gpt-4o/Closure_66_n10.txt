
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;

public class EnumTypingTest {

    public static void main(String[] args) throws Exception {
        testEnumTyping();
    }

    public static void testEnumTyping() throws Exception {
        String jsCode = ""
                + "/**\n"
                + " * @type {Object}\n"
                + " */\n"
                + "var NS = {};\n"
                + "\n"
                + "/**\n"
                + " * @enum {number}\n"
                + " */\n"
                + "NS.keys = {\n"
                + "    a: 1,\n"
                + "    b: 2,\n"
                + "    c: 3\n"
                + "};\n"
                + "\n"
                + "/**\n"
                + " * @enum\n"
                + " */\n"
                + "window['gKEYS'] = NS.keys;\n";

        String[] compilerArgs = {
                "--compilation_level", "ADVANCED_OPTIMIZATIONS",
                "--summary_detail_level", "3",
                "--warning_level", "VERBOSE"
        };

        CompilerOptions options = new CompilerOptions();
        CommandLineRunner runner = new CommandLineRunner(compilerArgs) {
            @Override
            protected int doRun() {
                setRunOptions(options);
                return super.run();
            }
        };

        Result result = runner.run();
        if (!result.success) {
            System.out.println("Compilation failed with errors");
        }

        // Check if typed percent is above expected threshold (Not directly possible, mock this based on issues observed)
        // This is to see if the enum is correctly typed
        double expectedTypedPercent = 90.0;
        double actualTypedPercent = computeTypedPercent(result);
        
        assert actualTypedPercent >= expectedTypedPercent : 
            "Typed percent is lower than expected. Actual: " + actualTypedPercent + "%, Expected: " + expectedTypedPercent + "%";
    }

    private static double computeTypedPercent(Result result) {
        // Placeholder logic for actual typed percentage extraction
        // In real use, this would be computed based on the compilation result's analysis
        // Here we simulate it based on the assumption that the issue causes lower than expected percentage.
        return 60.0; // Example faulty percentage due to the described bug
    }
}
