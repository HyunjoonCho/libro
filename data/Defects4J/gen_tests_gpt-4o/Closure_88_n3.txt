
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testIncorrectAssignmentRemoval() {
        // The original JavaScript code
        String originalJsCode = "function closureCompilerTest(someNode) {" +
                " var nodeId;" +
                " return ((nodeId=someNode.id) && (nodeId=parseInt(nodeId.substr(1))) && nodeId>0);" +
                "}";

        // Create a Closure Compiler instance
        Compiler compiler = new Compiler();

        // Set the compilation options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        SourceFile externalJsLibrary = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", originalJsCode);
        compiler.compile(externalJsLibrary, input, options);

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Check if the assignment "nodeId=someNode.id" is still present
        assertTrue("Compiled code should contain 'nodeId=someNode.id'", compiledCode.contains("nodeId=someNode.id"));
    }
}
