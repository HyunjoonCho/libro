public void testIncorrectAssignmentRemoval() {
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    Compiler compiler = new Compiler();
    
    String originalCode = "function closureCompilerTest(someNode) {" +
                          "  var nodeId;" +
                          "  return ((nodeId=someNode.id) && (nodeId=parseInt(nodeId.substr(1))) && nodeId>0);" +
                          "}";
    SourceFile extern = SourceFile.fromCode("externs", "");
    SourceFile input = SourceFile.fromCode("input", originalCode);
    
    compiler.compile(extern, input, options);
    
    String compiledCode = compiler.toSource();

    assertFalse("Compiled code should not replace assignment of 'nodeId=someNode.id' with 'b.id'", 
                compiledCode.contains("b.id&&(a=parseInt(a.substr(1)))&&a>0"));
}