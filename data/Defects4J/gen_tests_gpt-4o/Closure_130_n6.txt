public void testArgumentsVisibilityWithAdvancedOptimizations() {
    // Create a context with Rhino or any other suitable JavaScript engine
    Context ctx = Context.enter();
    try {
        Scriptable scope = ctx.initStandardObjects();

        // Define the JavaScript function as a string
        String script = ""
            + "function outer() {"
            + "   return function() {"
            + "       var args = arguments;"
            + "       setTimeout(function() {"
            + "           return args[0];"
            + "       }, 0);"
            + "   };"
            + "}"
            + "var func = outer();"
            + "func('test');";

        // Evaluate the script
        Object result = ctx.evaluateString(scope, script, "testScript", 1, null);

        // Test the expected alert value
        assertNotNull(result);
        assertTrue(result instanceof Function);

        // Invoke the function to simulate setTimeout
        Function functionResult = (Function) result;
        Object returnedValue = functionResult.call(ctx, scope, scope, new Object[] { "test" });

        // Verify that 'args' preserved its scope and the correct argument is alerted
        assertEquals("test", Context.toString(returnedValue));
    } finally {
        Context.exit();
    }
}