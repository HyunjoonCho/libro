
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Use;
import com.fasterxml.jackson.annotation.JsonTypeId;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

// Define the external type class
class Wrapper {
    @JsonTypeId
    public String type;

    @JsonDeserialize(as = Impl.class)
    @JsonTypeInfo(use = Use.ID, include = As.EXTERNAL_PROPERTY, property = "type")
    public Base data;
}

interface Base {
    String getValue();
}

// Implementation of Base
class Impl implements Base {
    private String value;

    public Impl() {}

    public Impl(String value) {
        this.value = value;
    }

    @Override
    public String getValue() {
        return value;
    }

    public void setValue(String value) {
        this.value = value;
    }
}

public class ExternalTypeIdTest {

    @Test
    public void testExternalTypeIdBeforePojo() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"type\":\"Impl\", \"data\":{\"value\":\"example\"}}";

        Wrapper wrapper = mapper.readValue(json, Wrapper.class);

        assertEquals("Impl", wrapper.type);
        assertEquals("example", wrapper.data.getValue());
    }
}
