
import org.apache.commons.math3.stat.Frequency;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class FrequencyTest {

    @Test
    public void testFrequencyWithNonComparableObject() {
        Frequency frequency = new Frequency();
        final Object nonComparableObject = new Object();
        
        try {
            // Attempt to add a non-Comparable object
            frequency.addValue(nonComparableObject);
            fail("Expected IllegalArgumentException when adding a non-Comparable object.");
        } catch (IllegalArgumentException e) {
            // Expected behavior as the addValue method should not allow non-Comparable objects
        }
    }

    @Test
    public void testGetCountAndGetPctWithNonComparableObject() {
        Frequency frequency = new Frequency();
        final Object nonComparableObject = new Object();
        
        // This call should fail with IllegalArgumentException as adding non-Comparable should not be allowed
        try {
            frequency.addValue(nonComparableObject);
            fail("Expected IllegalArgumentException when adding a non-Comparable object.");
        } catch (IllegalArgumentException e) {
            // It should not add the object, thus getCount and getPct should behave as if the object doesn't exist
        }

        // Ensure methods behave correctly by returning 0 for the non-added object
        assertEquals("Count for non-Comparable object should be 0", 0, frequency.getCount(nonComparableObject));
        assertEquals("Pct for non-Comparable object should be 0.0", 0.0, frequency.getPct(nonComparableObject), 0.0);
    }
}
