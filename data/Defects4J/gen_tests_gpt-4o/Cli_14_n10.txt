
import org.apache.commons.cli2.CommandLine;
import org.apache.commons.cli2.Group;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.commandline.Parser;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.validation.FileValidator;
import org.junit.Test;
import java.io.File;
import static org.junit.Assert.fail;

public class CLI2SampleTest {

    @Test
    public void testFileValidatorClassCastException() {
        String existingFilePath = new File("path-to-an-existing-file").getAbsolutePath(); // Make sure this file exists

        // Setup options with file validator
        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();

        DefaultOption fileNameOption = obuilder
                .withShortName("f")
                .withLongName("file-name")
                .withRequired(true)
                .withDescription("name of an existing file")
                .withArgument(abuilder
                        .withName("file-name")
                        .withValidator(FileValidator.getExistingFileInstance())
                        .create())
                .create();

        Group options = gbuilder
                .withName("options")
                .withOption(fileNameOption)
                .create();

        Parser parser = new Parser();
        parser.setHelpTrigger("--help");
        parser.setGroup(options);

        try {
            // Simulate the command line parsing with an existing file argument
            CommandLine cl = parser.parseAndHelp(new String[]{"--file-name", existingFilePath});
            fail("Expected a ClassCastException to be thrown");
        } catch (ClassCastException e) {
            // Test is successful if this exception is caught
            System.out.println("Caught expected ClassCastException: " + e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception thrown: " + e);
        }
    }
}
