
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class ExternalIdDeserTest {

    // Define a generic resolver if needed
    public static class VehicleTypeResolver extends TypeIdResolverBase {
        @Override
        public String idFromValue(Object value) {
            return value.getClass().getSimpleName().toLowerCase();
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public com.fasterxml.jackson.databind.jsontype.TypeIdResolver.IdGenerator idGenerator() {
            return null;
        }

        @Override
        public JsonTypeInfo.Id getMechanism() {
            return JsonTypeInfo.Id.CUSTOM;
        }
    }

    @JsonTypeInfo(use = Id.NAME, include = As.EXTERNAL_PROPERTY, property = "type")
    @JsonTypeIdResolver(VehicleTypeResolver.class)
    static abstract class Vehicle {
        public String make;
    }

    @JsonTypeName("car")
    static class Car extends Vehicle {
        public int seatingCapacity;

        // Constructors, getters and setters
    }

    // Test case to reproduce the deserialization issue
    @Test
    public void testDeserializeExternalTypeId() throws Exception {
        String json = "{ \"type\": \"car\", \"make\": \"Toyota\", \"seatingCapacity\": 5 }";

        ObjectMapper objectMapper = new ObjectMapper();
        Vehicle vehicle = objectMapper.readValue(json, Vehicle.class);

        // The relevant assertion demonstrating the deserialization issue
        assertNotNull(vehicle);
        assertTrue(vehicle instanceof Car);
        assertNotNull(((Car) vehicle).seatingCapacity);
    }
}
