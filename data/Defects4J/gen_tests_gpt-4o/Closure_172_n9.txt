
import static org.junit.Assert.*;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

public class TypeInferenceTest {

    @Test
    public void testIncorrectPrototypeTypeInference() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Setting options to enable type checking
        options.setCheckTypes(true);

        // JavaScript code to be tested
        String jsCode = ""
            + "/** @param {Object} a */\n"
            + "function f(a) {\n"
            + "  a.prototype = '__proto';\n"
            + "}\n"
            + "/** @param {Object} a */\n"
            + "function g(a) {\n"
            + "  a.prototype = function(){};\n"
            + "}\n";

        // Compile the JavaScript code
        compiler.compile(SourceFile.fromCode("externs.js", ""), 
                         SourceFile.fromCode("test.js", jsCode), 
                         options);
        
        // Check if any errors are of the specific expected type
        boolean foundTypeError = false;
        for (JSError error : compiler.getErrors()) {
            if (error.description.contains("assignment to property prototype of Object")) {
                foundTypeError = true;
            }
        }

        // Assert that the specific type error was found
        assertTrue("Expected a type error regarding prototype assignment, but none was found.", foundTypeError);
    }
}
