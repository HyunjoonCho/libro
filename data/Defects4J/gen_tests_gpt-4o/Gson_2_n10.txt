
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;

public class VehicleTest {

    static abstract class Vehicle {
        String name;
    }

    static class Car extends Vehicle {
        int speed;
    }

    static class Truck extends Vehicle {
        int loadCapacity;
    }

    static class VehicleTypeAdapter extends TypeAdapter<Vehicle> {

        @Override
        public void write(JsonWriter out, Vehicle vehicle) throws IOException {
            // Simplified serialization logic
            out.beginObject();
            out.name("type").value(vehicle.getClass().getSimpleName());
            out.name("name").value(vehicle.name);
            out.endObject();
        }

        @Override
        public Vehicle read(JsonReader in) throws IOException {
            in.beginObject();
            String type = null;
            Vehicle vehicle = null;
            while (in.hasNext()) {
                String name = in.nextName();
                if (name.equals("type")) {
                    type = in.nextString();
                    if ("Car".equals(type)) {
                        vehicle = new Car();
                    } else if ("Truck".equals(type)) {
                        vehicle = new Truck();
                    }
                } else if (name.equals("name")) {
                    if (vehicle != null) {
                        vehicle.name = in.nextString();
                    }
                }
            }
            in.endObject();
            if (vehicle == null) {
                throw new JsonParseException("Unknown vehicle type: " + type);
            }
            return vehicle;
        }
    }

    @org.junit.Test(expected = JsonParseException.class)
    public void testVehicleTypeAdapter() throws IOException {
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(Vehicle.class, new VehicleTypeAdapter())
                .create();

        String json = "{\"type\":\"Truck\",\"loadCapacity\":5000}";

        // Attempt to parse the JSON as a Car, expecting an exception
        Car car = gson.fromJson(json, Car.class);
    }
}
