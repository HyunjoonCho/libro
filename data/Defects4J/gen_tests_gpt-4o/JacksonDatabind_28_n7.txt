
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.JsonNodeFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

import static org.junit.Assert.*;

public class DeserializationBugTest {

    public static class MyValue {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) {
            this.object = object;
        }

        @JsonValue
        public ObjectNode getObject() {
            return object;
        }
    }

    @Test
    public void testDeserializationOfEmptyObject() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode emptyObject = new ObjectNode(JsonNodeFactory.instance);

        // Convert empty ObjectNode to JSON
        String json = objectMapper.writeValueAsString(emptyObject);
        assertEquals("{}", json);

        // Deserialize JSON back into an ObjectNode
        ObjectNode deserializedNode = objectMapper.readValue(json, ObjectNode.class);
        assertNotNull(deserializedNode);

        // Attempt to deserialize JSON into MyValue
        try {
            MyValue deserializedValue = objectMapper.readValue(json, MyValue.class);
            // We expect an exception, so if we get here, it's a failure
            fail("Expected JsonMappingException due to empty object, but got: " + deserializedValue);
        } catch (com.fasterxml.jackson.databind.JsonMappingException e) {
            // Expected exception, assertion passes
            assertTrue(e.getMessage().contains("END_OBJECT token"));
        }
    }
}
