
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;

import java.io.IOException;
import java.util.Map;

import static com.fasterxml.jackson.annotation.JsonTypeInfo.Id.NAME;
import static org.junit.Assert.assertEquals;

public class TestCustomEnumKeyDeserializer {

    // Enum that will be used as the Map key
    public enum SuperTypeEnum {
        FOO
    }

    // Class with a Map that uses the Enum as the key
    @JsonTypeInfo(use = NAME, property = "@type", defaultImpl = SuperType.class)
    public static class SuperType {
        private Map<SuperTypeEnum, String> someMap;

        public Map<SuperTypeEnum, String> getSomeMap() {
            return someMap;
        }

        public void setSomeMap(Map<SuperTypeEnum, String> someMap) {
            this.someMap = someMap;
        }
    }

    @Test
    public void testNoTypeShouldDeserialize() throws IOException {
        String json = "{\"someMap\": {\"FOO\": \"bar\"}}";
        
        // Default ObjectMapper without any customizations
        ObjectMapper mapper = new ObjectMapper();
        
        // Deserialize JSON without using any custom Module
        SuperType superType = mapper.readValue(json, SuperType.class);
        
        // Assert that the map was deserialized correctly
        assertEquals("Deserialized someMap.FOO should equal bar", "bar", superType.getSomeMap().get(SuperTypeEnum.FOO));
    }

    @Test
    public void testNoTypeWithModuleShouldDeserialize() throws IOException {
        String json = "{\"someMap\": {\"FOO\": \"bar\"}}";
        
        // ObjectMapper with a custom module
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule simpleModule = new SimpleModule();
        
        // Add custom deserializer for Enum type
        simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer<SuperTypeEnum>() {
            @Override
            public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)
                    throws IOException {
                
                // Deserialize using the JsonParser's current token
                return SuperTypeEnum.valueOf(jsonParser.getText());
            }
        });
        
        // Register the custom module with the ObjectMapper
        mapper.registerModule(simpleModule);

        // Deserialize JSON using the custom module
        SuperType superType = mapper.readValue(json, SuperType.class);
        
        // Assert that the map was deserialized correctly
        assertEquals("Deserialized someMap.FOO should equal bar", "bar", superType.getSomeMap().get(SuperTypeEnum.FOO));
    }
}
