
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.JsonMappingException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TreeTraversingParserTest {

    public static class IntClass {
        public int x;

        @Override
        public String toString() {
            return String.valueOf(x);
        }
    }

    private final ObjectMapper mapper = new ObjectMapper();

    private String readFromTree(String example) {
        try {
            JsonNode tree = mapper.readTree(example);
            return mapper.readerFor(IntClass.class).readValue(tree).toString();
        } catch (Exception e) {
            return e.getClass().getSimpleName();
        }
    }

    @Test
    public void testIntegerBoundsFromTree() {
        // This JSON input should cause an overflow and raise an exception when using proper bounds checking
        // Since JsonParser converts double directly from a node without bounds checking, this may overflow silently
        assertEquals("2147483647", readFromTree("{\"x\": 1e10}"));
        assertEquals("2147483647", readFromTree("{\"x\": 2147483648}"));
        assertEquals("2147483647", readFromTree("{\"x\": -2147483649}"));
        assertEquals("2147483647", readFromTree("{\"x\": -4294967295}"));
    }

    @Test
    public void testBoundConsistencyWithString() {
        assertEquals("JsonMappingException", readFromString("{\"x\": 1e10}"));
        assertEquals("JsonMappingException", readFromString("{\"x\": 2147483648}"));
        assertEquals("JsonMappingException", readFromString("{\"x\": -2147483649}"));
        assertEquals("JsonMappingException", readFromString("{\"x\": -4294967295}"));
    }

    private String readFromString(String example) {
        try {
            return mapper.readerFor(IntClass.class).readValue(example).toString();
        } catch (Exception e) {
            return e.getClass().getSimpleName();
        }
    }
}
