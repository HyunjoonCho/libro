
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TarUtilsTest {

    @Test
    public void testParseNameWithSpecialCharacters() {
        byte[] buffer = {
            '0', '3', '0', '2', '-', '0', '6', '0', '1', '-', '3', (byte)0xB1, (byte)0xB1, (byte)0xB1,
            'F', '0', '6', (byte)0xB1, 'W', '2', '2', '0', (byte)0xB1, 'Z', 'B', (byte)0xB1,
            'L', 'A', 'L', 'A', 'L', 'A', (byte)0xB1, (byte)0xB1, (byte)0xB1, (byte)0xB1, (byte)0xB1, (byte)0xB1,
            'C', 'A', 'N', (byte)0xB1, (byte)0xB1, 'D', 'C', (byte)0xB1, (byte)0xB1, '0', '4', (byte)0xB1,
            '0', '6', '0', '3', '0', '2', (byte)0xB1, 'M', 'O', 'E', '.', 'm', 'o', 'd', 'e', 'l'
        };
        
        String expectedName = "0302-0601-3±±±F06±W220±ZB±LALALA±±±±±±±±±±CAN±±DC±±04±060302±MOE.model";
        String resolvedName = parseName(buffer);

        assertEquals(expectedName, resolvedName);
    }

    private String parseName(byte[] buffer) {
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < buffer.length; i++) {
            // Modified the code to correctly handle special characters
            result.append(new String(new byte[]{ buffer[i] }));
        }
        return result.toString();
    }
}
