
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.async.ByteArrayFeeder;
import org.junit.Test;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.junit.Assert.assertEquals;

public class FeedingOffsetTest {

    @Test
    public void inputOffsetShouldNotAffectLocations() throws Exception {
        JsonFactory jsonFactory = new JsonFactory();
        JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();
        ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();

        byte[] input = "[[[".getBytes(UTF_8);

        // Feed input with an offset of 2
        feeder.feedInput(input, 2, 1);
        assertEquals(JsonToken.START_ARRAY, parser.nextToken());
        
        // These return incorrect values, offset by the input offset
        assertEquals(1, parser.getCurrentLocation().getByteOffset()); // ACTUAL = 3
        assertEquals(1, parser.getTokenLocation().getByteOffset());   // ACTUAL = 3

        // Feed the rest of the input array
        feeder.feedInput(input, 0, 2);
        assertEquals(JsonToken.START_ARRAY, parser.nextToken());
        
        // Correct locations expected after considering earlier incorrect offsets
        assertEquals(2, parser.getCurrentLocation().getByteOffset());
        assertEquals(2, parser.getTokenLocation().getByteOffset());
    }
}
