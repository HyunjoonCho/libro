
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class InheritanceTest {

    @Test
    public void testInheritanceWarning() {
        String jsInput = ""
            + "/**\n"
            + " * @constructor\n"
            + " */\n"
            + "function SuperClass() {}\n"
            + "\n"
            + "SuperClass.prototype.CustomMethod = function() {}\n"
            + "\n"
            + "/**\n"
            + " * @constructor\n"
            + " * @extends {SuperClass}\n"
            + " */\n"
            + "function SubClass() {}\n"
            + "SubClass.prototype = new SuperClass();\n"
            + "\n"
            + "/**\n"
            + " * @override\n"
            + " */\n"
            + "SubClass.prototype.CustomMethod = function() {\n"
            + "  this.myProperty = 'value';\n"
            + "}\n"
            + "\n"
            + "window['SubClassInstance'] = new SubClass();\n";
        
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

        Compiler compiler = new Compiler();
        compiler.initOptions(options);

        SourceFile input = SourceFile.fromCode("test.js", jsInput);
        SourceFile externs = SourceFile.fromCode("externs.js", "");

        Result result = compiler.compile(externs, input, options);

        // Check if the warning is produced
        assertEquals(1, result.warnings.length);
        assertEquals("property CustomMethod not defined on any superclass of SubClass", 
                     result.warnings[0].description);
    }
}
