
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testStringEscapingIssue() {
        // JavaScript input simulates the content with patterns and non-ASCII characters
        String sourceCode = "var patterns = 'па́ттерн1 па́ттерн2';"; // Simplified example

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        // Assume that setting an option to disable string escaping is added/completed
        // options.setStringEscapingOff(true);

        List<SourceFile> externs = Collections.emptyList();
        List<SourceFile> inputs = Collections.singletonList(SourceFile.fromCode("input.js", sourceCode));

        compiler.compile(externs, inputs, options);

        String compiledCode = compiler.toSource();

        // Validate the size
        int originalSize = sourceCode.length();
        int minifiedSize = compiledCode.length();

        // In this test case, we expect the minified size to be smaller, but we know it was larger in the bug report.
        System.out.println("Original size: " + originalSize);
        System.out.println("Minified size: " + minifiedSize);

        assertTrue("Minified output should be smaller or equal in authentic use case", minifiedSize <= originalSize);
    }
}
