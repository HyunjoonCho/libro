public void testFractionConstructorWithLargeNegativeDouble() {
    try {
        Fraction fraction = new Fraction(-33655.1677817278, 371880);
        assertTrue(fraction.getNumerator() < 0, "Fraction should have a negative numerator.");
        double expectedValue = -33655.1677817278;
        double actualValue = fraction.doubleValue();
        double tolerance = 1.0; // Allow some tolerance for approximation
        assertTrue(Math.abs(expectedValue - actualValue) < tolerance, "Fraction approximation is not within the expected tolerance.");
    } catch (FractionConversionException e) {
        fail("FractionConversionException should not be thrown for this input.");
    }
}

public void testFractionConstructorWithLargeFractionalDigits() {
    try {
        Fraction fraction = new Fraction(-43979.60679604749, 366081);
        Fraction expectedFraction = new Fraction(-24654898, 3831);
        assertEquals(expectedFraction, fraction, "Fraction should be reduced correctly.");
    } catch (FractionConversionException e) {
        fail("FractionConversionException should not be thrown for this input.");
    }
}