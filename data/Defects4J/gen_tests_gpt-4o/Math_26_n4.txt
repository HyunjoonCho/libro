
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.junit.Test;
import static org.junit.Assert.*;

public class FractionTest {

    @Test
    public void testFractionConstructorPositiveSignIssue() {
        // Test for the issue where fraction has the wrong sign
        double value = -33655.1677817278;
        int maxDenominator = 371880;

        try {
            Fraction fraction = new Fraction(value, maxDenominator);
            assertTrue("Fraction should be negative", fraction.getNumerator() < 0);
        } catch (FractionConversionException e) {
            fail("FractionConversionException was not expected");
        }
    }

    @Test
    public void testFractionConstructorReductionIssue() {
        // Test for the issue where fraction is not reduced correctly
        double value = -43979.60679604749;
        int maxDenominator = 366081;

        try {
            Fraction fraction = new Fraction(value, maxDenominator);
            Fraction expectedReducedFraction = new Fraction(-24654898, 3831);
            assertEquals("Fractions are not equal when they should be",
                         expectedReducedFraction, fraction);
        } catch (FractionConversionException e) {
            fail("FractionConversionException was not expected");
        }
    }
}
