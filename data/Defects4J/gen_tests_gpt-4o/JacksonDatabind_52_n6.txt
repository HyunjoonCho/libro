
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertEquals;

public class ExternalIdDeserTest {

    static class Container {
        public String type;
        public PayloadContainer payload;
    }

    @JsonTypeInfo(use = Id.NAME, include = As.EXTERNAL_PROPERTY, property = "type")
    @JsonSubTypes({
        @JsonSubTypes.Type(value = PayloadA.class, name = "A"),
        @JsonSubTypes.Type(value = PayloadB.class, name = "B")
    })
    static abstract class PayloadContainer {
    }

    static class PayloadA extends PayloadContainer {
        public String dataA;
    }

    static class PayloadB extends PayloadContainer {
        public String dataB;
    }

    @Test
    public void testExternalPropertyDeserialization() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();

        String json = "{\"type\":\"A\",\"payload\":{\"dataA\":\"testData\"}}";

        Container container = objectMapper.readValue(json, Container.class);

        // Assert that the payload is not null
        assertNotNull(container.payload);

        // Validate that the payload is of expected type
        assertEquals(PayloadA.class, container.payload.getClass());

        // Validate payload data
        PayloadA payloadA = (PayloadA) container.payload;
        assertEquals("testData", payloadA.dataA);
    }
}
