
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory;
import org.apache.commons.math3.fitting.leastsquares.EvaluationRmsChecker;
import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.junit.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testGetIterations() {
        // setup
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();

        LeastSquaresProblem problem = LeastSquaresFactory.create(
                new MultivariateVectorFunction() {
                    @Override
                    public double[] value(double[] point) throws IllegalArgumentException {
                        return new double[]{Math.pow(point[0], 4)};
                    }
                },
                new MultivariateMatrixFunction() {
                    @Override
                    public double[][] value(double[] point) throws IllegalArgumentException {
                        return new double[][]{{0.25 * Math.pow(point[0], 3)}};
                    }
                },
                new double[]{1},
                new double[]{3},
                new EvaluationRmsChecker(1e-10),
                Integer.MAX_VALUE,
                new MaxEval(100)
        );

        // action
        LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problem);

        // verify
        assertThat(optimum.getEvaluations(), greaterThan(1));
        assertThat(optimum.getIterations(), greaterThan(1));
    }
}
