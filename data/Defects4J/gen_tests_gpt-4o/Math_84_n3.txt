
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.analysis.MultivariateFunction;

public class MultiDirectionalTest {
    
    public static void main(String[] args) {
        testMultiDirectionalCorrectStart();
    }

    public static void testMultiDirectionalCorrectStart() {
        MultivariateFunction function = new MultivariateFunction() {
            @Override
            public double value(double[] point) {
                // Simple quadratic function with a minimum at (0,0)
                return point[0] * point[0] + point[1] * point[1];
            }
        };

        MultivariateOptimizer optimizer = new org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalOptimizer();
        optimizer.setSimplex(new MultiDirectionalSimplex(new double[]{1.0, 1.0}));

        // Starting at the correct solution (0,0)
        PointValuePair result = optimizer.optimize(
                new MaxEval(1000),
                new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(function),
                GoalType.MINIMIZE,
                new InitialGuess(new double[]{0.0, 0.0})
        );

        // Check if the optimizer stops and returns the correct minimum
        double[] expected = {0.0, 0.0};
        double[] found = result.getPoint();
        assertArrayEquals(expected, found, 1e-6);
    }

    private static void assertArrayEquals(double[] expected, double[] actual, double delta) {
        if (expected.length != actual.length) {
            throw new AssertionError("Arrays have different lengths");
        }
        for (int i = 0; i < expected.length; i++) {
            if (Math.abs(expected[i] - actual[i]) > delta) {
                throw new AssertionError("Arrays differ at index " + i + ": expected " + expected[i] + " but was " + actual[i]);
            }
        }
    }
}
