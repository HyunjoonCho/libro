
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.SimpleBounds;
import org.apache.commons.math3.optimization.SimpleValueChecker;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.optimization.direct.MultivariateOptimizer;
import org.apache.commons.math3.optimization.InitialGuess;
import org.apache.commons.math3.optimization.PointValuePair;
import org.junit.Test;
import static org.junit.Assert.*;

public class CMAESOptimizerTest {

    @Test
    public void testCMAESOptimizerBounds() {
        // Define a simple quadratic function to optimize
        MultivariateOptimizer optimizer = new CMAESOptimizer(
            1000, 1e-10, true, 0, 0, new SimpleValueChecker(1e-9, 1e-9));

        // Define bounds, e.g., x[0] must be between -1 and 1
        double[] lowerBound = {-1};
        double[] upperBound = {1};

        SimpleBounds bounds = new SimpleBounds(lowerBound, upperBound);

        // Initial guess
        double[] initialGuess = {100}; // Outside the boundary

        // Optimize the function
        PointValuePair result = optimizer.optimize(
            1000, // Max evals
            x -> x[0] * x[0], // Minimize x^2
            GoalType.MINIMIZE,
            new InitialGuess(initialGuess),
            bounds
        );

        // Get the optimized value
        double[] point = result.getPoint();

        // Check if the result is within bounds
        assertTrue("The result exceeded lower bound!", point[0] >= lowerBound[0]);
        assertTrue("The result exceeded upper bound!", point[0] <= upperBound[0]);
    }
}
