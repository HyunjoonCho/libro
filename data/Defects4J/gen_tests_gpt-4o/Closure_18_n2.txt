
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DependencyOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.List;

public class CompilerDependencyTest {

    @Test
    public void testDependencySortingWithoutClosurePass() {
        // Instantiate a new instance of Compiler
        Compiler compiler = new Compiler();
        
        // Define compiler options
        CompilerOptions compilerOptions = new CompilerOptions();
        
        // Set closurePass to false to prevent goog.require/goog.provide removal
        compilerOptions.setClosurePass(false);
        
        // Turn dependency sorting on
        DependencyOptions dependencyOptions = new DependencyOptions();
        dependencyOptions.setDependencySorting(true);
        compilerOptions.setDependencyOptions(dependencyOptions);

        // Define the JS input source files (mocked as strings here)
        SourceFile input1 = SourceFile.fromCode("input1.js", ""
                + "goog.provide('example.dep');\n"
                + "console.log('Dependency file');\n");

        SourceFile input2 = SourceFile.fromCode("input2.js", ""
                + "goog.require('example.dep');\n"
                + "console.log('Main file');\n");

        // Compile the JS code
        List<SourceFile> inputs = List.of(input2, input1);
        compiler.compile(List.of(), inputs, compilerOptions);
        
        // The output should ideally have input1.js content before input2.js content
        String output = compiler.toSource();
        
        // Validate if the output has the dependent sorted order
        int indexDep = output.indexOf("Dependency file");
        int indexMain = output.indexOf("Main file");

        assertTrue("Dependencies should be sorted correctly", indexDep < indexMain);

        // Additionally, verify that goog calls are intact
        assertTrue("goog.require should exist", output.contains("goog.require('example.dep')"));
        assertTrue("goog.provide should exist", output.contains("goog.provide('example.dep')"));
    }
}
