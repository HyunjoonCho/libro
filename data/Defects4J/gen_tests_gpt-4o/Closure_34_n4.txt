
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;

import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class ClosureCompilerStackOverflowTest {

    private static final String LARGE_JS_SOURCE = "var a = " + generateNestedExpression(10000) + ";";

    private static String generateNestedExpression(int depth) {
        if (depth == 0) {
            return "0";
        }
        return "1 + (" + generateNestedExpression(depth - 1) + ")";
    }

    @Test
    public void testStackOverflowErrorOnDeepNest() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        try {
            JSSourceFile input = JSSourceFile.fromCode("input.js", LARGE_JS_SOURCE);
            JSSourceFile externs = JSSourceFile.fromCode("externs.js", "");
            
            Result result = compiler.compile(externs, input, options);
            assertTrue("The compilation should have thrown StackOverflowError", result.success == false);
        } catch (RuntimeException e) {
            Throwable cause = e.getCause();
            assertTrue("Should throw a RuntimeException caused by StackOverflowError",
                cause instanceof StackOverflowError);
        }
    }
}
