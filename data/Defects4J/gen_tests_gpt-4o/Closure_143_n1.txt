
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class ClosureCompilerTest {

    @Test
    public void testDefineDoesNotSupportStrings() {
        String command = "java -jar path/to/compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS "
                + "--define='test.VERSION=\"1.0.0\"' --js_output_file test-min.js --js path/to/test.js";
        
        try {
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader errorStream = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            StringBuilder errorMessage = new StringBuilder();
            String line;
            while ((line = errorStream.readLine()) != null) {
                errorMessage.append(line).append("\n");
            }
            errorStream.close();
            int exitCode = process.waitFor();
            
            // We expect the exit code to be non-zero and error message to match the known issue
            assertNotEquals(0, exitCode);
            assertTrue(errorMessage.toString().contains("java.lang.RuntimeException: --define flag syntax invalid"));
        } catch (IOException | InterruptedException e) {
            fail("Exception occurred: " + e.getMessage());
        }
    }
}
