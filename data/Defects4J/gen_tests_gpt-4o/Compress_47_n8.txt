
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipMethod;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.Assert.*;

public class ZipArchiveInputStreamTest {

    @Test
    public void testUnknownCompressedSizeHandling() {
        // Create a ZIP in memory with an entry where the compressed size is unknown.
        byte[] zipBytes = createZipWithUnknownSizeEntry();

        try (InputStream inputStream = new ByteArrayInputStream(zipBytes);
             ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(inputStream)) {

            ZipArchiveEntry entry = zipInputStream.getNextZipEntry();
            assertNotNull("Expected a zip entry", entry);
            
            // Check that the compressed size is marked as unknown.
            assertEquals(ZipArchiveEntry.SIZE_UNKNOWN, entry.getCompressedSize());

            // Attempt to read the entry, this should throw an exception due to unknown compressed size
            try {
                byte[] buffer = new byte[1024];
                zipInputStream.read(buffer);
                fail("Expected an IllegalStateException due to unknown compressed size");
            } catch (IllegalStateException e) {
                assertEquals("Compressed size is unknown for this entry.", e.getMessage());
            }

        } catch (IOException e) {
            fail("Failed to read zip data due to IO error: " + e.getMessage());
        }
    }

    private byte[] createZipWithUnknownSizeEntry() {
        // Use a ByteArrayOutputStream and ZipOutputStream to create
        // a zip entry with an unknown compressed size.
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        try (ZipOutputStream zipOutputStream = new ZipOutputStream(byteArrayOutputStream)) {
            ZipEntry entry = new ZipEntry("test.txt");
            entry.setMethod(ZipMethod.BZIP2.getCode());  // Use a method like BZIP2
            entry.setSize(-1); // Set size to unknown

            zipOutputStream.putNextEntry(entry);
            zipOutputStream.write("This is test data".getBytes());
            zipOutputStream.closeEntry();

        } catch (IOException e) {
            fail("Failed to create a test zip entry: " + e.getMessage());
        }
        return byteArrayOutputStream.toByteArray();
    }
}
