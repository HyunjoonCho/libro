
import com.google.javascript.jscomp.*;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ClosureCompilerTest {

    @Test
    public void testClosureCompiledSwfObject() {
        // Source code with the issue
        String jsCode = "function urlEncodeIfNecessary(s) {" +
                        " var regex = /[\\\"<>\.;]/;" +
                        " var hasBadChars = regex.exec(s) != null;" +
                        " return hasBadChars && typeof encodeURIComponent != 'undefined' ? encodeURIComponent(s) : s;" +
                        "}";

        // Set up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.WHITESPACE_ONLY.setOptionsForCompilationLevel(options);

        // Compile the code
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        SourceFile externs = SourceFile.fromCode("externs.js", ""); // No externs needed for this test
        compiler.compile(externs, input, options);

        // Validate the output
        String compiledCode = compiler.toSource();
        
        // Expected compiled code should ideally not introduce errors
        String expectedCompiledRegex = "function urlEncodeIfNecessary(a){return/[\\\"<>.;]/.exec(a)!=null&&typeof encodeURIComponent!=\"undefined\"?encodeURIComponent(a):a}";

        assertEquals("Compilation should properly preserve regex pattern", expectedCompiledRegex, compiledCode);
    }

}
