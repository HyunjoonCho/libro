
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

import static org.junit.Assert.assertThrows;

// JUnit test class
public class ObjectNodeDeserializationTest {

    public static class MyValue {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) {
            this.object = object;
        }

        @JsonValue
        public ObjectNode getObject() {
            return object;
        }
    }

    @Test
    public void testEmptyObjectNodeDeserialization() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode objectNode = new ObjectNode(JsonNodeFactory.instance);

        String json = objectMapper.writeValueAsString(objectNode);
        System.out.println("json: " + json);

        // Deserializing to ObjectNode works fine
        ObjectNode de1 = objectMapper.readValue(json, ObjectNode.class);
        System.out.println("Deserialized to ObjectNode: " + de1);

        // Deserializing to MyValue is expected to throw JsonMappingException
        assertThrows(JsonMappingException.class, () -> {
            MyValue de2 = objectMapper.readValue(json, MyValue.class);
            System.out.println("Deserialized to MyValue: " + de2);
        });
    }
}
