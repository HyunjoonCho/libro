
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;
import static org.junit.Assert.*;

public class JsonMappingExceptionTest {

    @Test
    public void testDuplicateLocationInExceptionMessage() {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"age\": \"notANumber\"}"; // Invalid input for an integer field

        try {
            // Attempt to deserialize, expecting an InvalidFormatException
            Person person = mapper.readValue(json, Person.class);
            fail("Expected an InvalidFormatException to be thrown");
        } catch (InvalidFormatException e) {
            // Check if the exception message contains the location information twice
            String message = e.getMessage();
            
            // Assert that the message contains "at [source]" more than once
            String searchTerm = "at [source]";
            int firstOccurrence = message.indexOf(searchTerm);
            int secondOccurrence = message.indexOf(searchTerm, firstOccurrence + 1);
            
            assertTrue("Expected the location information to appear twice in the message", firstOccurrence != -1 && secondOccurrence != -1);
        } catch (Exception e) {
            fail("Expected an InvalidFormatException but got " + e.getClass().getSimpleName());
        }
    }

    // Simple POJO for deserialization attempt
    public static class Person {
        public int age;
    }
}
