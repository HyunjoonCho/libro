
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JsonIdentityInfoTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    static class Parent {
        public int id;
        public Child child;

        @JsonCreator
        public Parent(@JsonProperty("id") int id, @JsonProperty("child") Child child) {
            this.id = id;
            this.child = child;
        }
    }

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    static class Child {
        public int id;
        public Parent parent;

        @JsonCreator
        public Child(@JsonProperty("id") int id, @JsonProperty("parent") Parent parent) {
            this.id = id;
            this.parent = parent;
        }
    }

    @Test
    public void testDeserializationWithIdentityInfo() throws Exception {
        String json = "{\"id\":1, \"child\":{\"id\":2, \"parent\":1}}";

        ObjectMapper mapper = new ObjectMapper();
        Parent parent = mapper.readValue(json, Parent.class);

        assertNotNull(parent);
        assertEquals(1, parent.id);
        assertNotNull(parent.child);
        assertEquals(2, parent.child.id);
        assertEquals(parent, parent.child.parent); // Assert circular reference
    }
}
