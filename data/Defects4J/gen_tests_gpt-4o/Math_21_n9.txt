
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.CholeskyDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.CorrelatedRandomVectorGenerator;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CorrelatedRandomVectorGeneratorTest {

    @Test
    public void testCovarianceMatrix1() {
        double[][] data = {
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.0, 0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        };
        testCovarianceMatrix(data, 4);
    }

    @Test
    public void testCovarianceMatrix2() {
        double[][] data = {
            {0.013445532, 0.01039469, 0.0, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        };
        testCovarianceMatrix(data, 4);
    }

    @Test
    public void testCovarianceMatrix3() {
        double[][] data = {
            {0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.009210099, 0.019107243}
        };
        testCovarianceMatrix(data, 4);
    }

    private void testCovarianceMatrix(double[][] data, int expectedRank) {
        RealMatrix covariance = new Array2DRowRealMatrix(data);
        RandomGenerator rg = new JDKRandomGenerator();
        
        // When creating the generator, under-the-hood calculations, like
        // Cholesky decomposition, are performed
        CorrelatedRandomVectorGenerator generator = new CorrelatedRandomVectorGenerator(
            new double[data.length], covariance, 1e-9, rg
        );
        
        int actualRank = generator.getRank();
        
        assertEquals("The rank should match the expected value", expectedRank, actualRank);
    }
}
