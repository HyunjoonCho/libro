
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.collect.Maps;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.util.Map.Entry;
import org.junit.Test;

public class SerializationTest {

    private static final UUID user = UUID.randomUUID(); // Dummy UUID for user

    @Test
    public void testRepeatedSerialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        Map<ObjectUserKey, ServerIndexPair> ssip = Maps.newConcurrentMap();

        for (int i = 0; i < 10000; ++i) {
            byte[] indexPairBytes = new byte[2080];
            new Random().nextBytes(indexPairBytes);
            ServerIndexPair sip = new ServerIndexPair(indexPairBytes);

            byte[] serializedData = mapper.writeValueAsBytes(
                Map.of(UUID.randomUUID().toString(), sip)
            );

            Map<String, ServerIndexPair> deserializedData = mapper.readValue(
                serializedData,
                new TypeReference<Map<String, ServerIndexPair>>() {}
            );

            for (Entry<String, ServerIndexPair> entry : deserializedData.entrySet()) {
                ServerIndexPair indexPair = entry.getValue();
                ssip.put(new ObjectUserKey(entry.getKey(), user), indexPair);
            }
        }
    }
}
