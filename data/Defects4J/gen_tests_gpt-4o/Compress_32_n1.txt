
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class TarArchiveInputStreamTest {

    @Test
    public void testUidParsingForLargeValues() {
        // Simulated UID from problematic tar input
        String largeUidString = "4294967294";

        try {
            // Here we're simulating the parsing process used in the TarArchiveInputStream.
            // In a real scenario, you would have the actual stream handle this during a Pax header processing.
            long uid = Long.parseLong(largeUidString);

            // Simulate assigning this UID to an entry
            TarArchiveEntry entry = new TarArchiveEntry("example.txt");
            entry.setUserId(uid);

            // Assert that the UID was parsed and set correctly as a long
            assertEquals(uid, entry.getUserId());

        } catch (NumberFormatException e) {
            // Fail the test if a NumberFormatException is encountered
            throw new AssertionError("Failed to parse large UID values", e);
        }
    }
}
