
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.MappingIterator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.io.IOException;

public class ObjectReaderTest {

    @Test
    public void testReadValuesWithOffsetAndLength() throws IOException {
        // Sample JSON data
        byte[] jsonData = "{\"key1\":\"value1\"}{\"key2\":\"value2\"}".getBytes();

        // Prepare ObjectMapper and ObjectReader
        ObjectMapper mapper = new ObjectMapper();
        ObjectReader reader = mapper.readerFor(MyDataClass.class);

        // Define offset and length
        int offset = 0;
        int length = "{\"key1\":\"value1\"}".getBytes().length;

        // Use readValues() with offset and length
        MappingIterator<MyDataClass> iterator = reader.readValues(jsonData, offset, length);

        // Validate results
        assertTrue(iterator.hasNext());
        MyDataClass firstObject = iterator.next();
        assertEquals("value1", firstObject.key);

        // The iterator should not have consumed the entire array due to the length parameter
        assertFalse(iterator.hasNext());
    }

    // Helper class for deserialization
    private static class MyDataClass {
        public String key;

        public MyDataClass() {
        }
    }
}
