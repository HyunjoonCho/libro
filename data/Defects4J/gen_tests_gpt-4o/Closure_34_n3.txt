
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;

public class ClosureCompilerTest {

    @Test(expected = RuntimeException.class)
    public void testStackOverflowError() {
        // Mimicking the JavaScript input that might cause StackOverflowError
        // In a real test, this content should match the complexity and structure of the problematic script.
        String jsContent = generateDeepNestedFunction();

        // Create input file representation
        SourceFile input = SourceFile.fromInputStream(
                "AdMedia.eam.js", 
                new ByteArrayInputStream(jsContent.getBytes(StandardCharsets.UTF_8))
        );

        // Create output file representation
        SourceFile output = SourceFile.fromCode("AdMedia.eam.min.js", "");

        // Compiler options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Execute compilation
        Compiler compiler = new Compiler();
        
        // Compile and assert RuntimeException caused by StackOverflowError
        compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);
        
        // Optionally check the output code generated
        Node root = compiler.getRoot();
        System.out.println(compiler.toSource(root));
    }

    private String generateDeepNestedFunction() {
        // Generating deep nested functions to trigger StackOverflowError
        StringBuilder sb = new StringBuilder();
        sb.append("function test() {\n");
        for (int i = 0; i < 10000; i++) {
            sb.append("function nested").append(i).append("() {\n");
        }
        for (int i = 0; i < 10000; i++) {
            sb.append("}\n");
        }
        sb.append("}\n");
        return sb.toString();
    }
}
