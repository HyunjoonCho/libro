
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DurationToPeriodTest {

    @Test
    public void testDurationToPeriodFixedTimeZone() {
        // Set the time zone to GMT
        DateTimeZone.setDefault(DateTimeZone.forID("Etc/GMT"));

        Duration aDuration = new Duration(
            DateTimeConstants.MILLIS_PER_HOUR * 30 + 
            DateTimeConstants.MILLIS_PER_MINUTE * 50 + 
            DateTimeConstants.MILLIS_PER_SECOND * 14
        );

        Period period = aDuration.toPeriod();

        // Verify that the period is as expected in a non-DST timezone
        assertEquals("P1DT6H50M14S", period.toString());
    }

    @Test
    public void testDurationToPeriodDSTTimeZone() {
        // Set the time zone to a location with DST, such as Chicago
        DateTimeZone.setDefault(DateTimeZone.forID("America/Chicago"));

        Duration aDuration = new Duration(
            DateTimeConstants.MILLIS_PER_HOUR * 30 + 
            DateTimeConstants.MILLIS_PER_MINUTE * 50 + 
            DateTimeConstants.MILLIS_PER_SECOND * 14
        );

        Period period = aDuration.toPeriod();

        // Verify that all duration is converted to hours, minutes and seconds, without days
        assertEquals("PT30H50M14S", period.toString());
    }
}
