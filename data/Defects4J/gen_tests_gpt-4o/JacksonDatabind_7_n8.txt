
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class TokenBufferDeserializationTest {

    static class Value {
        @JsonCreator
        public static Value from(TokenBuffer buffer) throws Exception {
            // For this test, we will simulate inspecting the token buffer
            // and assert that the expected tokens are present.
            return new Value();
        }
    }

    @Test
    public void testTokenBufferDeserialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        String json = "{ \"a\":1, \"b\":null }";
        
        // Parse JSON to TokenBuffer
        JsonParser parser = mapper.getFactory().createParser(json);
        TokenBuffer tokenBuffer = new TokenBuffer(parser.getCodec(), false);
        tokenBuffer.copyCurrentStructure(parser);

        // Collect tokens for comparison
        JsonParser bufferParser = tokenBuffer.asParser();
        bufferParser.nextToken(); // START_OBJECT
        assertArrayEquals(new JsonToken[] {
            JsonToken.START_OBJECT,
            JsonToken.FIELD_NAME,
            JsonToken.VALUE_NUMBER_INT,
            JsonToken.FIELD_NAME,
            JsonToken.VALUE_NULL,
            JsonToken.END_OBJECT
        }, collectTokens(bufferParser));
    }

    private JsonToken[] collectTokens(JsonParser parser) throws Exception {
        List<JsonToken> tokens = new ArrayList<>();
        while (parser.nextToken() != null) {
            tokens.add(parser.getCurrentToken());
        }
        return tokens.toArray(new JsonToken[0]);
    }
}
