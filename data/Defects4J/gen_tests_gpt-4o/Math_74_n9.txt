public void testWrongStepSizeInEmbeddedRungeKutta() {
    // Defining a simple ODE: y' = y with an exact solution y = e^t
    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() { return 1; }
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = y[0];
        }
    };

    double[] y0 = new double[] { 1.0 }; // Initial condition y(0) = 1
    double t0 = 0.0; // Initial time
    double tFinal = 1.0; // Final time
    
    double scalAbsoluteTolerance = 1.0e-10;
    double scalRelativeTolerance = 1.0e-10;
    
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(
        1.0e-8, 10.0, scalAbsoluteTolerance, scalRelativeTolerance);

    // Integrate the ODE
    integrator.integrate(ode, t0, y0, tFinal, y0);
    
    double expected = Math.exp(tFinal); // Exact value y(1) = e^1
    assertEquals(expected, y0[0], 1.0e-5); // Allow a small tolerance, which highlights the issue of step scaling
}