
import org.joda.time.DateTime;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.Test;
import static org.junit.Assert.*;

public class GJChronologyTest {

    @Test
    public void testValidJulianDate() {
        // Valid Julian date
        DateTime jdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, JulianChronology.getInstanceUTC());
        assertEquals(1500, jdt.getYear());
        assertEquals(2, jdt.getMonthOfYear());
        assertEquals(29, jdt.getDayOfMonth());
    }

    @Test
    public void testGJChronologyDate() {
        try {
            // Attempt to create the same date with GJChronology
            DateTime gjdt = new DateTime(1500, 2, 29, 0, 0, 0, 0, GJChronology.getInstanceUTC());
            fail("Expected IllegalFieldValueException for date 1500-02-29 in GJChronology");
        } catch (org.joda.time.IllegalFieldValueException e) {
            assertEquals("Value 29 for dayOfMonth must be in the range [1,28]", e.getMessage());
        }
    }
}
