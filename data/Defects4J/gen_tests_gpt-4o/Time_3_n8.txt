
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.junit.Test;
import static org.junit.Assert.*;

public class MutableDateTimeTest {

    @Test
    public void testAddDaysZeroDoesNotChangeTime() {
        // Initialize the MutableDateTime object
        MutableDateTime mdt = new MutableDateTime(2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID("Europe/Berlin"));
        
        // Store initial millis
        long initialMillis = mdt.toInstant().getMillis();

        // Subtract 1 hour, should transition into DST
        mdt.addHours(-1);
        // Store millis after subtracting an hour
        long afterSubtractingOneHourMillis = mdt.toInstant().getMillis();

        // Ensure -1 hours adjustment is correct
        assertEquals(initialMillis - 3600000, afterSubtractingOneHourMillis);

        // Add 0 hours, which should make no change
        mdt.addHours(0);

        // Check if millis are unchanged
        assertEquals(afterSubtractingOneHourMillis, mdt.toInstant().getMillis());

        // Add 0 days, which should also make no change
        mdt.addDays(0);

        // Ensure that no unexpected change occurred
        assertEquals("addDays(0) unexpectedly changed the time", afterSubtractingOneHourMillis, mdt.toInstant().getMillis());
    }
}
