
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class SideEffectTest {

    private static class TestClass {
        private boolean sideEffectTriggered = false;

        public void function() {
            // This represents a side effect like modifying an internal state
            sideEffectTriggered = true;
        }

        public boolean hasSideEffectOccurred() {
            return sideEffectTriggered;
        }
    }

    @Test
    public void testFunctionSideEffects() {
        TestClass testInstance = new TestClass();

        // Initial state before the function call, expecting no side effect
        assertFalse(testInstance.hasSideEffectOccurred());

        // This should invoke the function and cause a side effect
        testInstance.function();

        // After calling the function, a side effect should have occurred
        assertTrue(testInstance.hasSideEffectOccurred());
    }
}
