
import static org.junit.Assert.assertEquals;

import java.io.IOException;

import org.junit.Test;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class JacksonDeserializationTest {

    public static final class SimplePojo {
        private final int intField;
        private final String stringField;

        public SimplePojo(@JsonProperty("intField") int intField) {
            this(intField, "empty");
        }

        public SimplePojo(@JsonProperty("stringField") String stringField) {
            this(-1, stringField);
        }

        @JsonCreator
        public SimplePojo(@JsonProperty("intField") int intField, 
                          @JsonProperty("stringField") String stringField) {
            this.intField = intField;
            this.stringField = stringField;
        }

        public int getIntField() {
            return intField;
        }

        public String getStringField() {
            return stringField;
        }
    }

    @Test
    public void testDeserializationWithJsonCreator() throws JsonParseException, IOException {
        ObjectMapper mapper = new ObjectMapper();

        // This JSON is intended to match the @JsonCreator constructor.
        String json = "{ \"intField\": 1, \"stringField\": \"foo\" }";

        SimplePojo pojo = mapper.readValue(json, SimplePojo.class);

        assertEquals(1, pojo.getIntField());
        assertEquals("foo", pojo.getStringField());
    }

    public static void main(String[] args) {
        JacksonDeserializationTest test = new JacksonDeserializationTest();
        try {
            test.testDeserializationWithJsonCreator();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
