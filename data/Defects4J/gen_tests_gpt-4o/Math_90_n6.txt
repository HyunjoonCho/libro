
import org.apache.commons.math3.stat.Frequency;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class FrequencyTest {

    @Test
    public void testAddNonComparableObject() {
        final Frequency frequency = new Frequency();
        final Object OBJ = new Object();

        try {
            // This should ideally throw an exception or not be allowed since OBJ is not Comparable
            frequency.addValue(OBJ);
            fail("Expected an IllegalArgumentException for adding a non-Comparable object.");
        } catch (IllegalArgumentException e) {
            // Pass, since adding a non-Comparable object should not be allowed and should throw an exception
        }
    }

    @Test
    public void testGetCountWithNonComparableObject() {
        final Frequency frequency = new Frequency();
        final Object OBJ = new Object();

        // Add the non-Comparable object
        frequency.addValue(OBJ);

        // Since adding a non-Comparable object was allowed, the count retrieval will return 0
        // This is the incorrect behavior which demonstrates the problem
        assertEquals(0, frequency.getCount(OBJ));
    }

    @Test
    public void testGetPctWithNonComparableObject() {
        final Frequency frequency = new Frequency();
        final Object OBJ = new Object();

        // Add the non-Comparable object
        frequency.addValue(OBJ);

        // Since adding a non-Comparable object was allowed, the percentage retrieval will return 0.0
        // This is also part of the incorrect behavior
        assertEquals(0.0, frequency.getPct(OBJ), 0.0);
    }
}
