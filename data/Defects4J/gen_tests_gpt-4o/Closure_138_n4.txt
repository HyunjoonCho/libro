
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class ClosureCompilerTest {

    @Test
    public void testDeterministicWarningAbsence() {
        // Prepare the JavaScript code
        String jsCode =
            "var t = null;\n" +
            "window.test = function() {\n" +
            "  if (t != null) {\n" +
            "    t = null;\n" +
            "  }\n" +
            "  t = 1;\n" +
            "};";

        // Set up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the source file
        JSSourceFile input = JSSourceFile.fromCode("input.js", jsCode);
        JSSourceFile externs = JSSourceFile.fromCode("externs.js", "function alert(x) {}");

        // Run the compilation
        Result result = compiler.compile(externs, input, options);

        // Check for warnings. We expect no warnings like JSC_DETERMINISTIC_TEST
        assertFalse("Unexpected warning: JSC_DETERMINISTIC_TEST", result.warnings.stream()
            .anyMatch(warning -> warning.getType().key.equals("JSC_DETERMINISTIC_TEST")));
    }
}
