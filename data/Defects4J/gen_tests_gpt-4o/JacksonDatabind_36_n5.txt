
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import org.junit.Test;

import java.text.ParseException;
import java.util.Date;

import static org.junit.Assert.*;

public class StdDateFormatTest {

    @Test(expected = InvalidFormatException.class)
    public void testStrictDateParsing() throws Exception {
        // Create ObjectMapper with non-lenient StdDateFormat
        ObjectMapper objectMapper = new ObjectMapper();
        StdDateFormat dateFormat = new StdDateFormat();
        
        // This part is hypothetical, as StdDateFormat currently does not support setLenient(false)
        // dateFormat.setLenient(false);  // This should be how we would disable leniency

        objectMapper.setDateFormat(dateFormat);

        String invalidDate = "\"2015-01-32\"";

        // Attempt to parse invalid date
        // This should throw an InvalidFormatException when leniency is disabled
        Date parsedDate = objectMapper.readValue(invalidDate, Date.class);
    }

    @Test
    public void testDefaultLenientDateParsing() throws Exception {
        // Create ObjectMapper with default StdDateFormat (lenient)
        ObjectMapper objectMapper = new ObjectMapper();

        String invalidDate = "\"2015-01-32\"";

        // Attempt to parse invalid date with default leniency
        // It should parse the date as 2015-02-01
        Date parsedDate = objectMapper.readValue(invalidDate, Date.class);

        assertNotNull(parsedDate);
        
        // Expected parsed date is 2015-02-01 when lenient
        assertEquals(1, parsedDate.getMonth()); // February is month 1 in zero-based index
        assertEquals(1, parsedDate.getDate());
        assertEquals(2015 - 1900, parsedDate.getYear()); // Date.getYear() returns year minus 1900
    }
}
