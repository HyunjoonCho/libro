
import org.apache.commons.collections4.IteratorUtils;
import org.junit.Test;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;

import static org.junit.Assert.assertEquals;

public class CollatedIteratorTest {

    @Test(expected = NoSuchElementException.class)
    public void testCollatedIteratorWithNullComparator() {
        List<Integer> list1 = Arrays.asList(1, 3, 5);
        List<Integer> list2 = Arrays.asList(2, 4, 6);

        Iterator<Integer> iterator1 = list1.iterator();
        Iterator<Integer> iterator2 = list2.iterator();

        // Attempt to create a collated iterator with a null comparator
        Iterator<Integer> collatedIterator = IteratorUtils.collatedIterator(null, iterator1, iterator2);

        // Since a null comparator is provided, it should use natural ordering
        assertEquals(Integer.valueOf(1), collatedIterator.next());
        assertEquals(Integer.valueOf(2), collatedIterator.next());
        assertEquals(Integer.valueOf(3), collatedIterator.next());
        assertEquals(Integer.valueOf(4), collatedIterator.next());
        assertEquals(Integer.valueOf(5), collatedIterator.next());
        assertEquals(Integer.valueOf(6), collatedIterator.next());

        // Check for NoSuchElementException when attempting next on an exhausted iterator
        collatedIterator.next();
    }
}
