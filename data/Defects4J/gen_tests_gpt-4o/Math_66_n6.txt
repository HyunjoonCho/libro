
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BrentOptimizer;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Before;
import org.junit.Test;

public class BrentOptimizerTest {

    private BrentOptimizer optimizer;

    @Before
    public void setUp() {
        // Set up the optimizer with reasonable tolerances
        optimizer = new BrentOptimizer(1e-10, 1e-14);
    }

    // A simple quadratic function for testing
    private UnivariateFunction quadraticFunction = new UnivariateFunction() {
        @Override
        public double value(double x) {
            return (x - 3) * (x - 3);
        }
    };

    @Test
    public void testBrentOptimizerMinimization() {
        // Using the optimizer to find the minimum of the quadratic function
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(1000),
            new org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction(quadraticFunction),
            GoalType.MINIMIZE,
            new SearchInterval(0, 10)
        );

        double expectedMinX = 3.0;
        double tolerance = 1e-8;

        // Assert that computed minimum is close to the expected minimum
        assertEquals(expectedMinX, result.getPoint(), tolerance);
        assertTrue(result.getValue() < 1e-8);
    }
}
