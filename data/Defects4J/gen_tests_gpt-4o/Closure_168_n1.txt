script
// Test case reproducing the bug
var makeClass = function(protoMethods) {
    var clazz = function() {
        this.initialize.apply(this, arguments);
    };
    for (var i in protoMethods) {
        clazz.prototype[i] = protoMethods[i];
    }

    return clazz;
};

/** @constructor */
var Person = function(name){};
Person = makeClass(/** @lends Person.prototype */ {
    /** @this {Person} */
    initialize: function(name) {
        this.name = name;
    },

    /** @this {Person} */
    getName: function() { return this.name; },

    /**
     * @param {string} message
     * @this {Person}
     */
    say: function(message) {
        // Test behavior with direct call - should produce error
        console.log(this.getName(1) + ' says: ' + message);

        // Test behavior with aliasing inside setTimeout - error may not be caught
        var self = this;
        setTimeout(function() {
            console.log(self.getName(1) + ' says: ' + message);
        }, 500);
    }
});

// Instances to trigger the behavior
var joe = new Person('joe');
joe.say('hi');

var jane = new Person('jane');
jane.say('hello');
