script
// Sample code to reproduce the warning emission behavior with a type checker like Google Closure Compiler.

/**
 * Simulate a type-checking environment using Closure Compiler
 * 
 * Run with: java -jar closure-compiler-v20230802.jar --js test.js --warning_level=VERBOSE
 */

// Define the namespace
var ns = {};

// First scenario: `ns.a` defined outside of any function
/** @param {string=} b */
ns.a = function(b) {};

function d() {
  ns.a();
  ns.a(123); // This should emit a type warning
}

// Second scenario: `ns.a` defined inside an anonymous function
(function() {
  /** @param {string=} b */
  ns.a = function(b) {};
})();

function e() {
  ns.a();
  ns.a(123); // The param type warning may be ignored
}

// Third scenario: Not being inside of a function
(function() {
  /** @param {string=} b */
  ns.a = function(b) {};
})();

ns.a(); // This should emit a warning for zero parameters if any warning since the type warning is ignored
ns.a(123); // Type error warning ignored in functionless context
