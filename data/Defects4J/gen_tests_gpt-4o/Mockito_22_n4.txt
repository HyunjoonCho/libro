
import static org.mockito.Mockito.*;

import org.junit.Test;

import java.util.function.Supplier;

interface I {
    <T> Supplier<T> m(Class<T> type);
}

public class MockitoDeepStubTest {

    @Test(expected = ClassCastException.class)
    public void testDeepStubsWithGenerics() {
        I i = mock(I.class, RETURNS_DEEP_STUBS);
        // This should throw a ClassCastException due to the bug in handling generics with deep stubs
        when(i.m(Boolean.class).get());
    }

    @Test
    public void testWithoutDeepStubs() {
        I i = mock(I.class);
        Supplier<Boolean> s = mock(Supplier.class);
        when(i.m(Boolean.class)).thenReturn(s);
        when(i.m(Boolean.class).get());

        // This works fine without deep stubs
        // Add assertions if needed
    }
}
