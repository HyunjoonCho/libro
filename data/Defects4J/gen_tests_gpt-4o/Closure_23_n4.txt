
import static org.junit.Assert.assertEquals;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

public class PeepholeFoldConstantsTest {

    @Test
    public void testTryFoldArrayAccessWithSideEffects() {
        // The input JavaScript code
        String code = "console.log([console.log('hello, '), 'world!'][1]);";
        
        // Expected output if side effect is preserved
        String expectedOutput = "console.log((console.log(\"hello, \"), \"world!\"));";
        
        // Set up the compiler and options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Enable the specific optimization that might be causing the issue
        // This part may require enabling the simple or advanced optimization level
        // depending on your configuration
        options.setOptimizationLevel(CompilerOptions.OptimizationLevel.WHITESPACE_ONLY);
        // Ideally, here you enable specific options akin to 'simple' or 'advanced'
        // This dummy enable method is used to illustrate
        options.setPrettyPrint(true); // For reading the output

        // Compile the source code
        Result result = compiler.compile(
                SourceFile.fromCode("externs.js", ""), // empty externs
                SourceFile.fromCode("test.js", code), 
                options);
        
        // Get the compiled code
        String compiledCode = compiler.toSource();
        
        // Assert that compiled code matches expected output
        // This checks if the compilation preserved side effects
        assertEquals(expectedOutput, compiledCode);
    }
}
