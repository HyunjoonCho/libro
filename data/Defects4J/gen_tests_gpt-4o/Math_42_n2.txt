
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.NonNegativeConstraint;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexSolver;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertTrue;

public class SimplexSolverTest {

    @Test
    public void testNegativeValueWithRestrictNonNegative() {
        // Objective function: 1 * x + 1 * y + 0 * z
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{1, 1, 0}, 0);

        // Constraints: 1 * x + 0 * y = 1
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0, 0}, Relationship.EQ, 1));

        // Create and solve the optimization problem
        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, new NonNegativeConstraint(true));

        // Extract solution
        double[] point = solution.getPoint();

        // Assert that all variables adhere to non-negativity
        for (double value : point) {
            assertTrue("Variable value should be non-negative, but was: " + value, value >= 0);
        }
    }
}
