
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class UTF8JsonGeneratorTest {

    @Test
    public void testQuoteFieldNamesToggle() throws IOException {
        // Create a JsonFactory and an ObjectMapper
        JsonFactory factory = new JsonFactory();
        ObjectMapper mapper = new ObjectMapper(factory);

        // First, test with QUOTE_FIELD_NAMES enabled
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        JsonGenerator generator = factory.createGenerator(outputStream);
        generator.writeStartObject();
        generator.writeStringField("name", "John");
        generator.writeEndObject();
        generator.close();

        // Expecting quoted field names by default
        String jsonWithQuotes = outputStream.toString("UTF-8");
        assertEquals("{\"name\":\"John\"}", jsonWithQuotes);

        // Now test with QUOTE_FIELD_NAMES disabled
        outputStream = new ByteArrayOutputStream();
        generator = factory.createGenerator(outputStream);
        generator.configure(JsonGenerator.Feature.QUOTE_FIELD_NAMES, false);
        generator.writeStartObject();
        generator.writeStringField("name", "John");
        generator.writeEndObject();
        generator.close();

        // Expecting non-quoted field names when the feature is disabled
        String jsonWithoutQuotes = outputStream.toString("UTF-8");
        assertEquals("{name:\"John\"}", jsonWithoutQuotes);
    }
}
