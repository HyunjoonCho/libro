public void testCompilerRemovesFunctionProperties() {
    // Function map setup
    java.util.Map<String, Function> map = new java.util.HashMap<>();
    
    // Function declarations
    Function<Void, Void> f1 = () -> { System.out.println("f1"); return null; };
    Function<Void, Void> f2 = () -> { System.out.println("f2"); return null; };

    // Assume closure-compiler adds a property this way for functions
    ((PropertyFunction) f1).alwaysCall = true;

    // Add to map
    map.put("f1", f1);
    map.put("f2", f2);

    // Call function by key
    Function<Void, Void> chosenFunction = map.get(Math.random() > 0.5 ? "f1" : "f2");
    if (chosenFunction instanceof PropertyFunction) {
        if (((PropertyFunction) chosenFunction).alwaysCall) {
            chosenFunction.apply(null);
        }
    }
}

// Helper interface to mimic function properties
interface PropertyFunction extends Function<Void, Void> {
    default boolean alwaysCall() { return false; }
    boolean alwaysCall = false;
}