
import org.junit.Test;
import static org.junit.Assert.assertEquals;

// Dummy class to simulate flag precedence behavior
public class JsCompilerFlagHandler {

    public String processFlags(String... flags) {
        String effective = "error"; // Default to most severe
        for (String flag : flags) {
            if (flag.equals("jscomp_off")) {
                effective = "off";
            } else if (flag.equals("jscomp_warning") && !effective.equals("off")) {
                effective = "warning";
            } else if (flag.equals("jscomp_error") && effective.equals("error")) {
                effective = "error"; // "error" is overridden only by "warning" or "off"
            }
        }
        return effective;
    }
}

// JUnit test case
public class JsCompilerFlagHandlerTest {

    @Test
    public void testFlagPrecedence() {
        JsCompilerFlagHandler handler = new JsCompilerFlagHandler();
        
        // Test that the last flag has precedence
        assertEquals("off", handler.processFlags("jscomp_error", "jscomp_warning", "jscomp_off"));
        assertEquals("warning", handler.processFlags("jscomp_error", "jscomp_off", "jscomp_warning"));
        assertEquals("error", handler.processFlags("jscomp_warning", "jscomp_off", "jscomp_error"));
        
        // Test isolated flags
        assertEquals("error", handler.processFlags("jscomp_error"));
        assertEquals("warning", handler.processFlags("jscomp_warning"));
        assertEquals("off", handler.processFlags("jscomp_off"));
        
        // Test repeated flags
        assertEquals("off", handler.processFlags("jscomp_off", "jscomp_off", "jscomp_warning"));
        assertEquals("warning", handler.processFlags("jscomp_warning", "jscomp_error", "jscomp_warning"));
    }
}
