public void testCMAESOptimizerNaNParameters() {
    double[] startPoint = new double[] { 0, 0 };
    double[] lowerBound = new double[] { -Double.MAX_VALUE, -Double.MAX_VALUE };
    double[] upperBound = new double[] { Double.MAX_VALUE, Double.MAX_VALUE };

    CMAESOptimizer optimizer = new CMAESOptimizer();
    MultivariateFunction fitnessFunction = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            for (double p : point) {
                if (Double.isNaN(p)) {
                    fail("Fitness function received NaN parameter");
                }
            }
            return 0;
        }
    };

    optimizer.optimize(new MaxEval(100000),
                       new ObjectiveFunction(fitnessFunction),
                       GoalType.MINIMIZE,
                       new InitialGuess(startPoint),
                       new SimpleBounds(lowerBound, upperBound),
                       new CMAESOptimizer.Sigma(new double[] { 1, 1 }));
}