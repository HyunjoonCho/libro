
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.Test;
import static org.junit.Assert.*;

@JsonIgnoreProperties("cause")
class MyException extends RuntimeException {
    private String message;
    
    public MyException() {}

    public MyException(String message) {
        super(message);
        this.message = message;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }
}

public class GaeExceptionTest {

    @Test
    public void testDeserializeExceptionWithIgnoredCause() {
        String json = "{\"message\":\"Test error message\", \"cause\":\"Some cause\"}";
        
        ObjectMapper mapper = new ObjectMapper();

        // We set this feature to simulate the behavior on GAE
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        try {
            MyException ex = mapper.readValue(json, MyException.class);
            assertEquals("Test error message", ex.getMessage());
        } catch (InvalidDefinitionException e) {
            fail("Deserialization failed due to cause property access: " + e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception during deserialization: " + e.getMessage());
        }
    }
}
