
import org.junit.Test;
import static org.junit.Assert.*;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;

public class ClosureCompilerTest {

    @Test
    public void testRecordTypeError() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        // Enable the error checks needed to reproduce the issue
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS, com.google.javascript.jscomp.CheckLevel.ERROR);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES, com.google.javascript.jscomp.CheckLevel.ERROR);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES, com.google.javascript.jscomp.CheckLevel.ERROR);
        
        String jsCode = "/** @typedef {{name: string, id: number}} */\n" +
                        "var RecordType1;\n" +
                        "/** @typedef {{name2: string}} */\n" +
                        "var RecordType2;\n" +
                        "/**\n" +
                        " * @param {RecordType1} rec\n" +
                        " */\n" +
                        "var func = function(rec) {\n" +
                        "  alert(rec.name2);\n" +
                        "};\n" +
                        "func({name: 'jim', id: 0});";

        // Create a test source file
        JSSourceFile testFile = JSSourceFile.fromCode("test.js", jsCode);

        // Compile the source code
        Result result = compiler.compile(JSSourceFile.fromCode("externs.js", ""), testFile, options);

        // Check that there is a type error due to the undefined property 'name2' being used
        assertEquals(1, compiler.getErrorCount());
        String errorMsg = compiler.getErrors()[0].description;
        assertTrue(errorMsg.contains("Property name2 never defined on rec"));
    }
}
