public void testResolveTypesUnionTypeCastError() {
    try {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setCreateNameMapFiles(true);
        options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARS, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.STRICT_MODULE_DEP_CHECK, CheckLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.INVALID_CASTS, CheckLevel.ERROR);
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setProcessClosurePrimitives(true);
        options.setSummaryDetailLevel(3);
        
        SourceFile extern = SourceFile.fromCode("externs", "");
        SourceFile input = SourceFile.fromCode("input", "var x = { };\n" +
                                                 "function f() {\n" +
                                                 "  var y = (x || {}).a;\n" +
                                                 "};");
        
        compiler.compile(extern, input, options);
        fail("Expected a ClassCastException to be thrown");
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof ClassCastException);
        assertTrue(e.getCause().getMessage().contains("UnionType cannot be cast to ObjectType"));
    }
}