
import com.google.javascript.jscomp.*;

import java.util.logging.Level;
import java.util.logging.Logger;

public class ClosureCompilerBugTest {

    public static void main(String[] args) {
        // Set up a simple logger to capture any runtime messages
        Logger logger = Logger.getLogger(ClosureCompilerBugTest.class.getName());
        logger.setLevel(Level.ALL);

        // Set up simple compiler options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
        options.setCreateNameMapFiles(true);
        options.setProcessClosurePrimitives(true);
        options.setSummaryDetailLevel(3);
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT6_STRICT);

        options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.STRICT_MODULE_DEP_CHECK, CheckLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.INVALID_CASTS, CheckLevel.ERROR);

        // Mock JavaScript content
        String jsCode = "var myVar = 10; \n" +
                        "function testFunc() { \n" +
                        "   return myVar + 'test'; \n" +
                        "} \n" +
                        "testFunc();";

        // Create an instance of the closure compiler
        Compiler compiler = new Compiler();
        JSSourceFile[] inputs = new JSSourceFile[]{JSSourceFile.fromCode("test.js", jsCode)};
        JSSourceFile[] externs = new JSSourceFile[]{};

        try {
            // Compile the source
            compiler.compile(externs, inputs, options);
        } catch (RuntimeException e) {
            // Output the stack trace if a known error is encountered
            if (e.getCause() instanceof ClassCastException && e.getCause().getMessage().contains("UnionType cannot be cast to ObjectType")) {
                e.printStackTrace();
            } else {
                throw e;  // Re-throw exceptions not related to the known issue
            }
        }
    }
}
