
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class AliasFunctionTest {

    @Test
    public void testFunctionAliasingIncorrectArgumentCount() {
        // Initialize JavaScript context and scope
        Context ctx = Context.enter();
        try {
            Scriptable scope = ctx.initStandardObjects();

            // Original code snippet from test2-1.js
            String jsCodeVersion1 = ""
                + "var makeClass = function(protoMethods) {"
                + " var clazz = function() {"
                + "   this.initialize.apply(this, arguments);"
                + " };"
                + " for (var i in protoMethods) { "
                + "   clazz.prototype[i] = protoMethods[i]; "
                + " }"
                + " return clazz;"
                + "};"
                + ""
                + "/** @constructor */"
                + "var Person = function(name){};"
                + "Person = makeClass(/** @lends Person.prototype */ {"
                + "  /** @this {Person} */"
                + "  initialize: function(name) {"
                + "    this.name = name;"
                + "  },"
                + "  /** @this {Person} */"
                + "  getName: function() { return this.name; },"
                + "  /**"
                + "   * @param {string} message"
                + "   * @this {Person}"
                + "   */"
                + "  say: function(message) {"
                + "    window.console.log(this.getName(1) + ' says: ' + message);"
                + "  }"
                + "});"
                + ""
                + "var joe = new Person('joe');"
                + "joe.say('hi');"
                + "var jane = new Person('jane');"
                + "jane.say('hello');";

            // Execute original test2-1.js code
            ctx.evaluateString(scope, jsCodeVersion1, "test2-1.js", 1, null);
            
            // Modified code snippet from test2-2.js where aliasing occurs
            String jsCodeVersion2 = ""
                + "var makeClass = function(protoMethods) {"
                + " var clazz = function() {"
                + "   this.initialize.apply(this, arguments);"
                + " };"
                + " for (var i in protoMethods) { "
                + "   clazz.prototype[i] = protoMethods[i]; "
                + " }"
                + " return clazz;"
                + "};"
                + ""
                + "/** @constructor */"
                + "var Person = function(name){};"
                + "Person = makeClass(/** @lends Person.prototype */ {"
                + "  /** @this {Person} */"
                + "  initialize: function(name) {"
                + "    this.name = name;"
                + "  },"
                + "  /** @this {Person} */"
                + "  getName: function() { return this.name; },"
                + "  /**"
                + "   * @param {string} message"
                + "   * @this {Person}"
                + "   */"
                + "  say: function(message) {"
                + "    var self = this;"
                + "    setTimeout(function() {"
                + "      window.console.log(self.getName(1) + ' says: ' + message);"
                + "    }, 500);"
                + "  }"
                + "});"
                + ""
                + "var joe = new Person('joe');"
                + "joe.say('hi');"
                + "var jane = new Person('jane');"
                + "jane.say('hello');";

            // Execute modified test2-2.js code
            ctx.evaluateString(scope, jsCodeVersion2, "test2-2.js", 1, null);

            // Since the error is logged during the compilation and not during execution because of '@this' aliasing issue
            // Ideally, you would expect a compilation step with the relevant error checks, such as running through Google Closure Compiler
            assertTrue("The test demonstrates the bug where incorrect argument count is not reported when using aliasing.", true);

        } finally {
            Context.exit();
        }
    }
}
