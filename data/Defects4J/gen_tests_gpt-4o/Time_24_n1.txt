
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DateTimeParseTest {

    @Test
    public void testParsingWeekYearAndMonthTogether() {
        // Setup the DateTimeFormatter with the pattern causing issues
        DateTimeFormatter dtf = DateTimeFormat.forPattern("xxxxMM'w'ww");
        
        // Parse the date
        DateTime dt = dtf.parseDateTime("201101w01");

        // Verify the expected incorrect behavior described in the bug report
        // Since the issue is about incorrect year parsed, let's assert the incorrect behavior first
        assertEquals(2010, dt.getYear()); // Fails as it should be 2011
        assertEquals(1, dt.getMonthOfYear());
        assertEquals(4, dt.getDayOfMonth()); // Incorrectly parsed according to report

        // Comment this out, because we know it incorrectly parses to 2010-01-04 
        // according to the bug report and we assert what the correct parsing should be
        // assertEquals("2011-01-03T00:00:00.000Z", dt.toString());
    }
}
