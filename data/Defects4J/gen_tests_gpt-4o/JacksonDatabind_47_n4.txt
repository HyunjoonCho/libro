
import com.fasterxml.jackson.annotation.JsonDeserialize;
import com.fasterxml.jackson.annotation.JsonSerialize;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class JacksonSerializeTest {

    @Test
    public void testSerializationWithSuperType() throws JsonProcessingException {
        Foo foo = new Foo(new BaseAccessionIdentifier());
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);

        // This line is expected to throw a JsonMappingException based on the bug report
        String json = mapper.writeValueAsString(foo);

        // The test will fail if the exception is not thrown and will pass otherwise
        // However for assertion, we can assert that json is not null indicating some serialization happened
        assertNotNull(json);
        System.out.println(json);
    }

    public static class Foo {
        private AccessionIdentifier reference;

        public Foo(AccessionIdentifier reference) {
            this.reference = reference;
        }

        @JsonSerialize(as = BaseAccessionIdentifier.class)
        @JsonDeserialize(as = BaseAccessionIdentifier.class)
        public AccessionIdentifier getReference() {
            return reference;
        }
    }

    public interface AccessionIdentifier {
    }

    public static class BaseAccessionIdentifier implements AccessionIdentifier {
    }
}
