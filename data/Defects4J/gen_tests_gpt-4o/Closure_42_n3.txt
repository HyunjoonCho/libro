
import org.junit.Test;
import static org.junit.Assert.*;

public class JavaScriptMinifierTest {

    @Test
    public void testForEachPreservation() {
        String inputScript = "contactcenter.screenpop.updatePopStatus = function(stamp, status) {\n" +
                             "    for each ( var curTiming in this.timeLog.timings ) {\n" +
                             "        if ( curTiming.callId == stamp ) {\n" +
                             "            curTiming.flag = status;\n" +
                             "            break;\n" +
                             "        }\n" +
                             "    }\n" +
                             "};";
        
        // Assuming we have a `compressJavaScript` method in our minification utility
        String compressedScript = JavaScriptMinifier.compressJavaScript(inputScript);
        
        // Check that the "for each" keyword is preserved in the compressed script
        assertTrue("Compressed script should contain 'for each'", compressedScript.contains("for each"));
        
        // Example to show the failed expected behavior:
        // assertFalse("Compressed script should not contain 'for each'", compressedScript.contains("for each"));
    }
    
    // Mock method to demonstrate process, replace with actual compression method
    static class JavaScriptMinifier {
        public static String compressJavaScript(String script) {
            // Simulate compression issue for demonstration
            return "contactcenter.screenpop.updatePopStatus=function(stamp,status){for(var curTiming in this.timeLog.timings)if(curTiming.callId==stamp){curTiming.flag=status;break}};";
        }
    }
}
