public void testTokenBufferWithJsonCreator() throws IOException {
    String json = "{ \"a\": 1, \"b\": null }";
    ObjectMapper mapper = new ObjectMapper();

    JsonParser parser = mapper.getFactory().createParser(json);
    TokenBuffer tokenBuffer = new TokenBuffer(parser, null);

    // Initialize the parser and advance to first token
    parser.nextToken(); // START_OBJECT
    tokenBuffer.copyCurrentStructure(parser);

    // Use JsonCreator to create a Value instance
    Value value = Value.from(tokenBuffer);

    // Expected TokenBuffer contents
    List<JsonToken> expectedTokens = Arrays.asList(
        JsonToken.START_OBJECT,
        JsonToken.FIELD_NAME, JsonToken.VALUE_NUMBER_INT,
        JsonToken.FIELD_NAME, JsonToken.VALUE_NULL,
        JsonToken.END_OBJECT
    );

    // Extract actual tokens from the buffer
    List<JsonToken> actualTokens = extractTokensFromBuffer(tokenBuffer);

    // Assert that the tokens in the TokenBuffer match the expected tokens
    assertEquals(expectedTokens, actualTokens);
}

private List<JsonToken> extractTokensFromBuffer(TokenBuffer buffer) throws IOException {
    List<JsonToken> tokens = new ArrayList<>();
    JsonParser bufferParser = buffer.asParser();
    while (bufferParser.nextToken() != null) {
        tokens.add(bufferParser.getCurrentToken());
    }
    return tokens;
}