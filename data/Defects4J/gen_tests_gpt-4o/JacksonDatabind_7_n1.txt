
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class TokenBufferDeserializationTest {

    static class Value {
        @JsonCreator
        public static Value from(TokenBuffer buffer) throws Exception {
            JsonParser parser = buffer.asParser();
            JsonToken token = parser.nextToken(); // Expecting to start with START_OBJECT
            assertEquals(JsonToken.START_OBJECT, token);

            parser.clearCurrentToken();

            // Collect all tokens inside buffer for verification
            StringBuilder tokens = new StringBuilder();
            while ((token = parser.nextToken()) != null) {
                tokens.append(token).append(",");
            }

            // Expected tokens inside TokenBuffer
            assertEquals("FIELD_NAME,VALUE_NUMBER_INT,FIELD_NAME,VALUE_NULL,END_OBJECT,", tokens.toString());
            parser.close();

            return new Value();
        }
    }

    @Test
    public void testDeserializationWithTokenBuffer() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{ \"a\":1, \"b\":null }";

        Value value = mapper.readValue(json, Value.class);

        // We just need to ensure deserialization completes successfully
        assertTrue(value instanceof Value);
    }
}
