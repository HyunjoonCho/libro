
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class SimpleTypeConstructionTest {

    private static class SampleClass {
        public int id;
        public String name;
    }

    @Test
    public void testSimpleTypeConstruction() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.configure(SerializationFeature.INDENT_OUTPUT, false);

        // Attempt to construct using SimpleType, which should be avoided
        JavaType javaTypeUsingSimpleType = SimpleType.construct(SampleClass.class);
        String resultingJsonUsingSimpleType = objectMapper.writerFor(javaTypeUsingSimpleType).writeValueAsString(new SampleClass());

        // Now use the TypeFactory which should properly resolve the type information
        JavaType javaTypeUsingFactory = TypeFactory.defaultInstance().constructType(SampleClass.class);
        String resultingJsonUsingFactory = objectMapper.writerFor(javaTypeUsingFactory).writeValueAsString(new SampleClass());

        // The serialized JSON strings should be identical if both approaches resolve the class correctly
        assertEquals(resultingJsonUsingFactory, resultingJsonUsingSimpleType);
    }
}
