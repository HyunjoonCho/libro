
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.kotlin.KotlinModule;
import org.junit.Test;
import java.math.BigDecimal;

import static org.junit.Assert.assertEquals;

public class BigDecimalSerializationTest {

    public static class TestEntity {
        @JsonFormat(shape = JsonFormat.Shape.STRING)
        private BigDecimal value;

        public TestEntity(BigDecimal value) {
            this.value = value;
        }

        public BigDecimal getValue() {
            return value;
        }
    }

    @Test
    public void testBigDecimalSerializationWithJsonFormat() throws Exception {
        ObjectMapper mapper = new ObjectMapper()
            .registerModule(new KotlinModule())
            .configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true);

        TestEntity testEntity = new TestEntity(new BigDecimal("0.0000000005"));
        String jsonOutput = mapper.writeValueAsString(testEntity);

        // Verify that the output does not use scientific notation
        assertEquals("{\"value\":\"0.0000000005\"}", jsonOutput);
    }
}
