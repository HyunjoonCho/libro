
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.*;

public class CommandLineTest {

    private Options options;
    private CommandLineParser parser;

    @Before
    public void setUp() {
        options = new Options();
        parser = new DefaultParser();

        // Define an option with a default value
        Option optionWithDefault = Option.builder("o")
                .hasArg()
                .desc("Option with default value")
                .build();

        // Add option to options
        options.addOption(optionWithDefault);
    }

    @Test
    public void testCommandLineOverrideDefault() throws Exception {
        // Assume that some system or framework initially sets a default value
        String[] defaultArgs = new String[]{"-o", "defaultValue"};
        CommandLine initialCommandLine = parser.parse(options, defaultArgs);

        // Now user provides a new value via command line
        String[] userArgs = new String[]{"-o", "newValue"};
        CommandLine userCommandLine = parser.parse(options, userArgs);

        // Check if user-provided value overrides the default value
        assertTrue("User option should be present", userCommandLine.hasOption("o"));
        assertEquals("newValue", userCommandLine.getOptionValue("o"));
    }
}
