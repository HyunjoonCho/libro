
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.w3c.dom.Document;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

public class TestNamespaceHandling {

    public void testNamespaceRegistrationForAttributes() {
        String xmlContent = 
            "<ElementA xmlns:A=\"http://example.com/ns1\" " +
            "xmlns:B=\"http://example.com/ns2\" A:myAttr=\"Mytype\">" +
            "<B:ElementB>MY VALUE</B:ElementB>" +
            "</ElementA>";

        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(new java.io.ByteArrayInputStream(xmlContent.getBytes()));

            JXPathContext context = JXPathContext.newContext(document);
            context.registerNamespace("A", "http://example.com/ns1");
            context.registerNamespace("B", "http://example.com/ns2");

            // This should not throw an exception if namespaces are correctly registered
            String value = (String) context.getValue("/ElementA/@A:myAttr");
            assertEquals("Mytype", value);

        } catch (JXPathException e) {
            fail("Namespace handling for attributes did not work: " + e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
    
    private void assertEquals(String expected, String actual) {
        if (!expected.equals(actual)) {
            throw new AssertionError("Expected: " + expected + ", but got: " + actual);
        }
    }
    
    private void fail(String message) {
        throw new AssertionError(message);
    }
}
