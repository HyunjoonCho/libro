public void testVeryCloseEventsDetection() {
    SwitchingFunction switchingFunction = new SwitchingFunction() {
        public double g(double t, double[] y) {
            if (t < 112.5) {
                return t - 90.0; // First event at t=90
            } else {
                return 135.0 - t; // Second event at t=135
            }
        }

        public int eventOccurred(double t, double[] y, boolean increasing) {
            return CONTINUE;
        }

        public double resetState(double t, double[] y) {
            return 0;
        }
    };

    double t0 = 67.5;
    double t1 = 153.0;
    double[] y0 = new double[] { 0.0 };

    HighamHall54Integrator integrator = new HighamHall54Integrator(1.0e-10, 1.0, 1.0e-12, 1.0e-12);
    integrator.addSwitchingFunction(switchingFunction, 1.0e-10, 1.0e-10, 100);

    integrator.integrate(new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return 1;
        }

        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = 1.0; // Simple linear growth
        }
    }, t0, y0, t1, y0);

    // After integration events should have been detected at t=90 and t=135
    assertEquals(135.0, integrator.getCurrentStepStart(), 1.0e-10);
}