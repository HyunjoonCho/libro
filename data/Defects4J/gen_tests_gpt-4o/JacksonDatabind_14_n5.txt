
import static org.junit.Assert.assertEquals;

import java.io.IOException;

import org.junit.Test;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.module.SimpleModule;

public class DataDeserializationTest {

    static class DataA {
        public int i = 1;
        public int j = 2;
    }

    static class DataB {
        public DataA da = new DataA();
        public int k = 3;
    }

    static class DataADeserializer extends StdDeserializer<DataA> {
        private static final long serialVersionUID = 1L;

        public DataADeserializer() {
            super(DataA.class);
        }

        @Override
        public DataA deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            assert (jp.getCurrentToken() == JsonToken.START_OBJECT);
            JsonNode node = jp.getCodec().readTree(jp);

            DataA da = new DataA();
            da.i = 5; // Set a new value to `i`
            return da;
        }
    }

    @Test
    public void testDeserializationIssue() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(DataA.class, new DataADeserializer());
        mapper.registerModule(module);

        // Create an instance of DataB
        DataB db = new DataB();
        db.da.i = 11;
        db.k = 13;

        // Serialize to JSON
        String jsonBString = mapper.writeValueAsString(db);
        JsonNode jsonBNode = mapper.valueToTree(db);

        // Update the existing DataB object using the serialized JSON
        DataB dbUpdViaNode = new DataB();

        // Ensure initial values
        assertEquals(1, dbUpdViaNode.da.i);
        assertEquals(3, dbUpdViaNode.k);

        // Attempt to update using a JsonNode and expect a failure
        try {
            mapper.readerForUpdating(dbUpdViaNode).readValue(jsonBNode);
            // Check the updated values
            assertEquals(5, dbUpdViaNode.da.i);
            assertEquals(13, dbUpdViaNode.k);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
