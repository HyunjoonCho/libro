
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.apache.commons.lang3.StringUtils;
import org.junit.Test;

import javax.lang.model.element.Name;
import javax.lang.model.element.Element;
import javax.lang.model.util.Elements;
import javax.tools.ToolProvider;
import java.util.Collections;
import javax.tools.StandardJavaFileManager;
import javax.tools.JavaCompiler;

public class StringUtilsTest {

    /**
     * Custom Name implementation for test
     */
    class SimpleName implements Name {
        private final String name;

        public SimpleName(String name) {
            this.name = name;
        }

        @Override
        public boolean contentEquals(CharSequence cs) {
            return name.contentEquals(cs);
        }

        @Override
        public int length() {
            return name.length();
        }

        @Override
        public char charAt(int index) {
            return name.charAt(index);
        }

        @Override
        public CharSequence subSequence(int start, int end) {
            return name.subSequence(start, end);
        }

        @Override
        public String toString() {
            return name;
        }
    }

    @Test
    public void testEqualsWithDifferentCharSequenceImplementations() {
        Name name = new SimpleName("test");
        String string = "test";

        // Using Java's equals, should return false because Name and String are different types
        assertFalse(name.equals(string));

        // Expected to return true if we're appropriately comparing content of CharSequences
        assertTrue(StringUtils.equals(name, string));
    }
}
