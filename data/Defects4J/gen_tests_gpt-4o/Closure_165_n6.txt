public void testPropertiesDefinedOnUnrelatedRecordTypes() {
    // Assume setup for a JavaScript environment with a closure compiler or equivalent API support
    String codeWithSingleRecordType = "/** @typedef {{name: string, id: number}} */\n"
                                      + "var RecordType1;\n"
                                      + "/**\n"
                                      + " * @param {RecordType1} rec\n"
                                      + " */\n"
                                      + "var func = function(rec) {\n"
                                      + " alert(rec.name2);\n"
                                      + "};\n"
                                      + "func({name: 'jim', id: 0});";
    
    String codeWithTwoRecordTypes = "/** @typedef {{name: string, id: number}} */\n"
                                    + "var RecordType1;\n"
                                    + "/** @typedef {{name2: string}} */\n"
                                    + "var RecordType2;\n"
                                    + "/**\n"
                                    + " * @param {RecordType1} rec\n"
                                    + " */\n"
                                    + "var func = function(rec) {\n"
                                    + " alert(rec.name2);\n"
                                    + "};\n"
                                    + "func({name: 'jim', id: 0});";

    try {
        // Simulate compilation check for code with single record type (expect errors)
        JsCompilerWrapper.compileAndCheckForErrors(codeWithSingleRecordType);
        fail("Expected an error due to undefined property name2 on RecordType1.");
    } catch (CompilationException e) {
        // Expected exception for the single record type scenario
        assertTrue(e.getMessage().contains("Property name2 never defined on rec"));
    }
    
    try {
        // Simulate compilation check for code with two record types (expect no errors)
        JsCompilerWrapper.compileAndCheckForErrors(codeWithTwoRecordTypes);
    } catch (CompilationException e) {
        fail("Did not expect error with valid RecordType2 definition");
    }
}