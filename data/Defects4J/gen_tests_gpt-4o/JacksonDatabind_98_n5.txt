
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

// Enum representing the "type" of invocation
enum Kind {
    CONTACT
}

// Base class/interface for polymorphic deserialization
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "kind")
@JsonSubTypes({
        @JsonSubTypes.Type(value = Contact.class, name = "CONTACT")
})
abstract class Invite {
    public String name;
}

// A subclass of Invite
class Contact extends Invite {
    public Contact(String name) {
        this.name = name;
    }
}

public class EnumPolymorphismTest {

    @Test
    public void testEnumPolymorphicDeserialization() throws JsonProcessingException {
        String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";

        ObjectMapper mapper = new ObjectMapper();
        Invite invite = mapper.readValue(json, Invite.class);

        assertEquals(Contact.class, invite.getClass());
        assertEquals("Foo", invite.name);
    }
}
