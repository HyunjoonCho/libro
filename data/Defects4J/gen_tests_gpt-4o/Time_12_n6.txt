
import org.joda.time.LocalDate;
import org.junit.Test;

import java.util.GregorianCalendar;

import static org.junit.Assert.assertEquals;

public class LocalDateEraTest {

    @Test
    public void testLocalDateFromCalendarFieldsWithEra() {
        // Set up a Gregorian Calendar date in the current era (AD)
        GregorianCalendar calendarAd = new GregorianCalendar(2023, GregorianCalendar.OCTOBER, 20);
        calendarAd.set(GregorianCalendar.ERA, GregorianCalendar.AD); // This is implied but set explicitly

        // Convert to LocalDate
        LocalDate localDateAd = LocalDate.fromCalendarFields(calendarAd);

        // Assert that the LocalDate matches the input values
        assertEquals(2023, localDateAd.getYear());
        assertEquals(10, localDateAd.getMonthOfYear());
        assertEquals(20, localDateAd.getDayOfMonth());

        // Set up a Gregorian Calendar date in the previous era (BC)
        GregorianCalendar calendarBc = new GregorianCalendar(2023, GregorianCalendar.OCTOBER, 20);
        calendarBc.set(GregorianCalendar.ERA, GregorianCalendar.BC);

        // Convert to LocalDate
        LocalDate localDateBc = LocalDate.fromCalendarFields(calendarBc);

        // Assert that the LocalDate caters for the era change correctly
        // In Joda-Time, BC is represented as negative years
        assertEquals(-2022, localDateBc.getYear()); // Expected year in BC
        assertEquals(10, localDateBc.getMonthOfYear());
        assertEquals(20, localDateBc.getDayOfMonth());
    }
}
