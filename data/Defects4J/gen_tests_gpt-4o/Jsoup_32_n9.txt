
import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashSet;
import java.util.Set;

public class ElementCloneTest {

    private static class Element implements Cloneable {
        private Set<String> classNames;

        public Element() {
            this.classNames = new HashSet<>();
        }

        public void addClassName(String className) {
            this.classNames.add(className);
        }

        public Set<String> getClassNames() {
            return classNames;
        }

        @Override
        protected Object clone() {
            try {
                Element cloned = (Element) super.clone();
                cloned.classNames = new HashSet<>(this.classNames);
                return cloned;
            } catch (CloneNotSupportedException e) {
                throw new AssertionError(); // Can't happen
            }
        }
    }

    @Test
    public void testCloneClassNameIndependence() {
        Element original = new Element();
        original.addClassName("original-class");

        Element cloned = (Element) original.clone();

        // Ensure they are not the same instance
        assertNotSame(original, cloned);

        // They should initially have the same content
        assertEquals(original.getClassNames(), cloned.getClassNames());

        // Modify the classNames of the original
        original.addClassName("new-original-class");

        // Ensure the classNames Set is independent
        assertNotEquals(original.getClassNames(), cloned.getClassNames());

        // Check specific set contents to ensure they are independent
        assertTrue(original.getClassNames().contains("new-original-class"));
        assertFalse(cloned.getClassNames().contains("new-original-class"));
    }
}
