
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class CMAESOptimizerBoundsTest {

    @Test
    public void testCMAESOptimizerResolutionNearBounds() {
        // Define a simple quadratic objective function: (x-5)^2
        ObjectiveFunction objective = new ObjectiveFunction(point -> {
            double x = point[0];
            return Math.pow(x - 5, 2);
        });

        // Define bounds: narrow range to amplify precision issue
        double[] lowerBound = {0.0};
        double[] upperBound = {10.0};

        // Initialize optimizer
        CMAESOptimizer optimizer = new CMAESOptimizer(
            10000,
            1e-9,
            true,
            0,
            0,
            new SimpleValueChecker(1e-9, 1e-9)
        );

        // Run optimization starting from the middle of the bounds
        PointValuePair result = optimizer.optimize(
            new MaxEval(10000),
            objective,
            GoalType.MINIMIZE,
            new InitialGuess(new double[]{5.0}),
            SimpleBounds.unbounded(1),
            SimpleBounds.simpleBound(lowerBound, upperBound)
        );

        // Extract results
        double fittedValue = result.getPoint()[0];

        // Check how close the fitted value is to the true minimum (i.e., x = 5)
        System.out.println("Fitted Value: " + fittedValue);

        // Ensure result is closer to the exact middle point, indicating imbalance in fitting precision.
        // Ideally, it should solve the minimum point (x = 5), but due to precision, it drifts off.
        // The assertions should fail if the optimizer is too imbalanced.
        // Note: Adjust assertion range based on observed behavior and precision requirements.
        assertTrue("The optimizer is expected to fit correctly near bounds", fittedValue > 4.8 && fittedValue < 5.2);
    }
}
