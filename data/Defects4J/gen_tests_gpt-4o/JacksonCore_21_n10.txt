
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.NameMatchFilter;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;
import java.io.StringReader;

import static org.junit.Assert.assertEquals;

public class FilteringParserTest {

    @Test
    public void testFilteringParserDelegateMissingEndObject() throws IOException {
        String jsonInput = "{"
                + "\"a\":123,"
                + "\"array\":[1,2],"
                + "\"ob\": {"
                + "\"value0\":2,"
                + "\"value\":3,"
                + "\"value2\":4"
                + "},"
                + "\"b\":true"
                + "}";

        JsonFactory jsonFactory = new JsonFactory();
        JsonParser originalParser = jsonFactory.createParser(new StringReader(jsonInput));

        // Setup FilteringParserDelegate to filter only "value" keys
        TokenFilter filter = new NameMatchFilter("value");
        FilteringParserDelegate filteredParser = new FilteringParserDelegate(originalParser, filter, true, false);

        ObjectMapper objectMapper = new ObjectMapper();
        // Capture the output of the FilteringParserDelegate
        String result = objectMapper.readTree(filteredParser).toString();

        // Assert the expected output
        String expectedJsonOutput = "{\"ob\":{\"value\":3}}"; // Expected with closing brackets
        assertEquals(expectedJsonOutput, result);
    }
}
