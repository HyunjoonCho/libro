
import com.google.javascript.jscomp.*;
import org.junit.Test;
import static org.junit.Assert.fail;

public class CollapsePropertiesTest {

    @Test
    public void testExceptionInCollapseProperties() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        String jsCode = "var ns = {}; " +
                        "ns.sub = {}; " +
                        "goog.exportSymbol('ns.foo', ns.sub.foo);" +
                        "(function() { " +
                        "  ns.sub.foo = function() {};" +
                        "})();";

        SourceFile input = SourceFile.fromCode("test.js", jsCode);

        try {
            compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);
        } catch (RuntimeException e) {
            if (e.getCause() instanceof IllegalArgumentException) {
                // We expect an IllegalArgumentException to be caused by CollapseProperties
                System.out.println("Caught expected IllegalArgumentException: " + e.getMessage());
            } else {
                fail("Unexpected RuntimeException: " + e.getMessage());
            }
        }
    }
}
