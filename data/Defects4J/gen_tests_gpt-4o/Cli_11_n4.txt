
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.junit.Test;

public class PosixParserTest {

    private static final String OPTION_TARGET = "t";
    private static final String OPTION_TARGET_LONG = "target";
    private static final String USAGE = "usage";

    @Test
    public void testPosixParserBug() {
        // Set up the options
        Options cmdLineOpts = new Options();
        Option generateTarget = new Option(OPTION_TARGET, OPTION_TARGET_LONG, true, "Generate files for the specified target machine");
        cmdLineOpts.addOption(generateTarget);

        // Create the parser
        CommandLineParser parser = new DefaultParser();
        String[] args = {"-target", "foobar.com"};

        try {
            // Parse the arguments
            CommandLine parsedLine = parser.parse(cmdLineOpts, args);

            // Check if the target option is present and has the correct value
            if (parsedLine.hasOption(OPTION_TARGET)) {
                String value = parsedLine.getOptionValue(OPTION_TARGET);
                assertEquals("foobar.com", value);
            } else {
                fail("Option not recognized or value incorrect.");
            }
        } catch (ParseException pe) {
            // If parsing fails, this is not the expected behavior for this test
            fail("ParseException was thrown: " + pe.getMessage());
        }
    }
}
