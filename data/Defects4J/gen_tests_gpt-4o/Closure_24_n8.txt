
import com.google.javascript.jscomp.*;

import static org.junit.Assert.*;

import org.junit.Test;

public class GoogScopeTest {

    @Test
    public void testGoogScopeWithVariableAssignedFunction() {
        String code = "goog.scope(function() { var x = function(){}; });";
        boolean hasError = compileAndCheckForErrors(code);
        assertTrue("Compiler should flag an error for variable-assigned functions in goog.scope", hasError);
    }

    @Test
    public void testGoogScopeWithFunctionDeclaration() {
        String code = "goog.scope(function() { function x() {} });";
        boolean hasError = compileAndCheckForErrors(code);
        assertTrue("Compiler should flag an error for function declarations in goog.scope", hasError);
    }

    private boolean compileAndCheckForErrors(String code) {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.ERROR);
        
        // Assume setup and configuration for Closure Compiler, adding goog.scope support
        // and other necessary settings go here as required.

        SourceFile input = SourceFile.fromCode("test.js", code);
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);
        
        // Check if there are any errors in the compilation result
        return result.errorCount > 0;
    }
}
