
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;

import static org.junit.Assert.assertThrows;

// Define a base class with polymorphic type information
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = "@class")
abstract class BaseType {
    public String baseProperty;
}

// Define a valid subtype
class SubTypeA extends BaseType {
    public String propertyA;
}

// Define an incompatible subtype
class IncompatibleType {
    public String incompatibleProperty;
}

public class PolymorphicTypeIdTest {

    @Test
    public void testIncompatibleTypeHandling() {
        ObjectMapper mapper = new ObjectMapper();

        // JSON string representing an incompatible type with a type ID
        String json = "{ \"@class\": \"IncompatibleType\", \"incompatibleProperty\": \"testValue\" }";

        // Attempt to deserialize JSON and expect an InvalidTypeIdException due to incompatibility
        assertThrows(InvalidTypeIdException.class, () -> {
            BaseType result = mapper.readValue(json, BaseType.class);
        });
    }
}
