
import static org.junit.jupiter.api.Assertions.assertThrows;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import java.io.IOException;
import org.junit.jupiter.api.Test;

public class ObjectIdHandlingTest {

    public static class CustomObject {
        public String id;
    }

    public static class CustomDeserializer extends StdDeserializer<CustomObject> {

        public CustomDeserializer() {
            super(CustomObject.class);
        }

        @Override
        public CustomObject deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
            JsonNode node = p.getCodec().readTree(p);
            if (node.isNull()) {
                throw new IOException("Null token found where object expected");
            }
            CustomObject obj = new CustomObject();
            obj.id = node.get("id").asText();
            return obj;
        }
    }

    @Test
    public void testDeserializationWithNullToken() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new SimpleModule().addDeserializer(CustomObject.class, new CustomDeserializer()));

        String json = "null"; // Simulate the problem with an explicit null token

        assertThrows(IOException.class, () -> {
            mapper.readValue(json, CustomObject.class);
        }, "Expected IOException to be thrown when deserializing a null token");
    }
}
