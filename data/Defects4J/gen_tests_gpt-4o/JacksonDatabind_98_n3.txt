
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.kotlin.KotlinModule;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class PolymorphicEnumDeserializationTest {

    enum Kind {
        CONTACT, EMAIL
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "kind")
    @JsonSubTypes({
            @JsonSubTypes.Type(value = Contact.class, name = "CONTACT")
    })
    interface Invite {
    }

    @JsonTypeName("CONTACT")
    public static class Contact implements Invite {
        public String name;

        Contact() {
        }

        Contact(String name) {
            this.name = name;
        }
    }

    static class Wrapper {
        public Kind kind;
        public Invite to;
    }

    @Test
    void testPolymorphicEnumDeserialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new KotlinModule());

        String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";
        
        Wrapper result = mapper.readValue(json, Wrapper.class);

        assertEquals(Kind.CONTACT, result.kind);
        assertEquals("Foo", ((Contact) result.to).name);
    }
}
