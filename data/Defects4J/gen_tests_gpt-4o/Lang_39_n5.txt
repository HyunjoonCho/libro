
import static org.junit.Assert.assertEquals;
import org.apache.commons.lang3.StringUtils;
import org.junit.Test;

public class StringUtilsTest {

    @Test(expected = NullPointerException.class)
    public void replaceEachWithNullPointer() {
        String original = "Hello World!";
        String[] searchList = {"Hello", "World"};
        String[] replacementList = {"Greetings", null};
        
        // The method currently throws a NullPointerException, so we expect that here.
        String result = StringUtils.replaceEach(original, searchList, replacementList);
    }

    @Test
    public void replaceEachWithNullReplacement() {
        String original = "Hello World!";
        String[] searchList = {"Hello", "World"};
        String[] replacementList = {"Greetings", null};
        
        // Update the following assertion if the library logic is enhanced to handle nulls.
        // To handle nulls as empty strings:
        // assertEquals("Greetings !", result);
        
        // If nulls should remain as null in the string:
        // assertEquals("Greetings null!", result);
        
        // If nulls are to be ignored:
        // assertEquals("Greetings World!", result);

        // Assuming null is not replaced and thus ignored (based on common behavior in StringUtils):
        String result = StringUtils.replaceEach(original, searchList, replacementList);
        assertEquals("Greetings World!", result); // Change this if behavior in the library changes
    }
}
