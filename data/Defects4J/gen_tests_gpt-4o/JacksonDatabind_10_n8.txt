
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

// Custom Serializer
class MySerializer extends StdSerializer<Map<String, String>> {

    public MySerializer() {
        super(Map.class, true);
    }

    @Override
    public void serialize(Map<String, String> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey(), entry.getValue().toUpperCase());
        }
        gen.writeEndObject();
    }
}

// Sample class with JsonAnyGetter
class TestClass {
    private Map<String, String> parameters;

    TestClass() {
        parameters = new HashMap<>();
        parameters.put("key1", "value1");
        parameters.put("key2", "value2");
    }

    // The problematic method with annotations
    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

public class JsonAnyGetterTest {

    @Test
    public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        TestClass testClass = new TestClass();
        
        String jsonOutput = mapper.writeValueAsString(testClass);
        
        // Expected JSON output where values are capitalized due to MySerializer
        String expectedJson = "{\"key1\":\"VALUE1\",\"key2\":\"VALUE2\"}";

        assertEquals(expectedJson, jsonOutput, "Serialized JSON output should match expected format using MySerializer");
    }
}
