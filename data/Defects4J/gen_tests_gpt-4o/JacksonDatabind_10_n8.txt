public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    TestClass testObject = new TestClass();
    testObject.addParameter("key1", "value1");
    
    String json = mapper.writeValueAsString(testObject);
    
    assertTrue(json.contains("converted"));
}

private static class TestClass {
    private final Map<String, String> parameters = new HashMap<>();

    public void addParameter(String key, String value) {
        parameters.put(key, value);
    }

    @JsonSerialize(converter = MyConverter.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

private static class MyConverter extends StdConverter<Map<String, String>, Map<String, String>> {
    @Override
    public Map<String, String> convert(Map<String, String> value) {
        Map<String, String> convertedMap = new HashMap<>();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            convertedMap.put(entry.getKey(), "converted_" + entry.getValue());
        }
        return convertedMap;
    }
}