
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

// Base class with an int field
class Base {
    public int value;

    public Base() {}

    public Base(int value) {
        this.value = value;
    }
}

// Subclass attempting to refine the int field
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
class Refined extends Base {
    public Integer value;  // Attempt to refine from int to Integer

    public Refined() {}

    public Refined(Integer value) {
        super(value);
        this.value = value;
    }
}

public class TypeRefinementTest {

    @Test
    public void testPrimitiveTypeRefinement() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Register subclass
        mapper.registerSubtypes(new NamedType(Refined.class, "refined"));

        // JSON data attempting refinement
        String json = "{\"type\":\"refined\",\"value\":42}";

        // Deserialize JSON to Base class
        Base result = mapper.readValue(json, Base.class);

        // Verify if the integer value is correctly assigned
        assertEquals(42, result.value);
    }
}
