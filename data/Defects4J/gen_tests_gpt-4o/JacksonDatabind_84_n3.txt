
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class RecursiveTypeBugTest {

    static class Base implements IFace<Sub> {
        @JsonProperty int base = 1;
    }

    static class Sub extends Base {
        @JsonProperty int sub = 2;
    }

    interface IFace<T> {}

    @Test
    public void testMissingPropertiesFromBaseClass() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();

        // This line triggers the TypeFactory to handle Base class first
        TypeFactory.defaultInstance().constructType(Base.class);

        Sub subInstance = new Sub();
        String jsonOutput = objectMapper.writeValueAsString(subInstance);

        // We expect both properties 'base' and 'sub' to be serialized
        assertEquals("{\"base\":1,\"sub\":2}", jsonOutput);
    }
}
