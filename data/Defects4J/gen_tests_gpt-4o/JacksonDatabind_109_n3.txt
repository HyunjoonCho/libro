
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.kotlin.KotlinModule;
import org.junit.Test;
import java.math.BigDecimal;
import static org.junit.Assert.assertEquals;

public class BigDecimalSerializationTest {

    public static class TestObject {
        @JsonFormat(shape = JsonFormat.Shape.STRING)
        private BigDecimal value;

        // Constructor
        public TestObject(BigDecimal value) {
            this.value = value;
        }

        // Getter
        public BigDecimal getValue() {
            return value;
        }
    }

    @Test
    public void testBigDecimalSerializationWithJsonFormat() throws Exception {
        ObjectMapper mapper = new ObjectMapper()
                .registerModule(new KotlinModule())
                .configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true);
        
        TestObject testObject = new TestObject(new BigDecimal("0.0000000005"));
        String jsonString = mapper.writeValueAsString(testObject);

        // The expected output should respect WRITE_BIGDECIMAL_AS_PLAIN
        String expectedOutput = "{\"value\":\"0.0000000005\"}";
        assertEquals(expectedOutput, jsonString);
    }
}
