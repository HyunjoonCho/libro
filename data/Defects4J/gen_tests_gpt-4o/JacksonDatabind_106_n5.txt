
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class TreeTraversingParserTest {

    static class IntClass {
        public int x;

        @Override
        public String toString() {
            return String.valueOf(x);
        }
    }

    private ObjectMapper mapper;

    @Before
    public void setUp() {
        mapper = new ObjectMapper();
    }

    private String parseFromTree(String json) {
        try {
            JsonNode tree = mapper.readTree(json);
            IntClass result = mapper.readerFor(IntClass.class).readValue(tree);
            return result.toString();
        } catch (IOException e) {
            return e.getClass().getSimpleName();
        }
    }

    private String parseFromString(String json) {
        try {
            IntClass result = mapper.readerFor(IntClass.class).readValue(json);
            return result.toString();
        } catch (IOException e) {
            return e.getClass().getSimpleName();
        }
    }

    @Test
    public void testInconsistentBehavior() {
        assertBehavior("{\"x\": 1e10}", "2147483647", "JsonMappingException");
        assertBehavior("{\"x\": 2147483648}", "-2147483648", "JsonMappingException");
        assertBehavior("{\"x\": -2147483649}", "2147483647", "JsonMappingException");
        assertBehavior("{\"x\": 1e-1}", "0", "0");
        assertBehavior("{\"x\": -4294967295}", "1", "JsonMappingException");
    }

    private void assertBehavior(String json, String expectedFromTree, String expectedFromString) {
        String fromTree = parseFromTree(json);
        String fromString = parseFromString(json);
        assertEquals("Mismatch in parsing from tree: " + json, expectedFromTree, fromTree);
        assertEquals("Mismatch in parsing from string: " + json, expectedFromString, fromString);
    }
}
