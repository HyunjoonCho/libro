public void testTreeTraversingParserIntOverflow() {
    ObjectMapper mapper = new ObjectMapper();

    try {
        JsonNode tree = mapper.readTree("{\"x\": 1e10}");
        mapper.readerFor(IntClass.class).readValue(tree);
        fail("Expected JsonMappingException due to overflow");
    } catch (JsonMappingException e) {
        // Expected exception
    } catch (IOException e) {
        fail("Unexpected exception: " + e.getMessage());
    }

    try {
        JsonNode tree = mapper.readTree("{\"x\": 2147483648}");
        mapper.readerFor(IntClass.class).readValue(tree);
        fail("Expected JsonMappingException due to overflow");
    } catch (JsonMappingException e) {
        // Expected exception
    } catch (IOException e) {
        fail("Unexpected exception: " + e.getMessage());
    }

    try {
        JsonNode tree = mapper.readTree("{\"x\": -2147483649}");
        mapper.readerFor(IntClass.class).readValue(tree);
        fail("Expected JsonMappingException due to overflow");
    } catch (JsonMappingException e) {
        // Expected exception
    } catch (IOException e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}