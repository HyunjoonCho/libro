
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.assertNull;

public class UUIDDeserializerTest {

    @Test
    public void itUsesDeserializationProblemHandlerProperly() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public Object handleWeirdStringValue(final DeserializationContext ctxt, final Class<?> targetType, final String valueToConvert, final String failureMsg) throws IOException {
                if (targetType == UUID.class) {
                    // Instead of throwing an exception, return a null or default value
                    return null;
                }
                return super.handleWeirdStringValue(ctxt, targetType, valueToConvert, failureMsg);
            }
        });

        // Attempt to deserialize a UUID from an invalid string
        IdBean result = mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);

        // Verify that the id is null as handled by the DeserializationProblemHandler
        assertNull(result.getId());
    }

    public static class IdBean {
        private UUID id;

        public UUID getId() {
            return id;
        }

        public void setId(final UUID id) {
            this.id = id;
        }
    }
}
