
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
import com.fasterxml.jackson.databind.jsonschema.JsonSchemaGenerator;
import com.fasterxml.jackson.module.jsonSchema.factories.SchemaFactoryWrapper;
import org.junit.Test;
import java.math.BigDecimal;

import static org.junit.Assert.*;

public class BigDecimalSchemaTest {

    static class TestClass {
        public BigDecimal value;
    }

    @Test
    public void testBigDecimalSchema() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        JsonSchemaGenerator schemaGen = new JsonSchemaGenerator(mapper);
        JsonSchema schema = schemaGen.generateSchema(TestClass.class);

        // Convert schema to a String and perform an assertion
        // In a real test, you would have to parse to check the type in JSON Schema 
        String schemaAsString = mapper.writeValueAsString(schema);

        // Check that the schema correctly identifies the type as "number" with "decimal" qualities
        assertTrue("Schema should specify BigDecimal correctly",
                schemaAsString.contains("\"type\":\"number\"") && schemaAsString.contains("\"valueType\":\"number\""));

        // Optionally, print schema
        System.out.println(schemaAsString);
    }
}
