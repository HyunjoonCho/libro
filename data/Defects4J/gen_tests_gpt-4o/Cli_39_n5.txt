
import org.apache.commons.cli.*;

import org.junit.Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class FileInputStreamTest {

    @Test
    public void testOptionParserWithExistingFileValue() throws Exception {
        // Create a temporary file
        File tempFile = Files.createTempFile("testFile", ".txt").toFile();
        tempFile.deleteOnExit();  // Ensure the file is deleted on JVM exit

        // Write something to the file so it's not empty
        Files.write(tempFile.toPath(), "Sample content".getBytes());

        Options options = new Options();
        options.addOption(Option.builder("f").hasArg().type(FileInputStream.class).build());

        String[] args = new String[]{"-f", tempFile.getAbsolutePath()};
        CommandLine cline = new DefaultParser().parse(options, args);

        // check if the type returned is actually a FileInputStream
        Object parsedValue = cline.getParsedOptionValue("f");
        FileInputStream fileInputStream = null;

        try {
            // This should fail if parsedValue is not a FileInputStream
            fileInputStream = (FileInputStream) parsedValue;
        } catch (ClassCastException e) {
            throw new AssertionError("Expected FileInputStream but got " + parsedValue.getClass().getName());
        }

        // Check if the returned object is an instance of FileInputStream by now actually using it
        assertEquals("Sample content", new String(fileInputStream.readAllBytes()));
        
        // Ensure cleanup of fileInputStream
        fileInputStream.close();
    }
}
