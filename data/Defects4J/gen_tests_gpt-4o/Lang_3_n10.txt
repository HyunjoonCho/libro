
import org.apache.commons.lang3.math.NumberUtils;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class NumberUtilsTest {

    @Test
    public void testCreateNumberWithLargeFloatingPointNumber() {
        // A large floating-point number that cannot be accurately represented by a Float
        String largeFloatingNumber = "1.234567890123456789";

        // Create number using NumberUtils
        Number number = NumberUtils.createNumber(largeFloatingNumber);

        // Check if the created number is a Double (or potentially a BigDecimal)
        // Here we assert that it's returning a Double because the input can't fit into a Float without losing precision
        assertEquals(Double.class, number.getClass());

        // Validate that the value is accurate for Double within precision limits
        assertEquals(1.234567890123456789, number.doubleValue(), 0.000000000000001);
    }
}
