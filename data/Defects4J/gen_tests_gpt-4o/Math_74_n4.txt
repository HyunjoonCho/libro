
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class DormandPrince853IntegratorTest {

    class SimpleODE implements FirstOrderDifferentialEquations {
        public int getDimension() {
            return 1;
        }

        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = -y[0];
        }
    }

    @Test
    public void testInitializeStepScale() {
        DormandPrince853Integrator integrator = new DormandPrince853Integrator(1.0e-8, 100.0, 1.0e-6, 1.0e-6);
        double[] y0 = new double[] { 1.0 };
        SimpleODE equations = new SimpleODE();
        try {
            integrator.integrate(equations, 0.0, y0, 10.0, y0);
            fail("Expected Exception due to wrong scaling in step size computation");
        } catch (Exception e) {
            // If the satellite "hits the ground", i.e., an exception occurs due to wrong step size, catch it here
            assertTrue(e.getMessage().contains("ground"));
        }
    }
}
