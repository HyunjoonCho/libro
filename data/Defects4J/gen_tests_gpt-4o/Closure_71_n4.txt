
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;
import static org.junit.Assert.*;

public class VisibilityTest {

    @Test
    public void testVisibilityWarning() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        // Enabling visibility checks.
        options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);

        // First input file: Foo class
        SourceFile input1 = SourceFile.fromCode("input1.js", ""
            + "/** @constructor */ function Foo() { /** @private */ this.x_ = 3; }");

        // Second input file: SubFoo class extending Foo
        SourceFile input2 = SourceFile.fromCode("input2.js", ""
            + "/** @constructor \n"
            + " * @extends {Foo} */ function SubFoo() { /** @private */ this.x_ = 3; }");

        // Compile the files
        Result result = compiler.compile(
                SourceFile.fromCode("externs.js", ""), // Empty externs
                ImmutableList.of(input1, input2), // Input source files
                options);

        // Check that there is an error regarding the visibility of the property
        assertFalse("Expected visibility warnings", result.success);
        assertTrue("Expected visibility error", compiler.getErrors().stream()
                .anyMatch(error -> error.toString().contains("visibility")));
    }
}
