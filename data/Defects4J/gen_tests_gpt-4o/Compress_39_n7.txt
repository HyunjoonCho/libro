
import static org.junit.Assert.*;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class CorruptedZipTest {

    @Test
    public void testTruncatedZipFileErrorHandling() {
        // Create a truncated zip file (a normal zip header without data)
        byte[] truncatedZip = new byte[] {
            0x50, 0x4B, 0x03, 0x04, // Local file header signature
            0x14, 0x00, // Version needed to extract (minimum)
            0x00, 0x00, // General purpose bit flag
            0x08, 0x00, // Compression method (deflate)
            0x00, 0x00, 0x00, 0x00, // File last modification time and date
            0x00, 0x00, 0x00, 0x00, // CRC-32
            0x00, 0x00, 0x00, 0x00, // Compressed size
            0x00, 0x00, 0x00, 0x00, // Uncompressed size
            0x00, 0x00, // File name length
            0x00, 0x00, // Extra field length
        };

        ByteArrayInputStream bais = new ByteArrayInputStream(truncatedZip);
        ZipInputStream zis = new ZipInputStream(bais);

        try {
            ZipEntry entry;
            while ((entry = zis.getNextEntry()) != null) {
                // Read the entries
            }
            fail("Expected EOFException not thrown");
        } catch (IOException e) {
            assertTrue(e instanceof java.io.EOFException);
            assertTrue("Error message is unusually long", e.getMessage().length() < 1000);
        } finally {
            try {
                zis.close();
            } catch (IOException e) {
                e.printStackTrace(); // Handle the closing exception
            }
        }
    }
}
