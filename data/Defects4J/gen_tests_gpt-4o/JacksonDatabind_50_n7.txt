
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonMappingException;
import org.junit.Test;

import java.util.Objects;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.*;

public class JsonIdentityInfoDeserializationTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    public static class Node {
        public String id;
        public Node next;

        @JsonCreator
        public Node(@JsonProperty("id") String id) {
            this.id = id;
        }

        // For testing equality easily
        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            Node node = (Node) obj;
            return Objects.equals(id, node.id) &&
                   Objects.equals(next, node.next);
        }

        @Override
        public int hashCode() {
            return Objects.hash(id, next);
        }
    }

    @Test
    public void testJsonIdentityInfoWithCreator() throws Exception {
        String jsonData = "[{\"id\":\"1\",\"next\":\"2\"},{\"id\":\"2\",\"next\":null}]";

        ObjectMapper mapper = new ObjectMapper();
        List<Node> nodes = mapper.readValue(jsonData,
                mapper.getTypeFactory().constructCollectionType(List.class, Node.class));

        Node node1 = new Node("1");
        Node node2 = new Node("2");

        node1.next = node2;

        assertTrue(nodes.containsAll(Arrays.asList(node1, node2)));
    }
}
