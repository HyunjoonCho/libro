public void testPrototypeDeclaredWithQuotesWarning() {
    // Test case simulating compilation with the expected warning for the first scenario
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);
    options.setWarningLevel(DiagnosticGroups.CONFORMANCE_VIOLATIONS, CheckLevel.OFF);

    String code = ""
        + "/** @constructor */\n"
        + "function MyClass() {}\n"
        + "MyClass.prototype[\"MyMethod\"] = function(a) {\n"
        + "  this.a = a;\n"
        + "}\n"
        + "window[\"MyClass\"] = MyClass;";

    String externs = ""
        + "/** @interface */\n"
        + "function MyParent() {}\n"
        + "/** @param {*} a */\n"
        + "MyParent.prototype.MyMethod = function(a) {};\n";

    TestErrorManager errorManager = new TestErrorManager();
    Compiler compiler = new Compiler(errorManager);
    compiler.compile(SourceFile.fromCode("externs", externs), 
                     SourceFile.fromCode("code", code), options);

    assertEquals(1, errorManager.getWarningCount());
    assertTrue(errorManager.getWarnings().get(0).getDescription().contains("dangerous use of the global this object"));
}