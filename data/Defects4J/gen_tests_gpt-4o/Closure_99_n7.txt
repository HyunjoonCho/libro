
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.SourceFile;

import java.util.ArrayList;
import java.util.List;

public class ClosureCompilerTest {

    public static void main(String[] args) {
        List<SourceFile> externs = new ArrayList<>();
        List<SourceFile> inputs = new ArrayList<>();

        // Add externs
        String externCode = "/** @interface */\n" +
                            "function MyParent() {}\n" +
                            "/** @param {*} a */\n" +
                            "MyParent.prototype.MyMethod = function(a) {}";
        externs.add(SourceFile.fromCode("externs.js", externCode));

        // Add test input
        String inputCode = "/**\n" +
                           " * @constructor\n" +
                           " * @implements {MyParent}\n" +
                           " */\n" +
                           "function MyClass() {}\n" +
                           "MyClass.prototype['MyMethod'] = function(a) {\n" +
                           "  this.a2 = a;\n" +
                           "};\n" +
                           "window['MyClass'] = MyClass;";
        inputs.add(SourceFile.fromCode("input.js", inputCode));

        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CompilerOptions.WarningLevel.VERBOSE);

        try (CommandLineRunner runner = new CommandLineRunner(new String[]{}, options, externs, inputs)) {
            runner.run();
            runner.printSummary();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
