
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.WarningLevel;
import com.google.javascript.jscomp.CompilationLevel;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testAdvancedOptimizationsErroneousBehavior() {
        // Source JavaScript code
        String originalCode = 
            "window['anchor'] = function(obj, modifiesProp) {" +
            "  return (function(saved) {" +
            "    return modifiesProp(obj) + saved;" +
            "  })(obj['prop']);" +
            "}";

        // Expected JavaScript code after compilation with ADVANCED_OPTIMIZATIONS
        String expectedCompiledCode = 
            "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};";

        Compiler compiler = new Compiler();
        
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(WarningLevel.VERBOSE);
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        // Externs (set up according to your environment)
        JSSourceFile extern = JSSourceFile.fromCode("externs", "var window;");
        
        // Input source file
        JSSourceFile input = JSSourceFile.fromCode("input", originalCode);

        // Compile the input source file
        Result result = compiler.compile(extern, input, options);
        
        // Get the compiled output
        String compiledCode = compiler.toSource();
        
        // Verify that the compiled code matches the expected result
        assertTrue("Compiled code did not match expected output.", compiledCode.contains(expectedCompiledCode));
    }
}
