
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.Deflater;
import java.util.zip.DeflaterOutputStream;

import static org.junit.Assert.fail;

public class CompressorStreamFactoryTest {

    @Test
    public void testDeflateStreamWithZlibHeader() {
        // Create a sample data to compress
        byte[] data = "Sample data to compress with zlib header".getBytes();

        // Compress the data using Deflater with ZLIB header
        byte[] compressedData = compressWithZlibHeader(data);

        // Attempt to create a CompressorInputStream from the compressed data
        try (ByteArrayInputStream input = new ByteArrayInputStream(compressedData)) {
            CompressorInputStream compressorInputStream = new CompressorStreamFactory()
                    .createCompressorInputStream(input);
            fail("Expected a CompressorException due to unrecognized stream with zlib header.");
        } catch (CompressorException e) {
            // Expected exception
            System.out.println("Caught expected CompressorException: " + e.getMessage());
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
    }

    private byte[] compressWithZlibHeader(byte[] data) {
        Deflater deflater = new Deflater(Deflater.DEFAULT_COMPRESSION, false); // With zlib header
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream();
             DeflaterOutputStream dos = new DeflaterOutputStream(baos, deflater)) {
            dos.write(data);
            dos.finish();
            return baos.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException("Error during compression", e);
        }
    }
}
