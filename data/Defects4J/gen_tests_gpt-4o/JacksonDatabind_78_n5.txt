
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertThrows;

public class JacksonDeserializationVulnerabilityTest {

    @Test
    public void testDeserializationVulnerability() {
        ObjectMapper mapper = new ObjectMapper();
        // Enable default typing which can lead to security issues if not properly configured
        mapper.activateDefaultTypingAsProperty(
                ObjectMapper.DefaultTyping.EVERYTHING,
                ObjectMapper.As.PROPERTY,
                "@class"
        );

        String maliciousPayload = "" +
                "{\n" +
                "  \"@class\": \"java.lang.ProcessBuilder\",\n" +
                "  \"command\": [\"calc.exe\"]\n" +
                "}";

        // Attempt to deserialize the payload
        // Using assertThrows to ensure that we expect an exception due to disabled exploit
        assertThrows(SecurityException.class, () -> {
            mapper.readValue(maliciousPayload, Object.class);
        });
    }
}
