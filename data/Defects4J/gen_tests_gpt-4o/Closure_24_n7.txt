
import static org.junit.Assert.*;
import org.junit.Test;
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

public class GoogScopeFunctionTest {

    @Test
    public void testFunctionDeclarationInGoogScope() {
        String codeWithFunctionDeclaration = 
            "goog.scope(function() {\n" +
            "    function x() {}\n" +
            "});";

        Result result = compile(codeWithFunctionDeclaration);
        assertFalse("The compiler should report an error for a function declaration in goog.scope, but it didn't.", result.success);
    }

    @Test
    public void testVariableDeclarationFunctionInGoogScope() {
        String codeWithVarDeclarationFunction = 
            "goog.scope(function() {\n" +
            "    var x = function() {};\n" +
            "});";

        Result result = compile(codeWithVarDeclarationFunction);
        assertFalse("The compiler should report an error for a var declaration with a function in goog.scope, but it didn't.", result.success);
    }

    private Result compile(String code) {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setChecksOnly(true);
        
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", code);
        
        return compiler.compile(extern, input, options);
    }
}
