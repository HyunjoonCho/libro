
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.afterburner.AfterburnerModule;
import org.junit.Test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class NonEmptyExclusionTest {

    static class TestData {
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String name;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public int age;

        public TestData(String name, int age) {
            this.name = name;
            this.age = age;
        }
    }

    @Test
    public void testNonEmptyExclusionWithoutAfterburner() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        TestData data = new TestData("", 0);

        String json = mapper.writeValueAsString(data);
        
        // Expectation: both "name" and "age" should be excluded for being empty
        assertFalse(json.contains("name"));
        assertFalse(json.contains("age"));
    }

    @Test
    public void testNonEmptyExclusionWithAfterburner() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new AfterburnerModule());
        TestData data = new TestData("", 0);

        String json = mapper.writeValueAsString(data);
        
        // Expectation: both "name" and "age" should be excluded for being empty
        assertFalse(json.contains("name"));
        assertFalse(json.contains("age"));
    }

    @Test
    public void testNonEmptyExclusionPartiallyFilled() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        TestData data = new TestData("John", 0);

        String json = mapper.writeValueAsString(data);
        
        // Expectation: "name" should be included as it is non-empty, "age" should be excluded
        assertTrue(json.contains("name"));
        assertFalse(json.contains("age"));
    }
}
