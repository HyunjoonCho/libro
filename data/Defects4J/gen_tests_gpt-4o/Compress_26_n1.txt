
import org.apache.commons.io.IOUtils;
import org.junit.Test;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;

import static org.junit.Assert.assertEquals;

public class IOUtilsTest {

    @Test
    public void testIOUtilsSkip() throws Exception {
        byte[] data = new byte[1024]; // Sample data
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(data);
        
        // Setup a simple CipherInputStream
        Cipher cipher = setupCipher();
        CipherInputStream cipherInputStream = new CipherInputStream(byteArrayInputStream, cipher);

        // Attempt to skip bytes using IOUtils.skip()
        long bytesToSkip = 512;
        long skippedBytes = IOUtils.skip(cipherInputStream, bytesToSkip);

        // Expected behavior per the bug report is to skip 'bytesToSkip' amount if not at end of stream
        System.out.println("Expected to skip: " + bytesToSkip + ", actually skipped: " + skippedBytes);
        
        // The essence of the test is to find this assertion fail; this reveals the defect.
        assertEquals("Skipped bytes count is incorrect", bytesToSkip, skippedBytes);
    }

    private Cipher setupCipher() throws NoSuchAlgorithmException {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128); // Key size
        SecretKey secretKey = keyGen.generateKey();
        
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            return cipher;
        } catch (Exception e) {
            throw new RuntimeException("Failed to set up the cipher", e);
        }
    }
}
