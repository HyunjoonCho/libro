
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarUtils;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.assertEquals;

public class TarArchiveEntryTest {

    @Test
    public void testParseTarHeaderSize() throws Exception {
        // Create a buffer that simulates a tar header with a size field.
        byte[] header = new byte[512];
        String sizeString = "00000000777 "; // Octal 777 with trailing space (expected size: 511)
        
        // Insert the size string in the correct position (give or take)
        byte[] sizeBytes = sizeString.getBytes(StandardCharsets.UTF_8);
        System.arraycopy(sizeBytes, 0, header, 124, sizeBytes.length);
        
        // Ensure checksum is set correctly
        TarUtils.formatUnsignedOctalBytes(TarUtils.computeCheckSum(header), header, 148, 8);

        // Use the parseTarHeader to create a new TarArchiveEntry
        TarArchiveEntry entry = new TarArchiveEntry(header);

        // Verify the size is correctly parsed without the trailing space
        assertEquals(511, entry.getSize());
    }
}
