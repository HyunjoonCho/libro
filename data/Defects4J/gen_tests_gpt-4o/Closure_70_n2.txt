
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ClosureCompilerTest {

    public static void main(String[] args) {
        try {
            // JavaScript code to be tested
            String jsCode = "/*global window*/\n" +
                            "/*jslint sub: true*/\n" +
                            "/**\n" +
                            " * @constructor\n" +
                            " * @param {!Element} element\n" +
                            " */\n" +
                            "function Example(element) {\n" +
                            "  /**\n" +
                            "   * @param {!string} ns\n" +
                            "   * @param {!string} name\n" +
                            "   * @return {undefined}\n" +
                            "   */\n" +
                            "  this.appendElement = function appendElement(ns, name) {\n" +
                            "    var e = element.ownerDocument.createElementNS(ns, name);\n" +
                            "    element.appendChild(e);\n" +
                            "  };\n" +
                            "}\n" +
                            "window[\"Example\"] = Example;";

            // Write the JavaScript code to a file (v.js)
            java.nio.file.Files.write(java.nio.file.Paths.get("v.js"), jsCode.getBytes());

            // Prepare command to run Closure Compiler
            String[] command = {
                "java",
                "-jar",
                "compiler.jar",
                "--jscomp_error",
                "checkTypes",
                "--summary_detail_level",
                "3",
                "--js",
                "v.js",
                "--js_output_file",
                "compiled.js"
            };

            // Execute the compiler command and capture output
            Process process = Runtime.getRuntime().exec(command);
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            String line;
            StringBuilder output = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
            reader.close();

            // Check if expected output is present
            String expectedSubstring = "0 error(s), 0 warning(s), 100% typed";
            if (output.toString().contains(expectedSubstring)) {
                System.out.println("Test Passed: Expected output is observed.");
            } else {
                System.out.println("Test Failed: Expected output not observed. Have:\n" + output);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
