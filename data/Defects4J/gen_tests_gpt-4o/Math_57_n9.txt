
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.clustering.CentroidCluster;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertFalse;

public class KMeansPlusPlusClustererBugTest {

    @Test
    public void testTruncationIssueInKMeansPlusPlusClusterer() {
        // Create a list of points, distances are typically less than 1
        List<Clusterable> points = new ArrayList<>();
        points.add(new DoublePoint(new double[] {0.1, 0.1}));
        points.add(new DoublePoint(new double[] {0.2, 0.1}));
        points.add(new DoublePoint(new double[] {0.1, 0.2}));
        points.add(new DoublePoint(new double[] {0.2, 0.2}));

        // Create a KMeansPlusPlusClusterer with expected number of clusters
        KMeansPlusPlusClusterer<Clusterable> clusterer = new KMeansPlusPlusClusterer<>(2);

        // Perform clustering - expected to be non-empty clusters
        List<CentroidCluster<Clusterable>> clusters = clusterer.cluster(points);
        
        // Check if any of the clusters are empty - indicating a problem
        boolean emptyClusterExists = clusters.stream().anyMatch(cluster -> cluster.getPoints().isEmpty());

        // Assert all clusters are non-empty
        assertFalse("Clusters should not be empty due to truncation issues", emptyClusterExists);
    }
}
