
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

// Employee.java
@JsonDeserialize(builder = Employee.Builder.class)
class Employee {
    private final long id;
    private final Name name;
    private final int age;

    private Employee(Builder builder) {
        this.id = builder.id;
        this.name = builder.name;
        this.age = builder.age;
    }

    public long getId() {
        return id;
    }

    public Name getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    @JsonPOJOBuilder(withPrefix = "set")
    public static class Builder {
        private final long id;
        private Name name;
        private int age;

        @JsonCreator
        public Builder(@JsonProperty("emp_id") long id) {
            this.id = id;
        }

        @JsonUnwrapped
        public void setName(Name name) {
            this.name = name;
        }

        @JsonProperty("emp_age")
        public void setAge(int age) {
            this.age = age;
        }

        public Employee build() {
            return new Employee(this);
        }
    }
}

// Name.java
class Name {
    private final String first;
    private final String last;

    @JsonCreator
    public Name(
        @JsonProperty("emp_first_name") String first,
        @JsonProperty("emp_last_name") String last
    ) {
        this.first = first;
        this.last = last;
    }

    public String getFirst() {
        return first;
    }

    public String getLast() {
        return last;
    }
}

// Test case based on the bug report
public class EmployeeDeserializationTest {

    @Test
    public void testDeserializationWithBuilderAndJsonUnwrapped() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // JSON where emp_id is in the middle
        String json1 = "{ \"emp_age\": 30, \"emp_id\": 1234, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\" }";
        Employee emp1 = objectMapper.readValue(json1, Employee.class);

        assertEquals(30, emp1.getAge());
        assertEquals(1234, emp1.getId());
        assertNotNull(emp1.getName());
        assertEquals("John", emp1.getName().getFirst());
        assertEquals("Doe", emp1.getName().getLast());

        // JSON where emp_id is at the end
        String json2 = "{ \"emp_age\": 30, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\", \"emp_id\": 1234 }";
        Employee emp2 = objectMapper.readValue(json2, Employee.class);

        assertEquals(30, emp2.getAge());
        assertEquals(1234, emp2.getId());
        assertNotNull(emp2.getName());
        assertEquals("John", emp2.getName().getFirst());
        assertEquals("Doe", emp2.getName().getLast());

        // JSON where emp_id is first
        String json3 = "{ \"emp_id\": 1234, \"emp_age\": 30, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\" }";
        Employee emp3 = objectMapper.readValue(json3, Employee.class);

        assertEquals(30, emp3.getAge());
        assertEquals(1234, emp3.getId());
        assertNotNull(emp3.getName());
        assertEquals("John", emp3.getName().getFirst());
        assertEquals("Doe", emp3.getName().getLast());
    }
}
