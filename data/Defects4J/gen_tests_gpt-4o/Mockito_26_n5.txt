
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

public class InjectMocksTest {

    static class MyService {
        // Assume this is a final field
        private final Dependency dependency;

        // Constructor - note how this might be unnecessary if @InjectMocks would set final fields
        public MyService(Dependency dependency) {
            this.dependency = dependency;
        }

        public String doWork() {
            return dependency.work();
        }
    }

    static class Dependency {
        public String work() {
            return "real work";
        }
    }

    @Mock
    private Dependency mockDependency;

    @InjectMocks
    private MyService myService;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testInjectMocksWithFinalField() {
        when(mockDependency.work()).thenReturn("mocked work");
        
        // This would fail if @InjectMocks is unable to inject a final field
        assertNotNull("Dependency should be injected", myService.doWork());
        assertEquals("mocked work", myService.doWork());
    }
}
