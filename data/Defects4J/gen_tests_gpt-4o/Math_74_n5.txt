public void testWrongStepSizeGuessForDormandPrince853Integrator() {
    double[] tolerance = {1.0e-10, 1.0e-13};
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(1.0e-10, 1.0, tolerance[0], tolerance[1]);

    OrdinaryDifferentialEquation equations = new TestEquation();
    double stepStart = 0.0;
    double[] y0 = {0.0, 1.0};
    double[] y = new double[y0.length];
    double[] yDotK0 = new double[y0.length];
    double[] scale = new double[y0.length];

    for (int i = 0; i < y0.length; i++) {
        yDotK0[i] = 1.0; // Assume initial derivative
        scale[i] = tolerance[0] + Math.abs(y0[i]) * tolerance[1];
    }

    integrator.initializeStep(equations, true, integrator.getOrder(), scale, stepStart, y0, yDotK0, y, yDotK0);

    for (double s : scale) {
        assertTrue("Scale should be positive", s > 0);
    }
}

private static class TestEquation implements OrdinaryDifferentialEquation {
    public int getDimension() {
        return 2;
    }

    public double[] computeDerivatives(double t, double[] y) {
        return new double[]{y[1], -y[0]};
    }
}