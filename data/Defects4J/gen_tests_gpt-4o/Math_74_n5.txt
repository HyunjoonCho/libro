
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class DormandPrince853IntegratorTest {

    @Test
    public void testIncorrectStepSizeGuess() {
        // Set up the differential equation, y' = y, y(0) = 1
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            @Override
            public int getDimension() {
                return 1;
            }

            @Override
            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = y[0]; // dy/dt = y
            }
        };

        double[] y0 = { 1.0 };  // initial state
        double[] y = new double[1];  // final state
        double t0 = 0.0;  // initial time
        double t = 1.0;   // final time
        
        double scalAbsoluteTolerance = 1.0e-6;
        double scalRelativeTolerance = 1.0e-6;

        // Create the integrator with tolerances
        DormandPrince853Integrator integrator = new DormandPrince853Integrator(
                1.0e-8, 10.0, scalAbsoluteTolerance, scalRelativeTolerance);

        try {
            // Perform the integration
            integrator.integrate(ode, t0, y0, t, y);

            // If the integrator completes, check the result
            double expected = Math.exp(t);  // y = e^t for y' = y
            assertEquals(expected, y[0], scalAbsoluteTolerance);
        } catch (Exception e) {
            // If an exception is raised due to a wrong step size, print it
            fail("Integration failed with exception: " + e.getMessage());
        }
    }
}
