
import org.apache.commons.math3.distribution.RealDistribution;
import org.junit.Test;

import static org.junit.Assert.*;

public class RealDistributionTest {

    @Test
    public void testSupportInclusiveBehavior() {
        // Mock implementation of RealDistribution with fixed support boundaries and density.
        RealDistribution mockDistribution = new RealDistribution() {
            @Override
            public double cumulativeProbability(double x) {
                return 0;
            }

            @Override
            public double density(double x) {
                // Return a finite non-NaN value when x is at the boundary
                if (x == getSupportLowerBound() || x == getSupportUpperBound()) {
                    return 0.5; // Finite and not NaN
                }
                return 0;
            }

            @Override
            public double inverseCumulativeProbability(double p) {
                return 0;
            }

            @Override
            public double getNumericalMean() {
                return 0;
            }

            @Override
            public double getNumericalVariance() {
                return 0;
            }

            @Override
            public double getSupportLowerBound() {
                return 0;
            }

            @Override
            public double getSupportUpperBound() {
                return 1;
            }

            @Override
            public boolean isSupportLowerBoundInclusive() {
                // Assuming implementation agrees with the proposed definition
                return !Double.isInfinite(density(getSupportLowerBound())) && !Double.isNaN(density(getSupportLowerBound()));
            }

            @Override
            public boolean isSupportUpperBoundInclusive() {
                // Assuming implementation agrees with the proposed definition
                return !Double.isInfinite(density(getSupportUpperBound())) && !Double.isNaN(density(getSupportUpperBound()));
            }

            @Override
            public boolean isSupportConnected() {
                return true;
            }
        };

        assertTrue("Lower bound should be inclusive", mockDistribution.isSupportLowerBoundInclusive());
        assertTrue("Upper bound should be inclusive", mockDistribution.isSupportUpperBoundInclusive());
    }
}
