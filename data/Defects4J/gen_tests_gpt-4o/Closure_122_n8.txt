
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.Assert.assertTrue;

public class NonJsDocCommentTest {

    @Test
    public void testNonJsDocCommentWarning() {
        String jsCode = "/* @preserve Foo License */\n" +
                        "alert(\"foo\");";
        String[] args = {
                "--js", "-",
                "--checks-only"
        };

        // Capture the output of the compiler
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(outputStream);
        PrintStream oldErr = System.err;
        System.setErr(ps);

        try {
            CommandLineRunner runner = new CommandLineRunner(args);
            runner.setInput(
                jsCode);
            runner.doRun();
        } finally {
            System.setErr(oldErr);
        }

        String compilerOutput = outputStream.toString();
        assertTrue("Expected warning about non-JSDoc comment", 
                   compilerOutput.contains("WARNING - Parse error. Non-JSDoc comment has annotations."));
    }

    @Test
    public void testSuppressWarningWithExclamationMark() {
        String jsCode = "/*! @preserve Foo License */\n" +
                        "alert(\"foo\");";
        String[] args = {
                "--js", "-",
                "--checks-only"
        };

        // Capture the output of the compiler
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream ps = new PrintStream(outputStream);
        PrintStream oldErr = System.err;
        System.setErr(ps);

        try {
            CommandLineRunner runner = new CommandLineRunner(args);
            runner.setInput(jsCode);
            runner.doRun();
        } finally {
            System.setErr(oldErr);
        }

        String compilerOutput = outputStream.toString();
        assertTrue("Expected no warning with /*! comment", !compilerOutput.contains("Parse error"));
        assertTrue("Expected comment to be preserved", compilerOutput.contains("Foo License"));
    }
}
