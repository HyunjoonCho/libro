public void testFunctionWithConditionalObjectAssignment() {
    Function<Object[], Map<String, Object>> func = (args) -> {
        boolean a = (Boolean) args[0];
        boolean b = (Boolean) args[1];
        Map<String, Object> results = null;
        
        if (a) {
            results = new HashMap<>();
            results.put("prop1", new HashMap<String, Object>() {{ put("a", 3); }});
        }
        
        if (b) {
            results = results == null ? new HashMap<>() : results;
            results.put("prop2", "prop2");
        } else {
            results = results == null ? new HashMap<>() : results;
            results.put("prop3", "prop3");
        }
        
        return results;
    };
    
    Map<String, Object> result1 = func.apply(new Object[] {true, true});
    assertTrue(result1.containsKey("prop1"));
    assertTrue(result1.containsKey("prop2"));
    assertFalse(result1.containsKey("prop3"));
    
    Map<String, Object> result2 = func.apply(new Object[] {true, false});
    assertTrue(result2.containsKey("prop1"));
    assertFalse(result2.containsKey("prop2"));
    assertTrue(result2.containsKey("prop3"));
    
    Map<String, Object> result3 = func.apply(new Object[] {false, true});
    assertFalse(result3.containsKey("prop1"));
    assertTrue(result3.containsKey("prop2"));
    assertFalse(result3.containsKey("prop3"));
    
    Map<String, Object> result4 = func.apply(new Object[] {false, false});
    assertFalse(result4.containsKey("prop1"));
    assertFalse(result4.containsKey("prop2"));
    assertTrue(result4.containsKey("prop3"));
}