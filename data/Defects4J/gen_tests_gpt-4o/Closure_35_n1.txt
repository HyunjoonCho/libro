script
const assert = require('chai').assert;

/**
 * @returns {{prop1: (Object|undefined), prop2: (string|undefined), prop3: (string|undefined)}} 
 */
function func(a, b) {
    var results;
    if (a) {
        results = {};
        results.prop1 = {a: 3};
    }
    if (b) {
        results = results || {};
        results.prop2 = 'prop2';
    } else {
        results = results || {};
        results.prop3 = 'prop3';
    }
    return results;
}

describe('Func Type Mismatch Test', function() {
    it('should return the correct object when both a and b are truthy', function() {
        const result = func(true, true);
        assert.deepInclude(result, { prop1: { a: 3 } });
        assert.propertyVal(result, 'prop2', 'prop2');
        assert.notProperty(result, 'prop3');
    });

    it('should return the correct object when a is truthy and b is falsy', function() {
        const result = func(true, false);
        assert.deepInclude(result, { prop1: { a: 3 } });
        assert.propertyVal(result, 'prop3', 'prop3');
        assert.notProperty(result, 'prop2');
    });

    it('should return the correct object when a is falsy and b is truthy', function() {
        const result = func(false, true);
        assert.isUndefined(result.prop1);
        assert.propertyVal(result, 'prop2', 'prop2');
        assert.notProperty(result, 'prop3');
    });

    it('should return the correct object when both a and b are falsy', function() {
        const result = func(false, false);
        assert.isUndefined(result.prop1);
        assert.propertyVal(result, 'prop3', 'prop3');
        assert.notProperty(result, 'prop2');
    });
    
    it('should return undefined properties for prop1 when neither a nor b are set', function() {
        const result = func(false, false);
        assert.doesNotHaveAnyKeys(result, ['prop1']);
    });
});
