
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerDoesNotReturnBestPoint() {
        // Define a simple quadratic function which has a minimum at x = 2
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        // Create a BrentOptimizer with a relative and absolute tolerance
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Optimize function within the interval [0, 4] and starter guess
        UnivariatePointValuePair result = optimizer.optimize(
                new SearchInterval(0, 4),
                function,
                BrentOptimizer.GoalType.MINIMIZE);

        // Verify that the best point found is indeed close to the optimal minimum x = 2
        assertEquals(2.0, result.getPoint(), 1e-6);
    }
}
