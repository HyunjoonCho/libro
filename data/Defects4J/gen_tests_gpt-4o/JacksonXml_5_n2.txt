
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

@JacksonXmlRootElement(localName = "myname")
public class XMLTest {

    @Test
    public void testJacksonXmlRootElementWithMultipleXmlMappers() throws Exception {
        final ObjectMapper xmlMapper = new XmlMapper();
        final ObjectMapper noAnnotationsXmlMapper = xmlMapper.copy()
                .configure(MapperFeature.USE_ANNOTATIONS, false)
                .configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);

        String outputWithNoAnnotations = noAnnotationsXmlMapper.writeValueAsString(new XMLTest());
        String outputWithAnnotations = xmlMapper.writeValueAsString(new XMLTest());

        // We expect the XML output to use the localName 'myname' for the xmlMapper with annotations
        String expectedOutputWithAnnotations = "<myname/>";

        assertEquals("<XMLTest/>", outputWithNoAnnotations);
        assertEquals(expectedOutputWithAnnotations, outputWithAnnotations);
    }
}
