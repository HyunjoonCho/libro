
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.GoalType;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {

    @Test
    public void testBestPointIsReported() {
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        
        // A simple quadratic function, which has its minimum value at x = 2
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                return (x - 2) * (x - 2) + 1;
            }
        };

        // Optimize the function and find the minimum
        UnivariatePointValuePair result = optimizer.optimize(
            new UnivariateObjectiveFunction(function),
            GoalType.MINIMIZE,
            new SearchInterval(0, 4)
        );

        // Verify that the best point is indeed close to x = 2
        double bestPoint = result.getPoint();
        double bestValue = result.getValue();
        
        // We expect the best point to be very close to x = 2
        assertTrue(bestPoint >= 1.99 && bestPoint <= 2.01);
        
        // The function's minimum value at x = 2 should be 1
        assertTrue(Math.abs(bestValue - 1) < 1e-5);
    }
}
