
import static org.junit.Assert.assertEquals;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testArrayPushAssignment() {
        // Original JavaScript code
        String originalJs = 
            "function f() {" +
            "  var a = [], b;" +
            "  a.push(b = []);" +
            "  b[0] = 1;" +
            "  return a;" +
            "}";

        // Expected JavaScript should still have the b assignment
        String expectedJs = 
            "function f(){" +
            "var a=[],b;" +
            "a.push(b=[]);" +
            "b[0]=1;" +
            "return a}" +
            ";";

        // Create a new compiler instance
        Compiler compiler = new Compiler();

        // Set compiler options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the original JavaScript
        compiler.compile(
            SourceFile.fromCode("externs.js", ""),
            SourceFile.fromCode("testcode.js", originalJs),
            options
        );

        // Get the compiled JS
        String compiledCode = compiler.toSource();

        // Assert that the compiled code has not removed the assignment within `push`
        assertEquals(expectedJs, compiledCode);
    }
}
