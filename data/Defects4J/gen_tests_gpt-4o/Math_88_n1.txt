
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.linear.PointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIncorrectSolution() {
        // Define the linear objective function: maximize 3x + 5y
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{3, 5}, 0);

        // Set up the linear constraints:
        // Constraint 1: x + y <= 6
        // Constraint 2: 3x + 2y <= 11
        // Constraint 3: x >= 0
        // Constraint 4: y >= 0
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 1}, Relationship.LEQ, 6));
        constraints.add(new LinearConstraint(new double[]{3, 2}, Relationship.LEQ, 11));
        constraints.add(new LinearConstraint(new double[]{1, 0}, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 1}, Relationship.GEQ, 0));

        // Create a SimplexSolver and solve the problem
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(
                new org.apache.commons.math3.optim.MaxIter(100), // Maximum iterations
                objectiveFunction,
                new org.apache.commons.math3.optim.linear.LinearConstraintSet(constraints),
                GoalType.MAXIMIZE,
                new NonNegativeConstraint(true)
        );

        // Expected solution
        double expectedX = 1;
        double expectedY = 5;

        // Check if the solution is correct
        assertEquals(expectedX, solution.getPoint()[0], 1e-6);
        assertEquals(expectedY, solution.getPoint()[1], 1e-6);
    }
}
