public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    String json = mapper.writeValueAsString(new TestClass());

    assertTrue(json.contains("\"key\":\"value\""));
}

static class TestClass {
    private Map<String, String> parameters = new HashMap<>();

    public TestClass() {
        parameters.put("key", "value");
    }

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

static class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) 
      throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeObjectField(entry.getKey(), entry.getValue());
        }
        gen.writeEndObject();
    }
}