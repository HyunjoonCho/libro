
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.jupiter.api.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class JsonAnyGetterTest {

    static class TestClass {
        @JsonSerialize(using = MySerializer.class)
        @JsonAnyGetter
        public Map<String, String> getParameters() {
            Map<String, String> parameters = new HashMap<>();
            parameters.put("key1", "value1");
            return parameters;
        }
    }

    static class MySerializer extends com.fasterxml.jackson.databind.JsonSerializer<Map<String, String>> {
        @Override
        public void serialize(Map<String, String> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider serializers) throws java.io.IOException {
            StringBuilder serialized = new StringBuilder();
            for (Map.Entry<String, String> entry : value.entrySet()) {
                serialized.append(entry.getKey()).append(":").append(entry.getValue()).append(";");
            }
            gen.writeString(serialized.toString());
        }
    }

    @Test
    public void testJsonAnyGetterWithJsonSerialize() throws Exception {
        TestClass testObj = new TestClass();
        ObjectMapper mapper = new ObjectMapper();
        String jsonString = mapper.writeValueAsString(testObj);
        
        // Verify the serialized output to check if the custom serializer was applied
        assertEquals("\"key1:value1;\"", jsonString);
    }
}
