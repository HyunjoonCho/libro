
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZFile;
import org.junit.Test;

import java.io.File;
import java.io.IOException;

import static org.junit.Assert.*;

public class SevenZFileTest {

    @Test
    public void testReadEmptySevenZArchiveEntry() {
        // Assume you have a 7z archive file named "emptyEntry.7z"
        File archive = new File("src/test/resources/emptyEntry.7z"); 
        try (SevenZFile sevenZFile = new SevenZFile(archive)) {
            SevenZArchiveEntry entry = sevenZFile.getNextEntry();
            assertNotNull("Entry should not be null", entry);

            // Ensure the entry is empty
            assertEquals(0, entry.getSize());

            // Attempting to read from the empty entry
            byte[] buffer = new byte[1024];
            int bytesRead = sevenZFile.read(buffer);
            
            // Since the entry is empty, read should return -1 indicating the end of the entry
            assertEquals(-1, bytesRead);

        } catch (IOException e) {
            fail("IOException should not be thrown: " + e.getMessage());
        } catch (IllegalStateException e) {
            fail("IllegalStateException should not be thrown: " + e.getMessage());
        }
    }
}
