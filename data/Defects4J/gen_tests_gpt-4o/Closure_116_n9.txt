
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.assertEquals;

public class CompilerBugTest {

    @Test
    public void testAdvancedOptimizations() {
        // Set up the input JS code
        String inputJs = 
            "window['anchor'] = function (obj, modifiesProp) {" +
            "  return (function (saved) {" +
            "    return modifiesProp(obj) + saved;" +
            "  })(obj['prop']);" +
            "}";

        // Expected output correctly optimized
        String expectedOutputJs = 
            "window.anchor=function(a,b){var c=a.prop;return b(a)+c};";

        // Run the compiler with ADVANCED_OPTIMIZATIONS
        Compiler compiler = new Compiler();
        com.google.javascript.jscomp.CompilerOptions options = new com.google.javascript.jscomp.CompilerOptions();
        com.google.javascript.jscomp.CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile
        Result result = compiler.compile(
            Arrays.asList(SourceFile.fromCode("window.js", "")), // Externs, may be empty for this test
            Arrays.asList(SourceFile.fromCode("input.js", inputJs)), // Input source
            options
        );

        // Check if the compilation was successful
        assert result.success : "Compilation failed!";

        // Get the compiled output
        String compiledOutput = compiler.toSource();

        // Assert that the compiler output matches the expected output
        assertEquals(expectedOutputJs, compiledOutput);
    }
}
