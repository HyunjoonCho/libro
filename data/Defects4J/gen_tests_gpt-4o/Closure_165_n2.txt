public void testPropertiesOnUnrelatedRecordTypes() {
    // Test setup: defining types and function with JavaScript context
    String jsCode = "/** @typedef {{name: string, id: number}} */\n" +
                    "var RecordType1;\n" +
                    "/** @typedef {{name2: string}} */\n" +
                    "var RecordType2;\n" +
                    "/**\n" +
                    "* @param {RecordType1} rec\n" +
                    "*/\n" +
                    "var func = function(rec) {\n" +
                    "   console.log(rec.name2);\n" +
                    "};\n" +
                    "func({name: 'jim', id: 0});";

    // Set up the compiler with the specified options to catch the error
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    compiler.initOptions(options);

    // Compile the JavaScript code
    Node root = compiler.parseTestCode(jsCode);
    compiler.check(root);

    // Assert compilation error for accessing an undefined property
    JSError[] errors = compiler.getErrors();
    boolean hasUnexpectedError = Arrays.stream(errors)
        .noneMatch(error -> error.description.contains("Property name2 never defined on rec"));

    assertFalse("Expected compilation error for undefined property 'name2' on RecordType1.", hasUnexpectedError);
}