public void testPropertiesDefinedOnUnrelatedRecordTypes() {
    // Assuming there's a method compileJavaScript that takes JavaScript code as a string
    // and compiles it, throwing an error if compilation fails with the specified flags.
    String codeWithTwoTypedefs = "/** @typedef {{name: string, id: number}} */\n"
            + "var RecordType1;\n"
            + "\n"
            + "/** @typedef {{name2: string}} */\n"
            + "var RecordType2;\n"
            + "\n"
            + "/**\n"
            + "* @param {RecordType1} rec\n"
            + "*/\n"
            + "var func = function(rec) {\n"
            + " alert(rec.name2);\n"
            + "};\n"
            + "func({name: 'jim', id: 0});";
    
    boolean compilationSucceeded = false;
    try {
        compileJavaScript(codeWithTwoTypedefs,
            "--compilation_level=ADVANCED_OPTIMIZATIONS",
            "--jscomp_error=accessControls",
            "--jscomp_error=checkTypes",
            "--jscomp_error=checkVars");
        compilationSucceeded = true;
    } catch (CompilerException e) {
        // No exception is expected due to incorrect compiler behavior; capture for debugging
    }
    
    assertTrue("Compiling code with unrelated typedefs should not pass", !compilationSucceeded);
}