
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import java.io.StringReader;
import java.io.StringWriter;

import org.junit.Test;

public class PreservationTest {

    @Test
    public void testPreserveWhitespace() {
        String input = "/**\n" +
                       " * @preserve\n" +
                       "\n" +
                       "This\n" +
                       " was\n" +
                       " ASCII\n" +
                       " Art\n" +
                       "\n" +
                       "*/";
        
        String expectedOutput = "/*\n" +
                                "This\n" +
                                " was\n" +
                                " ASCII\n" +
                                " Art\n" +
                                "*/";
                                
        PreservationProcessor processor = new PreservationProcessor();
        String output = processor.process(input);
        
        assertEquals(expectedOutput, output);
    }

    // Mock processor class to simulate the bug
    class PreservationProcessor {
        public String process(String input) {
            // Mock processing of the input to reproduce the issue
            StringWriter output = new StringWriter();
            StringReader reader = new StringReader(input);
            StringBuilder preserved = new StringBuilder();

            boolean preserveStarted = false;
            for (String line : input.split("\n")) {
                if (line.contains("@preserve")) {
                    preserveStarted = true;
                    continue;
                }
                if (preserveStarted) {
                    if (line.trim().equals("*/")) {
                        preserveStarted = false;
                        output.write(preserved.toString().replaceAll("(?m)^\\s+", ""));
                        output.write("\n");
                    } else {
                        preserved.append(line).append("\n");
                    }
                }
            }
            return output.toString().trim();
        }
    }
}
