public void testColumnCaretInErrorOutput() throws Exception {
    // Create a file with JS code that causes a parse error without newline
    String jsCodeWithoutNewline = "alert(1;";
    File jsFileWithoutNewline = File.createTempFile("testWithoutNewline", ".js");
    Files.write(jsFileWithoutNewline.toPath(), jsCodeWithoutNewline.getBytes());

    // Create a file with JS code that causes a parse error with newline
    String jsCodeWithNewline = "alert(1;\n";
    File jsFileWithNewline = File.createTempFile("testWithNewline", ".js");
    Files.write(jsFileWithNewline.toPath(), jsCodeWithNewline.getBytes());

    // Execute the compiler and capture output for code without newline
    String commandWithoutNewline = "java -jar compiler.jar --js " + jsFileWithoutNewline.getAbsolutePath();
    Process processWithoutNewline = Runtime.getRuntime().exec(commandWithoutNewline);
    BufferedReader readerWithoutNewline = new BufferedReader(new InputStreamReader(processWithoutNewline.getErrorStream()));
    String outputWithoutNewline = readerWithoutNewline.lines().collect(Collectors.joining("\n"));

    // Execute the compiler and capture output for code with newline
    String commandWithNewline = "java -jar compiler.jar --js " + jsFileWithNewline.getAbsolutePath();
    Process processWithNewline = Runtime.getRuntime().exec(commandWithNewline);
    BufferedReader readerWithNewline = new BufferedReader(new InputStreamReader(processWithNewline.getErrorStream()));
    String outputWithNewline = readerWithNewline.lines().collect(Collectors.joining("\n"));

    // Clean up temp files
    jsFileWithoutNewline.delete();
    jsFileWithNewline.delete();

    // Check that the output differences align with the described bug
    assertFalse(outputWithoutNewline.contains("^"));
    assertTrue(outputWithNewline.contains("^"));
}