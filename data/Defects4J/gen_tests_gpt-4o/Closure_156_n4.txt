
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;
import org.junit.Test;

public class ShapeCompilerTest {

    @Test(expected = RuntimeException.class)
    public void testCompilerCrashOnAssignStatement() {
        // JavaScript code snippet resembling the bug's description
        String jsSourceCode = 
              "/** @constructor \n" +
              " * @param {...Object} params \n" +
              " */\n" +
              "var dojox = dojox || {};\n" +
              "dojox.gfx = dojox.gfx || {};\n" +
              "dojox.gfx.shape = dojox.gfx.shape || {};\n" +
              "dojox.gfx.shape.Shape = function(params) {};\n" +
              "dojox.gfx.shape.Shape = dojo.declare(" +
              "\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ {});";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Assume proper options are configured
        compiler.initOptions(options);

        JSSourceFile[] externs = {};
        JSSourceFile[] inputs = {JSSourceFile.fromCode("test.js", jsSourceCode)};

        // This should throw the INTERNAL COMPILER ERROR
        compiler.compile(externs, inputs, options);
    }
}
