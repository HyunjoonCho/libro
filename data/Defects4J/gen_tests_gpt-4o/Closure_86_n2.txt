
import org.junit.Test;
import static org.junit.Assert.assertTrue;
import com.google.javascript.jscomp.*;

public class SideEffectsAnalysisTest {

    @Test
    public void testFunctionCallWithSideEffectsNotRemoved() {
        // JavaScript source code with potential side-effects
        String jsSource = "/** @constructor */\n" +
                "function Foo() {\n" +
                "  var self = this;\n" +
                "  window.setTimeout(function() {\n" +
                "    window.location = self.location;\n" +
                "  }, 0);\n" +
                "}\n" +
                "\n" +
                "Foo.prototype.setLocation = function(loc) {\n" +
                "  this.location = loc;\n" +
                "};\n" +
                "\n" +
                "(new Foo()).setLocation('http://www.google.com/');";

        // Initialize the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Set the compilation level to ADVANCED_OPTIMIZATIONS to mimic the issue environment
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        // Perform the compilation
        SourceFile input = SourceFile.fromCode("test.js", jsSource);
        SourceFile extern = SourceFile.fromCode("externs.js", "var window = {}; window.setTimeout = function(f, t) {}; window.location = '';");

        Result result = compiler.compile(extern, input, options);
        String compiledCode = compiler.toSource();

        // Check if the 'setLocation' call is retained in the compiled code
        assertTrue("Compiled code should retain setLocation call", compiledCode.contains("setLocation"));
    }
}
