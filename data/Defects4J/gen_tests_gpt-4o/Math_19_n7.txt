
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.PopulationSize;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.Sigma;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.SimpleBounds;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;

import static org.junit.Assert.*;

public class CMAESOptimizerTest {

    @Test
    public void testLargeBoundsDoNotProduceNaNParameters() {
        CMAESOptimizer optimizer = new CMAESOptimizer(
                1000, // Max iterations
                Double.MIN_VALUE, // Stop fitness
                true, // Is random
                5, // Check Feasable Count
                0, // Convergence checker
                null, // Random generator
                false // Generate statistics
        );

        double[] startPoint = new double[]{0, 0};
        double[] lowerBounds = new double[]{-Double.MAX_VALUE, -Double.MAX_VALUE};
        double[] upperBounds = new double[]{Double.MAX_VALUE, Double.MAX_VALUE};
        double[] sigma = new double[]{0.3, 0.3};

        PointValuePair result = optimizer.optimize(
                new MaxEval(100000),
                new ObjectiveFunction(point -> {
                    // Ensure no NaN values are passed to the fitness function
                    for (double value : point) {
                        assertFalse("NaN value found in parameters.", Double.isNaN(value));
                    }
                    // Dummy fitness function: Minimizing the sum of squares
                    return FastMath.pow(point[0], 2) + FastMath.pow(point[1], 2);
                }),
                GoalType.MINIMIZE,
                new InitialGuess(startPoint),
                new SimpleBounds(lowerBounds, upperBounds),
                new PopulationSize(50),
                new Sigma(sigma)
        );

        // Check that the result is not null and contains no NaN values
        assertNotNull(result);
        for (double value : result.getPoint()) {
            assertFalse("NaN found in result parameters.", Double.isNaN(value));
        }
    }
}
