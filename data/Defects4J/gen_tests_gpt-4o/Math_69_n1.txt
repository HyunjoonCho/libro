
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.BlockRealMatrix;
import org.apache.commons.math3.distribution.TDistribution;
import org.junit.Test;
import static org.junit.Assert.*;

public class PearsonsCorrelationTest {

    @Test
    public void testCorrelationPValuesPrecision() {
        RealMatrix matrix = new BlockRealMatrix(new double[][] {
            {1.0, 2.0, 3.0, 4.0},
            {2.1, 2.5, 3.6, 4.0},
            {3.2, 3.0, 4.1, 4.5},
            {4.0, 4.2, 4.5, 5.1},
            {5.1, 5.6, 5.9, 6.1},
            {6.0, 6.8, 7.0, 6.9}
        });

        PearsonsCorrelation correlation = new PearsonsCorrelation(matrix);
        RealMatrix pValues = correlation.getCorrelationPValues();

        // Manually compute expected p-value using the proposed fix
        double n = (double) matrix.getRowDimension();
        double r = 0.9; // Assuming a strong correlation for demonstration
        double tStatistic = r * Math.sqrt((n - 2) / (1 - r * r));
        TDistribution tDistribution = new TDistribution(n - 2);
        double expectedPValue = 2 * tDistribution.cumulativeProbability(-tStatistic);

        // Check if any resulting p-values are zero indicating precision issues
        boolean foundZeroPValue = false;
        for (int i = 0; i < pValues.getRowDimension(); i++) {
            for (int j = 0; j < pValues.getColumnDimension(); j++) {
                if (pValues.getEntry(i, j) == 0.0) {
                    foundZeroPValue = true;
                }
            }
        }

        // Ensure p-values do not drop to zero erroneously
        assertFalse("P-values should not drop to zero erroneously", foundZeroPValue);

        // Demonstrate calculation with the suggested formula fixing function epsilon limitation
        assertEquals("The fixed p-value calculation did not match the expected result",
                     expectedPValue, pValues.getEntry(0, 1), 1e-15);
    }
}
