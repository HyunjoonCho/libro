
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicReference;

public class AtomicReferenceDeserializationTest {

    static class MyBean {
        private AtomicReference<AtomicReference<Integer>> refRef;

        public AtomicReference<AtomicReference<Integer>> getRefRef() {
            return refRef;
        }

        public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {
            this.refRef = refRef;
        }
    }

    @Test
    public void testAtomicReferenceDeserialization() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectReader objectReader = objectMapper.readerFor(MyBean.class);

        // Deserialize a non-null value
        MyBean intRef = objectReader.readValue(" {\"refRef\": 2 } ");
        Assertions.assertNotNull(intRef.getRefRef(), "Outer AtomicReference should not be null");
        Assertions.assertNotNull(intRef.getRefRef().get(), "Inner AtomicReference should not be null");
        Assertions.assertEquals(2, intRef.getRefRef().get().get().intValue(), "Inner value should be 2");

        // Deserialize a null value
        MyBean nullRef = objectReader.readValue(" {\"refRef\": null } ");
        Assertions.assertNotNull(nullRef.getRefRef(), "Outer AtomicReference should not be null");
        Assertions.assertNotNull(nullRef.getRefRef().get(), "Inner AtomicReference should not be null");
        Assertions.assertNull(nullRef.getRefRef().get().get(), "Inner value should be null");
    }
}
