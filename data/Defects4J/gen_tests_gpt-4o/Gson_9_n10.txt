
import static org.junit.Assert.assertThrows;
import org.junit.Test;

public class ValueFunctionTest {

    public Object value(Object input) {
        if (input instanceof Boolean) {
            // In the problematic implementation, this would call a method `value(boolean)`,
            // leading to a NullPointerException if input is null.
            return value((Boolean) input); // Simulating the problematic method resolution
        } else if (input instanceof Number) {
            return value((Number) input);
        }
        return "Unsupported type";
    }

    public Object value(boolean input) {
        // Simulated behavior for boolean handling
        return input ? "true" : "false";
    }

    public Object value(Number input) {
        // Simulated behavior for Number handling
        return input;
    }

    @Test
    public void testBooleanValueMethodWithNull() {
        Boolean input = null;
        
        // Expecting a NullPointerException due to incorrect method overload resolution
        assertThrows(NullPointerException.class, () -> value(input));
    }
}
