
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.InputId;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class CompilerTest {

    @Test
    public void testIncompleteFunctionDefinitionInIdeMode() {
        // Create a new compiler instance
        Compiler compiler = new Compiler();
        
        // Enable IDE mode in the compiler options
        CompilerOptions options = new CompilerOptions();
        options.ideMode = true;

        // Input JavaScript code with incomplete function definition
        String javascriptCode = "f f f ;\nfunction t";

        // Create a JS input to compile and get its root parse node
        Node root = compiler.parse(SourceFile.fromCode("test.js", javascriptCode));

        // Ensure the root is not null, indicating parsing did not crash
        assertNotNull("Parsing resulted in a null root node, indicating crash.", root);

        // Compile the parsed input
        Result result = compiler.compile(ImmutableList.of(), ImmutableList.of(new SourceFile.fromCode("test.js", javascriptCode)), options);

        // Verify that an internal compiler error did not occur
        assertNotNull("Compilation resulted in errors.", result);
        assertTrue("Compilation resulted in an internal compiler error.", result.success);
    }
}
