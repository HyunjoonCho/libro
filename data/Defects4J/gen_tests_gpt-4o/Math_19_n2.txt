
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.MaxIter;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.SimpleBounds;
import org.junit.Test;

import static org.junit.Assert.*;

public class CMAESOptimizerTest {

    @Test
    public void testNaNInFitnessFunctionParameters() {
        CMAESOptimizer optimizer = new CMAESOptimizer(
                10000, // maximal number of iterations
                1e-9,  // stop when fitness is within this range
                true,  // whether to check for convergence
                0,     // no value restriction
                10,    // convergence checker
                null,  // no random generator
                false, // no boolean flag for randomization
                null); // no callback

        double[] startPoint = new double[]{0}; // Starting point
        double[] lowerBound = new double[]{-Double.MAX_VALUE}; // Lower bounds
        double[] upperBound = new double[]{Double.MAX_VALUE};  // Upper bounds

        ObjectiveFunction objectiveFunction = new ObjectiveFunction(point -> {
            // Check for NaN values in the parameters passed to the fitness function
            for (double param : point) {
                assertFalse("Fitness function received NaN parameter", Double.isNaN(param));
            }
            return 0; // dummy objective function
        });

        optimizer.optimize(
                new MaxEval(100),
                new MaxIter(100),
                objectiveFunction,
                GoalType.MINIMIZE,
                new InitialGuess(startPoint),
                new SimpleBounds(lowerBound, upperBound)
        );
    }
}
