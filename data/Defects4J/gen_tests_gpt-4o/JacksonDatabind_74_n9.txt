
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import org.junit.Test;

import static org.junit.Assert.assertNull;

public class AsPropertyTypeDeserializerTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
    @JsonDeserialize(using = CustomDeserializer.class)
    public static class Base {
    }

    public static class CustomDeserializer extends AsPropertyTypeDeserializer {
        public CustomDeserializer() {
            super(Base.class, null, null, false, null, null);
        }

        @Override
        public Object deserializeTypedFromAny(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt)
                throws java.io.IOException {
            // Logic similar to AsPropertyTypeDeserializer would be here
            return null;
        }
    }

    @Test
    public void testAcceptEmptyStringAsNullObject() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);

        String json = "";

        Base result = objectMapper.readValue(json, Base.class);

        assertNull("Expected deserialized object to be null", result);
    }
}
