
import org.apache.commons.math3.optimization.OptimizationData;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.direct.CMAESOptimizer;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CMAESOptimizerBoundsTest {

    @Test
    public void testCMAESOptimizerBounds() {
        // Set up the CMAESOptimizer
        CMAESOptimizer optimizer = new CMAESOptimizer(10000, 0.0, true, 0, 0,
                new CMAESOptimizer.Sigma(new double[]{0.3, 0.3}), null, 0, 100);

        // Define the simple quadratic objective function
        MultivariateFunction objectiveFunction = new MultivariateFunction() {
            public double value(double[] point) {
                // Mock fitting a value that has its true minimum at [0.9, 0.9]
                return Math.pow(point[0] - 0.9, 2) + Math.pow(point[1] - 0.9, 2);
            }
        };

        // Set lower and upper bounds
        double[] lowerBound = {0.0, 0.0};
        double[] upperBound = {1.0, 1.0};

        try {
            // Perform the optimization
            PointValuePair result = optimizer.optimize(
                    new CMAESOptimizer.MaxEval(10000),
                    new CMAESOptimizer.SimpleBounds(lowerBound, upperBound),
                    new CMAESOptimizer.InitialGuess(new double[]{0.1, 0.1}),
                    new OptimizationData[]{
                            new CMAESOptimizer.OptimaChecker(true),
                            new CMAESOptimizer.Sigma(new double[]{0.1, 0.1}),
                            new CMAESOptimizer.PopulationSize(50)
                    },
                    new CMAESOptimizer.ObjectiveFunction(objectiveFunction)
            );

            // Assert that we expect the solution to be closer to the real minimum [0.9, 0.9]
            double[] bestPoint = result.getPoint();
            assertEquals(0.9, bestPoint[0], 1e-6);
            assertEquals(0.9, bestPoint[1], 1e-6);

            // Print out the optimized point
            System.out.println("Optimized point: " + bestPoint[0] + ", " + bestPoint[1]);
        } catch (TooManyEvaluationsException ex) {
            // Handle the exception by reporting failure to converge or achieving max evaluations
            System.out.println("Failed to converge within the maximum allowed evaluations.");
        }
    }
}
