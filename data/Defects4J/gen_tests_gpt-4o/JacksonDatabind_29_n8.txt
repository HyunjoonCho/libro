
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class PolymorphicNullTypeIdTest {

    // Base interface for polymorphic types
    interface Animal {
    }

    // Implementation of Animal
    static class Dog implements Animal {
        public String name;

        public Dog() {
        }

        public Dog(String name) {
            this.name = name;
        }
    }

    // Custom TypeIdResolver that returns null to simulate the issue
    static class NullTypeIdResolver extends TypeIdResolverBase {

        @Override
        public String idFromValue(Object value) {
            return null;
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return null;
        }

        @Override
        public JavaType typeFromId(DatabindContext context, String id) {
            return context.constructType(Dog.class);
        }

        @Override
        public String getDescForKnownTypeIds() {
            return "Dog (null type id)";
        }
    }

    // A wrapper for Animal using external type information
    static class Wrapper<T> {
        @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type", visible = true,
                defaultImpl = Dog.class)
        public T value;
        public String type;

        public Wrapper() {
        }

        public Wrapper(T value, String type) {
            this.value = value;
            this.type = type;
        }
    }

    @Test
    public void testDeserializeWithNullTypeId() throws JsonProcessingException {
        String json = "{ \"value\": { \"name\": \"Fido\" }, \"type\": null }";

        ObjectMapper mapper = new ObjectMapper();
        mapper.setBaseTypeLimitingValidator(new DefaultBaseTypeLimitingValidator());

        Wrapper<Animal> wrapper = mapper.readValue(json, mapper.getTypeFactory().constructParametricType(Wrapper.class, Animal.class));

        assertNotNull(wrapper);
        assertNotNull(wrapper.value);
        assertTrue(wrapper.value instanceof Dog);
        assertEquals("Fido", ((Dog) wrapper.value).name);
    }
}
