public void testFunctionPropertiesRetention() {
    // Setup the initial state with functions and their properties
    var lastMsg;
    var map = new HashMap<String, Runnable>();

    var addToMap = (String key, Runnable func, boolean alwaysCall) -> {
        map.put(key, func);
        if (alwaysCall) {
            ((HashMap<Runnable, Boolean>)map).put(func, true);
        }
    };

    Runnable f1 = () -> System.out.println("f1");
    Runnable f2 = () -> System.out.println("f2");

    addToMap.accept("f1", f1, true);
    addToMap.accept("f2", f2, false);

    Runnable f = map.get(Math.random() > 0.5 ? "f1" : "f2");
    // The key-check propagation doesn't occur correctly in advanced optimizations
    boolean shouldAlwaysCall = ((HashMap<Runnable, Boolean>)map).getOrDefault(f, false);

    if (shouldAlwaysCall) {
        f.run();
    }

    // Expected behavior: "f1" is printed if 'f1' was the chosen key
    // Check if calling works as expected with the assigned property
    if (map.get("f1") != null) {
        assertEquals(true, ((HashMap<Runnable, Boolean>) map).get(map.get("f1")));
    }
}