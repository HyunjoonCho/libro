
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.junit.Test;

public class DormandPrince853IntegrationTest {

    // Simple ODE y' = y
    private static class ExponentialGrowthODE implements FirstOrderDifferentialEquations {
        @Override
        public int getDimension() {
            return 1;
        }

        @Override
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = y[0];
        }
    }

    @Test
    public void testStepSizeExceededForShortIntegrationRange() {
        FirstOrderDifferentialEquations ode = new ExponentialGrowthODE();
        double[] y0 = new double[] { 1.0 }; // Initial condition

        // Using a very short integration range
        double t0 = 0.0;
        double t1 = 1.0e-6; // Extremely short range
        double[] y = new double[y0.length];

        // Creating the integrator with typical parameters
        double minStep = 1.0e-10;
        double maxStep = 1.0;
        double absoluteTolerance = 1.0e-9;
        double relativeTolerance = 1.0e-9;

        DormandPrince853Integrator integrator = new DormandPrince853Integrator(minStep, maxStep, absoluteTolerance, relativeTolerance);

        integrator.addStepHandler(new StepHandler() {
            public void init(double t0, double[] y0, double t) {
                // Initialization is not necessary for this example
            }
            public void handleStep(StepInterpolator interpolator, boolean isLast) throws MaxCountExceededException {
                double t = interpolator.getCurrentTime();
                if (t < t0 || t > t1) {
                    fail("Step out of range: t = " + t);
                }
            }
        });

        try {
            integrator.integrate(ode, t0, y0, t1, y);
            assertTrue("Final time is within range", Math.abs(t1 - t0) <= maxStep);
        } catch (MathIllegalArgumentException e) {
            // Handle specific step size failure due to range checks
        }
    }
}
