public void testTypeChecker() {
    // Test case when function ns.a is defined inside an anonymous function
    Function<Object, Void> nsAWrapper = () -> {
        // Define function with annotation within another function
        nsA = (String b) -> {};
        return null;
    };
    nsAWrapper.apply(null);

    try {
        nsA(); // Should not emit a warning
    } catch (Exception e) {
        fail("Function ns.a should not throw an exception when called with 0 parameters.");
    }

    try {
        nsA(123); // Should emit a warning about type mismatch if system was checking correctly
        fail("Function ns.a should throw an exception when called with an integer.");
    } catch (Exception e) {
        // Expected behavior
    }

    // Test case when function d is defined
    Function<Void, Void> d = () -> {
        try {
            nsA(); // Expect no warning here
            nsA(123); // Should emit a warning about type mismatch
        } catch (Exception e) {
            // Expected behavior for second call
        }
        return null;
    };

    d.apply(null);
}