public void testLastEventDetection() {
    FirstOrderDifferentialEquations ode = new TestEquation();
    double[] y = new double[] { 0.0 };
    
    double stepSize = 67.5;
    double endTime = 153.0;
    
    EventHandler handler = new TestEventHandler();
    double minStep = 0.001;
    double maxStep = stepSize;
    double absTolerance = 1e-9;
    double relTolerance = 1e-9;
    
    Integrator integrator = new Integrator(minStep, maxStep, absTolerance, relTolerance);
    integrator.addEventHandler(handler, stepSize, 1e-9, 100);
    
    integrator.integrate(ode, 0.0, y, endTime, y);
    
    assertTrue("Second event was not detected", handler.isEventDetected());
}

private static class TestEquation implements FirstOrderDifferentialEquations {
    public int getDimension() {
        return 1;
    }

    public void computeDerivatives(double t, double[] y, double[] yDot) {
        yDot[0] = 1.0;
    }
}

private static class TestEventHandler implements EventHandler {
    private boolean eventDetected = false;

    public int eventOccurred(double t, double[] y, boolean increasing) {
        eventDetected = true;
        return CONTINUE;
    }

    public double g(double t, double[] y) {
        if (t < 90.0) {
            return t - 90.0;
        } else {
            return 135.0 - t;
        }
    }

    public void resetState(double t, double[] y) {
    }

    public boolean isEventDetected() {
        return eventDetected;
    }
}