
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;

class CloseEventsODE implements FirstOrderDifferentialEquations {
    public int getDimension() {
        return 1;
    }

    public void computeDerivatives(double t, double[] y, double[] yDot) {
        yDot[0] = 1; // Simple differential equation for testing
    }
}

class CloseEventsHandler implements EventHandler {
    @Override
    public double g(double t, double[] y) {
        if (t < 90) {
            return t - 90; // Event at t = 90
        } else {
            return 135 - t; // Event at t = 135
        }
    }

    @Override
    public Action eventOccurred(double t, double[] y, boolean increasing) {
        System.out.println("Event occurred at t = " + t);
        return Action.CONTINUE;
    }

    @Override
    public void init(double t0, double[] y0, double t) {}

    @Override
    public double getMaxCheckInterval() {
        return 10.0;
    }

    @Override
    public int getMaxIterationCount() {
        return 100;
    }

    @Override
    public double getConvergence() {
        return 1.0e-9;
    }
}

public class ODEIntegrationTest {
    @org.junit.Test
    public void testCloseEventsDetection() {
        DormandPrince853Integrator integrator = new DormandPrince853Integrator(1.0e-8, 1.0,
                1.0e-10, 1.0e-10);
        CloseEventsODE equations = new CloseEventsODE();
        CloseEventsHandler eventHandler = new CloseEventsHandler();
        
        integrator.addEventHandler(eventHandler, 1.0, 1.0e-9, 100);

        double[] y = new double[] { 0.0 };
        integrator.integrate(equations, 0.0, y, 150.0, y);

        // Assert using the System output from the event handler
        // A real test would check if both events at 90 and 135 were detected
    }
}
