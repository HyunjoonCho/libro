public void testWrongStepSizeInDormandPrince853Integrator() {
    double[] y0 = { 1.0, 2.0, 3.0 }; // Initial state
    double t0 = 0.0; // Initial time
    double t = 10.0; // Final time
    double[] y = new double[y0.length]; // Final state
    OrdinaryDifferentialEquation ode = new SimpleOde(y0.length); // Define the ODE system

    double scalAbsoluteTolerance = 1.0e-10;
    double scalRelativeTolerance = 1.0e-10;

    DormandPrince853Integrator integrator = new DormandPrince853Integrator(
        1.0e-10, // min step
        1.0,     // max step
        scalAbsoluteTolerance,
        scalRelativeTolerance
    );

    boolean exceptionOccurred = false;
    try {
        integrator.integrate(ode, t0, y0, t, y);
    } catch (Exception e) {
        exceptionOccurred = true;
    }

    assertTrue("The integrator should not have failed with a correct step size", exceptionOccurred);
}

static class SimpleOde implements OrdinaryDifferentialEquation {
    
    private final int dimension;

    SimpleOde(int dimension) {
        this.dimension = dimension;
    }

    public int getDimension() {
        return dimension;
    }

    public void computeDerivatives(double t, double[] y, double[] yDot) {
        for (int i = 0; i < y.length; i++) {
            yDot[i] = y[i];
        }
    }
}