
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class DormandPrince853IntegratorTest {

    @Test
    public void testWrongFirstStepSizeGuess() {
        // Define a simple differential equation dy/dt = y
        FirstOrderDifferentialEquations equations = new FirstOrderDifferentialEquations() {
            public int getDimension() {
                return 1;
            }

            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = y[0];
            }
        };

        double[] y0 = new double[] { 1.0 }; // Initial condition
        double t0 = 0.0;                    // Initial time
        double t1 = 1.0;                    // End time

        double[] y = new double[y0.length]; // Integration result array

        // Set tolerances
        double absTol = 1.0e-6;
        double relTol = 1.0e-6;

        // Create an instance of the integrator with the given tolerances
        DormandPrince853Integrator integrator = new DormandPrince853Integrator(
                1.0e-10, 100.0, absTol, relTol);

        // Add a step handler to check the first step size
        integrator.addStepHandler(new StepHandler() {
            private boolean firstStep = true;

            public void handleStep(StepInterpolator interpolator, boolean isLast) {
                if (firstStep) {
                    // Verify the time of the first step is within expected range
                    double h = interpolator.getCurrentTime() - interpolator.getPreviousTime();
                    System.out.println("First step size: " + h);
                    double expectedHLowerLimit = 0.01;  // Example lower limit threshold of acceptable step size
                    double expectedHUpperLimit = 0.1;   // Example upper limit threshold of acceptable step size
                    assertEquals(true, h >= expectedHLowerLimit && h <= expectedHUpperLimit);
                    firstStep = false;
                }
            }

            public void init(double t0, double[] y0, double t) {
            }
        });

        // Perform the integration
        integrator.integrate(equations, t0, y0, t1, y);

        // Check endpoint result matching the known analytical solution y(t) = y0 * exp(t)
        double expectedValue = Math.exp(t1);
        assertEquals(expectedValue, y[0], 1.0e-5);
    }
}
