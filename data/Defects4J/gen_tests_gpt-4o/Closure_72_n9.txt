
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class BulletCompilerTest {

    @Test(expected = RuntimeException.class)
    public void testBulletCompiler() {
        // Simulating a synthetic JavaScript input that may trigger a similar internal compiler error.
        String complexJsCode = generateComplexLoopingJs();

        // Attempt to compile this code using the Closure Compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Capture System.err to check for INTERNAL COMPILER ERROR
        ByteArrayOutputStream errContent = new ByteArrayOutputStream();
        System.setErr(new PrintStream(errContent));

        // Compile the synthetic input
        SourceFile input = SourceFile.fromCode("input.js", complexJsCode);
        compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Check if the specific INTERNAL COMPILER ERROR is thrown
        String expectedErrorMessage = "INTERNAL COMPILER ERROR";
        if (!errContent.toString().contains(expectedErrorMessage)) {
            throw new RuntimeException("Failed to reproduce the INTERNAL COMPILER ERROR");
        }
    }

    private String generateComplexLoopingJs() {
        // Generate a complex control flow in JavaScript that might trigger an error
        StringBuilder js = new StringBuilder();
        js.append("function test() {");
        js.append("  var __label__ = 0;");
        js.append("  while(true) {");
        js.append("    if (__label__ == 0) {");
        js.append("      if (conditionMet()) {");
        js.append("        break;");
        js.append("      }");
        js.append("    }");
        js.append("    labelSwitch();");
        js.append("  }");
        js.append("}");
        js.append("function conditionMet() {");
        js.append("  return Math.random() > 0.99999;");
        js.append("}");
        js.append("function labelSwitch() {");
        js.append("  // Complex logic here");
        js.append("}");
        return js.toString();
    }
}
