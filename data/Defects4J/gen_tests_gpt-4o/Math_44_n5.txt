
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;

class Event {
    private String name;

    public Event(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
}

class EventSystem {
    private List<Event> events = new ArrayList<>();
    private boolean stateReset = false;

    public void trackEvent(Event event) {
        events.add(event);
    }

    public void handleEvents() {
        for (Event event : events) {
            if (!stateReset) {
                resetState();
            }
            if ("event1".equals(event.getName())) {
                stateReset = true;
            } else if ("event2".equals(event.getName())) {
                // Logic for event2
                // Fails to find its way if state is not properly reset
                assertTrue(stateReset, "Event2 failed due to incomplete state reset");
            }
        }
    }

    private void resetState() {
        // Simulating state reset
        stateReset = true;
    }
}

public class EventSystemTest {

    @org.junit.jupiter.api.Test
    public void testIncompleteReinitialization() {
        EventSystem eventSystem = new EventSystem();

        // Track two events that occur in the same step
        eventSystem.trackEvent(new Event("event1"));
        eventSystem.trackEvent(new Event("event2"));

        // Handle events
        eventSystem.handleEvents();

        // Expectation: event2 should find its way after event1 resets the state completely
    }
}
