
import com.google.gson.*;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

class Vehicle {
    String type;
}

class Car extends Vehicle {
    int wheels;
  
    Car() {
        this.type = "Car";
    }
}

class Truck extends Vehicle {
    double loadCapacity;

    Truck() {
        this.type = "Truck";
    }
}

class VehicleTypeAdapter implements JsonDeserializer<Vehicle>, JsonSerializer<Vehicle> {
    @Override
    public Vehicle deserialize(JsonElement json, java.lang.reflect.Type typeOfT, JsonDeserializationContext context) {
        JsonObject jsonObject = json.getAsJsonObject();
        String type = jsonObject.get("type").getAsString();
        switch (type) {
            case "Car":
                return context.deserialize(json, Car.class);
            case "Truck":
                return context.deserialize(json, Truck.class);
            default:
                throw new JsonParseException("Unknown element type: " + type);
        }
    }

    @Override
    public JsonElement serialize(Vehicle src, java.lang.reflect.Type typeOfSrc, JsonSerializationContext context) {
        return context.serialize(src);
    }
}

public class TypeHierarchyTest {
    @Test
    public void testDeserializationWithTypeHierarchy() {
        // Gson setup with type adapter for Vehicle
        Gson gson = new GsonBuilder()
                .registerTypeAdapter(Vehicle.class, new VehicleTypeAdapter())
                .create();

        // JSON for a Car
        String carJson = "{\"type\":\"Car\",\"wheels\":4}";

        // Correctly deserializes a Car
        Vehicle vehicle = gson.fromJson(carJson, Vehicle.class);
        assertEquals("Car", ((Car) vehicle).type);

        // JSON for a Truck (potential error scenario)
        String truckJson = "{\"type\":\"Truck\",\"loadCapacity\":15.5}";

        try {
            // Attempt to forcefully deserialize Truck JSON into Car
            gson.fromJson(truckJson, Car.class);
            fail("Expected to fail due to mismatched type but deserialization succeeded.");
        } catch (JsonParseException e) {
            // We expect an exception because the type Vehicle does not match
            assertEquals("Expected exception for mismatched types", "Truck", ((Truck) gson.fromJson(truckJson, Vehicle.class)).type);
        }
    }
}
