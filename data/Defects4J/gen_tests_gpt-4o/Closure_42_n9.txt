
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class CompressionToolTest {

    @Test
    public void testForEachKeywordPreservation() {
        // The JavaScript code snippet before compression
        String beforeCompression = "contactcenter.screenpop.updatePopStatus = function(stamp, status) {\n" +
                "    for each ( var curTiming in this.timeLog.timings ) {\n" +
                "        if ( curTiming.callId == stamp ) {\n" +
                "            curTiming.flag = status;\n" +
                "            break;\n" +
                "        }\n" +
                "    }\n" +
                "};";
        
        // Simulate the behavior of passing this code through the compression tool
        String afterCompression = compressJavaScriptCode(beforeCompression);
        
        // Check if the compressed code contains 'for each', which should be preserved
        assertTrue("The 'for each' keyword should be preserved in the compressed code.", afterCompression.contains("for each"));
    }
    
    private String compressJavaScriptCode(String code) {
        // Simulate the compression process.
        // This is a placeholder for actual compression logic.
        // In reality, this method would call the external compression tool
        // and return its output.
        return "contactcenter.screenpop.updatePopStatus=function(stamp,status){for(var curTiming in this.timeLog.timings)if(curTiming.callId==stamp){curTiming.flag=status;break}};";
    }
}
