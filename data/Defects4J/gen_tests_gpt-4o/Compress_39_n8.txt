
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.ZipInputStream;

import static org.junit.Assert.assertTrue;

public class TruncatedZipTest {

    @Test
    public void testTruncatedZipErrorMessage() {
        // Create a byte array that simulates a truncated ZIP file
        byte[] truncatedZip = new byte[] {
            0x50, 0x4B, 0x03, 0x04, // ZIP file header
            0x14, 0x00, 0x00, 0x00, // Start of central directory
            // Truncated data here...
        };

        // Wrap the byte array in an InputStream
        ByteArrayInputStream bais = new ByteArrayInputStream(truncatedZip);
        ZipInputStream zis = new ZipInputStream(bais);

        try {
            while (zis.getNextEntry() != null) {
                // Try to read entries
            }
        } catch (IOException e) {
            // Expecting an IOException due to truncated file
            assertTrue("Exception message should contain 'EOFException'",
                    e.getMessage().contains("EOFException"));

            // Verify that the error message doesn't include excessive data
            // You might want to verify against known safe length for logging
            int maxSafeLengthForLogging = 1000; // Adjust based on your requirements
            assertTrue("Exception message is too long for safe logging",
                    e.getMessage().length() < maxSafeLengthForLogging);
        } finally {
            try {
                // Close streams
                zis.close();
                bais.close();
            } catch (IOException ignored) {
                // Ignored
            }
        }
    }
}
