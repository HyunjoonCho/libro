
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.nio.charset.StandardCharsets;
import java.util.Map;

public class ByteQuadsCanonicalizerTest {
    private static final int SEED = -523743345;

    private static void injectReproducibleSeed(ObjectMapper objectMapper) throws Exception {
        JsonFactory jsonFactory = objectMapper.getFactory();
        
        // Access the private field _byteSymbolCanonicalizer in JsonFactory
        Field byteSymbolCanonicalizerField = JsonFactory.class.getDeclaredField("_byteSymbolCanonicalizer");
        byteSymbolCanonicalizerField.setAccessible(true);

        // Access the private method createRoot in ByteQuadsCanonicalizer
        Method factoryMethod = ByteQuadsCanonicalizer.class.getDeclaredMethod("createRoot", int.class);
        factoryMethod.setAccessible(true);
        
        // Set the custom seed for testing
        byteSymbolCanonicalizerField.set(jsonFactory, factoryMethod.invoke(null, SEED));
    }

    @Test(expected = ArrayIndexOutOfBoundsException.class)
    public void testRead() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        injectReproducibleSeed(objectMapper);
        
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append("{\n");
        stringBuilder.append(" \"expectedGCperPosition\": null");
        for (int i = 0; i < 60; ++i) {
            stringBuilder.append(",\n \"").append(i + 1).append("\": null");
        }
        stringBuilder.append("\n}");
        
        // Trigger the bug by parsing the JSON
        objectMapper.readValue(stringBuilder.toString().getBytes(StandardCharsets.UTF_8), Map.class);
    }
}
