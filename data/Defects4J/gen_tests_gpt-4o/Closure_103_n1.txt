
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;

import java.util.ArrayList;
import java.util.List;

public class CompilerTest {
    public static void main(String[] args) {
        String code = 
                "function instanceOf(value, type) {\n" +
                " try {\n" +
                " // first try built-in test -- if it succeeds, we're golden.\n" +
                " if (value instanceof type) {\n" +
                " return true;\n" +
                " }\n" +
                " } catch (exception) {\n" +
                " if (exception instanceof TypeError) {\n" +
                " throw exception; // indicates that \"type\" is not a type\n" +
                " }\n" +
                " // Otherwise, assume the exception was caused by \n" +
                " // the Firefox 1.0.3 bug. Work around it.\n" +
                " return (type === Object);\n" +
                " }\n" +
                "}";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        List<SourceFile> externs = new ArrayList<>();
        List<SourceFile> inputs = new ArrayList<>();
        
        inputs.add(SourceFile.fromCode("test.js", code));

        Result result = compiler.compile(externs, inputs, options);
        for (JSError warning : result.warnings) {
            System.out.println("Warning: " + warning.description);
        }
        for (JSError error : result.errors) {
            System.out.println("Error: " + error.description);
        }
    }
}
