
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testFunctionTypeIllegalStateException() {
        Compiler compiler = new Compiler();

        // Set compiler options similar to command-line flags
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ALL_CHECKS, com.google.javascript.jscomp.CheckLevel.WARNING);

        // Source file as a string (normally read from a file)
        String source = 
            "var test = {};\n" +
            "/**\n" +
            " * @interface\n" +
            " */\n" +
            "test.T = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @implements {test.T}\n" +
            " */\n" +
            "test.A = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @implements {test.T}\n" +
            " */\n" +
            "test.B = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " */\n" +
            "test.X = function() {\n" +
            "  this.type = test.A;\n" +
            "  this.t = this.f();\n" +
            "};\n" +
            "/**\n" +
            " * @return {test.T}\n" +
            " */\n" +
            "test.X.prototype.f = function() {\n" +
            "  if (this.type === test.A) {\n" +
            "    return new test.A();\n" +
            "  } else if (this.type === test.B) {\n" +
            "    return new test.B();\n" +
            "  }\n" +
            "};";

        // Compile the source code
        SourceFile input = SourceFile.fromCode("crash.js", source);
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Check if there were any runtime exceptions during the compilation
        for (JSError error : result.errors) {
            System.out.println("Error: " + error.toString());
        }
        
        assertTrue("Compilation should result in an error or exception", result.success == false);
    }
}
