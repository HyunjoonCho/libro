script
/**
 * Initial implementation with object, showing the issue.
 * 
 * Before compiling with Closure Compiler:
 * isFunction = function(functionToCheck) {
 *   var getType;
 *   getType = {}; // just an object
 *   return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';
 * };
 * 
 * This should return true for functions and false otherwise.
 */
function testIsFunctionWithObject() {
    var isFunction = function(functionToCheck) {
        var getType;
        getType = {}; // just an object
        return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';
    };

    console.assert(isFunction(function () {}) === true, "Expected true for function");
    console.assert(isFunction({}) === false, "Expected false for object");
}

/**
 * Adjusted implementation with array.
 * 
 * After compiling with Closure Compiler, this behaves correctly.
 */
function testIsFunctionWithArray() {
    var isFunction = function(functionToCheck) {
        var getType;
        getType = []; // now it's an array 
        return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';
    };

    console.assert(isFunction(function () {}) === true, "Expected true for function");
    console.assert(isFunction({}) === false, "Expected false for object");
}

// Run tests before compilation
console.log("Running tests before compilation:");
testIsFunctionWithObject();
testIsFunctionWithArray();

// To see the problem, you'll need to compile `testIsFunctionWithObject` using Google Closure Compiler
// and observe that it doesn't behave as expected. However, `testIsFunctionWithArray` should work correctly post-compilation.
