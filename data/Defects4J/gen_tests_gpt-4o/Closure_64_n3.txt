
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.File;
import java.io.InputStreamReader;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;

public class ClosureCompilerTest {

    @Test
    public void testECMAScript5StrictModeSingleUseStrict() throws Exception {
        // Assuming you have closure-compiler available in the directory
        String compilerPath = "path/to/compiler.jar";

        // Create temporary JS files
        File getNumJs = File.createTempFile("get_num", ".js");
        Files.write(getNumJs.toPath(), "var getNum = function() { return 5; };".getBytes(StandardCharsets.UTF_8));

        File alertJs = File.createTempFile("alert", ".js");
        Files.write(alertJs.toPath(), "alert(getNum());".getBytes(StandardCharsets.UTF_8));

        // Execute the closure compiler command
        ProcessBuilder processBuilder = new ProcessBuilder(
            "java", "-jar", compilerPath,
            "--language_in=ECMASCRIPT5_STRICT",
            "--compilation_level=ADVANCED_OPTIMIZATIONS",
            "--warning_level=VERBOSE",
            "--js", getNumJs.getAbsolutePath(),
            "--js", alertJs.getAbsolutePath()
        );
        processBuilder.redirectErrorStream(true);

        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        StringBuilder output = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            output.append(line);
        }

        process.waitFor();

        // Expected output checks
        String compiledCode = output.toString();

        // Expectations based on the bug report
        assertTrue(compiledCode.contains("'use strict';alert(5);"));
        // Add more assertions if there are more specific outcomes you wish to verify against

        // Clean up temporary files
        getNumJs.delete();
        alertJs.delete();
    }
}
