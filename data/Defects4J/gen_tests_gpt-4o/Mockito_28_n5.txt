
import static org.mockito.Mockito.*;

import org.junit.Test;
import org.mockito.ArgumentCaptor;

public class MockitoStringParameterTest {

    interface MyService {
        void someMethod(Integer number, Integer anotherNumber);
        void someOther(Integer number, String someString);
    }

    @Test
    public void testStringParameterPrinting() {
        // Setup mock
        MyService mockService = mock(MyService.class);

        // Call methods with parameters
        mockService.someMethod(1, 2);
        mockService.someOther(1, "2");

        // Create ArgumentCaptor to verify parameters
        ArgumentCaptor<Integer> intCaptor = ArgumentCaptor.forClass(Integer.class);
        ArgumentCaptor<String> stringCaptor = ArgumentCaptor.forClass(String.class);

        // Verify and capture interactions
        verify(mockService).someMethod(intCaptor.capture(), intCaptor.capture());
        verify(mockService).someOther(intCaptor.capture(), stringCaptor.capture());

        // Check captured values
        assertEquals(Integer.valueOf(1), intCaptor.getAllValues().get(0));
        assertEquals(Integer.valueOf(2), intCaptor.getAllValues().get(1));
        assertEquals(Integer.valueOf(1), intCaptor.getAllValues().get(2));
        assertEquals("2", stringCaptor.getValue());

        // Simulate matcher failure
        try {
            verify(mockService).someOther(1, "(String) 2");
        } catch (Throwable e) {
            System.out.println("Simulating matcher failure:");
            e.printStackTrace(System.out);
        }
    }
}
