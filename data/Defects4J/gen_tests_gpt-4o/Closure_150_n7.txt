
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

public class TypeCheckerTest {
    
    public static void main(String[] args) {
        Compiler compiler = new Compiler();

        // Set verbose warning level and enable JSDoc parameter checking
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES, com.google.javascript.jscomp.CheckLevel.WARNING);

        // Code snippet to be tested
        String codeSnippet = 
            "var ns = {};\n" +
            "(function() {\n" +
            "   /** @param {string=} b */\n" +
            "   ns.a = function(b) {}\n" +
            "})();\n" +
            "\n" +
            "function d() {\n" +
            "   ns.a();\n" +
            "   ns.a(123);\n" +
            "}\n";

        SourceFile input = SourceFile.fromCode("test.js", codeSnippet);

        // Compile and check for warnings
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Output the warnings generated by the compilation
        if (result.warnings.length > 0) {
            System.out.println("Warnings detected:");
            for (com.google.javascript.jscomp.JSError warning : result.warnings) {
                System.out.println(warning.toString());
            }
        } else {
            System.out.println("No warnings detected.");
        }
    }
}
