public void testCMAESOptimizerResolutionNearBounds() {
    CMAESOptimizer optimizer = new CMAESOptimizer(10000, 0.0, true, 0, 0, RandomSource.create(RandomSource.MERSENNE_TWISTER), false, new SimpleValueChecker(1e-9, 1e-9));

    MultivariateFunction function = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return point[0] * point[0];
        }
    };

    SimpleBounds bounds = new SimpleBounds(new double[]{0.0}, new double[]{1.0});

    PointValuePair resultNearLowerBound = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(function),
        GoalType.MINIMIZE,
        new InitialGuess(new double[]{0.1}),
        bounds
    );

    PointValuePair resultNearUpperBound = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(function),
        GoalType.MINIMIZE,
        new InitialGuess(new double[]{0.9}),
        bounds
    );

    double lowerResolution = Math.ulp(resultNearLowerBound.getPoint()[0]);
    double upperResolution = Math.ulp(resultNearUpperBound.getPoint()[0]);

    assertTrue(lowerResolution < upperResolution * 0.1, "Resolution near upper bound should be more coarse.");
}