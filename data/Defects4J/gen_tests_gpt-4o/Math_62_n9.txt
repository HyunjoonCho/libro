
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.exception.NumberIsTooLargeException;
import org.apache.commons.math3.exception.NoBracketingException;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;

import static org.junit.Assert.fail;

public class BrentOptimizerTest {

    @Test
    public void testMissingConvergenceChecker() {
        try {
            UnivariateFunction function = new UnivariateFunction() {
                public double value(double x) {
                    return (x - 2) * (x - 2);
                }
            };

            BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

            // Since no ConvergenceChecker is set, this should produce a NullPointerException
            UnivariatePointValuePair result = optimizer.optimize(
                new MaxEval(1000),
                new UnivariateObjectiveFunction(function),
                new SearchInterval(0, 4)
            );
            
            fail("Expected a NullPointerException due to missing ConvergenceChecker");
        } catch (NullPointerException e) {
            // Test passes because NullPointerException is expected due to missing ConvergenceChecker
        } catch (Exception e) {
            fail("Expected a NullPointerException, but got a different exception: " + e.getMessage());
        }
    }
}
