
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import org.junit.Assert;

public class ClosureCompilerVersionTest {

    @Test
    public void testClosureCompilerVersionOutput() {
        try {
            ProcessBuilder processBuilder = new ProcessBuilder(
                    "java", "-jar", "compiler.jar", "--version"
            );
            processBuilder.directory(new File("/path/to/compiler/directory"));

            Process process = processBuilder.start();
            InputStream inputStream = process.getInputStream();
            InputStream errorStream = process.getErrorStream();

            String output = readStream(inputStream);
            String errorOutput = readStream(errorStream);

            // Check that error output is empty because --version should not require an operand.
            Assert.assertTrue("Error output should be empty", errorOutput.isEmpty());

            // Check that the correct version information is present
            // You would need to replace the expected string with your actual expected version string.
            String expectedOutput = "Closure Compiler (http://code.google.com/closure/compiler)\n" +
                    "Version: 698\n" +
                    "Built on: 2011/01/17 12:16";

            Assert.assertTrue("Output does not match expected version info", output.contains(expectedOutput));
        } catch (IOException e) {
            e.printStackTrace();
            Assert.fail("IOException occurred during test execution.");
        }
    }

    private String readStream(InputStream stream) throws IOException {
        ByteArrayOutputStream buffer = new ByteArrayOutputStream();
        int nRead;
        byte[] data = new byte[1024];
        while ((nRead = stream.read(data, 0, data.length)) != -1) {
            buffer.write(data, 0, nRead);
        }
        buffer.flush();
        return new String(buffer.toByteArray(), StandardCharsets.UTF_8);
    }
}
