
import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

interface UserAccount {
    List<String> getEmails();
    void addEmail(String email);
}

interface AsyncCallback<T> {
    void onSuccess(T result);
    void onFailure(Throwable caught);
}

interface AccountService {
    void getAccount(String id, AsyncCallback<UserAccount> callback);
}

interface RpcContext {}

interface AccountRpcService {
    FutureAccount getAccount(RpcContext context, String id);
}

class FutureAccount {
    private String id;

    public FutureAccount(String id) {
        this.id = id;
    }

    public String getId() {
        return id;
    }
}

public class MockitoExampleTests {

    @Test
    public void testUserAccountSpy() {
        // Spy an abstract class to manage internal data consistency
        UserAccount userAccount = mock(UserAccount.class);
        List<String> emails = new ArrayList<>();

        doAnswer(invocation -> {
            String email = invocation.getArgument(0);
            emails.add(email);
            return null;
        }).when(userAccount).addEmail(any(String.class));

        when(userAccount.getEmails()).thenAnswer(new Answer<List<String>>() {
            @Override
            public List<String> answer(InvocationOnMock invocation) {
                return new ArrayList<>(emails);
            }
        });

        userAccount.addEmail("test@example.com");
        assertEquals(1, userAccount.getEmails().size());
        assertEquals("test@example.com", userAccount.getEmails().get(0));
    }

    @Test
    public void testAccountServiceCallback() {
        // Demonstrate stubbing with a callback-style API
        AccountService accountService = mock(AccountService.class);

        doAnswer(invocation -> {
            AsyncCallback<UserAccount> callback = invocation.getArgument(1);
            UserAccount userAccount = mock(UserAccount.class);
            callback.onSuccess(userAccount);
            return null;
        }).when(accountService).getAccount(eq("123"), any(AsyncCallback.class));

        accountService.getAccount("123", new AsyncCallback<UserAccount>() {
            @Override
            public void onSuccess(UserAccount result) {
                // Handle successful callback
                assertEquals(0, result.getEmails().size());
            }

            @Override
            public void onFailure(Throwable caught) {
                // Handle failure
            }
        });
    }

    @Test
    public void testAccountRpcServiceStub() {
        // Demonstrate stubbing when there's an uninteresting parameter
        AccountRpcService accountRpcService = mock(AccountRpcService.class);

        when(accountRpcService.getAccount(any(RpcContext.class), eq("123")))
            .thenReturn(new FutureAccount("123"));

        FutureAccount futureAccount = accountRpcService.getAccount(mock(RpcContext.class), "123");
        assertEquals("123", futureAccount.getId());
    }
}
