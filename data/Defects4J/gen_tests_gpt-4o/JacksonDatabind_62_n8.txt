
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Before;
import org.junit.Test;

import java.util.Collections;
import java.util.Set;

import static org.assertj.core.api.Assertions.assertThat;

// Define a Mixin for UnmodifiableSet
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)
public abstract class UnmodifiableSetMixin {
    @JsonCreator
    public UnmodifiableSetMixin(Set<?> s) {}
}

// Test class
public class UnmodifiableSetMixinTest {
    // JSON representing an empty UnmodifiableSet
    static final String EXPECTED_JSON = "[\"java.util.Collections$UnmodifiableSet\",[]]";

    ObjectMapper mapper;

    @Before
    public void setup() {
        // Set up ObjectMapper
        mapper = new ObjectMapper();
        // Enable default typing for non-final classes
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
        // Add the Mixin for UnmodifiableSet class
        mapper.addMixIn(Collections.unmodifiableSet(Collections.<String>emptySet()).getClass(), UnmodifiableSetMixin.class);
    }

    @Test
    @SuppressWarnings("unchecked")
    public void read() throws Exception {
        // Deserialize the JSON into a Set of Strings
        Set<String> foo = mapper.readValue(EXPECTED_JSON, Set.class);
        // Assert that the deserialized set is empty
        assertThat(foo).isEmpty();
    }
}
