public void testAmdModuleCompilation() throws IOException {
    File tempDir = Files.createTempDirectory("testAmdModuleCompilation").toFile();
    File libDir = new File(tempDir, "lib");
    libDir.mkdirs();

    File fooFile = new File(libDir, "Foo.js");
    try (PrintWriter out = new PrintWriter(fooFile)) {
        out.println("define([], function() { return 'Foo'; });");
    }

    File barFile = new File(tempDir, "Bar.js");
    try (PrintWriter out = new PrintWriter(barFile)) {
        out.println("define(['lib/Foo'], function(Foo) { console.log(Foo); });");
    }

    ProcessBuilder pb = new ProcessBuilder(
        "java", "-jar", "compiler.jar",
        "--transform_amd_modules", "--process_common_js_modules",
        "--common_js_entry_module=Bar.js", "--compilation_level=ADVANCED_OPTIMIZATIONS",
        "--js_output_file=out.js", "--js=Bar.js", "--js=lib/Foo.js"
    ).directory(tempDir).redirectErrorStream(true);
    Process process = pb.start();

    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
        String line;
        boolean errorFound = false;
        while ((line = reader.readLine()) != null) {
            if (line.contains("ERROR - required entry point \"module$lib$Foo\" never provided")) {
                errorFound = true;
                break;
            }
        }
        assertTrue("Expected error not found", errorFound);
    } finally {
        process.destroy();
        deleteDirectory(tempDir);
    }
}

private void deleteDirectory(File directory) {
    if (directory.isDirectory()) {
        for (File file : directory.listFiles()) {
            deleteDirectory(file);
        }
    }
    directory.delete();
}