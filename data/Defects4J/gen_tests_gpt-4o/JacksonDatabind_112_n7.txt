
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import java.util.Collections;
import java.util.List;

import static org.junit.Assert.*;

public class CustomCollectionDeserializationTest {

    // Custom collection class
    public static class CustomStringList {
        private final List<String> strings;

        public CustomStringList(List<String> strings) {
            this.strings = Collections.unmodifiableList(strings);
        }

        public List<String> getStrings() {
            return strings;
        }
    }

    // Class containing the custom collection
    public static class Container {
        @JsonDeserialize(as = CustomStringList.class)
        private CustomStringList customList;

        public CustomStringList getCustomList() {
            return customList;
        }

        public void setCustomList(CustomStringList customList) {
            this.customList = customList;
        }
    }

    @Test
    public void testCustomCollectionDeserialization() {
        String json = "{\"customList\":[\"a\",\"b\",\"c\"]}";

        ObjectMapper mapper = new ObjectMapper();
        try {
            Container container = mapper.readValue(json, Container.class);
            // If the test passes unexpectedly, fail it
            fail("Expected deserialization to fail due to StringCollectionDeserializer issue.");
        } catch (JsonProcessingException e) {
            // Expected failure due to lack of default constructor
            assertTrue(e.getMessage().contains("Cannot construct instance"));
        }
    }
}
