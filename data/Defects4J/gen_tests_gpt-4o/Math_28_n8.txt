public void testSimplexSolverUnboundedSolutionException() {
    int ENTITIES_COUNT = 15;

    double[] objectiveCoefficients = new double[ENTITIES_COUNT + 1];
    objectiveCoefficients[0] = 1; // Coefficient for 't'
    LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(objectiveCoefficients, 0);

    Collection<LinearConstraint> constraints = new ArrayList<>();
    double[][] Q = generateRandomMatrix(ENTITIES_COUNT, ENTITIES_COUNT);
    double[][] X = generateRandomMatrix(ENTITIES_COUNT, ENTITIES_COUNT);
    double[] q = generateRandomVector(ENTITIES_COUNT);
    double[] x = generateRandomVector(ENTITIES_COUNT);

    for (int r = 0; r < ENTITIES_COUNT; r++) {
        double[] qConstraint = new double[ENTITIES_COUNT + 1];
        qConstraint[0] = 0; // No coefficient for 't'
        for (int c = 0; c < ENTITIES_COUNT; c++) {
            qConstraint[c + 1] = Q[r][c];
        }
        constraints.add(new LinearConstraint(qConstraint, Relationship.GEQ, q[r]));

        double[] xConstraint = new double[ENTITIES_COUNT + 1];
        xConstraint[0] = x[r];
        for (int c = 0; c < ENTITIES_COUNT; c++) {
            xConstraint[c + 1] = -X[r][c];
        }
        constraints.add(new LinearConstraint(xConstraint, Relationship.GEQ, 0));
    }

    for (int r = 0; r < ENTITIES_COUNT; r++) {
        double[] nonNegativeConstraint = new double[ENTITIES_COUNT + 1];
        nonNegativeConstraint[r + 1] = 1; // L >= 0
        constraints.add(new LinearConstraint(nonNegativeConstraint, Relationship.GEQ, 0));
    }

    SimplexSolver solver = new SimplexSolver();

    try {
        PointValuePair solution = solver.optimize(new LinearObjectiveFunction(objectiveCoefficients, 0),
                                                  constraints,
                                                  GoalType.MINIMIZE,
                                                  false);
        Assert.fail("Expected UnboundedSolutionException");
    } catch (UnboundedSolutionException e) {
        // Expected behavior
    }
}

private double[][] generateRandomMatrix(int rows, int columns) {
    double[][] matrix = new double[rows][columns];
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            matrix[i][j] = Math.random();
        }
    }
    return matrix;
}

private double[] generateRandomVector(int size) {
    double[] vector = new double[size];
    for (int i = 0; i < size; i++) {
        vector[i] = Math.random();
    }
    return vector;
}