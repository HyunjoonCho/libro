
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.UnboundedSolutionException;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;
import static org.junit.Assert.fail;

import java.util.ArrayList;
import java.util.List;

public class SimplexSolverTest {

    private static final int ENTITIES_COUNT = 15;

    @Test
    public void testUnboundedSolutionException() {
        // Objective Function: minimize t -> min(1*t + 0*L)
        double[] objectiveCoefficients = new double[1 + ENTITIES_COUNT];
        objectiveCoefficients[0] = 1.0;  // coefficient for t

        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(objectiveCoefficients, 0);

        List<LinearConstraint> constraints = new ArrayList<>();

        // Constraint: -q(r) + QL >= 0
        double[] constraint1 = new double[1 + ENTITIES_COUNT];
        for (int r = 0; r < ENTITIES_COUNT; r++) {
            constraint1[1 + r] = 1.0;  // Q coefficients
        }
        constraints.add(new LinearConstraint(constraint1, Relationship.GEQ, Math.random())); // using random q(r)

        // Constraint: x(r)t - XL >= 0
        for (int r = 0; r < ENTITIES_COUNT; r++) {
            double[] constraint2 = new double[1 + ENTITIES_COUNT];
            constraint2[0] = Math.random();  // random x(r) for t coefficient
            constraint2[1 + r] = -1.0;  // XL coefficient
            constraints.add(new LinearConstraint(constraint2, Relationship.GEQ, 0));
        }

        // Non-negative constraint for L
        SimplexSolver solver = new SimplexSolver();

        try {
            PointValuePair solution = solver.optimize(objectiveFunction, constraints, new NonNegativeConstraint(true));
            // No exception means unexpected behavior for this test case; therefore, failing.
            fail("Expected UnboundedSolutionException but received solution: " + solution);
        } catch (UnboundedSolutionException e) {
            // Expected exception
            System.out.println("Encountered expected UnboundedSolutionException with " + ENTITIES_COUNT + " entities.");
        }
    }
}
