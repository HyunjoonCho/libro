
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.utils.IOUtils;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Enumeration;

import static org.junit.Assert.assertTrue;

public class ZipArchiveEntryTest {

    @Test
    public void testZipArchiveEntryEquality() throws IOException {
        // Create a temporary zip file for testing
        File zipFile = createSampleZipFile();

        // Read entry from ZipArchiveInputStream
        ZipArchiveEntry entryFromStream = null;
        try (FileInputStream fis = new FileInputStream(zipFile);
             ZipArchiveInputStream zis = new ZipArchiveInputStream(fis)) {
            entryFromStream = zis.getNextZipEntry();
        }

        // Read the entry from ZipFile
        ZipArchiveEntry entryFromZipFile = null;
        try (ZipFile zf = new ZipFile(zipFile)) {
            Enumeration<ZipArchiveEntry> entries = zf.getEntries();
            if (entries.hasMoreElements()) {
                entryFromZipFile = entries.nextElement();
            }
        }

        // Verify that the entries are not equal due to the comment difference
        boolean entriesNotEqual = entryFromStream != null && entryFromZipFile != null
                && !entryFromStream.equals(entryFromZipFile);

        // Check specific difference
        boolean commentDifference = entryFromStream.getComment() == null
                && entryFromZipFile.getComment().equals("");

        assertTrue("Entries should not be equal due to comment difference", entriesNotEqual && commentDifference);
    }

    private File createSampleZipFile() throws IOException {
        // Create a temporary zip file with a single entry
        File tempFile = Files.createTempFile("testZip", ".zip").toFile();
        tempFile.deleteOnExit();

        try (java.util.zip.ZipOutputStream zos = new java.util.zip.ZipOutputStream(Files.newOutputStream(tempFile.toPath()))) {
            java.util.zip.ZipEntry entry = new java.util.zip.ZipEntry("test.txt");
            zos.putNextEntry(entry);
            zos.write("sample content".getBytes());
            zos.closeEntry();
        }

        return tempFile;
    }
}
