
import static org.junit.Assert.fail;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testCompileJavaScriptWithForInLoop() {
        // Set up a simple JavaScript code snippet that causes an error
        String code = "function keys(obj) {\n" +
                      "  var a = [], i = 0;\n" +
                      "  for (a[i++] in obj);\n" +
                      "  return a;\n" +
                      "}";

        // Create a compiler instance
        Compiler compiler = new Compiler();

        // Set up compiler options
        CompilerOptions options = new CompilerOptions();
        
        // Compile the JavaScript code
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", code);

        Result result = compiler.compile(extern, input, options);

        // Check if there are errors
        if (result.errors.length > 0) {
            for (JSError error : result.errors) {
                System.out.println(error.toString());
            }
            fail("Compilation failed with errors.");
        }
    }
}
