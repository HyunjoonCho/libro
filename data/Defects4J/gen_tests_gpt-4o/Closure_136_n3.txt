
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class SuperRenameTest {

    @Test
    public void testSuperRenamePreserved() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Use advanced optimizations
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Source JS that uses $super
        String jsSource =
                "var MyClass = Class.create({" +
                "  initialize: function($super) {" +
                "    $super();" +
                "  }" +
                "});";

        // Create an empty externs file to satisfy the compiler's input requirements
        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");

        // Create JS source file
        JSSourceFile input = JSSourceFile.fromCode("input.js", jsSource);

        // Compile the source
        Result result = compiler.compile(extern, input, options);

        // Check if compilation was successful
        assertTrue(result.success);

        // Retrieve the compiled output
        String compiledCode = compiler.toSource();

        // Check if $super is preserved in the compiled output
        assertTrue("The compiled code should retain $super.", compiledCode.contains("$super"));
    }
}
