
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

// Base class with a JSON property
class Base implements IFace<Sub> {
    @JsonProperty
    int base = 1;
}

// Sub class with a JSON property
class Sub extends Base {
    @JsonProperty
    int sub = 2;
}

// A generic interface
interface IFace<T> {}

public class TypeFactoryTest {

    @Test
    public void testSerializationOfSubClassIncludesBaseProperties() throws JsonProcessingException {
        // Construct the type of Base using TypeFactory
        TypeFactory typeFactory = TypeFactory.defaultInstance();
        typeFactory.constructType(Base.class);

        // Create an ObjectMapper instance for serialization
        ObjectMapper objectMapper = new ObjectMapper();

        // Create an instance of Sub
        Sub subInstance = new Sub();

        // Serialize Sub instance to JSON
        String jsonResult = objectMapper.writeValueAsString(subInstance);

        // Assert that the JSON string includes properties from both Base and Sub
        assertEquals("{\"base\":1,\"sub\":2}", jsonResult);
    }
}
