
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.IOException;

public class NaNBigDecimalTest {

    @Test
    public void testParseNaNAsBigDecimal() {
        String json = "[NaN]"; // JSON content with NaN value

        JsonFactory factory = new JsonFactory();
        ObjectMapper mapper = new ObjectMapper(factory);

        // Enable the ALLOW_NON_NUMERIC_NUMBERS feature
        factory.enable(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS);

        try {
            JsonParser parser = factory.createParser(json);

            assertTrue(parser.nextToken() == JsonToken.START_ARRAY); // Read and verify the start of the array
            assertTrue(parser.nextToken() == JsonToken.VALUE_NUMBER_FLOAT); // Read the NaN value

            // This should throw a NumberFormatException but is throwing NPE
            try {
                parser.getDecimalValue();
                fail("Expected NumberFormatException due to NaN cannot be turned into BigDecimal");
            } catch (NumberFormatException e) {
                // Expected behavior, pass the test
            } catch (NullPointerException e) {
                fail("Caught NullPointerException instead of NumberFormatException");
            }

        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
    }
}
