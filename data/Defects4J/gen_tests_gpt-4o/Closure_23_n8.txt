
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.*;

public class SideEffectTest {

    @Test
    public void testArrayAccessWithSideEffects() {
        Compiler compiler = new Compiler();

        // Set up compiler options for advanced optimization
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // The input code with expected side effect
        String code = "console.log([console.log('hello, '), 'world!'][1]);";
        
        // Compile the code
        compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("input.js", code), options);

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Check to make sure the side effect is preserved
        // The original or equivalent logic should appear in the compiled output
        boolean isSideEffectPreserved = compiledCode.contains("console.log(") && compiledCode.contains("'hello, '");

        assertTrue("The side effects should be preserved in the optimized output.", isSideEffectPreserved);
    }
}
