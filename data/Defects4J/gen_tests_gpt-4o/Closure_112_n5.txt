
import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class TemplateTypeInferenceTest {

    /**
     * @constructor
     * @template CLASS
     */
    public static class Class<CLASS> {
        /**
         * @param a a function from CLASS to CLASS
         * @template T
         * @return a string
         */
        public <T> String foo(Function<CLASS, CLASS> a) {
            return "string";
        }
    }

    @FunctionalInterface
    public interface Function<A, B> {
        B apply(A a);
    }

    @Test
    public void testMethodTemplateInference() {
        Class<Integer> clazz = new Class<>();
        
        Function<Integer, Integer> function = (Integer a) -> a + 1;
        
        // The type CLASS is never really instantiated or inferred, but foo() using the template T
        // causes the Java type checker or potential static analysis to attempt inference.
        // Without the template on the method, this should compile and pass the test.
        String result = clazz.foo(function);
        
        assertEquals("string", result);
    }
}
