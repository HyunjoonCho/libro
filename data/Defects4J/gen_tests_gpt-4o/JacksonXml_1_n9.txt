
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import org.junit.Test;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class DeserializationTest {

    // Definition POJO
    public static class Definition {
        public List<Record> records;

        public Definition() {
        }

        public List<Record> getRecords() {
            return records;
        }

        public void setRecords(List<Record> records) {
            this.records = records;
        }
    }

    // Record POJO
    public static class Record {
        public List<Field> fields;

        public Record() {
        }

        public List<Field> getFields() {
            return fields;
        }

        public void setFields(List<Field> fields) {
            this.fields = fields;
        }
    }

    // Field POJO
    public static class Field {
        public String name;

        public Field() {
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }

    @Test
    public void testDeserializationOfEmptyNestedList() throws Exception {
        String json = "{ \"records\": [ { \"fields\": [] } ] }";

        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);

        Definition definition = mapper.readValue(json, Definition.class);

        // Check that the outer list contains one Record object
        assertEquals(1, definition.getRecords().size());

        // Check that the inner list (fields) is empty
        assertEquals(0, definition.getRecords().get(0).getFields().size());
    }
}
