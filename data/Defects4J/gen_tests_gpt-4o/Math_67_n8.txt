
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.apache.commons.math3.optim.univariate.*;

public class MultiStartUnivariateRealOptimizerTest {

    @Test
    public void testGetResultAndGetFunctionValue() {
        // Create single instance of an optimizer (e.g., BrentOptimizer)
        UnivariateOptimizer singleOptimizer = new BrentOptimizer(1e-10, 1e-14);

        // Set up multi-start optimizer
        int starts = 5;
        MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(
            singleOptimizer, starts, new UniformRandomGenerator());

        // Define the function to optimize (e.g., a simple quadratic function)
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                return -x * x + 4 * x;  // Maximum at x=2 for y=4
            }
        };

        // Optimize the function over an interval
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(100),
            new UnivariateObjectiveFunction(function),
            GoalType.MAXIMIZE,
            new SearchInterval(0, 4)
        );

        // Fetch results
        double bestX = result.getPoint();
        double bestY = result.getValue();

        // Assert the best result and value are returned
        assertEquals(bestX, optimizer.getResult(), 1e-10);
        assertEquals(bestY, optimizer.getFunctionValue(), 1e-10);
    }
}
