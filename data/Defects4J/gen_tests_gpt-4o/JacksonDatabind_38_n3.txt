
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.util.Map;

import static org.junit.Assert.assertEquals;

public class SimpleTypeTest {

    static class MyBean {
        public String name;
        public int age;
    }

    @Test
    public void testSimpleTypeConstructIssue() {
        ObjectMapper mapper = new ObjectMapper();
        
        // Create SimpleType using construct(Class)
        SimpleType simpleType = SimpleType.construct(MyBean.class);
        
        // Manually construct the JavaType, simulate legacy usage
        String json = "{\"name\":\"John\", \"age\":30}";
        
        try {
            // Attempt to deserialize using the constructed SimpleType
            MyBean myBean = (MyBean) mapper.readValue(json, simpleType);
            
            // Verify deserialization
            assertEquals("John", myBean.name);
            assertEquals(30, myBean.age);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Deserialization failed due to improper type resolution");
        }
    }
}
