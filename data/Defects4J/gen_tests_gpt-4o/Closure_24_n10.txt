
import static org.junit.Assert.fail;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

public class GoogScopeTest {

    @Test
    public void testGoogScopeWithFunctionExpression() {
        String code = 
            "goog.scope(function() {" +
            "  var x = function(){};" +
            "});";
        
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        Result result = compiler.compile(
            SourceFile.fromCode("externs.js", ""), // Placeholder for externs
            SourceFile.fromCode("test.js", code),
            options);
        
        for (JSError error : result.errors) {
            if (error.description.contains("goog.scope")) {
                // We expect an error in this case, so no action needed
                return;
            }
        }
        fail("Expected a compilation error due to improper use of goog.scope, but none was found.");
    }


    @Test
    public void testGoogScopeWithFunctionDeclaration() {
        String code = 
            "goog.scope(function() {" +
            "  function x() {}" +
            "});";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        Result result = compiler.compile(
            SourceFile.fromCode("externs.js", ""), // Placeholder for externs
            SourceFile.fromCode("test.js", code),
            options);

        for (JSError error : result.errors) {
            if (error.description.contains("goog.scope")) {
                // We expect an error in this case, so no action needed
                return;
            }
        }
        fail("Expected a compilation error due to improper use of goog.scope, but none was found.");
    }
}
