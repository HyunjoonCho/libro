
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.MissingOptionException;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class MissingOptionExceptionTest {

    @Test
    public void testMissingOptionExceptionMessage() {
        // Define options
        Options options = new Options();
        options.addOption(Option.builder("format")
                .required(true)
                .desc("Format option")
                .build());
        options.addOption(Option.builder("source")
                .required(true)
                .desc("Source option")
                .build());
        options.addOption(Option.builder("properties")
                .required(true)
                .desc("Properties option")
                .build());

        // Empty arguments to simulate missing required options
        String[] args = {};

        CommandLineParser parser = new DefaultParser();
        try {
            // This should throw a MissingOptionException
            CommandLine cmd = parser.parse(options, args);
            fail("Expected MissingOptionException to be thrown");
        } catch (MissingOptionException e) {
            // Check the error message
            String expectedMessage = "Missing required options: -format -source -properties";
            assertEquals(expectedMessage, e.getMessage());
        } catch (Exception e) {
            fail("Unexpected exception: " + e);
        }
    }
}
