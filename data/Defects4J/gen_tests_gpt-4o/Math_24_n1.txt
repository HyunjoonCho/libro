public void testBrentOptimizerBestPoint() {
    UnivariateFunction function = new QuadraticFunction(-1, 5, -3);
    BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
    UnivariatePointValuePair result = optimizer.optimize(
        new MaxEval(1000),
        new UnivariateObjectiveFunction(function),
        GoalType.MAXIMIZE,
        new SearchInterval(-10, 10)
    );

    double expectedBestValue = function.value(result.getPoint());
    UnivariatePointValuePair actualBestResult = new UnivariatePointValuePair(result.getPoint(), expectedBestValue);

    assertEquals(actualBestResult.getValue(), result.getValue(), 1e-7);
    assertEquals(actualBestResult.getPoint(), result.getPoint(), 1e-7);
}

class QuadraticFunction implements UnivariateFunction {
    private final double a, b, c;

    public QuadraticFunction(double a, double b, double c) {
        this.a = a;
        this.b = b;
        this.c = c;
    }

    @Override
    public double value(double x) {
        return a * x * x + b * x + c;
    }
}