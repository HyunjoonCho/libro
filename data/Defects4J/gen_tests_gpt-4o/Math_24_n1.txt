
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.univariate.BracketFinder;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.util.Precision;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerReportsBestPoint() {
        // Define a simple unimodal function, e.g., f(x) = (x-2)^2, with a minimum at x = 2
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.pow(x - 2, 2);
            }
        };

        // Set up the optimizer
        UnivariateOptimizer optimizer = new BrentOptimizer(Precision.EPSILON, Precision.SAFE_MIN);

        // Define the search interval
        double min = 0.0;
        double max = 4.0;
        double startValue = 3.0;

        // Perform the optimization
        UnivariatePointValuePair result = optimizer.optimize(
                new UnivariateObjectiveFunction(function),
                new SearchInterval(min, max, startValue),
                org.apache.commons.math3.optim.MaxEval.unlimited(),
                org.apache.commons.math3.optim.GoalType.MINIMIZE
        );

        // Extract the optimum point
        double optimumX = result.getPoint();
        double optimumValue = result.getValue();

        // Verify if the returned point is indeed the minimum
        assertTrue(optimumX >= min && optimumX <= max); // Check if the point is in the interval
        assertTrue(Precision.equals(optimumValue, function.value(optimumX), 1e-8)); // Ensure value matches
        assertEquals(2.0, optimumX, 1e-6); // The minimum should be close to x = 2
    }
}
