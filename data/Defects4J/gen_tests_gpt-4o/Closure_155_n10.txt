script
public class D3CallTest {

    @Test
    public void testOverzealousArgumentsOptimization() {
        // Define a mock callback function that captures the arguments.
        CaptureArgumentsCallback mockCallback = new CaptureArgumentsCallback();

        // Create a d3_call function similar to the one in the bug report.
        Function d3_call = (callback) -> {
            Function f = callback;
            arguments[0] = this;
            f.apply(this, arguments);
            return this;
        };

        // Call the function with a predefined 'this' context using a mock callback
        Object thisContext = new Object();
        d3_call.apply(thisContext, mockCallback);

        // Assert that the behavior is correct based on expected functionality
        // Here, expect that the original arguments are maintained, proving no optimization interference
        assertEquals(thisContext, mockCallback.getArgument(0)); // Ensuring the first argument remains unchanged.

    }

    class CaptureArgumentsCallback extends Function {
        private Object[] capturedArguments;

        @Override
        public void apply(Object thisContext, Object... args) {
            // Capture the arguments to later verify changes
            capturedArguments = args;
        }

        public Object getArgument(int index) {
            return capturedArguments[index];
        }
    }
}
