
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.junit.Assert.assertTrue;

public class TarArchiveOutputStreamTest {

    @Test
    public void testTarArchiveOutputStreamBytesWritten() throws Exception {
        // Create a temporary input file to be added to the tar archive
        File sourceFile = File.createTempFile("testFile", ".txt");
        Files.write(Paths.get(sourceFile.getAbsolutePath()), "This is a test file content!".getBytes());

        // Create a temporary output tar file
        File outputFile = File.createTempFile("testArchive", ".tar");

        FileOutputStream myOutputStream = new FileOutputStream(outputFile);
        ArchiveOutputStream sTarOut = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR, myOutputStream);

        TarArchiveEntry sEntry = new TarArchiveEntry(sourceFile);
        sEntry.setSize(sourceFile.length());

        sTarOut.putArchiveEntry(sEntry);
        
        FileInputStream sInput = new FileInputStream(sourceFile);
        byte[] cpRead = new byte[8192];
        
        int iRead;
        while ((iRead = sInput.read(cpRead)) > 0) {
            sTarOut.write(cpRead, 0, iRead);
        }
        
        // Check bytes written before closing the output stream
        long bytesWrittenBeforeClose = ((TarArchiveOutputStream) sTarOut).getBytesWritten();
        assertTrue("Bytes written should not be zero before closing.", bytesWrittenBeforeClose > 0);
        
        sInput.close();
        sTarOut.closeArchiveEntry();
        sTarOut.close();

        // Check bytes written after closing the output stream
        long bytesWrittenAfterClose = ((TarArchiveOutputStream) sTarOut).getBytesWritten();
        assertTrue("Bytes written should not be zero after closing.", bytesWrittenAfterClose > 0);
        
        // Clean up temporary files
        sourceFile.delete();
        outputFile.delete();
    }
}
