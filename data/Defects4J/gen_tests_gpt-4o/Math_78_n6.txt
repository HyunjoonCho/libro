public void testODEIntegrationCloseEvents() {
    double[] yStart = { 0.0 };
    double tStart = 67.5;
    double tEnd = 153.0;

    FirstOrderIntegrator integrator = new DormandPrince54Integrator(1.0e-8, 100.0, 1.0e-3, 1.0e-3);
    TestSwitchingFunction switchingFunction = new TestSwitchingFunction();
    
    integrator.addEventHandler(switchingFunction, 1.0, 1.0e-8, 100);

    integrator.integrate(new TestEquation(), tStart, yStart, tEnd, new double[yStart.length]);

    List<Double> events = switchingFunction.getEvents();
    
    assertTrue("First event not detected or incorrectly located.", events.contains(90.0));
    assertTrue("Second event not detected or incorrectly located.", events.contains(135.0));
}

// Test implementation for FirstOrderDifferentialEquations
private static class TestEquation implements FirstOrderDifferentialEquations {
    public int getDimension() {
        return 1;
    }

    public void computeDerivatives(double t, double[] y, double[] yDot) {
        yDot[0] = 1.0;
    }
}

// Test implementation for EventHandler/SwitchingFunction
private static class TestSwitchingFunction implements EventHandler {
    private List<Double> events = new ArrayList<>();
    
    public double g(double t, double[] y) {
        if (Math.abs(t - 90.0) < 1e-8 || Math.abs(t - 135.0) < 1e-8) {
            return 0.0;
        }
        return t - 112.5;
    }

    public Action eventOccurred(double t, double[] y, boolean increasing) {
        events.add(t);
        return Action.STOP;
    }

    public void resetState(double t, double[] y) {}

    public List<Double> getEvents() {
        return events;
    }
}