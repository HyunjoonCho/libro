
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.Assert;
import org.junit.Test;

public class CompilerOutputTest {

    @Test
    public void testLastErrorOrWarningTruncation() {
        // Step 1: Create test.js content with errors
        String jsContent = "alert(foo);\nalert(bar);";

        // Step 2: Simulate the compilation and output capturing
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        System.setOut(new PrintStream(outputStream));

        // Simulating a hypothetical compile method that writes to stdout
        compile(jsContent);

        // Restore original System.out
        System.setOut(originalOut);

        // Step 3: Extract and verify the output
        String output = outputStream.toString();
        
        String expectedError1 = "test.js:1: ERROR - variable foo is undefined";
        String expectedError2 = "test.js:2: ERROR - variable bar is undefined";
        
        // Check the presence of both errors
        Assert.assertTrue(output.contains(expectedError1));
        Assert.assertTrue(output.contains(expectedError2));
        
        // Verify that the second error is not truncated
        Assert.assertTrue(output.contains("alert(bar);"));
        Assert.assertTrue(output.contains(" ^"));
    }

    private void compile(String jsContent) {
        // This method should simulate the compilation process
        // and write to the output just like the original compiler does.
        // Here we'll manually simulate the incomplete output for the test case.
        
        System.out.println("test.js:1: ERROR - variable foo is undefined");
        System.out.println("alert(foo);");
        System.out.println(" ^");
        System.out.println();
        System.out.println("test.js:2: ERROR - variable bar is undefined");
        // The bug is simulating a truncated output, mimic it by omitting the line and caret
        System.out.println("2 error(s), 0 warning(s)");
    }
}
