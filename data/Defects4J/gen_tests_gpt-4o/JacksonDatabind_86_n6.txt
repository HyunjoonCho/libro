
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class SerializationTest {

    @Test
    public void testMissingPropertiesFromBaseClass() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();

        // Create type instances to simulate ordering issues
        typeFactory.constructType(Base.class);
        typeFactory.constructType(Sub.class);

        // Serialize the Sub instance
        Sub sub = new Sub();
        String json = mapper.writeValueAsString(sub);

        // Assert that both fields are present in the JSON output
        assertTrue("Serialized JSON should contain 'sub': " + json, json.contains("\"sub\":2"));
        assertTrue("Serialized JSON should contain 'base': " + json, json.contains("\"base\":1"));
        
        // Deserialization check
        Sub deserializedSub = mapper.readValue(json, Sub.class);
        assertEquals(1, deserializedSub.base);
        assertEquals(2, deserializedSub.sub);
    }

    static class Base implements IFace<Sub> {
        @JsonProperty
        int base = 1;
    }

    static class Sub extends Base {
        @JsonProperty
        int sub = 2;
    }

    interface IFace<T> {}
}
