
import com.fasterxml.jackson.databind.util.StdDateFormat;
import org.junit.Test;

import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class LargeYearDateTest {

    @Test
    public void testLargeYearDateParsing() {
        StdDateFormat formatter = new StdDateFormat();
        
        // Date representing a large year (e.g., year 10000)
        Calendar calendar = new GregorianCalendar(10000, Calendar.JANUARY, 1);
        Date largeYearDate = calendar.getTime();
        
        try {
            // Attempt to format the date
            String formattedDate = formatter.format(largeYearDate);
            System.out.println("Formatted date: " + formattedDate);
            
            // Attempt to parse the formatted date back
            Date parsedDate = formatter.parse(formattedDate);
            System.out.println("Parsed date: " + parsedDate);
            
            // Validate that the parsed date matches the original large year date
            assertEquals("Parsed date should match the original date", largeYearDate, parsedDate);
            
        } catch (ParseException e) {
            // If there's an exception, fail the test
            fail("Failed to parse large year date: " + e.getMessage());
        } catch (IndexOutOfBoundsException e) {
            // Handle expected exception if this behavior is not supported
            System.out.println("Handled large year gracefully: " + e.getMessage());
        }
    }
}
