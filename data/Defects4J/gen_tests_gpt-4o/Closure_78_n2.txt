
import org.junit.Test;
import static org.junit.Assert.*;

public class JavaScriptEngineTest {

    @Test
    public void testDivisionByZero() {
        String code = "console.log(1 / 0);";  // JavaScript code to be evaluated
        String expectedOutput = "Infinity";   // Per ECMAScript specification this should be the output

        JavaScriptEngine engine = new JavaScriptEngine(); // Hypothetical JavaScript engine

        try {
            String result = engine.evaluate(code);
            assertEquals(expectedOutput, result);
        } catch (Exception e) {
            fail("Division by zero should not throw an error: " + e.getMessage());
        }
    }

    // Mockup class, assuming there's a class `JavaScriptEngine` used for evaluation in the real scenario
    private static class JavaScriptEngine {
        public String evaluate(String code) throws Exception {
            // Hypothetical method to evaluate JS code and return the result
            // If this method throws an error for division by zero, then we know the bug exists
            return "Infinity"; // Simulated correct behavior
        }
    }
}
