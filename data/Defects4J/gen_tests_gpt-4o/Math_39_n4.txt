
import static org.junit.Assert.*;
import org.apache.commons.math4.ode.ODEIntegrator;
import org.apache.commons.math4.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math4.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math4.ode.sampling.StepHandler;
import org.apache.commons.math4.ode.sampling.StepInterpolator;
import org.junit.Test;

public class DormandPrince853IntegratorTest {

    @Test
    public void testTooLargeFirstStep() {
        // Define a simple differential equation dy/dt = -y
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            public int getDimension() {
                return 1;
            }

            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = -y[0];
            }
        };

        // Initial conditions
        double[] y = new double[] { 1.0 };
        double t0 = 0.0;
        double tEnd = 1.0e-8; // Extremely short range

        // Create the Dormand-Prince 8(5,3) integrator with default settings
        ODEIntegrator integrator = new DormandPrince853Integrator(1.0e-10, 1.0, 1.0e-8, 1.0e-8);

        // Use a custom StepHandler to collect results
        integrator.addStepHandler(new StepHandler() {
            public void handleStep(StepInterpolator interpolator, boolean isLast) {
                double t = interpolator.getCurrentTime();
                double[] interpolatedY = interpolator.getInterpolatedState();
                // Check if the solver is stepping outside the integration range
                assertTrue("Solver stepped outside the range", t <= tEnd);
            }

            public void init(double t0, double[] y0, double t) {
                // No initialization needed for this test
            }
        });

        // Attempt to integrate
        integrator.integrate(ode, t0, y, tEnd, y);
        // If no assertion is violated, the test passes
    }
}
