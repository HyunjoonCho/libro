js
/**
 * @param {{prop1: string, prop2: (number|undefined)}} parry
 */
function callz(parry) {
  if (parry.prop2 && parry.prop2 < 5) {
    alert('alright!');
  }
  alert(parry.prop1);
}

// This should work fine since it matches the expected parameter properties
callz({prop1: 'hi'});

/**
 * @param {{prop1: string, prop2: (number|undefined)}} parry
 * @constructor
 */
function CallzConstructor(parry) {
  if (parry.prop2 && parry.prop2 < 5) {
    alert('alright!');
  }
  alert(parry.prop1);
}

// This would cause an error because the constructor requires both `prop1` and `prop2`
new CallzConstructor({prop1: 'hi'}); // Expected to fail due to missing 'prop2'
