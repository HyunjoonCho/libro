public void testAnonymousObjectTypeInference() {
    String[] compilerArgs = {
        "--compilation_level=ADVANCED_OPTIMIZATIONS",
        "--jscomp_error=accessControls",
        "--jscomp_error=checkTypes",
        "--jscomp_error=checkVars",
        "reverse.js"
    };
    
    // Original working case with function invocation
    try {
        File file = new File("reverse.js");
        FileWriter writer = new FileWriter(file);
        writer.write(
            "/**\n" +
            " * @param {{prop1: string, prop2: (number|undefined)}} parry\n" +
            " */\n" +
            "function callz(parry) {\n" +
            " if (parry.prop2 && parry.prop2 < 5) alert('alright!');\n" +
            " alert(parry.prop1);\n" +
            "}\n" +
            "\n" +
            "callz({prop1: 'hi'});\n"
        );
        writer.close();
        
        int exitCode = com.google.javascript.jscomp.Compiler.main(compilerArgs);
        assertEquals(0, exitCode);

    } catch (IOException e) {
        fail("Failed to write the file 'reverse.js': " + e.getMessage());
    } catch (Exception e) {
        fail("Compiler threw an exception when it should not: " + e.getMessage());
    }

    // Failing case with constructor invocation
    try {
        File file = new File("reverse.js");
        FileWriter writer = new FileWriter(file);
        writer.write(
            "/**\n" +
            " * @param {{prop1: string, prop2: (number|undefined)}} parry\n" +
            " * @constructor\n" +
            " */\n" +
            "function callz(parry) {\n" +
            " if (parry.prop2 && parry.prop2 < 5) alert('alright!');\n" +
            " alert(parry.prop1);\n" +
            "}\n" +
            "\n" +
            "new callz({prop1: 'hi'});\n"
        );
        writer.close();
        
        int exitCode = com.google.javascript.jscomp.Compiler.main(compilerArgs);
        assertNotEquals(0, exitCode); // Expecting a non-zero exit code due to the error

    } catch (IOException e) {
        fail("Failed to write the file 'reverse.js': " + e.getMessage());
    } catch (Exception e) {
        fail("Compiler did not throw an error when it should have: " + e.getMessage());
    }
}