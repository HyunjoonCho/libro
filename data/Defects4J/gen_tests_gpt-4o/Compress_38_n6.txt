
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertFalse;

public class TarArchiveEntryTest {

    @Test
    public void testPaxHeaderEntryNameEndingWithSlash() throws IOException {
        // Assume this byte array is the beginning of a TAR file including a PAX header entry with a trailing slash
        byte[] tarData = {
                // PAX header entry for a file name ending in "/" and type 'x'
                0, 0, 0, 0, 0, 0, 0, 111, 168, 99, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77,
                // Details of a TAR archive header start here (incomplete and simplified for illustration)
                '0', '0', '0', '0', 0, 0, 0, 0, 0, 0, 'x', '0', '0', '0', '0', 0, '/', 0, 0, 0, 0, 0, 0, 0, 0
                // Content following the header
                // In a real TAR file, this should include content, and the header should be properly formed
        };
        
        try (ByteArrayInputStream bais = new ByteArrayInputStream(tarData);
             TarArchiveInputStream tais = new TarArchiveInputStream(bais)) {

            TarArchiveEntry entry;
            
            while ((entry = tais.getNextTarEntry()) != null) {
                System.out.println("Entry name: " + entry.getName() + ", isPaxHeader: " + entry.isPaxHeader());
                
                // Check if the library incorrectly handles PAX headers as directories
                if (entry.isPaxHeader()) {
                    assertFalse("PAX header entry should not be treated as directory", entry.isDirectory());
                }
            }
        }
    }
}
