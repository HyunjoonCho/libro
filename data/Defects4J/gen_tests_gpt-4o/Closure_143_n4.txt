
import org.junit.Test;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerDefineTest {

    @Test
    public void testDefineDoesNotSupportStrings() {
        // The command to execute the Java compiler with the problematic --define flag
        String command = "java -jar compiler.jar --compilation_level ADVANCED_OPTIMIZATIONS " +
                         "--define='test.VERSION=1.0.0' --js_output_file test-min.js --js test.js";

        try {
            // Execute the command
            Process process = Runtime.getRuntime().exec(command);

            // Capture the error output
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            StringBuilder errorOutput = new StringBuilder();
            String line;
            while ((line = errorReader.readLine()) != null) {
                errorOutput.append(line).append("\n");
            }

            // Check if the output contains the expected error message
            String expectedError = "java.lang.RuntimeException: --define flag syntax invalid";
            assertTrue("Expected error message not found.", errorOutput.toString().contains(expectedError));

            // Ensure the process ends
            process.waitFor();

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            // Optionally fail the test if an exception occurs
            assertTrue("Exception occurred during test execution", false);
        }
    }
}
