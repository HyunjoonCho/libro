
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class CompilerShadowTest {

    @Test
    public void testArgumentsShadowing() {
        // Assuming we have a compiler setup to compile JavaScript code
        JavaScriptCompiler compiler = new JavaScriptCompiler();
        
        String inputJS = "function name() { var arguments = Array.prototype.slice.call(arguments, 0); }";
        
        String expectedOutputJS = "function name(){ var arguments=Array.prototype.slice.call(arguments,0); }";
        
        // This is where the actual compilation would happen
        String compiledOutput = compiler.compile(inputJS);
        
        // Check that the 'arguments' variable is not improperly shadowed in the compiled output
        assertEquals(expectedOutputJS, compiledOutput);
    }
}

class JavaScriptCompiler {
    public String compile(String inputJS) {
        // Simulate the compilation process
        // For effectively testing, you would have an actual compiler/transpiler handling this.
        // Here we assume our JavaScript compiler/transpiler
        return inputJS; // Dummy implementation for the test case
    }
}
