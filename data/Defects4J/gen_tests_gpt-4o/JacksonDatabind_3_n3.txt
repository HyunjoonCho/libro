
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;
import static org.junit.Assert.*;

public class NullDeserializationTest {

    @Test
    public void testNullDeserializationInStringArray() throws Exception {
        // Jackson ObjectMapper
        ObjectMapper objectMapper = new ObjectMapper();

        // Enable feature if it's disabled by default in the version being tested
        objectMapper.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, true);

        // JSON string containing a null element in an array
        String json = "[\"string\", null, \"anotherString\"]";

        // Deserialize JSON to String array
        String[] result = objectMapper.readValue(json, String[].class);

        // Expected array after deserialization
        String[] expected = {"string", null, "anotherString"};

        // Verify that the deserialized result matches the expected array
        assertArrayEquals("The deserialization didn't handle nulls correctly in String[]",
                expected, result);
    }
}
