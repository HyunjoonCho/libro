
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class ZipArchiveInputStreamTest {

    @Test
    public void testTruncatedZipFile() {
        // This is a truncated ZIP file data (as an example, create your own truncated data for an accurate test).
        byte[] truncatedZipData = new byte[]{
                0x50, 0x4B, 0x03, 0x04, // Local file header signature
                // Header continuation...
                0x14, 0x00, 0x02, 0x00, 0x08, 0x00,
                0x7B, 0x3C, 0x4A, 0x47, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                // Intentional truncation - not a complete file
        };

        ByteArrayInputStream truncatedInputStream = new ByteArrayInputStream(truncatedZipData);
        ZipArchiveInputStream zipInput = new ZipArchiveInputStream(truncatedInputStream);

        byte[] buffer = new byte[1024];
        try {
            while (true) {
                int bytesRead = zipInput.read(buffer);
                if (bytesRead == -1) {
                    break;
                }
                if (bytesRead == 0) {
                    fail("Expected IOException or -1 for truncated archive, got zero bytes read repeatedly.");
                }
            }
        } catch (IOException e) {
            // We expect an IOException because this is a truncated archive.
            assertTrue(e.getMessage().contains("Truncated ZIP file"));
        } finally {
            try {
                zipInput.close();
            } catch (IOException e) {
                // Ignored - closing stream
            }
        }
    }
}
