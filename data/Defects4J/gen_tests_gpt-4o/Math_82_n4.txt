
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.RealPointValuePair;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverCorrectness() {
        // Define the objective function: max: 7a + 3b
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{7, 3, 0, 0}, 0);

        // Define the constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.LEQ, 1));
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.LEQ, 1));
        constraints.add(new LinearConstraint(new double[]{3, 0, -5, 0}, Relationship.LEQ, 0));
        constraints.add(new LinearConstraint(new double[]{2, 0, 0, -5}, Relationship.LEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 2, -5, 0}, Relationship.LEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 3, 0, -5}, Relationship.LEQ, 0));
        constraints.add(new LinearConstraint(new double[]{3, 2, 0, 0}, Relationship.LEQ, 5));
        constraints.add(new LinearConstraint(new double[]{2, 3, 0, 0}, Relationship.LEQ, 5));

        // Create a SimplexSolver instance and solve the optimization problem
        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair result = solver.optimize(objectiveFunction, constraints, GoalType.MAXIMIZE, true);

        // Extract the resulting values for a and b, and the objective function value
        double a = result.getPoint()[0];
        double b = result.getPoint()[1];
        double optimalValue = result.getValue();

        // Assert that the results match the expected values
        assertEquals("Expected value for 'a' is incorrect", 1.0, a, 1e-6);
        assertEquals("Expected value for 'b' is incorrect", 1.0, b, 1e-6);
        assertEquals("Expected optimal value is incorrect", 10.0, optimalValue, 1e-6);
    }
}
