public void testPrivatePropertyRedeclaredOnSubclass() {
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.VISIBILITY, CheckLevel.ERROR);

    String parentClass =
        "/** @constructor */ function Foo() { /** @private */ this.x_ = 3; }";
    String subClass =
        "/** @constructor \n * @extends {Foo} */ function SubFoo() { /** @private */ this.x_ = 3; }";

    Compiler compiler = new Compiler();
    compiler.initOptions(options);
    Node root = compiler.parseInputs(Lists.newArrayList(SourceFile.fromCode("Foo.js", parentClass), 
                      SourceFile.fromCode("SubFoo.js", subClass)));

    assertNotNull(root);

    compiler.check();

    assertEquals(1, compiler.getWarnings().size());
    assertEquals(
        DiagnosticType.warning(ClosureRewriteClassProperties.VISIBILITY_PRIVATE)
        .key, 
        compiler.getWarnings().get(0).getType().key
    );
}