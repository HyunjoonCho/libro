
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;

public class PrivatePropertyRedeclarationTest {

    private Path fooFile;
    private Path subFooFile;
    private CommandLineRunner runner;

    @Before
    public void setUp() throws Exception {
        // Create temporary JS files to mimic the example
        fooFile = Files.createTempFile("Foo", ".js");
        String fooContent = "/** @constructor */ function Foo() { /** @private */ this.x_ = 3; }";
        Files.write(fooFile, fooContent.getBytes(StandardCharsets.UTF_8));

        subFooFile = Files.createTempFile("SubFoo", ".js");
        String subFooContent = "/** @constructor \n * @extends {Foo} */ function SubFoo() { /** @private */ this.x_ = 3; }";
        Files.write(subFooFile, subFooContent.getBytes(StandardCharsets.UTF_8));

        // Prepare CommandLineRunner with compiler configurations
        String[] args = {
                "--js", fooFile.toString(),
                "--js", subFooFile.toString(),
                "--jscomp_error=visibility"
        };
        runner = new CommandLineRunner(args);
    }

    @Test
    public void testPrivatePropertyRedeclaration() {
        // Run the compiler and expect visibility error
        int result = runner.run();

        // Check for compilation error due to visibility (expecting a non-zero exit code)
        Assert.assertNotEquals(0, result);
    }
}
