
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;
import org.junit.Test;
import static org.junit.Assert.fail;

public class RegulaFalsiSolverTest {

    @Test
    public void testRegulaFalsiSolverFailure() {
        final UnivariateRealFunction f = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateRealSolver solver = new RegulaFalsiSolver();
        try {
            // Attempt to find the root of the function in the interval [1, 10]
            // with a maximum of 100 evaluations
            double root = solver.solve(100, f, 1, 10);
            fail("Expected IllegalStateException due to maximal count exceeding evaluations, but got root: " + root);
        } catch (IllegalStateException e) {
            // Expected exception due to excessive evaluations
            System.out.println("Test passed with expected exception: " + e.getMessage());
        }
    }
}
