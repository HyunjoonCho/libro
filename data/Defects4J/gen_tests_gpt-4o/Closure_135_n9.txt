public void testInheritanceDetection() {
    String jsCode =
        "/**\n" +
        " * @constructor\n" +
        " */\n" +
        "function SuperClass() {}\n" +
        "\n" +
        "SuperClass.prototype.CustomMethod = function() {};\n" +
        "\n" +
        "/**\n" +
        " * @constructor\n" +
        " * @extends {SuperClass}\n" +
        " */\n" +
        "function SubClass() {}\n" +
        "SubClass.prototype = new SuperClass();\n" +
        "\n" +
        "/**\n" +
        " * @override\n" +
        " */\n" +
        "SubClass.prototype.CustomMethod = function() {\n" +
        "   this.myProperty = \"value\";\n" +
        "};\n" +
        "\n" +
        "window['SubClassInstance'] = new SubClass();";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);
    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
    options.setCheckTypes(true);
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    SourceFile input = SourceFile.fromCode("test.js", jsCode);
    Result result = compiler.compile(Collections.emptyList(), Collections.singletonList(input), options);

    boolean hasUnknownOverrideWarning = result.warnings.stream()
        .anyMatch(w -> w.getType().equals(DiagnosticGroups.UNKNOWN_OVERRIDE));
    assertTrue(hasUnknownOverrideWarning, "Expected unknown override warning.");
}