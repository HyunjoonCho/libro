
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.List;

public class ClosureCompilerInheritanceTest {

    @Test
    public void testInheritanceWithDirectPrototypeAssignment() {
        // JavaScript code snippet with the direct prototype assignment
        String jsCode = "/**\n" +
                " * @constructor\n" +
                " */\n" +
                "function SuperClass() {}\n" +
                "SuperClass.prototype.CustomMethod = function() {};\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @extends {SuperClass}\n" +
                " */\n" +
                "function SubClass() {}\n" +
                "SubClass.prototype = new SuperClass();\n" +
                "/**\n" +
                " * @override\n" +
                " */\n" +
                "SubClass.prototype.CustomMethod = function() {\n" +
                "    this.myProperty = 'value';\n" +
                "};\n" +
                "window['SubClassInstance'] = new SubClass();";

        // Create SourceFile instance
        SourceFile input = SourceFile.fromCode("test.js", jsCode);

        // Set compiler options with advanced optimizations
        CompilerOptions options = new CompilerOptions();
        options.setAdvancedOptimizations();

        // Run the compiler
        CommandLineRunner runner = new CommandLineRunner(new String[]{});
        Result result = runner.compile(List.of(SourceFile.fromCode("externs.js", "")), List.of(input), options);

        // Check for the specific warning about CustomMethod override
        boolean foundWarning = result.warnings.stream()
                .anyMatch(warning -> warning.getDescription().contains("property CustomMethod not defined on any superclass of SubClass"));
        
        assertTrue("The warning about CustomMethod override should be present.", foundWarning);
    }
}
