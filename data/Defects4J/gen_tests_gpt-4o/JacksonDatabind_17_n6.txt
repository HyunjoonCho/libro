
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;
import static org.junit.Assert.*;

public class JsonDefaultTypingTest {
    
    @Test
    public void testReadTreeWithDefaultTypingEnabled() {
        ObjectMapper mapper = new ObjectMapper()
                .enableDefaultTyping() // Enable default typing
                .enable(MapperFeature.AUTO_DETECT_GETTERS)
                .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)
                .disable(MapperFeature.USE_GETTERS_AS_SETTERS)
                .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
                .enable(SerializationFeature.INDENT_OUTPUT)
                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        Foo foo = new Foo("bar");
        try {
            String serialized = mapper.writeValueAsString(foo); // Serialize without type info

            // This will throw an exception because of default typing
            JsonNode jsonNode = mapper.readTree(serialized);
            
            // Convert object to tree
            JsonNode node = mapper.valueToTree(foo);
            fail("Expected exception not thrown");
        } catch (Exception e) {
            assertTrue(e.getMessage().contains("Unexpected token (START_OBJECT), expected START_ARRAY"));
        }
    }

    public static class Foo {
        private String bar;

        public Foo() {
        }

        public Foo(String bar) {
            this.bar = bar;
        }

        public String getBar() {
            return bar;
        }

        public void setBar(String bar) {
            this.bar = bar;
        }
    }
}
