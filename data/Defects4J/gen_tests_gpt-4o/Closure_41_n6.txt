
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.ErrorReporter;
import com.google.javascript.jscomp.SourceFile;

import org.junit.Test;
import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testInconsistentOverrideWarning() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Set compilation level to ADVANCED_OPTIMIZATIONS
        options.setAdvancedCompilationOptions();
        
        String code =
            "goog.provide('Foo');" +
            "goog.provide('Bar');" +

            "/** @constructor */" +
            "Foo = function() {};" +

            "/**" +
            " * @param {number} a" +
            " * @param {number} b" +
            " * @return {number}" +
            " */" +
            "Foo.prototype.add = function(a, b) {" +
            " return a + b;" +
            "};" +

            "/**" +
            " * @param {number} a" +
            " * @param {number} b" +
            " * @return {number}" +
            " */" +
            "Foo.prototype.sub = goog.abstractMethod;" +

            "/**" +
            " * @constructor" +
            " * @extends {Foo}" +
            " */" +
            "Bar = function() {" +
            " goog.base(this);" +
            "};" +
            "goog.inherits(Bar, Foo);" +

            "/** @inheritDoc */" +
            "Bar.prototype.add = function(one) {" +
            " return one;" +
            "};" +

            "/** @inheritDoc */" +
            "Bar.prototype.sub = function(one) {" +
            " return one;" +
            "};" +

            "var foo = /** @type {Foo} */ (new Bar());" +
            "alert(foo.add(3, 4));" +

            "var bar = new Bar();" +
            "alert(bar.add(3, 4));";

        // Run the compiler with the provided code snippet
        SourceFile input = SourceFile.fromCode("test.js", code);
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        boolean warningFound = false;
        for (JSError warning : result.warnings) {
            if (warning.getType().key.equals("JSC_INCONSISTENT_OVERRIDE")) {
                warningFound = true;
                break;
            }
        }

        // According to the bug, we expect the warnings to be produced for inconsistent override
        assertTrue("Expected warning for inconsistent method signature overriding", warningFound);
    }
}
