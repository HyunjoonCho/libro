
import org.junit.Test;
import static org.junit.Assert.*;

import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class AdvancedOptimizationBugTest {

    @Test
    public void testAdvancedOptimizationBug() throws IOException {
        // Arrange
        String inputJs = "input.js";
        String outputJs = "output.js";
        String expectedOutputJs = "window[\"anchor\"]=function(a,b){var c=a.prop;return b(a)+c};";

        // Write the input JavaScript to a file
        Files.write(Paths.get(inputJs), ("window[\"anchor\"] = function (obj, modifiesProp) {" +
                "return (function (saved) {" +
                "return modifiesProp(obj) + saved;" +
                "})(obj[\"prop\"]);" +
                "}").getBytes());

        // Compile JavaScript with ADVANCED_OPTIMIZATIONS
        Result result = compile(inputJs, outputJs);

        // Verify
        assertTrue("Compilation should be successful", result.success);

        // Read the output JavaScript and validate
        String actualOutputJs = new String(Files.readAllBytes(Paths.get(outputJs)));
        assertEquals("The output JavaScript does not match expected", expectedOutputJs, actualOutputJs);

        // Clean up
        Files.deleteIfExists(Paths.get(inputJs));
        Files.deleteIfExists(Paths.get(outputJs));
    }

    private Result compile(String inputJs, String outputJs) throws IOException {
        String[] args = {
                "--compilation_level", "ADVANCED_OPTIMIZATIONS",
                "--js", inputJs,
                "--js_output_file", outputJs
        };

        CompilerOptions options = new CompilerOptions();
        CommandLineRunner runner = new CommandLineRunner(args);

        return runner.doRun();
    }
}
