public void testErroneousOptimizationInAdvancedOptimizationsMode() throws Exception {
    // Simulate the output of the compiler with advanced optimizations
    String optimizedJs = "window.foo=function(a,b){return b(a)+a.prop};";

    // Define a mock function to test behavior
    Object obj = new Object() {
        Map<String, Object> props = new HashMap<String, Object>() {{
            put("prop", 10);
        }};
        
        public Integer modifiesProp(Object o) {
            props.put("prop", 5);
            return 20;
        }
    };

    // Evaluate the optimized JavaScript while capturing the value of 'saved'
    Integer savedProp = (Integer) obj.getClass().getField("prop").get(obj);
    Integer result = obj.modifiesProp(obj) + savedProp;

    // Ensure the misoptimization leads to incorrect results
    assertNotEquals((Integer) 25, result); // Expecting 25, receiving different due to optimization
}