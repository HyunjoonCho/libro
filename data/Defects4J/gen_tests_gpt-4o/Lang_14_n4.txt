
import static org.junit.Assert.assertTrue;

import javax.lang.model.element.Name;
import org.apache.commons.lang3.StringUtils;
import org.junit.Test;

public class StringUtilsCharSequenceEqualsTest {

    private static class SimpleName implements Name {
        private final String name;

        SimpleName(String name) {
            this.name = name;
        }

        @Override
        public boolean contentEquals(CharSequence cs) {
            return name.contentEquals(cs);
        }

        @Override
        public int length() {
            return name.length();
        }

        @Override
        public char charAt(int index) {
            return name.charAt(index);
        }

        @Override
        public CharSequence subSequence(int start, int end) {
            return name.subSequence(start, end);
        }

        @Override
        public String toString() {
            return name;
        }

        @Override
        public int hashCode() {
            return name.hashCode();
        }

        @Override
        public boolean equals(Object obj) {
            // Purposely not defining equality between SimpleName and String
            return obj instanceof SimpleName && name.equals(((SimpleName) obj).name);
        }
    }

    @Test
    public void testCharSequenceEquals() {
        CharSequence name = new SimpleName("example");
        CharSequence string = "example";

        // This should be true if the characters are the same, but due to reliance
        // on Object#equals, it might be false
        assertTrue("Expected StringUtils.equals to compare character sequences correctly",
                StringUtils.equals(name, string));
    }
}
