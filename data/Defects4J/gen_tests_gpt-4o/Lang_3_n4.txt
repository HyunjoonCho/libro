
import org.apache.commons.lang3.math.NumberUtils;
import org.junit.Test;

import java.math.BigDecimal;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class NumberUtilsTest {

    @Test
    public void testCreateNumberWithLargeFloatingPoint() {
        String largeFloatingPoint = "1.12345678901234567890"; // A number that exceeds float precision

        // Use NumberUtils to create the number
        Number result = NumberUtils.createNumber(largeFloatingPoint);

        // Check the type and value of the result
        // It should not be a Float because the value exceeds Float precision
        // Instead, it should be either a Double or a BigDecimal
        assertTrue("The result should be an instance of Double or BigDecimal", 
            (result instanceof Double) || (result instanceof BigDecimal));
        
        // For this example, let's assume we expect a BigDecimal to maintain the precision
        assertEquals(new BigDecimal(largeFloatingPoint), new BigDecimal(result.toString()));
    }
}
