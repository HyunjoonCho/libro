
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.NameMatchFilter;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class FilteringParserDelegateTest {

    @Test
    public void testMissingEndObject() throws IOException {
        JsonFactory jsonFactory = new JsonFactory();
        String jsonInput = "{ \"a\":123, \"array\":[1,2], \"ob\": { \"value0\":2, \"value\":3, \"value2\":4 }, \"b\":true }";

        JsonParser originalParser = jsonFactory.createParser(jsonInput);
        FilteringParserDelegate filteredParser = new FilteringParserDelegate(
                originalParser,
                new NameMatchFilter("value"),
                true,  // includePath
                false  // multipleMatches
        );

        StringBuilder result = new StringBuilder();
        JsonToken token;
        while ((token = filteredParser.nextToken()) != null) {
            switch (token) {
                case START_OBJECT:
                    result.append("{");
                    break;
                case END_OBJECT:
                    result.append("}");
                    break;
                case FIELD_NAME:
                    result.append("\"").append(filteredParser.getCurrentName()).append("\":");
                    break;
                case VALUE_NUMBER_INT:
                    result.append(filteredParser.getIntValue());
                    break;
                default:
                    break;
            }
        }

        String expectedOutput = "{\"ob\":{\"value\":3}}"; // Expected correct output
        assertEquals(expectedOutput, result.toString());
    }
}
