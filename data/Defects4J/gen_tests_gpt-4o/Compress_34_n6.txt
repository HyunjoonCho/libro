
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.tika.Tika;
import org.junit.Test;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.Assert.assertEquals;

public class TikaZipBugTest {

    @Test
    public void testZeroSizedUxLocalEntry() throws IOException {
        // Create a temporary zip file
        File tempZipFile = File.createTempFile("test", ".zip");
        tempZipFile.deleteOnExit();

        // Create a zip file with a zero-sized "ux" local entry
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(tempZipFile))) {
            ZipEntry entry = new ZipEntry("test.jpg");
            entry.setExtra(new byte[]{85, 84, 5, 0, 7, -112, -108, 51, 85, 117, 120, 0, 0});
            zos.putNextEntry(entry);
            zos.closeEntry();
        }

        // Using Tika to detect the type of the zip file
        byte[] content = new byte[(int) tempZipFile.length()];
        String name = tempZipFile.getName();
        Tika tika = new Tika();

        try (ZipFile zipFile = new ZipFile(tempZipFile)) {
            for (ZipArchiveEntry entry : zipFile.getEntries()) {
                if (entry.getSize() >= 0) {
                    // Here we should read some content if needed
                }
            }
        }

        String mimeType = tika.detect(content, name);
        assertEquals("application/zip", mimeType);

        // Clean up the temporary file
        tempZipFile.delete();
    }
}
