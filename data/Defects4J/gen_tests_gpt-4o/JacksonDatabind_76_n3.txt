
import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;

import org.junit.jupiter.api.Test;

public class EmployeeDeserializationTest {

    @JsonDeserialize(builder = Employee.Builder.class)
    public static class Employee {
        private final long id;
        private final Name name;
        private final int age;

        private Employee(Builder builder) {
            id = builder.id;
            name = builder.name;
            age = builder.age;
        }

        public long getId() {
            return id;
        }

        public Name getName() {
            return name;
        }

        public int getAge() {
            return age;
        }

        @JsonPOJOBuilder(withPrefix = "set")
        public static class Builder {
            private final long id;
            private Name name;
            private int age;

            @JsonCreator
            public Builder(@JsonProperty("emp_id") long id) {
                this.id = id;
            }

            @JsonUnwrapped
            public void setName(Name name) {
                this.name = name;
            }

            @JsonProperty("emp_age")
            public void setAge(int age) {
                this.age = age;
            }

            public Employee build() {
                return new Employee(this);
            }
        }
    }

    public static class Name {
        private final String first;
        private final String last;

        @JsonCreator
        public Name(
            @JsonProperty("emp_first_name") String first,
            @JsonProperty("emp_last_name") String last
        ) {
            this.first = first;
            this.last = last;
        }

        public String getFirst() {
            return first;
        }

        public String getLast() {
            return last;
        }
    }

    @Test
    public void testDeserialization_OrderMatters() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // JSON string with emp_id not at the end
        String json1 = "{ \"emp_age\": 30, \"emp_id\": 1234, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\" }";
        Employee employee1 = objectMapper.readValue(json1, Employee.class);
        assertEquals(30, employee1.getAge());
        assertEquals(1234, employee1.getId());
        assertNull(employee1.getName()); // Fails to deserialize Name

        // JSON string with emp_id at the end
        String json2 = "{ \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\", \"emp_age\": 30, \"emp_id\": 1234 }";
        Employee employee2 = objectMapper.readValue(json2, Employee.class);
        assertEquals(30, employee2.getAge());
        assertEquals(1234, employee2.getId());
        assertNotNull(employee2.getName()); // Succeeds in deserializing Name
        assertEquals("John", employee2.getName().getFirst());
        assertEquals("Doe", employee2.getName().getLast());

        // JSON string with all properties after emp_id
        String json3 = "{ \"emp_id\": 1234, \"emp_age\": 30, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\" }";
        Employee employee3 = objectMapper.readValue(json3, Employee.class);
        assertEquals(0, employee3.getAge()); // Defaults to 0
        assertEquals(1234, employee3.getId());
        assertNull(employee3.getName()); // Fails to deserialize Name
    }
}
