
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;

public class ClosureCompilerVersionTest {

    @Test
    public void testClosureCompilerVersionOutput() {
        // Assuming the JAR file is named 'compiler.jar' and located in the current directory
        String jarFilePath = "./compiler.jar";

        try {
            // Execute the Closure Compiler with the --version argument
            ProcessBuilder processBuilder = new ProcessBuilder("java", "-jar", jarFilePath, "--version");
            Process process = processBuilder.start();

            // Capture the output from the process
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }

            // Capture any errors from the process
            BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            StringBuilder errorOutput = new StringBuilder();
            while ((line = errorReader.readLine()) != null) {
                errorOutput.append(line).append("\n");
            }

            // Wait for the process to complete
            int exitCode = process.waitFor();

            // Check process execution status
            assertEquals("Process should complete successfully", 0, exitCode);

            // Check that the output contains expected version information
            String expectedVersionOutput = "Closure Compiler (http://code.google.com/closure/compiler)\n" +
                                           "Version: 698\n" +
                                           "Built on: 2011/01/17 12:16\n";

            assertTrue("Output should start with expected version information",
                       output.toString().startsWith(expectedVersionOutput));

            // Optionally, also verify that there's no error message
            assertTrue("There should be no error output", errorOutput.toString().isEmpty());

        } catch (Exception e) {
            fail("Exception occurred while testing: " + e.getMessage());
        }
    }
}
