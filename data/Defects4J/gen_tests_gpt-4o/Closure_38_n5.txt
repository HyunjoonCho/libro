
import org.junit.Test;
import java.io.*;

public class MinusNegativeNumberTest {

    @Test
    public void testMinusNegativeNumberParsing() throws Exception {
        // Path to the Closure Compiler jar
        String compilerPath = "path/to/compiler.jar";
        // JavaScript source file to compile
        String jsSourcePath = "path/to/bulletfail.js";
        // Output path for compiled JS
        String jsOutputPath = "path/to/cc.js";

        // Compilation command
        ProcessBuilder pb = new ProcessBuilder(
                "java", "-jar", compilerPath,
                "--compilation_level", "ADVANCED_OPTIMIZATIONS",
                "--js", jsSourcePath,
                "--js_output_file", jsOutputPath
        );
        Process process = pb.start();
        process.waitFor();

        // Check if the output file was created
        File outputFile = new File(jsOutputPath);
        if (!outputFile.exists()) {
            throw new AssertionError("Compiled output file was not created.");
        }

        // Read the content of the compiled output
        String compiledContent = new String(java.nio.file.Files.readAllBytes(outputFile.toPath()));

        // Check if the output contains "g--0.0" as mentioned in the bug report
        if (compiledContent.contains("g--0.0")) {
            throw new AssertionError("Output contains 'g--0.0', which does not parse correctly. It should contain 'g- -0.0'.");
        } else if (!compiledContent.contains("g- -0.0")) {
            throw new AssertionError("Expected 'g- -0.0' in the compiled output, but it was not found.");
        }

        // Optionally, you can also run the compiled JS in a JS engine to ensure it executes correctly, 
        // but this requires configuring such an environment in your test setup.
        // ProcessBuilder runBuilder = new ProcessBuilder("node", jsOutputPath);
        // Process runProcess = runBuilder.start();
        // int exitCode = runProcess.waitFor();
        // assertEquals("JavaScript execution failed.", 0, exitCode);
    }
}
