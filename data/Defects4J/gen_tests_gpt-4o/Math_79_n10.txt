
import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

import static org.junit.Assert.assertEquals;

public class ClusterAnalysisNPEReproductionTest {

    @Test
    public void testNPEInKMeansPlusPlusClusterer() {
        // Initialize KMeansPlusPlusClusterer with a fixed seed to ensure determinism
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<>(new Random(1746432956321L));

        // Define points to cluster
        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] {
            new EuclideanIntegerPoint(new int[] { 1959, 325100 }),
            new EuclideanIntegerPoint(new int[] { 1960, 373200 }),
            // Add more points if needed to mimic the original issue
        };

        // Perform clustering with potentially problematic parameters
        List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 1);

        // Validate the test case to reproduce the failure
        assertEquals(1, clusters.size());
    }
}
