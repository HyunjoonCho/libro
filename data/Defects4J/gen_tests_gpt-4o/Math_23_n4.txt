
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerBestPoint() {
        // Define the objective function
        UnivariateObjectiveFunction func = new UnivariateObjectiveFunction(x -> -Math.pow(x - 2, 2) + 5);

        // Create BrentOptimizer with very loose convergence settings to increase likelihood of error
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Perform optimization
        UnivariatePointValuePair result = optimizer.optimize(
                new MaxEval(1000),
                func,
                org.apache.commons.math3.optim.univariate.GoalType.MAXIMIZE,
                new SearchInterval(-10, 10)
        );

        // The maximum of the function -Math.pow(x - 2, 2) + 5 is 5 which occurs at x = 2
        // Expecting the optimizer to return the best point x = 2
        assertEquals(2.0, result.getPoint(), 1e-5);
        assertEquals(5.0, result.getValue(), 1e-5);
    }
}
