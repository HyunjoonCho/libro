
import org.junit.Test;
import org.apache.commons.cli2.CommandLine;
import org.apache.commons.cli2.Group;
import org.apache.commons.cli2.GroupBuilder;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.OptionBuilder;
import org.apache.commons.cli2.DefaultOptionBuilder;
import org.apache.commons.cli2.ArgumentBuilder;
import org.apache.commons.cli2.builder.Parser;

import java.util.List;

import static org.junit.Assert.*;

public class DefaultArgumentTest {

    @Test
    public void testSingleOptionWithOneDefaultIgnored() throws Exception {
        // Expected default values
        String defaultValue1 = "100";
        String defaultValue2 = "1000";

        DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        ArgumentBuilder abuilder = new ArgumentBuilder();
        GroupBuilder gbuilder = new GroupBuilder();

        // Create an option with 0 to 2 arguments, expecting defaults if no arguments are present
        Option bOption = obuilder
                .withShortName("b")
                .withLongName("b")
                .withArgument(abuilder.withName("b")
                        .withMinimum(0)
                        .withMaximum(2)
                        .withDefault(defaultValue1)
                        .withDefault(defaultValue2)
                        .create())
                .create();

        Group options = gbuilder.withOption(bOption).create();

        Parser parser = new Parser();
        parser.setGroup(options);

        String enteredValue1 = "1";
        // Passing a single argument
        String[] args = new String[]{"-b", enteredValue1};

        CommandLine cmd = parser.parse(args);
        assertNotNull(cmd);

        List<?> bValues = cmd.getValues(bOption);

        // Expected behavior should have been ["1", "1000"], 
        // because there is no second argument, so it should pick the second default.
        // Due to the described bug, it will return ["1"].
        assertEquals("[1, " + defaultValue2 + "]", bValues.toString());
    }
}
