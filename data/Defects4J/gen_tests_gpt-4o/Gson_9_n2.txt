
import static org.junit.Assert.*;

import org.junit.Test;

public class BooleanValueTest {

    // Sample class to represent the scenario. Replace this with the actual class implementation.
    public static class UtilityClass {
        public Object value(boolean boolValue) {
            // This is where the NPE would happen if it's called with a null Boolean
            return boolValue ? "True" : "False";
        }

        public Object value(Number numberValue) {
            return numberValue != null ? numberValue.toString() : "Null";
        }

        // Proposed overloading method for the fix
        public Object value(Boolean booleanValue) {
            return (booleanValue != null) ? value(booleanValue.booleanValue()) : "Null";
        }
    }
    
    @Test(expected = NullPointerException.class)
    public void testValueMethodWithNullBoolean() {
        UtilityClass util = new UtilityClass();
        Boolean nullBoolean = null;
        
        // This call will throw a NullPointerException due to unboxing in value(boolean) method
        util.value(nullBoolean);
    }

    @Test
    public void testValueMethodWithNonNullBoolean() {
        UtilityClass util = new UtilityClass();
        Boolean trueBoolean = Boolean.TRUE;

        // This should pass without exception and return "True"
        assertEquals("True", util.value(trueBoolean));
    }

    @Test
    public void testValueMethodWithNullBooleanWithProposedFix() {
        UtilityClass util = new UtilityClass();
        Boolean nullBoolean = null;

        // After implementing the overload for Boolean, this should return "Null" instead of throwing an exception
        assertEquals("Null", util.value(nullBoolean));
    }
}
