
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.StringReader;

import static org.junit.Assert.assertEquals;

public class JsonParserLocationTest {

    @Test
    public void testTokenLocationAfterFieldNameForReader() throws Exception {
        _testTokenLocationAfterFieldName(false);
    }

    @Test
    public void testTokenLocationAfterFieldNameForStream() throws Exception {
        _testTokenLocationAfterFieldName(true);
    }

    private void _testTokenLocationAfterFieldName(boolean useStream) throws Exception {
        final String DOC = "{\"name\":123}";
        JsonFactory jf = new JsonFactory();
        JsonParser jp = useStream ?
                jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8")))
                : jf.createParser(new StringReader(DOC));

        assertEquals(JsonToken.START_OBJECT, jp.nextToken());

        // Capture location after FIELD_NAME
        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());
        int fieldColumn = jp.getTokenLocation().getColumnNr();

        // Check location after VALUE_NUMBER_INT
        assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
        int valueColumn = jp.getTokenLocation().getColumnNr();

        assertEquals(1, jp.getTokenLocation().getLineNr());
        assertEquals(9, valueColumn);

        // Ensure the location has actually moved forward
        assertEquals("Token location didn't update after FIELD_NAME",
                fieldColumn + "\"name\":".length() + 1,  // +1 for the space between ':' and '123'
                valueColumn);

        jp.close();
    }
}
