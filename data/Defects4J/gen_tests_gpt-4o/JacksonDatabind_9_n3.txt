
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class MapDeserializationTest {

    @Test
    public void testMapWithClassAsKey() throws Exception {
        // Create a map with Class as keys and String as values
        Map<Class<? extends Object>, String> map = new HashMap<>();
        map.put(ArrayList.class, "ArrayList");
        map.put(HashMap.class, "HashMap");

        // Create an ObjectMapper instance
        ObjectMapper mapper = new ObjectMapper();

        // Serialize the map to a JSON string
        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map);
        System.out.println("Serialized JSON:");
        System.out.println(json);

        // Attempt to deserialize the JSON back into a map
        // This is expected to throw an exception due to the issue described in the bug report
        try {
            Map<Class<? extends Object>, String> deserializedMap = mapper.readValue(
                json, new TypeReference<Map<Class<? extends Object>, String>>() {});
            System.out.println("Deserialized Map:");
            System.out.println(deserializedMap);
        } catch (Exception e) {
            // Print the exception message to indicate the issue during deserialization
            System.err.println("Exception during deserialization: " + e.getMessage());
            throw e;  // Rethrow exception to let the test framework capture it
        }
    }
}
