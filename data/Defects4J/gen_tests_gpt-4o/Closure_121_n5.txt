
import static org.junit.jupiter.api.Assertions.fail;
import org.junit.jupiter.api.Test;

public class CompilerOptimizationTest {

    @Test
    public void testOverzealousOptimization() {
        boolean exceptionThrown = false;
        
        // Original unoptimized code
        try {
            originalCode();
        } catch (Exception e) {
            fail("The original code should not throw an exception: " + e.getMessage());
        }
        
        // Simulate the optimized code to see incorrect behavior
        try {
            optimizedCode();
        } catch (Exception e) {
            exceptionThrown = true;
        }

        if (!exceptionThrown) {
            fail("The optimized code did not throw an exception as expected.");
        }
    }

    public void originalCode() {
        double uid = 0;

        Runnable reset = () -> {
            uid = Math.random();
        };

        class DoStuff {
            void execute() {
                reset.run();
                double _uid = uid;

                if (uid < 0.5) {
                    execute();
                }

                if (_uid != uid) {
                    throw new RuntimeException("reset() was called");
                }
            }
        }

        new DoStuff().execute();
    }

    public void optimizedCode() {
        // Simulating the optimized version where _uid is optimized away
        double a = 0;

        class B {
            void execute() {
                a = Math.random();
                if (a < 0.5) {
                    execute();
                }

                if (a != a) { // This condition is always false in optimized code but simulates the issue
                    throw new RuntimeException("reset() was called");
                }
            }
        }

        new B().execute();
    }
}
