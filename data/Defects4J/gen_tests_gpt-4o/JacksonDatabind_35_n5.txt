
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.TypeNameIdResolver;
import org.junit.Test;
import static org.junit.Assert.*;

public class ObjectTypeIdsTest {

    // Define a test class with both Object and Type ID annotations
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    static class Book {
        public String id;
        public String title;

        public Book() { }
        
        public Book(String id, String title) {
            this.id = id;
            this.title = title;
        }
    }
    
    @Test
    public void testObjectTypeIdSerialization() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        
        Book book = new Book("1", "Effective Java");
        
        // Serializing the book object
        String json = mapper.writeValueAsString(book);
        
        // Expected JSON with type and object IDs wrapped
        String expected = "{\"Book\":{\"id\":\"1\",\"title\":\"Effective Java\"}}";
        
        // Test serialization
        assertEquals(expected, json);
        
        // Deserialize back
        Book deserializedBook = mapper.readValue(json, Book.class);
        
        // Validate deserialization
        assertEquals(book.id, deserializedBook.id);
        assertEquals(book.title, deserializedBook.title);
    }
}
