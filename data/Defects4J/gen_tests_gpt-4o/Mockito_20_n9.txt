
import org.junit.Test;
import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

public class AbstractClassSpyingTest {

    // Example 1: Fake with trivial logic
    @Test
    public void testFakeUserAccount() {
        UserAccount userAccount = spy(new UserAccountFake());
        userAccount.addEmail("test@example.com");
        assertEquals(1, userAccount.getEmails().size());
        assertEquals("test@example.com", userAccount.getEmails().get(0));
    }

    // Example 2: Callback-style API
    @Test
    public void testMockAccountService() {
        MockAccountService service = spy(new MockAccountService() {
            @Override
            UserAccount getAccount(String id) {
                return new UserAccount() {
                    // Implement methods with simple logic for testing
                };
            }
        });
        
        UserAccount account = mock(UserAccount.class);
        AsyncCallback<UserAccount> callback = mock(AsyncCallback.class);
        service.getAccount("id123", callback);
        verify(callback).onSuccess(any(UserAccount.class));
    }
    
    // Example 3: Uninteresting parameters
    @Test
    public void testMockAccountRpcService() {
        MockAccountRpcService service = spy(new MockAccountRpcService() {
            @Override
            FutureAccount getAccount(String id) {
                return new FutureAccount() {
                    // Implement methods with simple logic for testing
                };
            }
        });

        RpcContext rpcContext = mock(RpcContext.class);
        FutureAccount futureAccount = mock(FutureAccount.class);
        when(service.getAccount(rpcContext, "id123")).thenReturn(futureAccount);
        assertNotNull(service.getAccount(rpcContext, "id123"));
    }
    
    interface UserAccount {
        List<String> getEmails();
        void addEmail(String email);
    }

    abstract class UserAccountFake implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override public void addEmail(String email) {
            emails.add(email);
        }
        
        @Override public List<String> getEmails() {
            return new ArrayList<>(emails);
        }
    }

    interface AsyncCallback<T> {
        void onSuccess(T result);
    }

    interface AccountService {
        void getAccount(String id, AsyncCallback<UserAccount> callback);
    }

    abstract class MockAccountService implements AccountService {
        @Override
        public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }

        abstract UserAccount getAccount(String id);
    }
    
    interface RpcContext {}

    interface FutureAccount {}

    interface AccountRpcService {
        FutureAccount getAccount(RpcContext context, String id);
    }
    
    abstract class MockAccountRpcService implements AccountRpcService {
        @Override
        public FutureAccount getAccount(RpcContext context, String id) {
            return getAccount("id");
        }

        abstract FutureAccount getAccount(String id);
    }
}
