public void testAddSingletonGetterPreventsUnusedClassRemoval() {
    // Setup Closure Compiler with the given options
    CompilerOptions options = new CompilerOptions();
    options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
    options.setClosurePrimitives(true);
    options.prettyPrint = true;
    options.setWarningLevel(DiagnosticGroups.VERBOSE, CheckLevel.WARNING);
    options.debugFunctionCalls = true;

    // Source code to compile
    String jsCode = ""
        + "goog.provide('foo');\n"
        + "var foo = function() { this.values = []; };\n"
        + "goog.addSingletonGetter(foo);\n"
        + "foo.prototype.add = function(value) {this.values.push(value)};";

    // Compile
    Compiler compiler = new Compiler();
    Result result = compiler.compile(
        Collections.singletonList(SourceFile.fromCode("externs.js", "")),
        Collections.singletonList(SourceFile.fromCode("test.js", jsCode)),
        options
    );

    // Check that the compiled code is empty as expected
    String compiledCode = compiler.toSource();
    assertTrue("The code was not completely optimized away as expected", compiledCode.isEmpty());
}