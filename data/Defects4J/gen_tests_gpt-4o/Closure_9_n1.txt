
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class AmdModuleTest {

    public static void main(String[] args) {
        try {
            // Setup test files
            setupTestFiles();

            // Run closure compiler
            runClosureCompiler();

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // Clean up test files
            cleanUp();
        }
    }

    private static void setupTestFiles() throws IOException {
        // Create directory for lib
        File libDir = new File("lib");
        if (!libDir.exists()) {
            libDir.mkdir();
        }

        // Create lib/Foo.js
        File fooFile = new File("lib/Foo.js");
        try (FileWriter writer = new FileWriter(fooFile)) {
            writer.write("define([], function() { return 'Foo'; });");
        }

        // Create Bar.js
        File barFile = new File("Bar.js");
        try (FileWriter writer = new FileWriter(barFile)) {
            writer.write("define(['lib/Foo'], function(Foo) { console.log(Foo); });");
        }
    }

    private static void runClosureCompiler() throws IOException, InterruptedException {
        // Path to the Closure Compiler jar needs to be adjusted to where it's located in your environment
        String closureCompilerPath = "path/to/closure-compiler.jar";
        
        ProcessBuilder processBuilder = new ProcessBuilder(
            "java", "-jar", closureCompilerPath,
            "--transform_amd_modules", "--process_common_js_modules",
            "--common_js_entry_module=Bar.js",
            "--compilation_level=ADVANCED_OPTIMIZATIONS",
            "--js_output_file=out.js",
            "--js=Bar.js", "--js=lib/Foo.js");

        processBuilder.inheritIO();
        Process process = processBuilder.start();
        process.waitFor();
    }

    private static void cleanUp() {
        File fooFile = new File("lib/Foo.js");
        if (fooFile.exists()) fooFile.delete();

        File barFile = new File("Bar.js");
        if (barFile.exists()) barFile.delete();

        File outFile = new File("out.js");
        if (outFile.exists()) outFile.delete();

        File libDir = new File("lib");
        if (libDir.exists()) libDir.delete();
    }
}
