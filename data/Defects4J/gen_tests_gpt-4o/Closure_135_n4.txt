public void testInheritanceOverrideDetection() {
    String jsCode = "/**\n"
        + "* @constructor\n"
        + "*/\n"
        + "function SuperClass() {}\n"
        + "SuperClass.prototype.CustomMethod = function() {}\n"
        + "/**\n"
        + "* @constructor\n"
        + "* @extends {SuperClass}\n"
        + "*/\n"
        + "function SubClass() {}\n"
        + "SubClass.prototype = new SuperClass();\n"
        + "/**\n"
        + "* @override\n"
        + "*/\n"
        + "SubClass.prototype.CustomMethod = function() { this.myProperty = 'value'; }\n"
        + "window['SubClassInstance'] = new SubClass();\n";

    CompilerOptions options = new CompilerOptions();
    options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);
    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
    options.setClosurePass(true);
    options.setWarningsGuard(new ShowAllWarningsGuard());

    Compiler compiler = new Compiler();
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""),
                                     SourceFile.fromCode("input.js", jsCode),
                                     options);

    assertEquals(0, result.warnings.length);
    assertEquals(0, result.errors.length);
}