
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.KeyDeserializer;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

public class DeserializeMapWithClassAsKeyTest {

    @Test
    public void testMapWithClassAsKey() throws Exception {
        Map<Class<? extends Object>, String> map = new HashMap<>();
        map.put(ArrayList.class, "ArrayList");
        map.put(HashMap.class, "HashMap");

        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addKeyDeserializer(Class.class, new ClassKeyDeserializer());
        mapper.registerModule(module);

        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map);
        System.out.println(json);
        
        Map<Class<? extends Object>, String> deserializedMap = mapper.readValue(json, 
                new TypeReference<Map<Class<? extends Object>, String>>(){});
        
        // Verify if the deserialized map matches the original
        assertEquals("ArrayList", deserializedMap.get(ArrayList.class));
        assertEquals("HashMap", deserializedMap.get(HashMap.class));
    }
    
    private static class ClassKeyDeserializer extends KeyDeserializer {
        @Override
        public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException {
            try {
                if (key.startsWith("class ")) {
                    key = key.substring(6);
                }
                return Class.forName(key);
            } catch (ClassNotFoundException e) {
                throw new IOException("Could not deserialize key", e);
            }
        }
    }
}
