
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DependencyOptions;

import java.nio.charset.StandardCharsets;

public class DependencySortingTest {

    public void testDependencySortingWithoutClosurePass() {
        // Setup Compiler options
        CompilerOptions options = new CompilerOptions();
        options.setClosurePass(false);

        // Set dependency sorting option
        DependencyOptions dependencyOptions = new DependencyOptions();
        dependencyOptions.setDependencySorting(true);
        options.setDependencyOptions(dependencyOptions);

        // Instantiate Compiler
        Compiler compiler = new Compiler();

        // Sample JS input with dependencies
        String codeInput1 = "goog.provide('example.Main'); goog.require('example.Helper');";
        String codeInput2 = "goog.provide('example.Helper');";

        // Compile code
        boolean success = compiler.compileModules(
            CommandLineRunner.getDefaultExterns(),
            new Compiler.Input(Code.toSource("input1", codeInput1)),
            new Compiler.Input(Code.toSource("input2", codeInput2)),
            options
        ).isSuccessful();

        // Assert if compilation is successful and dependencies were sorted
        assertTrue(success, "Compilation should succeed");

        String compiledOutput = new String(compiler.toSource(), StandardCharsets.UTF_8);
        int indexMain = compiledOutput.indexOf("example.Main");
        int indexHelper = compiledOutput.indexOf("example.Helper");

        // Verify if 'example.Helper' is before 'example.Main'
        assertTrue(indexHelper < indexMain, "'example.Helper' should be before 'example.Main'");
    }

    private static class Code {
        static char[] toSource(String fileName, String code) {
            return code.toCharArray();
        }
    }
}
