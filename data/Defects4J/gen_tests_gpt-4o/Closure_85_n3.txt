
import org.junit.Test;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Scanner;

import static org.junit.Assert.fail;

public class CompileTest {

    @Test
    public void testSwitchStatementCompilationBug() {
        // Create a temporary JavaScript file with the problematic code
        File tempFile = null;
        try {
            tempFile = File.createTempFile("test", ".js");
            try (FileWriter writer = new FileWriter(tempFile)) {
                writer.write("function a(b) {\n");
                writer.write(" switch (b.v) {\n");
                writer.write(" case 'SWITCH':\n");
                writer.write(" if (b.i >= 0) {\n");
                writer.write(" return b.o;\n");
                writer.write(" } else {\n");
                writer.write(" return undefined;\n");
                writer.write(" }\n");
                writer.write(" break;\n");
                writer.write(" }\n");
                writer.write("}\n");
            }

            // Path to the compiler jar
            String compilerJarPath = "path/to/compiler.jar";

            // Compile the JavaScript file using the compiler jar
            ProcessBuilder processBuilder = new ProcessBuilder(
                    "java", "-jar", compilerJarPath, "--js", tempFile.getAbsolutePath()
            );

            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();

            // Capture the output from the compiler
            try (Scanner scanner = new Scanner(process.getInputStream())) {
                while (scanner.hasNextLine()) {
                    String line = scanner.nextLine();
                    if (line.contains("INTERNAL COMPILER ERROR")) {
                        fail("Compiler failed with INTERNAL COMPILER ERROR.");
                    }
                }
            }

            int exitCode = process.waitFor();
            if (exitCode != 0) {
                fail("Compilation failed with exit code " + exitCode);
            }

        } catch (IOException | InterruptedException e) {
            fail("Unexpected exception: " + e.getMessage());

        } finally {
            if (tempFile != null && tempFile.exists()) {
                if (!tempFile.delete()) {
                    System.err.println("Failed to delete temporary file: " + tempFile.getAbsolutePath());
                }
            }
        }
    }
}
