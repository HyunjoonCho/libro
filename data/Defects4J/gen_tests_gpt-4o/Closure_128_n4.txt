
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.JSError;
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.List;

public class CompilerTest {

    @Test
    public void testObjectLiteralKeyQuoting() {
        String originalScript = "alert({0:0, 1:1});";
        String expectedOutputScript = "alert({0:0, 1:1});";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        // Set compiler options if necessary

        // Compile the script
        List<SourceFile> inputs = List.of(SourceFile.fromCode("input.js", originalScript));
        List<SourceFile> externs = List.of();
        Result result = compiler.compile(externs, inputs, options);

        // Check for compilation errors
        if (result.errors.length > 0) {
            for (JSError error : result.errors) {
                System.err.println(error.toString());
            }
            fail("Compilation had errors.");
        }

        // Get the compiled output
        String compiledCode = compiler.toSource();

        // Assert that the compiled code matches the expected output
        assertEquals(expectedOutputScript, compiledCode);
    }
}
