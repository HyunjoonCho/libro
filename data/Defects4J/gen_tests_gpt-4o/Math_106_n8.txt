
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.ProperFractionFormat;
import org.junit.Test;

import java.text.ParsePosition;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class ProperFractionFormatBugTest {

    @Test
    public void testParseNegativeNumeratorDenominatorFails() {
        ProperFractionFormat properFormat = new ProperFractionFormat();
        String source = "-1 -2 / 3";
        ParsePosition pos = new ParsePosition(0);

        Fraction actual = properFormat.parse(source, pos);

        // Based on the intention of the bug report,
        // if the input is illogical, it should return null.
        assertNull("Expected null for illogical input but got: " + actual, actual);
    }

    @Test
    public void testParseNegativeNumerator() {
        ProperFractionFormat properFormat = new ProperFractionFormat();
        String source = "1 -2 / 3";
        ParsePosition pos = new ParsePosition(0);

        Fraction actual = properFormat.parse(source, pos);

        // The expected behavior isn't logical as per the bug report.
        // The result seems incorrect.
        assertEquals("Expected numerator is incorrect", 1, actual.getNumerator());
        assertEquals("Expected denominator is incorrect", 3, actual.getDenominator());
    }

    @Test
    public void testParseNegativeDenominator() {
        ProperFractionFormat properFormat = new ProperFractionFormat();
        String source = "1 2 / -3";
        ParsePosition pos = new ParsePosition(0);

        Fraction actual = properFormat.parse(source, pos);

        // Expected proper handling of negative denominator.
        // According to the bug, it incorrectly parses to a positive fraction.
        assertNull("Expected null for illogical input but got: " + actual, actual);
    }
}
