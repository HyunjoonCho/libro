
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testMsgPrefixVariableError() {
        // Input containing MSG_ variable
        String jsCode = "var MSG_foo='bar'";

        // Redirect the standard error stream to capture compiler messages
        ByteArrayOutputStream errContent = new ByteArrayOutputStream();
        PrintStream originalErr = System.err;
        System.setErr(new PrintStream(errContent));

        try {
            // Set up the command line arguments for Closure Compiler with advanced optimizations
            String[] args = {
                    "--compilation_level", "ADVANCED_OPTIMIZATIONS"
            };

            // Run the Closure Compiler
            CommandLineRunner compiler = new CommandLineRunner(args) {
                @Override
                protected int doRun() {
                    try {
                        return super.doRun();
                    } catch (Exception e) {
                        System.err.print(e.getMessage());
                        return 1;
                    }
                }
            };
            compiler.setInput(com.google.common.collect.ImmutableList.of(new com.google.javascript.jscomp.SourceFile.fromCode("input.js", jsCode)));
            compiler.run();

            // Check if the expected error message is in the captured error output
            String errorOutput = errContent.toString();
            assertTrue("Error message should contain 'message not initialized using goog.getMsg'",
                    errorOutput.contains("message not initialized using goog.getMsg"));

        } finally {
            // Reset the standard error stream to its original
            System.setErr(originalErr);
        }
    }
}
