public void testReadTreeWithDefaultTyping() {
    ObjectMapper mapper = new ObjectMapper().enableDefaultTyping()
        .enable(MapperFeature.AUTO_DETECT_GETTERS)
        .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)
        .disable(MapperFeature.USE_GETTERS_AS_SETTERS)
        .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
        .enable(SerializationFeature.INDENT_OUTPUT)
        .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

    Foo foo = new Foo("bar");
    try {
        String serialized = mapper.writeValueAsString(foo);
        mapper.readTree(serialized); // exception here
        fail("Expected JsonMappingException was not thrown");
    } catch (JsonMappingException e) {
        assertTrue(e.getMessage().contains("Unexpected token (START_OBJECT)"));
    } catch (IOException e) {
        fail("Unexpected IOException thrown: " + e.getMessage());
    }

    try {
        mapper.valueToTree(foo); // another exception here
        fail("Expected JsonMappingException was not thrown");
    } catch (JsonMappingException e) {
        assertTrue(e.getMessage().contains("Unexpected token (START_OBJECT)"));
    }
}

static class Foo {
    private String bar;

    public Foo() {
    }

    public Foo(String bar) {
        this.bar = bar;
    }

    public String getBar() {
        return bar;
    }

    public void setBar(String bar) {
        this.bar = bar;
    }
}