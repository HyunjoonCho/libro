
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class DefaultTypingTest {

    public static class Foo {
        private String bar;

        public Foo() {
        }

        public Foo(String bar) {
            this.bar = bar;
        }

        public String getBar() {
            return bar;
        }

        public void setBar(String bar) {
            this.bar = bar;
        }
    }

    @Test
    public void testReadTreeWithDefaultTyping() throws Exception {
        ObjectMapper mapper = new ObjectMapper()
                .activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE) // or another variant of DefaultTyping
                .enable(MapperFeature.AUTO_DETECT_GETTERS)
                .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)
                .disable(MapperFeature.USE_GETTERS_AS_SETTERS)
                .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
                .enable(SerializationFeature.INDENT_OUTPUT)
                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        Foo foo = new Foo("bar");
        String serialized = mapper.writeValueAsString(foo); // {"bar" : "bar"}

        // Attempt to parse without causing an exception
        JsonNode jsonNode = mapper.readTree(serialized); // should not throw exception
        assertNotNull(jsonNode);

        JsonNode node = mapper.valueToTree(foo); // should work without exception
        assertNotNull(node);
    }
}
