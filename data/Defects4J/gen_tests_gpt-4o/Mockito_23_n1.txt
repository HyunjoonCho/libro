
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

public class AbstractClassTest {

    @Mock
    private ClassExtendsAbstractClass classExtendsAbstractClass;
    private A a;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test(expected = org.mockito.exceptions.misusing.WrongTypeOfReturnValue.class)
    public void testWrongTypeOfReturnValue() {
        // Setup the mock to return a specific value on 'give()' call
        Mockito.when(classExtendsAbstractClass.give()).thenReturn("aaa");

        // Create an instance of A with the mocked ClassExtendsAbstractClass
        a = new A(classExtendsAbstractClass);
        
        // Call doSomeThing() - This should not trigger the error
        // The error should already happen during the Mockito.when setup
        a.doSomeThing();
    }
}

// Define the abstract class
abstract class AbstractClass {
    abstract protected Long lol();
    abstract protected String wow();
    public String give() {
        wow();
        lol();
        return "give";
    }
}

// Define the concrete class extending the abstract class
class ClassExtendsAbstractClass extends AbstractClass {
    @Override
    protected Long lol() {
        return 2L;
    }
    @Override
    protected String wow() {
        return "WOW";
    }
}

// Define the class that uses ClassExtendsAbstractClass
class A {
    private ClassExtendsAbstractClass classExtendsAbstractClass;
    
    public A(ClassExtendsAbstractClass classExtendsAbstractClass) {
        this.classExtendsAbstractClass = classExtendsAbstractClass;
    }
    
    public String doSomeThing() {
        return classExtendsAbstractClass.wow();
    }
}
