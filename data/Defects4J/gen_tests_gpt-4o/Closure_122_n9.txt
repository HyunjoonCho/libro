public void testInconsistentNonJSDocCommentHandling() {
    String codeWithNonJSDocComment = "/*! @preserve Foo License */\nalert('foo');";
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setPreserveTypeAnnotations(true);
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", codeWithNonJSDocComment), options);
    
    // In this test, we expect a single warning about using a non-JSDoc comment with annotations
    assertEquals(1, compiler.getWarnings().length);
    JSError warning = compiler.getWarnings()[0];
    assertEquals("Bad type annotation. Non-JSDoc comment has annotations. Did you mean to start it with '/**'?", warning.description);

    // Also, verify that the comment is preserved when using '/*!'
    options.setPreserveAnnotationsByPrefix(new String[]{"@preserve"});
    Result resultWithPreserve = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", codeWithNonJSDocComment), options);
    String outputWithPreserve = compiler.toSource();
    assertTrue(outputWithPreserve.contains("@preserve Foo License"));
}