
import org.junit.Test;
import static org.junit.Assert.*;
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

public class JsonPointerTest {

    @Test
    public void testInvalidJsonPointerIndex() throws Exception {
        // Create a simple JSON structure with arrays and objects
        String json = "{\"array\": [10, 20, 30], \"object\": {\"00\": \"value\"}}";
        
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = mapper.readTree(json);

        // Create a JsonPointer that uses "00" as an array index
        JsonPointer pointer = JsonPointer.compile("/array/00");

        // Ensure that the pointer does not match an array index but a property name in the object node
        JsonNode resultNode = rootNode.at(pointer);
        
        // Assert that using '00' as an array index does not retrieve a value (indicating invalid index handling)
        assertTrue(resultNode.isMissingNode());
        
        // Verify that '00' can still match an actual property name in an object node
        JsonNode objectNode = rootNode.at(JsonPointer.compile("/object/00"));
        assertFalse(objectNode.isMissingNode());
        assertEquals("value", objectNode.asText());
    }
}
