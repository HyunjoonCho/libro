public void testTrueFalseReplacement() {
    String inputJavaScript = 
        "function some_function() {" +
        " var fn1;" +
        " var fn2;" +
        " if (any_expression) {" +
        " fn2 = external_ref;" +
        " fn1 = function (content) { return fn2(); }" +
        " }" +
        " return {" +
        " method1: function () {" +
        " if (fn1) fn1();" +
        " return true;" +
        " }," +
        " method2: function () {" +
        " return false;" +
        " }" +
        " }" +
        "}";

    String expectedOutputJavaScript =
        "function some_function() {" +
        " var a, b;" +
        " any_expression && (b = external_ref, a = function () { return b() });" +
        " return {" +
        " method1: function () {" +
        " a && a();" +
        " return !0;" + // true is replaced by !0
        " }," +
        " method2: function () {" +
        " return !1;"+ // false is replaced by !1
        " }" +
        " }" +
        "};";

    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    Compiler compiler = new Compiler();
    compiler.compile(SourceFile.fromCode("externs", ""), SourceFile.fromCode("test", inputJavaScript), options);
    
    String compiledCode = compiler.toSource();

    assertEquals(expectedOutputJavaScript.trim(), compiledCode.trim());
}