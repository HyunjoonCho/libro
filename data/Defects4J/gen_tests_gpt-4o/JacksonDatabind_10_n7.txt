
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

// Custom serializer (dummy implementation for testing)
class MySerializer extends com.fasterxml.jackson.databind.JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, com.fasterxml.jackson.core.JsonGenerator gen,
                          com.fasterxml.jackson.databind.SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField("prefix_" + entry.getKey(), entry.getValue());
        }
        gen.writeEndObject();
    }
}

// Class under test
class TestClass {
    private final Map<String, String> parameters = new HashMap<>();

    public TestClass() {
        parameters.put("key1", "value1");
        parameters.put("key2", "value2");
    }

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

public class JsonAnyGetterTest {

    @Test
    public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        TestClass testClass = new TestClass();
        
        String jsonOutput = objectMapper.writeValueAsString(testClass);
        
        // Without using the custom serializer, the keys should not be prefixed with "prefix_".
        // Thus, the test will show that @JsonSerialize is ignored in the presence of @JsonAnyGetter.
        String expectedJson = "{\"key1\":\"value1\",\"key2\":\"value2\"}";
        assertEquals(expectedJson, jsonOutput);
    }
}
