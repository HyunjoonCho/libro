public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();

    class MyBean {
        private Map<String, String> parameters = new HashMap<>();

        @JsonSerialize(using = MySerializer.class)
        @JsonAnyGetter
        public Map<String, String> getParameters() {
            return parameters;
        }
    }

    MyBean bean = new MyBean();
    bean.getParameters().put("key", "value");

    String json = mapper.writeValueAsString(bean);
    assertTrue(json.contains("Seriliazed"));
}

public static class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey(), "Serialized");
        }
        gen.writeEndObject();
    }
}