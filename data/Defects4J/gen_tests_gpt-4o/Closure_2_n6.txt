
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class InterfaceExtendsTest {

    @Test
    public void testMultipleExtendsInInterface() {
        // Set up the JavaScript source code that triggers the issue
        String jsCode =
                "/**\n" +
                " * @interface\n" +
                " * @extends {unknown_1}\n" +
                " * @extends {unknown_2}\n" +
                " */\n" +
                "function Foo() {}\n";

        // Instantiate the Closure Compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ALL, com.google.javascript.jscomp.CheckLevel.VERBOSE);

        // Prepare the JavaScript source files for the compiler
        JSSourceFile input = JSSourceFile.fromCode("input.js", jsCode);
        JSSourceFile externs = JSSourceFile.fromCode("externs.js", "");

        try {
            // Run the compiler
            Result result = compiler.compile(externs, input, options);

            // Check if the result has errors
            assertTrue("Compiler should not crash and produce an error.", result.success);
        } catch (RuntimeException e) {
            // Expecting a RuntimeException similar to NullPointerException due to the crash
            assertTrue("Expected compiler crash due to multiple extends with unknown types.", e instanceof NullPointerException);
        }
    }
}
