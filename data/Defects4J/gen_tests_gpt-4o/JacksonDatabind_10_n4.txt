public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    TestClass testObject = new TestClass();

    String json = mapper.writeValueAsString(testObject);
    // Expecting MySerializer to convert the map to a custom string format
    assertEquals("{\"parameters\":\"custom_serialized_output\"}", json);
}

static class TestClass {
    private final Map<String, String> parameters = new HashMap<>();

    public TestClass() {
        parameters.put("key", "value");
    }

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

public static class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeString("custom_serialized_output");
    }
}