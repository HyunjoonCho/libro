
import org.joda.time.DateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.DurationFieldType;
import org.junit.Test;

import static org.junit.Assert.*;

public class PeriodTypeBugTest {

    @Test
    public void testPeriodWithoutYearThrowsException() {
        DateTime startDate = new DateTime(2020, 1, 1, 0, 0);
        DateTime endDate = new DateTime(2021, 1, 1, 0, 0);

        try {
            // Attempting to create a period without including years.
            Period p = new Period(startDate, endDate, PeriodType.forFields(new DurationFieldType[]{
                    DurationFieldType.months(),
                    DurationFieldType.weeks()
            })).normalizedStandard(PeriodType.forFields(new DurationFieldType[]{
                    DurationFieldType.months(),
                    DurationFieldType.weeks()
            }));

            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException e) {
            assertTrue(e.getMessage().contains("Field is not supported"));
        }

        try {
            // Attempting to create a period without including years with years removed.
            Period p = new Period(startDate, endDate, PeriodType.standard().withYearsRemoved())
                    .normalizedStandard(PeriodType.standard().withYearsRemoved());

            fail("Expected UnsupportedOperationException to be thrown");
        } catch (UnsupportedOperationException e) {
            assertTrue(e.getMessage().contains("Field is not supported"));
        }
    }
}
