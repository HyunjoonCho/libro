
import org.apache.commons.cli2.CommandLine;
import org.apache.commons.cli2.Group;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.validation.NumberValidator;
import org.apache.commons.cli2.parser.Parser;
import org.apache.commons.cli2.option.DefaultOption;

/**
 * Test class for reproducing the bug where negative numbers are mistaken for options.
 */
public class NegativeNumbersTest {

    public void testNegativeNumberAsOptionArgument() {
        ArgumentBuilder aBuilder = new ArgumentBuilder();
        DefaultOptionBuilder oBuilder = new DefaultOptionBuilder();
        GroupBuilder gBuilder = new GroupBuilder();

        // Create an argument that accepts a numerical value
        org.apache.commons.cli2.Argument numArg = aBuilder
                .withValidator(NumberValidator.getNumberInstance())
                .withMinimum(1)
                .withMaximum(1)
                .create();

        // Create an option that requires the numerical argument
        Option numOpt = oBuilder
                .withLongName("num")
                .withArgument(numArg)
                .create();

        // Create a group containing all the necessary options
        Group options = gBuilder
                .withOption(numOpt)
                .create();

        // Parser to parse the command line options
        Parser parser = new Parser();

        parser.setGroup(options);

        String[] args = new String[]{"--num", "-0.1"};

        try {
            // Parse the command line arguments
            CommandLine cmd = parser.parse(args);
            // Check if the num argument value is correctly parsed as -0.1
            assertEquals("-0.1", cmd.getValue(numOpt));
        } catch (Exception e) {
            e.printStackTrace();
            fail("The parser failed to process a negative number argument correctly: " + e.getMessage());
        }
    }

    private void assertEquals(String expected, Object actual) {
        if (!expected.equals(actual.toString())) {
            throw new AssertionError("Expected: " + expected + ", but was: " + actual);
        }
    }

    private void fail(String message) {
        throw new AssertionError(message);
    }

    public static void main(String[] args) {
        NegativeNumbersTest test = new NegativeNumbersTest();
        test.testNegativeNumberAsOptionArgument();
        System.out.println("Test completed successfully.");
    }
}
