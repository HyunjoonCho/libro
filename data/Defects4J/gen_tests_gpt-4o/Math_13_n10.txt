
import org.apache.commons.math3.fitting.*;
import org.apache.commons.math3.optim.nonlinear.vector.*;
import org.junit.Test;
import org.junit.Assert;

public class LargeWeightsTest {

    @Test(expected = OutOfMemoryError.class)
    public void testLargeNumberOfWeights() {
        // Using 41200 weights to simulate the issue
        final int numberOfPoints = 41200;
        double[] xData = new double[numberOfPoints];
        double[] yData = new double[numberOfPoints];
        double[] weights = new double[numberOfPoints];

        // Initialize xData, yData, and weights with example values
        for (int i = 0; i < numberOfPoints; i++) {
            xData[i] = i;
            yData[i] = Math.sin(i); // or any appropriate function
            weights[i] = 1.0; // assuming equal weights for simplicity
        }

        // Set up the problem
        CurveFitter fitter = new CurveFitter(new EvenlyWeightedOptimizer(weights));

        // Add observed points
        for (int i = 0; i < numberOfPoints; i++) {
            fitter.addObservedPoint(xData[i], yData[i]);
        }

        // Define the function to fit
        PolynomialCurveFitter polynomialFitter = PolynomialCurveFitter.create(2);

        // This should throw an OutOfMemoryError due to the large number of weights
        fitter.fit(polynomialFitter);
    }
    
    // Mock class for illustration purpose, replace with real optimizer if exists
    static class EvenlyWeightedOptimizer extends MultivariateVectorOptimizer {
        private final double[] weights;

        public EvenlyWeightedOptimizer(double[] weights) {
            super(null);
            this.weights = weights;
        }

        protected PointVectorValuePair doOptimize() {
            // Mock implementation, just return something
            return new PointVectorValuePair(new double[]{}, new double[]{});
        }
    }
}
