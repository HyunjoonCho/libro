
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
import org.junit.Test;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;
import static org.junit.Assert.assertEquals;

public class UnmodifiableNonRandomAccessListTest {

    @Test
    public void testUnmodifiableNonRandomAccessList() throws Exception {
        // Creating an unmodifiable list from a LinkedList which does not implement RandomAccess
        Collection<?> exp = Collections.unmodifiableList(new LinkedList<>(Arrays.asList("first", "second")));

        // Creating a new ObjectMapper and enabling default typing
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
        
        // Serializing the unmodifiable list to JSON
        String json = mapper.writeValueAsString(exp);
        
        // Deserializing the JSON back into a Collection
        Collection<?> act = mapper.readValue(json, Collection.class);

        // Asserting that the original and deserialized collections are equal
        assertEquals(exp, act);
        
        // Asserting that the classes of the original and deserialized collections are the same
        assertEquals(exp.getClass(), act.getClass());
    }
}
