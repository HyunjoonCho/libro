
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class RegulaFalsiSolverTest {

    @Test
    public void testRegulaFalsiSolverBug() {
        final UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver regulaFalsiSolver = new RegulaFalsiSolver();
        
        try {
            regulaFalsiSolver.solve(100, f, 1, 10);
        } catch (IllegalStateException e) {
            assertEquals("Illegal state: maximal count (100) exceeded: evaluations", e.getMessage());
        }
    }

    @Test
    public void testPegasusSolver() {
        final UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver pegasusSolver = new PegasusSolver();
        double root = pegasusSolver.solve(100, f, 1, 10);
        System.out.println("Root found by PegasusSolver: " + root);
    }
}
