
import static org.junit.Assert.assertEquals;
import org.apache.commons.text.StringEscapeUtils;
import org.junit.Test;

public class StringEscapeUtilsTest {

    @Test
    public void testEscapeXMLWithSupplementaryCharacters() {
        // U+1F601 is the "GRINNING FACE WITH SMILING EYES" emoji, which is a supplementary character
        String input = "Here is a grinning face: \uD83D\uDE01";
        
        // Expected output: XML escape typically does not encode supplementary characters,
        // so the actual result is dependent on the expected library behavior.
        // In this test, we'll assume the bug is that it's handling the surrogate pair incorrectly.
        
        // Assuming the library currently fails and doesn't treat it as a whole supplementary character,
        // the expected behavior change from the bug report would correctly represent it with numeric
        // character reference &#128513; for U+1F601:
        String expectedOutput = "Here is a grinning face: &#128513;";
        
        // This will fail with the current issue in StringEscapeUtils.escapeXML() where it doesn't handle
        // supplementary characters correctly.
        String actualOutput = StringEscapeUtils.escapeXml10(input);

        // Assert that the actual escaped output matches the expected output
        assertEquals(expectedOutput, actualOutput);
    }
}
