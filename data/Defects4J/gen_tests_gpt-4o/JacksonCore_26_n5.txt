
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.async.ByteArrayFeeder;
import org.junit.Test;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.junit.Assert.assertEquals;

public class FeedingOffsetTest {

    @Test
    public void inputOffsetShouldNotAffectLocations() throws Exception {
        JsonFactory jsonFactory = new JsonFactory();
        JsonParser parser = jsonFactory.createNonBlockingByteArrayParser();
        ByteArrayFeeder feeder = (ByteArrayFeeder) parser.getNonBlockingInputFeeder();

        // Example byte input
        byte[] input = "[[[".getBytes(UTF_8);

        // Feed input starting from an offset of 2 with length 3
        feeder.feedInput(input, 2, 1); // Corrected length to fit the test case

        // Assert tokens and locations
        assertEquals(JsonToken.START_ARRAY, parser.nextToken());
        assertEquals(1, parser.getCurrentLocation().getByteOffset()); // Expected = 1
        assertEquals(1, parser.getTokenLocation().getByteOffset());   // Expected = 1

        // Feed input starting from an offset of 0 with length 1
        feeder.feedInput(input, 0, 1);

        // Assert tokens and locations
        assertEquals(JsonToken.START_ARRAY, parser.nextToken());
        assertEquals(2, parser.getCurrentLocation().getByteOffset());
        assertEquals(2, parser.getTokenLocation().getByteOffset());
    }
}
