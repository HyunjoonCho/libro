
import org.apache.commons.compress.archivers.ArchiveInputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.zip.ZipInputStream;

import static org.junit.Assert.*;

public class ArchiveStreamFactoryTest {

    @Test
    public void testJarArchiveInputStreamEncoding() {
        try {
            String testData = "dummy jar data";
            // Creating a byte stream to simulate archive content
            InputStream is = new ByteArrayInputStream(testData.getBytes("UTF-8"));
            ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream("jar", is, "UTF-8");

            // Check if the ArchiveInputStream is an instance of JarArchiveInputStream
            assertTrue(ais instanceof JarArchiveInputStream);

            // Check if encoding is passed correctly (hypothetical as JarArchiveInputStream doesn't use encoding directly)
            // This part would need an actual check related to encoding handling which depends on internal implementation
            // For demonstration purposes, we're assuming a method like getEncoding() exists which it actually doesn't
            // Note: Commons Compress doesn't expose encoding directly in all streams
            assertNull(((JarArchiveInputStream) ais).getEncoding());

            // Close streams
            ais.close();
            is.close();
        } catch (Exception e) {
            fail("Exception should not be thrown: " + e.getMessage());
        }
    }
}
