
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.*;

public class DeserializationTest {

    public static class SomeObjectThatCanBeAggregated {

        @JsonCreator
        public SomeObjectThatCanBeAggregated(Object obj) {
            System.out.println(obj + " //" + obj.getClass());
        }
    }

    @Test
    public void testDeserializationOfEmptyObject() throws IOException {
        ObjectMapper mapper = new ObjectMapper();

        // 1. Test with array
        SomeObjectThatCanBeAggregated fromArray = mapper.readValue("[]", SomeObjectThatCanBeAggregated.class);
        assertNotNull(fromArray);

        // 2. Test with array containing empty object
        SomeObjectThatCanBeAggregated fromArrayWithEmptyObject = mapper.readValue("[{}]", SomeObjectThatCanBeAggregated.class);
        assertNotNull(fromArrayWithEmptyObject);

        // 3. Test with object containing null key
        SomeObjectThatCanBeAggregated fromObjectWithNullKey = mapper.readValue("{\"key\":null}", SomeObjectThatCanBeAggregated.class);
        assertNotNull(fromObjectWithNullKey);

        // 4. Test with empty object
        try {
            SomeObjectThatCanBeAggregated fromEmptyObject = mapper.readValue("{}", SomeObjectThatCanBeAggregated.class);
            assertNotNull(fromEmptyObject);
        } catch (JsonMappingException e) {
            fail("Deserialization of \"{}\" should not fail: " + e.getMessage());
        }
    }
}
