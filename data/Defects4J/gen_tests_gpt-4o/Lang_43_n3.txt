
import org.apache.commons.lang3.text.ExtendedMessageFormat;

import java.text.Format;
import java.util.HashMap;
import java.util.Map;

public class ExtendedMessageFormatTest {

    public static void main(String[] args) {
        try {
            // Custom format factory (assembling class)
            Map<String, FormatFactory> formatRegistry = new HashMap<>();
            formatRegistry.put(DummyFormatFactory.DUMMY_FORMAT, new DummyFormatFactory());

            // Test pattern with single quotes
            String pattern = "it''s a {dummy} 'test'!";

            // Intentionally causing the OutOfMemoryError
            ExtendedMessageFormat mf = new ExtendedMessageFormat(pattern, formatRegistry);
            String formattedPattern = mf.format(new String[]{"great"});

            // Output the result
            System.out.println(formattedPattern);
        } catch (OutOfMemoryError e) {
            System.err.println("OutOfMemoryError was thrown as expected.");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    // Implement a DummyFormatFactory
    private static class DummyFormatFactory implements FormatFactory {
        public static final String DUMMY_FORMAT = "dummy";

        @Override
        public Format getFormat(String name, String arguments, Locale locale) {
            return new Format() {
                @Override
                public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {
                    return toAppendTo.append(obj);
                }

                @Override
                public Object parseObject(String source, ParsePosition pos) {
                    return source;
                }
            };
        }
    }
}
