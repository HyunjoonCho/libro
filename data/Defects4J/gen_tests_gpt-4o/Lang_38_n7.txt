
import static org.junit.Assert.assertEquals;

import java.util.GregorianCalendar;
import java.util.TimeZone;

import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.Test;

public class DateFormatUtilsTest {

    @Test
    public void testFormat_CalendarIsoMsZulu_FailsWithoutGetTime() {
        final String expectedDateTime = "2009-10-16T16:42:16.000Z";

        // Construct the calendar with the specified time zone and set the date
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);

        // Using FastDateFormat to format the date
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
        
        // The test here is to reproduce the failure, so we expect it might not match
        String formattedDate = format.format(cal);

        // Assert that the formatted date does not match expected output, demonstrating the issue
        assertEquals("Without calling getTime() on the Calendar, the formatting fails to adjust TimeZone correctly",
                expectedDateTime, formattedDate);
    }

    @Test
    public void testFormat_CalendarIsoMsZulu_PassesWithGetTime() {
        final String expectedDateTime = "2009-10-16T16:42:16.000Z";
        
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);
        
        // Call getTime() to trigger the internal field computation in the Calendar
        cal.getTime();

        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
        
        String formattedDate = format.format(cal);

        // Assert that the formatted date matches the expected output when getTime() is used
        assertEquals("Calling getTime() on the Calendar resolves TimeZone adjustment issue",
                expectedDateTime, formattedDate);
    }
}
