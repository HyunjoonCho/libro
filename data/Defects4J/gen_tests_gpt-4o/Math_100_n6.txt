
import org.apache.commons.math.estimation.AbstractEstimator;
import org.apache.commons.math.estimation.EstimationProblem;
import org.apache.commons.math.estimation.EstimatedParameter;
import org.apache.commons.math.estimation.WeightedMeasurement;
import org.apache.commons.math.estimation.LevenbergMarquardtEstimator;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;

public class AbstractEstimatorTest {

    @Test(expected = ArrayIndexOutOfBoundsException.class)
    public void testGetCovariancesWithBoundParameters() {
        // Setting up the test with bound and unbound parameters.
        EstimationProblem problem = new TestEstimationProblem();

        // Use an instance of LevenbergMarquardtEstimator (a concrete subclass of AbstractEstimator).
        AbstractEstimator estimator = new LevenbergMarquardtEstimator();
        
        // Attempting to solve the problem, which should internally call getCovariances().
        estimator.estimate(problem);
    }

    @Test(expected = ArrayIndexOutOfBoundsException.class)
    public void testGuessParametersErrorsWithBoundParameters() {
        // Setting up the test with bound and unbound parameters.
        EstimationProblem problem = new TestEstimationProblem();

        // Use an instance of LevenbergMarquardtEstimator (a concrete subclass of AbstractEstimator).
        AbstractEstimator estimator = new LevenbergMarquardtEstimator();
        
        // Invoke guessParametersErrors() directly after setting up some dummy estimate.
        estimator.guessParametersErrors();
    }

    private static class TestEstimationProblem implements EstimationProblem {
        private final EstimatedParameter[] parameters;
        private final WeightedMeasurement[] measurements;
        
        public TestEstimationProblem() {
            parameters = new EstimatedParameter[]{
                new EstimatedParameter("param1", 1.0, true),   // Unbound parameter
                new EstimatedParameter("param2", 2.0, false),  // Bound parameter
                new EstimatedParameter("param3", 3.0, true)    // Unbound parameter
            };
            measurements = new WeightedMeasurement[0];  // No actual measurements needed for this test
        }

        @Override
        public EstimatedParameter[] getAllParameters() {
            return parameters;
        }

        @Override
        public EstimatedParameter[] getUnboundParameters() {
            return Arrays.stream(parameters)
                         .filter(EstimatedParameter::isEstimate)
                         .toArray(EstimatedParameter[]::new);
        }

        @Override
        public WeightedMeasurement[] getMeasurements() {
            return measurements;
        }
    }
}
