public void testInvalidPropertyNotReported() {
    // Mock console for the test
    Console mockConsole = Mockito.mock(Console.class);
    Mockito.doNothing().when(mockConsole).log(Mockito.anyString());

    // Class definition
    var makeClass = function(protoMethods) {
        var clazz = function() {
            this.initialize.apply(this, arguments);
        };
        for (var i in protoMethods) {
            clazz.prototype[i] = protoMethods[i];
        }
        return clazz;
    };

    // Function definition
    var Person = function(options) {};
    Person = makeClass(/** @lends Person.prototype */ {
        /** 
         * @this {Person}
         * @param {{name: string, height: number}} options
         */
        initialize: function(options) {
            /** @type {string} */ 
            this.name_ = options.thisPropDoesNotExist;
        },

        /** 
         * @param {string} message
         * @this {Person}
         */
        say: function(message) {
            mockConsole.log(this.name_ + ' says: ' + message);
        }
    });

    // Create instance and use method
    var joe = new Person({name: 'joe', height: 300});
    joe.say('hi');

    // Verify that log was called with the incorrect message
    Mockito.verify(mockConsole).log(Mockito.contains("undefined says: hi"));
}