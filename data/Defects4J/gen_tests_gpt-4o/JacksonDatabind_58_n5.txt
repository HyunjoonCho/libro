
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ThrowableDeserializationTest {

    @JsonIgnoreProperties("cause")
    public static class MyException extends RuntimeException {
        private String message;

        public MyException() {
            super();
        }

        public MyException(String message) {
            super(message);
            this.message = message;
        }

        public String getMessage() {
            return message;
        }

        public void setMessage(String message) {
            this.message = message;
        }
    }

    @Test
    public void testDeserializeMyException() {
        String json = "{\"message\":\"Test Exception\"}";

        ObjectMapper mapper = new ObjectMapper();
        // Assume Google App Engine-like environment by disabling access to private fields
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);

        try {
            MyException result = mapper.readValue(json, MyException.class);
            assertEquals("Test Exception", result.getMessage());
        } catch (Exception e) {
            // Check that the IllegalAccessException from accessing 'cause' is reproduced
            assertEquals("java.lang.IllegalAccessException", e.getCause().getClass().getName());
        }
    }
}
