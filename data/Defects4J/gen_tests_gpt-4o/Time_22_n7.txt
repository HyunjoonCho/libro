
import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DurationToPeriodTest {

    @Test
    public void testDurationToPeriodWithGMTTimezone() {
        // Set the default timezone to GMT
        DateTimeZone.setDefault(DateTimeZone.forID("Etc/GMT"));
        
        Duration aDuration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 
                + DateTimeConstants.MILLIS_PER_MINUTE * 50 
                + DateTimeConstants.MILLIS_PER_SECOND * 14);
        
        Period period = aDuration.toPeriod();
        
        // Expecting the period to be split into days and remaining time
        assertEquals("P1DT6H50M14S", period.toString());
    }

    @Test
    public void testDurationToPeriodWithDSTTimezone() {
        // Set the default timezone to a DST-affected zone
        DateTimeZone.setDefault(DateTimeZone.forID("America/Chicago"));
        
        Duration aDuration = new Duration(DateTimeConstants.MILLIS_PER_HOUR * 30 
                + DateTimeConstants.MILLIS_PER_MINUTE * 50 
                + DateTimeConstants.MILLIS_PER_SECOND * 14);
        
        Period period = aDuration.toPeriod();
        
        // Expecting all the hours to be in the hours bucket
        assertEquals("PT30H50M14S", period.toString());
    }
}
