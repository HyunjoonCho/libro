public void testInjectMocksIntoWrongField() {
    class TestClass {
        TextView txtGateView;
        TextView txtNextStep;
        
        public TestClass() {
            this.txtGateView = new TextView(null);
            this.txtNextStep = new TextView(null);
        }
    }
    
    TestClass testInstance = new TestClass();
    TextView mockTxtNextStep = mock(TextView.class);
    
    injectMocks(testInstance, mockTxtNextStep);

    assertNotSame(mockTxtNextStep, testInstance.txtGateView);
    assertSame(mockTxtNextStep, testInstance.txtNextStep);
}

private void injectMocks(TestClass testInstance, TextView mockTxtNextStep) {
    Optional<Field> fieldOpt = Arrays.stream(testInstance.getClass().getDeclaredFields())
            .filter(field -> field.getType().equals(TextView.class))
            .filter(field -> field.getName().equals("txtNextStep"))
            .findFirst();
    fieldOpt.ifPresent(field -> {
        try {
            field.setAccessible(true);
            field.set(testInstance, mockTxtNextStep);
        } catch (IllegalAccessException e) {
            throw new RuntimeException(e);
        }
    });
}