public void testInheritanceWarning() {
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    
    String jsCode = "/**\n" +
                    " * @constructor\n" +
                    " */\n" +
                    "function SuperClass() {}\n" +
                    "\n" +
                    "SuperClass.prototype.CustomMethod = function() {};\n" +
                    "\n" +
                    "/**\n" +
                    " * @constructor\n" +
                    " * @extends {SuperClass}\n" +
                    " */\n" +
                    "function SubClass() {}\n" +
                    "SubClass.prototype = new SuperClass();\n" +
                    "\n" +
                    "/**\n" +
                    " * @override\n" +
                    " */\n" +
                    "SubClass.prototype.CustomMethod = function() {\n" +
                    "    this.myProperty = 'value';\n" +
                    "};\n" +
                    "\n" +
                    "window['SubClassInstance'] = new SubClass();";

    Compiler compiler = new Compiler();
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                     SourceFile.fromCode("test.js", jsCode), 
                                     options);

    List<JSError> warnings = ImmutableList.copyOf(result.warnings);
    assertEquals(1, warnings.size());
    assertEquals("JSC_UNKNOWN_OVERRIDE", warnings.get(0).getType().key);
}