public void testIssue172CountAttributeNode() {
    NodeTest nodeTest1 = new NodeNameTest(new QName("example"));
    NodeTest nodeTest2 = new NodeTypeTest(Compiler.NODE_TYPE_NODE);
    NodeTest nodeTestInvalid = new NodeTypeTest(Compiler.NODE_TYPE_COMMENT);

    AttributeContext context = new AttributeContext();
    
    assertTrue(context.isMatchingNodeTest(nodeTest1));  // should return true for NodeNameTest
    assertTrue(context.isMatchingNodeTest(nodeTest2));  // should return true for NodeTypeTest with NODE_TYPE_NODE
    assertFalse(context.isMatchingNodeTest(nodeTestInvalid));  // should return false for invalid NodeTypeTest
}

private class AttributeContext {

    private static final QName WILDCARD = new QName("", "*");

    public boolean isMatchingNodeTest(NodeTest nodeTest) {
        final QName name;
        
        if (nodeTest instanceof NodeTypeTest) {
            if (((NodeTypeTest) nodeTest).getNodeType() == Compiler.NODE_TYPE_NODE) {
                name = WILDCARD;
            } else {
                return false;
            }
        } else if (nodeTest instanceof NodeNameTest) {
            name = ((NodeNameTest) nodeTest).getNodeName();
        } else {
            return false;
        }
        
        // Dummy placeholder for the actual logic that would use "name"
        return true;
    }
}

private interface NodeTest {}

private class NodeNameTest implements NodeTest {
    private final QName nodeName;

    public NodeNameTest(QName nodeName) {
        this.nodeName = nodeName;
    }

    public QName getNodeName() {
        return nodeName;
    }
}

private class NodeTypeTest implements NodeTest {
    private final int nodeType;

    public NodeTypeTest(int nodeType) {
        this.nodeType = nodeType;
    }

    public int getNodeType() {
        return nodeType;
    }
}

private static class Compiler {
    public static final int NODE_TYPE_NODE = 1;
    public static final int NODE_TYPE_COMMENT = 2;
}

private static class QName {
    private final String namespace;
    private final String localPart;

    public QName(String namespace, String localPart) {
        this.namespace = namespace;
        this.localPart = localPart;
    }

    public String getNamespace() {
        return namespace;
    }

    public String getLocalPart() {
        return localPart;
    }
}