
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.Test;

@JsonIgnoreProperties(ignoreUnknown = true)
public class SerializationTest {

    // Define the interface
    public interface AccessionIdentifier {
    }

    // Base class that implements the interface
    public static class BaseAccessionIdentifier implements AccessionIdentifier {
        public String id = "base-id";
        
        // Default constructor is important for deserialization
        public BaseAccessionIdentifier() {}
    }

    // Derived class with additional fields
    public static class DerivedAccessionIdentifier extends BaseAccessionIdentifier {
        public String additionalField = "extra-info";

        public DerivedAccessionIdentifier() {}
    }

    // Class that utilizes the serialization annotations
    public static class Foo {
        @JsonSerialize(as = BaseAccessionIdentifier.class)
        @JsonDeserialize(as = BaseAccessionIdentifier.class)
        private final AccessionIdentifier reference;

        public Foo(AccessionIdentifier reference) {
            this.reference = reference;
        }

        public AccessionIdentifier getReference() {
            return reference;
        }
    }

    @Test
    public void testJsonSerializeAsSuperType() throws JsonProcessingException {
        DerivedAccessionIdentifier derived = new DerivedAccessionIdentifier();
        Foo foo = new Foo(derived);

        ObjectMapper objectMapper = new ObjectMapper();

        try {
            String json = objectMapper.writeValueAsString(foo);
            System.out.println(json);
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ex;
        }
    }
}
