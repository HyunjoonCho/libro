
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Arrays;

public class TarArchiveInputStreamTest {

    @Test(expected = IllegalArgumentException.class)
    public void testLargeUserIdInTarEntry() throws Exception {
        // Construct a tar header with a big user-id value
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] header = new byte[512];
        
        // Set a large user ID in octal format (triggering the error)
        // Note: `62410554` in the error corresponds to octal format of a large number
        // Fill only the necessary part of this header
        System.arraycopy("testfile.txt".getBytes(), 0, header, 0, "testfile.txt".length());
        System.arraycopy("0000000062410554".getBytes(), 0, header, 108, 12); // PAX support for large uid

        // Write this header to the output stream
        baos.write(header);

        // Ensure the padding (if any) for the tar entry data to simulate correct tar
        baos.write(new byte[512]);

        // Wrap the byte array output stream to a byte array input stream
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        TarArchiveInputStream tais = new TarArchiveInputStream(bais);

        // Attempt to read the entry, which should throw the IllegalArgumentException
        TarArchiveEntry entry = tais.getNextTarEntry();
    }
}
