
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solvers.BrentSolver;
import org.apache.commons.math.analysis.solvers.UnivariateRealSolver;

import static org.junit.Assert.assertEquals;

public class BrentSolverTest {
    
    public static void main(String[] args) {
        testBrentSolverStopsAtZero();
    }
    
    public static void testBrentSolverStopsAtZero() {
        UnivariateRealFunction f = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                // This function has a root at x = -100000.0
                return (x == -100000.0) ? 0.0 : x + 101945.04630982173;
            }
        };

        UnivariateRealSolver solver = new BrentSolver();

        try {
            // This should not throw an exception, and should return 0 as the root.
            double root = solver.solve(f, -100000.0, Double.MAX_VALUE);
            assertEquals(-100000.0, root, 1e-6);
            System.out.println("Test passed. Root found: " + root);
        } catch (Exception e) {
            System.err.println("Test failed with exception: " + e.getMessage());
        }
    }
}
