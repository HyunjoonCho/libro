
import static org.mockito.Mockito.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;
import org.mockito.Mock;

import java.util.List;
import java.util.ArrayList;

public class AbstractClassSpyingTest {

    // Example 1: Fake with trivial Logic
    @Mock
    abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();
        
        @Override
        public void addEmail(String email) {
            emails.add(email);
        }
        
        @Override
        public List<String> getEmails() {
            return List.copyOf(emails);
        }
    }
    
    private FakeUserAccount userAccount;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        userAccount = spy(FakeUserAccount.class);
    }

    @Test
    public void testFakeUserAccount() {
        userAccount.addEmail("test@example.com");
        assertEquals(1, userAccount.getEmails().size());
        assertEquals("test@example.com", userAccount.getEmails().get(0));
    }

    // Example 2: Callback-style API
    @Mock
    abstract class MockAccountService implements AccountService {
        @Override
        public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }
        
        abstract UserAccount getAccount(String id);
    }

    private MockAccountService service;
    private UserAccount expectedAccount;

    @BeforeEach
    public void setupAccountService() {
        service = mock(MockAccountService.class);
        expectedAccount = mock(UserAccount.class);
    }

    @Test
    public void testMockAccountService() {
        when(service.getAccount("id")).thenReturn(expectedAccount);
        
        AsyncCallback<UserAccount> callback = mock(AsyncCallback.class);
        service.getAccount("id", callback);
        
        verify(callback).onSuccess(expectedAccount);
    }

    // Example 3: Uninteresting parameters
    @Mock
    abstract class MockAccountRpcService implements AccountRpcService {
        @Override
        public FutureAccount getAccount(RpcContext context, String id) {
            assertNotNull(context);
            return getAccount(id);
        }
        
        abstract FutureAccount getAccount(String id);
    }

    private MockAccountRpcService rpcService;
    private FutureAccount futureAccount;

    @BeforeEach
    public void setupRpcService() {
        rpcService = mock(MockAccountRpcService.class);
        futureAccount = mock(FutureAccount.class);
    }

    @Test
    public void testMockAccountRpcService() {
        when(rpcService.getAccount("id")).thenReturn(futureAccount);
        
        RpcContext context = new RpcContext();
        FutureAccount account = rpcService.getAccount(context, "id");
        
        assertEquals(futureAccount, account);
    }
    
    // Auxiliary interfaces and classes to make the tests self-contained
    interface UserAccount {
        List<String> getEmails();
        void addEmail(String email);
    }
    
    interface AccountService {
        void getAccount(String id, AsyncCallback<UserAccount> callback);
    }
    
    interface AccountRpcService {
        FutureAccount getAccount(RpcContext context, String id);
    }
    
    interface AsyncCallback<T> {
        void onSuccess(T t);
        void onFailure(Throwable t);
    }
    
    class FutureAccount {}

    class RpcContext {}
}
