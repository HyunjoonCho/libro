public void testWrongScaleParameterInEmbeddedRungeKutta() {
    double[] y0 = {1.0, 0.0, 0.0};
    double[] yDot = {0.0, 1.0, 0.0};
    double t0 = 0;
    double tEnd = 10;
    double[] y = new double[y0.length];

    FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return y0.length;
        }

        public void computeDerivatives(double t, double[] y, double[] yDot) {
            System.arraycopy(yDot, 0, yDot, 0, yDot.length);
        }
    };

    double absoluteTolerance = 1.0e-10;
    double relativeTolerance = 1.0e-10;

    DormandPrince853Integrator integrator = new DormandPrince853Integrator(
        1.0e-6, 100.0, absoluteTolerance, relativeTolerance);

    FirstOrderIntegratorTestProblem testProblem = new FirstOrderIntegratorTestProblemIntegrator(
        integrator, ode, null, y0, t0, tEnd, y, yDot);

    double[] expectedFinalState = {Math.cos(tEnd), Math.sin(tEnd), 0.0};

    try {
        integrator.integrate(ode, t0, y0, tEnd, y);
    } catch (Exception e) {
        fail("Integration failed: " + e.getMessage());
    }

    for (int i = 0; i < y.length; i++) {
        assertEquals(expectedFinalState[i], y[i], absoluteTolerance);
    }
}