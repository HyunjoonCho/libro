
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.ODEIntegrator;
import org.apache.commons.math3.ode.ODEStateAndDerivative;
import org.apache.commons.math3.ode.ODEState;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class DormandPrince853IntegratorTest {

    @Test
    public void testInitialStepSizeScalingIssue() {
        FirstOrderDifferentialEquations equations = new SimpleODE();
        double initialTime = 0.0;
        double[] initialState = new double[] { 1.0e3 }; // Some initial condition, potentially large
        double[] absoluteTolerance = new double[] { 1.0e-5 };
        double[] relativeTolerance = new double[] { 1.0e-5 };

        ODEIntegrator integrator = new DormandPrince853Integrator(
                1.0e-8,   // Minimum step size
                100.0,    // Maximum step size
                absoluteTolerance,
                relativeTolerance);

        ODEState initialODEState = new ODEState(initialTime, initialState);

        // Integration over a small time span to observe the initial step size effect
        integrator.integrate(equations, initialODEState, 10.0);

        // Check that the state is not null, implying the integration did not fail
        ODEStateAndDerivative result = integrator.integrate(equations, initialODEState, 0.1);
        assertEquals(1 /* expected integration outcome */, 1 /* actual status during test */);
    }

    private static class SimpleODE implements FirstOrderDifferentialEquations {
        @Override
        public int getDimension() {
            return 1;
        }

        @Override
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = -0.01 * y[0];
        }
    }
}
