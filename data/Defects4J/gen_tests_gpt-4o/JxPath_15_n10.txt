
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import java.io.StringReader;

import static org.junit.Assert.assertEquals;

public class XPathUnionTest {

    @Test
    public void testXPathUnionReturnsNodesInDocumentOrder() throws Exception {
        String xml = "<MAIN><A>avalue</A><B>bvalue</B></MAIN>";
        Document doc = loadXMLFromString(xml);

        XPathFactory xPathFactory = XPathFactory.newInstance();
        XPath xPath = xPathFactory.newXPath();

        // XPath expression using union of /MAIN/B and /MAIN/A
        String expression = "string(/MAIN/B | /MAIN/A)";

        XPathExpression xPathExpression = xPath.compile(expression);
        String result = (String) xPathExpression.evaluate(doc, XPathConstants.STRING);

        // The expected result should be "avalue" because A is before B in document order
        assertEquals("avalue", result);
    }

    private static Document loadXMLFromString(String xml) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        InputSource is = new InputSource(new StringReader(xml));
        return builder.parse(is);
    }
}
