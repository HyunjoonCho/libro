
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
import org.junit.Test;

import java.io.IOException;

// Vulnerable class to demonstrate unsafe Java deserialization with Jackson
public class JacksonDeserializationVulnerabilityTest {

    public static class Exploit {
        // Override toString to demonstrate deserialization
        @Override
        public String toString() {
            // In actual exploitation, a malicious payload would execute arbitrary code
            return "Exploit toString method executed";
        }
    }

    @Test(expected = IOException.class)
    public void testDefaultTypingVulnerability() throws IOException {
        // Setup the ObjectMapper with default typing enabled (vulnerable)
        ObjectMapper mapper = new ObjectMapper();

        // Default typing should NOT be used without a configured polymorphic type validator
        // However, here we demonstrate the vulnerability with 'enableDefaultTyping'
        mapper.activateDefaultTyping(BasicPolymorphicTypeValidator.builder().build(), ObjectMapper.DefaultTyping.EVERYTHING);

        // Serialized payload that exploits the vulnerability
        // Payload would typically include a class name to instantiate (e.g., "com.example.Exploit")
        String maliciousPayload = "[\"com.example.jackson.Exploit\", {}]";

        // Deserialization should trigger the security vulnerability
        Object obj = mapper.readValue(maliciousPayload, Object.class);

        // Print to visually demonstrate the deserialization process (a real exploit might execute arbitrary code instead)
        System.out.println(obj.toString());
    }
}
