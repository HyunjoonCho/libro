public void testGetResultShouldReturnBestOptimization() {
    // Setup Mock Optimizer
    UnivariateRealOptimizer mockOptimizer = mock(UnivariateRealOptimizer.class);
    when(mockOptimizer.optimize(anyInt(), any(UnivariateRealFunction.class), anyDouble(), anyDouble()))
        .thenAnswer(invocation -> {
            int start = (int) invocation.getArguments()[2];
            return new UnivariateRealPointValuePair(start, -Math.abs(start - 2));
        });

    // Setup MultiStartUnivariateRealOptimizer
    int starts = 5;
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer(mockOptimizer, starts);

    // Perform optimization with multiple starts
    optimizer.optimize(new MaxEval(1000), new Func(), GoalType.MINIMIZE, 0, 4);

    // Validate that getResult() returns the best optimization result
    assertEquals(2.0, optimizer.getResult(), 1e-15);
}

private static class Func implements UnivariateRealFunction {
    @Override
    public double value(double x) {
        return -Math.pow(x - 2, 2) + 4;
    }
}