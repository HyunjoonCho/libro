
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolver() {
        // Define the linear objective function
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0);

        // Create a list of constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0));
        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0));
        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0));
        constraints.add(new LinearConstraint(new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0));
        constraints.add(new LinearConstraint(new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0));

        // Perform optimization
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);

        // Extract solution
        double[] solutionPoint = solution.getPoint();
        double optimalValue = solution.getValue();

        // Assert the expected optimal value
        assertEquals(25.8, optimalValue, 1e-5); // Expected optimal value
        assertEquals(10.0, solutionPoint[0], 1e-5); // x0
        assertEquals(0.0, solutionPoint[1], 1e-5); // x1
        assertEquals(8.0, solutionPoint[2], 1e-5); // x2
        assertEquals(0.0, solutionPoint[3], 1e-5); // x3
        assertEquals(5.0, solutionPoint[4], 1e-5); // x4
        assertEquals(23.0, solutionPoint[5], 1e-5); // x5

        // Ensure the constraints are satisfied
        assertEquals(23.0, solutionPoint[0] + solutionPoint[2] + solutionPoint[4], 1e-5); // r1: x0 + x2 + x4 = 23
        assertEquals(23.0, solutionPoint[1] + solutionPoint[3] + solutionPoint[5], 1e-5); // r2: x1 + x3 + x5 = 23
        assertTrue(solutionPoint[0] >= 10.0); // r3: x0 >= 10
        assertTrue(solutionPoint[2] >= 8.0); // r4: x2 >= 8
        assertTrue(solutionPoint[4] >= 5.0); // r5: x4 >= 5
    }
}
