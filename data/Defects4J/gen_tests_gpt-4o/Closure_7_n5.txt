script
/**
 * Reduced test case demonstrating the issue with goog.isFunction and type inference.
 */

/**
 * @param {*} object Any object.
 * @return {boolean}
 */
test.isMatched = function(object) {
    if (goog.isDef(object)) {
        if (goog.isFunction(object)) {
            // return object();
        } else if (goog.isBoolean(object)) {
            // return object;
        } else if (goog.isString(object)) {
            // return test.isDef(object);
        } else if (goog.isArray(object)) {
            // Accessing the length property in case of an array
            var i = object.length;
            // Test assertion - expects no warnings about accessing length
            assertTrue(typeof i === 'number');
        }
    }
    return false;
};

// Mock for demonstration purpose
goog = {
    isDef: function(value) {
        return value !== undefined;
    },
    isFunction: function(value) {
        return typeof value === 'function';
    },
    isBoolean: function(value) {
        return typeof value === 'boolean';
    },
    isString: function(value) {
        return typeof value === 'string';
    },
    isArray: function(value) {
        return Array.isArray(value);
    }
};

function assertTrue(condition) {
    if (!condition) {
        throw new Error('Assertion failed');
    }
}

// Example usage to trigger the issue
try {
    // This line should not trigger a type inference warning for accessing length
    test.isMatched([1, 2, 3]); 
    console.log('Test passed');
} catch (e) {
    console.error('Test failed:', e.message);
}
