
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertThrows;

public class HandleUnknownTypeIdTest {

    static class BaseType {
        public String name;
    }

    @Test
    public void testDeserializationWithDeserializationProblemHandler() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg) throws IOException {
                // Simulating the return of Void.class causing NPE
                return ctxt.constructType(Void.class);
            }
        });
        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);

        String json = "{\"@type\":\"unknownTypeId\",\"name\":\"test\"}";

        assertThrows(NullPointerException.class, () -> {
            mapper.readValue(json, BaseType.class);
        });
    }
}
