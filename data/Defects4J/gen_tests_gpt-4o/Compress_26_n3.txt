
import org.apache.commons.io.IOUtils;
import org.junit.Test;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.NullCipher;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.junit.Assert.assertEquals;

public class IOUtilsSkipTest {

    @Test
    public void testIOSkipWithCipherInputStream() throws IOException {
        byte[] inputBytes = new byte[1024];
        
        // Fill the array with some data
        for (int i = 0; i < inputBytes.length; i++) {
            inputBytes[i] = (byte) i;
        }

        // Use a NullCipher to essentially echo the input but still wrap in a CipherInputStream
        Cipher cipher = new NullCipher();
        InputStream byteArrayInputStream = new ByteArrayInputStream(inputBytes);
        CipherInputStream cipherInputStream = new CipherInputStream(byteArrayInputStream, cipher);

        // Try to skip more bytes than available
        long bytesToSkip = 500;
        long bytesSkipped = IOUtils.skip(cipherInputStream, bytesToSkip);

        // Check if the skip functionality works as described in the bug report
        assertEquals("Skipped byte count should be 500", bytesToSkip, bytesSkipped);
        
        // Continue to ensure the stream is positioned correctly by attempting a read
        int expectedByte = 500;
        int actualByte = cipherInputStream.read();
        
        assertEquals("The byte after skipping should be 500", expectedByte, actualByte);
    }
}
