
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import java.util.List;

import static org.junit.Assert.assertTrue;

public class MissingPropertyErrorTest {

    @org.junit.Test
    public void testWrongTypeNameReportedOnMissingPropertyError() {
        String jsCode = "/**\n" +
                        " * @constructor\n" +
                        " */\n" +
                        "function C2() {}\n" +
                        "\n" +
                        "/**\n" +
                        " * @constructor\n" +
                        " */\n" +
                        "function C3(c2) {\n" +
                        "    /**\n" +
                        "     * @type {C2}\n" +
                        "     * @private\n" +
                        "     */\n" +
                        "    this.c2_ = c2;\n" +
                        "    use(this.c2_.prop);\n" +
                        "}\n" +
                        "\n" +
                        "function use(x) {}"; 
        
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Here we assume some options and checks are set up, e.g., type checking
        // Enable whatever checks are required to trigger property analysis
        
        options.setCheckTypes(true);

        // Compile the code
        Result result = compiler.compile(
            SourceFile.fromCode("externs.js", ""), 
            SourceFile.fromCode("input.js", jsCode),
            options
        );
        
        // Check for the expected error
        List<JSError> errors = result.errors;
        boolean found = false;
        String expectedMessage = "Property prop never defined on C2";
        
        for (JSError error : errors) {
            if (error.description.contains(expectedMessage)) {
                found = true;
                break;
            }
        }
        
        assertTrue("Expected error message not found", found);
    }
}
