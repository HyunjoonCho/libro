
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.io.StringWriter;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JsonWriterTest {

    @Test
    public void testWritingPseudoNumericValues() throws IOException {
        StringWriter stringWriter = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(stringWriter);
        
        // Enable lenient mode
        jsonWriter.setLenient(true);
        
        try {
            // Attempt to write NaN using boxed Double (should succeed)
            jsonWriter.beginArray();
            jsonWriter.value((Number) Double.valueOf(Double.NaN));
            jsonWriter.endArray();
            
            // Verify the output
            assertEquals("[NaN]", stringWriter.toString());
        } finally {
            jsonWriter.close();
        }
        
        stringWriter = new StringWriter();
        jsonWriter = new JsonWriter(stringWriter);
        
        // Enable lenient mode
        jsonWriter.setLenient(true);
        
        try {
            // Attempt to write NaN directly as double (should throw exception)
            jsonWriter.beginArray();
            jsonWriter.value(Double.NaN);
            jsonWriter.endArray();
        } catch (IllegalArgumentException e) {
            assertEquals("Numeric values must be finite, but was NaN", e.getMessage());
        } finally {
            jsonWriter.close();
        }
    }
}
