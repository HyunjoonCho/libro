
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

public class InvalidFormatExceptionTest {

    public static class CustomIntegerDeserializer extends com.fasterxml.jackson.databind.JsonDeserializer<Integer> {
        @Override
        public Integer deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
            try {
                return Integer.valueOf(p.getText());  // This will cause an InvalidFormatException when text is not a valid integer
            } catch (NumberFormatException e) {
                throw JsonMappingException.from(ctxt, "Invalid number format", e);
            }
        }
    }

    @Test
    public void testInvalidFormatExceptionIndexNotSet() {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(Integer.class, new CustomIntegerDeserializer());
        mapper.registerModule(module);

        String jsonArray = "[\"10\", \"invalid_number\", \"30\"]";

        try {
            mapper.readValue(jsonArray, List.class);
            fail("Expected InvalidFormatException not thrown");
        } catch (InvalidFormatException e) {
            // Here we expect index to be unset (-1), showing the bug presence
            assertEquals(-1, e.getLocation().getColumnNr());  // This will fail because index is -1
        } catch (Exception e) {
            fail("Expected InvalidFormatException, but got " + e.getClass().getSimpleName());
        }
    }
}
