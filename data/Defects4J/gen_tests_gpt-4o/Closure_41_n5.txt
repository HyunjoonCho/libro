public void testAdvancedModeOverrideWarnings() {
    // Since this is about a JavaScript compiler behavior, we cannot directly test it using JUnit.
    // We can instead simulate the logic and show where it should fail.
  
    Foo foo = new Foo();
    Bar bar = new Bar();
    
    // Expected behavior would be to have a warning during compilation that Bar's methods
    // 'add' and 'sub' do not match Foo's methods signature since both claim @inheritDoc.

    // Execution of these should potentially trigger runtime issues due to signature mismatch
    // if the language/type system allowed it, but since Java will enforce signature on interfaces,
    // this test would not compile in Java. This serves as a conceptual translation.
    
    int fooAddResult = foo.add(3, 4);            // Should compute normally as (3 + 4)
    int barAddResult = bar.add(3);               // Misleading call that would pass in JS without warning.
    
    assertEquals(7, fooAddResult);
    assertEquals(3, barAddResult);               // This conceptually shows the misleading behavior.
}