
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.SimplexTableau;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.OptimizationData;
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolver() {
        // Define the linear objective function: maximize 3x + 5y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{3, 5}, 0);

        // Define the constraints:
        // x + y <= 6
        // 3x + 2y <= 12
        // x >= 0, y >= 0 are implicit with NonNegativeConstraint set to true
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[]{1, 1}, Relationship.LEQ, 6));
        constraints.add(new LinearConstraint(new double[]{3, 2}, Relationship.LEQ, 12));
        
        // Instantiate the SimplexSolver and attempt to optimize
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(
            f,
            new org.apache.commons.math3.optim.MaxIter(100),
            new org.apache.commons.math3.optim.linear.LinearConstraintSet(constraints),
            new NonNegativeConstraint(true),
            org.apache.commons.math3.optim.GoalType.MAXIMIZE
        );

        // Extract solution values
        double[] point = solution.getPoint();
        double x = point[0];
        double y = point[1];

        // Assert the results
        assertEquals(1.8, x, 1e-6);
        assertEquals(4.2, y, 1e-6);
        assertEquals(3 * x + 5 * y, solution.getValue(), 1e-6);
    }
}
