
import java.io.IOException;
import org.junit.Assert;
import org.junit.Test;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.module.SimpleModule;

public class CustomDeserializerTest {

    static class DataA {
        public int i = 1;
        public int j = 2;
    }

    static class DataB {
        public DataA da = new DataA();
        public int k = 3;
    }

    static class DataADeserializer extends StdDeserializer<DataA> {
        private static final long serialVersionUID = 1L;

        DataADeserializer() {
            super(DataA.class);
        }

        @Override
        public DataA deserialize(JsonParser jp, DeserializationContext ctxt)
                throws IOException, JsonProcessingException {
            assert (jp.getCurrentToken() == JsonToken.START_OBJECT);
            JsonNode node = jp.getCodec().readTree(jp);
            DataA da = new DataA();
            da.i = 5;
            return da;
        }
    }

    @Test
    public void testCustomDeserializerWithParentObjectUpdate() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(DataA.class, new DataADeserializer());
        mapper.registerModule(module);

        // Setup initial data and convert to JSON string and JsonNode
        DataB db = new DataB();
        db.da.i = 11;
        db.k = 13;
        String jsonBString = mapper.writeValueAsString(db);
        JsonNode jsonBNode = mapper.valueToTree(db);

        // Updating via JSON string works
        DataB dbUpdViaString = new DataB();
        Assert.assertEquals(1, dbUpdViaString.da.i);
        Assert.assertEquals(3, dbUpdViaString.k);
        mapper.readerForUpdating(dbUpdViaString).readValue(jsonBString);
        Assert.assertEquals(5, dbUpdViaString.da.i);
        Assert.assertEquals(13, dbUpdViaString.k);

        // Updating via JsonNode fails
        DataB dbUpdViaNode = new DataB();
        Assert.assertEquals(1, dbUpdViaNode.da.i);
        Assert.assertEquals(3, dbUpdViaNode.k);
        
        // The failure occurs here
        try {
            mapper.readerForUpdating(dbUpdViaNode).readValue(jsonBNode);
            Assert.assertEquals(5, dbUpdViaNode.da.i);
            Assert.assertEquals(13, dbUpdViaNode.k);
        } catch (Exception e) {
            // Catch and print the exception to verify the failure
            e.printStackTrace();
            Assert.fail("Deserialization via JsonNode failed: " + e.getMessage());
        }
    }
}
