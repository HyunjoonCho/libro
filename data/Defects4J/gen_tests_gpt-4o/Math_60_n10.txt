
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.exception.MathException;
import org.junit.Test;

import static org.junit.Assert.fail;

public class NormalDistributionTest {

    @Test
    public void testCumulativeProbabilityConvergenceException() {
        final NormalDistribution nd = new NormalDistribution();

        try {
            // Test with positive infinity
            System.out.println("val = " + Double.POSITIVE_INFINITY + " cumulative = " + nd.cumulativeProbability(Double.POSITIVE_INFINITY));
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception should not have been thrown with positive infinity");
        }

        try {
            // Test with negative infinity
            System.out.println("val = " + Double.NEGATIVE_INFINITY + " cumulative = " + nd.cumulativeProbability(Double.NEGATIVE_INFINITY));
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception should not have been thrown with negative infinity");
        }

        try {
            // Test with a very large value
            System.out.println("val = " + Double.MAX_VALUE + " cumulative = " + nd.cumulativeProbability(Double.MAX_VALUE));
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception should not have been thrown with a very large value");
        }

        try {
            // Test with a very small value
            System.out.println("val = " + -Double.MAX_VALUE + " cumulative = " + nd.cumulativeProbability(-Double.MAX_VALUE));
        } catch (Exception e) {
            e.printStackTrace();
            fail("Exception should not have been thrown with a very small value");
        }
    }
}
