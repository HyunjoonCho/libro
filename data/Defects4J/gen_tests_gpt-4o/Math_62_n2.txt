
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BrentOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimpleValueChecker;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.junit.Test;

public class BrentOptimizerTest {

    @Test(expected = NullPointerException.class)
    public void testOptimizerWithoutConvergenceChecker() {
        // Define a simple quadratic function to optimize
        UnivariateObjectiveFunction function = new UnivariateObjectiveFunction(x -> (x - 1) * (x - 1));

        // Create the optimizer without manually setting a convergence checker
        // Note: This test assumes that the absence of a default checker in the constructor would lead to an NPE.
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Attempt to optimize, expected to fail with NPE if no default convergence checker is set
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(100),
            function,
            GoalType.MINIMIZE,
            org.apache.commons.math3.optim.univariate.SearchInterval(0, 2));

        System.out.println("Optimal point: " + result.getPoint());
    }

    @Test
    public void testOptimizerWithConvergenceChecker() {
        // Define a simple quadratic function to optimize
        UnivariateObjectiveFunction function = new UnivariateObjectiveFunction(x -> (x - 1) * (x - 1));

        // Create the optimizer with a convergence checker
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14, new SimpleValueChecker(1e-10, 1e-14));

        // Attempt to optimize, should succeed if the checker is set properly
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(100),
            function,
            GoalType.MINIMIZE,
            org.apache.commons.math3.optim.univariate.SearchInterval(0, 2));

        // Assert that the result is close to the expected value of x = 1
        assertEquals(1.0, result.getPoint(), 1e-8);
    }
}
