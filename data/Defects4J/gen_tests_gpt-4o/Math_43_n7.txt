
import org.apache.commons.math3.stat.descriptive.SummaryStatistics;
import org.apache.commons.math3.stat.descriptive.moment.Variance;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertEquals;

public class StatisticsTest {

    @Test
    public void testStandardDeviationIsNaN() {
        int[] scores = {1, 2, 3, 4};
        SummaryStatistics stats = new SummaryStatistics();
        stats.setVarianceImpl(new Variance(false)); // use "population variance"

        for (int score : scores) {
            stats.addValue(score);
        }

        double sd = stats.getStandardDeviation();
        
        // Assert that the calculated standard deviation is NaN
        assertFalse("Standard deviation should not be NaN", Double.isNaN(sd));

        // Using the workaround to check if it matches expected results
        double expectedSd = FastMath.sqrt(stats.getSecondMoment() / stats.getN());
        assertEquals("The standard deviation calculated by workaround should be equal to calculated SD", expectedSd, sd, 1e-10);
    }
}
