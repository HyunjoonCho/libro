public void testTypeCheckerAnnotations() {
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.TYPE_INVALID_PARAM, CheckLevel.WARNING);

    // Simulate the code with the function defined within another function
    String code = "var ns = {}; " +
                  "(function() { " +
                  "  /** @param {string=} b */ " +
                  "  ns.a = function(b) {} " +
                  "})(); " +
                  "function d() { " +
                  "  ns.a(); " +
                  "  ns.a(123); " +
                  "}";

    Compiler compiler = new Compiler();
    compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", code), options);

    // Verify that the correct warning is emitted for the type error
    List<JSError> warnings = compiler.getWarnings();
    assertEquals(1, warnings.size());
    assertEquals("actual parameter 1 of ns.a does not match formal parameter\n" + 
                 "found   : number\n" + 
                 "required: (string|undefined)", warnings.get(0).getDescription());

    // Verify that no warning is emitted for calling ns.a with 0 parameters
    assertEquals(0, compiler.getErrors().size());
}