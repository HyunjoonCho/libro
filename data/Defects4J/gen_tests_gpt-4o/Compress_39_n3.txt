
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import org.junit.Test;

public class ZipTruncatedFileTest {

    @Test
    public void testTruncatedZipFileErrorMessage() {
        // A truncated ZIP file starting with correct ZIP header but no payload
        byte[] truncatedZipData = new byte[] { 
            0x50, 0x4B, 0x03, 0x04, // Local file header signature
            0x14, 0x00, // Version needed to extract
            0x00, 0x00, // General purpose bit flag
            0x00, 0x00, // Compression method
            0x00, 0x00, 0x00, 0x00, // File last modification time and date
            0x00, 0x00, 0x00, 0x00, // CRC-32
            0x00, 0x00, 0x00, 0x00, // Compressed size
            0x00, 0x00, 0x00, 0x00, // Uncompressed size
            0x00, 0x00, // File name length
            0x00, 0x00  // Extra field length
            // Note: No file name, no extra field, and no file data
        };

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(truncatedZipData);
        ZipInputStream zipInputStream = new ZipInputStream(byteArrayInputStream);

        try {
            ZipEntry entry = zipInputStream.getNextEntry();
            while (entry != null) {
                // If the entry retrieves successfully, try reading the data
                int data;
                while ((data = zipInputStream.read()) != -1) {
                    // Read data (Won't happen in a truncated zip)
                }
                entry = zipInputStream.getNextEntry();
            }
        } catch (EOFException e) {
            // Check if the error message size is reasonable
            assertTrue("Error message is unexpectedly large", e.getMessage().length() < 200);
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        } finally {
            try {
                zipInputStream.close();
            } catch (IOException e) {
                // Handle silently for test purposes
            }
        }
    }
}
