
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import org.junit.Assert;
import org.junit.Test;

public class AliasingErrorTest {
    
    @Test
    public void testWrongArgumentCountError() {
        // JS code with the error message expected
        String jsCodeWithError = "var makeClass = function(protoMethods) {" +
                                  " var clazz = function() {" +
                                  " this.initialize.apply(this, arguments);" +
                                  " }" +
                                  " for (var i in protoMethods) {" +
                                  " clazz.prototype[i] = protoMethods[i];" +
                                  " }" +
                                  " return clazz;" +
                                  "}" +
                                  "/** @constructor */" +
                                  "var Person = function(name){};" +
                                  "Person = makeClass(/** @lends Person.prototype */ {" +
                                  " /** @this {Person} */" +
                                  " initialize: function(name) {" +
                                  " this.name = name;" +
                                  " }," +
                                  " /** @this {Person} */" +
                                  " getName: function() { return this.name; }," +
                                  " /**" +
                                  " * @param {string} message" +
                                  " * @this {Person}" +
                                  " */" +
                                  " say: function(message) {" +
                                  " window.console.log(this.getName(1) + ' says: ' + message);" +
                                  " }" +
                                  "});" +
                                  "var joe = new Person('joe');" +
                                  "joe.say('hi');";

        // JS code with aliasing
        String jsCodeWithAliasing = "var makeClass = function(protoMethods) {" +
                                    " var clazz = function() {" +
                                    " this.initialize.apply(this, arguments);" +
                                    " }" +
                                    " for (var i in protoMethods) {" +
                                    " clazz.prototype[i] = protoMethods[i];" +
                                    " }" +
                                    " return clazz;" +
                                    "}" +
                                    "/** @constructor */" +
                                    "var Person = function(name){};" +
                                    "Person = makeClass(/** @lends Person.prototype */ {" +
                                    " /** @this {Person} */" +
                                    " initialize: function(name) {" +
                                    " this.name = name;" +
                                    " }," +
                                    " /** @this {Person} */" +
                                    " getName: function() { return this.name; }," +
                                    " /**" +
                                    " * @param {string} message" +
                                    " * @this {Person}" +
                                    " */" +
                                    " say: function(message) {" +
                                    " var self = this;" +
                                    " setTimeout(function() {" +
                                    " window.console.log(self.getName(1) + ' says: ' + message);" +
                                    " }, 500);" +
                                    " }" +
                                    "});" +
                                    "var joe = new Person('joe');" +
                                    "joe.say('hi');";

        // Create a Compiler object and set the options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(LanguageMode.ECMASCRIPT_2020);
        options.setLanguageOut(LanguageMode.ECMASCRIPT5);
        options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.USELESS_CODE, CheckLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.OFF);
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        
        // Error expected in non-aliased code
        compileAndCheckErrors(compiler, jsCodeWithError, options, true);

        // Error not expected in aliased code, but reproduce issue
        compileAndCheckErrors(compiler, jsCodeWithAliasing, options, false);
    }

    private void compileAndCheckErrors(Compiler compiler, String jsCode, CompilerOptions options, boolean expectError) {
        SourceFile source = SourceFile.fromCode("test.js", jsCode);
        SourceFile extern = SourceFile.fromCode("externs.js", "");

        compiler.compile(extern, source, options);
        boolean foundError = compiler.getErrors().length > 0;

        Assert.assertEquals(expectError, foundError);
    }
}
