
import org.junit.Test;
import org.mockito.Mockito;
import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.when;

public class AbstractLeastSquaresTest {
    
    @Test
    public void testWeightInChiSquareCalculation() {
        // Mocking AbstractLeastSquares as we don't have the actual implementation
        AbstractLeastSquares leastSquares = Mockito.mock(AbstractLeastSquares.class, Mockito.CALLS_REAL_METHODS);

        // Sample residual weights and expected values
        double[] sampleResiduals = {1.0, 2.0, 3.0};
        double[] residualsWeights = {0.5, 1.0, 1.5}; // Example weights
        double expectedChiSquare = 0.5 * (1.0 * 1.0) + 1.0 * (2.0 * 2.0) + 1.5 * (3.0 * 3.0);
        double rows = sampleResiduals.length;
        double expectedRMS = Math.sqrt(expectedChiSquare / rows);

        // Mock the methods to provide data
        when(leastSquares.getResiduals()).thenReturn(sampleResiduals);
        when(leastSquares.getResidualsWeights()).thenReturn(residualsWeights);
        when(leastSquares.getRows()).thenReturn(rows);

        // Compute chiSquare using the mocked AbstractLeastSquares class
        double computedChiSquare = leastSquares.getChiSquare();

        // Verify Correct computation
        assertEquals("ChiSquare calculation is incorrect", expectedChiSquare, computedChiSquare, 1e-6);

        // Compute RMS using the mocked AbstractLeastSquares class
        double computedRMS = leastSquares.getRMS();

        // Verify Correct RMS computation
        assertEquals("RMS calculation is incorrect", expectedRMS, computedRMS, 1e-6);
    }
}
