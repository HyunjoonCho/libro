public void testCMAESOptimizerBoundsFitResolution() {
    CMAESOptimizer optimizer = new CMAESOptimizer(10000, 0, true, 0, 0, null, new Random(), false);
    double[] startPoint = {0.5};
    double[] lowerBound = {0.0};
    double[] upperBound = {1.0};
    
    MultivariateFunction function = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return Math.pow(point[0] - 0.1, 2);
        }
    };
    
    PointValuePair resultNearLowerBound = optimizer.optimize(new MaxEval(1000),
            new ObjectiveFunction(function),
            GoalType.MINIMIZE,
            new InitialGuess(startPoint),
            new SimpleBounds(lowerBound, upperBound));
    
    double lowerBoundFit = resultNearLowerBound.getPoint()[0];
    
    function = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return Math.pow(point[0] - 0.9, 2);
        }
    };
    
    PointValuePair resultNearUpperBound = optimizer.optimize(new MaxEval(1000),
            new ObjectiveFunction(function),
            GoalType.MINIMIZE,
            new InitialGuess(startPoint),
            new SimpleBounds(lowerBound, upperBound));
    
    double upperBoundFit = resultNearUpperBound.getPoint()[0];
    
    assertTrue("Expected better resolution near lower bound", Math.abs(lowerBoundFit - 0.1) < Math.abs(upperBoundFit - 0.9));
}