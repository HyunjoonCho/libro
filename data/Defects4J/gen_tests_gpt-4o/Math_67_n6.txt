
import org.apache.commons.math3.optimization.UnivariateRealOptimizer;
import org.apache.commons.math3.optimization.univariate.MultiStartUnivariateRealOptimizer;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import org.junit.Test;
import org.junit.Before;
import java.util.Random;

import static org.junit.Assert.assertEquals;

public class MultiStartUnivariateRealOptimizerTest {

    private MultiStartUnivariateRealOptimizer optimizer;

    @Before
    public void setUp() {
        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-10, 1e-14);
        optimizer = new MultiStartUnivariateRealOptimizer(underlying, 10, new Random());
    }

    @Test
    public void testGetResultReturnsBestOptimizationResult() throws MathIllegalArgumentException {
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        optimizer.optimize(100, function, GoalType.MINIMIZE, 0.0, 4.0);

        // The optimal value of x that minimizes the function (x - 2)^2 is 2, and the function value at this point is 0.
        double expectedOptimum = 2.0;
        double expectedFunctionValueAtOptimum = 0.0;

        // Check if the best result is returned by getResult()
        assertEquals(expectedOptimum, optimizer.getResult(), 1e-10);

        // Check the best function value
        assertEquals(expectedFunctionValueAtOptimum, optimizer.getFunctionValue(), 1e-10);
    }
}
