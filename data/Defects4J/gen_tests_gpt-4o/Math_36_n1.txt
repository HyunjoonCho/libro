
import static org.junit.Assert.assertEquals;

import org.apache.commons.math3.fraction.BigFraction;
import org.junit.Test;

import java.math.BigInteger;

public class BigFractionTest {

    @Test
    public void testDoubleValueWithLargeNumerator() {
        BigInteger largeNumerator = new BigInteger("1".repeat(310)); // 310-digit number
        BigInteger smallDenominator = BigInteger.valueOf(2);
        BigFraction bigFraction = new BigFraction(largeNumerator, smallDenominator);
        
        // Since numerator is very large, we expect it to still be handled correctly within double's range.
        // Manually calculate: (1e309 / 2) = 5e308
        assertEquals(5e308, bigFraction.doubleValue(), 1e298); // Allow some tolerance
    }
    
    @Test
    public void testDoubleValueWithLargeDenominator() {
        BigInteger smallNumerator = BigInteger.ONE;
        BigInteger largeDenominator = new BigInteger("1".repeat(310)); // 310-digit number
        BigFraction bigFraction = new BigFraction(smallNumerator, largeDenominator);
        
        // Expect the fraction to approach zero since the denominator is extremely large
        assertEquals(0.0, bigFraction.doubleValue(), 0.0);
    }
}
