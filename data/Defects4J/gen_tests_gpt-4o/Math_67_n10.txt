
import org.apache.commons.math3.optimization.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optimization.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optimization.univariate.SimpleUnivariateValueChecker;
import org.apache.commons.math3.optimization.univariate.BrentOptimizer;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.optimization.univariate.MultiStartUnivariateOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class MultiStartUnivariateRealOptimizerTest {

    @Test
    public void testGetResultReturnsBestResult() {
        // Define a simple quadratic function for testing
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        // Create the base optimizer
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Set up the multi-start optimizer with multiple starts
        MultiStartUnivariateOptimizer multiStartOptimizer = new MultiStartUnivariateOptimizer(
                optimizer, 10, new JDKRandomGenerator());

        // Perform optimization
        UnivariatePointValuePair result = multiStartOptimizer.optimize(
                new UnivariateObjectiveFunction(function),
                GoalType.MINIMIZE,
                new org.apache.commons.math3.optimization.univariate.SearchInterval(-3, 3)
        );

        // Compare the retrieved result with the best known result
        assertEquals(multiStartOptimizer.getResult(), result.getPoint(), 1e-9);
        assertEquals(multiStartOptimizer.getFunctionValue(), result.getValue(), 1e-9);
    }
}
