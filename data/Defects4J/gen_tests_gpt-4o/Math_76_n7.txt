
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import org.junit.Test;
import static org.junit.Assert.*;

public class SingularValueDecompositionTest {

    @Test
    public void testNaNSingularValueFromSVD() {
        // Create a rank deficient matrix
        double[][] data = {
            {1.0, 2.0, 3.0},
            {2.0, 3.0, 4.0},
            {3.0, 5.0, 7.0}
        };
        RealMatrix matrix = new Array2DRowRealMatrix(data);

        SingularValueDecomposition svd = new SingularValueDecomposition(matrix);
        double[] singularValues = svd.getSingularValues();

        // Check the expected singular values
        double expectedLastSingularValue = 0.0;
        assertEquals(expectedLastSingularValue, singularValues[singularValues.length - 1], 1e-8);
        
        // Ensuring no singular value is NaN
        for (double singularValue : singularValues) {
            assertFalse(Double.isNaN(singularValue));
        }
    }
}
