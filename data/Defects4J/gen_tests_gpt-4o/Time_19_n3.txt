
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DateTimeDSTTest {

    @Test
    public void testInconsistentDSTInterpretation() {
        // Create DateTime objects for the same moment in time but in different time zones
        DateTime britishDateVersion2 = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID("Europe/London"));
        DateTime norwDateVersion2 = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID("Europe/Oslo"));
        DateTime finnishDateVersion2 = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID("Europe/Helsinki"));

        // Expected results according to Joda-Time 1.6.2
        DateTime expectedBritishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID("Europe/London")).withZone(DateTimeZone.forID("Europe/London"));
        DateTime expectedNorwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID("Europe/Oslo")).withZone(DateTimeZone.forID("Europe/Oslo"));
        DateTime expectedFinnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID("Europe/Helsinki")).withZone(DateTimeZone.forID("Europe/Helsinki"));

        // Validate each DateTime value
        assertEquals(expectedBritishDate.toInstant(), britishDateVersion2.toInstant());
        assertEquals(expectedNorwDate.withZone(DateTimeZone.UTC).toInstant(), norwDateVersion2.withZone(DateTimeZone.UTC).toInstant());
        assertEquals(expectedFinnishDate.withZone(DateTimeZone.UTC).toInstant(), finnishDateVersion2.withZone(DateTimeZone.UTC).toInstant());
    }
}
