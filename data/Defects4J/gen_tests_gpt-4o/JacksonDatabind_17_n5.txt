public void testReadTreeWithDefaultTypingEnabled() throws IOException {
    ObjectMapper mapper = new ObjectMapper()
            .enableDefaultTyping() // Issue arises with this setting
            .enable(MapperFeature.AUTO_DETECT_GETTERS)
            .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)
            .disable(MapperFeature.USE_GETTERS_AS_SETTERS)
            .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
            .enable(SerializationFeature.INDENT_OUTPUT)
            .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

    Foo foo = new Foo("bar");
    String serialized = mapper.writeValueAsString(foo); // {"bar" : "bar"}
    try {
        JsonNode jsonNode = mapper.readTree(serialized); // exception expected
        fail("Expected JsonMappingException due to defaultTyping without type info for readTree.");
    } catch (JsonMappingException e) {
        // Expected exception, can assert on message if needed
    }

    try {
        JsonNode node = mapper.valueToTree(foo); // and here
        fail("Expected JsonMappingException due to defaultTyping without type info for valueToTree.");
    } catch (JsonMappingException e) {
        // Expected exception, can assert on message if needed
    }
}