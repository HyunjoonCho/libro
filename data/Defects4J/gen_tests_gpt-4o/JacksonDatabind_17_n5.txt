
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertThrows;

public class JacksonDefaultTypingTest {

    public static class Foo {
        private String bar;

        public Foo() {
        }

        public Foo(String bar) {
            this.bar = bar;
        }

        public String getBar() {
            return bar;
        }

        public void setBar(String bar) {
            this.bar = bar;
        }
    }

    @Test
    public void testReadTreeWithDefaultTypingEnabled() throws IOException {
        ObjectMapper mapper = new ObjectMapper()
                .enableDefaultTyping() // Enable default typing
                .enable(MapperFeature.AUTO_DETECT_GETTERS)
                .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)
                .disable(MapperFeature.USE_GETTERS_AS_SETTERS)
                .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
                .enable(SerializationFeature.INDENT_OUTPUT)
                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        Foo foo = new Foo("bar");
        String serialized = mapper.writeValueAsString(foo); // {"bar" : "bar"}

        // Expect exception to occur here
        assertThrows(InvalidDefinitionException.class, () -> {
            mapper.readTree(serialized);
        });
    }
}
