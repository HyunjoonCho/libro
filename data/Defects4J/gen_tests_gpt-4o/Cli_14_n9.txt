
import org.apache.commons.cli2.CommandLine;
import org.apache.commons.cli2.Group;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.commandline.Parser;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.validation.FileValidator;
import org.junit.Test;

import java.io.File;

import static org.junit.Assert.fail;

public class CLI2FileValidatorTest {

    @Test
    public void testFileValidatorClassCastException() {
        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();

        // Create a temporary file to act as an existing file for validation
        File existingFile = null;
        try {
            existingFile = File.createTempFile("tempFile", ".tmp");
            existingFile.deleteOnExit();

            DefaultOption fileNameOption = obuilder
                .withShortName("f")
                .withLongName("file-name")
                .withRequired(true)
                .withDescription("name of an existing file")
                .withArgument(abuilder
                    .withName("file-name")
                    .withValidator(FileValidator.getExistingFileInstance())
                    .create())
                .create();

            Group options = gbuilder
                .withName("options")
                .withOption(fileNameOption)
                .create();

            Parser parser = new Parser();
            parser.setHelpTrigger("--help");
            parser.setGroup(options);

            // Construct the args array to simulate command line input
            String[] args = new String[]{"--file-name", existingFile.getAbsolutePath()};

            // This will trigger the exception
            CommandLine cl = parser.parseAndHelp(args);

            // Code should not reach this point
            // If an exception isn't thrown, the test fails
            fail("Expected ClassCastException was not thrown.");
        } catch (ClassCastException e) {
            // Expected exception caught, test passes
        } catch (Exception e) {
            // Other exceptions are not expected, fail the test
            fail("Unexpected exception: " + e.getMessage());
        } finally {
            if (existingFile != null && existingFile.exists()) {
                existingFile.delete();
            }
        }
    }
}
