
import static org.mockito.Mockito.*;

import org.junit.Test;

public class MockitoPackagePrivateTest {

    // Package-private superclass
    static class PackagePrivateSuperclass {
        public String sayHello() {
            return "Hello from package-private superclass!";
        }
    }

    // Public subclass
    public static class PublicSubclass extends PackagePrivateSuperclass {
        @Override
        public String sayHello() {
            return "Hello from public subclass!";
        }
    }

    @Test
    public void testMockingPublicSubclass() {
        // Attempt to mock the public subclass
        PublicSubclass mockSubclass = mock(PublicSubclass.class);

        // This line should ideally print "Mockito: stubbed" if mocking works, 
        // but due to the issue, it might invoke the real method instead
        when(mockSubclass.sayHello()).thenReturn("Mockito: stubbed");

        // Verify behavior
        String response = mockSubclass.sayHello();

        // Asserting the expected behavior
        // This will fail due to the described bug if the mock is not working correctly
        System.out.println(response);  // Should ideally print "Mockito: stubbed"
    }
}
