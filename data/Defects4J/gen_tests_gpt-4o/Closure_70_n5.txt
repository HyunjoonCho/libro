
import org.junit.Test;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTypedCoverageTest {

    @Test
    public void testTypedCoverage() throws IOException, InterruptedException {
        // Step 1: Create JavaScript file
        String jsContent = 
            "/*global window*/\n" +
            "/*jslint sub: true*/\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @param {!Element} element\n" +
            " */\n" +
            "function Example(element) {\n" +
            "    /**\n" +
            "     * @param {!string} ns\n" +
            "     * @param {!string} name\n" +
            "     * @return {undefined}\n" +
            "     */\n" +
            "    this.appendElement = function appendElement(ns, name) {\n" +
            "        var e = element.ownerDocument.createElementNS(ns, name);\n" +
            "        element.appendChild(e);\n" +
            "    };\n" +
            "}\n" +
            "window[\"Example\"] = Example;\n";
        
        String jsFilePath = "v.js";
        Files.write(Paths.get(jsFilePath), jsContent.getBytes());

        // Step 2: Compile the JavaScript file using Closure Compiler
        ProcessBuilder processBuilder = new ProcessBuilder(
            "java", "-jar", "compiler.jar", 
            "--jscomp_error=checkTypes", 
            "--summary_detail_level=3", 
            "--js=" + jsFilePath, 
            "--js_output_file=compiled.js"
        );
        processBuilder.directory(new File("."));
        Process process = processBuilder.start();
        process.waitFor();

        // Step 3: Observe the outcome by reading the output
        String outputFilePath = "compiled.js";
        String outputContent = new String(Files.readAllBytes(Paths.get(outputFilePath)));

        // Check presence of typing information
        assertTrue(outputContent.contains("0 error(s), 0 warning(s), 73.7% typed"));

        // Cleanup
        Files.deleteIfExists(Paths.get(jsFilePath));
        Files.deleteIfExists(Paths.get(outputFilePath));
    }
}
