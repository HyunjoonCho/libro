public void testIllegalStateExceptionInGetInstanceType() {
    String jsCode = "var test = {};\n" +
                    "/**\n" +
                    " * @interface\n" +
                    " */\n" +
                    "test.T = function() {};\n" +
                    "/**\n" +
                    " * @constructor\n" +
                    " * @implements {test.T}\n" +
                    " */\n" +
                    "test.A = function() {};\n" +
                    "/**\n" +
                    " * @constructor\n" +
                    " * @implements {test.T}\n" +
                    " */\n" +
                    "test.B = function() {};\n" +
                    "/**\n" +
                    " * @constructor\n" +
                    " */\n" +
                    "test.X = function() {\n" +
                    " this.type = test.A;\n" +
                    " this.t = this.f();\n" +
                    "};\n" +
                    "/**\n" +
                    " * @return {test.T}\n" +
                    " */\n" +
                    "test.X.prototype.f = function() {\n" +
                    " if (this.type === test.A) {\n" +
                    " return new test.A();\n" +
                    " } else if (this.type === test.B) {\n" +
                    " return new test.B();\n" +
                    " }\n" +
                    "};";
    
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.VERBOSE, CheckLevel.VERBOSE);
    options.setCompilationLevel(CompilationLevel.SIMPLE_OPTIMIZATIONS);

    try {
        compiler.compile(CommandLineRunner.getDefaultExterns(), 
                         Arrays.asList(SourceFile.fromCode("crash.js", jsCode)), options);
        fail("Expected IllegalStateException was not thrown.");
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof IllegalStateException);
    }
}