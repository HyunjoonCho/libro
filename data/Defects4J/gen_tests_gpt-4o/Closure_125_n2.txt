
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testIllegalStateExceptionWithInstanceType() {
        String[] args = new String[]{
                "--compilation_level", "SIMPLE_OPTIMIZATIONS",
                "--warning_level", "VERBOSE",
                "--js", "crash.js"
        };

        // Sample content of crash.js from the bug report
        String crashJsContent = 
                "var test = {};\n" +
                "/**\n" +
                " * @interface\n" +
                " */\n" +
                "test.T = function() {};\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @implements {test.T}\n" +
                " */\n" +
                "test.A = function() {};\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @implements {test.T}\n" +
                " */\n" +
                "test.B = function() {};\n" +
                "/**\n" +
                " * @constructor\n" +
                " */\n" +
                "test.X = function() {\n" +
                "  this.type = test.A;\n" +
                "  this.t = this.f();\n" +
                "};\n" +
                "/**\n" +
                " * @return {test.T}\n" +
                " */\n" +
                "test.X.prototype.f = function() {\n" +
                "  if (this.type === test.A) {\n" +
                "    return new test.A();\n" +
                "  } else if (this.type === test.B) {\n" +
                "    return new test.B();\n" +
                "  }\n" +
                "};";

        // Assume the content of crash.js is saved at a certain location
        // In a real test setup, you would save this content to a temporary file
        // and pass the file path to the --js argument
        // For example, save crashJsContent to the directory where you're running the test
        // In a unit test, you might save to a temp file like Files.write(tempFile.toPath(), crashJsContent.getBytes());

        try {
            CommandLineRunner runner = new CommandLineRunner(args);
            runner.setPrintHandledExceptions(false);
            runner.run();
        } catch (Throwable e) {
            // Expected IllegalStateException will be caught here
            e.printStackTrace();
            throw new AssertionError("Test failed due to unexpected exception: ", e);
        }
    }
}
