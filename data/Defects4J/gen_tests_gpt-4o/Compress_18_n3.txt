
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.fail;

public class TarArchiveTest {

    @Test
    public void testLongDirectoryNameInTarArchive() {
        // Create a directory name longer than 100 bytes
        String longDirName = "layers/openstreetmap__osm.disy.net/.tiles/1.0.0/openstreetmap__osm.disy.net/default/"
                + "subdirectory_with_a_really_long_name_to_cause_problems_in_tar_archive_creation";

        // Ensure the name is longer than 100 bytes
        if (longDirName.getBytes(StandardCharsets.UTF_8).length <= 100) {
            fail("Directory name is not long enough to trigger the bug.");
        }

        try (ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
             TarArchiveOutputStream tarArchiveOutputStream = new TarArchiveOutputStream(byteArrayOutputStream)) {
            
            // Add a directory entry to the TAR output stream
            TarArchiveEntry tarEntry = new TarArchiveEntry(longDirName + "/");
            tarArchiveOutputStream.putArchiveEntry(tarEntry);
            tarArchiveOutputStream.closeArchiveEntry();

            // Close the TAR output stream
            tarArchiveOutputStream.flush();
            tarArchiveOutputStream.finish();
        } catch (IOException e) {
            // Expected error due to the bug
            // Validate that it is indeed due to the same issue reported in the bug
            if (!e.getMessage().contains("request to write")) {
                fail("IOException occurred, but not due to the expected cause: " + e.getMessage());
            }
        }
    }
}
