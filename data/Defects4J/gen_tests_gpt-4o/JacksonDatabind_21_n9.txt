
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class TestEnumSerialization {

    private enum TestEnum {
        @JsonProperty("value1")
        VALUE_ONE;

        private String valueInJson = "value1";

        @JsonCreator
        public static TestEnum getEnumFromValue(String value) {
            for (TestEnum testEnum : values()) {
                if (testEnum.valueInJson.equals(value)) {
                    return testEnum;
                }
            }
            throw new IllegalArgumentException();
        }
    }

    @Test
    public void testEnumDeserialization() {
        ObjectMapper objectMapper = new ObjectMapper();
        String json = "\"value1\"";

        try {
            TestEnum result = objectMapper.readValue(json, TestEnum.class);
            assertEquals(TestEnum.VALUE_ONE, result);
        } catch (JsonProcessingException e) {
            fail("Deserialization failed: " + e.getMessage());
        }
    }

    @Test
    public void testEnumSerialization() {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            String result = objectMapper.writeValueAsString(TestEnum.VALUE_ONE);
            assertEquals("\"value1\"", result);
        } catch (JsonProcessingException e) {
            fail("Serialization failed: " + e.getMessage());
        }
    }
}
