
import org.apache.commons.math3.linear.*;

import org.junit.Test;
import static org.junit.Assert.*;

public class RealVectorTest {

    @Test
    public void testEbeMultiplyWithNaNAndInfinity() {
        double[] data1 = {1.0, 2.0, 3.0, 0.0};
        double[] data2 = {4.0, Double.NaN, Double.POSITIVE_INFINITY, 5.0};

        OpenMapRealVector v1 = new OpenMapRealVector(data1);
        OpenMapRealVector v2 = new OpenMapRealVector(data2);

        OpenMapRealVector result = v1.ebeMultiply(v2);

        // Manually calculate the expected result
        double[] expectedData = new double[data1.length];
        for (int i = 0; i < data1.length; i++) {
            expectedData[i] = data1[i] * data2[i];
        }
        OpenMapRealVector expected = new OpenMapRealVector(expectedData);

        for (int i = 0; i < data1.length; i++) {
            if (Double.isNaN(expectedData[i])) {
                assertTrue(Double.isNaN(result.getEntry(i)));
            } else if (Double.isInfinite(expectedData[i])) {
                assertTrue(Double.isInfinite(result.getEntry(i)));
            } else {
                assertEquals(expectedData[i], result.getEntry(i), 1e-9);
            }
        }
    }
}
