// Mock implementation of a dataset for testing purposes
public class RangeBoundsDataset implements CategoryDataset {
    private final Number[][] data;

    public RangeBoundsDataset(Number[][] data) {
        this.data = data;
    }

    @Override
    public Number getValue(int row, int column) {
        return data[row][column];
    }

    @Override
    public int getRowCount() {
        return data.length;
    }

    @Override
    public int getColumnCount() {
        return data[0].length;
    }

    @Override
    public Comparable getRowKey(int row) {
        return "Row" + row;
    }

    @Override
    public int getRowIndex(Comparable key) {
        return Integer.parseInt(key.toString().replace("Row", ""));
    }

    @Override
    public List getRowKeys() {
        List<String> rowKeys = new ArrayList<>();
        for (int i = 0; i < getRowCount(); i++) {
            rowKeys.add("Row" + i);
        }
        return rowKeys;
    }

    @Override
    public Comparable getColumnKey(int column) {
        return "Column" + column;
    }

    @Override
    public int getColumnIndex(Comparable key) {
        return Integer.parseInt(key.toString().replace("Column", ""));
    }

    @Override
    public List getColumnKeys() {
        List<String> columnKeys = new ArrayList<>();
        for (int i = 0; i < getColumnCount(); i++) {
            columnKeys.add("Column" + i);
        }
        return columnKeys;
    }

    @Override
    public Number getValue(Comparable rowKey, Comparable columnKey) {
        return getValue(getRowIndex(rowKey), getColumnIndex(columnKey));
    }
}

@Test
public void testIterateRangeBounds() {
    // Dataset with various numerical values
    Number[][] data = {
        {8.0, -3.0, 5.0},
        {2.0, null, 7.0},
        {5.0, 3.0, -9.0}
    };

    RangeBoundsDataset dataset = new RangeBoundsDataset(data);

    Range range = DatasetUtilities.iterateRangeBounds(dataset);

    assertNotNull("Range should not be null", range);
    assertEquals("Lower bound of range is incorrect", -9.0, range.getLowerBound(), 0.0000001);
    assertEquals("Upper bound of range is incorrect", 8.0, range.getUpperBound(), 0.0000001);
}