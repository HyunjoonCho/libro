public void testDeserializeLongFieldWithTypeResolverBuilder() throws IOException {
    // Create test data
    Data data = new Data();
    data.key = 1;
    Map<String, Object> mapData = new HashMap<>();
    mapData.put("longInMap", 2L);
    mapData.put("longAsField", data);

    // Configure Jackson to preserve types
    JsonFactory factory = new JsonFactory();
    ObjectMapper mapper = new ObjectMapper(factory);
    StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();
    resolver.init(JsonTypeInfo.Id.CLASS, null);
    resolver.inclusion(JsonTypeInfo.As.PROPERTY);
    resolver.typeProperty("__t");
    mapper.setDefaultTyping(resolver);
    mapper.enable(SerializationFeature.INDENT_OUTPUT);

    // Serialize
    String json = mapper.writeValueAsString(mapData);
    System.out.println("json = " + json);

    // Deserialize
    try {
        Map deserializedData = mapper.readValue(json, Map.class);
        fail("Deserialization should have thrown a JsonMappingException");
    } catch (JsonMappingException e) {
        assertTrue(e.getMessage().contains("Class java.lang.Long not subtype of [simple type, class long]"));
    }
}

static class Data {
    public long key;
}