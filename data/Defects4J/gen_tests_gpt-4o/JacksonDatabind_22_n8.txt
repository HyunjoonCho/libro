
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.annotation.JsonValue;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.IOException;

// Define a POJO with @JsonValue annotation.
class SamplePOJO {
    private final String value;

    public SamplePOJO(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return "FromJsonValue: " + value;
    }
}

// Define a custom serializer for SamplePOJO.
class SamplePOJOCustomSerializer extends JsonSerializer<SamplePOJO> {
    @Override
    public void serialize(SamplePOJO pojo, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
        jsonGenerator.writeString("FromCustomSerializer: " + pojo.getValue());
    }
}

public class JsonValueCustomSerializerTest {

    @Test
    public void testCustomSerializerWithJsonValue() throws IOException {
        // Set up ObjectMapper and register the custom serializer.
        ObjectMapper objectMapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(SamplePOJO.class, new SamplePOJOCustomSerializer());
        objectMapper.registerModule(module);

        // Serialize a SamplePOJO instance and verify that the custom serializer is used.
        SamplePOJO pojo = new SamplePOJO("test");
        String result = objectMapper.writeValueAsString(pojo);

        assertEquals("\"FromCustomSerializer: FromJsonValue: test\"", result);
    }
}
