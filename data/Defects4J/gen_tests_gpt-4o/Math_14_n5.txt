
import org.apache.commons.math3.fitting.CurveFitter;
import org.apache.commons.math3.fitting.PolynomialCurveFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class LargeDatasetCurveFittingTest {

    @Test(expected = OutOfMemoryError.class)
    public void testLargeDatasetCurveFitting() {
        try {
            int numPoints = 41200;
            List<WeightedObservedPoint> points = new ArrayList<>();

            // Generate a large number of points
            for (int i = 0; i < numPoints; i++) {
                points.add(new WeightedObservedPoint(1.0, i, Math.pow(i, 2) + i + 1));
            }

            // Use a curve fitter expecting it to face memory issues
            PolynomialCurveFitter fitter = PolynomialCurveFitter.create(2);

            // This line should cause an OutOfMemoryError or confirm performance/memory inefficiency
            double[] coefficients = fitter.fit(points);

            // If it doesn't throw an OutOfMemoryError, manually fail the test
            assertTrue("Test did not run as expected - it should have exhausted memory", false);

        } catch (OutOfMemoryError e) {
            // Expected outcome, as per the original bug description
            throw e;
        }
    }
}
