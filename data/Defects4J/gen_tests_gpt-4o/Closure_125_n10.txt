public void testIllegalStateExceptionInFunctionTypeGetInstanceType() {
    String[] args = {
        "--warning_level=VERBOSE",
        "--compilation_level=SIMPLE_OPTIMIZATIONS"
    };
    String jsCode = "var test = {}; \n" +
        "/** \n" +
        " * @interface \n" +
        " */ \n" +
        "test.T = function() {}; \n" +
        "/** \n" +
        " * @constructor \n" +
        " * @implements {test.T} \n" +
        " */ \n" +
        "test.A = function() {}; \n" +
        "/** \n" +
        " * @constructor \n" +
        " * @implements {test.T} \n" +
        " */ \n" +
        "test.B = function() {}; \n" +
        "/** \n" +
        " * @constructor \n" +
        " */ \n" +
        "test.X = function() { \n" +
        "  this.type = test.A; \n" +
        "  this.t = this.f(); \n" +
        "}; \n" +
        "/** \n" +
        " * @return {test.T} \n" +
        " */ \n" +
        "test.X.prototype.f = function() { \n" +
        "  if (this.type === test.A) { \n" +
        "    return new test.A(); \n" +
        "  } else if (this.type === test.B) { \n" +
        "    return new test.B(); \n" +
        "  } \n" +
        "};";
    try {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
        SourceFile input = SourceFile.fromCode("crash.js", jsCode);
        compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);
        fail("Expected IllegalStateException not thrown");
    } catch (RuntimeException e) {
        assertEquals(IllegalStateException.class, e.getCause().getClass());
    }
}