
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;

import java.io.IOException;

public class ClosureCompilerTest {

    @Test
    public void testIllegalStateExceptionInFunctionType() throws IOException {
        String[] args = {
            "--js", "crash.js",
            "--warning_level", "VERBOSE",
            "--compilation_level", "SIMPLE_OPTIMIZATIONS"
        };

        // Content of crash.js script
        String jsCode = "var test = {};\n" +
                "/**\n" +
                " * @interface\n" +
                " */\n" +
                "test.T = function() {};\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @implements {test.T}\n" +
                " */\n" +
                "test.A = function() {};\n" +
                "/**\n" +
                " * @constructor\n" +
                " * @implements {test.T}\n" +
                " */\n" +
                "test.B = function() {};\n" +
                "/**\n" +
                " * @constructor\n" +
                " */\n" +
                "test.X = function() {\n" +
                "  this.type = test.A;\n" +
                "  this.t = this.f();\n" +
                "};\n" +
                "/**\n" +
                " * @return {test.T}\n" +
                " */\n" +
                "test.X.prototype.f = function() {\n" +
                "  if (this.type === test.A) {\n" +
                "    return new test.A();\n" +
                "  } else if (this.type === test.B) {\n" +
                "    return new test.B();\n" +
                "  }\n" +
                "};";

        java.nio.file.Path jsFile = java.nio.file.Files.createTempFile("crash", ".js");
        java.nio.file.Files.write(jsFile, jsCode.getBytes());

        // Execute the Closure Compiler with the given JS file.
        try {
            CommandLineRunner.main(args);
        } catch (RuntimeException e) {
            if (e.getCause() instanceof IllegalStateException) {
                System.out.println("IllegalStateException was reproduced: " + e.getCause().getMessage());
            } else {
                throw e; // Rethrow if it's not the specific exception we are testing for
            }
        } finally {
            java.nio.file.Files.deleteIfExists(jsFile); // Clean up the temporary file
        }
    }
}
