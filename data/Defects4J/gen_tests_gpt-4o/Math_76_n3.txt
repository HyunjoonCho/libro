
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import org.junit.Test;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

public class SingularValueDecompositionTest {

    @Test
    public void testNanSingularValue() {
        double[][] matrixData = {
            {1.0, 2.0, 3.0},
            {2.0, 3.0, 4.0},
            {3.0, 5.0, 7.0}
        };

        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(matrixData);
        SingularValueDecomposition svd = new SingularValueDecomposition(matrix);

        double[] singularValues = svd.getSingularValues();

        // Check that the last singular value is not NaN
        assertFalse("Singular values contain NaN", Double.isNaN(singularValues[singularValues.length - 1]));

        // Check that the last singular value is something very close to 0
        double tolerance = 1e-12;
        assertTrue("Last singular value is not close to 0", Math.abs(singularValues[singularValues.length - 1]) < tolerance);

        // Verify the behavior of the solver
        assertNotEquals("Solver returned NaNs", Double.NaN, svd.getSolver().getDeterminant(), 0.0);
    }
}
