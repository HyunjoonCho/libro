public void testColumnIndicatorCaretInErrorOutput() throws IOException {
    String javascriptCodeWithLineBreak = "alert(1;\n";
    String javascriptCodeWithoutLineBreak = "alert(1;\n\n";

    File tempFileWithLineBreak = File.createTempFile("tempWithLineBreak", ".js");
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFileWithLineBreak))) {
        writer.write(javascriptCodeWithLineBreak);
    }

    File tempFileWithoutLineBreak = File.createTempFile("tempWithoutLineBreak", ".js");
    try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFileWithoutLineBreak))) {
        writer.write(javascriptCodeWithoutLineBreak);
    }

    ProcessBuilder processBuilderWithLineBreak = new ProcessBuilder("java", "-jar", "compiler.jar", "--js", tempFileWithLineBreak.getAbsolutePath());
    Process processWithLineBreak = processBuilderWithLineBreak.start();
    BufferedReader errorReaderWithLineBreak = new BufferedReader(new InputStreamReader(processWithLineBreak.getErrorStream()));
    String errorOutputWithLineBreak = errorReaderWithLineBreak.lines().collect(Collectors.joining("\n"));

    ProcessBuilder processBuilderWithoutLineBreak = new ProcessBuilder("java", "-jar", "compiler.jar", "--js", tempFileWithoutLineBreak.getAbsolutePath());
    Process processWithoutLineBreak = processBuilderWithoutLineBreak.start();
    BufferedReader errorReaderWithoutLineBreak = new BufferedReader(new InputStreamReader(processWithoutLineBreak.getErrorStream()));
    String errorOutputWithoutLineBreak = errorReaderWithoutLineBreak.lines().collect(Collectors.joining("\n"));

    assertFalse("Error output should contain caret indicator when there is a line break", errorOutputWithLineBreak.contains("^"));
    assertTrue("Error output should contain caret indicator without line break", errorOutputWithoutLineBreak.contains("^"));

    tempFileWithLineBreak.delete();
    tempFileWithoutLineBreak.delete();
}