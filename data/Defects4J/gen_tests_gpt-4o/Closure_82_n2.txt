
import static org.junit.Assert.fail;

import org.junit.Test;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class MissingPropertyWarningTest {
    
    @Test
    public void testMissingPropertyWarning() {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn"); // Nashorn is a JavaScript engine

        try {
            // This should trigger a warning or error if the engine is configured for verbose/missing properties
            engine.eval("var s = new String('hello'); alert(s.toLowerCase.indexOf('l'));");
            fail("Expected to receive a missing property warning or error for 'indexOf'");
        } catch (ScriptException e) {
            // Here, you would normally check if the exception is related to the missing property warning
            // For demonstration, we'll just print the error message
            System.out.println("ScriptException caught: " + e.getMessage());
        }

        try {
            // This should work correctly in the environment
            engine.eval("var s = new String('hello'); alert(s.toLowerCase().substr(0, 1));");
        } catch (ScriptException e) {
            fail("Did not expect a ScriptException for valid method call: " + e.getMessage());
        }
    }
}
