
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.JXPathException;
import org.junit.Test;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.ByteArrayInputStream;

import static org.junit.Assert.fail;

public class NamespaceHandlingTest {

    @Test
    public void testNamespaceHandlingForAttributes() {
        String xml = "<ElementA xmlns:A=\"http://example.com/A\" " +
                     "xmlns:B=\"http://example.com/B\" " +
                     "A:myAttr=\"Mytype\">" +
                     "<B:ElementB>MY VALUE</B:ElementB>" +
                     "</ElementA>";
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setNamespaceAware(true);
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(new ByteArrayInputStream(xml.getBytes()));

            JXPathContext context = JXPathContext.newContext(document);
            // Manually register namespaces
            context.registerNamespace("A", "http://example.com/A");
            context.registerNamespace("B", "http://example.com/B");

            // Try to access an attribute with namespace to provoke exception
            context.getValue("/ElementA/@A:myAttr");
            // If no exception is thrown, the handling is correct
        } catch (JXPathException e) {
            fail("Exception occurred due to namespace handling in attributes: " + e.getMessage());
        } catch (Exception e) {
            // Other exceptions could occur due to document parsing or setup
            e.printStackTrace();
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
