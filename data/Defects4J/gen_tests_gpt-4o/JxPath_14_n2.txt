
import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.jxpath.JXPathContext;

public class RoundingFunctionsTest {

    @Test
    public void testRoundingFunctionsWithSpecialValues() {
        JXPathContext context = JXPathContext.newContext(new Object());

        // Testing floor function
        assertXPathValue(context, "floor('NaN')", Double.NaN);
        assertXPathValue(context, "floor(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "floor(2 div 0)", Double.POSITIVE_INFINITY);

        // Testing ceiling function
        assertXPathValue(context, "ceiling('NaN')", Double.NaN);
        assertXPathValue(context, "ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "ceiling(2 div 0)", Double.POSITIVE_INFINITY);

        // Testing round function
        assertXPathValue(context, "round('NaN')", Double.NaN);
        assertXPathValue(context, "round(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "round(2 div 0)", Double.POSITIVE_INFINITY);
    }

    private void assertXPathValue(JXPathContext context, String xpath, double expected){
        Double result = (Double) context.getValue(xpath);
        if (Double.isNaN(expected)) {
            assertTrue(Double.isNaN(result));
        } else {
            assertEquals(expected, result, 0);
        }
    }
}
