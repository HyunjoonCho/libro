
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.Deflater;

import static org.junit.Assert.fail;

public class CompressorStreamFactoryTest {

    @Test
    public void testDeflateStreamWithZlibHeader() {
        // Create a byte array with deflate compressed data and a zlib header
        byte[] inputData = "This is some test data to compress".getBytes();
        byte[] outputData = new byte[100];
        
        Deflater deflater = new Deflater();
        deflater.setInput(inputData);
        deflater.finish();
        
        // Compress the data
        int compressedDataLength = deflater.deflate(outputData);
        
        // Wrap the compressed data with a ByteArrayInputStream
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(outputData, 0, compressedDataLength);

        try {
            // Attempt to create a compressor input stream
            CompressorInputStream input = new CompressorStreamFactory()
                    .createCompressorInputStream(CompressorStreamFactory.DEFLATE, byteArrayInputStream);
            
            // If no exception is thrown, this means the CompressorStreamFactory is handling it correctly
            // (which would be unexpected for this test case, given the bug report), so we could assertSuccess() or similar.
        } catch (CompressorException | IOException e) {
            // If an exception is caught, it means the handling failed as expected due to the bug.
            // Assert this is the expected behavior due to current bug presence
            fail("Failed to handle deflate stream with zlib header: " + e.getMessage());
        }
    }
}
