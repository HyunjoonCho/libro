
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

public class GlobalThisWarningTest {

    @Test
    public void testGlobalThisWarning() {
        Compiler compiler = new Compiler();

        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // JavaScript code snippet that should generate JSC_USED_GLOBAL_THIS warning
        String jsCode = "var NS = {\n" +
                         "  read: function() {\n" +
                         "    return this.foo;\n" +
                         "  },\n" +
                         "  write: function() {\n" +
                         "    this.foo = 123;\n" +
                         "  }\n" +
                         "};\n" +
                         "NS.write2 = function() {\n" +
                         "  this.foo = 123;\n" +
                         "};";

        SourceFile input = SourceFile.fromCode("test.js", jsCode);
        compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        Result result = compiler.getResult();
        
        // We expect warnings related to the use of 'this' in these methods
        assertTrue("Expected at least one warning", result.warnings.length > 0);

        boolean foundUsedGlobalThisWarning = false;
        for (com.google.javascript.jscomp.JSError warning : result.warnings) {
            if (warning.description.contains("JSC_USED_GLOBAL_THIS")) {
                foundUsedGlobalThisWarning = true;
                break;
            }
        }

        assertTrue("Expected JSC_USED_GLOBAL_THIS warning not found", foundUsedGlobalThisWarning);
    }
}
