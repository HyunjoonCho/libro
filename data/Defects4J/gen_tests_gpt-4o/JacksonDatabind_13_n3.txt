
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertNull;

// Assuming this annotation for Object Id processing
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
class EntityWithOptionalId {
    public Integer id;
    public String name;
}

public class ObjectIdDeserializationTest {

    @Test
    public void testDeserializationWithNullObjectId() throws JsonProcessingException {
        String jsonWithoutId = "{\"name\":\"Test Entity\"}";

        ObjectMapper objectMapper = new ObjectMapper();
        // By default, allow null or missing Object Id
        objectMapper.configure(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY, false);

        EntityWithOptionalId entity = objectMapper.readValue(jsonWithoutId, EntityWithOptionalId.class);

        assertNull(entity.id);
        System.out.println("Deserialized entity: id = " + entity.id + ", name = " + entity.name);
    }

    @Test(expected = JsonProcessingException.class)
    public void testDeserializationWithStrictIdCheck() throws JsonProcessingException {
        String jsonWithoutId = "{\"name\":\"Test Entity\"}";

        ObjectMapper objectMapper = new ObjectMapper();
        // Enable strict check: disallow null or missing Object Id
        objectMapper.configure(DeserializationFeature.FAIL_ON_MISSING_EXTERNAL_TYPE_ID_PROPERTY, true);

        // This should throw an exception because id is missing
        objectMapper.readValue(jsonWithoutId, EntityWithOptionalId.class);
    }
}
