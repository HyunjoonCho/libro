
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Enumeration;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class ZipEntryEqualityTest {

    @Test
    public void testZipArchiveEntryEquality() throws IOException {
        // Create a sample ZIP file
        File tempZipFile = File.createTempFile("sample", ".zip");
        tempZipFile.deleteOnExit();
        try (FileOutputStream fos = new FileOutputStream(tempZipFile)) {
            byte[] zipContent = {
                    80, 75, 3, 4, 20, 0, 8, 0, 8, 0, 38, -125, 78, 51, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 't', 'e', 'x', 't', '.',
                    't', 'x', 't', 'H', 'e', 'l', 'l', 'o', 10, 80, 75, 1, 2,
                    20, 0, 20, 0, 8, 0, 8, 0, 38, -125, 78, 51, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, -32, 1, 0,
                    0, 0, 0, 't', 'e', 'x', 't', '.', 't', 'x', 't', 80, 75, 5,
                    6, 0, 0, 0, 0, 1, 0, 1, 0, 38, 0, 0, 0, 57, 0, 0, 0, 0, 0
            };
            fos.write(zipContent);
        }

        // Read entry with ZipArchiveInputStream
        ZipArchiveEntry inputStreamEntry = null;
        try (ZipArchiveInputStream zis = new ZipArchiveInputStream(
                new ByteArrayInputStream(Files.readAllBytes(tempZipFile.toPath())))) {
            inputStreamEntry = zis.getNextZipEntry();
        }

        // Read entry with ZipFile
        ZipArchiveEntry zipFileEntry = null;
        try (ZipFile zipFile = new ZipFile(tempZipFile)) {
            Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
            if (entries.hasMoreElements()) {
                zipFileEntry = entries.nextElement();
            }
        }

        // Verify entries are both non-null
        assertTrue("InputStream entry should not be null", inputStreamEntry != null);
        assertTrue("ZipFile entry should not be null", zipFileEntry != null);

        // Check equality
        assertEquals("ZipArchiveEntry instances should be considered equal", 
                     inputStreamEntry, zipFileEntry);
    }
}
