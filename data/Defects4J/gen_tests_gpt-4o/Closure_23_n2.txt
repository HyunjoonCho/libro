
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.testing.CompilerTestCase;

public class TryFoldArrayAccessSideEffectTest extends CompilerTestCase {

    @Override
    protected CompilerPass getProcessor(Compiler compiler) {
        // Return the optimization pass that includes 'tryFoldArrayAccess'
        return new PeepholeOptimizationsPass(compiler, 
                 new PeepholeFoldConstants(true));
    }

    public void testArrayAccessPreservesSideEffects() {
        // The input JavaScript code
        String input = "console.log([console.log('hello, '), 'world!'][1]);";

        // The expected output should preserve the side-effect inducement
        String expectedOutput = "console.log((console.log('hello, '), 'world!'));";

        // Test that the output code preserves the expected console log side effects
        test(input, expectedOutput);
    }

    public static void main(String[] args) {
        Result result = (new TryFoldArrayAccessSideEffectTest()).testInternal(
            new CompilerOptions());

        // Check if there are any compilation errors
        if (result.errors.length > 0) {
            for (JSError error : result.errors) {
                System.err.println(error.toString());
            }
        } else {
            System.out.println("Side effect test passed without optimization errors.");
        }
    }
}
