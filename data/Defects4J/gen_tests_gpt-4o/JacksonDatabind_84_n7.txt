
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class RecursiveTypeSerializationTest {

    interface IFace<T> {}

    static class Base implements IFace<Sub> {
        @JsonProperty
        int base = 1;
    }

    static class Sub extends Base {
        @JsonProperty
        int sub = 2;
    }

    @Test
    public void testSubClassSerialization() throws JsonProcessingException {
        // Register the Base class first to mimic the described scenario.
        ObjectMapper objectMapper = new ObjectMapper();
        TypeFactory typeFactory = objectMapper.getTypeFactory();
        typeFactory.constructType(Base.class);

        // Serialize the subclass
        Sub subInstance = new Sub();
        String serializedSub = objectMapper.writeValueAsString(subInstance);

        // Assert that the serialized JSON contains both properties
        assertEquals("{\"base\":1,\"sub\":2}", serializedSub);
    }
}
