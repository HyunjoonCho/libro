
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.*;

public class JacksonNonEmptyExclusionTest {

    public static class TestEntity {
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public String name;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        public Integer number;

        public TestEntity(String name, Integer number) {
            this.name = name;
            this.number = number;
        }
    }

    @Test
    public void testNonEmptyExclusion() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Case 1: Both fields are non-empty
        TestEntity entity1 = new TestEntity("John Doe", 25);
        String jsonString1 = mapper.writeValueAsString(entity1);
        assertTrue(jsonString1.contains("name"));
        assertTrue(jsonString1.contains("number"));

        // Case 2: Name is empty, number is non-empty
        TestEntity entity2 = new TestEntity("", 30);
        String jsonString2 = mapper.writeValueAsString(entity2);
        assertFalse(jsonString2.contains("name"));
        assertTrue(jsonString2.contains("number"));

        // Case 3: Name is non-empty, number is null
        TestEntity entity3 = new TestEntity("Jane Doe", null);
        String jsonString3 = mapper.writeValueAsString(entity3);
        assertTrue(jsonString3.contains("name"));
        assertFalse(jsonString3.contains("number"));

        // Case 4: Both fields are "empty"
        TestEntity entity4 = new TestEntity("", null);
        String jsonString4 = mapper.writeValueAsString(entity4);
        assertFalse(jsonString4.contains("name"));
        assertFalse(jsonString4.contains("number"));
    }
}
