
import com.fasterxml.jackson.core.Base64Variants;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;

public class TreeTraversingParserTest {

    @Test
    public void testTreeTraversingParserWithBase64Variant() throws Exception {
        // Base64 encoded string using MIME_NO_LINEFEEDS variant, create your encoded input accordingly.
        String encodedData = "c29tZSBkYXRh";  // Example of "some data" in Base64

        // Non-default variant: Base64Variants.MODIFIED_FOR_URL (just an example)
        // Create a JsonNode with a base64 encoded string
        ObjectMapper mapper = new ObjectMapper();
        JsonNode textNode = mapper.readTree("\"" + encodedData + "\"");

        // Use TreeTraversingParser with the non-default Base64Variant
        try (TreeTraversingParser parser = new TreeTraversingParser(textNode)) {
            byte[] expectedData = "some data".getBytes("UTF-8");
            byte[] actualData = parser.getBinaryValue(Base64Variants.MODIFIED_FOR_URL);

            assertArrayEquals("The decoded binary data should match the expected data.",
                    expectedData, actualData);
        }
    }
}
