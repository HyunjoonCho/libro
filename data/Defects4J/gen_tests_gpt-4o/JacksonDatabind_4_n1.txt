
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class InvalidFormatExceptionTest {

    @Test
    public void testInvalidFormatExceptionIndex() {
        String jsonArray = "[\"1\", \"two\", \"3\"]"; // "two" should cause a format exception

        ObjectMapper objectMapper = new ObjectMapper();
        
        try {
            objectMapper.readValue(jsonArray, List.class);
        } catch (InvalidFormatException e) {
            assertTrue(e.getMessage().contains("Cannot deserialize value of type")); // Check if the error is due to format
            assertEquals(-1, e.getPath().get(0).getIndex(), "Index should be -1 indicating it was not set correctly");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
