
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class JscDeterministicTest {

    @Test
    public void testJscDeterministicWarning() {
        String jsCode = "var t = null;\n" +
                        "window.test = function() {\n" +
                        "  if (t != null) {\n" +
                        "    t = null;\n" +
                        "  }\n" +
                        "  t = 1;\n" +
                        "};";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(LanguageMode.ECMASCRIPT_2015);
        options.setLanguageOut(LanguageMode.ECMASCRIPT5);
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);

        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("test.js", jsCode));
        
        List<SourceFile> externs = AbstractCommandLineRunner.getDefaultExterns();

        compiler.compile(externs, inputs, options);

        // Checking if JSC_DETERMINISTIC_TEST warning is present
        boolean warningFound = compiler.getWarnings().stream()
            .anyMatch(d -> d.getType().equals(DiagnosticGroups.DETERMINISTIC_TEST));

        // Ensure that JSC_DETERMINISTIC_TEST warning is present
        assertTrue("Expected JSC_DETERMINISTIC_TEST warning.", warningFound);
    }
}
