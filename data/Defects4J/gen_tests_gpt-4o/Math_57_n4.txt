
import org.apache.commons.math3.clustering.Cluster;
import org.apache.commons.math3.clustering.Clusterable;
import org.apache.commons.math3.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.distance.EuclideanDistance;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.junit.jupiter.api.Test;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class KMeansPlusPlusClustererTest {

    class SimplePoint implements Clusterable {
        private final double[] point;

        SimplePoint(double x, double y) {
            this.point = new double[]{x, y};
        }

        @Override
        public double[] getPoint() {
            return point;
        }
    }

    @Test
    public void testKMeansPlusPlusClustererTruncation() {
        List<SimplePoint> points = new ArrayList<>();
        points.add(new SimplePoint(0.1, 0.2));
        points.add(new SimplePoint(0.2, 0.1));
        points.add(new SimplePoint(0.3, 0.2));
        points.add(new SimplePoint(0.2, 0.3));
        points.add(new SimplePoint(0.25, 0.25));

        KMeansPlusPlusClusterer<SimplePoint> clusterer = new KMeansPlusPlusClusterer<>(
                2, 100, new EuclideanDistance(), new JDKRandomGenerator(42));
        
        // Perform clustering
        List<Cluster<SimplePoint>> clusters = clusterer.cluster(points);
        
        // Check if there are any empty clusters, which shouldn't happen normally
        for (Cluster<SimplePoint> cluster : clusters) {
            assertFalse(cluster.getPoints().isEmpty(), "Cluster should not be empty");
        }
    }
}
