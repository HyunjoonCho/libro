
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.ZipException;

import static org.junit.Assert.*;

public class ZipArchiveInputStreamTest {

    @Test
    public void testInvalidZipEntry() {
        // This byte array represents an invalid ZIP archive.
        byte[] invalidZipData = new byte[] {0x50, 0x4B, 0x03, 0x04, /* invalid data */ 0x00, 0x00};

        ByteArrayInputStream bais = new ByteArrayInputStream(invalidZipData);
        ZipArchiveInputStream zis = new ZipArchiveInputStream(bais);

        try {
            // When we call getNextZipEntry, it should throw an exception due to the invalid entry.
            ZipArchiveEntry entry = zis.getNextZipEntry();
            fail("Expected a ZipException to be thrown, but got null indicating no more entries instead");
        } catch (ZipException e) {
            assertEquals("ZIP archive contains an invalid entry", e.getMessage());
        } catch (IOException e) {
            fail("Expected a ZipException, but got a different IOException");
        }
    }
}
