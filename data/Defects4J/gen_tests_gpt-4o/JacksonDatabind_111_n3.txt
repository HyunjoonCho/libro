
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import java.io.IOException;
import java.util.concurrent.atomic.AtomicReference;

public class AtomicReferenceTest {

    static class MyBean {
        @JsonProperty("refRef")
        private AtomicReference<AtomicReference<Integer>> refRef;

        public AtomicReference<AtomicReference<Integer>> getRefRef() {
            return refRef;
        }

        public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {
            this.refRef = refRef;
        }
    }

    @Test
    public void testReferenceDeserialization() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectReader objectReader = objectMapper.readerFor(MyBean.class);

        // Test deserialization of non-null value
        MyBean intRef = objectReader.readValue("{\"refRef\": {\"value\": {\"value\": 2} } }");
        Assertions.assertNotNull(intRef.getRefRef());
        Assertions.assertNotNull(intRef.getRefRef().get());
        Assertions.assertEquals(Integer.valueOf(2), intRef.getRefRef().get().get());

        // Test deserialization of null value
        MyBean nullRef = objectReader.readValue("{\"refRef\": null }");
        Assertions.assertNotNull(nullRef.getRefRef());
        Assertions.assertNotNull(nullRef.getRefRef().get());
        Assertions.assertNull(nullRef.getRefRef().get().get());
    }
}
