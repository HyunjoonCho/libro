
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import junit.framework.TestCase;

import java.util.EnumMap;
import java.util.Map;

public class EnumMapJsonPropertyTest extends TestCase {

    private enum MyEnum {
        @JsonProperty("custom_value_one")
        VALUE_ONE,
        @JsonProperty("custom_value_two")
        VALUE_TWO
    }

    public void testEnumMapSerializationWithJsonProperty() throws JsonProcessingException {
        // Set up the EnumMap with the custom @JsonProperty values
        EnumMap<MyEnum, String> enumMap = new EnumMap<>(MyEnum.class);
        enumMap.put(MyEnum.VALUE_ONE, "one");
        enumMap.put(MyEnum.VALUE_TWO, "two");

        // ObjectMapper for JSON serialization
        ObjectMapper objectMapper = new ObjectMapper();
        
        // Serialize the EnumMap to JSON
        String json = objectMapper.writeValueAsString(enumMap);

        // Print the serialized JSON
        System.out.println(json);

        // Assert that the JSON contains custom @JsonProperty values instead of enum names
        assertTrue(json.contains("\"custom_value_one\""));
        assertTrue(json.contains("\"custom_value_two\""));
        assertFalse(json.contains("\"VALUE_ONE\""));
        assertFalse(json.contains("\"VALUE_TWO\""));
    }
}
