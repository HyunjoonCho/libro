
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import static org.junit.Assert.*;

public class Iso8601DateParsingTest {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @Test
    public void testIso8601DateWithFractionalSecond() {
        String jsonDate = "\"2014-10-03T18:00:00.6-05:00\"";
        Date date = parseDate(jsonDate);
        assertNotNull("Date should be parsed", date);
        assertEquals("Unexpected date", parseExpectedDate("2014-10-03T18:00:00.6-05:00"), date);
    }

    @Test
    public void testIso8601DateWithMoreFractionalSeconds() {
        String jsonDate = "\"2014-10-03T18:00:00.61-05:00\"";
        Date date = parseDate(jsonDate);
        assertNotNull("Date should be parsed", date);
        assertEquals("Unexpected date", parseExpectedDate("2014-10-03T18:00:00.61-05:00"), date);
    }

    @Test
    public void testIso8601DateWithoutSeconds() {
        String jsonDate = "\"1997-07-16T19:20+01:00\"";
        Date date = parseDate(jsonDate);
        assertNotNull("Date should be parsed", date);
        assertEquals("Unexpected date", parseExpectedDate("1997-07-16T19:20+01:00"), date);
    }

    @Test
    public void testIso8601DateWithSecondsAndFraction() {
        String jsonDate = "\"1997-07-16T19:20:30.45+01:00\"";
        Date date = parseDate(jsonDate);
        assertNotNull("Date should be parsed", date);
        assertEquals("Unexpected date", parseExpectedDate("1997-07-16T19:20:30.45+01:00"), date);
    }

    private Date parseDate(String jsonDate) {
        try {
            return objectMapper.readValue(jsonDate, Date.class);
        } catch (InvalidFormatException e) {
            fail("Failed to parse date: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            fail("Unexpected error during parsing");
        }
        return null;
    }

    private Date parseExpectedDate(String dateString) {
        try {
            return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSXXX").parse(dateString);
        } catch (ParseException e) {
            e.printStackTrace();
            fail("Expected date format is incorrect");
        }
        return null;
    }
}
