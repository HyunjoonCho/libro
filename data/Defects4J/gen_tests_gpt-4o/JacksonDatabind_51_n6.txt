
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

// Create a custom TypeIdResolver
class CustomTypeIdResolver extends TypeIdResolverBase {
    @Override
    public String idFromValue(Object value) {
        return value.getClass().getName();
    }
    
    @Override
    public String idFromValueAndType(Object value, Class<?> suggestedType) {
        return suggestedType.getName();
    }

    @Override
    public JavaType typeFromId(DatabindContext context, String id) {
        try {
            // Assume 'id' is the class name
            Class<?> clazz = Class.forName(id);
            return context.getTypeFactory().constructType(clazz);
        } catch (ClassNotFoundException e) {
            throw new IllegalStateException("Unknown class: " + id, e);
        }
    }

    @Override
    public JsonTypeInfo.Id getMechanism() {
        return JsonTypeInfo.Id.CUSTOM;
    }
}

// Create a generic wrapper class
class Wrapper<T> {
    public T value;
    public Wrapper(T value) {
        this.value = value;
    }
}

// The main class to test with a generic field
@JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, include = JsonTypeInfo.As.PROPERTY, property = "@type", visible = true)
class GenericContainer {
    public Wrapper<String> data;
}

public class CustomTypeIdResolverTest {
    @Test
    public void testGenericTypeResolution() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        String json = "{\"@type\":\"GenericContainer\", \"data\":{\"value\":\"test\"}}";
        
        GenericContainer result = mapper.readValue(json, GenericContainer.class);
        assertNotNull(result);
        assertNotNull(result.data);
        assertEquals("test", result.data.value);
    }
}
