
import static org.junit.Assert.assertEquals;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;

import org.junit.Test;

public class CompilerTest {

    @Test
    public void testForInLeftHandAssignment() {
        String originalJS = "window.Foo = function(A, B, C, D) {"
                           + " if ( A ) {"
                           + " if ( B ) {"
                           + " C = 0;"
                           + " } else {"
                           + " C = 0 in D;"
                           + " }"
                           + " while ( C-- ) {}"
                           + " }"
                           + "}";
        
        String expectedMinifiedJS = "window.Foo=function(b,c,a,d){if(b)for(a=c?0:(0 in d);a--;);}";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Configure the compiler options to mimic the closure-compiler on the web
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);
        options.setLanguageOut(CompilerOptions.LanguageMode.NO_TRANSPILE);
        options.setCodingConvention(new com.google.javascript.jscomp.ClosureCodingConvention());

        JSSourceFile input = JSSourceFile.fromCode("input.js", originalJS);
        Result result = compiler.compile(new JSSourceFile[0], new JSSourceFile[]{input}, options);

        if (!result.success) {
            // You can add additional logging here if needed to debug what's going wrong
            for (com.google.javascript.jscomp.JSError error : result.errors) {
                System.out.println(error.toString());
            }
        }
        
        String minifiedCode = compiler.toSource();
        
        assertEquals(expectedMinifiedJS, minifiedCode);
    }
}
