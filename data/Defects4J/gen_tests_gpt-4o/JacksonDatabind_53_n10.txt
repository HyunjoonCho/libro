
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.Map;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;

// Assume Foo implements MyCustomIdInterface
class Foo implements MyCustomIdInterface {
    private UUID id;
    private String property;
    
    @JsonCreator
    public Foo(@JsonProperty("id") UUID id, @JsonProperty("property") String property) {
        this.id = id;
        this.property = property;
    }

    @Override
    public UUID getId() {
        return id;
    }

    public String getProperty() {
        return property;
    }
}

interface MyCustomIdInterface {
    UUID getId();
}

// Assume MyHashMap to be our custom Map implementation with some logic for this example.
class MyHashMap<K, V extends MyCustomIdInterface> extends java.util.HashMap<K, V> {}

class MyPojo {
    private Map<UUID, Foo> something;

    @JsonDeserialize(as = MyHashMap.class)
    private void setSomething(Map<UUID, Foo> incomingValue) {
        this.something = incomingValue;
    }

    public Map<UUID, Foo> getSomething() {
        return something;
    }
}

public class JsonDeserializationTest {
    @Test
    public void testDeserializationWithCustomMap() throws IOException {
        String json = "{ \"something\": [{ \"id\": \"550e8400-e29b-41d4-a716-446655440000\", \"property\": \"value\" }] }";
        
        ObjectMapper objectMapper = new ObjectMapper();
        MyPojo pojo = objectMapper.readValue(json, MyPojo.class);
        
        UUID expectedId = UUID.fromString("550e8400-e29b-41d4-a716-446655440000");
        Foo foo = pojo.getSomething().get(expectedId);

        assertEquals(expectedId, foo.getId());
        assertEquals("value", foo.getProperty());
    }
}
