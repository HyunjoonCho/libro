
import org.joda.time.DateTimeFieldType;
import org.joda.time.Partial;
import static org.joda.time.DateTimeFieldType.clockhourOfDay;
import static org.joda.time.DateTimeFieldType.hourOfDay;
import static org.junit.Assert.*;
import org.junit.Test;

public class PartialTest {

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidPartialConstructionWithArray() {
        // This should throw an exception due to duplicate types
        new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });
    }

    @Test
    public void testInvalidPartialConstructionWithWithMethod() {
        // This should not match the expected behavior if Partials are correctly validated
        Partial partial1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);
        Partial partial2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);
        try {
            boolean result = partial1.isEqual(partial2);
            fail("Expected IllegalArgumentException due to mismatched field types, but got result: " + result);
        } catch (IllegalArgumentException e) {
            // Expected exception: "objects must have matching field types"
            assertEquals("objects must have matching field types", e.getMessage());
        }
    }
}
