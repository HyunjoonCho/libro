@Test
public void testMultiplePiePlotDatasetListener() {
    // Create a mock dataset
    DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    dataset.addValue(1.0, "Row1", "Column1");

    // Create the MultiplePiePlot with the dataset via constructor
    MultiplePiePlot plot = new MultiplePiePlot(dataset);

    // Modify the dataset to see if the plot updates (effectively testing if the listener is working)
    dataset.setValue(2.0, "Row1", "Column1");

    // Using reflection to access the private method 'handleDatasetChanged' if possible or necessary,
    // Otherwise, validate change manually if available methods exist on plot to verify changes.
    boolean isDatasetListenerAdded = false;
    try {
        Method method = MultiplePiePlot.class.getDeclaredMethod("handleDatasetChanged", DatasetChangeEvent.class);
        method.setAccessible(true);
        DatasetChangeEvent event = new DatasetChangeEvent(this, dataset);
        method.invoke(plot, event);
        isDatasetListenerAdded = true;
    } catch (Exception e) {
        fail("Dataset change handling failed. Dataset listener may not be configured correctly.");
    }

    assertTrue("Dataset change listener is not added properly on construction.", isDatasetListenerAdded);
}