
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.UnionType;
import com.google.javascript.rhino.jstype.FunctionType;

import org.junit.Test;

import java.util.logging.Level;

public class ClosureCompilerIssueTest {

    @Test(expected = RuntimeException.class)
    public void testResolveTypesCastingIssue() {
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARS, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.STRICT_MODULE_DEP_CHECK, CheckLevel.ERROR);
        options.setWarningLevel(DiagnosticGroups.INVALID_CASTS, CheckLevel.ERROR);
        options.setSummaryDetailLevel(3);
        options.setProcessCommonJSModules(true);
        options.setOutputCharset("UTF-8");
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setLoggingLevel(Level.ALL);

        Compiler compiler = new Compiler();
        
        // Mock input files as source code
        String jsCode = "/* Mock JavaScript code that could trigger UnionType */\n" +
                        "var unionTypeFunction = /** @type {Function} */ (function() {});";
        
        // SourceFile containing mock JS code
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        
        // Trigger the Compiler to run which should raise the expected exception
        compiler.compile(
                DefaultExterns.getInstance().getExterns(), // default externs
                java.util.Collections.singletonList(input), // mock source input
                options);
    }
}
