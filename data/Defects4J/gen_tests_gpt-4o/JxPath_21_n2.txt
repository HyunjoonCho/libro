
import org.apache.commons.jxpath.JXPathContext;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class JXPathNullComparisonTest {

    @Test
    public void testNullHandlingInComparisons() {
        Map<String, Integer> map = new HashMap<>();
        map.put("a", 1);
        map.put("b", null);
        map.put("c", 1);

        JXPathContext context = JXPathContext.newContext(map);

        // Case 1: a is not equal to b (as b is null)
        assertEquals("true", context.getValue("a != b").toString());

        // Case 2: a is not equal to c (as both have the same value)
        assertEquals("false", context.getValue("a != c").toString());

        // Case 3: a is not equal to b (as b is null, so they are not equal)
        assertEquals("false", context.getValue("a = b").toString());

        // Case 4: a is equal to c (as both have the same value)
        assertEquals("true", context.getValue("a = c").toString());

        // Case 5: Not operation on a is equal to b (should be true as they are not equal)
        assertEquals("true", context.getValue("not(a = b)").toString());

        // Case 6: Not operation on a is equal to c (should be false as they are equal)
        assertEquals("false", context.getValue("not(a = c)").toString());
    }
}
