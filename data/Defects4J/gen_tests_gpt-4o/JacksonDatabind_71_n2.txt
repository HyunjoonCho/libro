
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JsonMappingException;

import java.util.Map;

import org.junit.Test;

public class MissingKeyDeserializerTest {

    @Test(expected = JsonMappingException.class)
    public void testDeserializeMapWithCharSequenceKey() throws Exception {
        // JSON representing a map with string keys and integer values
        String json = "{\"key1\": 1, \"key2\": 2}";

        // Create ObjectMapper instance
        ObjectMapper objectMapper = new ObjectMapper();

        // Define target type: Map with CharSequence keys and Integer values
        TypeReference<Map<CharSequence, Integer>> typeRef = new TypeReference<Map<CharSequence, Integer>>() {};

        // Attempt to deserialize JSON into Map<CharSequence, Integer>
        Map<CharSequence, Integer> resultMap = objectMapper.readValue(json, typeRef);

        // Print the result (if it didn't throw an exception)
        System.out.println(resultMap);
    }
}
