
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer;
import org.apache.commons.math3.optimization.fitting.HarmonicFitter;
import org.apache.commons.math3.optimization.fitting.HarmonicOscillator;
import org.apache.commons.math3.optimization.fitting.WeightedObservedPoint;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class HarmonicFitterTest {

    @Test
    public void testParameterGuesserAmplitudeFailure() {
        // Prepare the points that will cause the issue with the ParameterGuesser
        List<WeightedObservedPoint> observations = new ArrayList<>();
        observations.add(new WeightedObservedPoint(1.0, 1.0, 0.1));
        observations.add(new WeightedObservedPoint(1.0, 2.0, 0.2));
        observations.add(new WeightedObservedPoint(1.0, 3.0, 0.3));
        observations.add(new WeightedObservedPoint(1.0, 4.0, 0.4));
        observations.add(new WeightedObservedPoint(1.0, 5.0, 0.5));

        // Instantiate HarmonicFitter
        HarmonicFitter fitter = new HarmonicFitter(new AbstractLeastSquaresOptimizer() {});

        // The ParameterGuesser is an internal class, so we'll manually create and invoke it
        HarmonicFitter.ParameterGuesser guesser = new HarmonicFitter.ParameterGuesser(observations);

        // Perform the parameter guess
        double[] guessedParameters = guesser.guess();

        // Check the guessed amplitude value
        double amplitude = guessedParameters[0];
        assertTrue("The guessed amplitude should be sensible and positive", amplitude > 0);
    }
}
