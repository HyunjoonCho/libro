
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class TreeTraversingParserTest {

    public static class IntClass {
        public int x;

        @Override
        public String toString() {
            return String.valueOf(x);
        }
    }

    private final ObjectMapper mapper = new ObjectMapper();

    private void readAndPrint(String example, String expectedTree, String expectedString) {
        String fromTree;
        try {
            JsonNode tree = mapper.readTree(example);
            fromTree = mapper.readerFor(IntClass.class).readValue(tree).toString();
        } catch (JsonMappingException e) {
            fromTree = e.getClass().getSimpleName();
        } catch (JsonProcessingException e) {
            fromTree = "JsonProcessingException";
        }

        String fromString;
        try {
            fromString = mapper.readerFor(IntClass.class).readValue(example).toString();
        } catch (JsonMappingException e) {
            fromString = e.getClass().getSimpleName();
        } catch (JsonProcessingException e) {
            fromString = "JsonProcessingException";
        }

        assertEquals(expectedTree, fromTree);
        assertEquals(expectedString, fromString);
    }

    @Test
    public void testTreeTraversingParserIntBounds() {
        readAndPrint("{\"x\": 0}", "0", "0");
        readAndPrint("{\"x\": 10}", "10", "10");
        readAndPrint("{\"x\": 1e4}", "10000", "10000");
        readAndPrint("{\"x\": 1e10}", "2147483647", "JsonMappingException");
        readAndPrint("{\"x\": 2147483648}", "-2147483648", "JsonMappingException");
        readAndPrint("{\"x\": 2147483649}", "-2147483647", "JsonMappingException");
        readAndPrint("{\"x\": -2147483649}", "2147483647", "JsonMappingException");
        readAndPrint("{\"x\": -4294967295}", "1", "JsonMappingException");
        readAndPrint("{\"x\": 0.1}", "0", "0");
        readAndPrint("{\"x\": 1.9}", "1", "1");
        readAndPrint("{\"x\": 1.9999999999999999}", "2", "2");
        readAndPrint("{\"x\": true}", "MismatchedInputException", "MismatchedInputException");
        readAndPrint("{\"x\": {}}", "MismatchedInputException", "MismatchedInputException");
        readAndPrint("{\"x\": []}", "MismatchedInputException", "MismatchedInputException");
        readAndPrint("{\"x\": [0]}", "MismatchedInputException", "MismatchedInputException");
        readAndPrint("{\"x\": \"0\"}", "0", "0");
        readAndPrint("{\"x\": \"10\"}", "10", "10");
        readAndPrint("{\"x\": \"1e4\"}", "InvalidFormatException", "InvalidFormatException");
        // Additional cases that were relevant in the bug report
        readAndPrint("{\"x\": \"1.9999999999999999\"}", "InvalidFormatException", "InvalidFormatException");
    }
}
