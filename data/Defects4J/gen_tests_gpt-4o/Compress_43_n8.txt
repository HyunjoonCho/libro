public void testZipLocalAndCentralDirectoryVersionNeededToExtractMismatch() throws IOException {
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(byteArrayOutputStream);
    ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(bufferedOutputStream);

    ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
    entry.setMethod(ZipEntry.DEFLATED);
    zipOutputStream.putArchiveEntry(entry);
    zipOutputStream.write("test".getBytes());
    zipOutputStream.closeArchiveEntry();
    zipOutputStream.close();

    byte[] zipBytes = byteArrayOutputStream.toByteArray();
    ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(zipBytes);
    ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(byteArrayInputStream);
    
    ZipArchiveEntry localEntry = zipInputStream.getNextZipEntry();
    
    assertNotNull(localEntry);
    
    // Skipping bytes until the central directory offset
    for (int i = 0; i < zipBytes.length; i++) {
        if ((zipBytes[i] & 0xFF) == 0x50 && (zipBytes[i + 1] & 0xFF) == 0x4B && 
            (zipBytes[i + 2] & 0xFF) == 0x01 && (zipBytes[i + 3] & 0xFF) == 0x02) {
            // Start of central directory
            int centralVersionNeededOffset = i + 6;
            int centralVersionNeeded = ((zipBytes[centralVersionNeededOffset + 1] & 0xFF) << 8)
                                        + (zipBytes[centralVersionNeededOffset] & 0xFF);
            assertEquals("Version needed to extract does not match between local and central directory", 
                         localEntry.getVersionNeededToExtract(), centralVersionNeeded);
            break;
        }
    }  
}