
import org.junit.Test;
import java.io.*;

import static org.junit.Assert.*;

public class ClosureCompilerIssueTest {

    @Test
    public void testIdentifierMinusNegativeNumber() throws IOException, InterruptedException {
        // Prepare the JavaScript code as given in the bug report.
        String jsCode = "var g = 5; console.log(g--0.0);";

        // Write the JavaScript code to a temporary file
        File tempJsFile = File.createTempFile("bulletfail", ".js");
        BufferedWriter writer = new BufferedWriter(new FileWriter(tempJsFile));
        writer.write(jsCode);
        writer.close();

        // Path to your closure compiler jar file
        String closureCompilerPath = "path/to/closure-compiler-v20230626.jar";
        // Output file for compiled JS
        File compiledJsFile = File.createTempFile("cc", ".js");

        // Run the Closure Compiler command with ADVANCED_OPTIMIZATIONS
        Process process = new ProcessBuilder(
                "java", "-jar", closureCompilerPath,
                "--compilation_level", "ADVANCED_OPTIMIZATIONS",
                "--js", tempJsFile.getAbsolutePath(),
                "--js_output_file", compiledJsFile.getAbsolutePath()
        ).start();

        // Wait for the compiler process to complete
        process.waitFor();

        // Check the output file for incorrect parse (for demonstration purposes, print the output)
        BufferedReader reader = new BufferedReader(new FileReader(compiledJsFile));
        StringBuilder compiledJs = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            compiledJs.append(line);
        }
        reader.close();

        // The expected failure condition, as per the bug, is output containing "g--0.0"
        assertTrue("Expected compiled JS to have 'g--0.0'", compiledJs.toString().contains("g--0.0"));

        // [Optional] Run the compiled JS using Node.js (if possible) to ensure it indeed does not parse correctly
        // This part assumes Node.js is installed and available in the system path.
        Process nodeProcess = new ProcessBuilder("node", compiledJsFile.getAbsolutePath()).start();
        BufferedReader errorReader = new BufferedReader(new InputStreamReader(nodeProcess.getErrorStream()));
        StringBuilder errorOutput = new StringBuilder();
        while ((line = errorReader.readLine()) != null) {
            errorOutput.append(line).append("\n");
        }

        // The bug description states the code will not parse, so there should be an error output
        assertFalse("Expected JS engine to error due to incorrect parsing", errorOutput.toString().isEmpty());
    }
}
