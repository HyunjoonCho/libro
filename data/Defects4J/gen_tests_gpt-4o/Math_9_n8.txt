
import org.apache.commons.math3.geometry.euclidean.threed.Line;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class LineTest {

    @Test
    public void testRevertPrecision() {
        // Create a line with a specified point and direction far from the origin
        Vector3D point = new Vector3D(1e9, 1e9, 1e9);
        Vector3D direction = new Vector3D(1, 2, 3);
        Line line = new Line(point, direction, 1.0e-10);

        // Output the original direction
        System.out.println("Original direction: " + line.getDirection());

        // Revert the line
        line.revert();

        // Output the reverted line direction
        System.out.println("Reverted direction: " + line.getDirection());

        // Check if the direction is negated properly
        Vector3D expectedRevertedDirection = direction.negate();

        assertEquals(expectedRevertedDirection.getX(), line.getDirection().getX(), 1.0e-10);
        assertEquals(expectedRevertedDirection.getY(), line.getDirection().getY(), 1.0e-10);
        assertEquals(expectedRevertedDirection.getZ(), line.getDirection().getZ(), 1.0e-10);

        // Check if the direction's magnitude remains unchanged when revered
        assertTrue(line.getDirection().normalize().distance(expectedRevertedDirection.normalize()) < 1.0e-10);
    }
}
