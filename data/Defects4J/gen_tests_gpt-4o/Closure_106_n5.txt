
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.fail;

public class CollapsePropertiesTest {

    @Test
    public void testIssue107() {
        // Create the JavaScript source code that causes the issue
        String jsCode = "var Foo = function() {};\n" +
                        "goog.exportSymbol('Foo', Foo);\n" +
                        "Foo.prototype.method = function() {};\n" +
                        "goog.exportSymbol('Foo.prototype.method', Foo.prototype.method);";

        // Prepare the compiler with the necessary options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        // Set up the input for the compiler
        List<SourceFile> externs = CommandLineRunner.getBuiltinExterns(CompilerOptions.Environment.BROWSER);
        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("input.js", jsCode));

        try {
            // Compile the source code
            Result result = compiler.compile(externs, inputs, options);
            if (result.success) {
                // Success is unexpected, test should fail if no exception occurs
                fail("Expected to fail due to throwing a RuntimeException: java.lang.IllegalArgumentException");
            }
        } catch (RuntimeException e) {
            // Check that the exception is the expected one
            assertTrue(e.getCause() instanceof IllegalArgumentException);
        }
    }
}
