
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.logging.Logger;

import static org.junit.Assert.assertTrue;

public class TarArchiveOutputStreamTest {

    private static final Logger sLog = Logger.getLogger(TarArchiveOutputStreamTest.class.getName());

    @Test
    public void testBytesWritten() throws Exception {
        FileOutputStream myOutputStream = new FileOutputStream("temp/tartest.tar");
        ArchiveOutputStream sTarOut = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR, myOutputStream);

        // Assuming this file exists and is sizeable
        File sSource = new File("share/od_l.txt"); 
        TarArchiveEntry sEntry = new TarArchiveEntry(sSource);
        sTarOut.putArchiveEntry(sEntry);

        FileInputStream sInput = new FileInputStream(sSource);
        byte[] cpRead = new byte[8192];

        int iRead;
        while ((iRead = sInput.read(cpRead)) > 0) {
            sTarOut.write(cpRead, 0, iRead);
        }

        sLog.info("Processed: " + ((TarArchiveOutputStream) sTarOut).getBytesWritten() + " bytes. File Len: " + sSource.length());

        sInput.close();
        sTarOut.closeArchiveEntry();
        sTarOut.close();

        long bytesWritten = ((TarArchiveOutputStream) sTarOut).getBytesWritten();
        sLog.info("Processed: " + bytesWritten + " bytes after closing. File Len: " + sSource.length());

        // Validation: the bytes written should be greater than zero and should roughly match the file length plus the tar header size.
        assertTrue("Bytes written should be greater than zero", bytesWritten > 0);
        assertTrue("Bytes written should include headers, thus greater than or approximately equal to the original file size", 
                   bytesWritten >= sSource.length());
    }
}
