
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.StringReader;

import static org.junit.Assert.assertEquals;

public class JsonParserIssueTest {

    @Test
    public void testTokenLocationAfterFieldName() throws Exception {
        _testTokenLocationAfterFieldName(false);
        _testTokenLocationAfterFieldName(true);
    }

    private void _testTokenLocationAfterFieldName(Boolean useStream) throws Exception {
        final String DOC = "{\"name\":123}";
        JsonFactory jf = new JsonFactory();
        JsonParser jp = useStream
                ? jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8")))
                : jf.createParser(new StringReader(DOC));

        // Start object
        assertEquals(JsonToken.START_OBJECT, jp.nextToken());

        // Field name
        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());
        // Location after FIELD_NAME
        int fieldNameLine = jp.getTokenLocation().getLineNr();
        int fieldNameColumn = jp.getTokenLocation().getColumnNr();
        
        // Value
        assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
        // Location after VALUE_NUMBER_INT
        int valueLine = jp.getTokenLocation().getLineNr();
        int valueColumn = jp.getTokenLocation().getColumnNr();

        // Check if token location updates correctly
        assertEquals("Line location should be the same", fieldNameLine, valueLine);
        assertNotEquals("Column location should be different", fieldNameColumn, valueColumn);

        jp.close();
    }
}
