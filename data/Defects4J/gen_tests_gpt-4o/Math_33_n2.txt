
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverBugTest {
    
    @Test
    public void testSimplexSolverIncorrectResults() {
        // Define the linear objective function: Maximize 3x + 2y
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{3, 2}, 0);

        // Define the constraints: 
        // x + y <= 4
        // x - y >= 1  (translated into -x + y <= -1)
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 1}, Relationship.LEQ, 4));
        constraints.add(new LinearConstraint(new double[]{-1, 1}, Relationship.LEQ, -1));

        // Instantiate the SimplexSolver
        SimplexSolver solver = new SimplexSolver();

        // Try to find the optimal solution
        PointValuePair solution = solver.optimize(
            objectiveFunction,
            new org.apache.commons.math3.optim.MaxIter(100),
            GoalType.MAXIMIZE, 
            new NonNegativeConstraint(true),
            new org.apache.commons.math3.optim.linear.LinearConstraintSet(constraints)
        );

        // Expected results for the test case: maximum at (2.5, 1.5) with value of 10.5
        double[] point = solution.getPoint();
        double objectiveValue = solution.getValue();

        // Check if the solution matches the expected results
        assertEquals(2.5, point[0], 1e-6);
        assertEquals(1.5, point[1], 1e-6);
        assertEquals(10.5, objectiveValue, 1e-6);
    }
}
