
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

public class XPathRoundingFunctionsTest {

    private final XPath xPath = XPathFactory.newInstance().newXPath();

    private void assertXPathValue(String expression, Double expectedValue) {
        try {
            Double result = (Double) xPath.evaluate(expression, null, XPathConstants.NUMBER);
            if (result.isNaN()) {
                assertEquals("Expected NaN", expectedValue.isNaN(), result.isNaN());
            } else {
                assertEquals("Expected " + expectedValue, expectedValue, result, 0.0);
            }
        } catch (XPathExpressionException e) {
            throw new AssertionError("Invalid XPath expression: " + expression, e);
        }
    }

    @Test
    public void testRoundingFunctions() {
        assertXPathValue("floor('NaN')", Double.NaN);
        assertXPathValue("floor(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("floor(2 div 0)", Double.POSITIVE_INFINITY);

        assertXPathValue("ceiling('NaN')", Double.NaN);
        assertXPathValue("ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("ceiling(2 div 0)", Double.POSITIVE_INFINITY);

        assertXPathValue("round('NaN')", Double.NaN);
        assertXPathValue("round(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("round(2 div 0)", Double.POSITIVE_INFINITY);
    }
}
