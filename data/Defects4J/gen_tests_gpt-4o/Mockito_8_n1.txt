
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.mockito.internal.util.reflection.GenericMetadataSupport;

// Define the interface with a self-referential generic type
interface GenericsSelfReference<T extends GenericsSelfReference<T>> {
    T self();
}

public class GenericMetadataSupportTest {
    
    // Test method to reproduce the StackOverflowError
    @Test(expected = StackOverflowError.class)
    public void typeVariable_of_self_type() {
        // Attempt to infer and resolve the generic return type
        GenericMetadataSupport genericMetadata = GenericMetadataSupport.inferFrom(GenericsSelfReference.class)
            .resolveGenericReturnType(firstNamedMethod("self", GenericsSelfReference.class));

        // Assert the raw type is equal to GenericsSelfReference class
        assertEquals(GenericsSelfReference.class, genericMetadata.rawType());
    }

    // Helper method to find the method in the class based on name
    private java.lang.reflect.Method firstNamedMethod(String methodName, Class<?> clazz) {
        for (java.lang.reflect.Method method : clazz.getDeclaredMethods()) {
            if (method.getName().equals(methodName)) {
                return method;
            }
        }
        throw new IllegalArgumentException("Method with name " + methodName + " not found in " + clazz);
    }
}
