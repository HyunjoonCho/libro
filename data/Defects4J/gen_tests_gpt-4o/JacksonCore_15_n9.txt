
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.JsonPointerBasedFilter;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class FilteringParserDelegateTest {
    
    private static final String JSON_INPUT = "{ \"items\": [{\"id\": 1}, {\"id\": 2}, {\"id\": 3}] }";

    @Test
    public void testAllowMultipleMatches() throws IOException {
        JsonFactory jsonFactory = new JsonFactory();
        ObjectMapper mapper = new ObjectMapper(jsonFactory);
        
        // Filter to match items with "id" field
        JsonPointerBasedFilter filter = new JsonPointerBasedFilter("/items/id");
        
        // Initialize parser with filter allowing multiple matches
        JsonParser parser = new FilteringParserDelegate(
                jsonFactory.createParser(JSON_INPUT), 
                filter, 
                true, // Here we enable _allowMultipleMatches feature
                false
        );

        JsonNode rootNode = mapper.readTree(parser);

        // Checking the filter allows multiple matches
        JsonNode itemsNode = rootNode.get("items");

        assertNotNull(itemsNode);
        assertEquals(3, itemsNode.size());

        int index = 1;
        for (JsonNode itemNode : itemsNode) {
            assertEquals(index, itemNode.get("id").asInt());
            index++;
        }
    }
}
