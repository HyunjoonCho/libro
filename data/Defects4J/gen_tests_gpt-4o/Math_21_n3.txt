
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.CholeskyDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.random.CorrelatedRandomVectorGenerator;
import org.apache.commons.math3.random.GaussianRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CorrelatedRandomVectorGeneratorTest {

    @Test
    public void testCovarianceMatrixZeroRowsBug() {
        // First covariance matrix
        RealMatrix covarianceMatrix1 = new Array2DRowRealMatrix(new double[][]{
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.0, 0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });

        // Second covariance matrix
        RealMatrix covarianceMatrix2 = new Array2DRowRealMatrix(new double[][]{
            {0.013445532, 0.01039469, 0.0, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        });

        // Third covariance matrix
        RealMatrix covarianceMatrix3 = new Array2DRowRealMatrix(new double[][]{
            {0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });

        // Test for matrix 1
        double rank1 = estimateRank(covarianceMatrix1);
        assertEquals("Expected rank 4", 4, rank1, 0);

        // Test for matrix 2
        double rank2 = estimateRank(covarianceMatrix2);
        assertEquals("Expected rank 4", 4, rank2, 0);

        // Test for matrix 3
        double rank3 = estimateRank(covarianceMatrix3);
        assertEquals("Expected rank 4", 4, rank3, 0);
    }

    private double estimateRank(RealMatrix covarianceMatrix) {
        try {
            GaussianRandomGenerator rng = new GaussianRandomGenerator(new Well19937c());
            CorrelatedRandomVectorGenerator generator = new CorrelatedRandomVectorGenerator(
                    new double[covarianceMatrix.getRowDimension()],
                    covarianceMatrix,
                    1.0e-12,
                    rng
            );
            return generator.getRank();
        } catch (Exception e) {
            return -1; // Represents failure
        }
    }
}
