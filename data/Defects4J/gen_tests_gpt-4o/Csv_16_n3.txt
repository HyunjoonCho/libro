
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.Iterator;

import static org.junit.Assert.assertEquals;

public class CSVParserTest {

    @Test
    public void testNewIteratorSameLexerWithPeekIssue() throws Exception {
        String fiveRows = "1\n2\n3\n4\n5\n";

        System.out.println("\nTesting with peek:");

        CSVParser parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);

        int recordNumber = 0;
        
        Iterator<CSVRecord> iter1 = parser.iterator();

        while (iter1.hasNext()) {
            CSVRecord record = iter1.next();
            recordNumber++;
            System.out.println(recordNumber + " -> " + record.get(0));
            if (recordNumber >= 2) {
                break;
            }
        }

        // Here we test peeking which causes an issue
        // Peeking with a new iterator
        Iterator<CSVRecord> iter2 = parser.iterator();
        boolean hasNext = iter2.hasNext();
        System.out.println("hasNext(): " + hasNext);
        assertEquals(true, hasNext);

        while (iter2.hasNext()) {
            CSVRecord record = iter2.next();
            recordNumber++;
            System.out.println(recordNumber + " -> " + record.get(0));
        }

        // The output shows that one record (number 3) is skipped, causing inconsistency
        // Expected output:
        // 1 -> 1
        // 2 -> 2
        // hasNext(): true
        // 3 -> 4
        // 4 -> 5
    }
}
