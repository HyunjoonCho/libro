public void testClosureCompilerCrash() {
    String code = "var g=function(m){return m*Math.random()|0},d=document,h=d.getElementById('h'),c=d.getElementById('c'),l;" +
                  "(l=function(){requestAnimationFrame(l);h.style.textShadow=\"0 0 1px #000,\"+(g(10)-5)+\"px \"+(g(10)-5)+\"px 0 #888,0 0 180px rgb(\"+g(255)+\",\"+g(255)+\",\"+g(255)+\")\"})();" +
                  "d.addEventListener('mousemove',function(v){c.style.marginTop=(v.pageY/10+15|0)+'px'});";
    
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    Compiler compiler = new Compiler();
    CompilerInput input = new CompilerInput(SourceFile.fromCode("test.js", code));
    JsAst ast = new JsAst(input.getSourceFile());
    
    Node errorRoot = null;
    try {
        errorRoot = ast.getAstRoot(compiler);
        compiler.compile(ImmutableList.<SourceFile>of(), ImmutableList.of(input.getSourceFile()), options);
    } catch (RuntimeException e) {
        if (e.getMessage().contains("INTERNAL COMPILER ERROR")) {
            assertTrue(true);
            return;
        }
    }
    fail("Expected an INTERNAL COMPILER ERROR");
}