
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipFile;

import java.io.File;
import java.io.IOException;

public class UnixSymlinkTest {

    public static void main(String[] args) throws IOException {
        try (ZipFile zipFile = new ZipFile(new File("invalid-entry.jar"))) {
            printAttributes(zipFile, "META-INF/");
            printAttributes(zipFile, "META-INF/maven/");
        }
    }

    private static void printAttributes(ZipFile zipFile, String name) {
        ZipArchiveEntry entry = zipFile.getEntry(name);
        if (entry != null) {
            System.out.printf("%-17s: symlink:%-5s - unixMode:%s%n", name, entry.isUnixSymlink(), entry.getUnixMode());
        } else {
            System.out.printf("Entry not found: %s%n", name);
        }
    }

    @org.junit.Test
    public void testIsUnixSymlink() throws IOException {
        try (ZipFile zipFile = new ZipFile(new File("invalid-entry.jar"))) {
            ZipArchiveEntry entry = zipFile.getEntry("META-INF/maven/");
            if (entry != null) {
                boolean isSymlink = entry.isUnixSymlink();
                int unixMode = entry.getUnixMode();
                // The broken entry should not be considered as a symlink
                assertFalse("The entry should not be considered a symlink.", isSymlink);
                assertEquals("The unixMode should match the broken entry permission.", 65535, unixMode);
            } else {
                fail("Entry META-INF/maven/ not found in the jar file.");
            }
        }
    }
}
