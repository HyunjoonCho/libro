
import org.apache.commons.math3.optim.linear.SimplexTableau;
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.linear.Relationship;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexTableauTest {

    @Test
    public void testBasicVariableDetection() {
        // Define the linear objective function: maximize 3x + 2y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3, 2 }, 0);

        // Define the constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.LEQ, 4)); // x <= 4
        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.LEQ, 6)); // y <= 6
        constraints.add(new LinearConstraint(new double[] { 3, 2 }, Relationship.LEQ, 18)); // 3x + 2y <= 18

        // Create a SimplexTableau with the given objective function and constraints
        SimplexTableau tableau = new SimplexTableau(f, constraints, GoalType.MAXIMIZE, true, 0);

        // Check if the basic variable detection logic correctly identifies basic variables
        // Here we are ensuring that the tableau recognizes a basic variable should have an entry of 1
        for (int i = 0; i < tableau.getWidth(); i++) {
            double basicRowEntry = tableau.getEntry(i, tableau.getBasicRow(i));
            assertEquals("Entry should be equal to 1 to indicate a basic variable", 1.0, basicRowEntry, 1e-9);
        }
    }
}
