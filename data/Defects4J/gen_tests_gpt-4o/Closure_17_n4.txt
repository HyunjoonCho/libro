public void testClosureCompilerConstTypeAnnotation() {
    String code = ""
        + "/**\n"
        + " * Class defining an interface with two numbers.\n"
        + " * @interface\n"
        + " */\n"
        + "function TwoNumbers() {}\n"
        + "/** @type number */\n"
        + "TwoNumbers.prototype.first;\n"
        + "/** @type number */\n"
        + "TwoNumbers.prototype.second;\n"
        + "/** @const */ var SOME_DEFAULT =\n"
        + "/** @type {TwoNumbers} */ ({first: 1, second: 2});\n"
        + "/**\n"
        + " * Class with a two number member.\n"
        + " * @constructor\n"
        + " */\n"
        + "function HasTwoNumbers() {\n"
        + " /** @type {TwoNumbers} */\n"
        + " this.twoNumbers = this.getTwoNumbers();\n"
        + "}\n"
        + "/**\n"
        + " * Get the default two numbers.\n"
        + " * @return {TwoNumbers}\n"
        + " */\n"
        + "HasTwoNumbers.prototype.getTwoNumbers = function() {\n"
        + " return SOME_DEFAULT;\n"
        + "};";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", code), options);

    assertEquals("Should compile with no warnings", 0, compiler.getWarningCount());
}