public void testRuntimeExceptionWithExternPrototype() {
    try {
        // Set up the compiler with advanced optimizations and the externs file 'prototype.js'
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Assume 'prototype.js' and 'bootloader.js' are loaded as strings for testing
        SourceFile extern = SourceFile.fromCode("prototype.js", "function Str(key, holder, stack) {}");
        SourceFile input = SourceFile.fromCode("bootloader.js", "(function() {})()");

        // Expected to throw RuntimeException due to the bug
        compiler.compile(extern, input, options);

        fail("Expected a RuntimeException due to INTERNAL COMPILER ERROR");
    } catch (RuntimeException e) {
        assertTrue(e.getMessage().contains("INTERNAL COMPILER ERROR"));
    }
}