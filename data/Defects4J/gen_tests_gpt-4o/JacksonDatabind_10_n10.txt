
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

// Sample serializer that transforms map values
class MySerializer extends com.fasterxml.jackson.databind.JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeFieldName(entry.getKey());
            gen.writeString("serialized-" + entry.getValue());
        }
        gen.writeEndObject();
    }
}

// Sample converter that applies a simple transformation
class MyConverter extends com.fasterxml.jackson.databind.util.StdConverter<Map<String, String>, Map<String, String>> {
    @Override
    public Map<String, String> convert(Map<String, String> value) {
        Map<String, String> converted = new HashMap<>();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            converted.put(entry.getKey(), "converted-" + entry.getValue());
        }
        return converted;
    }
}

@JsonPropertyOrder(alphabetic = true)
class RequestParameters {
    private Map<String, String> parameters;

    public RequestParameters() {
        parameters = new HashMap<>();
        parameters.put("param1", "value1");
        parameters.put("param2", "value2");
    }

    @JsonSerialize(using = MySerializer.class)
    // Comment out the Serializer line and uncomment the Converter line to test converter effect instead
    // @JsonSerialize(converter = MyConverter.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

public class JsonAnyGetterTest {

    @Test
    public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        RequestParameters params = new RequestParameters();

        String json = objectMapper.writeValueAsString(params);
        
        // With MySerializer, this should result in "serialized-" prefix.
        // However, the bug report indicates this might not be the case.
        assertEquals("{\"param1\":\"serialized-value1\",\"param2\":\"serialized-value2\"}", json);
    }
}
