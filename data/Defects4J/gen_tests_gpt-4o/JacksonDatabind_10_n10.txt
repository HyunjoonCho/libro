public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    TestClass testInstance = new TestClass();
    testInstance.parameters.put("key", "value");

    String result = mapper.writeValueAsString(testInstance);

    assertTrue(result.contains("\"key\":\"custom-value\""));
}

static class TestClass {
    private Map<String, String> parameters = new HashMap<>();

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

static class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey(), "custom-" + entry.getValue());
        }
        gen.writeEndObject();
    }
}