
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class CompilerTest {

    public static String compile(String input) {
        // Simulated output from a hypothetical compiler that tries to minify JS code
        if (input.contains("= 0 in")) {
            return "window.Foo=function(b,c,a,d){if(b)for(a=c?0:0 in d;a--;);}";
        }
        // This is a placeholder for actual compilation logic
        return input;
    }

    @org.junit.Test
    public void testInvalidForInLeftHandAssignment() {
        String inputCode = "window.Foo = function(A, B, C, D) {\n" +
                           " if ( A ) { \n" +
                           " if ( B ) {\n" +
                           " C = 0;\n" +
                           " } else {\n" +
                           " C = 0 in D;\n" +
                           " }\n" +
                           " while ( C-- ) {}\n" +
                           " }\n" +
                           "}";

        String expectedOutput = "window.Foo=function(b,c,a,d){if(b)for(a=c?0:(0 in d);a--;);}";
        String actualOutput = compile(inputCode);

        assertEquals("Unexpected minified output leading to syntax error.", expectedOutput, actualOutput);

        try {
            // Simulating JS execution error
            if (actualOutput.contains("for(a=c?0:0 in d;a--;);")) {
                throw new SyntaxError("Unexpected token ;");
            }
        } catch (SyntaxError e) {
            fail("Compiled JS contains syntax error: " + e.getMessage());
        }
    }

    // Custom exception to simulate JavaScript's SyntaxError
    static class SyntaxError extends RuntimeException {
        SyntaxError(String message) {
            super(message);
        }
    }
}
