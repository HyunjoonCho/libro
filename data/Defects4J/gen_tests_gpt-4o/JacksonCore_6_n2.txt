
import static org.junit.jupiter.api.Assertions.*;

import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import java.io.IOException;

public class JsonPointerTest {

    @Test
    public void testJsonPointerWithInvalidIndex() throws IOException {
        // Sample JSON for testing
        String json = "{ \"array\": [ \"first\", \"second\" ], \"00\": \"zero-zero\" }";

        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode = mapper.readTree(json);

        // JsonPointer pointing to an invalid numeric index "00"
        JsonPointer invalidIndexPointer = JsonPointer.compile("/array/00");

        // Check that the pointer to an invalid numeric index does not point to an array element
        JsonNode resultNodeForInvalidIndex = rootNode.at(invalidIndexPointer);
        assertTrue(resultNodeForInvalidIndex.isMissingNode(), "Pointer should not match array index with leading zeros");

        // Ensure pointer can correctly match property name "00"
        JsonPointer validPropertyNamePointer = JsonPointer.compile("/00");
        JsonNode resultNodeForValidProperty = rootNode.at(validPropertyNamePointer);
        assertEquals("zero-zero", resultNodeForValidProperty.asText(), "Pointer should match the property name \"00\"");
    }
}
