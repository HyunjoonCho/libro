
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.assertNull;

public class UUIDDeserializerTest {

    @Test
    public void itUsesDeserializationProblemHandlerProperly() throws IOException {
        ObjectMapper mapper = new ObjectMapper().addHandler(new DeserializationProblemHandler() {
            @Override
            public Object handleWeirdStringValue(DeserializationContext ctxt, Class<?> targetType, String valueToConvert, String failureMsg) throws IOException {
                return null; // Return null to handle strange strings gracefully
            }
        });

        IdBean result = null;
        try {
            result = mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
        } catch (InvalidFormatException e) {
            // The problem is that this exception gets thrown anyway, despite the handler
            assertNull("DeserializationProblemHandler should have suppressed the exception", e);
        }

        assertNull("UUID should be null when input is not valid", result.getId());
    }

    public static class IdBean {
        private UUID id;

        public UUID getId() {
            return id;
        }

        public void setId(UUID id) {
            this.id = id;
        }
    }
}
