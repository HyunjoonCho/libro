
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import org.junit.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.fail;

public class LongDeserializationTest {

    @Test
    public void testPrimitiveLongDeserializationWithTypeResolver() {
        // Create test data
        Data data = new Data();
        data.key = 1;  // Primitive long field
        Map<String, Object> mapData = new HashMap<>();
        mapData.put("longInMap", 2L);
        mapData.put("longAsField", data);

        try {
            // Configure Jackson to preserve types
            JsonFactory factory = new JsonFactory();
            ObjectMapper mapper = new ObjectMapper(factory);
            StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();
            resolver.init(JsonTypeInfo.Id.CLASS, null);
            resolver.inclusion(JsonTypeInfo.As.PROPERTY);
            resolver.typeProperty("__t");
            mapper.setDefaultTyping(resolver);
            mapper.enable(SerializationFeature.INDENT_OUTPUT);

            // Serialize
            String json = mapper.writeValueAsString(mapData);
            System.out.println("json = " + json);

            // Attempt to Deserialize
            mapper.readValue(json, Map.class);

            fail("Deserialization didn't throw an exception as expected");
        } catch (IOException e) {
            // Validate the exception
            assert e.getMessage().contains("Class java.lang.Long not subtype of [simple type, class long]");
        }
    }

    static class Data {
        public long key;  // Primitive long field in the class
    }
}
