
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import org.junit.Test;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class StdDateFormatLeniencyTest {

    @Test
    public void testDefaultLenientDateParsing() {
        ObjectMapper objectMapper = new ObjectMapper();
        String dateStr = "2015-01-32";

        try {
            // Parse the date string using ObjectMapper
            Date date = objectMapper.readValue("\"" + dateStr + "\"", Date.class);

            // Check that the date is parsed using lenient mode by confirming the parsed date
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            assertEquals("2015-02-01", sdf.format(date));
        } catch (Exception e) {
            fail("Parsing should have succeeded in lenient mode, but it failed: " + e.getMessage());
        }
    }

    @Test
    public void testNonLenientDateParsing() {
        ObjectMapper objectMapper = new ObjectMapper();
        StdDateFormat dateFormat = new StdDateFormat();
        dateFormat.setLenient(false); // Hypothetical feature if supported

        objectMapper.setDateFormat(dateFormat);
        String dateStr = "2015-01-32";

        try {
            // Attempt to parse the date string using the non-lenient date format
            objectMapper.readValue("\"" + dateStr + "\"", Date.class);
            fail("Expected InvalidFormatException due to strict parsing, but parsing succeeded.");
        } catch (InvalidFormatException e) {
            // Expected exception due to non-lenient parsing
            assertEquals(ParseException.class, e.getCause().getClass());
        } catch (Exception e) {
            fail("Expected InvalidFormatException, but got: " + e.getClass());
        }
    }
}
