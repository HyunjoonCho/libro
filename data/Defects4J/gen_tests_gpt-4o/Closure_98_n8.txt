public void testClosureVariableInlining() {
    String originalCode = 
        "function foo() {" +
        " var arr = [1, 2, 3, 4, 5];" +
        " for (var i = 0, l = arr.length; i < l; i++) {" +
        " var j = arr[i];" +
        " (function() {" +
        " var k = j;" +
        " setTimeout(function() { console.log(k); }, 0);" +
        " })();" +
        " }" +
        "}" +
        "foo();";

    String expectedOutput = 
        "1\n" +
        "2\n" +
        "3\n" +
        "4\n" +
        "5\n";
    
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    options.setPrettyPrint(true);

    SourceFile extern = SourceFile.fromCode("externs.js", "function setTimeout(a, b) {} function console.log(a) {}");
    SourceFile input = SourceFile.fromCode("input.js", originalCode);
    
    compiler.compile(extern, input, options);
    String compiledCode = compiler.toSource();

    // Use a means of executing the compiledCode and capturing its console output
    // This depends on your environment and testing framework capabilities.
    
    String consoleOutput = executeCompiledCodeAndCaptureOutput(compiledCode);
    
    assertEquals(expectedOutput, consoleOutput);
}