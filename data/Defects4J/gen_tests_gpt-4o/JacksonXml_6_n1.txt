
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.assertEquals;

public class ToXmlGeneratorTest {

    @Test
    public void testWriteBinaryWithInputStream() throws Exception {
        byte[] data = "Test binary data".getBytes(StandardCharsets.UTF_8);
        ByteArrayInputStream inputStream = new ByteArrayInputStream(data);

        XmlMapper xmlMapper = new XmlMapper();
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();

        ToXmlGenerator generator = new XmlFactory(xmlMapper).createGenerator(outputStream, null);

        Base64Variant base64Variant = Base64Variant.getDefaultVariant();

        // This is hypothetical - assuming such a method is intended to exist
        // generator.writeBinary(base64Variant, inputStream, data.length);

        generator.close();

        String outputXml = outputStream.toString(StandardCharsets.UTF_8.name());

        // Constructing expected Base64 result from the binary input data
        String expectedBase64 = base64Variant.encode(data, false);

        String expectedXml =
                "<Base64Binary>" + expectedBase64 + "</Base64Binary>";

        assertEquals(expectedXml, outputXml);
    }
}
