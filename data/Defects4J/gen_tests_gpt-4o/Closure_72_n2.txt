
import static org.junit.Assert.fail;

import java.io.File;
import java.io.IOException;

import org.junit.Test;

import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;

public class ClosureCompilerTest {

    @Test
    public void testInternalCompilerErrorOnBullet() {
        // Assume bullet_1_1_q1.js is present in the test resources folder
        File jsFile = new File("src/test/resources/bullet_1_1_q1.js");
        File outputFile = new File("target/bullet_1_1_q1.cc.js");

        // Setup the command line arguments for Closure Compiler
        String[] args = {
            "--compilation_level", "ADVANCED_OPTIMIZATIONS",
            "--variable_map_output_file", "js.vars",
            "--js", jsFile.getAbsolutePath(),
            "--js_output_file", outputFile.getAbsolutePath()
        };

        try {
            // Initialize Closure Compiler with arguments
            CommandLineRunner runner = new CommandLineRunner(args);
            int resultCode = runner.shouldRunCompiler();

            // Check if compiler runs successfully
            if (resultCode != 0) {
                fail("Closure Compiler failed with code: " + resultCode);
            }

        } catch (Exception e) {
            // Catch and fail on any exceptions (e.g., INTERNAL COMPILER ERROR)
            fail("Exception occurred during compilation: " + e.getMessage());
        } finally {
            // Clean up generated file
            outputFile.delete();
        }
    }
}
