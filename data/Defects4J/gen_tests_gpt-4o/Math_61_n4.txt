
import org.apache.commons.math3.distribution.NormalDistribution;

public class PoissonDistributionImpl {
    private NormalDistribution normal;
    private double mean;

    public PoissonDistributionImpl(double p, NormalDistribution z) {
        super();
        setNormal(z);
        setMean(p);
    }

    public void setNormal(NormalDistribution z) {
        this.normal = z;
    }

    public void setMean(double p) {
        this.mean = p;
    }

    // Other methods...
}

// Here is the test case.

import org.apache.commons.math3.distribution.NormalDistribution;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class PoissonDistributionImplTest {

    @Test
    public void testOverridableMethodsInConstructor() {
        // Create a mock NormalDistribution
        NormalDistribution mockNormal = mock(NormalDistribution.class);

        // Use an anonymous subclass to override setNormal
        PoissonDistributionImpl poisson = new PoissonDistributionImpl(5.0, mockNormal) {
            @Override
            public void setNormal(NormalDistribution z) {
                // Simulate unexpected behavior by not setting the normal distribution
                // or doing something unexpected
                throw new IllegalStateException("This is unexpected behavior");
            }
        };

        try {
            poisson.setNormal(mockNormal);
            fail("Expected an IllegalStateException due to overridden setNormal()");
        } catch (IllegalStateException e) {
            // Expected exception
        }
    }

    @Test
    public void testImmutabilityIssue() {
        NormalDistribution normalDistribution = new NormalDistribution();
        PoissonDistributionImpl poisson = new PoissonDistributionImpl(5.0, normalDistribution);

        // Simulate mutation
        // This demonstration assumes there's a way to modify the normalDistribution
        // which isn't shown in the code snippet
        normalDistribution.sample(); // Just a placeholder to indicate potential mutation
        
        // Assert that the original state is not altered
        // These assertions are placeholders representing the expected original state
        assertNotNull(poisson); // This would be more complex and check actual values
    }
}
