
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertNotNull;

public class DiscreteDistributionTest {

    @Test
    public void testSampleWithSubclassFirstElement() {
        List<Pair<Object, Double>> list = new ArrayList<>();
        // The first element is an anonymous subclass of Object
        list.add(new Pair<>(new Object() {}, 0.0));
        list.add(new Pair<>(new Object(), 1.0));
        
        DiscreteDistribution<Object> distribution = new DiscreteDistribution<>(list);
        
        // Attempt to sample should not throw an exception
        Object[] sample = distribution.sample(1);
        
        assertNotNull(sample);
        assertNotNull(sample[0]);
    }

    // Dummy implementation of Pair class
    static class Pair<K, V> {
        private final K first;
        private final V second;

        public Pair(K first, V second) {
            this.first = first;
            this.second = second;
        }

        public K getFirst() {
            return first;
        }

        public V getSecond() {
            return second;
        }
    }

    // Dummy implementation of DiscreteDistribution class
    static class DiscreteDistribution<T> {

        private final List<Pair<T, Double>> elements;

        public DiscreteDistribution(List<Pair<T, Double>> elements) {
            this.elements = elements;
        }

        @SuppressWarnings("unchecked")
        public T[] sample(int sampleSize) {
            T[] result = (T[]) java.lang.reflect.Array.newInstance(elements.get(0).getFirst().getClass(), sampleSize);
            // Simplified sampling logic for test purposes
            result[0] = elements.get(1).getFirst();  // This mimics selection of the second element
            return result;
        }
    }
}
