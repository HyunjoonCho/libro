public void testISO8859_1EscapeEntities() {
    String[][] iso8859_1Escape = {
        {"\u00C6", "&AElig;"},
        {"\u00C7", "&Ccedil;"},
        {"\u00C8", "&Egrave;"},
        {"\u00C9", "&Eacute;"},
        {"\u00CA", "&Ecirc;"},
        {"\u00CB", "&Euml;"},
        {"\u00CC", "&Igrave;"},
        {"\u00CD", "&Iacute;"},
        {"\u00CE", "&Icirc;"},
        {"\u00CF", "&Iuml;"},
        {"\u00D0", "&ETH;"},
        {"\u00D1", "&Ntilde;"},
        {"\u00D2", "&Ograve;"},
        {"\u00D3", "&Oacute;"},
        {"\u00D4", "&Ocirc;"},
        {"\u00D5", "&Otilde;"},
        {"\u00D6", "&Ouml;"}, // Correct place for Ö - uppercase O, umlaut
        {"\u00D7", "&times;"}, // Correct place for multiplication sign
        {"\u00D8", "&Oslash;"}
    };

    // Check the correct mapping for Ö
    assertEquals("\u00D6", getUnicodeFromEntity("&Ouml;", iso8859_1Escape));

    // Check the correct mapping for the multiplication sign
    assertEquals("\u00D7", getUnicodeFromEntity("&times;", iso8859_1Escape));

    // This function is a stand-in for how you look up the correct unicode character
    // from the array for testing purposes
}

private String getUnicodeFromEntity(String entity, String[][] entityArray) {
    for (String[] pair : entityArray) {
        if (pair[1].equals(entity)) {
            return pair[0];
        }
    }
    return null;
}