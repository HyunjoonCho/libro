
import static org.junit.Assert.fail;
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.head.Context;
import org.junit.Test;

public class NamespaceTestCase {

    @Test
    public void testImplicitNamespaceBug() {
        String moduleACode = "goog.provide('apps');";
        String moduleBCode = "goog.provide('apps.foo.bar.B');";
        String moduleCCode = "goog.provide('apps.foo.bar.C');";

        // Use the Closure Compiler to compile the modules with SIMPLE_OPTIMIZATIONS
        try (Context context = Context.enter()) {
            Compiler compiler = new Compiler();

            CompilerOptions options = new CompilerOptions();
            CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

            SourceFile inputA = SourceFile.fromCode("moduleA.js", moduleACode);
            SourceFile inputB = SourceFile.fromCode("moduleB.js", moduleBCode);
            SourceFile inputC = SourceFile.fromCode("moduleC.js", moduleCCode);

            Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                             java.util.Arrays.asList(inputA, inputB, inputC), 
                                             options);

            String compiledCode = compiler.toSource();

            // Evaluate the compiled code and assert that no runtime error occurs
            try {
                context.evaluateString(context.initStandardObjects(), compiledCode, "testScript", 1, null);
            } catch (Exception e) {
                fail("Compiled code resulted in a runtime error: " + e.getMessage());
            }
        }
    }
}
