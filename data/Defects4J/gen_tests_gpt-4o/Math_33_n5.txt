
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolver() {
        // Objective function: Maximize 3x + 4y
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{3, 4}, 0);

        // Constraints: 
        // 2x + y <= 14
        // 4x + 3y <= 28
        // x >= 0
        // y >= 0
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{2, 1}, Relationship.LEQ, 14));
        constraints.add(new LinearConstraint(new double[]{4, 3}, Relationship.LEQ, 28));
        constraints.add(new LinearConstraint(new double[]{1, 0}, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 1}, Relationship.GEQ, 0));

        SimplexSolver solver = new SimplexSolver();
        
        try {
            PointValuePair solution = solver.optimize(objectiveFunction, constraints, GoalType.MAXIMIZE, false);
            double max = solution.getValue();
            double[] point = solution.getPoint();

            // Expected values for version 2.2: maximum value of 24 at point (6, 2)
            assertEquals(24.0, max, 1e-5);
            assertArrayEquals(new double[]{6.0, 2.0}, point, 1e-5);
        } catch (Exception e) {
            fail("SimplexSolver failed with exception: " + e.getMessage());
        }
    }
}
