
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.kotlin.KotlinModule;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class BigDecimalSerializationTest {

    static class Test {
        @JsonFormat(shape = JsonFormat.Shape.STRING)
        public BigDecimal value;

        public Test(BigDecimal value) {
            this.value = value;
        }
    }

    @Test
    public void testWriteBigDecimalAsPlainIsIgnoredWithJsonFormat() throws Exception {
        ObjectMapper mapper = new ObjectMapper()
                .registerModule(new KotlinModule())
                .configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true);

        Test test = new Test(new BigDecimal("0.0000000005"));
        String json = mapper.writeValueAsString(test);

        // Check if the output is in scientific notation when JsonFormat is applied
        assertEquals("{\"value\":\"0.0000000005\"}", json, "The BigDecimal should not be in scientific notation");
    }
}
