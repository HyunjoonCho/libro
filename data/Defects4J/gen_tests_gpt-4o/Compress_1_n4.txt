
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.io.IOUtils;
import org.junit.Test;
import static org.junit.Assert.fail;

public class CpioArchiveInputStreamTest {

    @Test
    public void testCpioUnpack() {
        // Assuming getFile() method provides a valid CPIO file for testing
        File input = getFile("cmdcreated.cpio");

        try (InputStream in = new FileInputStream(input);
             CpioArchiveInputStream cin = new CpioArchiveInputStream(in)) {

            CpioArchiveEntry entry;
            File dir = new File("outputDir");  // Sample output directory
            if (!dir.exists()) {
                dir.mkdirs();
            }

            while ((entry = (CpioArchiveEntry) cin.getNextCPIOEntry()) != null) {
                File target = new File(dir, entry.getName());
                
                // Ensure directories exist
                File parentDir = target.getParentFile();
                if (parentDir != null && !parentDir.exists()) {
                    parentDir.mkdirs();
                }

                try (OutputStream out = new FileOutputStream(target)) {
                    IOUtils.copy(cin, out);
                }
            }
        } catch (java.io.EOFException e) {
            fail("Unexpected EOFException occurred: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            fail("IOException occurred: " + e.getMessage());
        }
    }

    // Mock method to obtain a File object for the CPIO archive.
    // You should replace this with actual logic to obtain your test file.
    private File getFile(String fileName) {
        // Provide the path to your test CPIO archive file
        return new File("path/to/your/test/resources/" + fileName);
    }
}
