
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ClosureCompilerTest {
    
    // Simulate the function behavior described in the bug report
    public boolean closureCompilerTest(Node someNode) {
        String nodeId;

        // Original JavaScript logic
        return ((nodeId = someNode.getId()) != null 
                && (nodeId = Integer.toString(Integer.parseInt(nodeId.substring(1)))) != null 
                && Integer.parseInt(nodeId) > 0);
    }

    // A simple Node class to replicate the JavaScript object structure
    class Node {
        private String id;

        public Node(String id) {
            this.id = id;
        }

        public String getId() {
            return id;
        }
    }

    @Test
    public void testClosureCompilerTransformation() {
        Node node = new Node("a123");
        
        // Expected correct behavior (Should return true for "a123")
        assertTrue(closureCompilerTest(node));

        Node node2 = new Node("invalid_id");
        
        // Expected behavior for incorrect input (Should return false)
        assertFalse(closureCompilerTest(node2));

        Node node3 = new Node("b0");
        
        // Expected behavior for zero value (Should return false as nodeId>0 should fail)
        assertFalse(closureCompilerTest(node3));
    }
}
