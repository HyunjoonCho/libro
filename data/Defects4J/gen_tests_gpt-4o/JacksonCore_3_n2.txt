
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class UTF8StreamJsonParserTest {

    public void testUTF8StreamJsonParserColumnPosition() {
        String json = "{ invalidJson }";
        InputStream inputStream = new ByteArrayInputStream(json.getBytes());
        IOContext ctxt = new IOContext(new BufferRecycler(), inputStream, false);
        ObjectCodec codec = null; // No codec needed for this test
        BytesToNameCanonicalizer sym = BytesToNameCanonicalizer.createRoot();

        int startPosition = 5; // Start after the first characters
        UTF8StreamJsonParser parser = new UTF8StreamJsonParser(ctxt, JsonParser.Feature.collectDefaults(), inputStream,
                codec, sym, new byte[100], startPosition, json.length(), false);

        try {
            parser.nextToken();
        } catch (JsonParseException e) {
            // Check if the column of the exception location is calculated correctly
            int expectedColumn = 11; // This should match your expectation
            int actualColumn = e.getLocation().getColumnNr();
            assertEquals("The column number should be correctly calculated based on the starting position.", expectedColumn, actualColumn);
        }
    }

    private void assertEquals(String message, int expected, int actual) {
        if (expected != actual) {
            throw new AssertionError(message + " Expected: " + expected + " but got: " + actual);
        }
    }
}
