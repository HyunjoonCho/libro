
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testLabeledLoopsWithClosureCompiler() {
        String inputJs = "var i = 0; lab1: do { lab2: do { i++; if (1) { break lab2; } else { break lab1; } } while(false); } while(false); console.log(i);";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", inputJs);

        Result result = compiler.compile(extern, input, options);
        assertTrue("Compilation should be successful", result.success);

        String compiledCode = compiler.toSource();

        // The problematic generated output by the compiler
        String expectedOutput = "var a=0;do b:do{a++;break b}while(0);while(0);console.log(a);";

        // Verify that the compiled code matches the expected problematic output
        assertEquals("Compiled code does not match expected problematic output.", expectedOutput, compiledCode);
    }
}
