
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import java.util.Map;
import java.util.UUID;

// Custom interface enforcing an id retrieval contract
interface MyCustomIdInterface {
    UUID getId();
}

// Foo class implementing the necessary interface
class Foo implements MyCustomIdInterface {
    @JsonProperty("id")
    private UUID id;
    
    @JsonProperty("property")
    private String property;

    @Override
    public UUID getId() {
        return id;
    }

    public String getProperty() {
        return property;
    }
}

// Custom Map Implementation (Placeholder, should have custom logic using generics)
@JsonDeserialize(as = MyHashMap.class)
class MyHashMap extends java.util.HashMap<UUID, Foo> {
    // Custom logic to map list items to the map based on 'id' would go here.
    // For the purpose of this test, assume this is correctly implemented.
}

// Test class
public class JacksonDeserializationTest {

    @Test
    public void testCustomMapDeserialization() throws JsonProcessingException {
        String json = "{ \"something\": [ { \"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"property\": \"value\" } ] }";
        ObjectMapper objectMapper = new ObjectMapper();

        // Assume MyPojo is a class with a setSomething method as described
        class MyPojo {
            private Map<UUID, Foo> something;

            @JsonDeserialize(as = MyHashMap.class)
            public void setSomething(Map<UUID, Foo> incomingValue) {
                this.something = incomingValue;
            }

            public Map<UUID, Foo> getSomething() {
                return something;
            }
        }

        MyPojo myPojo = objectMapper.readValue(json, MyPojo.class);

        // Validate that the deserialization happened correctly
        UUID expectedId = UUID.fromString("123e4567-e89b-12d3-a456-426614174000");
        Foo foo = myPojo.getSomething().get(expectedId);

        assertNotNull(foo);
        assertEquals(expectedId, foo.getId());
        assertEquals("value", foo.getProperty());
    }
}
