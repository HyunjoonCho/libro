
import static org.junit.Assert.*;

import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ContextFactory;
import org.mozilla.javascript.EvaluatorException;
import org.mozilla.javascript.ScriptableObject;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class RhinoTest {

    private Context context;
    private Scriptable scope;

    @Before
    public void setUp() {
        context = ContextFactory.getGlobal().enterContext();
        scope = context.initStandardObjects();
    }

    @After
    public void tearDown() {
        Context.exit();
    }

    @Test
    public void testQuotedPropertyNameGetter() {
        String script = "var obj = { get 'x'() { return 1; } }; obj['x'];";
        Object result = context.evaluateString(scope, script, "testQuotedPropertyNameGetter", 1, null);
        assertEquals(1.0, Context.toNumber(result), 0.0);
    }

    @Test
    public void testNumericPropertyNameGetter() {
        String script = "var obj = { get 1() { return 1; } }; obj[1];";
        Object result = context.evaluateString(scope, script, "testNumericPropertyNameGetter", 1, null);
        assertEquals(1.0, Context.toNumber(result), 0.0);
    }

    @Test(expected = EvaluatorException.class)
    public void testInvalidScriptShouldThrowException() {
        String invalidScript = "var obj = { get 'invalid'() { return a; } };";
        context.evaluateString(scope, invalidScript, "testInvalidScriptShouldThrowException", 1, null);
    }
}
