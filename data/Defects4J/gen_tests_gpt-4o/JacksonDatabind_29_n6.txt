
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;
import static org.junit.Assert.*;

// Base class with polymorphic configuration
@JsonTypeInfo(use = Id.CLASS, include = As.EXTERNAL_PROPERTY, property = "type")
static abstract class Base {
    public String name;
}

// Concrete implementation
static class SubClass extends Base {
    public int value;
}

public class PolymorphicNullTypeIdTest {

    @Test(expected = InvalidTypeIdException.class)
    public void testNullTypeIdThrowsExceptionWithExternalTypeId() throws JsonProcessingException {
        // Prepare JSON without a type ID
        String json = "{\"name\":\"test\", \"value\":42}"; // Missing "type" property

        ObjectMapper mapper = new ObjectMapper();
        // Expect an exception due to missing type id
        mapper.readValue(json, Base.class);
    }
}
