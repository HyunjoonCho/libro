
import org.joda.time.DateTimeConstants;
import org.joda.time.MonthDay;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.IllegalFieldValueException;
import org.junit.Test;
import static org.junit.Assert.*;

public class MonthDayTest {

    @Test
    public void testAddDaysToISOLeapDate() {
        MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());
        assertEquals("--02-29", isoLeap.toString());
        
        try {
            isoLeap.plusDays(2);
            fail("Expected an IllegalFieldValueException to be thrown");
        } catch (IllegalFieldValueException e) {
            assertTrue(e.getMessage().contains("Value 29 for dayOfMonth must be in the range [1,28]"));
        }
    }
    
    @Test
    public void testOtherOperationsOnISOLeapDate() {
        MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());
        
        // These operations should also trigger similar errors
        try {
            isoLeap.plusMonths(1);
            fail("Expected an IllegalFieldValueException to be thrown");
        } catch (IllegalFieldValueException e) {
            assertTrue(e.getMessage().contains("Value 29 for dayOfMonth must be in the range [1,28]"));
        }

        try {
            isoLeap.plusMonths(-1);
            fail("Expected an IllegalFieldValueException to be thrown");
        } catch (IllegalFieldValueException e) {
            assertTrue(e.getMessage().contains("Value 29 for dayOfMonth must be in the range [1,28]"));
        }

        try {
            isoLeap.minusMonths(1);
            fail("Expected an IllegalFieldValueException to be thrown");
        } catch (IllegalFieldValueException e) {
            assertTrue(e.getMessage().contains("Value 29 for dayOfMonth must be in the range [1,28]"));
        }

        try {
            isoLeap.minusMonths(-1);
            fail("Expected an IllegalFieldValueException to be thrown");
        } catch (IllegalFieldValueException e) {
            assertTrue(e.getMessage().contains("Value 29 for dayOfMonth must be in the range [1,28]"));
        }

        try {
            isoLeap.minusDays(-1);
            fail("Expected an IllegalFieldValueException to be thrown");
        } catch (IllegalFieldValueException e) {
            assertTrue(e.getMessage().contains("Value 29 for dayOfMonth must be in the range [1,28]"));
        }
    }

    @Test
    public void testValidOperationsAroundISOLeapDate() {
        MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());
        
        // These operations should not trigger errors
        assertEquals("--02-28", isoLeap.minusDays(1).toString());
        assertEquals("--02-28", isoLeap.plusDays(-1).toString());
        assertEquals("--03-01", isoLeap.minusDays(1).plusDays(2).toString());
    }
}
