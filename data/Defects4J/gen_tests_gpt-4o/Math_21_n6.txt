
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.CholeskyDecomposition;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.NormalizedRandomGenerator;
import org.apache.commons.math3.random.CorrelatedRandomVectorGenerator;
import org.junit.Test;
import static org.junit.Assert.*;

public class CorrelatedRandomVectorGeneratorTest {

    @Test
    public void testCorrelatedRandomVectorGeneratorRank() {
        double[][] covarianceMatrix1 = {
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.0, 0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        };

        double[][] covarianceMatrix2 = {
            {0.013445532, 0.01039469, 0.0, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        };

        double[][] covarianceMatrix3 = {
            {0.013445532, 0.01039469, 0.009881156, 0.010499559},
            {0.01039469, 0.023006616, 0.008196856, 0.010732709},
            {0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.009210099, 0.019107243}
        };

        testRank(covarianceMatrix1, 4, "Matrix 1");
        testRank(covarianceMatrix2, 4, "Matrix 2"); // Expected to fail or behave incorrectly
        testRank(covarianceMatrix3, 4, "Matrix 3");
    }

    private void testRank(double[][] covarianceMatrix, int expectedRank, String matrixName) {
        RealMatrix matrix = new Array2DRowRealMatrix(covarianceMatrix);
        CholeskyDecomposition decomposition = new CholeskyDecomposition(matrix);
        RealMatrix rootMatrix = decomposition.getL();
        int rank = rootMatrix.getColumnDimension(); // Use getColumnDimension as a proxy for rank

        System.out.println(matrixName + " decomposed rank: " + rank);
        assertEquals("Rank of " + matrixName + " should be " + expectedRank, expectedRank, rank);
    }
}
