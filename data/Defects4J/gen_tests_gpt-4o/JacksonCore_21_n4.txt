
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class FilteringParserDelegateTest {

    @Test
    public void testFilteringParserDelegateMissingEndObject() throws IOException {
        String inputJson = "{"
                + "\"a\":123,"
                + "\"array\":[1,2],"
                + "\"ob\": {"
                + "\"value0\":2,"
                + "\"value\":3,"
                + "\"value2\":4"
                + "},"
                + "\"b\":true"
                + "}";
        
        JsonFactory factory = new JsonFactory();
        JsonParser p0 = factory.createParser(inputJson);
        JsonParser filteredParser = new FilteringParserDelegate(p0,
                new NameMatchFilter("value"),
                true,  // includePath
                false  // multipleMatches
        );

        ObjectMapper mapper = new ObjectMapper();
        String result = mapper.readTree(filteredParser).toString();

        // Expected: {"ob":{"value":3}}
        String expectedOutput = "{\"ob\":{\"value\":3}}";
        
        assertEquals(expectedOutput, result);
    }

    static class NameMatchFilter extends TokenFilter {
        private final String nameToMatch;

        NameMatchFilter(String nameToMatch) {
            this.nameToMatch = nameToMatch;
        }

        @Override
        public TokenFilter includeProperty(String name) {
            return name.equals(nameToMatch) ? TokenFilter.INCLUDE_ALL : null;
        }
    }
}
