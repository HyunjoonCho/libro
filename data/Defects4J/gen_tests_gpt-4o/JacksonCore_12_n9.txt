
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.StringReader;

import static org.junit.Assert.assertEquals;

public class JsonParserTest {

    @Test
    public void testTokenLocationAfterFieldName() throws Exception {
        _testTokenLocationAfterFieldName(false);
        _testTokenLocationAfterFieldName(true);
    }

    private void _testTokenLocationAfterFieldName(Boolean useStream) throws Exception {
        final String DOC = "{\"name\":123}";
        JsonFactory jf = new JsonFactory();
        JsonParser jp = useStream ?
                jf.createParser(new ByteArrayInputStream(DOC.getBytes("UTF-8")))
                : jf.createParser(new StringReader(DOC));

        assertEquals(JsonToken.START_OBJECT, jp.nextToken());
        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());

        // Capture the location when on the FIELD_NAME token
        int fieldNameLine = jp.getTokenLocation().getLineNr();
        int fieldNameColumn = jp.getTokenLocation().getColumnNr();

        // Move to next token
        assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());

        // Now ensure the location is updated
        assertEquals(1, jp.getTokenLocation().getLineNr());
        assertEquals(9, jp.getTokenLocation().getColumnNr());

        // Ensure the FIELD_NAME location was different
        assertEquals(1, fieldNameLine);
        assertEquals(8, fieldNameColumn); // Assuming "name" starts at column 3

        jp.close();
    }
}
