
import org.junit.Test;
import static org.junit.Assert.*;

public class JsCompilerTest {

    @Test
    public void testTrueFalseReplacement() {
        String inputJs = "function some_function() {"
                + "  var fn1;"
                + "  var fn2;"
                + "  any_expression && (fn2 = external_ref, fn1 = function () {"
                + "    return fn2();"
                + "  });"
                + "  return {"
                + "    method1: function () {"
                + "      fn1 && fn1();"
                + "      return true;"
                + "    },"
                + "    method2: function () {"
                + "      return false;"
                + "    }"
                + "  };"
                + "}";

        // The expected optimized output replacing true/false with !0/!1
        String expectedOutput = "function some_function() {"
                + "  var a, b;"
                + "  any_expression && (b = external_ref, a = function () {"
                + "    return b();"
                + "  });"
                + "  return {"
                + "    method1: function () {"
                + "      a && a();"
                + "      return !0;"
                + "    },"
                + "    method2: function () {"
                + "      return !1;"
                + "    }"
                + "  };"
                + "}";

        // Simulate the compilation and optimization process
        String actualOutput = mockJsCompiler(inputJs);

        // Assert that the compiled output matches the expected output
        assertEquals(expectedOutput, actualOutput);
    }

    private String mockJsCompiler(String inputJs) {
        // Mock function representing a JS compiler that replaces true/false with !0/!1
        // Here, we simulate the manual replacement as this would be functionality of a real compiler
        return inputJs.replace("return true;", "return !0;")
                      .replace("return false;", "return !1;");
    }
}
