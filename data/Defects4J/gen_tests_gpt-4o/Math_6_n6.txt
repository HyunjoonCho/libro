
import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.ModelFunction;
import org.apache.commons.math3.fitting.leastsquares.ModelFunctionJacobian;
import org.apache.commons.math3.fitting.leastsquares.ParameterValidator;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testGetIterations() {
        // setup
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();

        // action
        LeastSquaresProblem problem = new LeastSquaresBuilder()
                .start(new double[]{3})
                .model(new ModelFunction(new MultivariateVectorFunction() {
                    @Override
                    public double[] value(double[] point) {
                        return new double[]{FastMath.pow(point[0], 4)};
                    }
                }), new ModelFunctionJacobian(new MultivariateMatrixFunction() {
                    @Override
                    public double[][] value(double[] point) {
                        return new double[][]{{0.25 * FastMath.pow(point[0], 3)}};
                    }
                }))
                .target(new double[]{1})
                .weight(new double[]{1})
                .parameterValidator(new ParameterValidator() {
                    @Override
                    public double[] validate(double[] params) {
                        return params;
                    }
                })
                .maxEvaluations(100)
                .maxIterations(100)
                .build();

        LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problem);

        // verify
        assertThat(optimum.getEvaluations(), greaterThan(1));
        assertThat(optimum.getIterations(), greaterThan(1));
    }
}
