
import static org.junit.Assert.assertEquals;

import java.io.StringReader;
import java.io.StringWriter;
import javax.json.Json;
import javax.json.JsonReader;
import javax.json.JsonStructure;
import javax.json.JsonWriter;
import javax.json.stream.JsonParsingException;

import org.junit.Test;

public class RFC7159ComplianceTest {

    @Test
    public void testTopLevelPrimitiveWithoutLeniency() {
        // Simulating reading a top-level JSON string, which is a primitive
        String jsonString = "\"Hello, World!\"";
        
        try (JsonReader reader = Json.createReader(new StringReader(jsonString))) {
            JsonStructure jsonStructure = reader.read();
            assertEquals(Json.createValue("Hello, World!"), jsonStructure);
        } catch (JsonParsingException e) {
            // If leniency is not set, this could fail
            throw new AssertionError("Should be able to parse top-level string in strict mode per RFC 7159", e);
        }
    }

    @Test
    public void testTopLevelNumberWithoutLeniency() {
        // Simulating reading a top-level JSON number
        String jsonNumber = "42";
        
        try (JsonReader reader = Json.createReader(new StringReader(jsonNumber))) {
            JsonStructure jsonStructure = reader.read();
            assertEquals(Json.createValue(42), jsonStructure);
        } catch (JsonParsingException e) {
            // If leniency is not set, this could fail
            throw new AssertionError("Should be able to parse top-level number in strict mode per RFC 7159", e);
        }
    }

    @Test
    public void testWriteTopLevelPrimitiveWithoutLeniency() {
        // Try writing a top-level primitive JSON value
        StringWriter sw = new StringWriter();
        try (JsonWriter writer = Json.createWriter(sw)) {
            writer.write(Json.createValue("Standalone String"));
        }

        // Check that the output is correct
        assertEquals("\"Standalone String\"", sw.toString());
    }

    @Test
    public void testWriteTopLevelNumberWithoutLeniency() {
        // Try writing a top-level number JSON value
        StringWriter sw = new StringWriter();
        try (JsonWriter writer = Json.createWriter(sw)) {
            writer.write(Json.createValue(123));
        }

        // Check that the output is correct
        assertEquals("123", sw.toString());
    }
}
