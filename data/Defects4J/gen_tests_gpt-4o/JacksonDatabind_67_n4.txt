
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.deser.KeyDeserializer;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import java.io.IOException;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class EnumKeyDeserializerTest {

    // Define an Enum for testing
    public enum TestEnum {
        VALUE_ONE,
        VALUE_TWO
    }

    @Test
    public void testEnumKeyDeserializerModifier() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // Register the custom module to allow lowercase enum names as keys
        SimpleModule module = new SimpleModule();
        module.setDeserializerModifier(new BeanDeserializerModifier() {
            @Override
            public KeyDeserializer modifyKeyDeserializer(
                    DeserializationConfig config,
                    JavaType type,
                    KeyDeserializer deserializer) {
                if (!type.isEnumType()) {
                    return super.modifyKeyDeserializer(config, type, deserializer);
                }
                return new KeyDeserializer() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public Object deserializeKey(String key, DeserializationContext ctxt)
                            throws IOException, JsonProcessingException {
                        Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                        return Enum.valueOf(rawClass, key.toUpperCase());
                    }
                };
            }
        });

        objectMapper.registerModule(module);

        // JSON string with lowercase enum keys
        String json = "{\"value_one\":\"data\"}";

        // TypeReference for an ImmutableMap with enum keys
        TypeReference<ImmutableMap<TestEnum, String>> typeRef = new TypeReference<ImmutableMap<TestEnum, String>>() {};

        // Deserialize to test if the deserializer for keys respects the custom key deserializer
        Map<TestEnum, String> result = objectMapper.readValue(json, typeRef);

        // This assertion will fail if the custom key deserializer is ignored
        assertEquals("data", result.get(TestEnum.VALUE_ONE));
    }
}
