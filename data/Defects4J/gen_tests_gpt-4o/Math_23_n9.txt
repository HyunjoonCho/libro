
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.GoalType;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerBestPoint() {
        // Function with a known minimum
        UnivariateObjectiveFunction objectiveFunction = new UnivariateObjectiveFunction(x -> (x - 2) * (x - 2));

        // Initialize the BrentOptimizer
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Run the optimization between -10 and 10
        UnivariatePointValuePair result = optimizer.optimize(
            new SearchInterval(-10, 10),
            objectiveFunction,
            GoalType.MINIMIZE
        );

        // Check if the best point is indeed the known minimum (2, 0)
        // with a precision allowance for floating-point arithmetic.
        assertEquals(2.0, result.getPoint(), 1e-5);
        assertEquals(0.0, result.getValue(), 1e-5);
    }
}
