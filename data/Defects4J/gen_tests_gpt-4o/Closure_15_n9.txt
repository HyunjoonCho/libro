
public class DeleteKeyTest {

    @Test
    public void testRemoveKeyOriginalOrder() {
        var customData = new HashMap<String, String>() {{
            put("key", "value");
        }};
        
        Function<String, String> testRemoveKey = key -> {
            var dataSlot = customData;
            var retval = dataSlot != null ? dataSlot.get(key) : null;
            var hadKey = dataSlot != null && dataSlot.containsKey(key);

            if (dataSlot != null)
                dataSlot.remove(key);

            return hadKey ? retval : null;
        };

        // Original input order test
        assertEquals("value", testRemoveKey.apply("key"));
        assertFalse(customData.containsKey("key"));
    }

    @Test
    public void testRemoveKeySwitchedOrder() {
        var customData = new HashMap<String, String>() {{
            put("key", "value");
        }};
        
        Function<String, String> testRemoveKey = key -> {
            var dataSlot = customData;
            var retval = dataSlot != null ? dataSlot.get(key) : null;

            if (dataSlot != null)
                dataSlot.remove(key);

            var hadKey = dataSlot != null && dataSlot.containsKey(key);

            return hadKey ? retval : null;
        };

        // Switched order test
        assertNull(testRemoveKey.apply("key"));
        assertFalse(customData.containsKey("key"));
    }
}
