public void testLevenbergMarquardtOptimizerConvergenceChecker() {
    // Create a dummy model function and target values
    MultivariateJacobianFunction model = new MultivariateJacobianFunction() {
        public Pair<RealVector, RealMatrix> value(final RealVector point) {
            // Simple linear function: f(x) = 2x
            double x = point.getEntry(0);
            RealVector value = new ArrayRealVector(new double[]{2 * x});
            RealMatrix jacobian = new Array2DRowRealMatrix(new double[][]{{2}});
            return new Pair<>(value, jacobian);
        }
    };
    double[] target = {4.0};
    double[] initialGuess = {1.0};
    
    // Create a custom convergence checker
    ConvergenceChecker<PointVectorValuePair> checker = new ConvergenceChecker<PointVectorValuePair>() {
        @Override
        public boolean converged(int iteration, PointVectorValuePair previous, PointVectorValuePair current) {
            // For testing, converges immediately
            return true;
        }
    };

    // Instantiate the optimizer with the custom convergence checker
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(
        1e-10, 1e-10, 1e-10, checker
    );

    // Perform the optimization
    PointVectorValuePair result = optimizer.optimize(
        new MaxEval(100),
        new ObjectiveFunction(model),
        Target.of(target),
        new InitialGuess(initialGuess),
        new ModelFunctionJacobian(model),
        new ModelFunction(model)
    );

    // Check that the optimizer stopped due to the custom convergence criteria
    assertEquals(1.0, result.getPoint()[0], 1e-10);  // Should immediately converge on the initial guess
}