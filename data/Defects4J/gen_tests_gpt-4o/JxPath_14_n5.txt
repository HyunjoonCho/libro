
import org.junit.Test;
import static org.junit.Assert.*;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

public class CoreRoundingFunctionsTest {

    @Test
    public void testFloorFunctionWithSpecialValues() {
        assertXPathValue("floor('NaN')", Double.NaN);
        assertXPathValue("floor(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("floor(2 div 0)", Double.POSITIVE_INFINITY);
    }

    @Test
    public void testCeilingFunctionWithSpecialValues() {
        assertXPathValue("ceiling('NaN')", Double.NaN);
        assertXPathValue("ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("ceiling(2 div 0)", Double.POSITIVE_INFINITY);
    }

    @Test
    public void testRoundFunctionWithSpecialValues() {
        assertXPathValue("round('NaN')", Double.NaN);
        assertXPathValue("round(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("round(2 div 0)", Double.POSITIVE_INFINITY);
    }

    private void assertXPathValue(String expression, double expectedValue) {
        try {
            XPath xPath = XPathFactory.newInstance().newXPath();
            Double result = (Double) xPath.evaluate(expression, null, XPathConstants.NUMBER);

            if (Double.isNaN(expectedValue)) {
                assertTrue("Expected NaN for expression: " + expression, Double.isNaN(result));
            } else {
                assertEquals("Unexpected value for expression: " + expression, expectedValue, result, 0.0);
            }
        } catch (XPathExpressionException e) {
            fail("XPath evaluation failed for expression: " + expression);
        }
    }
}
