
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.rhino.Node;

import java.util.ArrayList;

public class CompilerBugReproTest {

    public static void main(String[] args) {
        // Test case to check optimization issue
        testAdvancedOptimizationIssue();
    }

    public static void testAdvancedOptimizationIssue() {
        // Create and configure the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Input JavaScript
        String jsInput = 
            "window['anchor'] = function (obj, modifiesProp) {" +
            "  return (function (saved) {" +
            "    return modifiesProp(obj) + saved;" +
            "  })(obj['prop']);" +
            "};";

        // A dummy extern which provides an extern for window
        String jsExterns = "var window;";

        // Parse inputs
        SourceFile extern = SourceFile.fromCode("extern", jsExterns);
        SourceFile inputFile = SourceFile.fromCode("input", jsInput);

        // Run the compiler
        Result result = compiler.compile(extern, inputFile, options);

        // Get the output JavaScript
        String compiledOutput = compiler.toSource();

        // Print or Verify the result
        System.out.println("Compiled Output:\n" + compiledOutput);

        // Expected behavior
        String expectedOutput = "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD;}";
        
        // Check if the compiled output matches the expected output
        assert compiledOutput.contains(expectedOutput) : "The compiled output does not match the expected result.";
    }
}
