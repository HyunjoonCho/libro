
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

class X<T> {
    private String s;
    private List<T> items;

    public X(String s, List<T> items) {
        this.s = s;
        this.items = items;
    }

    public String getS() {
        return s;
    }

    public List<T> getItems() {
        return items;
    }
}

class ListAttribute {
    private String itemJsonKey;
    private List<String> items;

    public ListAttribute(String itemJsonKey, List<String> items) {
        this.itemJsonKey = itemJsonKey;
        this.items = items;
    }

    public String getItemJsonKey() {
        return itemJsonKey;
    }

    public List<String> getItems() {
        return items;
    }
}

class ListAttributeSerializer extends StdSerializer<ListAttribute> {

    public ListAttributeSerializer() {
        this(null);
    }

    public ListAttributeSerializer(Class<ListAttribute> t) {
        super(t);
    }

    @Override
    public void serialize(ListAttribute value, JsonGenerator jgen,
                          SerializerProvider provider) throws IOException {
        jgen.writeStartObject();
        jgen.writeStringField("itemType", value.getItemJsonKey());
        jgen.writeObjectField("items", value.getItems());
        jgen.writeEndObject();
    }

    @Override
    public void serializeWithType(ListAttribute value, JsonGenerator jgen, 
                                  SerializerProvider provider, TypeSerializer typeSer) throws IOException {
        typeSer.writeTypePrefixForObject(value, jgen);
        jgen.writeStringField("itemType", value.getItemJsonKey());
        jgen.writeObjectField("items", value.getItems());
        typeSer.writeTypeSuffixForObject(value, jgen);
    }
}

public class SerializationTest {

    @Test
    public void testSerializationToTree() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(ListAttribute.class, new ListAttributeSerializer());
        mapper.registerModule(module);

        List<String> items = new ArrayList<>();
        items.add("item1");
        items.add("item2");
        ListAttribute listAttribute = new ListAttribute("typeKey", items);

        byte[] json = mapper.writeValueAsBytes(listAttribute);
        JsonNode tree = mapper.readTree(json);

        // Assert if the 'items' field is of type array instead of embedded object
        JsonNode itemsNode = tree.get("items");
        assertEquals(JsonNodeType.ARRAY, itemsNode.getNodeType(), "Items should be serialized as an array");
    }
}
