
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.TypeAdapter;
import com.google.gson.reflect.TypeToken;
import com.google.gson.typeadapters.RuntimeTypeAdapterFactory;
import org.junit.Test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

class Vehicle {
    // base class
}

class Car extends Vehicle {
    private String make;
    private String model;

    public Car(String make, String model) {
        this.make = make;
        this.model = model;
    }
}

class Truck extends Vehicle {
    private String payloadCapacity;

    public Truck(String payloadCapacity) {
        this.payloadCapacity = payloadCapacity;
    }
}

public class VehicleDeserializationTest {

    @Test
    public void testVehicleTypeHierarchyAdapter() {
        // Create a RuntimeTypeAdapterFactory for Vehicle
        RuntimeTypeAdapterFactory<Vehicle> vehicleAdapterFactory = RuntimeTypeAdapterFactory
                .of(Vehicle.class, "type")
                .registerSubtype(Car.class, "car")
                .registerSubtype(Truck.class, "truck");

        Gson gson = new Gson().newBuilder().registerTypeAdapterFactory(vehicleAdapterFactory).create();

        // JSON string representing a Truck but we'll try to decode as Car
        String json = "{\"type\":\"truck\", \"payloadCapacity\":\"15 tons\"}";

        try {
            // Attempt to deserialize JSON into a Car instance
            Car car = gson.fromJson(json, new TypeToken<Car>() {}.getType());
            fail("Expected JsonSyntaxException to be thrown due to type mismatch");
        } catch (JsonSyntaxException e) {
            assertTrue(e.getMessage().contains("truck"));  // Validate that the exception is because of a type mismatch
        }
    }
}
