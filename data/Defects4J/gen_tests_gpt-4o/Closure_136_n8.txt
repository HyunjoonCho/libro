
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.assertFalse;

public class ClosureCompilerBugTest {

    @Test
    public void testSuperReplacement() {
        // JavaScript code that uses Prototype.js $super feature.
        String jsCode = "function MyClass() {\n" +
                        "  this.method = function($super) {\n" +
                        "    return $super;\n" +
                        "  }; \n" +
                        "}\n" +
                        "var obj = new MyClass();\n" +
                        "obj.method('test');";

        // Set up compiler options with advanced optimizations.
        CompilerOptions options = new CompilerOptions();
        com.google.javascript.jscomp.Compiler compiler = new com.google.javascript.jscomp.Compiler();
        com.google.javascript.jscomp.Compiler.setLoggingLevel(java.util.logging.Level.SEVERE);
        CommandLineRunner runner = new CommandLineRunner(new String[] {
                "--compilation_level", "ADVANCED_OPTIMIZATIONS"
        }) {
            @Override
            protected CompilerOptions createOptions() {
                return options;
            }
        };

        // Compile the JavaScript code.
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                         SourceFile.fromCode("test.js", jsCode), 
                                         options);

        // Get the compiled code output.
        String compiledCode = compiler.toSource();

        // Assert that the $super identifier is not renamed.
        assertFalse("The $super identifier should not be renamed.", compiledCode.contains("$super$$"));
    }
}
