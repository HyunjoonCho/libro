
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.fail;

public class UUIDDeserializerTest {

    public static class IdBean {
        private UUID id;

        public UUID getId() {
            return id;
        }

        public void setId(final UUID id) {
            this.id = id;
        }
    }

    @Test
    public void testUUIDDeserializationWithHandler() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public Object handleWeirdStringValue(DeserializationContext ctxt, Class<?> targetType, String valueToConvert, String failureMsg)
                    throws IOException {
                if (targetType == UUID.class) {
                    return null; // Assuming that for a weird UUID string, we want to return null
                }
                return super.handleWeirdStringValue(ctxt, targetType, valueToConvert, failureMsg);
            }
        });

        try {
            mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
        } catch (JsonMappingException e) {
            fail("DeserializationProblemHandler was ignored for UUID deserialization.");
        }
    }
}
