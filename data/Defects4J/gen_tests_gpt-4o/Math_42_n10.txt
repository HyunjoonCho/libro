
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertTrue;

public class SimplexSolverTest {

    @Test
    public void testNegativeValueWithRestrictNonNegative() {
        // Objective function: 1 * x + 1 * y + 0
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{1, 1}, 0);

        // Constraints: 1 * x + 0 * y = 1
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0}, Relationship.EQ, 1));

        // Optimizing using SimplexSolver
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);

        // Extracting variables x and y
        double[] point = solution.getPoint();
        double x = point[0];
        double y = point[1];

        // Asserting that both variables are non-negative
        assertTrue("x should be non-negative", x >= 0);
        assertTrue("y should be non-negative", y >= 0);
    }
}
