
import com.fasterxml.jackson.annotation.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.Test;
import static org.junit.Assert.*;

public class DeserializationOfNullObjectIdTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    static class Entity {
        public Integer id;
        public String name;

        // Constructors, getters, setters...
        public Entity() {}
        public Entity(Integer id, String name) {
            this.id = id;
            this.name = name;
        }
    }

    @Test
    public void testDeserializeNullObjectId() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        // Test allowing null Object Id
        String jsonWithNullId = "{\"id\":null,\"name\":\"EntityName\"}";
        Entity entity = mapper.readValue(jsonWithNullId, Entity.class);
        assertNull(entity.id);
        assertEquals("EntityName", entity.name);

        // Optionally, test strict checking where null Object Id would throw an exception
        mapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, true);

        String jsonWithoutId = "{\"name\":\"EntityName\"}";
        try {
            mapper.readValue(jsonWithoutId, Entity.class);
            fail("Expected an exception due to missing Object Id");
        } catch (InvalidDefinitionException e) {
            // Expected exception
        }
    }
}
