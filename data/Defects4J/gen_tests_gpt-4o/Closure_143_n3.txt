
import org.junit.Test;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.File;
import java.nio.file.Files;
import java.nio.file.Paths;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerDefineTest {

    @Test
    public void testDefineStringIssue() throws Exception {
        // Set up test JavaScript file
        String jsContent = "/** @define {string} */\n" +
                           "test.VERSION = \"\";";
        Files.write(Paths.get("test.js"), jsContent.getBytes());

        // Run Closure Compiler process
        ProcessBuilder processBuilder = new ProcessBuilder(
            "java", "-jar", "compiler.jar",
            "--compilation_level", "ADVANCED_OPTIMIZATIONS",
            "--define", "test.VERSION=1.0.0",
            "--js_output_file", "test-min.js",
            "--js", "test.js"
        );
        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();

        // Capture output
        StringBuilder output = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }
        }

        // Ensure the process produces the expected failure output
        String errorMessage = "java.lang.RuntimeException: --define flag syntax invalid: test.VERSION=1.0.0";
        assertTrue("Expected error message not found in output.", output.toString().contains(errorMessage));
    }
}
