
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CommandLineRunner.CallGraphMode;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSModule;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.SourceFileProvider;
import com.google.javascript.jscomp.Compiler;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.List;

public class NonJSDocCommentTest {

    @Test
    public void testHandlingOfNonJSDocComment() {
        // JavaScript code input with different comment styles
        String script = "/* @preserve Foo License */\nalert('foo');\n/*! @preserve Foo License */\nalert('foo');";

        // Initialize compiler and compile the script
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""),
                                         SourceFile.fromCode("input.js", script),
                                         options);

        // Check if there is exactly one warning in the result
        assertEquals("There should be exactly one warning for incorrect JSDoc comment.", 1, result.warnings.length);

        // Verify that the warning corresponds to the incorrect non-JSDoc comment with annotations
        String warningDescription = result.warnings[0].description;
        String expectedWarningDescription = "Parse error. Non-JSDoc comment has annotations. Did you mean to start it with '/**'?";
        assertTrue("The warning should describe the non-JSDoc comment problem.",
                   warningDescription.contains(expectedWarningDescription));

        // Verify that the comment starting with '/*!' is not preserved
        String compiledCode = compiler.toSource();
        assertFalse("The /*! comment should not be preserved.",
                    compiledCode.contains("@preserve Foo License"));
    }
}
