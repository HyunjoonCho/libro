
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.junit.Assert;
import org.junit.Test;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerReturnsBestPoint() {
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                // A function with its global minimum at x = 2.0
                return (x - 2) * (x - 2);
            }
        };
        
        // Perform optimization
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(1000),
            new UnivariateObjectiveFunction(function),
            new SearchInterval(0, 4)
        );
        
        // The expected best point is x = 2.0 since the function has its minimum there.
        double expectedOptimalX = 2.0;
        Assert.assertEquals("Optimizer did not find the best point", expectedOptimalX, result.getPoint(), 1e-10);
    }
}
