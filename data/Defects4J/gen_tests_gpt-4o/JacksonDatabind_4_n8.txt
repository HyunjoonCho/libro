
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;

public class InvalidFormatExceptionTest {

    static class TestData {
        public List<Integer> values;
    }

    @Test
    public void testInvalidFormatExceptionWithIndex() {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"values\": [\"a\", 2, 3]}";

        try {
            mapper.readValue(json, TestData.class);
        } catch (JsonProcessingException e) {
            if (e instanceof InvalidFormatException) {
                InvalidFormatException ife = (InvalidFormatException) e;
                List<JsonMappingException.Reference> path = ife.getPath();

                // We are expecting the error to point to index 0 of the list
                if (!path.isEmpty()) {
                    JsonMappingException.Reference reference = path.get(path.size() - 1);
                    assertEquals("Expecting index 0", 0, reference.getIndex());
                }
            }
        }
    }
}
