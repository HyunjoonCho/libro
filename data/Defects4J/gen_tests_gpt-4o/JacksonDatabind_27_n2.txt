
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ExternalTypeIdDeserializationTest {

    // Define a base class for deserialization
    public static class BaseType {}

    // Define a subtype with the expected format
    @JsonTypeName("subType")
    @JsonDeserialize(using = SubTypeDeserializer.class)
    public static class SubType extends BaseType {
        public String name;

        public SubType() {}
        public SubType(String name) {
            this.name = name;
        }
    }

    // Custom deserializer
    public static class SubTypeDeserializer extends com.fasterxml.jackson.databind.deser.std.StdDeserializer<SubType> {
        public SubTypeDeserializer() {
            super(SubType.class);
        }

        @Override
        public SubType deserialize(com.fasterxml.jackson.core.JsonParser p, com.fasterxml.jackson.databind.DeserializationContext ctxt) throws java.io.IOException {
            com.fasterxml.jackson.databind.JsonNode node = p.getCodec().readTree(p);
            return new SubType(node.get("name").asText());
        }
    }

    // Test external type id deserialization
    @Test
    public void testExternalTypeIdDeserialization() throws Exception {
        String json = "{ \"type\": \"subType\", \"name\": \"TestName\" }";

        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(SubType.class, new SubTypeDeserializer());
        mapper.registerModule(module);

        BaseType result = mapper.readerFor(BaseType.class).withType(BaseType.class).readValue(json);
        
        // Check instance type
        assertEquals(SubType.class, result.getClass());
        // Verify the deserialized content
        assertEquals("TestName", ((SubType) result).name);
    }
}
