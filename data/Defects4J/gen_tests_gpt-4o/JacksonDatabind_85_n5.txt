
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.Assert.assertEquals;

public class DateTimeFormatTest {

    static class Event {
        public Date eventDate;

        // This annotation should not reset the format to ISO8601 when no pattern is provided
        @JsonFormat
        public Date annotatedDate;
    }

    @Test
    public void testCustomDateFormatWithJsonFormatAnnotation() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        // Configure a custom date format
        SimpleDateFormat customFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        mapper.setDateFormat(customFormat);
        
        // Serialize using custom format
        Event event = new Event();
        event.eventDate = new Date(110, 0, 4, 10, 0, 0); // Year is 2010, month is zero-based
        event.annotatedDate = event.eventDate;
        
        String jsonOutput = mapper.writeValueAsString(event);
        
        // Verify if the custom date format is used for both fields
        String expectedDate = "\"2010-01-04 10:00:00\"";
        String expectedJsonOutput = String.format("{\"eventDate\":%s,\"annotatedDate\":%s}", expectedDate, expectedDate);
        
        assertEquals(expectedJsonOutput, jsonOutput);
    }
}
