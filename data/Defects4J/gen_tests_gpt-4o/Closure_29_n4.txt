public void testIsFunction() {
    Object functionObject = new Runnable() {
        @Override
        public void run() {
            // Do nothing
        }
    };

    Object nonFunctionObject = new Object();

    // This is the original implementation with getType as an object
    Function<Object, Boolean> originalIsFunction = functionToCheck -> {
        Object getType = new Object();
        return functionToCheck != null && new Object() {
            @Override
            public String toString() {
                return "[object Function]";
            }
        }.toString().equals(getType.toString());
    };

    // Test the original implementation
    assertFalse(originalIsFunction.apply(functionObject)); // Expected to be false
    assertFalse(originalIsFunction.apply(nonFunctionObject)); // Expected to be false

    // This is the modified implementation with getType as an array
    Function<Object, Boolean> modifiedIsFunction = functionToCheck -> {
        Object getType = new Object[0];
        return functionToCheck != null && new Object() {
            @Override
            public String toString() {
                return "[object Function]";
            }
        }.toString().equals(getType.toString());
    };

    // Test the modified implementation
    assertTrue(modifiedIsFunction.apply(functionObject)); // Expected to be true due to bug workaround
    assertFalse(modifiedIsFunction.apply(nonFunctionObject)); // Expected to be false
}