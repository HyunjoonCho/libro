
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ExternalTypeIdDeserializationTest {

    static class MyTypeIdResolver extends TypeIdResolverBase {
        @Override
        public String idFromValue(Object value) {
            return ((BaseType) value).type;
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public JavaType typeFromId(DatabindContext context, String id) {
            if ("subtype".equals(id)) {
                return context.constructType(SubType.class);
            }
            return null;
        }

        @Override
        public String getDescForKnownTypeIds() {
            return null;
        }
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, include = As.EXTERNAL_PROPERTY, property = "type")
    @JsonTypeIdResolver(MyTypeIdResolver.class)
    @JsonDeserialize(as = SubType.class)
    static abstract class BaseType {
        public String type;
        public BaseType(String type) {
            this.type = type;
        }
    }

    @JsonTypeName("subtype")
    static class SubType extends BaseType {
        public String value;

        public SubType() {
            super("subtype");
        }

        public SubType(String value) {
            super("subtype");
            this.value = value;
        }
    }

    @Test
    public void testDeserializationWithTypeIdBeforePojo() throws Exception {
        String json = "{ \"type\": \"subtype\", \"value\": \"test\" }";

        ObjectMapper mapper = new ObjectMapper();
        BaseType result = mapper.readValue(json, BaseType.class);

        assertEquals("subtype", result.type);
        assertEquals("test", ((SubType) result).value);
    }
}
