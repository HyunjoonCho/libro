
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;

import static org.junit.Assert.fail;

public class SolverTest {

    @Test
    public void testBug() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new RegulaFalsiSolver();
        
        try {
            double root = solver.solve(100, f, 1, 10);
            // If solve() completes without exception, print the found root for information
            System.out.println("Root found: " + root);

        } catch (IllegalArgumentException | ArithmeticException e) {
            // Catching known exceptions that might be thrown
            fail("Exception thrown during solving: " + e.getMessage());
        } catch (Exception e) {
            // Catch the specific exception for exceeding evaluations
            fail("Unexpected exception: " + e.getClass().getName() + " - " + e.getMessage());
        }
    }
}
