
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import org.junit.Test;

import static org.junit.Assert.*;

public class AsPropertyTypeDeserializerTest {

    static class Example {
        public String value;
    }
    
    @Test
    public void testEmptyStringDeserializationWithNullObject() throws Exception {
        // Set up ObjectMapper to accept empty string as null object
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);
        
        // Input: JSON with empty string
        String json = "\"\"";

        // Attempting to deserialize should result in a null object
        Example result = mapper.readValue(json, Example.class);

        // Validate the result is null
        assertNull("Deserialization should result in null object when input is empty string", result);
    }

    @Test(expected = MismatchedInputException.class)
    public void testExceptionWithoutDeserializationFeature() throws Exception {
        // Set up ObjectMapper without the specific deserialization feature
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, false);
        
        // Input: JSON with empty string
        String json = "\"\"";

        // Attempting to deserialize without setting the feature should throw an exception
        mapper.readValue(json, Example.class);
    }
}
