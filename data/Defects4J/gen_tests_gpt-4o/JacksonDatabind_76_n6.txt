
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

public class EmployeeDeserializationTest {

    @Test
    public void testDeserializationWithOutOfOrderJsonProperties() throws Exception {
        String jsonWithIdInMiddle = 
            "{ " +
            "  \"emp_age\": 30," +
            "  \"emp_id\": 1234," +
            "  \"emp_first_name\": \"John\"," +
            "  \"emp_last_name\": \"Doe\"" +
            "}";

        ObjectMapper objectMapper = new ObjectMapper();
        Employee emp = objectMapper.readValue(jsonWithIdInMiddle, Employee.class);

        assertEquals(30, emp.getAge(), "Age is not correctly deserialized");
        assertEquals(1234L, emp.getId(), "ID is not correctly deserialized");
        assertNull(emp.getName(), "Name should be null but isn't");

        String jsonWithIdAtEnd = 
            "{ " +
            "  \"emp_age\": 30," +
            "  \"emp_first_name\": \"John\"," +
            "  \"emp_last_name\": \"Doe\"," +
            "  \"emp_id\": 1234" +
            "}";

        Employee empWithIdAtEnd = objectMapper.readValue(jsonWithIdAtEnd, Employee.class);

        assertEquals(30, empWithIdAtEnd.getAge(), "Age is not correctly deserialized");
        assertEquals(1234L, empWithIdAtEnd.getId(), "ID is not correctly deserialized");
        assertNotNull(empWithIdAtEnd.getName(), "Name should not be null");
        assertEquals("John", empWithIdAtEnd.getName().getFirst(), "First name is not correctly deserialized");
        assertEquals("Doe", empWithIdAtEnd.getName().getLast(), "Last name is not correctly deserialized");
    }

    @JsonDeserialize(builder = Employee.Builder.class)
    public static class Employee {
        private final long id;
        private final Name name;
        private final int age;

        private Employee(Builder builder) {
            this.id = builder.id;
            this.name = builder.name;
            this.age = builder.age;
        }

        public long getId() {
            return id;
        }

        public Name getName() {
            return name;
        }

        public int getAge() {
            return age;
        }

        @JsonPOJOBuilder(withPrefix = "set")
        public static class Builder {
            private final long id;
            private Name name;
            private int age;

            @JsonCreator
            public Builder(@JsonProperty("emp_id") long id) {
                this.id = id;
            }

            @JsonUnwrapped
            public void setName(Name name) {
                this.name = name;
            }

            @JsonProperty("emp_age")
            public void setAge(int age) {
                this.age = age;
            }

            public Employee build() {
                return new Employee(this);
            }
        }
    }

    public static class Name {
        private final String first;
        private final String last;

        @JsonCreator
        public Name(
            @JsonProperty("emp_first_name") String first,
            @JsonProperty("emp_last_name") String last
        ) {
            this.first = first;
            this.last = last;
        }

        public String getFirst() {
            return first;
        }

        public String getLast() {
            return last;
        }
    }
}
