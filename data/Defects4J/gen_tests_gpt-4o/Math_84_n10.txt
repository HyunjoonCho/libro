public void testMultiDirectionalCorrectStart() {
    // Assuming MultiDirectional is properly set up and imported.
    double[] correctSolution = {1.0, 1.0};
    MultiDirectional optimizer = new MultiDirectional();
    
    try {
        PointValuePair result = optimizer.optimize(
            new MaxEval(1000),
            new ObjectiveFunction(new MultivariateFunction() {
                public double value(double[] point) {
                    return Math.pow(point[0] - 1, 2) + Math.pow(point[1] - 1, 2);
                }
            }),
            GoalType.MINIMIZE,
            new InitialGuess(correctSolution)
        );
        fail("Expected optimization to loop/timeout but it completed with result: " + result);
    } catch (TooManyEvaluationsException e) {
        // Expected exception since the code should loop indefinitely.
    }
}