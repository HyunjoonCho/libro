
import org.apache.commons.math3.optim.BaseMultivariateOptimizer;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectional;

import org.junit.Test;
import static org.junit.Assert.*;

public class MultiDirectionalLoopTest {

    @Test(timeout = 5000) // ensure it doesn't loop indefinitely
    public void testMultiDirectionalCorrectStart() {
        // Define the objective function which has a minimum at (1, 1)
        MultivariateFunction objectiveFunction = new MultivariateFunction() {
            public double value(double[] point) {
                double x = point[0];
                double y = point[1];
                return (x - 1) * (x - 1) + (y - 1) * (y - 1); // Minimum value is 0 at (1, 1)
            }
        };

        // Create the optimizer
        MultiDirectional optimizer = new MultiDirectional(new SimpleValueChecker(1e-9, 1e-9));

        // Set up the initial simplex with the correct solution as a starting point
        MultiDirectionalSimplex initialSimplex = new MultiDirectionalSimplex(new double[][] {
            {1.0, 1.0},  // Correct solution
            {1.1, 1.0}, 
            {1.0, 1.1}
        });

        // Run the optimizer
        PointValuePair optimum = optimizer.optimize(
            new InitialGuess(new double[] {1.0, 1.0}),
            new org.apache.commons.math3.optim.MaxEval(1000),
            GoalType.MINIMIZE,
            initialSimplex,
            new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(objectiveFunction)
        );

        // Assert the optimizer should have found the optimal point
        double[] resultPoint = optimum.getPoint();
        assertEquals(1.0, resultPoint[0], 1e-9);
        assertEquals(1.0, resultPoint[1], 1e-9);
    }
}
