
import org.junit.Test;
import static org.mockito.Mockito.*;

public class StringTypePrintingTest {

    interface SomeInterface {
        void someMethod(Integer a, Integer b);
        void someOtherMethod(Integer a, String b);
    }

    @Test
    public void testStringTypePrinting() {
        // Mocking an instance of SomeInterface
        SomeInterface mock = mock(SomeInterface.class);

        // Stubbing someMethod and someOtherMethod with specific argument matchers
        doNothing().when(mock).someMethod(eq(1), eq((Integer) 2));
        doNothing().when(mock).someOtherMethod(eq(1), eq("2"));

        // Verify the stubbing works
        mock.someMethod(1, 2);
        mock.someOtherMethod(1, "2");

        // Verify interaction is as expected
        try {
            verify(mock).someMethod(1, (Integer) 2);
        } catch (Throwable e) {
            System.out.println("Current Output: someMethod(1, (Integer) 2)");
        }

        try {
            verify(mock).someOtherMethod(1, "2");
        } catch (Throwable e) {
            System.out.println("Current Output: someOtherMethod(1, \"(String) 2\")");
        }

        // Intentionally use incorrect values to see the type output on failure
        try {
            verify(mock).someMethod(1, 3);
        } catch (Throwable e) {
            e.printStackTrace();
        }

        try {
            verify(mock).someOtherMethod(1, "(String) 2");
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }
}
