
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import org.junit.Test;
import static org.junit.Assert.*;

public class EmployeeDeserializationTest {

    @JsonDeserialize(builder = Employee.Builder.class)
    public static class Employee {
        private final long id;
        private final Name name;
        private final int age;
    
        private Employee(Builder builder) {
            id = builder.id;
            name = builder.name;
            age = builder.age;
        }
    
        public long getId() {
            return id;
        }
    
        public Name getName() {
            return name;
        }
    
        public int getAge() {
            return age;
        }
    
        @JsonPOJOBuilder(withPrefix = "set")
        public static class Builder {
            private final long id;
            private Name name;
            private int age;
    
            @JsonCreator
            public Builder(@JsonProperty("emp_id") long id) {
                this.id = id;
            }
    
            @JsonUnwrapped
            public void setName(Name name) {
                this.name = name;
            }
    
            @JsonProperty("emp_age")
            public void setAge(int age) {
                this.age = age;
            }
    
            public Employee build() {
                return new Employee(this);
            }
        }
    }
    
    public static class Name {
        private final String first;
        private final String last;
    
        @JsonCreator
        public Name(
            @JsonProperty("emp_first_name") String first,
            @JsonProperty("emp_last_name") String last
        ) {
            this.first = first;
            this.last = last;
        }
    
        public String getFirst() {
            return first;
        }
    
        public String getLast() {
            return last;
        }
    }

    @Test
    public void testDeserializationWithIdInDifferentPositions() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // JSON with emp_id at the end
        String jsonWithIdAtEnd = "{ \"emp_age\": 30, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\", \"emp_id\": 1234 }";
        Employee empWithIdAtEnd = objectMapper.readValue(jsonWithIdAtEnd, Employee.class);
        assertEquals(30, empWithIdAtEnd.getAge());
        assertEquals(1234L, empWithIdAtEnd.getId());
        assertNotNull(empWithIdAtEnd.getName());
        assertEquals("John", empWithIdAtEnd.getName().getFirst());
        assertEquals("Doe", empWithIdAtEnd.getName().getLast());

        // JSON with emp_id before other properties
        String jsonWithIdBefore = "{\"emp_age\": 30, \"emp_id\": 1234, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\"}";
        Employee empWithIdBefore = objectMapper.readValue(jsonWithIdBefore, Employee.class);
        assertEquals(30, empWithIdBefore.getAge());
        assertEquals(1234L, empWithIdBefore.getId());
        assertNull(empWithIdBefore.getName()); // Reported issue: Name is null
        
        // JSON with all properties after emp_id
        String jsonWithIdFirst = "{\"emp_id\": 1234, \"emp_age\": 30, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\"}";
        Employee empWithIdFirst = objectMapper.readValue(jsonWithIdFirst, Employee.class);
        assertEquals(30, empWithIdFirst.getAge());
        assertEquals(1234L, empWithIdFirst.getId());
        assertNotNull(empWithIdFirst.getName());
        assertEquals("John", empWithIdFirst.getName().getFirst());
        assertEquals("Doe", empWithIdFirst.getName().getLast());
    }
}
