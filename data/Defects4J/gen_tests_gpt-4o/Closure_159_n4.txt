
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testFunctionNameTranslation() {
        // Original JavaScript source code
        String originalJs = 
                "function preload_check_all() { return true; }\n" + 
                "function testFunction() { return preload_check_all(); }\n";

        // Expected JavaScript output after compilation
        // Ideally, the function call should be renamed consistently
        String expectedJs = 
                "function a() { return !0; }\n" + 
                "function b() { return a(); }\n";

        // Set up the compiler
        Compiler compiler = new Compiler();

        // Set compiler options for SIMPLE optimization
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        compiler.compile(JSSourceFile.fromCode("externs.js", ""), 
                         JSSourceFile.fromCode("test.js", originalJs), 
                         options);

        // Get the compiled source code
        String compiledJs = compiler.toSource();

        // Check if the compiled JavaScript's function names are translated correctly
        assertEquals(expectedJs, compiledJs);
    }
}
