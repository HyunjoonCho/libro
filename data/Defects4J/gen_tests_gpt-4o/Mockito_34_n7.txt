
import org.junit.Test;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import static org.junit.Assert.assertFalse;

public class JarFileTest {

    @Test
    public void testJarDoesNotContainJavaSources() throws IOException {
        // Path to the mockito-core binary JAR file
        Path jarPath = new File("path/to/mockito-core.jar").toPath();
        
        // Ensure the JAR file exists
        assertFilesExists(jarPath);

        try (JarFile jarFile = new JarFile(jarPath.toFile())) {
            List<JarEntry> entries = jarFile.stream().toList();
            
            // Check each entry in the JAR file
            for (JarEntry entry : entries) {
                String fileName = entry.getName();
                // Assert that no entry ends with .java
                assertFalse("JAR file should not contain source files", fileName.endsWith(".java"));
            }
        }
    }

    private void assertFilesExists(Path jarPath) {
        if (!Files.exists(jarPath) || !Files.isRegularFile(jarPath))
            throw new AssertionError("JAR file does not exist at the specified path: " + jarPath);
    }
}
