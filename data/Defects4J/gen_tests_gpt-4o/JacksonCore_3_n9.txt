
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;

public class UTF8StreamJsonParserTest {

    @Test
    public void testCurrInputRowStartInitialization() {
        String json = "{\"key\": \"value\"}";
        InputStream inputStream = new ByteArrayInputStream(json.getBytes());

        IOContext ioContext = mock(IOContext.class);
        ObjectCodec codec = mock(ObjectCodec.class);
        BytesToNameCanonicalizer sym = BytesToNameCanonicalizer.createRoot();

        // Initialize parser with non-zero start position
        int start = 5;
        UTF8StreamJsonParser parser = new UTF8StreamJsonParser(ioContext, 0, inputStream, codec, sym, new byte[1024], start, json.length(), true);

        try {
            while (parser.nextToken() != JsonToken.END_OBJECT) {
                // Consume tokens
            }
        } catch (JsonParseException e) {
            // Since _currInputRowStart wasn't initialized to start value, this will produce wrong column number
            int expectedColumn = json.length() - start + 1; // We expect the calculation to take into account the start offset
            assertEquals(expectedColumn, e.getLocation().getColumnNr());
        }
    }
}
