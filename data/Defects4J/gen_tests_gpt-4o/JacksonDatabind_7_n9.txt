
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import org.junit.Test;
import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class TokenBufferDeserializationTest {

    static class Value {
        private final TokenBuffer buffer;

        @JsonCreator
        public static Value from(TokenBuffer buffer) {
            return new Value(buffer);
        }

        public Value(TokenBuffer buffer) {
            this.buffer = buffer;
        }

        public TokenBuffer getBuffer() {
            return buffer;
        }
    }

    @Test
    public void testTokenBufferDeserialization() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();

        // JSON string to test
        String jsonString = "{ \"a\": 1, \"b\": null }";

        // Deserialize JSON to Value class using TokenBuffer
        Value value = objectMapper.readValue(jsonString, Value.class);
        TokenBuffer buffer = value.getBuffer();

        // Check tokens in TokenBuffer
        buffer.asParser().nextToken(); // START_OBJECT

        // Verify structure in TokenBuffer after deserialization
        assertEquals("Unexpected token at position 1", JsonToken.START_OBJECT, buffer.asParser().getCurrentToken());
        assertEquals("Unexpected token at position 2", JsonToken.FIELD_NAME, buffer.asParser().nextToken());
        assertEquals("Unexpected token at position 3", JsonToken.VALUE_NUMBER_INT, buffer.asParser().nextToken());
        assertEquals("Unexpected token at position 4", JsonToken.FIELD_NAME, buffer.asParser().nextToken());
        assertEquals("Unexpected token at position 5", JsonToken.VALUE_NULL, buffer.asParser().nextToken());
        assertEquals("Unexpected token at position 6", JsonToken.END_OBJECT, buffer.asParser().nextToken());

        // Ensure all tokens have been consumed
        assertEquals("There should be no more tokens", null, buffer.asParser().nextToken());
    }
}
