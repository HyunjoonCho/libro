
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.linear.RealPointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIssue() {
        // Define the linear objective function: max 0.8x0 + 0.2x1 + 0.7x2 + 0.3x3 + 0.6x4 + 0.4x5
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0);

        // Create the constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0)); // x0 + x2 + x4 = 23.0
        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0)); // x1 + x3 + x5 = 23.0
        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0)); // x0 >= 10.0
        constraints.add(new LinearConstraint(new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0)); // x2 >= 8.0
        constraints.add(new LinearConstraint(new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0)); // x4 >= 5.0

        // Solve the problem using SimplexSolver
        RealPointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);

        // Validate the solution
        double expectedValue = 25.8;
        double[] expectedSolution = { 10.0, 0.0, 8.0, 0.0, 5.0, 23.0 };

        assertEquals(expectedValue, solution.getValue(), 1e-5);
        for (int i = 0; i < expectedSolution.length; i++) {
            assertEquals(expectedSolution[i], solution.getPoint()[i], 1e-5);
        }
    }
}
