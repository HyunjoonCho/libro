
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;
import static org.junit.Assert.*;

public class ClosureCompilerStringEscapingTest {

    @Test
    public void testStringEscapingIncreasesFileSize() {
        // Input JavaScript containing non-ASCII characters
        String originalJs = "var pattern = 'äöüß';";

        // Compiler setup
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Enable or disable string escaping in the options if such a feature exists
        // options.setEs5Strict(false); // There's no direct method to toggle escaping in Closure Compiler

        // Compile the code
        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");
        JSSourceFile input = JSSourceFile.fromCode("input.js", originalJs);
        Result result = compiler.compile(extern, input, options);

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Check that the compiled code is larger due to escaping
        assertTrue("String escaping should increase file size",
            compiledCode.length() > originalJs.length());

        // Optionally, print out the result for manual inspection
        System.out.println("Original: " + originalJs.length() + " bytes");
        System.out.println("Minified: " + compiledCode.length() + " bytes");
        System.out.println("Compiled code: " + compiledCode);
    }
}
