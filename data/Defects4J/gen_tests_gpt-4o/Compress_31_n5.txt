
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.zip.GZIPInputStream;

import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.junit.Test;

public class TarExtractionTest {

    @Test
    public void testMalformedTarGzFile() {
        // Creating a malformed tar header for testing purposes
        byte[] malformedData = {
            0x1f, (byte)0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
            (byte)0xed, (byte)0xc3, 0x41, 0x0d, 0x00, 0x30, 0x10, 0x03, (byte)0xb0, 0x03,
            0x20, 0x4c, 0x45, 0x4f, 0x52, 0x1e, 0x00, 0x46, 0x00, 0x2f, 
            0x00, 0x4c, 0x00, (byte)0xee, 0x00, 0x45, 0x67, 0x48, 0x19
            // ... continue with malformed data
        };

        try (InputStream byteArrayInputStream = new ByteArrayInputStream(malformedData);
             GZIPInputStream gzipInputStream = new GZIPInputStream(byteArrayInputStream);
             TarArchiveInputStream tarInputStream = new TarArchiveInputStream(gzipInputStream)) {

            while (tarInputStream.getNextTarEntry() != null) {
                // Reading through entries
            }
            fail("Expected IOException was not thrown.");
        } catch (IOException e) {
            // Check if it's the specific IOException expected
            if (!(e.getCause() instanceof IllegalArgumentException && 
                  e.getCause().getMessage().contains("Invalid byte"))) {
                fail("An unexpected IOException was thrown: " + e.getMessage());
            }
        }
    }
}
