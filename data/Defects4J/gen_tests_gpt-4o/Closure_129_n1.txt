public void testCastingFunctionWithAdvancedOptimizations() {
    String codeWithCasting = "/** @type {function(!string):!string} */ ((new window.ActiveXObject( 'ShockwaveFlash.ShockwaveFlash' ))['GetVariable'])('$version')";
    String expectedOutputWithCasting = "'use strict';console.log((0,(new window.ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")).GetVariable)(\"$version\"));";

    String codeWithoutCasting = "/** @type {!string} */ ((new window.ActiveXObject( 'ShockwaveFlash.ShockwaveFlash' ))['GetVariable']('$version'))";
    String expectedOutputWithoutCasting = "'use strict';console.log((new window.ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")).GetVariable(\"$version\"));";

    String actualOutputWithCasting = compileWithAdvancedOptimizations(codeWithCasting);
    String actualOutputWithoutCasting = compileWithAdvancedOptimizations(codeWithoutCasting);

    assertEquals(expectedOutputWithCasting, actualOutputWithCasting);
    assertEquals(expectedOutputWithoutCasting, actualOutputWithoutCasting);
}

private String compileWithAdvancedOptimizations(String code) {
    // Pseudo function to represent the compilation with advanced optimizations
    // Normally, this would involve calling the actual compilation process
    return advancedOptimizeCompile(code);
}