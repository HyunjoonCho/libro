public void testTruncatedZipArchiveInputStream() throws Exception {
    byte[] truncatedZip = { // Example of a truncated ZIP file header
        0x50, 0x4B, 0x03, 0x04, // Local file header signature
        0x14, 0x00, // Version needed to extract
        0x00, 0x00, // General purpose bit flag
        0x08, 0x00, // Compression method
        0xB7, 0x4A, 0xC3, 0x50, // File last modification time and date
        0x00, 0x00, 0x00, 0x00, // CRC-32
        0x00, 0x00, 0x00, 0x00, // Compressed size
        0x00, 0x00, 0x00, 0x00, // Uncompressed size
        0x00, 0x00, // File name length
        0x00, 0x00 // Extra field length
    };
    ByteArrayInputStream input = new ByteArrayInputStream(truncatedZip);
    ZipArchiveInputStream zipInput = new ZipArchiveInputStream(input);
    try {
        byte[] buffer = new byte[1024];
        int read = zipInput.read(buffer);
        fail("Expected IOException due to truncated ZIP file, but read returned " + read);
    } catch (IOException e) {
        assertEquals("Truncated ZIP file", e.getMessage());
    }
}