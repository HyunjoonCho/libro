kotlin
import com.fasterxml.jackson.annotation.JsonFormat
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import org.junit.jupiter.api.Test
import java.math.BigDecimal
import kotlin.test.assertEquals

data class Test(
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    val value: BigDecimal
)

class BigDecimalSerializationTest {

    @Test
    fun testBigDecimalAsPlainWithJsonFormat() {
        val mapper: ObjectMapper = jacksonObjectMapper()
            .configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true)
        
        val test = Test(BigDecimal("0.0000000005"))
        val jsonString = mapper.writeValueAsString(test)
        
        // Check if the output matches expected JSON string without scientific notation
        assertEquals("{\"value\":\"0.0000000005\"}", jsonString)
    }
}
