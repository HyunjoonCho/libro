
import java.io.FileWriter;
import java.io.IOException;
import com.google.javascript.jscomp.*;

public class ClosureCompilerTest {

    public static void main(String[] args) {
        try {
            // Create a JavaScript file with loop and label constructs that could cause renaming issues.
            String jsCode = 
                "var __label__ = 0;\n" +
                "label1: while(1) {\n" +
                "  if (__label__ == 0) {\n" +
                "    break;\n" +
                "  }\n" +
                "  __label__++;\n" +
                "}\n";

            FileWriter jsFile = new FileWriter("test.js");
            jsFile.write(jsCode);
            jsFile.close();

            // Set up the compiler and compiler options
            Compiler compiler = new Compiler();
            CompilerOptions options = new CompilerOptions();
            CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
            options.setVariableMapOutputPath("vars.map");

            // Create and add the input source file
            SourceFile input = SourceFile.fromFile("test.js");
            
            // Compile the source file
            Result result = compiler.compile(
                externs(),
                java.util.Collections.singletonList(input),
                options
            );

            if (!result.success) {
                System.err.println("Compilation failed: " + compiler.getErrors());
            } else {
                System.out.println("Compilation succeeded!");
            }

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static ImmutableList<SourceFile> externs() {
        return CommandLineRunner.getDefaultExterns();
    }
}
