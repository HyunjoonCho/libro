
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.fitting.HarmonicFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.apache.commons.math3.optimization.DifferentiableMultivariateVectorOptimizer;
import org.apache.commons.math3.optimization.general.LevenbergMarquardtOptimizer;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class HarmonicFitterTest {

    @Test
    public void testParameterGuesser() {
        // Creating a list of observed data points that cause issues with ParameterGuesser
        List<WeightedObservedPoint> observations = new ArrayList<>();
        observations.add(new WeightedObservedPoint(1.0, 0.0, 0.0));
        observations.add(new WeightedObservedPoint(1.0, 1.0, 1.0));
        observations.add(new WeightedObservedPoint(1.0, 2.0, 0.0));
        observations.add(new WeightedObservedPoint(1.0, 3.0, -1.0));

        // Create a harmonic fitter with a given optimizer
        DifferentiableMultivariateVectorOptimizer optimizer = new LevenbergMarquardtOptimizer();
        HarmonicFitter fitter = new HarmonicFitter(optimizer);

        // Add the points to the fitter
        for (WeightedObservedPoint point : observations) {
            fitter.addObservedPoint(point);
        }

        // Get initial guesses for the parameters
        HarmonicFitter.ParameterGuesser guesser = new HarmonicFitter.ParameterGuesser(observations);
        double[] guesses = guesser.guess();

        // Test if the amplitude guess is within the expected range based on simple data
        assertTrue("Amplitude guess is not sensible", guesses[0] > 0.9 && guesses[0] < 1.1);
    }
}
