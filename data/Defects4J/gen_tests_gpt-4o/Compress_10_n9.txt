
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.io.IOUtils;
import org.junit.Test;

import java.io.File;
import java.io.IOException;
import java.util.Enumeration;

import static org.junit.Assert.*;

public class ZipFileUnicodeTest {

    @Test
    public void testUnicodeExtraField() {
        // Assume you have a test zip file named "unicode_extra.zip" with an entry named "unicodetest.txt"
        // This file should be created via WinZip with Unicode name or comment fields
        File zipFile = new File("unicode_extra.zip");

        try (ZipFile zip = new ZipFile(zipFile)) {
            Enumeration<ZipArchiveEntry> entries = zip.getEntries();
            
            assertTrue("Zip should contain at least one entry", entries.hasMoreElements());
            
            while (entries.hasMoreElements()) {
                ZipArchiveEntry entry = entries.nextElement();
                
                // Remember the entry name before modification due to unicode fields
                String entryName = entry.getName();
                
                // Attempt to get InputStream for this entry
                assertNotNull("Entry InputStream should not be null before unicode adjustment", zip.getInputStream(entry));
                
                // Optional: verify some content if necessary
                // byte[] content = IOUtils.toByteArray(zip.getInputStream(entry));
                // assertNotNull("Content should have been read", content);
                // assertTrue("Content should not be empty", content.length > 0);

                // Check whether we can retrieve the entry again after possible modification due to Unicode handling
                ZipArchiveEntry reRetrievedEntry = zip.getEntry(entryName);
                assertNotNull("Should be able to retrieve entry after unicode fields are adjusted", reRetrievedEntry);
                assertNotNull("Re-retrieved entry InputStream should not be null", zip.getInputStream(reRetrievedEntry));
            }
            
        } catch (IOException e) {
            fail("IOException should not have occurred: " + e.getMessage());
        }
    }
}
