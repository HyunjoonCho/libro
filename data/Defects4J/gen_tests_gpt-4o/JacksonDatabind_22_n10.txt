
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class CustomSerializerTest {

    // POJO with @JsonValue annotation
    public static class MyPojo {
        private String value;

        public MyPojo(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }
    }

    // Custom serializer for MyPojo class
    public static class MyPojoSerializer extends StdSerializer<MyPojo> {

        public MyPojoSerializer() {
            super(MyPojo.class);
        }

        @Override
        public void serialize(MyPojo value, com.fasterxml.jackson.core.JsonGenerator gen,
                              com.fasterxml.jackson.databind.SerializerProvider provider) throws java.io.IOException {
            gen.writeString("custom:" + value.getValue());
        }
    }

    @Test
    public void testCustomSerializerWithJsonValue() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();

        // Register custom serializer
        SimpleModule module = new SimpleModule();
        module.addSerializer(MyPojo.class, new MyPojoSerializer());
        objectMapper.registerModule(module);

        MyPojo pojo = new MyPojo("test");

        // Serialize using ObjectMapper
        String json = objectMapper.writeValueAsString(pojo);

        // Assert that the custom serializer was used
        assertEquals("\"custom:test\"", json);
    }
}
