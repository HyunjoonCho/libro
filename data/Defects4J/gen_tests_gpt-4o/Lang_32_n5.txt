public void testThreadLocalMemoryLeakInToStringStyle() throws Exception {
    // Simulate usage of ToStringStyle to trigger the ThreadLocal initialization
    ToStringBuilder.toString(new Object());

    // Force garbage collection to provoke the detection of a potential memory leak
    System.gc();

    // Use reflection to access the private ThreadLocal in ToStringStyle
    Field threadLocalField = ToStringStyle.class.getDeclaredField("REGISTRY");
    threadLocalField.setAccessible(true);
    @SuppressWarnings("unchecked")
    ThreadLocal<Map<?,?>> threadLocal = (ThreadLocal<Map<?,?>>) threadLocalField.get(null);

    // Assert that the ThreadLocal has been cleared to prevent memory leaks
    assertNull(threadLocal.get());

    // Clean up: If the framework allows, remove the ThreadLocal value to avoid false positives in later tests
    threadLocal.remove();
}