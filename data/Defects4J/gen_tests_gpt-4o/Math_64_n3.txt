
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresBuilder;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.optim.PointVectorValuePair;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

public class LevenbergMarquardtBugTest {

    @Test
    public void testLevenbergMarquardtInconsistency() {
        // Assume we have a simple setup for a problem
        LeastSquaresProblem problem = new LeastSquaresBuilder()
                .start(new double[]{0, 0})
                .model((RealVector point) -> {
                    // Example model function
                    double x = point.getEntry(0);
                    double y = point.getEntry(1);
                    return new double[]{x * x + y - 11, x + y * y - 7};
                }, (RealVector point) -> {
                    // Example Jacobi matrix (derivatives)
                    RealMatrix jacobian = new org.apache.commons.math3.linear.Array2DRowRealMatrix(2, 2);
                    jacobian.setEntry(0, 0, 2 * point.getEntry(0));
                    jacobian.setEntry(0, 1, 1);
                    jacobian.setEntry(1, 0, 1);
                    jacobian.setEntry(1, 1, 2 * point.getEntry(1));
                    return jacobian;
                })
                .target(new double[]{0, 0})
                .lazyEvaluation(false)
                .maxEvaluations(1000)
                .maxIterations(1000)
                .build();

        // Use Levenberg-Marquardt optimizer
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
        LeastSquaresOptimizer.Optimum result = optimizer.optimize(problem);

        // Suppose we expect the following optimized point
        double[] expectedSolution = new double[]{3.0, 2.0};

        // Get the actual point from the optimizer
        double[] actualSolution = result.getPoint().toArray();

        // Validate if the solution from the optimizer matches the expected one
        assertArrayEquals(expectedSolution, actualSolution, 1e-3);

        // Also check if the residuals and cost match the computed solution
        RealVector residuals = result.getResiduals();
        double cost = result.getCost();
        
        // Validate consistency (residuals should be near zero at the optimal solution)
        assertEquals(0, residuals.getNorm(), 1e-3);
        assertEquals(0, cost, 1e-3);
    }
}
