
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertThrows;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;

import java.io.IOException;

// Define base class and subclasses
@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = As.EXTERNAL_PROPERTY, property = "typeId")
@JsonDeserialize(as = BaseClass.class)
class BaseClass {
    public String baseField;
}

class SubClass extends BaseClass {
    public String subField;
}

// Custom TypeIdResolver
class NullTypeIdResolver extends TypeIdResolverBase {
    @Override
    public String idFromValue(Object value) {
        if (value instanceof SubClass) {
            return SubClass.class.getName();
        }
        return null;
    }
    
    @Override
    public String idFromValueAndType(Object value, Class<?> suggestedType) {
        return idFromValue(value);
    }

    @Override
    public Class<?> typeFromId(com.fasterxml.jackson.databind.DatabindContext context, String id) throws IOException {
        if (SubClass.class.getName().equals(id)) {
            return SubClass.class;
        }
        return null;
    }

    @Override
    public String getDescForKnownTypeIds() {
        return null;
    }
}

public class PolymorphicDeserializationTest {

    @Test
    public void testNullTypeIdHandling() throws Exception {
        String json = "{\"baseField\":\"base value\",\"typeId\":null,\"subField\":\"sub value\"}";
        ObjectMapper mapper = new ObjectMapper();

        assertThrows(IOException.class, () -> {
            mapper.readValue(json, BaseClass.class);
        }, "Expected an IOException due to null type id");
    }
}
