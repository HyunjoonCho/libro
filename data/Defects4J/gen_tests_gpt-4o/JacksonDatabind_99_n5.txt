
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.ReferenceType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.apache.commons.collections4.map.LRUMap;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ReferenceTypeTest {

    @Test
    public void testCanonicalStringForReferenceType() {
        TypeFactory typeFactory = new TypeFactory(new LRUMap<Object, JavaType>(0, 10000));
        JavaType objectType = typeFactory.constructType(Object.class);
        JavaType placeholderType = new PlaceholderForType(0);

        ReferenceType referenceType = new ReferenceType(objectType, placeholderType);
        String canonicalString = referenceType.toCanonical();

        assertEquals("java.lang.Object<$1>", canonicalString);
    }

    // Mock class to simulate the expected behavior of PlaceholderForType
    private static class PlaceholderForType extends JavaType {
        public PlaceholderForType(int placeholderIndex) {
            super(Object.class, 0, null, null, null);
        }
    }
}
