
import org.apache.commons.math3.optim.SimplexOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.junit.Test;

import static org.junit.Assert.*;

public class MultiDirectionalTest {

    @Test
    public void testMultiDirectionalCorrectStart() {
        MultivariateOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);

        // Define an example objective function with a known solution.
        MultivariateFunction objectiveFunction = new MultivariateFunction() {
            public double value(double[] variables) {
                // A simple quadratic function with minimum at (0, 0)
                return Math.pow(variables[0], 2) + Math.pow(variables[1], 2);
            }
        };

        // Known optimal solution for the above function
        double[] optimalSolution = {0.0, 0.0};

        // Initialize MultiDirectionalSimplex with appropriate dimensions
        MultiDirectionalSimplex simplex = new MultiDirectionalSimplex(new double[]{1, 1});

        PointValuePair result = optimizer.optimize(
                new MaxEval(1000),
                new ObjectiveFunction(objectiveFunction),
                GoalType.MINIMIZE,
                new InitialGuess(optimalSolution),
                simplex,
                new SimpleBounds(new double[]{-1, -1}, new double[]{1, 1})
        );

        // Assert that the optimizer returns the correct solution
        assertArrayEquals(optimalSolution, result.getPoint(), 1e-5);
    }
}
