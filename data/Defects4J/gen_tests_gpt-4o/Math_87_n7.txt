
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexTableau;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertNotNull;

public class SimplexTableauTest {

    @Test
    public void testBasicVariableDetection() {
        // Objective function: Maximize 3x + 4y
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{3, 4}, 0);

        // Constraints:
        // 2x + 3y <= 8
        // x + y <= 5
        // x, y >= 0
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{2, 3}, Relationship.LEQ, 8));
        constraints.add(new LinearConstraint(new double[]{1, 1}, Relationship.LEQ, 5));

        // Create SimplexSolver instance
        SimplexSolver solver = new SimplexSolver();
        
        // Create SimplexTableau for testing internal variable detection
        SimplexTableau tableau = new SimplexTableau(objectiveFunction, constraints, Relationship.LEQ, true, 0);

        // Check if basic variable identification does not depend on it being non-zero
        // but rather being equal to 1 for detecting the basis
        boolean foundBasicVariable = false;
        for (int i = 0; i < tableau.getWidth(); i++) {
            // Checking if there is a basic variable in the tableau with a value equal to 1
            if (tableau.getEntry(0, i) == 1.0) {
                foundBasicVariable = true;
                break;
            }
        }
        
        assertNotNull("A basic variable should have been detected with value 1 in the tableau", foundBasicVariable);
    }
}
