
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DSTInconsistencyTest {

    @Test
    public void testAmbiguousDSTTime() {
        // Create the DateTime objects for the specified moments
        DateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID("Europe/London"));
        DateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID("Europe/Oslo"));
        DateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID("Europe/Helsinki"));

        // Convert to standard time to check if they represent the same moment
        DateTime britishUtc = britishDate.withZone(DateTimeZone.UTC);
        DateTime norwUtc = norwDate.withZone(DateTimeZone.UTC);
        DateTime finnishUtc = finnishDate.withZone(DateTimeZone.UTC);

        // Assert that all represent the same moment in time
        assertEquals("Europe/London date should match Europe/Oslo date in UTC", britishUtc, norwUtc.toDateTime(DateTimeZone.UTC));
        assertEquals("Europe/London date should match Europe/Helsinki date in UTC", britishUtc, finnishUtc.toDateTime(DateTimeZone.UTC));

        // Check if the British date correctly displays +01:00 during DST overlap
        assertEquals("2011-10-30T01:59:00.000+01:00", britishDate.toString());
    }
}
