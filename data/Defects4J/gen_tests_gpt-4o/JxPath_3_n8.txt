
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.apache.commons.jxpath.ri.QName;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JXPathStackOverflowTest {

    public static void main(String[] args) {
        testStackOverflowOnCreatePath();
    }

    public static void testStackOverflowOnCreatePath() {
        Map<String, Object> map = new HashMap<>();
        map.put("a", null);

        JXPathContext pathContext = JXPathContext.newContext(map);
        pathContext.setFactory(new AbstractFactory() {
            public boolean createObject(JXPathContext context, Pointer pointer, Object parent, String name, int index) {
                if (pointer instanceof NodePointer) {
                    index = ((NodePointer) pointer).getIndex();
                }

                System.out.println(parent + ":" + name + ":" + index);
                Map<String, Object> parentMap = (Map<String, Object>) parent;

                if (index > -1) {
                    List<Object> list = (List<Object>) parentMap.get(name);
                    if (list == null) {
                        list = new ArrayList<>();
                    }
                    int size = list.size();
                    for (int i = size; i <= index; i++) {
                        list.add(i, new HashMap<>()); // Ensures that we don't add null to the list
                    }
                    parentMap.put(name, list);
                } else {
                    parentMap.put(name, new HashMap<>());
                }
                return true;
            }
        });

        // Create path that previously caused StackOverflowError
        pathContext.createPath("a/b[1]/c");
        pathContext.createPath("a/b[2]/c"); // This caused a StackOverflowError before the fix
    }
}
