
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilter.Inclusion;
import org.junit.Test;
import static org.junit.Assert.*;

public class FilteringParserDelegateTest {

    @Test
    public void testMatchCountNotUpdated() throws Exception {
        String json = "{\"field1\":\"value1\",\"field2\":\"value2\",\"field3\":\"value3\"}";

        JsonFactory jsonFactory = new JsonFactory();
        JsonParser parser = jsonFactory.createParser(json);

        TokenFilter filter = new TokenFilter() {
            @Override
            public TokenFilter includeProperty(String name) {
                // Let's filter everything in this test
                return TokenFilter.INCLUDE_ALL;
            }
        };

        FilteringParserDelegate filteredParser = new FilteringParserDelegate(parser, filter, Inclusion.ONLY_INCLUDE_ALL, true);

        // Read through JSON
        while (filteredParser.nextToken() != null) {}

        // Since _matchCount is not properly utilized, we cannot have direct access in standard usage. 
        // This will be more of an illustrative test indicating that no failure occurs and doesn't assert the actual match count.
        // In a practical fix, we would expose _matchCount via a method to check the number of matched events.
        // Example:
        // assertEquals(3, filteredParser.getMatchedCount()); // Hypothetical method
    }
}
