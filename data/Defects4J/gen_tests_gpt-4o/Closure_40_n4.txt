public void testSmartNameRemovalCrash() {
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    String jsInput = ""
        + "var goog = {};\n"
        + "goog.inherits = function(x, y) {};\n"
        + "var ns = {};\n"
        + "/** @constructor */ ns.PageSelectionModel = function(){};\n"
        + "\n"
        + "/** @constructor */ \n"
        + "ns.PageSelectionModel.FooEvent = function() {};\n"
        + "/** @constructor */ \n"
        + "ns.PageSelectionModel.SelectEvent = function() {};\n"
        + "goog.inherits(ns.PageSelectionModel.ChangeEvent, ns.PageSelectionModel.FooEvent);";

    CompilationServer compileServer = new CompilationServer();
    boolean exceptionThrown = false;
    try {
        compileServer.compile(null, ImmutableList.of(SourceFile.fromCode("test.js", jsInput)), options);
    } catch (IllegalStateException e) {
        exceptionThrown = true;
    }
    assertTrue("Expected IllegalStateException not thrown", exceptionThrown);
}