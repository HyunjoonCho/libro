
import static org.junit.Assert.*;
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.junit.Test;

public class FractionTest {

    @Test
    public void testFractionWithLargeNegativeNumber() {
        // Test case for incorrect sign and approximation
        try {
            Fraction fraction = new Fraction(-33655.1677817278, 371880);
            // Check if the sign of the fraction is correct and the value is approximately what it should be
            assertTrue("Fraction sign is incorrect", fraction.getNumerator() < 0);
            double approximateValue = (double) fraction.getNumerator() / fraction.getDenominator();
            assertEquals("Approximate value is too far off", -33655.1677817278, approximateValue, 0.0001);
        } catch (FractionConversionException e) {
            fail("Fraction conversion failed unexpectedly");
        }
    }

    @Test
    public void testFractionReductionFailure() {
        // Test case for failure to reduce to lowest terms
        try {
            Fraction fraction = new Fraction(-43979.60679604749, 366081);
            // Expecting the same reduced fraction as manually calculated
            Fraction expectedReducedFraction = new Fraction(-24654898, 3831);
            assertEquals("Fraction not reduced to lowest terms", expectedReducedFraction, fraction);
        } catch (FractionConversionException e) {
            fail("Fraction conversion failed unexpectedly");
        }
    }
}
