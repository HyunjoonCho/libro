public void testFractionConstructorNegativeValue() {
    Fraction fraction1 = new Fraction(-33655.1677817278, 371880);
    assertEquals(-1, fraction1.getNumerator() * fraction1.getDenominator() 
        / Math.abs(fraction1.getNumerator() * fraction1.getDenominator())); // Check sign
    
    double actualValue1 = fraction1.doubleValue();
    double expectedValue1 = -33655.1677817278;
    double tolerance = 1e-10;
    assertEquals(expectedValue1, actualValue1, tolerance); // Check approximation
    
    Fraction fraction2 = new Fraction(-43979.60679604749, 366081);
    assertEquals(-1, fraction2.getNumerator() * fraction2.getDenominator() 
        / Math.abs(fraction2.getNumerator() * fraction2.getDenominator())); // Check sign
    
    int gcd = Math.abs(gcd(fraction2.getNumerator(), fraction2.getDenominator()));
    assertEquals(1, gcd); // Check if fully simplified
}

private int gcd(int a, int b) {
    if (b == 0) return a;
    return gcd(b, a % b);
}