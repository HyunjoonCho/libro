
import static org.junit.Assert.assertEquals;

public class ClosureCompilerBugTest {

    public static void main(String[] args) {
        testOriginalBehavior();
        testCompiledBehavior();
    }

    public static void testOriginalBehavior() {
        Boolean result = originalReduction();
        assertEquals("true", result.toString());
    }

    public static void testCompiledBehavior() {
        Boolean result = compiledReduction();
        // The bug is that this returns "undefined"
        // For test purposes, we're checking if the function behaves incorrectly.
        // In a real-world scenario, this test will identify the incorrect behavior.
        assertEquals("true", result.toString());
    }

    public static Boolean originalReduction() {
        Boolean a, b;
        if (echo(b = true) || echo(b = false))
            a = b;
        else
            a = null;
        return a;
    }

    public static Boolean compiledReduction() {
        Boolean a;
        return echo(true) || echo(a = false) ? a : null;
    }

    public static boolean echo(boolean value) {
        // This function can be used to simulate some I/O operation in the compiled version for reproduction
        return value;
    }
}
