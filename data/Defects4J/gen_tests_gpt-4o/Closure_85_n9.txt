
import com.google.javascript.jscomp.*;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.*;

public class CompilerBugTest {

    @Test
    public void testSwitchStatementCrash() {
        // JavaScript code that triggers the compiler error
        String jsCode = "function a(b) { " +
                        "   switch (b.v) { " +
                        "   case 'SWITCH': " +
                        "       if (b.i >= 0) { return b.o; } else { return undefined; } " +
                        "       break; " +
                        "   } " +
                        "}";

        // Set up the compiler options
        CompilerOptions options = new CompilerOptions();
        // Minimal options required to replicate the problem
        options.setWarningLevel(DiagnosticGroups.ALL_CHECKS, CheckLevel.WARNING);

        // Initialize compiler
        Compiler compiler = new Compiler(new ByteArrayOutputStream());

        // Provide the source input
        SourceFile source = SourceFile.fromCode("test.js", jsCode);

        // Perform the compilation
        try {
            compiler.compile(SourceFile.fromCode("externs.js", ""), source, options);
            fail("Expected RuntimeException due to the known compiler issue.");
        } catch (RuntimeException e) {
            // Check if the exception message matches the expected internal compiler error
            assertTrue(e.getMessage().contains("INTERNAL COMPILER ERROR"));
        }
    }
}
