
import org.junit.Test;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

public class ConstructorTest {

    public static class MyClass {
        private final String str;

        public MyClass(String str) {
            this.str = "String: " + str;
        }

        public MyClass(CharSequence charSequence) {
            this.str = "CharSequence: " + charSequence;
        }

        public String getValue() {
            return str;
        }
    }

    @Test
    public void testSingleArgumentStringVsCharSequenceConstructor() 
            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException {
        
        String input = "Test";

        // Attempt to get and invoke the constructor with a String
        Constructor<MyClass> constructor = MyClass.class.getConstructor(String.class);
        MyClass instance = constructor.newInstance(input);
        
        // Check if the correct constructor was used
        assertEquals("String: Test", instance.getValue());

        // Attempt to get and invoke the constructor with a CharSequence
        constructor = MyClass.class.getConstructor(CharSequence.class);
        MyClass charSequenceInstance = constructor.newInstance(new StringBuilder(input));
        
        // Check if the correct constructor was used
        assertEquals("CharSequence: Test", charSequenceInstance.getValue());
    }
}
