public void testInheritanceDetection() {
    String jsInput = "/**\n" +
            " * @constructor\n" +
            " */\n" +
            "function SuperClass() {}\n" +
            "SuperClass.prototype.CustomMethod = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @extends {SuperClass}\n" +
            " */\n" +
            "function SubClass() {}\n" +
            "SubClass.prototype = new SuperClass();\n" +
            "/**\n" +
            " * @override\n" +
            " */\n" +
            "SubClass.prototype.CustomMethod = function() {\n" +
            "  this.myProperty = 'value';\n" +
            "};\n" +
            "window['SubClassInstance'] = new SubClass();";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("input.js", jsInput), options);
    
    assertFalse("The compiler should produce warnings about unknown override.", result.warnings.isEmpty());
    assertTrue("The warning should mention 'CustomMethod not defined on any superclass of SubClass'", 
               result.warnings.stream().anyMatch(warning -> warning.getDescription().contains("property CustomMethod not defined on any superclass of SubClass")));
}