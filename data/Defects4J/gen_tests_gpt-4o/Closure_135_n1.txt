
import com.google.javascript.jscomp.*;

public class InheritanceTest {

    public static void main(String[] args) {
        testInheritanceOverrideWarning();
    }

    public static void testInheritanceOverrideWarning() {
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        String jsCode =
            "/**\n" +
            " * @constructor\n" +
            " */\n" +
            "function SuperClass() {}\n" +
            "SuperClass.prototype.CustomMethod = function() {};\n" +
            "\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @extends {SuperClass}\n" +
            " */\n" +
            "function SubClass() {}\n" +
            "SubClass.prototype = new SuperClass();\n" +
            "\n" +
            "/**\n" +
            " * @override\n" +
            " */\n" +
            "SubClass.prototype.CustomMethod = function() {\n" +
            "    this.myProperty = \"value\";\n" +
            "};\n" +
            "\n" +
            "window['SubClassInstance'] = new SubClass();";

        Compiler compiler = new Compiler();
        Result result = compiler.compile(
            CommandLineRunner.getBuiltinExterns(CompilerOptions.Environment.BROWSER),
            SourceFile.fromCode("test.js", jsCode),
            options);

        // Check for errors or warnings
        if (result.success) {
            System.out.println("No errors or warnings.");
        } else {
            for (JSError warning : result.warnings) {
                System.err.println("Warning: " + warning);
            }
            for (JSError error : result.errors) {
                System.err.println("Error: " + error);
            }
        }
    }
}
