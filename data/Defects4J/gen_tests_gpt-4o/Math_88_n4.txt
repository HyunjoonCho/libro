
import org.apache.commons.math3.optim.linear.*;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIncorrectSolution() {
        // Objective function: maximize 3x + 2y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] {3, 2}, 0);

        // Constraints:
        // x + y <= 4
        // x - y >= 2
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] {1, 1}, Relationship.LEQ, 4));
        constraints.add(new LinearConstraint(new double[] {1, -1}, Relationship.GEQ, 2));

        // Simplex solver
        SimplexSolver solver = new SimplexSolver();

        // Solve the problem
        PointValuePair solution = solver.optimize(new LinearConstraintSet(constraints), f, GoalType.MAXIMIZE, new NonNegativeConstraint(true));

        // Retrieve the optimal point
        double[] point = solution.getPoint();

        // Assert that the solution is as expected
        // Expected solution is x = 3, y = 1 (3*3 + 2*1 = 11)
        assertEquals(3.0, point[0], 1e-6);
        assertEquals(1.0, point[1], 1e-6);

        // Check the optimal value of the objective function
        double expectedValue = 3 * 3 + 2 * 1;
        assertEquals(expectedValue, solution.getValue(), 1e-6);
    }
}
