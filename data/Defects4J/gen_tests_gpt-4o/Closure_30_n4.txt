script
// Helper function to mimic sgxFloor
function sgxFloor(value) {
    return Math.floor(value);
}

// sgxColorRGBA class definition
function sgxColorRGBA(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
}

sgxColorRGBA.prototype.asHex = function() {
    var hexString = "";

    str = (sgxFloor(this.r * 255)).toString(16);
    if (str.length < 2) { str = "0"+str; }
    hexString += str;

    str = (sgxFloor(this.g * 255)).toString(16);
    if (str.length < 2) { str = "0"+str; }
    hexString += str;

    str = (sgxFloor(this.b * 255)).toString(16);
    if (str.length < 2) { str = "0"+str; }
    hexString += str;

    str = (sgxFloor(this.a * 255)).toString(16);
    if (str.length < 2) { str = "0"+str; }
    hexString += str;

    return hexString;
};

// Test function with expected output
function testAsHex() {
    const color = new sgxColorRGBA(0.1, 0.2, 0.3, 0.4);
    const expectedOutput = "19334c66"; // Expected hex string
    const output = color.asHex();

    console.assert(output === expectedOutput, `Expected: ${expectedOutput}, Got: ${output}`);
}

// Execute the test
testAsHex();
