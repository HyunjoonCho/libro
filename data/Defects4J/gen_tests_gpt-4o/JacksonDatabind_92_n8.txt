
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;

import static org.junit.Assert.fail;

public class SecurityDeserializationTest {

    public static class SimpleBean {
        public String name;
    }

    private static final String JSON_WITH_BLOCKED_TYPE = 
        "{\"@class\":\"java.util.logging.FileHandler\",\"pattern\":\"%h/java%u.log\"}";

    @Test
    public void testBlockedTypeDeserialization() {
        ObjectMapper mapper = new ObjectMapper();
        
        try {
            // Attempt to deserialize a JSON with a type that's blocked due to security issues
            SimpleBean bean = mapper.readValue(JSON_WITH_BLOCKED_TYPE, SimpleBean.class);
            fail("Deserialization should have failed due to blocked type");
        } catch (InvalidTypeIdException e) {
            System.out.println("Caught expected InvalidTypeIdException: " + e.getMessage());
            // Successful test - exception was thrown as expected
        } catch (Exception e) {
            fail("An unexpected exception occurred: " + e.getMessage());
        }
    }
}
