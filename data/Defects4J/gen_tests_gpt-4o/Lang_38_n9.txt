
import org.apache.commons.lang3.time.FastDateFormat;
import java.util.GregorianCalendar;
import java.util.TimeZone;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class CalendarTimezoneTest {

    @Test
    public void testFormat_CalendarIsoMsZulu_FailsDueToTimezoneIssue() {
        final String dateTime = "2009-10-16T16:42:16.000Z";

        // Construct calendar with GMT-8 timezone
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);

        // Get FastDateFormat instance with GMT timezone
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
        
        // This assertion fails because of the timezone issue
        assertEquals("dateTime", dateTime, format.format(cal)); // Fails
    }

    @Test
    public void testFormat_CalendarIsoMsZulu_PassesWithWorkaround() {
        final String dateTime = "2009-10-16T16:42:16.000Z";
        
        // Construct calendar with GMT-8 timezone
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);
        
        // Workaround: Trigger internal recalculation by calling getTime()
        cal.getTime();

        // Get FastDateFormat instance with GMT timezone
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
        
        // This assertion passes with the workaround
        assertEquals("dateTime", dateTime, format.format(cal)); // Passes
    }
}
