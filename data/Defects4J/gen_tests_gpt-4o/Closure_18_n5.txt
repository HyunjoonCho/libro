
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static org.junit.Assert.*;

public class DependencySortingTest {

    @Test
    public void testDependencySortingWithClosurePassFalse() {
        // Initialize the compiler.
        Compiler compiler = new Compiler();

        // Set compiler options.
        CompilerOptions options = new CompilerOptions();

        // Disable closure pass.
        options.setClosurePass(false);

        // Enable dependency sorting.
        DependencyOptions dependencyOptions = new DependencyOptions();
        dependencyOptions.setDependencySorting(true);
        options.setDependencyOptions(dependencyOptions);

        // Set up JS input files out of order.
        SourceFile input1 = SourceFile.fromCode("input1.js", "goog.provide('example');");
        SourceFile input2 = SourceFile.fromCode("input2.js", "goog.require('example');");

        // Compile the input files.
        Result result = compiler.compile(
                CommandLineRunner.getDefaultExterns(),
                ImmutableList.of(input2, input1),
                options
        );

        // Check that compilation was successful.
        assertTrue(result.success);

        // Get the compiled result.
        Node root = compiler.getRoot().getLastChild();

        // Assert the order of the source files.
        String compiledCode = new CodePrinter.Builder(root)
                .setTypeRegistry(compiler.getTypeIRegistry())
                .build();

        // Expectation: input1 (provide) should appear before input2 (require).
        assertTrue(compiledCode.indexOf("goog.provide('example');") < compiledCode.indexOf("goog.require('example');"));
    }
}
