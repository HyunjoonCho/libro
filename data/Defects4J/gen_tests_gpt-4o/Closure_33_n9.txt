public void testWeirdObjectLiteralInvalidPropertyError() {
    try {
        // Simulate the JavaScript function calls
        callCallee();
        fail("Expected a type mismatch error but none was thrown.");
    } catch (TypeCheckException e) {
        assertTrue(e.getMessage().contains("actual parameter 1 of temp3 does not match formal parameter"));
        assertTrue(e.getMessage().contains("required: {b: boolean, n: number, text: string}"));
    }
}

private void callCallee() throws TypeCheckException {
    // Define a map to simulate the JavaScript object passed to temp3
    Map<String, Object> data = new HashMap<>();
    data.put("n", 0);
    data.put("text", "a string");
    data.put("b", true);

    // Call temp3 which should throw an exception due to the issue reported
    temp3(data);
}

private String temp3(Map<String, Object> opt_data) throws TypeCheckException {
    // Check for the expected structure to simulate JavaScript type checking
    if (!(opt_data.get("text") instanceof String)) {
        throw new TypeCheckException("Parameter text is not of type string");
    }
    
    return "n: " + opt_data.get("n") + ", t: " + opt_data.get("text") + ".";
}

class TypeCheckException extends Exception {
    public TypeCheckException(String errorMessage) {
        super(errorMessage);
    }
}