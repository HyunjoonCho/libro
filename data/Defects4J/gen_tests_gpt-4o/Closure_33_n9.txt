script
/**
 * Unit test for checking weird object literal behavior.
 */

// Assuming we are simulating a test function using a basic assertion utility
function assertEquals(expected, actual) {
    if (expected !== actual) {
        throw new Error(`Assertion failed: expected ${expected} but got ${actual}`);
    }
}

// Simulated main function to run the test
function runTest() {
    // Redo the operations described in the bug report to reproduce the behavior
    try {
        // Test functions as described
        function temp1(opt_data) {
            return opt_data.text;
        }

        function temp2(opt_data) {
            /** @notypecheck */
            function __inner() {
                return temp1(opt_data.activity);
            }
            return __inner();
        }

        function temp3(opt_data) {
            return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';
        }

        function callee() {
            var output = temp3({
                n: 0,
                text: 'a string',
                b: true
            });
            return output;
        }

        // Run and check the output
        const result = callee();
        const expectedOutput = 'n: 0, t: a string.';
        assertEquals(expectedOutput, result);
        
        console.log('Test passed.');
        
    } catch (error) {
        // Catch and print errors to simulate reporting if the output does not match
        console.error('Test failed:', error.message);
    }
}

// Execute the test function 
runTest();
