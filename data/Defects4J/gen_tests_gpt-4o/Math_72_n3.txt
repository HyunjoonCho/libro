
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentSolverTest {

    @Test
    public void testBracketEndpointAsRoot() {
        BrentSolver solver = new BrentSolver();

        // Define a simple function where roots are at x = 2.0 and x = 5.0
        UnivariateFunction function = x -> (x - 2) * (x - 5);

        double min = 2.0;
        double max = 6.0;
        double initial = 3.0;

        // The correct behavior should return either 2.0 or 5.0 depending on the proximity or detection logic
        double root = solver.solve(1000, function, min, max, initial);

        // Check if the root is correctly returned as 2.0 when min is a root
        assertEquals(2.0, root, 1e-6);

        min = 4.0;
        max = 5.0;

        root = solver.solve(1000, function, min, max, initial);

        // Check if the root is correctly returned as 5.0 when max is a root
        assertEquals(5.0, root, 1e-6);
    }
}
