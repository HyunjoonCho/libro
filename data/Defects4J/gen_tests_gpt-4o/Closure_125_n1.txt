public void testIllegalStateExceptionInGetInstanceType() {
    String jsCode = 
        "var test = {};" +
        "/** @interface */" +
        "test.T = function() {};" +
        "/** @constructor @implements {test.T} */" +
        "test.A = function() {};" +
        "/** @constructor @implements {test.T} */" +
        "test.B = function() {};" +
        "/** @constructor */" +
        "test.X = function() {" +
        "  this.type = test.A;" +
        "  this.t = this.f();" +
        "};" +
        "/** @return {test.T} */" +
        "test.X.prototype.f = function() {" +
        "  if (this.type === test.A) {" +
        "    return new test.A();" +
        "  } else if (this.type === test.B) {" +
        "    return new test.B();" +
        "  }" +
        "};";
    
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.VERBOSE, CheckLevel.WARNING);
    options.setOptimizationLevel(CompilationLevel.SIMPLE_OPTIMIZATIONS, options);
    
    try {
        compiler.compile(SourceFile.fromCode("externs.js", ""), 
                         SourceFile.fromCode("crash.js", jsCode), 
                         options);
        fail("Expected IllegalStateException to be thrown");
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof IllegalStateException);
    }
}