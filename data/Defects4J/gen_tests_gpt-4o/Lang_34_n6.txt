
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.junit.Test;

public class ToStringStyleThreadLocalLeakTest {

    private static class DummyClass {
        String name = "test";
        int id = 1;
    }

    @Test
    public void testThreadLocalLeak() {
        for (int i = 0; i < 1000; i++) {
            Thread thread = new Thread(() -> {
                ToStringBuilder.reflectionToString(new DummyClass(), ToStringStyle.SHORT_PREFIX_STYLE);
                // Normally you would try to clear the thread local after usage, for this test we deliberately avoid that to see the effect
                //ToStringStyle.clear();
            });
            thread.start();
        }

        // At this point, without any cleanup, the ThreadLocal in ToStringStyle could be holding a reference
        // if it doesn't have a proper mechanism to clear itself. In a real container, this would cause memory issues.
        
        System.out.println("Test completed. Check for any unexpected memory retention or leaks in container environment.");
    }
}
