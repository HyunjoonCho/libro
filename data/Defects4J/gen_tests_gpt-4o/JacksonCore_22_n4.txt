public void testMatchCountNotUtilized() throws IOException {
    String json = "{\"field1\":\"value1\",\"field2\":\"value2\"}";
    JsonParser parser = new JsonFactory().createParser(json);
    TokenFilter filter = new TokenFilter() {
        @Override
        public TokenFilter includeProperty(String name) {
            return TokenFilter.INCLUDE_ALL;
        }
    };

    FilteringParserDelegate filteredParser = new FilteringParserDelegate(parser, filter, false, false);
    while (filteredParser.nextToken() != null) {
        // Intentionally empty
    }

    // The expected behavior would be to have matchCount reflect included tokens
    // Since this is not yet implemented, we expect it to remain 0
    try {
        Field matchCountField = FilteringParserDelegate.class.getDeclaredField("_matchCount");
        matchCountField.setAccessible(true);
        int matchCount = (int) matchCountField.get(filteredParser);
        assertEquals(0, matchCount); // test will fail if matchCount is implemented to reflect matches
    } catch (NoSuchFieldException | IllegalAccessException e) {
        fail("Reflection access failed: " + e.getMessage());
    }
}