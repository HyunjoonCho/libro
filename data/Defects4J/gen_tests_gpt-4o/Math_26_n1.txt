
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.junit.Test;
import static org.junit.Assert.*;

public class FractionConstructorTest {

    @Test
    public void testPositiveFractionBug() {
        try {
            Fraction fraction = new Fraction(-33655.1677817278, 371880);
            // Assert that the fraction should be negative
            assertTrue("Fraction should be negative", fraction.getNumerator() < 0);
            // Assert that the fraction is close to the given value
            double expectedValue = -33655.1677817278;
            assertEquals("Fraction approximation is incorrect", expectedValue, fraction.doubleValue(), 1e-5);
        } catch (FractionConversionException e) {
            fail("Unexpected FractionConversionException: " + e.getMessage());
        }
    }

    @Test
    public void testReductionBug() {
        try {
            Fraction fraction = new Fraction(-43979.60679604749, 366081);
            // Check if the fraction reduces properly
            Fraction expected = new Fraction(-24654898, 3831);
            assertEquals("Fraction should be reduced to the simplest form", expected, fraction);
        } catch (FractionConversionException e) {
            fail("Unexpected FractionConversionException: " + e.getMessage());
        }
    }
}
