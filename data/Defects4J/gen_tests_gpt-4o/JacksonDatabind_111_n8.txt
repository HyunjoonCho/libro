public void testDeserializeNullWithNestedTypeRefs() throws IOException {
    class MyBean {
        private AtomicReference<AtomicReference<Integer>> refRef;
        public AtomicReference<AtomicReference<Integer>> getRefRef() {
            return refRef;
        }
        public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {
            this.refRef = refRef;
        }
    }

    ObjectMapper objectMapper = new ObjectMapper();
    ObjectReader objectReader = objectMapper.readerFor(MyBean.class);

    MyBean intRef = objectReader.readValue(" {\"refRef\": 2 } ");
    assertNotNull(intRef.refRef); // should succeed
    assertNotNull(intRef.refRef.get()); // should succeed
    assertEquals(intRef.refRef.get().get(), new Integer(2)); // should succeed

    MyBean nullRef = objectReader.readValue(" {\"refRef\": null } ");
    assertNotNull(nullRef.refRef); // should succeed
    assertNotNull(nullRef.refRef.get()); // this is expected to fail
    assertNull(nullRef.refRef.get().get()); // this is expected to fail
}