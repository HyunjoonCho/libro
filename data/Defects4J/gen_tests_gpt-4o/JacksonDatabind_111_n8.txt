
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicReference;

class MyBean {
    private AtomicReference<AtomicReference<Integer>> refRef;

    public AtomicReference<AtomicReference<Integer>> getRefRef() {
        return refRef;
    }

    public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {
        this.refRef = refRef;
    }
}

public class DeserializeNullTest {

    @Test
    void testDeserializeNonNull() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectReader objectReader = objectMapper.readerFor(MyBean.class);

        MyBean intRef = objectReader.readValue("{\"refRef\": 2}");
        Assertions.assertNotNull(intRef.getRefRef(), "Outer AtomicReference should not be null");
        Assertions.assertNotNull(intRef.getRefRef().get(), "Inner AtomicReference should not be null");
        Assertions.assertEquals(new Integer(2), intRef.getRefRef().get().get(), "Inner value should be 2");
    }

    @Test
    void testDeserializeNull() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectReader objectReader = objectMapper.readerFor(MyBean.class);

        MyBean nullRef = objectReader.readValue("{\"refRef\": null}");
        Assertions.assertNotNull(nullRef.getRefRef(), "Outer AtomicReference should not be null");
        Assertions.assertNotNull(nullRef.getRefRef().get(), "Inner AtomicReference should not be null, but it is");
        Assertions.assertNull(nullRef.getRefRef().get().get(), "Inner value should be null");
    }
}
