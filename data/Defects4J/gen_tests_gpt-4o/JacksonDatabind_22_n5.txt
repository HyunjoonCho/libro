
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class CustomSerializerTest {

    static class CustomSerializer extends JsonSerializer<MyClass> {
        @Override
        public void serialize(MyClass value, com.fasterxml.jackson.core.JsonGenerator gen, SerializerProvider serializers) throws IOException {
            gen.writeString("custom-serialized");
        }
    }

    @JsonSerialize(using = CustomSerializer.class)
    static class MyClass {
        private final String value;

        public MyClass(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }
    }

    @Test
    public void testCustomSerializerIsUsed() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();

        MyClass myObject = new MyClass("original-value");
        String json = mapper.writeValueAsString(myObject);

        assertEquals("\"custom-serialized\"", json);
    }
}
