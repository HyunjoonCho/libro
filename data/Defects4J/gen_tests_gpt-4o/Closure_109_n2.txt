
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class TypeAnnotationTest {

    @Test
    public void testConstructorTypeUnknownParsing() {
        String jsCode = "/** @type {function(new:?)} */ var foo = function() {};";
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                         SourceFile.fromCode("foo.js", jsCode), 
                                         options);

        // Assert that there should be at least one error reported
        assertTrue("Expected type annotation parsing errors", result.errorCount > 0);

        // Optional: Check if the specific error message matches the expected issue
        assertTrue("Error should relate to type annotation parsing", 
                   result.errors[0].description.contains("type not recognized due to syntax error"));
    }

    @Test
    public void testConstructorTypeAllParsing() {
        String jsCode = "/** @type {function(new:*)} */ var bar = function() {};";
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                         SourceFile.fromCode("bar.js", jsCode), 
                                         options);

        // Assert that there should be at least one error reported
        assertTrue("Expected type annotation parsing errors", result.errorCount > 0);

        // Optional: Check if the specific error message matches the expected issue
        assertTrue("Error should relate to type annotation parsing", 
                   result.errors[0].description.contains("type not recognized due to syntax error"));
    }
}
