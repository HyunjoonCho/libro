
import org.junit.Test;
import static org.junit.Assert.*;

public class SideEffectDetectorTest {

    private static boolean sideEffectOccurred = false;

    // Mock function to test side effects
    public static void functionWithSideEffect() {
        // This function introduces a side effect by modifying a static variable
        sideEffectOccurred = true;
    }

    @Test
    public void testFunctionHasSideEffects() {
        // Reset the side effect variable before testing
        sideEffectOccurred = false;
        
        // Simulating invoking the function and checking side effects
        // Assume checkFunctionForSideEffects is the method to identify side effects
        SideEffectDetector functionTest = new SideEffectDetector();
        
        // Directly call the function to simulate the execution
        functionWithSideEffect();
        
        // Assert that the function had a side effect
        assertTrue("Function recognized as having no side effects, but it does.", sideEffectOccurred);
    }
}

// Imagine this is part of the code base being tested: check logic identifying side effects
class SideEffectDetector {
    // This would be the method to test
    public boolean hasSideEffects(Runnable function) {
        // Simplified assumption: execute function and check the condition
        function.run();
        return SideEffectDetectorTest.sideEffectOccurred;
    }
}
