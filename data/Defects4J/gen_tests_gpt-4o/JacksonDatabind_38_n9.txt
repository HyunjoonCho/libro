
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.BeanDescription;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;
import static org.junit.Assert.*;

public class SimpleTypeConstructionTest {

    static class TestPOJO {
        public String field1;
        private int field2;

        public int getField2() {
            return field2;
        }

        public void setField2(int field2) {
            this.field2 = field2;
        }
    }

    @Test
    public void testSimpleTypeConstruct() throws Exception {
        // Create an ObjectMapper instance
        ObjectMapper objectMapper = new ObjectMapper();

        // Create a SimpleType for TestPOJO using the deprecated construct() method
        JavaType javaType = SimpleType.construct(TestPOJO.class);

        // Get BeanDescription to check if fields and methods are introspected correctly
        BeanDescription beanDesc = objectMapper.getSerializationConfig().introspect(javaType);

        // Check if the public field is found
        assertNotNull(beanDesc.findProperties().stream().filter(prop -> "field1".equals(prop.getName())).findFirst().orElse(null));

        // Check if the private field with getter method is found
        assertNotNull(beanDesc.findProperties().stream().filter(prop -> "field2".equals(prop.getName())).findFirst().orElse(null));
    }
}
