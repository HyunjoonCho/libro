
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.util.function.Function;

import org.junit.Test;

public class ClosureCompilerBugTest {

    @Test
    public void testIsFunctionWithObject() {
        // Original implementation with an object
        assertTrue(isFunction((Function<String, String>) String::toUpperCase));
        assertFalse(isFunction("Not a function"));
    }

    @Test
    public void testIsFunctionWithArray() {
        // Implementation with array
        assertTrue(isFunctionAlt((Function<String, String>) String::toUpperCase));
        assertFalse(isFunctionAlt("Not a function"));
    }

    /**
     * Original isFunction implementation that gets miscompiled by Closure Compiler
     */
    private boolean isFunction(Object functionToCheck) {
        Object getType = new Object(); // This uses an object
        return functionToCheck != null && "[object Function]".equals(getType.toString().apply(functionToCheck));
    }

    /**
     * Corrected isFunction implementation using an array
     */
    private boolean isFunctionAlt(Object functionToCheck) {
        Object[] getType = new Object[] {}; // This uses an array
        return functionToCheck != null && "[object Function]".equals(getType.toString().apply(functionToCheck));
    }
}
