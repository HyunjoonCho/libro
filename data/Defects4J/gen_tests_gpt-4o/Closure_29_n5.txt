public void testIsFunctionCompilation() {
    // Define the original isFunction implementation using an object
    String originalScript = "var isFunction = function(functionToCheck) { " +
                            "var getType; " +
                            "getType = {}; " +
                            "return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]'; " +
                            "}; " +
                            "isFunction(function(){});"; // This should return true

    Context context = Context.enter();
    Scriptable scope = context.initStandardObjects();

    try {
        Object resultOriginal = context.evaluateString(scope, originalScript, "testScript", 1, null);
        assertEquals(true, Context.toBoolean(resultOriginal));

        // Define the fixed isFunction implementation using an array
        String fixedScript = "var isFunction = function(functionToCheck) { " +
                             "var getType; " +
                             "getType = []; " +
                             "return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]'; " +
                             "}; " +
                             "isFunction(function(){});"; // This should also return true

        Object resultFixed = context.evaluateString(scope, fixedScript, "testScript", 1, null);
        assertEquals(true, Context.toBoolean(resultFixed));

    } finally {
        Context.exit();
    }
}