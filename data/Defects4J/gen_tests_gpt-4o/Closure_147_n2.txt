
import com.google.javascript.jscomp.*;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertTrue;

public class CompilerWarningTest {

    @Test
    public void testGlobalThisWarning() {
        // Create a Compiler instance
        Compiler compiler = new Compiler();

        // Set the compiler options
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);

        // Test JavaScript code
        String code = "var NS = {\n" +
                      "  read: function() {\n" +
                      "    return this.foo; \n" +
                      "  },\n" +
                      "  write: function() {\n" +
                      "    this.foo = 123;\n" +
                      "  }\n" +
                      "};\n" +
                      "NS.write2 = function() {\n" +
                      "  this.foo = 123;\n" +
                      "};";

        // Compile the code
        SourceFile input = SourceFile.fromCode("test.js", code);
        compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Capture the warnings
        List<JSError> warnings = compiler.getWarnings();

        // Check for the expected warning in both cases
        boolean foundGlobalThisWarning = false;
        for (JSError warning : warnings) {
            if (warning.getType().key.equals("JSC_USED_GLOBAL_THIS")) {
                foundGlobalThisWarning = true;
                break;
            }
        }

        // Assert that the warning is found
        assertTrue("Expected a JSC_USED_GLOBAL_THIS warning", foundGlobalThisWarning);
    }
}
