
import org.apache.commons.math3.distribution.NormalDistribution;
import org.apache.commons.math3.exception.MathException;
import org.junit.Test;
import static org.junit.Assert.*;

public class NormalDistributionImplTest {

    @Test
    public void testCumulative() {
        final NormalDistribution nd = new NormalDistribution();

        for (int i = 0; i < 500; i++) {
            double exponent = i - 250; // To create a range of large/small numbers
            final double val = Math.exp(exponent); // Will generate numbers from very small to very large

            try {
                System.out.println("val = " + val + " cumulative = " + nd.cumulativeProbability(val));
            } catch (MathException e) { 
                e.printStackTrace();
                fail("ConvergenceException occurred for value: " + val);
            }
        }

        try {
            // Test with positive and negative infinity
            assertEquals(1.0, nd.cumulativeProbability(Double.POSITIVE_INFINITY), 0.0);
            assertEquals(0.0, nd.cumulativeProbability(Double.NEGATIVE_INFINITY), 0.0);
        } catch (MathException e) { 
            e.printStackTrace();
            fail("ConvergenceException occurred for infinite value.");
        }
    }
}
