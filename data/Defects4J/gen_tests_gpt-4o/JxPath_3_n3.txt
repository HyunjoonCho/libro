
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.AbstractFactory;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ArrayList;

public class JXPathTest {
    public static void main(String[] args) {
        Map<String, Object> map = new HashMap<>();
        map.put("a", null);

        JXPathContext pathContext = JXPathContext.newContext(map);
        pathContext.setFactory(new TestAbstractFactory());

        // The first call should succeed with the custom AbstractFactory configuration.
        pathContext.createPath("a/b[1]/c");

        // The second call causes a StackOverflowError as per the bug description.
        // This mirrors the problem with recursion due to insertion of null into the list.
        pathContext.createPath("a/b[2]/c");
    }
}

class TestAbstractFactory extends AbstractFactory {
    @Override
    public boolean createObject(JXPathContext context, Pointer pointer, Object parent, String name, int index) {
        Map<String, Object> parentMap = (Map<String, Object>) parent;
        System.out.println(parent + ":" + name + ":" + index);

        if (index > -1) {
            List<Object> list = (List<Object>) parentMap.get(name);
            if (list == null) {
                list = new ArrayList<>();
            }
            int size = list.size();
            for (int i = size; i <= index; i++) {
                // Originally set to 'null', which causes infinite recursion
                list.add(i, null);
            }
            parentMap.put(name, list);
        } else {
            parentMap.put(name, new HashMap<>());
        }

        return true;
    }
}
