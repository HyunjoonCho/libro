
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class MixinAnnotationTest {

    // Original interfaces and classes
    public interface Contact {
        String getCity();
    }

    public static class ContactImpl implements Contact {
        @Override
        public String getCity() {
            return "New York";
        }
    }

    public static class ContactMixin implements Contact {
        @Override
        @JsonProperty
        public String getCity() {
            return null;
        }
    }

    public interface Person extends Contact {
    }

    public static class PersonImpl extends ContactImpl implements Person {
    }

    public static class PersonMixin extends ContactMixin implements Person {
    }

    @Test
    public void testMixinAnnotationsLost() throws Exception {
        // Create an ObjectMapper and set up the module as described in the bug report
        ObjectMapper objectMapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        
        module.disable(MapperFeature.ALLOW_FINAL_FIELDS_AS_MUTATORS)
              .disable(MapperFeature.AUTO_DETECT_FIELDS)
              .disable(MapperFeature.AUTO_DETECT_GETTERS)
              .disable(MapperFeature.AUTO_DETECT_IS_GETTERS)
              .disable(MapperFeature.INFER_PROPERTY_MUTATORS);
        
        // Assign mixin for Person, without explicitly assigning for Contact like the bug
        module.setMixInAnnotation(Person.class, PersonMixin.class);
        objectMapper.registerModule(module);

        PersonImpl person = new PersonImpl();

        // Serialize PersonImpl instance
        String jsonOutput = objectMapper.writeValueAsString(person);
        
        // Verify if "city" is included in JSON string
        assertFalse(jsonOutput.contains("city"));
    }
}
