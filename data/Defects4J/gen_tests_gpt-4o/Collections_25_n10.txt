
import org.apache.commons.collections4.IteratorUtils;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class CollatedIteratorTest {

    @Test
    public void testCollatedIteratorWithNaturalOrdering() {
        List<Integer> list1 = Arrays.asList(1, 3, 5);
        List<Integer> list2 = Arrays.asList(2, 4, 6);

        Iterator<Integer> iterator1 = list1.iterator();
        Iterator<Integer> iterator2 = list2.iterator();

        // Using CollatedIterator with null comparator should fall back to natural ordering.
        Iterator<Integer> collatedIterator = IteratorUtils.collatedIterator(null, iterator1, iterator2);

        List<Integer> expectedOrder = Arrays.asList(1, 2, 3, 4, 5, 6);
        List<Integer> resultOrder = new ArrayList<>();

        while (collatedIterator.hasNext()) {
            resultOrder.add(collatedIterator.next());
        }

        assertEquals(expectedOrder, resultOrder);
    }
}
