
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class JacksonTypeIdResolverTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = "@class")
    static class Container<T> {
        public T value;

        public Container() {
        }

        public Container(T value) {
            this.value = value;
        }
    }

    static class CustomTypeIdResolver extends TypeIdResolverBase {
        @Override
        public String idFromValue(Object value) {
            // Return a type id string based on the value's class
            return value.getClass().getName();
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public JavaType typeFromId(DatabindContext context, String id) throws IOException {
            try {
                // Attempt to return a constructed JavaType for the provided id
                Class<?> clazz = Class.forName(id);
                return context.getTypeFactory().constructParametricType(Container.class, clazz);
            } catch (ClassNotFoundException e) {
                throw new IOException("Unknown class for id: " + id, e);
            }
        }

        @Override
        public String getDescForKnownTypeIds() {
            return null;
        }

        @Override
        public JsonTypeInfo.Id getMechanism() {
            return JsonTypeInfo.Id.CLASS;
        }
    }

    @Test
    public void testCustomTypeIdResolver() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        
        String jsonString = "{\"@class\":\"JacksonTypeIdResolverTest$Container\",\"value\":{\"foo\":\"bar\"}}";

        // Test deserialization
        Container<MyPojo> container = mapper.readValue(jsonString, Container.class);

        // Verify that the generic type is preserved after deserialization
        assertEquals(MyPojo.class, container.value.getClass());

        // Further assertions could be added to verify the content of 'value' if necessary
    }

    static class MyPojo {
        public String foo;

        public MyPojo() {
        }

        public MyPojo(String foo) {
            this.foo = foo;
        }
    }
}
