
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

abstract class AbstractClass {
    abstract protected Long lol();
    abstract protected String wow();
    public String give() {
        wow();
        lol();
        return "give";
    }
}

class ClassExtendsAbstractClass extends AbstractClass {
    @Override
    protected Long lol() {
        return 2L;
    }
    
    @Override
    protected String wow() {
        return "WOW";
    }
}

class A {
    private ClassExtendsAbstractClass classExtendsAbstractClass;

    public A(ClassExtendsAbstractClass classExtendsAbstractClass) {
        this.classExtendsAbstractClass = classExtendsAbstractClass;
    }

    public String doSomeThing() {
        return classExtendsAbstractClass.wow();
    }
}

public class MockitoTest {
    @Mock
    private ClassExtendsAbstractClass classExtendsAbstractClass;

    private A a;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        a = new A(classExtendsAbstractClass);
    }

    @Test
    public void test() {
        Mockito.when(classExtendsAbstractClass.give()).thenReturn("aaa");
        // Add additional assertions or actions if needed
    }

    @Test
    public void testMockingMethod() {
        Mockito.when(classExtendsAbstractClass.wow()).thenReturn("MockedWOW");
        String result = a.doSomeThing();
        assertEquals("MockedWOW", result);
        
        // Verify if the mocked method 'wow' is called, not 'lol'
        Mockito.verify(classExtendsAbstractClass).wow();
        Mockito.verify(classExtendsAbstractClass, Mockito.never()).lol();
    }
}
