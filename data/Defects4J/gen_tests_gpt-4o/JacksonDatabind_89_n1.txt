
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.*;

public class CVE_2017_15095_Test {

    public static class Exploit {
        public String foo;
    }

    @Test
    public void testPolymorphicDeserializationBlocking() {
        // Assume that the types to be blocked are listed in the CVE details,
        // This test aims to verify that deserialization of such types throws an exception.

        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(); // dangerous with polymorphic typing, included here for demonstration

        String json = "[\"java.util.logging.FileHandler\",{\"pattern\":\"/tmp/log.out\"}]";

        try {
            // Here we expect an exception since using java.util.logging.FileHandler should be blocked
            Object obj = mapper.readValue(json, Object.class);
            fail("Expected an exception due to blacklisted type, but got: " + obj.getClass().getName());
        } catch (Exception e) {
            // Due to blacklisting, we expect an exception here for security reasons.
            assertTrue(e.getMessage().contains("Illegal type"));
        }
    }
}
