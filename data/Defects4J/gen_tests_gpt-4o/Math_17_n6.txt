
import org.apache.commons.math3.dfp.Dfp;
import org.apache.commons.math3.dfp.DfpField;
import org.junit.Test;

import static org.junit.Assert.*;

public class DfpTest {

    @Test
    public void testMultiplyWithInt() {
        DfpField field = new DfpField(25);
        Dfp dfp = new Dfp(field, 1);

        // Test the boundary condition to highlight the limitation issue
        try {
            // This test should highlight the bug if the method fails
            dfp = dfp.multiply(10000);
            dfp = dfp.multiply(-1); // Also testing the negative number scenario
        } catch (Exception e) {
            fail("Dfp.multiply(int n) should not fail for n = 10000 or for negative values.");
        }

        // Ensure the multiplication is done correctly for valid inputs
        Dfp result = dfp.multiply(5);
        assertEquals(field.newDfp(50000), result);
    }
}
