
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

// Hypothetical class representing AbstractLeastSquares functionality
class MockAbstractLeastSquares {
    private double[] residuals;
    private double[] weights;

    public MockAbstractLeastSquares(double[] residuals, double[] weights) {
        this.residuals = residuals;
        this.weights = weights;
    }

    // Hypothetical implementation of getChiSquare()
    public double getChiSquare() {
        double chiSquare = 0.0;
        for (int i = 0; i < residuals.length; i++) {
            chiSquare += (residuals[i] * residuals[i]) / weights[i];
        }
        return chiSquare;
    }

    // Hypothetical implementation of getRMS()
    public double getRMS() {
        return Math.sqrt(getChiSquare() / residuals.length);
    }
}

public class AbstractLeastSquaresTest {

    private MockAbstractLeastSquares leastSquares;

    @Before
    public void setUp() {
        double[] residuals = {2.0, 3.0, 4.0};
        double[] weights = {1.0, 2.0, 1.0};
        leastSquares = new MockAbstractLeastSquares(residuals, weights);
    }

    @Test
    public void testChiSquareCalculation() {
        double expectedChiSquare = (2.0*2.0/1.0) + (3.0*3.0/2.0) + (4.0*4.0/1.0);
        assertEquals(expectedChiSquare, leastSquares.getChiSquare(), 1e-9);
    }

    @Test
    public void testRMSCalculation() {
        double expectedChiSquare = leastSquares.getChiSquare();
        double expectedRMS = Math.sqrt(expectedChiSquare / 3); // 3 residuals
        assertEquals(expectedRMS, leastSquares.getRMS(), 1e-9);
    }
}
