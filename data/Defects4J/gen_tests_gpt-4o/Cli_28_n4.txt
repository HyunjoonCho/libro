
import org.apache.commons.cli.*;
import org.junit.Test;

import java.util.Properties;

import static org.junit.Assert.*;

public class ParserTest {

    @Test
    public void testPropertiesPartiallyProcessed() throws Exception {
        Options options = new Options();
        options.addOption("a", false, "toggle -a");
        options.addOption("c", "c", false, "toggle -c");
        options.addOption(OptionBuilder.hasOptionalArg().create('e'));

        // Test case with "a" set to "false" and "c" set to "no"
        Properties properties1 = new Properties();
        properties1.setProperty("a", "false");
        properties1.setProperty("c", "no");
        properties1.setProperty("e", "0");

        CommandLineParser parser = new DefaultParser();
        CommandLine cmd1 = parser.parse(options, null, properties1);

        // Assert that "a" and "c" are not set since they are false or "no"
        assertFalse("Option 'a' should not be set", cmd1.hasOption("a"));
        assertFalse("Option 'c' should not be set", cmd1.hasOption("c"));

        // Assert that "e" is set because it expects an argument, even if it's "0"
        assertTrue("Option 'e' should be set", cmd1.hasOption("e"));
        assertEquals("0", cmd1.getOptionValue("e"));

        // Test case with "a" as "just a string" and "e" as empty
        Properties properties2 = new Properties();
        properties2.setProperty("a", "just a string");
        properties2.setProperty("e", "");

        CommandLine cmd2 = parser.parse(options, null, properties2);

        // Assert that "a" is not set since "just a string" is not a valid true value
        assertFalse("Option 'a' should not be set", cmd2.hasOption("a"));
        // Assert that "c" is not affected
        assertFalse("Option 'c' should not be set", cmd2.hasOption("c"));

        // Assert that "e" is set and has an empty string as value
        assertTrue("Option 'e' should be set", cmd2.hasOption("e"));
        assertEquals("", cmd2.getOptionValue("e"));
    }
}
