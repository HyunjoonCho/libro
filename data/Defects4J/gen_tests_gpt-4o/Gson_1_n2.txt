
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import org.junit.Before;
import org.junit.Test;

public class GsonTypeVariableTest {

    private Gson gson;

    public class Foo<T> {
        private final T someField;

        public Foo(T value) {
            this.someField = value;
        }

        @Override
        public boolean equals(Object o) {
            if (!(o instanceof Foo)) {
                return false;
            }
            Foo<?> other = (Foo<?>) o;
            return someField.equals(other.someField);
        }
    }

    public class Bar extends Foo<Integer> {
        public Bar(Integer i) {
            super(i);
        }
    }

    @Before
    public void setUp() {
        gson = new Gson();
    }

    @Test
    public void testSerializeDeserializeBar() {
        Bar bar1 = new Bar(1);

        try {
            // Serialize the Bar object to JSON
            String json = gson.toJson(bar1);

            // Deserialize the JSON back to a Bar object
            Bar bar2 = gson.fromJson("{\"someField\":1}", Bar.class);

            // Verify that the original and deserialized objects are equal
            assertEquals(bar1, bar2);
        } catch (JsonSyntaxException e) {
            fail("Serialization or deserialization failed due to: " + e.getMessage());
        }
    }
}
