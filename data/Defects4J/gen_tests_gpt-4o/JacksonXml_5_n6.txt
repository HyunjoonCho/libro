
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

@JacksonXmlRootElement(localName = "myname")
@JsonIgnoreProperties(ignoreUnknown = true)
public class XMLTest {

    @Test
    public void testJacksonXmlRootElementWithMultipleXmlMappers() throws Exception {
        final ObjectMapper xmlMapper = new XmlMapper();
        final ObjectMapper noAnnotationsXmlMapper = xmlMapper.copy()
                .configure(MapperFeature.USE_ANNOTATIONS, false)
                .configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);

        String resultNoAnnotations = noAnnotationsXmlMapper.writeValueAsString(new XMLTest());
        String resultWithAnnotations = xmlMapper.writeValueAsString(new XMLTest());

        // The mapper that has annotations disabled should not use the 'localName' provided by @JacksonXmlRootElement
        assertEquals("<XMLTest/>", resultNoAnnotations);

        // The mapper with annotations enabled should use the 'localName' provided by @JacksonXmlRootElement
        assertEquals("<myname/>", resultWithAnnotations);
    }
}
