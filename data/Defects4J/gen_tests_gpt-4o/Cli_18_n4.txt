
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;
import org.junit.Test;

import static org.junit.Assert.*;

public class PosixParserTest {

    @Test
    public void testUnrecognizedTokensWithHyphen() {
        // Setup options
        Options options = new Options();
        options.addOption("a", false, "Option a");

        // Command line with an unrecognized option '-z' and recognized option '-a'
        String[] args = {"-z", "-a", "foo"};

        // Initialize the PosixParser with stopAtNonOption enabled
        CommandLineParser parser = new PosixParser();
        try {
            CommandLine cmd = parser.parse(options, args, true);

            // Verify that the recognized '-a' is correctly handled
            assertTrue(cmd.hasOption("a"));
            assertEquals("foo", cmd.getArgs()[0]);

            // Expected behavior: '-z' should not be ignored and should cause a parsing issue
            // Asserting that '-z' should not be parsed: This part is to demonstrate the bug
            assertEquals("-z", cmd.getArgs()[0]);

        } catch (ParseException e) {
            fail("Parsing failed. Error: " + e.getMessage());
        }
    }
}
