
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizer() {
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 2) * (x - 2); // Function with minimum at x = 2
            }
        };

        // Initialize the BrentOptimizer with a reasonable tolerance
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Define the search interval for the optimizer
        SearchInterval searchInterval = new SearchInterval(0, 5);

        // Optimize to find the point where the function has its minimum
        UnivariatePointValuePair result = optimizer.optimize(
            new UnivariateObjectiveFunction(function),
            searchInterval,
            org.apache.commons.math3.optim.MaxEval.unlimited()
        );

        // Verify that the optimizer finds the correct minimum at x = 2
        // Before applying the fixes, the optimizer may not give the expected minimum (incorrect result demonstration)
        assertEquals(2.0, result.getPoint(), 1e-10);
    }
}
