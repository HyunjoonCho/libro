public void testZipFileCreationWithManyEntries() throws IOException {
    // Create a temporary file for the zip output
    File tempZipFile = File.createTempFile("testZip", ".zip");
    tempZipFile.deleteOnExit();
    
    try (ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(tempZipFile)) {
        // Create a large number of entries with similar names to force hash collisions
        for (int i = 0; i < 5000; i++) {
            ZipArchiveEntry entry = new ZipArchiveEntry("entryName" + (i % 100) + ".txt");
            zipOutputStream.putArchiveEntry(entry);
            zipOutputStream.write(("Content for entry " + i).getBytes());
            zipOutputStream.closeArchiveEntry();
        }
    }

    // Use a third-party tool or library to attempt to extract the zip and verify that it is not corrupted
    boolean isZipValid = isZipFileValid(tempZipFile);
    assertTrue("Zip file should not be corrupted", isZipValid);
}

private boolean isZipFileValid(File zipFile) {
    // Dummy validation placeholder: replace with actual validation logic using a third-party zip tool or library
    try (ZipFile zf = new ZipFile(zipFile)) {
        Enumeration<? extends ZipEntry> entries = zf.entries();
        while (entries.hasMoreElements()) {
            ZipEntry entry = entries.nextElement();
            try (InputStream is = zf.getInputStream(entry)) {
                while (is.read() != -1) {
                    // Just read to validate entry
                }
            }
        }
        return true;
    } catch (IOException e) {
        return false;
    }
}