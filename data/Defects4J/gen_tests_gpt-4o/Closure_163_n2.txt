public void testVarCheckCrashWhenUsingModules() {
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setClosurePass(true);
    
    List<SourceFile> externs = Collections.singletonList(SourceFile.fromCode("externs", ""));
    List<JSModule> modules = new ArrayList<>();
    
    JSModule jqueryModule = new JSModule("jquery");
    jqueryModule.add(JSSourceFile.fromCode("jquery", "var jQuery = function() {};"));
    modules.add(jqueryModule);
    
    JSModule coreModule = new JSModule("core");
    coreModule.add(JSSourceFile.fromCode("core", "equal( jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\" );"));
    coreModule.addDependency(jqueryModule);
    modules.add(coreModule);

    try {
        compiler.compileModules(externs, modules, options);
        fail("Expected RuntimeException due to unexpected variable renaming.");
    } catch (RuntimeException e) {
        assertTrue(e.getMessage().contains("INTERNAL COMPILER ERROR"));
    }
}