
import org.apache.commons.math3.fraction.BigFraction;
import org.junit.Test;
import java.math.BigInteger;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class BigFractionTest {

    @Test
    public void testDoubleValueWithLargeNumeratorOrDenominator() {
        // Create a large numerator and denominator
        BigInteger largeNumber = new BigInteger("1" + "0".repeat(308));
        BigFraction fractionWithLargeNumerator = new BigFraction(largeNumber, BigInteger.ONE);
        BigFraction fractionWithLargeDenominator = new BigFraction(BigInteger.ONE, largeNumber);

        // Check doubleValue() results
        double resultWithLargeNumerator = fractionWithLargeNumerator.doubleValue();
        double resultWithLargeDenominator = fractionWithLargeDenominator.doubleValue();

        // Test if it results in NaN, which should not be the case
        assertFalse(Double.isNaN(resultWithLargeNumerator));
        assertFalse(Double.isNaN(resultWithLargeDenominator));

        // Optional: ensure the results aren't infinite
        assertFalse(Double.isInfinite(resultWithLargeNumerator));
        assertFalse(Double.isInfinite(resultWithLargeDenominator));
    }
}
