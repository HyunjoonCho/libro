
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
import com.fasterxml.jackson.databind.jsontype.PolymorphicTypeValidator;
import org.junit.Test;

import static org.junit.Assert.assertThrows;

public class JacksonVulnerabilityTest {

    static class Exploit {
        public String toString() {
            // Simulated action that shouldn't be invoked
            return "Exploit executed!";
        }
    }

    @Test
    public void testJacksonDefaultTypingVulnerability() {
        // Setup object mapper with default typing
        ObjectMapper mapper = new ObjectMapper();

        // This code sets up default typing without security measures
        // To simulate the vulnerability condition
        mapper.activateDefaultTyping(
                BasicPolymorphicTypeValidator.builder()
                        .allowIfSubType(Exploit.class)
                        .build(),
                ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE
        );
        
        // Example exploit payload
        String unsafeJson = "[\"Exploit\"]";

        // Using assertThrows to check if expected error occurs
        assertThrows(
                Exception.class,
                () -> mapper.readValue(unsafeJson, Object.class)
        );
    }
}
