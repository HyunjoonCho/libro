
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class MutableDateTimeTest {

    @Test
    public void testAddDaysZeroDuringDSTTransition() {
        final MutableDateTime mdt = new MutableDateTime(2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID("Europe/Berlin"));
        System.out.println("Start date: " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        
        mdt.addHours(-1);
        System.out.println("addHours(-1): " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        
        mdt.addHours(0);
        System.out.println("addHours(0): " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        // Capture timestamp before addDays(0) to verify if it changes
        long millisBefore = mdt.toInstant().getMillis();

        mdt.addDays(0);
        System.out.println("addDays(0): " + mdt + " (" + mdt.toInstant().getMillis() + ")");

        // Assert that the millis should not change when adding zero days
        assertEquals(millisBefore, mdt.toInstant().getMillis());
    }
}
