public void testGetCovariancesWithBoundParameters() {
    // Mock the necessary objects and interactions
    EstimationProblem problem = mock(EstimationProblem.class);
    when(problem.getAllParameters()).thenReturn(new double[]{1.0, 2.0, 3.0});
    when(problem.getUnboundParametersIndices()).thenReturn(new int[]{0});
    when(problem.getResiduals()).thenReturn(new double[]{1.0, 0.5});
    
    AbstractEstimator estimator = new AbstractEstimator() {
        @Override
        public void estimate(EstimationProblem problem) throws EstimationException {
            // Mocking abstract method
        }
    };

    estimator.setEstimationProblem(problem);

    try {
        estimator.getCovariances();
        fail("Expected ArrayIndexOutOfBoundsException to be thrown");
    } catch (ArrayIndexOutOfBoundsException e) {
        // Test passes
    }
}

public void testGuessParametersErrorsWithBoundParameters() {
    // Mock the necessary objects and interactions
    EstimationProblem problem = mock(EstimationProblem.class);
    when(problem.getAllParameters()).thenReturn(new double[]{1.0, 2.0, 3.0});
    when(problem.getUnboundParametersIndices()).thenReturn(new int[]{0});
    when(problem.getResiduals()).thenReturn(new double[]{1.0, 0.5});
    
    AbstractEstimator estimator = new AbstractEstimator() {
        @Override
        public void estimate(EstimationProblem problem) throws EstimationException {
            // Mocking abstract method
        }
    };

    estimator.setEstimationProblem(problem);

    try {
        estimator.guessParametersErrors();
        fail("Expected ArrayIndexOutOfBoundsException to be thrown");
    } catch (ArrayIndexOutOfBoundsException e) {
        // Test passes
    }
}