public void testWrongArgumentCountErrorOnAliasing() {
    String jsCode1 = "var makeClass=function(protoMethods){var clazz=function(){this.initialize.apply(this,arguments);};for(var i in protoMethods){clazz.prototype[i]=protoMethods[i];}return clazz;};"
                   + "/** @constructor */var Person=function(name){};Person=makeClass(/** @lends Person.prototype */{"
                   + "/** @this {Person} */ initialize:function(name){this.name=name;},"
                   + "/** @this {Person} */ getName:function(){return this.name;},"
                   + "/** @param {string} message @this {Person} */ say:function(message){"
                   + "window.console.log(this.getName(1)+' says: '+message);}});"
                   + "var joe=new Person('joe');joe.say('hi');";
    String jsCode2 = "var makeClass=function(protoMethods){var clazz=function(){this.initialize.apply(this,arguments);};for(var i in protoMethods){clazz.prototype[i]=protoMethods[i];}return clazz;};"
                   + "/** @constructor */var Person=function(name){};Person=makeClass(/** @lends Person.prototype */{"
                   + "/** @this {Person} */ initialize:function(name){this.name=name;},"
                   + "/** @this {Person} */ getName:function(){return this.name;},"
                   + "/** @param {string} message @this {Person} */ say:function(message){"
                   + "var self=this;setTimeout(function(){window.console.log(self.getName(1)+' says: '+message);},500);}});"
                   + "var joe=new Person('joe');joe.say('hi');";
    
    // Assuming externalCompileFunction simulates the JS compiler behavior.
    CompilerResult result1 = externalCompileFunction(jsCode1, ...);
    assertTrue(result1.hasError()); // Expects the error to occur

    CompilerResult result2 = externalCompileFunction(jsCode2, ...);
    assertTrue(result2.hasError()); // Expects the error to still occur
}