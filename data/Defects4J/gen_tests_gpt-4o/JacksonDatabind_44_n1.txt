
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.NoClass;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

// Base class with basic properties
@JsonTypeInfo(use=JsonTypeInfo.Id.NAME, include=JsonTypeInfo.As.PROPERTY, property="type", defaultImpl = BaseClass.class)
// Subtype declaration
@JsonSubTypes({
    @JsonSubTypes.Type(value = SubClass.class, name = "sub")
})
static class BaseClass {
    public String baseProperty;

    public String getBaseProperty() {
        return baseProperty;
    }
    
    public void setBaseProperty(String baseProperty) {
        this.baseProperty = baseProperty;
    }
}

// Subclass with additional properties
static class SubClass extends BaseClass {
    public String subProperty;

    public String getSubProperty() {
        return subProperty;
    }
    
    public void setSubProperty(String subProperty) {
        this.subProperty = subProperty;
    }
}

public class PolymorphicTypeTest {
    @Test
    public void testPolymorphicDeserializationWithDefaultImpl() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        // JSON string to test
        String json = "{\"baseProperty\":\"baseValue\",\"subProperty\":\"subValue\",\"type\":\"sub\"}";
        
        // Deserialization with the type being sub and expecting it to handle the super class properties as well
        BaseClass result = mapper.readValue(json, BaseClass.class);

        // Assert expected behavior (failure case)
        assertEquals("baseValue", result.getBaseProperty());
        assertEquals("subValue", ((SubClass)result).getSubProperty());
    }
}
