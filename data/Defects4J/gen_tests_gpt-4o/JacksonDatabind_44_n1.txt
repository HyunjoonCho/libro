public void testPolymorphicTypeDefaultImplResolution() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);

    // Assuming a base class and a subclass
    abstract class BaseClass {
        public String baseProperty;

        public BaseClass() {
        }

        public BaseClass(String baseProperty) {
            this.baseProperty = baseProperty;
        }

        public String getBaseProperty() {
            return baseProperty;
        }
    }

    class SubClass extends BaseClass {
        public String subProperty;

        public SubClass() {
        }

        public SubClass(String baseProperty, String subProperty) {
            super(baseProperty);
            this.subProperty = subProperty;
        }

        public String getSubProperty() {
            return subProperty;
        }
    }

    mapper.setDefaultTyping(
        mapper.getPolymorphicTypeValidator(),
        ObjectMapper.DefaultTyping.NON_FINAL,
        JsonTypeInfo.As.PROPERTY
    );

    String json = mapper.writeValueAsString(new SubClass("baseValue", "subValue"));
    BaseClass result = mapper.readValue(json, BaseClass.class);

    assertEquals("baseValue", result.getBaseProperty());
    assertTrue(result instanceof SubClass);
    assertEquals("subValue", ((SubClass) result).getSubProperty());
}