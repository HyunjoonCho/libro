
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;

public class ClosureCompilerTest {

    @Test
    public void testStrictModeOutput() throws IOException, InterruptedException {
        // Create temporary JavaScript files
        File getNumJs = File.createTempFile("get_num", ".js");
        File alertJs = File.createTempFile("alert", ".js");

        try {
            // Write content to the files
            try (FileWriter writer = new FileWriter(getNumJs)) {
                writer.write("var getNum = function() { return 5; };");
            }
            try (FileWriter writer = new FileWriter(alertJs)) {
                writer.write("alert(getNum());");
            }

            // Path to the compiler jar file
            String compilerPath = "path/to/compiler.jar";

            // Compile the files using the Closure Compiler
            ProcessBuilder processBuilder = new ProcessBuilder(
                    "java", "-jar", compilerPath,
                    "--language_in=ECMASCRIPT5_STRICT",
                    "--compilation_level=ADVANCED_OPTIMIZATIONS",
                    "--warning_level=VERBOSE",
                    "--js", getNumJs.getAbsolutePath(),
                    "--js", alertJs.getAbsolutePath()
            );
            processBuilder.redirectErrorStream(true);

            Process process = processBuilder.start();
            byte[] outputBytes = process.getInputStream().readAllBytes();
            String output = new String(outputBytes);

            int exitCode = process.waitFor();
            assertEquals("The process should complete successfully", 0, exitCode);

            // Validate the output
            // The expected output is: "'use strict';alert(5);"
            // or simply: "alert(5);"
            String expectedOutput1 = "'use strict';alert(5);";
            String expectedOutput2 = "alert(5);";
            assertTrue("The output should match one of the expected outputs.",
                    output.equals(expectedOutput1) || output.equals(expectedOutput2));
            
        } finally {
            // Clean up the temporary files
            Files.delete(getNumJs.toPath());
            Files.delete(alertJs.toPath());
        }
    }
}
