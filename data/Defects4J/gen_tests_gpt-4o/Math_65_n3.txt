
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;

public class AbstractLeastSquaresTest {

    private AbstractLeastSquares leastSquares;

    @Before
    public void setUp() {
        // Initialize the least squares instance
        // Assuming an implementation exists for setting up the data
        leastSquares = new DummyLeastSquaresImplementation();
        leastSquares.addObservation(new double[] {0.5}, 1.0);
        leastSquares.addObservation(new double[] {0.3}, 2.0);
    }

    @Test
    public void testChiSquareCalculation() {
        double expectedChiSquare = calculateExpectedChiSquare();
        double computedChiSquare = leastSquares.getChiSquare();

        // Assert that the two chi-squares are equal
        assertEquals(expectedChiSquare, computedChiSquare, 1e-10);
    }

    // Manually calculate the expected Chi Square
    private double calculateExpectedChiSquare() {
        double sum = 0.0;
        double[] residuals = leastSquares.getResiduals();
        double[] weights = leastSquares.getResidualsWeights();

        for (int i = 0; i < residuals.length; i++) {
            sum += weights[i] * residuals[i] * residuals[i]; // Correct calculation
        }

        return sum;
    }

    // Dummy implementation of AbstractLeastSquares
    // Since we donâ€™t have access to the actual class, let's mock minimal functionality
    private class DummyLeastSquaresImplementation extends AbstractLeastSquares {

        // Mock implementation details...

        @Override
        protected void computeResiduals() {
            // Mock implementation
        }

        @Override
        public double[] getResiduals() {
            // Return some dummy residuals for testing
            return new double[] {0.1, 0.2};
        }

        @Override
        public double[] getResidualsWeights() {
            // Return corresponding weights
            return new double[] {2.0, 3.0};
        }

        // Other methods would go here...
    }
}
