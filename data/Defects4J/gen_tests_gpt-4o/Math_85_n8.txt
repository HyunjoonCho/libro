
import org.apache.commons.math.MathException;
import org.apache.commons.math.distribution.NormalDistribution;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class NormalDistributionTest {
    
    @Test
    public void testInverseCumulativeProbability() {
        NormalDistribution normal = new NormalDistributionImpl(0, 1);

        try {
            double result1 = normal.inverseCumulativeProbability(0.9772498680518209);
            assertEquals(2.0, result1, 0.0001);
        } catch (MathException e) {
            e.printStackTrace();
            fail("MathException thrown when computing inverseCumulativeProbability for a valid input.");
        }

        try {
            double result2 = normal.inverseCumulativeProbability(0.9986501019683698);
            assertEquals(3.0, result2, 0.0001);
        } catch (MathException e) {
            e.printStackTrace();
            fail("MathException thrown when computing inverseCumulativeProbability for a valid input.");
        }

        try {
            double result3 = normal.inverseCumulativeProbability(0.9999683287581673);
            assertEquals(4.0, result3, 0.0001);
        } catch (MathException e) {
            e.printStackTrace();
            fail("MathException thrown when computing inverseCumulativeProbability for a valid input.");
        }
    }
}
