
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.InputId;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testInvalidPropertyShouldReportError() {
        // JavaScript code as a string
        String jsCode = "var makeClass = function(protoMethods) {" +
                "    var clazz = function() {" +
                "        this.initialize.apply(this, arguments);" +
                "    };" +
                "    for (var i in protoMethods) {" +
                "        clazz.prototype[i] = protoMethods[i];" +
                "    }" +
                "    return clazz;" +
                "};" +
                "/**" +
                " * @constructor" +
                " * @param {{name: string, height: number}} options" +
                " */" +
                "var Person = function(options){};" +
                "Person = makeClass(/** @lends Person.prototype */ {" +
                "    /**" +
                "     * @this {Person}" +
                "     * @param {{name: string, height: number}} options" +
                "     */" +
                "    initialize: function(options) {" +
                "        /** @type {string} */ this.name_ = options.thisPropDoesNotExist;" +
                "    }," +
                "    /**" +
                "     * @param {string} message" +
                "     * @this {Person}" +
                "     */" +
                "    say: function(message) {" +
                "        window.console.log(this.name_ + ' says: ' + message);" +
                "    }" +
                "});" +
                "" +
                "var joe = new Person({name: 'joe', height: 300});" +
                "joe.say('hi');";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setPrettyPrint(true);
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES, com.google.javascript.jscomp.CheckLevel.ERROR);
        
        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("input.js", jsCode));
        
        List<SourceFile> externs = new ArrayList<>(CommandLineRunner.getDefaultExterns());
        
        Result result = compiler.compile(externs, inputs, options);
        
        boolean foundError = false;
        for (JSError error : result.errors) {
            if (error.getDescription().contains("Property thisPropDoesNotExist never defined on options")) {
                foundError = true;
                break;
            }
        }
        
        assertTrue("Expected an error about undefined property 'thisPropDoesNotExist', but none was reported.", foundError);
    }
}
