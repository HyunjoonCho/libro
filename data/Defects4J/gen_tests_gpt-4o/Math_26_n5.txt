
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.junit.Test;
import static org.junit.Assert.*;

public class FractionTest {

    @Test
    public void testNegativeLargeNumber() {
        try {
            Fraction fraction = new Fraction(-33655.1677817278, 371880);
            // Check if the fraction is negative
            assertTrue("Fraction should be negative", fraction.getNumerator() < 0);
            // Check that the fraction approximates the given double value
            assertEquals("Fraction should be close to the original value", 
                -33655.1677817278, fraction.doubleValue(), 0.01);
        } catch (FractionConversionException e) {
            fail("FractionConversionException should not have been thrown");
        }
    }

    @Test
    public void testReductionIssue() {
        try {
            Fraction fraction = new Fraction(-43979.60679604749, 366081);
            // Check that the fraction is reduced properly
            Fraction expectedFraction = new Fraction(-24654898, 3831);
            assertEquals("Fraction should be reduced to expected form", 
                expectedFraction, fraction.reduce());
        } catch (FractionConversionException e) {
            fail("FractionConversionException should not have been thrown");
        }
    }
}
