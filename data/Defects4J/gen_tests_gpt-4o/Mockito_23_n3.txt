
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;

@RunWith(MockitoJUnitRunner.class)
public class AbstractClassTest {

    abstract class AbstractClass {
        abstract protected Long lol();
        abstract protected String wow();
        public String give() {
            wow();
            lol();
            return "give";
        }
    }
    
    public class ClassExtendsAbstractClass extends AbstractClass {
        @Override
        protected Long lol() {
            return 2L;
        }
        
        @Override
        protected String wow() {
            return "WOW";
        }
    }
    
    public class A {
        private ClassExtendsAbstractClass classExtendsAbstractClass;
        
        public A(ClassExtendsAbstractClass classExtendsAbstractClass) {
            this.classExtendsAbstractClass = classExtendsAbstractClass;
        }
        
        public String doSomeThing() {
            return classExtendsAbstractClass.wow();
        }
    }

    @Mock
    private ClassExtendsAbstractClass classExtendsAbstractClass;
    
    private A a;

    @Before
    public void before() {
        // Mock `give()` method to return a specific string.
        Mockito.when(classExtendsAbstractClass.give()).thenReturn("aaa");
    }
    
    @Test
    public void testDoSomeThing() {
        // Instantiate class `A` with the mocked instance
        a = new A(classExtendsAbstractClass);
        
        // Call `doSomeThing` to ensure that it correctly interacts with the mock.
        a.doSomeThing();
    }
}
