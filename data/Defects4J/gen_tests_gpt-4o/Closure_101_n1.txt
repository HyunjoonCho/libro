
import org.junit.Test;
import static org.junit.Assert.*;

public class ProcessClosurePrimitivesTest {

    @Test
    public void testProcessClosurePrimitivesFlag() {
        try {
            // Simulate running the compiler with the --process_closure_primitives set to false
            Compiler compiler = new Compiler();
            CompilerOptions options = new CompilerOptions();
            CommandLineRunner.setOptionsFromFlags(new String[]{"--process_closure_primitives", "false"}, options);

            compiler.initOptions(options);

            SourceFile input = SourceFile.fromCode("test.js", "goog.provide('my.namespace');");
            SourceFile extern = SourceFile.fromCode("externs.js", "");

            Result result = compiler.compile(extern, input, options);

            // Output should still have the goog.provide tags, meaning they were not processed
            String compiledCode = compiler.toSource();
            assertTrue(compiledCode.contains("goog.provide"));

        } catch (Exception e) {
            fail("Exception during test execution: " + e.getMessage());
        }
    }

    @Test
    public void testDefaultProcessClosurePrimitives() {
        try {
            // Simulate running the compiler with the default setting (which should process)
            Compiler compiler = new Compiler();
            CompilerOptions options = new CompilerOptions();

            // by default, primitives should be processed
            compiler.initOptions(options);

            SourceFile input = SourceFile.fromCode("test.js", "goog.provide('my.namespace');");
            SourceFile extern = SourceFile.fromCode("externs.js", "");

            Result result = compiler.compile(extern, input, options);

            // Output should not have goog.provide tags, meaning they were processed
            String compiledCode = compiler.toSource();
            assertFalse(compiledCode.contains("goog.provide"));

        } catch (Exception e) {
            fail("Exception during test execution: " + e.getMessage());
        }
    }
}
