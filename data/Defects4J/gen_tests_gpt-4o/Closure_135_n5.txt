public void testInheritanceDetection() {
    // Mocked JavaScript environment setup for testing
    String jsCode = "/**\n" +
                    " * @constructor\n" +
                    " */\n" +
                    "function SuperClass() {}\n" +
                    "\n" +
                    "SuperClass.prototype.CustomMethod = function() {}\n" +
                    "\n" +
                    "/**\n" +
                    " * @constructor\n" +
                    " * @extends {SuperClass}\n" +
                    " */\n" +
                    "function SubClass() {}\n" +
                    "SubClass.prototype = new SuperClass();\n" +
                    "\n" +
                    "/**\n" +
                    " * @override\n" +
                    " */\n" +
                    "SubClass.prototype.CustomMethod = function() {\n" +
                    "  this.myProperty = 'value';\n" +
                    "};\n" +
                    "\n" +
                    "window['SubClassInstance'] = new SubClass();";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    // Execute the compilation and capture the results
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("testcode.js", jsCode), options);

    // Assert that no warnings are supposed to appear, but in the buggy version, there is a warning
    for (JSError warning : result.warnings) {
        assertFalse("Unexpected warning: " + warning.getDescription(),
                    "JSC_UNKNOWN_OVERRIDE".equals(warning.getType()));
    }
}