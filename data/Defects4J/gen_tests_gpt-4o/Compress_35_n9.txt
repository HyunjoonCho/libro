
import org.junit.Test;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import static org.junit.Assert.*;

public class TarUtilsTest {

    @Test
    public void testChecksumWithZeroPadding() throws IOException {
        // Prepare a sample tar entry header with a right-aligned checksum
        // This is a fake header for illustration purposes
        byte[] tarHeader = new byte[512];
        
        // Fill with example values (zeroes for simplicity) and a right-aligned checksum
        String checksumStr = "0001234\0 "; // Assuming the checksum is 1234 with left zero-padding
        // Place the checksum at offset 148-155 in the header
        System.arraycopy(checksumStr.getBytes(), 0, tarHeader, 148, checksumStr.length());

        // Assuming TarUtils is a utility class that has the verifyChecksum method
        boolean validChecksum = TarUtils.verifyChecksum(tarHeader);

        assertTrue("Checksum should be valid even with zero padding on the left", validChecksum);
    }

    static class TarUtils {
        public static boolean verifyChecksum(byte[] header) {
            // Simplified checksum calculation and verification logic
            int storedChecksum = 0;
            for (int i = 0; i < 8; i++) {
                storedChecksum = (storedChecksum << 3) + (header[148 + i] - '0');
            }

            // Example logic to calculate the checksum of the header
            int calculatedChecksum = 0;
            for (int i = 0; i < header.length; i++) {
                if (i >= 148 && i < 156) {
                    // Skip over the checksum field
                    calculatedChecksum += ' ';
                } else {
                    calculatedChecksum += header[i] & 0xFF;
                }
            }

            if (storedChecksum == calculatedChecksum) {
                return true;
            } else {
                return false;
            }
        }
    }
}
