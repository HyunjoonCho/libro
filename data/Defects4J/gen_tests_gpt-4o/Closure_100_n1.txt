
import static org.junit.Assert.assertTrue;
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import org.junit.Test;

public class DangerousGlobalThisWarningTest {

    @Test
    public void testDangerousGlobalThisWarning() {
        // JS code with functions that use "this" without @this annotation
        String code = 
                "function Foo() {" +
                "   this._bar = null;" +
                "};" +
                "" +
                "function writeMethodWithoutAnnotation() {" +
                "   this._bar = 123;" +
                "}" +
                "" +
                "function readMethodWithoutAnnotation() {" +
                "   return this._bar;" +
                "}";

        // Compiler initialization
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Performing the compilation
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("testcode.js", code);
        Result result = compiler.compile(extern, input, options);

        // Assert that only one warning is generated by writeMethodWithoutAnnotation
        assertTrue("Expected at least one warning", result.warnings.length >= 1);
    }
}
