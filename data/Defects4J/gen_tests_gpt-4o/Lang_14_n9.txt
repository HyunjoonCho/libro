
import org.apache.commons.lang3.StringUtils;
import org.junit.Test;
import javax.lang.model.element.Name;
import javax.lang.model.util.Elements;
import javax.lang.model.util.SimpleElementVisitor9;
import javax.lang.model.util.Types;
import javax.tools.JavaCompiler;
import javax.tools.ToolProvider;
import javax.lang.model.element.Element;

import static org.junit.Assert.assertFalse;

public class StringUtilsTest {

    @Test
    public void testEqualsWithDifferentCharSequenceImplementations() {
        // Compile a simple Java class to get a javax.lang.model.element.Element
        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();
        compiler.run(null, null, null, "Test.java");

        // Obtain Elements and Types instance from a valid processing environment
        Elements elements = null; // Obtain from a real implementation or mock in a real unit test
        Types types = null; // Obtain from a real implementation or mock in a real unit test

        Element element = elements.getTypeElement("Test");
        Name name = element.accept(new SimpleElementVisitor9<Name, Void>() {
            @Override
            public Name visitType(Element e, Void p) {
                return e.getSimpleName();
            }
        }, null);

        String str = "Test";

        // This should ideally be true if equals were properly checking character sequence equality
        assertFalse("Expected equals to return false for different CharSequence implementations",
                    StringUtils.equals(name, str));
    }
}
