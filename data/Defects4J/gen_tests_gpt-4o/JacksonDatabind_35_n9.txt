
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

// Parent class with type and identity information
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
static class Parent {
    public int id;
    public Child child;

    public Parent() {}
    public Parent(int id, Child child) {
        this.id = id;
        this.child = child;
    }
}

// Child class
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
static class Child {
    public int id;
    public String name;

    public Child() {}
    public Child(int id, String name) {
        this.id = id;
        this.name = name;
    }
}

public class ObjectIdTypeIdTest {
    @Test
    public void testObjectIdTypeIdWithWrapper() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        Parent parent = new Parent(1, new Child(2, "childName"));

        // Serialize the parent object
        String serialized = mapper.writeValueAsString(parent);

        // Deserialize back to object
        Parent deserialized = mapper.readValue(serialized, Parent.class);

        // Verify that the deserialized object is equal to the original
        assertEquals(parent.id, deserialized.id);
        assertEquals(parent.child.id, deserialized.child.id);
        assertEquals(parent.child.name, deserialized.child.name);
    }
}
