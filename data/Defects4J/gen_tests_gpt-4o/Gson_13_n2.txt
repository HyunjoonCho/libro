
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonParser;
import com.google.gson.stream.JsonReader;
import org.junit.Test;

import java.io.StringReader;

import static org.junit.Assert.assertEquals;

public class NegativeZeroTest {

    @Test
    public void testNegativeZero() {
        String json = "{\"value\": -0}";

        // Parse json using JsonReader directly to observe the behavior
        JsonReader reader = new JsonReader(new StringReader(json));
        reader.setLenient(true);

        reader.beginObject(); // Start reading object
        String name = reader.nextName(); // Read "value"

        // Check if the next value is treated as a number (long) or string
        if (reader.peek() == JsonReader.Token.NUMBER) {
            double number = reader.nextDouble(); // Parse as double to capture any signs of zero
            assertEquals(-0.0, number, 0.0); // Test that negative zero remains negative
        }

        reader.endObject(); // End object
    }
    
    @Test
    public void testNegativeZeroStringComparison() {
        String json = "{\"value\": -0}";

        // Parse JSON and verify lexical preservation
        JsonElement element = JsonParser.parseString(json);
        String value = element.getAsJsonObject().get("value").toString();

        // Check that the lexical value preserves the negative zero
        assertEquals("-0", value);
    }
}
