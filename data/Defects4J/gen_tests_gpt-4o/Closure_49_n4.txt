
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import java.util.List;

public class ClosureCompilerTest {

    @Test
    public void testFunctionAssignmentWithSameVariableName() {
        // JavaScript code with the issue
        String code = 
            "var foo = function bar(){" +
            " var bar;" +
            " alert(bar);" +
            "};";

        // Expected output after compiling with simple optimizations
        String expectedOutput = 
            "var foo=function(){alert(void 0)};";

        // Compile the JavaScript code with simple optimizations
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CommandLineRunner.setDefaultOptionsForCompilationLevel(
                com.google.javascript.jscomp.CompilerOptions.ClosureCompilationLevel.SIMPLE_OPTIMIZATIONS, options);

        List<JSSourceFile> externs = CommandLineRunner.getBuiltinExterns(CompilerOptions.Environment.BROWSER);
        JSSourceFile input = JSSourceFile.fromCode("input.js", code);

        compiler.compile(externs, List.of(input), options);
        Result result = compiler.getResult();

        // Assert that there were no compilation errors
        assertEquals(0, result.errors.length);
        // Assert that the compiled output matches the expected output
        assertEquals(expectedOutput, compiler.toSource());
    }
}
