public void testWrongArgumentCountOnAliasFunction() {
    String[] args = {
        "--compilation_level=ADVANCED_OPTIMIZATIONS",
        "--jscomp_error=accessControls",
        "--jscomp_error=checkTypes",
        "--jscomp_error=checkVars",
        "--jscomp_error=uselessCode",
        "--jscomp_off=globalThis"
    };

    String testJsContent = "var makeClass = function(protoMethods) {"
            + " var clazz = function() {"
            + "   this.initialize.apply(this, arguments);"
            + " }"
            + " for (var i in protoMethods) {"
            + "   clazz.prototype[i] = protoMethods[i];"
            + " }"
            + " return clazz;"
            + "}"
            + "/** @constructor */"
            + "var Person = function(name){};"
            + "Person = makeClass(/** @lends Person.prototype */ {"
            + " /** @this {Person} */"
            + " initialize: function(name) {"
            + "   this.name = name;"
            + " },"
            + " /** @this {Person} */"
            + " getName: function() { return this.name; },"
            + " /**"
            + "  * @param {string} message"
            + "  * @this {Person}"
            + "  */"
            + " say: function(message) {"
            + "   var self = this;"
            + "   setTimeout(function() {"
            + "     window.console.log(self.getName(1) + ' says: ' + message);"
            + "   }, 500);"
            + " }"
            + "});"
            + "var joe = new Person('joe');"
            + "joe.say('hi');"
            + "var jane = new Person('jane');"
            + "jane.say('hello');";

    try {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CommandLineRunner runner = new CommandLineRunner(args);
        runner.initConfigFromFlags(args, options);
        
        JSSourceFile input = JSSourceFile.fromCode("test.js", testJsContent);
        Result result = compiler.compile(CommandLineRunner.getDefaultExterns(), Collections.singletonList(input), options);
        
        assertTrue("Expected a compiler error due to wrong argument count!", result.errors.length > 0);
    } catch (Exception e) {
        fail("Exception during test execution: " + e.getMessage());
    }
}