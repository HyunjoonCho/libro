
import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;
import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.assertEquals;

public class CpioReadTest {

    @Test(expected = IllegalArgumentException.class)
    public void testCpioWithNonZeroFileModeTrailer() throws IOException {
        // Simulated CPIO archive data with a non-zero file mode trailer
        // Note: This data is a placeholder and may not reflect real CPIO archive structure.
        byte[] cpioData = createMockCpioDataWithNonZeroTrailer();

        try (ByteArrayInputStream bais = new ByteArrayInputStream(cpioData);
             CpioArchiveInputStream cpioInputStream = new CpioArchiveInputStream(bais)) {

            CpioArchiveEntry entry;
            while ((entry = cpioInputStream.getNextCPIOEntry()) != null) {
                // Process each entry
                // Expecting IllegalArgumentException due to non-zero file mode on trailer
            }
        }
    }

    private byte[] createMockCpioDataWithNonZeroTrailer() {
        // Dummy CPIO content with a non-zero file mode trailer
        // This mock data will trigger the IllegalArgumentException
        // In real-world usage, this should be a valid CPIO binary with proper headers and trailer
        String mockCpioContent = "07070700000000017500000000000001350000000002" +
                "0000000000010000000004000000000000000000000000000000" +
                "TRAILER!!!0000000000000000";

        return mockCpioContent.getBytes(StandardCharsets.UTF_8);
    }
}
