
import org.junit.Test;
import org.apache.commons.math3.genetics.Chromosome;
import org.apache.commons.math3.genetics.ListPopulation;
import org.apache.commons.math3.genetics.FixedGenerationCount;
import org.apache.commons.math3.genetics.GeneticAlgorithm;
import org.apache.commons.math3.genetics.StoppingCondition;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class ListPopulationTest {

    @Test
    public void testIteratorShouldNotAllowRemove() {
        // Create some dummy chromosomes for testing
        Chromosome dummyChromosome1 = new DummyChromosome();
        Chromosome dummyChromosome2 = new DummyChromosome();
        Chromosome dummyChromosome3 = new DummyChromosome();

        // Create a list population with these chromosomes
        List<Chromosome> chromosomes = new ArrayList<>();
        chromosomes.add(dummyChromosome1);
        chromosomes.add(dummyChromosome2);
        chromosomes.add(dummyChromosome3);

        ListPopulation population = new ListPopulation(chromosomes, chromosomes.size());

        // Try to remove a chromosome using the iterator
        Iterator<Chromosome> iterator = population.iterator();
        try {
            while (iterator.hasNext()) {
                iterator.next();
                // This should be disallowed after bug fix
                iterator.remove();
                fail("Iterator should not allow remove operation on ListPopulation.");
            }
        } catch (UnsupportedOperationException e) {
            // Expected behavior because the list should be unmodifiable
            // after the bug is fixed.
            assertEquals("Remove operation is not supported", e.getMessage());
        }
    }

    // Dummy chromosome class to facilitate testing
    private static class DummyChromosome extends Chromosome {
        @Override
        protected double fitness() {
            return 0;
        }
    }
}

