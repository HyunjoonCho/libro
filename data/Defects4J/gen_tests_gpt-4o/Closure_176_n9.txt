public void testVarInitializationWithTypeDeclaration() {
    com.google.javascript.jscomp.Compiler compiler = new com.google.javascript.jscomp.Compiler();

    // Construct an example JavaScript code snippet
    String jsCode = "/**\n" +
                    " * @constructor\n" +
                    " */\n" +
                    "function MyClass() {\n" +
                    "  this.value = 1;\n" +
                    "}\n" +
                    "MyClass.prototype.show = function() {\n" +
                    "  window.console.log(this.value);\n" +
                    "};\n" +
                    "/**\n" +
                    " * @type {MyClass}\n" +
                    " */\n" +
                    "var x = null;\n" +
                    "x.show();\n";

    // Create a CompilerOptions object to configure the warning levels
    com.google.javascript.jscomp.CompilerOptions options = new com.google.javascript.jscomp.CompilerOptions();
    com.google.javascript.jscomp.WarningsGuard guard = com.google.javascript.jscomp.DiagnosticGroups.NULLABLE_DEREFERENCE;
    options.addWarningsGuard(guard);

    // Compile the JavaScript code with the given options
    com.google.javascript.jscomp.Result result = compiler.compile(
            com.google.javascript.jscomp.SourceFile.fromCode("externs", ""),
            com.google.javascript.jscomp.SourceFile.fromCode("source", jsCode),
            options
    );

    // Check if the expected warning for nullable dereference is present
    boolean warningFound = result.warnings().stream()
            .anyMatch(warning -> warning.getType().equals(com.google.javascript.jscomp.DiagnosticGroups.NULLABLE_DEREFERENCE) && 
                                 warning.getSourceName().equals("source") && 
                                 warning.getLineNumber() == 11);

    assertTrue("Expected a nullable dereference warning", warningFound);
}