
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class CharSequenceKeyDeserializerTest {

    @Test
    public void testCharSequenceKeyDeserialization() {
        ObjectMapper objectMapper = new ObjectMapper();
        
        // Create a Map with CharSequence keys
        Map<CharSequence, String> originalMap = new HashMap<>();
        originalMap.put("key1", "value1");
        originalMap.put("key2", "value2");

        try {
            // Serialize the Map
            String json = objectMapper.writeValueAsString(originalMap);

            // Attempt to deserialize back to a Map with CharSequence keys
            Map<CharSequence, String> deserializedMap = objectMapper.readValue(
                    json, new TypeReference<Map<CharSequence, String>>() {});

            // Assert that deserialization works and results are correct
            assertEquals(originalMap, deserializedMap);
        } catch (IOException e) {
            fail("IOException was thrown during serialization/deserialization: " + e.getMessage());
        }
    }

    private void assertEquals(Map<CharSequence, String> originalMap, Map<CharSequence, String> deserializedMap) {
        if (!originalMap.equals(deserializedMap)) {
            throw new AssertionError("Maps are not equal. Expected: " + originalMap + ", but got: " + deserializedMap);
        }
    }

    private void fail(String message) {
        throw new AssertionError(message);
    }
}
