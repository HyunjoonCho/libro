
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

// Define your enum with JsonTypeInfo
@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXTERNAL_PROPERTY,
        property = "kind"
)
@JsonSubTypes({
        @JsonSubTypes.Type(value = Contact.class, name = "CONTACT"),
        @JsonSubTypes.Type(value = Invite.class, name = "INVITE")
})
interface MyType {
}

class Contact implements MyType {
    public String name;

    // Standard constructor
    public Contact() {}

    public Contact(String name) {
        this.name = name;
    }
}

enum Invite implements MyType {
    INSTANCE;
}

public class PolymorphicEnumTest {

    @Test
    public void testExternalPropertyPolymorphicDeserialization() {
        String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";

        ObjectMapper mapper = new ObjectMapper();
        try {
            // Attempting to deserialize the json
            MyType myType = mapper.readValue(json, MyType.class);
            assertTrue(myType instanceof Contact);
        } catch (Exception e) {
            // If exception matches argument type mismatch, test succeeds
            assertTrue(e.getCause() instanceof IllegalArgumentException);
        } catch (Throwable e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
