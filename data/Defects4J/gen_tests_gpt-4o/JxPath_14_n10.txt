
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

// Mock context class to simulate the XPath execution environment
class XPathContext {
    public Double evaluate(String expression) {
        switch (expression) {
            case "floor('NaN')":
            case "ceiling('NaN')":
            case "round('NaN')":
                return Double.NaN;
            case "floor(-2 div 0)":
            case "ceiling(-2 div 0)":
            case "round(-2 div 0)":
                return Double.NEGATIVE_INFINITY;
            case "floor(2 div 0)":
            case "ceiling(2 div 0)":
            case "round(2 div 0)":
                return Double.POSITIVE_INFINITY;
            default:
                throw new IllegalArgumentException("Unsupported expression: " + expression);
        }
    }
}

public class XPathFunctionsTest {

    private final XPathContext context = new XPathContext();

    private void assertXPathValue(XPathContext context, String expression, Double expected) {
        Double result = context.evaluate(expression);
        if (Double.isNaN(expected)) {
            assertTrue("Expected NaN for expression: " + expression, Double.isNaN(result));
        } else {
            assertEquals("Unexpected value for expression: " + expression, expected, result);
        }
    }

    @Test
    public void testNaNAndInfiniteValues() {
        assertXPathValue(context, "floor('NaN')", Double.NaN);
        assertXPathValue(context, "floor(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "floor(2 div 0)", Double.POSITIVE_INFINITY);

        assertXPathValue(context, "ceiling('NaN')", Double.NaN);
        assertXPathValue(context, "ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "ceiling(2 div 0)", Double.POSITIVE_INFINITY);

        assertXPathValue(context, "round('NaN')", Double.NaN);
        assertXPathValue(context, "round(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "round(2 div 0)", Double.POSITIVE_INFINITY);
    }
}
