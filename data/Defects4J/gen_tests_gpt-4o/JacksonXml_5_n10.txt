
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.MapperFeature;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

@JacksonXmlRootElement(localName = "myname")
class XMLTest {
    // No fields needed for this test case.
}

public class JacksonXmlRootElementTest {

    @Test
    public void testJacksonXmlRootElementAnnotation() throws Exception {
        XmlMapper xmlMapper = new XmlMapper();
        XmlMapper noAnnotationsXmlMapper = xmlMapper.copy()
                .configure(MapperFeature.USE_ANNOTATIONS, false)
                .configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);

        // Serialization using noAnnotationsXmlMapper
        String outputWithoutAnnotations = noAnnotationsXmlMapper.writeValueAsString(new XMLTest());
        // Expecting the output to use the class name as it's ignoring annotations
        assertEquals("<XMLTest/>", outputWithoutAnnotations);

        // Serialization using xmlMapper with annotations
        String outputWithAnnotations = xmlMapper.writeValueAsString(new XMLTest());
        // Expecting the output to use the localName specified in the annotation
        assertEquals("<myname/>", outputWithAnnotations);
    }
}
