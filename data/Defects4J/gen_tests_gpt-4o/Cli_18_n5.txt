
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.PosixParser;
import org.apache.commons.cli.ParseException;
import org.junit.Test;
import static org.junit.Assert.*;

public class PosixParserBugTest {

    @Test
    public void testUnrecognizedOptionWithStopAtNonOption() {
        // Define the recognized options
        Options options = new Options();
        options.addOption("a", false, "Option A");

        // Prepare the command line arguments
        String[] args = new String[]{"-z", "-a", "foo"};

        // Parse the command line with stopAtNonOption enabled
        PosixParser parser = new PosixParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, args, true);
        } catch (ParseException e) {
            fail("Parsing failed: " + e.getMessage());
        }

        // Check if the recognized option 'a' was correctly parsed
        assertTrue("Option 'a' should be present", cmd.hasOption("a"));

        // Ensure that unrecognized option '-z' stops the processing and is not ignored
        String[] remainingArgs = cmd.getArgs();
        assertArrayEquals("Remaining arguments should include unrecognized '-z'",
                new String[]{"-z", "foo"}, remainingArgs);
    }
}
