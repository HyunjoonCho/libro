
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.annotation.JsonValue;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

// POJO with @JsonValue annotation
class MyPojo {
    private String value;

    public MyPojo(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }
}

// Custom Serializer
class MyPojoSerializer extends JsonSerializer<MyPojo> {
    @Override
    public void serialize(MyPojo pojo, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeString("Custom:" + pojo.getValue());
    }
}

public class JsonValueTest {

    @Test
    public void testCustomSerializerWithJsonValue() throws IOException {
        ObjectMapper mapper = new ObjectMapper();

        // Register a custom serializer for MyPojo
        SimpleModule module = new SimpleModule();
        module.addSerializer(MyPojo.class, new MyPojoSerializer());
        mapper.registerModule(module);

        MyPojo pojo = new MyPojo("TestValue");

        // Serialize the POJO
        String jsonResult = mapper.writeValueAsString(pojo);
        
        // Validate the output
        assertEquals("\"Custom:TestValue\"", jsonResult, "The custom serializer should have been used.");
    }
}
