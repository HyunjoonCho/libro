
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverBug() {
        // Objective function: max: 7a + 3b
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{7, 3, 0, 0}, 0);

        // Constraints:
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.LEQ, 1));
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.LEQ, 1));
        constraints.add(new LinearConstraint(new double[]{3, 0, -5, 0}, Relationship.LEQ, 0));
        constraints.add(new LinearConstraint(new double[]{2, 0, 0, -5}, Relationship.LEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 2, -5, 0}, Relationship.LEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 3, 0, -5}, Relationship.LEQ, 0));
        constraints.add(new LinearConstraint(new double[]{3, 2, 0, 0}, Relationship.LEQ, 5));
        constraints.add(new LinearConstraint(new double[]{2, 3, 0, 0}, Relationship.LEQ, 5));

        // Solve the problem
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(objectiveFunction, constraints, GoalType.MAXIMIZE, true);

        // Extract and test results
        double[] point = solution.getPoint();
        double a = point[0];
        double b = point[1];
        double value = solution.getValue();

        // Expected a = 1, b = 1, value = 10
        assertEquals(1.0, a, 1e-6);
        assertEquals(1.0, b, 1e-6);
        assertEquals(10.0, value, 1e-6);
    }
}
