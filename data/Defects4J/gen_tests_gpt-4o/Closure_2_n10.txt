
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerCrashTest {

    @Test
    public void testInterfaceWithMultipleExtendsCausesCompilerCrash() {
        // JavaScript code snippet that should cause the bug
        String code = 
            "/**\n" +
            " * @interface\n" +
            " * @extends {unknown_1}\n" +
            " * @extends {unknown_2}\n" +
            " */\n" +
            "function Foo() {}\n";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ALL, com.google.javascript.jscomp.CheckLevel.WARNING);
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);

        try {
            Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", code), options);
            // If we reach here, the test fails because no exception was thrown
            assertFalse("Expected a compile error due to multiple @extends in interface, but compilation succeeded", result.success);
        } catch (NullPointerException e) {
            // We expect a NullPointerException, so the test passes if we catch one
            assertNotNull(e);
        } catch (Exception e) {
            // If we catch any other exception, the test fails
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
