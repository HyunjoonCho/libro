
import org.apache.commons.lang3.StringUtils;
import org.junit.Test;

import javax.lang.model.element.Name;
import java.util.Objects;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

public class StringUtilsEqualsTest {

    @Test
    public void testCharSequenceEquality() {
        // A mock implementation of javax.lang.model.element.Name
        CharSequence name = new MockName("test");
        CharSequence str = "test";

        // Testing the CharSequence equals() behavior
        assertFalse("CharSequence equals() should return false for different implementations.",
                name.equals(str));
        assertFalse("CharSequence equals() should return false for different implementations.",
                str.equals(name));

        // Demonstrating the issue with StringUtils.equals()
        assertFalse("StringUtils.equals should return false as it relies on undefined equals behavior.",
                StringUtils.equals(name, str));
    }

    private class MockName implements Name {
        private final String name;

        public MockName(String name) {
            this.name = name;
        }

        @Override
        public boolean contentEquals(CharSequence cs) {
            return name.contentEquals(cs);
        }

        @Override
        public int length() {
            return name.length();
        }

        @Override
        public char charAt(int index) {
            return name.charAt(index);
        }

        @Override
        public CharSequence subSequence(int start, int end) {
            return name.subSequence(start, end);
        }

        @Override
        public String toString() {
            return name;
        }

        @Override
        public boolean equals(Object obj) {
            // Using contentEquals to demonstrate true equality for debugging
            if (obj instanceof CharSequence) {
                return contentEquals((CharSequence) obj);
            }
            return super.equals(obj);
        }

        @Override
        public int hashCode() {
            return Objects.hashCode(name);
        }
    }
}
