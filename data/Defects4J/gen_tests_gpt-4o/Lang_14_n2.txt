@Test
public void testStringUtilsEqualsWithDifferentCharSequenceImplementations() {
    CharSequence string = "test";
    CharSequence name = new javax.lang.model.element.Name() {
        @Override
        public int length() {
            return string.length();
        }

        @Override
        public char charAt(int index) {
            return string.charAt(index);
        }

        @Override
        public CharSequence subSequence(int start, int end) {
            return string.subSequence(start, end);
        }

        @Override
        public boolean equals(Object obj) {
            // Simulate a CharSequence implementation that does not refine equals
            return obj instanceof CharSequence
                   && StringUtils.equals(this.toString(), obj.toString());
        }

        @Override
        public int hashCode() {
            return string.hashCode();
        }

        @Override
        public String toString() {
            return string.toString();
        }
    };

    // Demonstrates the issue: even though they represent the same characters, the equals might return false
    assertTrue(StringUtils.equals(string, name));
    assertTrue(StringUtils.equals(name, string));
}