
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class JsonValuePolymorphicTypeTest {

    private final ObjectMapper mapper;

    public JsonValuePolymorphicTypeTest() {
        this.mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();
    }

    @Test
    public void testPolymorphicTypeWithJsonValue() throws Exception {
        CommandAPDU original = new CommandAPDU(new byte[]{1, 2, 3, 4});

        // Serialize
        String json = mapper.writeValueAsString(original);

        // Deserialize
        CommandAPDU deserialized = mapper.readValue(json, CommandAPDU.class);

        assertNotNull(deserialized);
        // Ensure the deserialized object is correctly reconstructed
        assertNotNull(deserialized.getBytes());
    }

    static class CommandAPDU {

        @JsonIgnore
        private byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty("bytes") byte[] apdu) {
            this.apdu = apdu.clone();
            // Parse method or any initialization code can be placed here
        }

        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }
    }
}
