@Test
public void testCreateNumberWithLargeFloatingPoint() {
    // Test with a number that requires more precision than a Float can provide
    String largeFloatingPointNumber = "3.4028236E38";
    Number result = NumberUtils.createNumber(largeFloatingPointNumber);

    // Make sure the result is a Double, not a Float
    assertTrue(result instanceof Double);

    // Check that the value is correctly parsed without truncation
    assertEquals(Double.valueOf(largeFloatingPointNumber), result);
}

@Test
public void testCreateNumberWithBigDecimalPrecision() {
    // Test with a number that requires BigDecimal precision
    String bigDecimalNumber = "1.0000000000000000000001";
    Number result = NumberUtils.createNumber(bigDecimalNumber);

    // Make sure the result is a BigDecimal
    assertTrue(result instanceof BigDecimal);

    // Check that the value is correctly parsed
    assertEquals(new BigDecimal(bigDecimalNumber), result);
}