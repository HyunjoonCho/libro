
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.fail;

public class ClosureCompilerBugTest {

    @Test
    public void testCollapsePropertiesException() {
        String jsCode = "var x = {};\n" +
                        "x.a = function() {};\n" +
                        "goog.exportSymbol('x.a', x.a);";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Perform the compilation
        try {
            Result result = compiler.compile(
                CommandLineRunner.getDefaultExterns(),
                SourceFile.fromCode("test.js", jsCode),
                options);

            // Check for compilation success, if an exception is thrown, it will not be successful
            if (!result.success) {
                fail("Compilation failed with errors: " + compiler.getErrors());
            }

        } catch (RuntimeException e) {
            // Verifying the specific exception related to CollapseProperties
            if (e.getCause() instanceof IllegalArgumentException) {
                // This is the expected outcome based on the bug report
                System.out.println("Caught expected IllegalArgumentException: " + e.getMessage());
            } else {
                fail("Unexpected exception caught: " + e.toString());
            }
        }
    }
}
