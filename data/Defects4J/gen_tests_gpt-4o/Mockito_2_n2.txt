
import org.junit.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.*;

public class MockitoAfterNegativeTest {

    @Test
    public void testAfterWithNegativeTime() {
        // Mocking a Runnable
        Runnable runnable = Mockito.mock(Runnable.class);

        // Verifying that run() was never called initially
        Mockito.verify(runnable, Mockito.never()).run(); // Expected to pass

        // Introducing a delay and then verifying never called again
        Mockito.verify(runnable, Mockito.after(1000).never()).run(); // Expected to pass

        // Verify run() was called at least once after a negative delay (which doesn't make sense)
        // This should not pass as it defies the logic of after() indicating wrong behavior in Mockito
        try {
            Mockito.verify(runnable, Mockito.after(-1000).atLeastOnce()).run(); 
            fail("Verification passed incorrectly with negative after delay.");
        } catch (Exception e) {
            // Exception is expected due to misuse - highlighting the bug
        }
    }
}
