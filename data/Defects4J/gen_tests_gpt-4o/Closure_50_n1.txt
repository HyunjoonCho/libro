
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class ClosureCompilerTest {

    @Test
    public void testArrayJoinOptimization() {
        // Original JavaScript code
        String originalJS = "var variable = confirm(\"value from user\");"
                + "var array = [ \"constant\", variable ];"
                + "alert(array.join(\",\"));";

        // Expected optimized output
        String expectedOptimizedJS = "var a=[\"constant\",confirm(\"value from user\")];alert(a.join());";

        // Run the closure compiler with advanced optimizations
        String closureOutput = runClosureCompiler(originalJS);

        // Verify the closure compiler output
        assertEquals(expectedOptimizedJS, closureOutput);
    }

    private String runClosureCompiler(String sourceJS) {
        try {
            ProcessBuilder processBuilder = new ProcessBuilder(
                    "java", "-jar", "/usr/local/slando/lib/Google/compiler.jar",
                    "--compilation_level", "ADVANCED_OPTIMIZATIONS", "--js", "-"
            );
            processBuilder.redirectErrorStream(true);

            Process process = processBuilder.start();
            process.getOutputStream().write(sourceJS.getBytes());
            process.getOutputStream().close();

            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
            StringBuilder output = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                output.append(line);
            }

            process.waitFor();
            return output.toString().trim();
        } catch (IOException | InterruptedException e) {
            throw new RuntimeException("Failed to run Closure Compiler", e);
        }
    }
}
