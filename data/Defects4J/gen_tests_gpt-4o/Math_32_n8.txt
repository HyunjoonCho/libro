public void testBSPTreeRecovery() {
    float[] vertices = {
        0.0f, 0.0f, 0.0f,  // vertex 0
        1.0f, 0.0f, 0.0f,  // vertex 1
        1.0f, 1.0f, 0.0f,  // vertex 2
        0.0f, 1.0f, 0.0f,  // vertex 3
        0.0f, 0.0f, 1.0f,  // vertex 4
        1.0f, 0.0f, 1.0f,  // vertex 5
        1.0f, 1.0f, 1.0f,  // vertex 6
        0.0f, 1.0f, 1.0f   // vertex 7
    };
    int[] indices = {
        0, 1, 2, 0, 2, 3,  // Face 1
        4, 5, 6, 4, 6, 7,  // Face 2
        0, 1, 5, 0, 5, 4,  // Face 3
        2, 3, 7, 2, 7, 6,  // Face 4
        0, 3, 7, 0, 7, 4,  // Face 5
        1, 2, 6, 1, 6, 5   // Face 6
    };
    
    BSPMesh mesh = new BSPMesh(vertices, indices);
    PolyhedronsSet polyhedronsSet = new PolyhedronsSet(1.0e-10);
    BSPTree tree = polyhedronsSet.getTree(false, mesh);

    // Assuming we have a method to convert the tree back to a BRep
    List<Face> recoveredFaces = treeToBRep(tree);
    
    assertEquals(12, recoveredFaces.size());
}