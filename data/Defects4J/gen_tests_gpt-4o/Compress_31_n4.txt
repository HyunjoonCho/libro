
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.GZIPOutputStream;

public class TgzTest {

    @Test(expected = IllegalArgumentException.class)
    public void testTgzExtractionThrowsException() throws IOException {
        // Create a dummy byte array resembling a corrupt .tar file that triggers the exception
        byte[] corruptTarData = createCorruptTarData();

        // Compress this tar data to .tgz format
        byte[] tgzData = compressToGzip(corruptTarData);

        // Try to read these bytes as a TarArchiveInputStream to trigger the exception
        try (TarArchiveInputStream tarIn = new TarArchiveInputStream(new ByteArrayInputStream(tgzData))) {
            // Attempt to get the next tar entry, which should throw IllegalArgumentException as per the bug description
            TarArchiveEntry entry = tarIn.getNextTarEntry();
        }
    }

    private byte[] createCorruptTarData() {
        // Create a byte array that resembles invalid tar header data
        byte[] data = new byte[512]; // Size of a typical tar block header
        data[0] = 0;  // Invalid data, just a placeholder for test
        data[1] = 1;
        data[2] = 2;
        data[3] = 3;
        data[4] = 4;
        data[5] = 5;  // The specific byte described in the bug report
        //... fill the rest to simulate a corrupted tar entry
        return data;
    }

    private byte[] compressToGzip(byte[] data) throws IOException {
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        try (GZIPOutputStream gzipOut = new GZIPOutputStream(bos)) {
            gzipOut.write(data);
        }
        return bos.toByteArray();
    }
}
