script
/**
 * JUnit Test Case to reproduce the bug where there is inconsistency in
 * anonymous object type inference when used in union types in JavaScript.
 */
public class TypeInferenceTest {

    @Test
    public void testAnonymousObjectTypeInferenceInUnion() {
        // Mocking console.log for testing purposes
        List<String> consoleOutputs = new ArrayList<>();

        BiConsumer<Object, String> consoleLog = (record, expectedOutput) -> {
            if (record instanceof String) {
                consoleOutputs.add((String) record);
            } else if (record instanceof Map) {
                consoleOutputs.add(((Map) record).get("prop").toString());
            }
            assertEquals(expectedOutput, consoleOutputs.get(consoleOutputs.size() - 1));
        };

        // Simulating JavaScript object with Java Map
        Map<String, Object> record1 = new HashMap<>();
        record1.put("prop", "a");

        BiConsumer<Map<String, Object>, String> func = (record, expectedOutput) -> {
            consoleLog.accept(record, expectedOutput);
        };

        BiConsumer<Object, String> func2 = (record, expectedOutput) -> {
            if (record instanceof String) {
                consoleLog.accept(record, expectedOutput);
            } else if (record instanceof Map) {
                consoleLog.accept(record, expectedOutput);
            }
        };

        // Test cases based on the provided bug report
        func.accept(record1, "a");
        func2.accept(record1, "a");

        // Adding a test for the string case in func2
        func2.accept("stringInput", "stringInput");
    }
}
