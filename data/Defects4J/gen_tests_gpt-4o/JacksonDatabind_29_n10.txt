
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertThrows;

// Base class with type info setup to use external type id property
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = As.EXTERNAL_PROPERTY, property = "type")
abstract class Animal {
}

// Derived class that represents a polymorphic type
@JsonTypeName("dog")
class Dog extends Animal {
    public String bark() {
        return "Woof!";
    }
}

public class PolymorphicTypeHandlingTest {

    @Test
    public void testNullTypeIdHandling() {
        String jsonWithNullTypeId = "{\"type\":null, \"bark\":\"Woof!\"}";

        ObjectMapper mapper = new ObjectMapper();

        // Attempt deserialization and expect an exception due to null type id
        assertThrows(Exception.class, () -> {
            mapper.readValue(jsonWithNullTypeId, Animal.class);
        });
    }
}
