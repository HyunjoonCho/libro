
import static org.mockito.Mockito.*;

import org.junit.Test;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

public class ClassCastExceptionTest {

    public interface MyService {
        String someMethod();
    }

    @Test(expected = ClassCastException.class)
    public void testClassCastExceptionWithDefaultAnswer() {
        // Mock with a default answer that causes a ClassCastException
        MyService mockService = mock(MyService.class, new Answer<Object>() {
            @Override
            public Object answer(InvocationOnMock invocation) {
                // Return something that will cause a ClassCastException
                return MyService.class;
            }
        });

        // Invoke method on the mock
        String result = mockService.someMethod();
        // Intended to throw a ClassCastException when interacting with String

        // Verify zero interactions
        // Using verifyZeroInteractions should trigger the issue with the mock
        verifyZeroInteractions(mockService);

        // The expected behavior is that this test will throw a ClassCastException
        // when it reaches this point due to the mock's answer
    }
}
