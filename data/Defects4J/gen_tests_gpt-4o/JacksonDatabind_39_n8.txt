public void testJacksonDeserializationAfterInvalidSubtype() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper().disable(
            DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
            DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
            DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES
    );

    String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord result1 = objectMapper.readValue(json, CallRecord.class);
    assertEquals("123", result1.application); // should read application
    assertNotNull(result1.item2); // should read valid item2 even after invalid item

    json = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}}";
    CallRecord result2 = objectMapper.readValue(json, CallRecord.class);
    assertEquals("123", result2.application); // should still read application even with invalid item

    json = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, \"version\":0.0,\"application\":\"123\"}";
    CallRecord result3 = objectMapper.readValue(json, CallRecord.class);
    assertEquals("123", result3.application); // should read application after invalid item when item is in the beginning
}