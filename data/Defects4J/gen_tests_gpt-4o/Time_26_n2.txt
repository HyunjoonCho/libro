public void testDSTTransitionInconsistency() {
    Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);

    // US/Central timezone test for DST transition
    DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
    Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));
    DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
    DateTime usCentralDaylightInUSCentral = new DateTime(2008, 11, 2, 1, 0, 0, 0, chronUSCentral);

    // Australia/NSW timezone test for DST transition
    DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
    Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));
    DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
    DateTime australiaNSWDaylightInAustraliaNSW = new DateTime(2008, 4, 6, 2, 0, 0, 0, chronAusNSW);

    // Assert that setting the hour of day on the DST boundary results in a daylight time for both time zones
    assertNotEquals("US/Central should remain daylight time after setting hour", 
                      usCentralDaylightInUSCentral, 
                      usCentralStandardInUSCentral.withHourOfDay(1));
    assertNotEquals("Australia/NSW should change to daylight time after setting hour", 
                      australiaNSWDaylightInAustraliaNSW, 
                      australiaNSWStandardInAustraliaNSW.withHourOfDay(2));
}