
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.ODEIntegrator;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class EventDetectionBugTest {

    private static class TestEquation implements FirstOrderDifferentialEquations {
        @Override
        public int getDimension() {
            return 1;
        }

        @Override
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = 1.0; // Simple linear equation: dy/dt = 1 => y = t + constant
        }
    }

    private static class SwitchingFunction implements EventHandler {

        @Override
        public double g(double t, double[] y) {
            if (t < 135) {
                return Math.sin((t - 90) / 45 * Math.PI); // Increases to zero at 90, then decreases
            } else {
                return -1; // Always negative after 135
            }
        }

        @Override
        public Action eventOccurred(double t, double[] y, boolean increasing) {
            System.out.println("Event detected at t = " + t);
            return Action.STOP;
        }

        @Override
        public void resetState(double t, double[] y) {
            // No reset action
        }
    }

    @Test
    public void testCloseEventsDetection() {
        double minStep = 1.0e-10;
        double maxStep = 10.0;
        double[] y = {0.0};

        ODEIntegrator integrator = new DormandPrince853Integrator(minStep, maxStep, 1.0e-10, 1.0e-10);
        integrator.addEventHandler(new SwitchingFunction(), 1.0e-6, 1.0e-6, 1000);

        integrator.integrate(new TestEquation(), 0.0, y, 160, y);

        // Assuming here we are stopping on the second event
        assertEquals("Integration did not stop at 135 due to missed event.", 135.0, y[0], 1.0e-3);
    }
}
