
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class SolverTest {

    @Test(expected = org.apache.commons.math3.exception.TooManyEvaluationsException.class)
    public void testBugRegulaFalsiSolver() {
        final UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new RegulaFalsiSolver();
        // The following call will throw TooManyEvaluationsException
        double root = solver.solve(100, f, 1, 10);
    }
    
    @Test
    public void testPegasusSolverSuccess() {
        final UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new PegasusSolver();
        double root = solver.solve(100, f, 1, 10);
        
        // PegasusSolver should find the root without exceeding evaluations
        assertEquals(Math.pow(Math.PI, 3.0), Math.exp(root), 1e-9);
    }
}
