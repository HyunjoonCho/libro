
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testFunctionNameTranslation() {
        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("test",
            "function preload_check_all() {" +
            "  console.log('Function called');" +
            "}" +
            "preload_check_all();"
        ));

        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);
        options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);
        options.setOptimizationLevel(CompilerOptions.OptimizationLevel.SIMPLE);

        com.google.javascript.jscomp.Compiler compiler = new com.google.javascript.jscomp.Compiler();
        Result result = compiler.compile(new ArrayList<JSSourceFile>(), inputs, options);

        // Verify that the result is successful
        assertTrue(result.success);

        // Verify that the function name was changed consistently
        String compiledCode = compiler.toSource();
        assertTrue(compiledCode.contains("console.log"));
        assertTrue(compiledCode.contains("function"));
    }
}
