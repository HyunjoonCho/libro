public void testDefaultMockingDetails_shouldGetExtraInterfaces() {
    Bar bar = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));
    MockingDetails details = Mockito.mockingDetails(bar);
    assertTrue(details.getExtraInterfaces().contains(List.class));
    assertTrue(details.getExtraInterfaces().contains(Observer.class));
}

public void testNoJUnitDependencies_pureMockitoShouldNotDependJUnit_ByteBuddy() {
    try {
        Method method = NoJUnitDependenciesTest.class.getDeclaredMethod("checkDependency", String.class);
        method.setAccessible(true);
        method.invoke(null, "org\\mockito\\configuration\\MockitoConfiguration");
        fail("Expected AssertionError not thrown");
    } catch (InvocationTargetException e) {
        assertTrue(e.getCause() instanceof AssertionError);
    } catch (Exception e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}

public void testClassLoaders_excludingClassLoaderCannotLoadClassesWhenNoCorrectSourceUrlSet() {
    try {
        ClassLoaders.LocalExcludingURLClassLoader classLoader =
            new ClassLoaders.LocalExcludingURLClassLoader(new URL[0], new String[] {"junit", "org.junit"});
        classLoader.findClass("junit.framework.Assert");
        fail("Expected ClassNotFoundException not thrown");
    } catch (ClassNotFoundException e) {
        assertTrue(e.getMessage().contains("classes with prefix : [junit, org.junit] are excluded"));
    }
}