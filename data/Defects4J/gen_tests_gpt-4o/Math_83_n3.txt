
import org.apache.commons.math3.optimization.linear.*;
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.RealPointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIssue() {
        // Define the linear objective function: max 0.8x0 + 0.2x1 + 0.7x2 + 0.3x3 + 0.6x4 + 0.4x5
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0);

        // Create constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0)); // r1
        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0)); // r2
        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0)); // r3
        constraints.add(new LinearConstraint(new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0));  // r4
        constraints.add(new LinearConstraint(new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0));  // r5

        // Optimize the problem
        SimplexSolver solver = new SimplexSolver();
        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);

        // Expected solution values
        double expectedOptimalValue = 25.8;
        double[] expectedVariables = { 10.0, 0.0, 8.0, 0.0, 5.0, 23.0 };

        // Check solution
        assertEquals("Optimal value mismatch", expectedOptimalValue, solution.getValue(), 1e-5);
        double[] point = solution.getPoint();
        for (int i = 0; i < expectedVariables.length; i++) {
            assertEquals("Variable x" + i + " mismatch", expectedVariables[i], point[i], 1e-5);
        }
    }
}
