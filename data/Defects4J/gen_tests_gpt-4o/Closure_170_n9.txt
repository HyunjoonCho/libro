
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;
import static org.junit.Assert.*;

public class AggressiveCommaRemovalTest {

    @Test
    public void testOverlyAggressiveCommaRemoval() {
        String originalCode = 
            "function Test(n) {" +
            "  var i = 0;" +
            "  return typeof n !== 'undefined' ? (i = n.length) : (n = 'foo'), i;" +
            "}" +
            "var dummy = '6chars';" +
            "console && console.log(Test(dummy));";

        String expectedOutput = "6"; // Expected the length of "6chars"

        // Set up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setOptimizationLevel(CompilerOptions.OptimizationLevel.SIMPLE_OPTIMIZATIONS);

        // Compile the code
        Result result = compiler.compile(
            JSSourceFile.fromCode("externs.js", ""), // Use default externs for example
            JSSourceFile.fromCode("input.js", originalCode),
            options);

        // Get the compiled output
        String compiledCode = compiler.toSource();

        // Execute the compiled code (simulating executing in a JavaScript environment)
        // Using a simple script engine to run the JavaScript
        try {
            ScriptEngineManager manager = new ScriptEngineManager();
            ScriptEngine engine = manager.getEngineByName("JavaScript");
            engine.eval(compiledCode);
            Object output = engine.get("result"); // This assumes that we set the result in JS to be fetched
            assertEquals(expectedOutput, output.toString());
        } catch (ScriptException e) {
            fail("JavaScript execution failed: " + e.getMessage());
        }
    }
}
