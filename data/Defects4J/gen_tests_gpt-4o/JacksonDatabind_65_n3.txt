
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;
import java.util.Map;
import static org.junit.Assert.assertEquals;

public class KeyVsFieldTest {

    @Test
    public void deserializeAsField() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        AsField asField = objectMapper.readValue("{\"name\": \"first.last\"}", AsField.class);
        assertEquals("first", asField.getName()._firstname);
        assertEquals("last", asField.getName()._lastname);
    }

    @Test
    public void deserializeAsKey() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        Map<FullName, Double> map = objectMapper.readValue(
            "{\"first.last\": 42}", new TypeReference<Map<FullName, Double>>() {});

        Map.Entry<FullName, Double> entry = map.entrySet().iterator().next();
        
        assertEquals("first", entry.getKey()._firstname);
        assertEquals("last", entry.getKey()._lastname);
        assertEquals(42.0, entry.getValue().doubleValue(), 0);
    }

    public static class AsField {
        private final FullName _name;

        public AsField(@JsonProperty("name") FullName name) {
            this._name = name;
        }

        public FullName getName() {
            return _name;
        }
    }

    public static class FullName {
        private final String _firstname;
        private final String _lastname;

        private FullName(String firstname, String lastname) {
            this._firstname = firstname;
            this._lastname = lastname;
        }

        @JsonCreator
        public static FullName valueOf(String value) {
            String[] parts = value.split("\\.");
            return new FullName(parts[0], parts[1]);
        }

        // Annotated with @JsonIgnore to workaround the issue for this specific use case
        @JsonValue
        @Override
        public String toString() {
            return _firstname + "." + _lastname;
        }
    }
}
