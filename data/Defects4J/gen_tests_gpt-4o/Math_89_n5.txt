
import org.apache.commons.math3.stat.Frequency;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;

public class FrequencyTest {

    @Test
    public void testAddNonComparableObject() {
        Frequency frequency = new Frequency();
        final Object nonComparableObj = new Object();

        // Attempt to add a non-Comparable object to Frequency
        frequency.addValue(nonComparableObj);

        // The above call does not throw an exception on the first add,
        // but any further operations do not behave as expected:

        // Assert that count for non-comparable object is 0 instead of throwing an exception
        assertEquals(0, frequency.getCount(nonComparableObj), "Count should be 0 for non-comparable object");

        // Assert that percentage for non-comparable object is 0.0 instead of throwing an exception
        assertEquals(0.0, frequency.getPct(nonComparableObj), "Percentage should be 0.0 for non-comparable object");

        // Check if an IllegalArgumentException is thrown when a second add attempt is made
        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            frequency.addValue("ComparableString");
        });

        assertTrue(exception.getMessage().contains("Class cast exception"));
    }
}
