
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerFunctionPropertiesTest {

    @Test
    public void testFunctionPropertyPreservation() throws ScriptException {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("nashorn");

        // Original JavaScript code to be tested
        String script = 
            "var map = {};\n" +
            "var addToMap = function(key, func) {\n" +
            "    map[key] = func;\n" +
            "};\n" +
            "var f1 = function() { return 'f1'; };\n" +
            "f1.alwaysCall = true;\n" +
            "var f2 = function() { return 'f2'; };\n" +
            "addToMap('f1', f1);\n" +
            "addToMap('f2', f2);\n" +
            "var callFunctionByKey = function(key) {\n" +
            "    var f = map[key];\n" +
            "    if (f.alwaysCall) return f();\n" +
            "    return 'missing';\n" +
            "};\n" +
            "var result = callFunctionByKey('f1');";

        // Evaluate the script
        engine.eval(script);

        // Retrieve the result of `callFunctionByKey('f1')`
        String result = (String) engine.get("result");
        
        // Verify that the property 'alwaysCall' is preserved and function is called
        assertEquals("f1", result);
    }
}
