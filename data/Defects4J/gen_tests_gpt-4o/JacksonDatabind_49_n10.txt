
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class JsonIdentityInfoTest {

    public static class Foo {
        @JsonIdentityReference(alwaysAsId = true)
        public Bar bar1;

        @JsonIdentityReference()
        public Bar bar2;
    }

    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class)
    public static class Bar {
    }

    @Test
    public void testJsonIdentityInfoSerialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // create structure to serialize
        Foo mo = new Foo();
        mo.bar1 = new Bar();
        mo.bar2 = mo.bar1;

        // serialize it
        String json = mapper.writeValueAsString(mo);

        // Output should show the same ID for both bar1 and bar2 because they refer to the same object
        // But due to the issue, we expect incorrect serialization where bar2 is serialized with a new ID
        assertEquals("{\"bar1\":1,\"bar2\":{\"@id\":2}}", json);
    }
}
