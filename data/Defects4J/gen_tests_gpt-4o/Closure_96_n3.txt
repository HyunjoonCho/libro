public void testVarArgsTypeCheck() {
    // Set up the Compilation level and Warning level
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
    options.setPrettyPrint(true);

    // Code to be compiled
    String code = "/**\n" +
                  " * @param {...string} var_args\n" +
                  " */\n" +
                  "function foo(var_args) {\n" +
                  "  return arguments.length;\n" +
                  "}\n" +
                  "foo('hello');\n" +
                  "foo(123);\n" +
                  "foo('hello', 123);\n";

    // Expected warning for foo('hello', 123);
    JSSourceFile input = JSSourceFile.fromCode("input.js", code);
    Compiler compiler = new Compiler();
    Result result = compiler.compile(
            Collections.emptyList(),
            Collections.singletonList(input),
            options
    );

    // Check that the expected warning is present
    boolean warningFound = result.warnings.stream()
          .anyMatch(warning -> warning.getDescription().contains("type-mismatch"));
    assertTrue("Expected type-mismatch warning for second parameter in foo('hello', 123)", warningFound);
}