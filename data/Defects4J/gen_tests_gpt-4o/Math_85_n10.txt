
import org.apache.commons.math.MathException;
import org.apache.commons.math.distribution.DistributionFactory;
import org.apache.commons.math.distribution.NormalDistribution;
import org.apache.commons.math.distribution.NormalDistributionImpl;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class NormalDistributionTest {

    @Test
    public void testInverseCumulativeProbabilityBug() {
        try {
            DistributionFactory factory = DistributionFactory.newInstance();
            NormalDistribution normal = factory.createNormalDistribution(0, 1);

            // Test case for the given probability value
            // Expecting approximately 2.0 as result
            double result1 = normal.inverseCumulativeProbability(0.9772498680518209);
            assertEquals(2.0, result1, 0.0001);

            // Additional test case
            // Expecting approximately 3.0 as result
            double result2 = normal.inverseCumulativeProbability(0.9986501019683698);
            assertEquals(3.0, result2, 0.0001);

            // Another test case
            // Expecting approximately 4.0 as result
            double result3 = normal.inverseCumulativeProbability(0.9999683287581673);
            assertEquals(4.0, result3, 0.0001);

        } catch (MathException e) {
            // If an exception is thrown, the test should fail
            e.printStackTrace();
            fail("MathException was thrown: " + e.getMessage());
        }
    }
    
    // To fail the test if an exception occurs
    private void fail(String message) {
        throw new AssertionError(message);
    }
}
