
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class JavaScriptCompressorTest {

    @Test
    public void testForEachKeywordPreservation() {
        // Original JavaScript code
        String originalCode = 
                "contactcenter.screenpop.updatePopStatus = function(stamp, status) {\n" +
                "    for each ( var curTiming in this.timeLog.timings ) {\n" +
                "        if ( curTiming.callId == stamp ) {\n" +
                "            curTiming.flag = status;\n" +
                "            break;\n" +
                "        }\n" +
                "    }\n" +
                "};";

        // Expected result after compression
        String expectedCompressedCode = 
                "contactcenter.screenpop.updatePopStatus=function(stamp,status){for each(var curTiming in this.timeLog.timings)if(curTiming.callId==stamp){curTiming.flag=status;break}};";

        // Mock compress method (in real scenario, replace with actual compression tool invocation)
        String actualCompressedCode = mockCompress(originalCode);

        assertEquals("The 'for each' keyword should be preserved in compression", expectedCompressedCode, actualCompressedCode);
    }

    // Mock method representing the compression process
    private String mockCompress(String jsCode) {
        // This mock implementation assumes the bug. Replace this with the actual tool's compression method.
        return jsCode.replaceAll("\\s+", "")  // simple whitespace removal
                     .replace("for each (", "for(");  // simulate the erroneous replacement
    }
}
