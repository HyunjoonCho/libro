
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
import org.junit.Test;

import javax.xml.bind.annotation.*;
import javax.xml.bind.annotation.adapters.XmlAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import java.util.List;
import java.util.StringJoiner;

import static java.util.Arrays.asList;

public class IntegerListXmlAdapterTest {

    @Test(expected = JsonProcessingException.class)
    public void testWithIncorrectXmlAdapter() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper().setAnnotationIntrospector(new JaxbAnnotationIntrospector());
        SomeIntListHolder listHolder = new SomeIntListHolder();
        listHolder.setListOne(asList(1, 2, 3));
        
        // This should throw a JsonProcessingException due to the incorrect XmlAdapter
        System.out.println(mapper.writeValueAsString(listHolder));
    }

    @Test
    public void testWithCorrectXmlAdapter() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper().setAnnotationIntrospector(new JaxbAnnotationIntrospector());
        SomeIntListHolderWithCorrectAdapter listHolder = new SomeIntListHolderWithCorrectAdapter();
        listHolder.setListOne(asList(1, 2, 3));
        
        // This should work correctly and print a valid JSON string
        System.out.println(mapper.writeValueAsString(listHolder));
    }

    public static class IntegerListXmlAdapter extends XmlAdapter<Object, List<Integer>> {
        @Override
        public List<Integer> unmarshal(Object value) throws Exception {
            return null;
        }

        @Override
        public Object marshal(List<Integer> list) throws Exception {
            return joinList(list);
        }
    }

    public static class IntegerListToStringXmlAdapter extends XmlAdapter<String, List<Integer>> {
        @Override
        public List<Integer> unmarshal(String value) throws Exception {
            return null;
        }

        @Override
        public String marshal(List<Integer> list) throws Exception {
            return joinList(list);
        }
    }

    @XmlRootElement
    @XmlAccessorType(XmlAccessType.NONE)
    public static class SomeIntListHolder {

        @XmlAttribute
        @XmlJavaTypeAdapter(IntegerListXmlAdapter.class)
        private List<Integer> listOne;

        public List<Integer> getListOne() {
            return listOne;
        }

        public void setListOne(List<Integer> listOne) {
            this.listOne = listOne;
        }
    }

    @XmlRootElement
    @XmlAccessorType(XmlAccessType.NONE)
    public static class SomeIntListHolderWithCorrectAdapter {

        @XmlAttribute
        @XmlJavaTypeAdapter(IntegerListToStringXmlAdapter.class)
        private List<Integer> listOne;

        public List<Integer> getListOne() {
            return listOne;
        }

        public void setListOne(List<Integer> listOne) {
            this.listOne = listOne;
        }
    }

    private static String joinList(List<Integer> list) {
        if (list == null) return null;
        StringJoiner joiner = new StringJoiner(",");
        for (Integer integer : list) {
            joiner.add(integer.toString());
        }
        return joiner.toString();
    }
}
