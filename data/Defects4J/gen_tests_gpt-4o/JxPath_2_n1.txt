
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.xml.DOMParser;
import org.apache.commons.jxpath.BasicNodeSet;
import org.apache.commons.jxpath.ExpressionContext;
import org.apache.commons.jxpath.NodeSet;
import org.apache.commons.jxpath.Pointer;
import org.apache.commons.jxpath.ri.model.NodePointer;
import org.junit.Before;
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class NodeSetHandlingTest {

    private JXPathContext context;

    @Before
    public void setUp() throws Exception {
        String xml = "<root><observation>Obs1</observation><observation>Obs2</observation></root>";
        DOMParser parser = new DOMParser();
        Document doc = (Document) parser.parseXML(new InputSource(new StringReader(xml)));
        context = JXPathContext.newContext(doc);

        // Register the custom function extension
        context.setFunctions(new TestFunctions());
    }

    @Test
    public void testNodeSetHandling() {
        List<?> result = (List<?>) context.selectNodes("test:observations()");
        // The expected result should be the individual observations from the NodeSet
        assertEquals(2, result.size());
        assertEquals("Obs1", ((Pointer) result.get(0)).getValue());
        assertEquals("Obs2", ((Pointer) result.get(1)).getValue());
    }

    public static class TestFunctions {
        public static NodeSet observations(ExpressionContext context) {
            List<NodePointer> pointers = extractObservations((NodePointer) context.getContextNodePointer(), new ArrayList<>());
            BasicNodeSet result = new BasicNodeSet();
            for (NodePointer pointer : pointers) {
                result.add(pointer);
            }
            return result;
        }

        private static List<NodePointer> extractObservations(NodePointer contextNodePointer, List<NodePointer> accumulator) {
            for (Pointer pointer : contextNodePointer.childIterator(null, false)) {
                if (pointer.getName().getName().equals("observation")) {
                    accumulator.add((NodePointer) pointer);
                }
            }
            return accumulator;
        }
    }
}

