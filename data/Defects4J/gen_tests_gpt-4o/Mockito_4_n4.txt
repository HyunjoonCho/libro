
import static org.mockito.Mockito.*;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;
import org.junit.Test;

public class MockWithDefaultAnswerTest {

    public interface Service {
        String performAction();
    }

    @Test(expected = ClassCastException.class)
    public void testVerifyZeroInteractionsWithDefaultAnswer() {
        // Create a mock with a default answer that mimics potentially problematic behavior
        Service mockService = mock(Service.class, new Answer<Object>() {
            @Override
            public Object answer(InvocationOnMock invocation) throws Throwable {
                // Default answer that returns Class type instead of String
                return Service.class;
            }
        });

        // Invoke the method on the mock
        mockService.performAction();

        // This should fail with ClassCastException in the problematic versions
        verifyZeroInteractions(mockService);
    }
}
