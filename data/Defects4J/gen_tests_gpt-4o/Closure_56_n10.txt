
import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class CompilerOutputTest {

    @Test
    public void testLastErrorOutputIsTruncated() {
        // Simulating the expected output when compiling test.js
        String simulatedCompilerOutput = 
            "test.js:1: ERROR - variable foo is undefined\n" +
            "alert(foo);\n" +
            " ^\n" +
            "\n" +
            "test.js:2: ERROR - variable bar is undefined\n\n" +
            "2 error(s), 0 warning(s)";

        // Normally, you would run the actual compiler process here and capture the output,
        // but for this test, we're using the simulated output to reproduce the bug.

        // Check if the simulated output is missing expected components
        String[] lines = simulatedCompilerOutput.split("\n");

        // Verify the last error message is complete
        // According to the bug, the last error should have a line and a caret but doesn't
        assertEquals("test.js:2: ERROR - variable bar is undefined", lines[4].trim());
        boolean hasLineInfo = lines.length > 5 && lines[5].contains("alert(bar);");
        boolean hasCaret = lines.length > 5 && lines[5].contains("^");

        assertEquals("Checking for missing line and caret in the last error message", false, hasLineInfo || hasCaret);
    }
}
