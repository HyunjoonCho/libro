public void testLastErrorOrWarningTruncation() {
    // Prepare a simple JS file with intentional errors
    String jsContent = "alert(foo);\nalert(bar);";
    File jsFile = new File("test.js");

    try (FileWriter writer = new FileWriter(jsFile)) {
        // Write the JavaScript code to file
        writer.write(jsContent);
    } catch (IOException e) {
        fail("Failed to create test file: " + e.getMessage());
    }
    
    // Execute the compiler command
    ProcessBuilder processBuilder = new ProcessBuilder(
        "java", "-jar", "compiler.jar", "--warning_level", "VERBOSE", "--js", "test.js");
    processBuilder.redirectErrorStream(true);
    
    try {
        Process process = processBuilder.start();
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        
        StringBuilder output = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
        }
        
        process.waitFor();

        // Check that the last line contains the information about the location of the error
        String[] outputLines = output.toString().split("\n");
        String lastErrorLine = outputLines[outputLines.length - 3]; // The second to the last line with actual content
        assertTrue("The last error message is truncated", lastErrorLine.contains("alert(bar);"));

    } catch (IOException | InterruptedException e) {
        fail("Failed to execute compiler process: " + e.getMessage());
    } finally {
        // Cleanup the test file
        jsFile.delete();
    }
}