
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.junit.Test;

import java.text.SimpleDateFormat;
import java.time.LocalDateTime;
import java.time.Month;
import java.time.format.DateTimeFormatter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class DateTimeSerializerTest {

    static class TestBean {
        // Set pattern using JsonFormat, without specifying a custom format
        @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss")
        public LocalDateTime date;
    }

    @Test
    public void testDateTimeFormatIgnored() {
        ObjectMapper mapper = new ObjectMapper();

        // Set custom date format
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS");
        mapper.setDateFormat(sdf);

        // Enable necessary features
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        mapper.registerModule(new JavaTimeModule());

        LocalDateTime dateTime = LocalDateTime.of(2023, Month.OCTOBER, 5, 14, 30);

        TestBean bean = new TestBean();
        bean.date = dateTime;

        try {
            String json = mapper.writeValueAsString(bean);
            assertEquals("{\"date\":\"2023-10-05T14:30:00.000\"}", json);
        } catch (Exception e) {
            fail("Serialization failed with exception: " + e.getMessage());
        }
    }
}
