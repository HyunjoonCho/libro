
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class CustomSerializerTest {

    // Step 1: Define a POJO with a @JsonValue annotation
    static class MyPojo {
        private final String value;

        public MyPojo(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }
    }

    // Step 2: Create a custom serializer
    static class MyPojoSerializer extends JsonSerializer<MyPojo> {

        @Override
        public void serialize(MyPojo myPojo, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException {
            jsonGenerator.writeString("custom-" + myPojo.getValue());
        }
    }

    @Test
    public void testCustomSerializerWithJsonValue() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Step 3: Register the custom serializer
        SimpleModule module = new SimpleModule();
        module.addSerializer(MyPojo.class, new MyPojoSerializer());
        mapper.registerModule(module);

        // Step 4: Serialize the POJO
        MyPojo pojo = new MyPojo("test");
        String jsonString = mapper.writeValueAsString(pojo);

        // Verify if the custom serializer was used
        assertEquals("\"custom-test\"", jsonString);
    }
}
