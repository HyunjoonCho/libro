public void testConstantFunctionInlining() {
    String jsCode = "function f() { return false; } " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); " +
                    "if (!f()) alert('hi'); ";

    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    Compiler compiler = new Compiler();
    compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", jsCode), options);

    String compiledCode = compiler.toSource();
    // Check if the compiled code still contains the function 'f' or 'alert' statements
    assertFalse(compiledCode.contains("function f"));
    assertTrue(compiledCode.contains("hi"));
}