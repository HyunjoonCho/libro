
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;
import java.util.Map;
import java.util.Map.Entry;

import static org.junit.Assert.assertEquals;

public class KeyVsFieldTest {

    @Test
    public void deserializeAsField() throws IOException {
        AsField asField = new ObjectMapper().readValue("{\"name\": \"first.last\"}", AsField.class);
        assertEquals("first", asField.getName()._firstname);
        assertEquals("last", asField.getName()._lastname);
    }

    @Test
    public void deserializeAsKey() throws IOException {
        Map<FullName, Double> map =
                new ObjectMapper().readValue("{\"first.last\": 42}", new TypeReference<Map<FullName, Double>>() {
                });

        // The test will fail with the error described in the bug report
        // unless the workaround is applied (use @JsonIgnore on the overloaded method).
        Entry<FullName, Double> entry = map.entrySet().iterator().next();

        assertEquals("first", entry.getKey()._firstname);
        assertEquals("last", entry.getKey()._lastname);
        assertEquals(42.0, entry.getValue(), 0);
    }

    public static class AsField {
        private final FullName _name;

        public AsField(@JsonProperty("name") FullName aName) {
            _name = aName;
        }

        public FullName getName() {
            return _name;
        }
    }

    public static class FullName {
        private final String _firstname;
        private final String _lastname;

        private FullName(String firstname, String lastname) {
            _firstname = firstname;
            _lastname = lastname;
        }

        @JsonCreator
        public static FullName valueOf(String value) {
            String[] mySplit = value.split("\\.");
            return new FullName(mySplit[0], mySplit[1]);
        }

        // Use @JsonIgnore to avoid this method being picked up for key deserialization
        @JsonIgnore
        public static FullName valueOf(String firstname, String lastname) {
            return new FullName(firstname, lastname);
        }

        @JsonValue
        @Override
        public String toString() {
            return _firstname + "." + _lastname;
        }
    }
}
