script
// Import necessary functions from a testing framework, assuming use of a JavaScript testing framework like Mocha.
describe('Closure Compiler Function Property Removal Bug', function() {

    it('should retain function properties after compilation', function() {
        var map = {};

        var addToMap = function(key, func) {
            map[key] = func;
        };

        // Define functions with properties
        var f1 = function() { console.log('f1'); };
        f1.alwaysCall = true;
        var f2 = function() { console.log('f2'); };

        addToMap('f1', f1);
        addToMap('f2', f2);

        var callFunctionByKey = function(key) {
            var f = map[key];
            // Fails to produce expected behavior because 'alwaysCall' is not recognized
            if (f.alwaysCall) {
                f();
            }
        };

        // Simulate calling the function and expecting 'f1' to always call,
        // but here's the bug: the property 'alwaysCall' is stripped upon optimization:
        callFunctionByKey('f1');
        
        // Use assertions to ensure the expected behavior
        // Assuming a condition to verify 'f1' called correctly
        // Since we can't check console output directly, assume there's a mechanism
        // to confirm the function execution, e.g., setting a variable or a spy.
        // Here, let's fake the trace with a boolean:
        var isF1Called = false;
        console.log = function(msg) {
            if (msg === 'f1') {
                isF1Called = true;
            }
        };
        assert.strictEqual(isF1Called, true, "f1 was not called as expected due to property removal.");
    });

});
