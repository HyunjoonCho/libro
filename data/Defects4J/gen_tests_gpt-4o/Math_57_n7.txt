
import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;
import org.apache.commons.math3.ml.distance.EuclideanDistance;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertFalse;

public class KMeansPlusPlusClustererTest {

    @Test
    public void testTruncationIssueInKMeansPlusPlusClusterer() {
        // Create a list of data points with distances less than 1
        List<DoublePoint> points = new ArrayList<>();
        points.add(new DoublePoint(new double[]{0.1, 0.1}));
        points.add(new DoublePoint(new double[]{0.2, 0.2}));
        points.add(new DoublePoint(new double[]{0.3, 0.3}));
        points.add(new DoublePoint(new double[]{0.4, 0.4}));

        // Set number of clusters to create
        int numberOfClusters = 2;

        // Initialize the KMeansPlusPlusClusterer
        KMeansPlusPlusClusterer<DoublePoint> clusterer = new KMeansPlusPlusClusterer<>(numberOfClusters, 1000, new EuclideanDistance(), KMeansPlusPlusClusterer.EmptyClusterStrategy.CREATE_NEW_CLUSTER);

        // Perform clustering
        List<Cluster<DoublePoint>> clusters = clusterer.cluster(points);

        // Verify that no cluster is empty
        for (Cluster<DoublePoint> cluster : clusters) {
            assertFalse("Cluster should not be empty", cluster.getPoints().isEmpty());
        }

        // Note: This test will fail if the truncation issue causes any cluster to become empty
    }
}
