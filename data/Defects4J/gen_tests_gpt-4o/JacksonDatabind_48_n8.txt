
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.introspect.BasicBeanDescription;
import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;
import com.fasterxml.jackson.databind.type.JavaType;
import com.fasterxml.jackson.databind.introspect.BasicClassIntrospector;
import org.junit.Assert;
import org.junit.Test;

import java.util.List;

public class BasicClassIntrospectorTest {

    @Test
    public void testAutoDetectSettings() {
        class TCls {
            @JsonProperty("groupname")
            private String groupname;

            public void setName(String str) {
                this.groupname = str;
            }
            
            public String getName() {
                return groupname;
            }
        }

        ObjectMapper om = new ObjectMapper();
        // Only use explicitly specified values to be serialized/deserialized (i.e., JsonProperty).
        om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_FIELDS, false);
        om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_GETTERS, false);
        om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_SETTERS, false);
        om.configure(com.fasterxml.jackson.databind.MapperFeature.AUTO_DETECT_IS_GETTERS, false);
        om.configure(com.fasterxml.jackson.databind.MapperFeature.USE_GETTERS_AS_SETTERS, false);
        om.configure(com.fasterxml.jackson.databind.MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);
        om.configure(com.fasterxml.jackson.databind.MapperFeature.INFER_PROPERTY_MUTATORS, false);
        om.configure(com.fasterxml.jackson.databind.MapperFeature.USE_ANNOTATIONS, true);

        JavaType javaType = om.getTypeFactory().constructType(TCls.class);

        BasicClassIntrospector introspector = new BasicClassIntrospector();
        BasicBeanDescription bdesc = introspector.forSerialization(om.getSerializationConfig(), javaType, null);
        List<BeanPropertyDefinition> bprops = bdesc.findProperties();

        Assert.assertEquals("Found property count " + bprops.size() + ", there should only be one??", 1, bprops.size());
        
        bprops.forEach(prop -> {
            Assert.assertEquals("groupname", prop.getName());
            Assert.assertEquals("groupname", prop.getInternalName());
        });
    }
}
