
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.junit.Test;

import static org.junit.Assert.fail;

public class PrototypeMethodTest {
    @Test
    public void testPrototypeMethodInConstructor() {
        Context context = Context.enter();
        try {
            Scriptable scope = context.initStandardObjects();
            String jsCode = ""
                + "function WebInspector() {};"
                + "WebInspector.DOMNode = function() { this._setAttributesPayload = function() {}; };"
                + "WebInspector.DOMNode.prototype._setAttributesPayload = function(attributes) {"
                + "    // Code assuming the prototype should be called"
                + "};"
                + "WebInspector.DOMAgent = function(payload) {"
                + "    this._node = new WebInspector.DOMNode();"
                + "    this._node._setAttributesPayload(payload.attributes);"
                + "};";
            context.evaluateString(scope, jsCode, "TestScript", 1, null);

            try {
                context.evaluateString(scope, "var agent = new WebInspector.DOMAgent({attributes: {}});", "TestScript", 1, null);
                // No error means the method exists as expected
            } catch (Exception e) {
                // If the method is not defined on prototype, this block will execute
                fail("Prototype method _setAttributesPayload is not available within the constructor.");
            }

        } finally {
            Context.exit();
        }
    }
}
