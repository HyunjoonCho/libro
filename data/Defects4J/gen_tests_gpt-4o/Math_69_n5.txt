
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;
import org.apache.commons.math3.distribution.TDistribution;
import org.junit.Test;
import static org.junit.Assert.*;

public class PearsonsCorrelationTest {

    @Test
    public void testPearsonsCorrelationPValuesPrecision() {
        // Example input data with many treatments to exemplify the problem
        double[] x = {
            1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0,
            11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0
        };
        double[] y = {
            2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0,
            1.0, 3.0, 5.0, 7.0, 9.0, 11.0, 13.0, 15.0, 17.0, 19.0
        };

        // Calculate the correlation p-values using the existing method
        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();
        double[][] correlationMatrix = pearsonsCorrelation.computeCorrelationMatrix(new double[][] {x, y}).getData();
        double correlation = correlationMatrix[0][1];
        
        // Assuming df (degrees of freedom) as n - 2
        int n = x.length;
        int df = n - 2;
        TDistribution tDistribution = new TDistribution(df);
        double t = correlation * Math.sqrt((df) / (1 - correlation * correlation));

        // Direct calculation of p-value using the existing implementation
        double pValueOldMethod = 2 * (1 - tDistribution.cumulativeProbability(t));
        // Correct calculation of p-value
        double pValueNewMethod = 2 * tDistribution.cumulativeProbability(-t);

        // Check if the old method results in zero due to precision
        assertTrue("Old method p-value should be zero due to precision issues", pValueOldMethod == 0.0);

        // Check if the new method provides a positive p-value
        assertTrue("New method p-value should be greater than zero", pValueNewMethod > 0.0);
    }
}
