script
function testStringOverOptimization() {
    // Define the problematic function without 'var'
    function sgxColorRGBA(r, g, b, a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }

    sgxColorRGBA.prototype.asHex = function() {
        var hexString = "";
        
        str = (Math.floor(this.r * 255)).toString(16);
        if (str.length < 2) { str = "0" + str; }
        hexString += str;
        
        str = (Math.floor(this.g * 255)).toString(16);
        if (str.length < 2) { str = "0" + str; }
        hexString += str;
        
        str = (Math.floor(this.b * 255)).toString(16);
        if (str.length < 2) { str = "0" + str; }
        hexString += str;
        
        str = (Math.floor(this.a * 255)).toString(16);
        if (str.length < 2) { str = "0" + str; }
        hexString += str;
        
        return hexString;
    }

    // Instance with known color values
    var color = new sgxColorRGBA(0.5, 0.3, 0.7, 1.0);
    
    // Expected output: Last value (alpha) is "FF" for fully opaque (255)
    var expectedHex = "7f4db2ff";
    var computedHex = color.asHex();
    
    console.assert(computedHex === expectedHex, 
        "Test failed: expected " + expectedHex + " but got " + computedHex);
}

// Execute the test
testStringOverOptimization();
