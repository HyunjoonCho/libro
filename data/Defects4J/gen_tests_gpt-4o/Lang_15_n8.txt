
import org.apache.commons.lang3.reflect.TypeUtils;
import org.junit.Assert;
import org.junit.Test;

import java.lang.reflect.Type;
import java.util.Map;

public class TypeUtilsTest {

    public interface This<K, V> {
    }

    public class Other<T> implements This<String, T> {
    }

    @Test
    public void testGetTypeArguments_PartiallyAssignedClass() {
        // Obtain the type arguments map for Other.class when used as This.class
        Map<Type, Type> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);
        
        // Check that the map has two entries, K and V, for the generic type parameters of This
        Assert.assertEquals(2, typeVarAssigns.size());
        
        // Validate the assignment for the first type parameter (K)
        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
        
        // Validate the assignment for the second type parameter (V)
        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
    }
}
