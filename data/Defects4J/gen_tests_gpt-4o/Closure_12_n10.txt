public void testTryCatchBlockCompilation() {
    String uncompiledOutput = runUncompiledFunctionA();
    String compiledOutput = runCompiledFunctionB();
    assertEquals("1212", uncompiledOutput);
    assertEquals("undefinedundefined", compiledOutput);
}

private String runUncompiledFunctionA() {
    StringBuilder output = new StringBuilder();
    for (int i = 0; i < 2; i++) {
        String x = "1";
        try {
            x += someFunction();
        } catch (Exception e) {
            // Do nothing
        }
        x += "2";
        try {
            x += someFunction();
        } catch (Exception e) {
            // Do nothing
        }
        output.append(x);
    }
    return output.toString();
}

private String runCompiledFunctionB() {
    StringBuilder output = new StringBuilder();
    for (int i = 0; i < 2; i++) {
        String a;
        try {
            a = "1" + someFunction();
        } catch (Exception c) {
            // Do nothing
        }
        try {
            a = a + "2" + someFunction();
        } catch (Exception d) {
            // Do nothing
        }
        output.append(a);
    }
    return output.toString();
}

private String someFunction() throws Exception {
    throw new Exception("Function not implemented");
}