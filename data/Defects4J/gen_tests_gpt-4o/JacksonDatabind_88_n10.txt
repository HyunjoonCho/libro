
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.*;

public class PolymorphicDeserializationTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
    @JsonSubTypes({
        @JsonSubTypes.Type(value = SubTypeA.class, name = "SubTypeA"),
        @JsonSubTypes.Type(value = SubTypeB.class, name = "SubTypeB")
    })
    static abstract class BaseType {
        public String name;
    }

    static class SubTypeA extends BaseType {
        public int valueA;
    }

    static class SubTypeB extends BaseType {
        public String valueB;
    }

    @Test
    public void testPolymorphicDeserializationWithIncorrectType() {
        ObjectMapper objectMapper = new ObjectMapper();
        
        // JSON with incorrect type information
        String json = "{\"type\":\"SubTypeB\",\"name\":\"Example\",\"valueA\":10}";

        try {
            BaseType result = objectMapper.readValue(json, BaseType.class);
            // This assertion is to illustrate the failure,
            // actual vulnerability might be more subtle.
            assertTrue("Expected an instance of SubTypeB, but was: " + result.getClass().getName(),
                result instanceof SubTypeB);
        } catch (JsonProcessingException e) {
            fail("Deserialization failed: " + e.getMessage());
        }
    }
}
