
import org.joda.time.DateTime;
import org.joda.time.DurationFieldType;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class PeriodTypeTest {

    @Test(expected = UnsupportedOperationException.class)
    public void testPeriodWithoutYearThrowsException() {
        DateTime startDate = new DateTime(2020, 1, 1, 0, 0);
        DateTime endDate = new DateTime(2020, 12, 31, 0, 0);

        // Create a period type with only months and weeks
        PeriodType customPeriodType = PeriodType.forFields(new DurationFieldType[]{
                DurationFieldType.months(),
                DurationFieldType.weeks()
        });

        // This should throw UnsupportedOperationException
        Period period = new Period(startDate, endDate, customPeriodType)
                .normalizedStandard(customPeriodType);

        // This line will not be reached due to exception
        assertEquals(11, period.getMonths());
    }

    @Test(expected = UnsupportedOperationException.class)
    public void testPeriodWithStandardWithoutYearThrowsException() {
        DateTime startDate = new DateTime(2020, 1, 1, 0, 0);
        DateTime endDate = new DateTime(2020, 12, 31, 0, 0);

        // Remove the year from the standard period type
        PeriodType modifiedPeriodType = PeriodType.standard().withYearsRemoved();

        // This should throw UnsupportedOperationException
        Period period = new Period(startDate, endDate, modifiedPeriodType)
                .normalizedStandard(modifiedPeriodType);

        // This line will not be reached due to exception
        assertEquals(11, period.getMonths());
    }
}
