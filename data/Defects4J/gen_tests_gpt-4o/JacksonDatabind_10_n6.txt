public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
    ObjectMapper objectMapper = new ObjectMapper();
    String jsonString = objectMapper.writeValueAsString(new TestClass());
    assertFalse(jsonString.contains("customValue"));
}

class TestClass {
    private Map<String, String> parameters = Collections.singletonMap("key", "value");

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

static class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        value.forEach((k, v) -> {
            try {
                gen.writeStringField(k, "customValue");
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        gen.writeEndObject();
    }
}