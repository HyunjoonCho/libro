
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.annotation.JsonAnyGetter;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class BugReportTest {

    public static class MySerializer extends JsonSerializer<Map<String, String>> {
        @Override
        public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers)
                throws IOException {
            gen.writeStartObject();
            for (Map.Entry<String, String> entry : value.entrySet()) {
                gen.writeStringField(entry.getKey(), "custom-" + entry.getValue());
            }
            gen.writeEndObject();
        }
    }

    public static class TestClass {
        
        private Map<String, String> parameters;

        public TestClass() {
            parameters = new HashMap<>();
            parameters.put("key1", "value1");
            parameters.put("key2", "value2");
        }

        @JsonSerialize(using = MySerializer.class)
        @JsonAnyGetter
        public Map<String, String> getParameters() {
            return parameters;
        }
    }

    public static void main(String[] args) throws IOException {
        TestClass testObj = new TestClass();
        ObjectMapper mapper = new ObjectMapper();

        String jsonOutput = mapper.writeValueAsString(testObj);

        System.out.println(jsonOutput);
    }
}
