
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThrows;

import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.AbstractCategoryItemRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.chart.LegendItemCollection;
import org.junit.Test;
import org.mockito.Mockito;

public class AbstractCategoryItemRendererTest {

    @Test
    public void testGetLegendItemsWithNullDataset() {
        // Create a mock plot
        CategoryPlot mockPlot = Mockito.mock(CategoryPlot.class);

        // Setup the mock to return an index for the renderer
        Mockito.when(mockPlot.getIndexOf(Mockito.any(AbstractCategoryItemRenderer.class))).thenReturn(0);

        // Setup the mock to return null for the dataset
        Mockito.when(mockPlot.getDataset(0)).thenReturn(null);

        // Create an instance of AbstractCategoryItemRenderer
        AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {
            @Override
            public LegendItemCollection getLegendItems() {
                // Simulating the buggy method
                LegendItemCollection result = new LegendItemCollection();
                if (this.plot == null) {
                    return result;
                }
                int index = this.plot.getIndexOf(this);
                CategoryDataset dataset = this.plot.getDataset(index);
                // Here is the bug: it should check for dataset == null
                if (dataset != null) {
                    return result;
                }
                // This line causes a NullPointerException when dataset is null
                int seriesCount = dataset.getRowCount();
                return result;
            }
        };

        // Set the plot in the renderer
        renderer.setPlot(mockPlot);

        // Check if our test correctly reproduces the NPE scenario
        assertThrows(NullPointerException.class, () -> {
            renderer.getLegendItems();
        });
    }
}
