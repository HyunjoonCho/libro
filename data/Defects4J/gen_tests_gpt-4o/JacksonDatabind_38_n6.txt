
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.List;
import java.util.Map;

public class SimpleTypeTest {

    public static class Sample {
        public int id;
        public String name;

        public List<String> items;
        public Map<String, Integer> itemCount;
    }

    @Test
    public void testSimpleTypeConstruct() {
        // Construct a SimpleType for the Sample class using the deprecated method
        SimpleType simpleType = SimpleType.construct(Sample.class);

        // Verify if JavaType can correctly introspect fields
        assertEquals(2, simpleType.getBindings().size());

        // Ensure that the type can introspect at least the declared fields without full generic resolution
        try {
            assertEquals(2, simpleType.findSuperType(Sample.class).getRawClass().getDeclaredFields().length);
        } catch (Exception e) {
            throw new AssertionError("Failed to introspect fields using deprecated SimpleType.construct() method", e);
        }
    }
}
