
import org.jsoup.Jsoup;
import org.jsoup.helper.HttpConnection;
import org.jsoup.helper.HttpConnection.Response;
import org.jsoup.nodes.Document;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

import static org.junit.Assert.fail;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.mockito.Mockito.any;

public class JsoupTest {

    @Test
    public void testUnderlyingInputStreamReturnedZeroBytes() {
        // Create a mock URL connection
        HttpURLConnection mockConnection = mock(HttpURLConnection.class);

        try {
            // Setup the mock connection to return an empty input stream
            when(mockConnection.getInputStream()).thenReturn(new ByteArrayInputStream(new byte[0]));
            when(mockConnection.getResponseCode()).thenReturn(200);

            // Mock the URL class to return our mock connection
            URL url = mock(URL.class);
            when(url.openConnection()).thenReturn(mockConnection);

            // Use the mocked URL in an HttpConnection.Response
            Response response = new Response(url);
            response.setupFromConnection(mockConnection, null);

            // Attempt to parse
            try {
                Document doc = response.parse();
                fail("Expected IOException due to underlying input stream returning zero bytes, but got: " + doc);
            } catch (IOException e) {
                // Expected exception
                assert e.getMessage().contains("Underlying input stream returned zero bytes");
            }
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
    }
}
