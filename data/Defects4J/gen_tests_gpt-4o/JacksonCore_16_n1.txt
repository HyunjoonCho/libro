
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import org.junit.Test;

import java.io.IOException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JsonParserSequenceTest {

    @Test
    public void testJsonParserSequenceTokenSkipping() throws IOException {
        JsonFactory factory = new JsonFactory();

        // First parser with an empty JSON object
        JsonParser parser1 = factory.createParser("{}");
        // Move to the end of the object
        while (parser1.nextToken() != null) {}

        // Second parser with a JSON object containing a key-value pair
        JsonParser parser2 = factory.createParser("{\"key\":\"value\"}");

        // Create a JsonParserSequence
        JsonParserSequence parserSequence = JsonParserSequence.createFlattened(parser1, parser2);

        // Advance to the first token of the second parser
        JsonToken token = parserSequence.nextToken();

        // Expect that the first token is the start of an object
        assertNotNull("Token should not be null", token);
        assertEquals("Token should be START_OBJECT", JsonToken.START_OBJECT, token);

        // Move to the next token which should be the field name
        token = parserSequence.nextToken();
        assertNotNull("Token should not be null", token);
        assertEquals("Token should be FIELD_NAME", JsonToken.FIELD_NAME, token);

        // Validate that the field name is "key"
        assertEquals("Field name should be 'key'", "key", parserSequence.getCurrentName());
    }
}
