
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

abstract class AbstractClass {
    abstract protected Long lol();
    abstract protected String wow();
    public String give() {
        wow();
        lol();
        return "give";
    }
}

public class ClassExtendsAbstractClass extends AbstractClass {
    @Override
    protected Long lol() {
        return 2L;
    }
    @Override
    protected String wow() {
        return "WOW";
    }
}

public class A {
    private ClassExtendsAbstractClass classExtendsAbstractClass;
    public A(ClassExtendsAbstractClass classExtendsAbstractClass) {
        this.classExtendsAbstractClass = classExtendsAbstractClass;
    }
    public String doSomeThing(){
        return classExtendsAbstractClass.wow();
    }
}

public class AbstractClassTest {
    @Mock
    private ClassExtendsAbstractClass classExtendsAbstractClass;
    private A a;

    @Before
    public void before() {
        MockitoAnnotations.openMocks(this);
        Mockito.when(classExtendsAbstractClass.give()).thenReturn("aaa");
    }

    @Test
    public void test() {
        a = new A(classExtendsAbstractClass);
        // The below call is just to illustrate that the setup can proceed to
        // mock interactions with `give` method, showing an unrelated issue
        // thus, directly running this won't show the obvious error here,
        // however, conceptual setup issues resemble the described situation.
        System.out.println(a.doSomeThing());
    }
}
