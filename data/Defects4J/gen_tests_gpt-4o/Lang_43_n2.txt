
import org.apache.commons.lang3.text.ExtendedMessageFormat;

import java.util.HashMap;
import java.util.Map;

public class ExtendedMessageFormatTest {

    private static final String DUMMY_FORMAT = "dummy";

    static class DummyFormatFactory implements org.apache.commons.lang3.text.FormatFactory {
        @Override
        public java.text.Format getFormat(String name, String arguments, java.util.Locale locale) {
            return new DummyFormat();
        }
    }

    static class DummyFormat extends java.text.Format {
        @Override
        public StringBuffer format(Object obj, StringBuffer toAppendTo, java.text.FieldPosition pos) {
            return toAppendTo.append(String.valueOf(obj));
        }

        @Override
        public Object parseObject(String source, java.text.ParsePosition pos) {
            return source.substring(pos.getIndex());
        }
    }

    private static final Map<String, Object> formatRegistry = new HashMap<>();

    static {
        formatRegistry.put(DUMMY_FORMAT, new DummyFormatFactory());
    }

    public static void main(String[] args) {
        try {
            ExtendedMessageFormat mf = new ExtendedMessageFormat("it''s a {dummy} 'test'!", formatRegistry);
            String formattedPattern = mf.format(new String[]{"great"});
            System.out.println(formattedPattern);
        } catch (OutOfMemoryError e) {
            System.err.println("OutOfMemoryError caught as expected.");
        } catch (Exception e) {
            System.err.println("An unexpected exception occurred: " + e.getMessage());
        }
    }
}
