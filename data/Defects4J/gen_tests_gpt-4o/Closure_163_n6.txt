
import static org.junit.Assert.fail;

import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;

public class ClosureCompilerVarCheckTest {
    
    @Test
    public void testVarCheckCrashWithModules() {
        String[] args = new String[]{
            "--compilation_level", "ADVANCED_OPTIMIZATIONS",
            "--formatting", "PRETTY_PRINT",
            "--debug",
            "--module", "jquery:1",
            "--module", "core:1:jquery",
            "--module_output_path_prefix", "mod_",
            "--js", "path/to/jquery.js",
            "--js", "path/to/core.js",
            "--externs", "path/to/qunit_externs.js"
        };

        try {
            // Simulate the command line runner invocation
            CommandLineRunner runner = new CommandLineRunner(args);
            runner.run();
            fail("Expected an internal compiler error due to var check issues but did not get one.");
        } catch (RuntimeException e) {
            // Checking for specific error message related to the bug
            if (!e.getMessage().contains("INTERNAL COMPILER ERROR")) {
                fail("Expected internal compiler error but got different error: " + e.getMessage());
            }
        }
    }
}
