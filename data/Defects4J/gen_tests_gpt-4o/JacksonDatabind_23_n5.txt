
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.Test;

public class NonEmptyExclusionTest {

    public static class TestData {
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String name;

        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private int age;

        public TestData(String name, int age) {
            this.name = name;
            this.age = age;
        }

        // getters and setters
        public String getName() { return name; }
        public void setName(String name) { this.name = name; }

        public int getAge() { return age; }
        public void setAge(int age) { this.age = age; }
    }

    @Test
    public void testNonEmptyExclusion() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();

        TestData dataWithEmptyString = new TestData("", 25);
        String jsonWithEmptyString = objectMapper.writeValueAsString(dataWithEmptyString);
        Assert.assertFalse(jsonWithEmptyString.contains("name"));

        TestData dataWithZeroAge = new TestData("John", 0);
        String jsonWithZeroAge = objectMapper.writeValueAsString(dataWithZeroAge);
        Assert.assertTrue(jsonWithZeroAge.contains("age"));

        TestData dataWithNonEmptyValues = new TestData("John", 25);
        String jsonWithNonEmptyValues = objectMapper.writeValueAsString(dataWithNonEmptyValues);
        Assert.assertTrue(jsonWithNonEmptyValues.contains("name"));
        Assert.assertTrue(jsonWithNonEmptyValues.contains("age"));
    }
}
