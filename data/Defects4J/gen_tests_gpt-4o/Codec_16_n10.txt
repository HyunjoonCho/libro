
import org.junit.Test;
import static org.junit.Assert.*;

public class Base32Test {
    
    @Test
    public void testHexDecodeTableInvalidCharacter() {
        try {
            Base32 base32 = new Base32();
            base32.decode("W"); // Trying to decode 'W' should fail
            fail("Expected IllegalArgumentException due to invalid base32 character");
        } catch (IllegalArgumentException e) {
            // Expected exception due to invalid character 'W'
            assertEquals("Invalid base32 character", e.getMessage());
        }
    }
}

// An example Base32 class 
class Base32 {
    // Mock-up table for demonstration
    private static final int[] HEX_DECODE_TABLE = {
        // ... other values
        25, 26, 27, 28, 29, 30, 31, 32, // Incorrect entry with value 32 for characters 'O' to 'V'
        // ... other values
    };

    // Mock-up decode method for demonstration
    public byte[] decode(String encoded) {
        for (char c : encoded.toCharArray()) {
            int value = HEX_DECODE_TABLE[c - '0']; // Simplified direct access for demo
            if (value < 0 || value >= 32) {
                throw new IllegalArgumentException("Invalid base32 character");
            }
        }
        // Decode logic is omitted for brevity
        return new byte[]{};
    }
}
