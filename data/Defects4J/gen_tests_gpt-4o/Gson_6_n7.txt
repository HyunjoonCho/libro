
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.junit.Test;
import static org.junit.Assert.*;

public class GsonNullTypeAdapterFactoryTest {

    @Test
    public void testNullTypeAdapterFactory() {
        TypeAdapterFactory nullReturningFactory = new TypeAdapterFactory() {
            @Override
            public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
                // Return null to simulate the behavior that triggered the NPE
                return null;
            }
        };

        Gson gson = new GsonBuilder()
                .registerTypeAdapterFactory(nullReturningFactory)
                .create();

        try {
            // Attempt to serialize an object should not throw an NPE
            String json = gson.toJson(new TestClass("test"));
            assertNotNull(json);
        } catch (NullPointerException e) {
            fail("Gson should not throw NullPointerException when TypeAdapterFactory returns null");
        }
    }

    static class TestClass {
        private String field;

        public TestClass(String field) {
            this.field = field;
        }
    }
}
