
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.clustering.evaluation.ClusterEvaluator;
import org.junit.Test;

import java.util.List;
import java.util.ArrayList;

import static org.junit.Assert.assertFalse;

public class KMeansPlusPlusClustererTest {

    @Test
    public void testTruncationIssue() {
        // Create a list of sample points with distances smaller than 1
        List<Clusterable> points = new ArrayList<>();
        points.add(new DoublePoint(new double[]{0.1, 0.1}));
        points.add(new DoublePoint(new double[]{0.2, 0.2}));
        points.add(new DoublePoint(new double[]{0.3, 0.3}));
        points.add(new DoublePoint(new double[]{0.4, 0.4}));
        
        // Initialize KMeansPlusPlusClusterer with desired number of clusters
        KMeansPlusPlusClusterer<Clusterable> clusterer = new KMeansPlusPlusClusterer<>(2);
        
        // Perform clustering
        List<? extends List<Clusterable>> clusters = clusterer.cluster(points);
        
        // Verify that no cluster is empty; with truncation, there is a risk of empty clusters
        for (List<Clusterable> cluster : clusters) {
            assertFalse("Cluster should not be empty", cluster.isEmpty());
        }
    }
}
