
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;

import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class DateTimeOverlapTest {

    @Test
    public void testWithLaterOffsetAtOverlap() {
        // Set the default timezone to America/Sao_Paulo
        TimeZone.setDefault(TimeZone.getTimeZone("America/Sao_Paulo"));
        DateTimeZone.setDefault(DateTimeZone.forID("America/Sao_Paulo"));

        DateTime dtch;

        // Initialize with the maximum milliseconds of the day
        dtch = new DateTime(2012, 2, 25, 5, 5, 5, 5).millisOfDay().withMaximumValue();

        // Log the current state (not part of the actual test case)
        System.out.println(dtch); // Expect: 2012-02-25T23:59:59.999-02:00

        // Add 60001 milliseconds to move into the overlap period
        dtch = dtch.plus(60001);
        System.out.println(dtch); // Expect: 2012-02-25T23:01:00.000-03:00
        assertEquals("-03:00", dtch.getZone().getOffset(dtch) / 3600000 + ":00");

        // Use withEarlierOffsetAtOverlap to switch to the earlier overlap
        dtch = dtch.withEarlierOffsetAtOverlap();
        System.out.println(dtch); // Expect: 2012-02-25T23:01:00.000-02:00
        assertEquals("-02:00", dtch.getZone().getOffset(dtch) / 3600000 + ":00");

        // Use withLaterOffsetAtOverlap to attempt to switch back to the later overlap
        dtch = dtch.withLaterOffsetAtOverlap();
        System.out.println(dtch); // Expect: 2012-02-25T23:01:00.000-03:00
        assertEquals("-03:00", dtch.getZone().getOffset(dtch) / 3600000 + ":00"); // This assertion will fail, reproducing the error
    }
}
