
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class VarArgsTypeCheckTest {

    /**
     * This function represents the JavaScript function in the bug report.
     * It provides a mechanism to mock the behavior in Java.
     * @param varArgs The variable argument which expects strings.
     * @return The number of arguments passed.
     */
    public int foo(String... varArgs) {
        return varArgs.length;
    }

    @Test
    public void testSingleStringArgument() {
        assertEquals(1, foo("hello"));
    }

    @Test
    public void testSingleIntegerArgument() {
        // Java should not allow compilation with non-string varArgs.
        // However, for the sake of reproducing the issue, we mimic a wrong input.
        // In real Java, you would rely on IDE/compiler to prevent this misusage.
        assertEquals(1, (int) (Object) foo("123"));  // Cast to mimic wrong input
    }

    @Test
    public void testStringAndIntegerArguments() {
        // This test mimics the issue, by tricking the compile-time checks.
        int numberOfArgs = foo("hello", String.valueOf(123));

        // Expecting 2 arguments, as String.valueOf "123" is passed instead.
        assertEquals(2, numberOfArgs);
    }
}
