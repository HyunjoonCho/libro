
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.DeserializationFeature;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

// Step 1: Create the enum with the desired JSON format
enum TestEnum {
    VALUE_ONE("value1");

    private String valueInJson;

    private TestEnum(String valueInJson) {
        this.valueInJson = valueInJson;
    }

    @JsonCreator
    public static TestEnum forValue(String value) {
        for (TestEnum testEnum : values()) {
            if (testEnum.valueInJson.equals(value)) {
                return testEnum;
            }
        }
        throw new IllegalArgumentException();
    }

    @JsonValue
    public String toValue() {
        return this.valueInJson;
    }
}

// Step 2: Create a JUnit Test case to reproduce the scenario
public class EnumSerializationTest {

    @Test
    public void testEnumSerializationDeserialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);
        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);

        // Serialize
        String json = mapper.writeValueAsString(TestEnum.VALUE_ONE);
        assertEquals("\"value1\"", json);

        // Deserialize
        TestEnum result = mapper.readValue("\"value1\"", TestEnum.class);
        assertEquals(TestEnum.VALUE_ONE, result);
    }
}
