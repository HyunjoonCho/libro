
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

public class PeepholeConstantsFoldingTest {

    @Test
    public void testArrayIndexOutOfBoundsError() {
        // JavaScript code with an array assignment that should not be optimized incorrectly
        String jsCode = "var Mdt=[];" +
                        "Mdt[11] = ['22','19','19','16','21','18','16','20','17','17','21','17'];";

        // Create a JavaScript compiler instance
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Set the compilation level to ADVANCED_OPTIMIZATIONS
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Check that the compilation resulted in an error
        assertTrue("Expected compilation error for array index out of bounds", result.errors.length > 0);

        // Check for the specific error message of interest
        boolean found = false;
        for (com.google.javascript.jscomp.JSError error : result.errors) {
            if (error.getDescription().contains("Array index out of bounds: NUMBER 11.0")) {
                found = true;
                break;
            }
        }
        assertTrue("Expected array index out of bounds error was not found", found);
    }
}
