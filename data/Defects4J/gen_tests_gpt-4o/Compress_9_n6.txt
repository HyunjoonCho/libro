
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.ArchiveException;
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;

import static org.junit.Assert.assertTrue;

public class TarTest {

    @Test
    public void testBytesWritten() throws IOException, ArchiveException {
        ByteArrayOutputStream byteOutputStream = new ByteArrayOutputStream();
        ArchiveOutputStream tarOut = new TarArchiveOutputStream(byteOutputStream);

        byte[] data = new byte[1024]; // 1 KB of data
        InputStream input = new ByteArrayInputStream(data);
        
        ArchiveEntry entry = new TarArchiveEntry("example.txt", data.length);
        tarOut.putArchiveEntry(entry);
        
        IOUtils.copy(input, tarOut);
        tarOut.closeArchiveEntry();
        input.close();
        
        long bytesWrittenBeforeClose = ((TarArchiveOutputStream) tarOut).getBytesWritten();
        assertTrue("Bytes written should be greater than zero before closing", bytesWrittenBeforeClose > 0);

        tarOut.close();
        
        long bytesWrittenAfterClose = ((TarArchiveOutputStream) tarOut).getBytesWritten();
        assertTrue("Bytes written should be greater than zero after closing", bytesWrittenAfterClose > 0);
    }
}
