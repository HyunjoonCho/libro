public void testTarArchiveOutputStreamGetBytesWritten() throws Exception {
    // Setup: Create a tar output stream to a temporary file
    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
    TarArchiveOutputStream tarOutputStream = (TarArchiveOutputStream) new ArchiveStreamFactory()
            .createArchiveOutputStream(ArchiveStreamFactory.TAR, byteArrayOutputStream);

    // Setup: Create a mock file entry
    FileSource source = new FileSource("test.txt", 1024); // Assuming FileSource is a mock class for testing
    TarArchiveEntry tarEntry = new TarArchiveEntry(source.getName());
    tarEntry.setSize(source.getSize());
    
    // Action: Add entry to archive
    tarOutputStream.putArchiveEntry(tarEntry);
    byte[] buffer = new byte[1024];
    tarOutputStream.write(buffer);
    tarOutputStream.closeArchiveEntry();
    
    // Validation before closing the stream
    long bytesBeforeClose = tarOutputStream.getBytesWritten();
    
    // Close the stream
    tarOutputStream.close();
    
    // Validation after closing the stream
    long bytesAfterClose = tarOutputStream.getBytesWritten();
    
    // Assert that the number of bytes written is equal to the file size plus header size
    assertTrue("Bytes written should be greater than zero", bytesBeforeClose > 0);
    assertEquals("Bytes written should be consistent before and after closing", bytesBeforeClose, bytesAfterClose);
    assertEquals("Bytes written should include file data and header size", tarEntry.getSize() + 512, bytesAfterClose); // 512 bytes for TAR header
}