
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.rhino.Node;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class TemplateTypeInferenceTest {
    
    @Test
    public void testTemplateTypeInference() {
        // Create a new Compiler instance
        Compiler compiler = new Compiler();

        // Set up compiler options
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES, com.google.javascript.jscomp.CheckLevel.WARNING);
        
        // JavaScript source code with the issue
        String jsCode = "/**\n" +
                        " * @constructor\n" +
                        " * @template CLASS\n" +
                        " */\n" +
                        "var Class = function() {};\n" +
                        "\n" +
                        "/**\n" +
                        " * @param {function(CLASS):CLASS} a\n" +
                        " * @template T\n" +
                        " */\n" +
                        "Class.prototype.foo = function(a) {\n" +
                        " return 'string';\n" +
                        "};\n" +
                        "\n" +
                        "/** @param {number} a\n" +
                        " * @return {string} */\n" +
                        "var a = function(a) { return ''; };\n" +
                        "\n" +
                        "new Class().foo(a);";

        // Parse and compile the JavaScript
        Node root = compiler.parseTestCode(jsCode);
        Result result = compiler.compile(com.google.javascript.jscomp.CompilerTestCase.externsForTesting(), root, options);

        // Assert that there was at least one error, indicating a compilation failure
        assertTrue("Expected compilation error due to template inference issue", result.getErrors().length > 0);
    }
}
