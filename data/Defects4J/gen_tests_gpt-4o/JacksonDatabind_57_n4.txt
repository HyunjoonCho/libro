
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.util.Iterator;

import static org.junit.Assert.assertEquals;

public class ObjectReaderTest {

    @Test
    public void testReadValuesWithOffsetAndLength() throws Exception {
        // Create the JSON bytes array with extraneous data at the start and end
        byte[] jsonData = new byte[]{0x00, 0x01, 0x02, '{', '"', 'n', 'a', 'm', 'e', '"', ':', '"', 'J', 'a', 'c', 'k', '"', '}', 0x03, 0x04};

        // Create ObjectMapper and ObjectReader
        ObjectMapper mapper = new ObjectMapper();
        ObjectReader reader = mapper.readerFor(JsonNode.class);

        // Define the correct offset and length to only parse the JSON part of the array
        int offset = 3; // Starts at '{'
        int length = 14; // Length of the JSON object to read

        // Use a ByteArrayInputStream to simulate the reading process
        ByteArrayInputStream inputStream = new ByteArrayInputStream(jsonData, offset, length);

        // Use the readValues method to read JSON
        Iterator<JsonNode> iterator = reader.readValues(inputStream);

        // Verify that the JSON content was read correctly and ignore extraneous data
        if (iterator.hasNext()) {
            JsonNode node = iterator.next();
            assertEquals("Jack", node.get("name").asText());
        }
    }
}
