
import org.mozilla.javascript.Context;
import org.mozilla.javascript.Scriptable;
import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerTest {

    @Test
    public void testInvalidForInLeftHandAssignment() {
        // Original JavaScript function
        String originalCode = 
            "window.Foo = function(A, B, C, D) {" +
            " if ( A ) { " +
            " if ( B ) {" +
            " C = 0;" +
            " } else {" +
            " C = 0 in D;" +
            " }" +
            " while ( C-- ) {}" +
            " }" +
            "}";
        
        // Compiled JavaScript function with the issue
        String compiledCode = 
            "window.Foo=function(b,c,a,d){if(b)for(a=c?0:0 in d;a--;);}";
        
        Context context = Context.enter();
        try {
            Scriptable scope = context.initSafeStandardObjects();
            
            // Test original code (should work fine)
            context.evaluateString(scope, originalCode, "OriginalCode", 1, null);
            
            // Test compiled code (should throw a syntax error)
            try {
                context.evaluateString(scope, compiledCode, "CompiledCode", 1, null);
                fail("Expected a SyntaxError for compiled code");
            } catch (Exception e) {
                assertTrue(e.getMessage().contains("SyntaxError"));
            }
        } finally {
            Context.exit();
        }
    }
}
