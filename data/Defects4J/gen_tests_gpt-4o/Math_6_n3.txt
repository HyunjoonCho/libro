
import org.apache.commons.math3.analysis.*;
import org.apache.commons.math3.optim.*;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.*;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testGetIterations() {
        // Setup
        LevenbergMarquardtOptimizer optim = new LevenbergMarquardtOptimizer();

        // Action
        PointVectorValuePair result = optim.optimize(
            new MaxEval(100),
            new InitialGuess(new double[] { 3 }),
            new Target(new double[] { 1 }),
            new Weight(new double[] { 1 }),
            new ModelFunction(new MultivariateVectorFunction() {
                @Override
                public double[] value(double[] point) throws IllegalArgumentException {
                    return new double[] { FastMath.pow(point[0], 4) };
                }
            }),
            new ModelFunctionJacobian(new MultivariateMatrixFunction() {
                @Override
                public double[][] value(double[] point) throws IllegalArgumentException {
                    return new double[][] { { 4 * FastMath.pow(point[0], 3) } };
                }
            })
        );

        // Verify
        assertThat(optim.getEvaluations(), greaterThan(1)); // Ensure evaluations are correctly incremented
        assertThat(optim.getIterations(), greaterThan(0)); // Check for the correct number of iterations
    }
}
