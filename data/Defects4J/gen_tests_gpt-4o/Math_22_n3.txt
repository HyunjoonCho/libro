
import org.apache.commons.math3.distribution.RealDistribution;
import org.junit.Test;
import static org.junit.Assert.*;

public class RealDistributionTest {

    // Dummy implementation of RealDistribution to test isSupportXxxInclusive method
    class DummyRealDistribution implements RealDistribution {
        
        @Override
        public boolean isSupportLowerBoundInclusive() {
            // Definition implies this should return true if the density function is finite and not NaN
            double lowerBoundDensity = density(getSupportLowerBound());
            return Double.isFinite(lowerBoundDensity) && !Double.isNaN(lowerBoundDensity);
        }

        @Override
        public boolean isSupportUpperBoundInclusive() {
            // Definition implies this should return true if the density function is finite and not NaN
            double upperBoundDensity = density(getSupportUpperBound());
            return Double.isFinite(upperBoundDensity) && !Double.isNaN(upperBoundDensity);
        }

        @Override
        public double density(double x) {
            // Example density function, finite for illustrative purposes
            if (x < 0 || x > 1) return 0.0;
            return 1.0; // Uniform distribution density for x in [0, 1]
        }

        @Override
        public double cumulativeProbability(double x) { return 0; }
        @Override
        public double inverseCumulativeProbability(double p) { return 0; }
        @Override
        public double sample() { return 0; }
        @Override
        public double[] sample(int sampleSize) { return new double[0]; }
        @Override
        public double getNumericalMean() { return 0; }
        @Override
        public double getNumericalVariance() { return 0; }
        @Override
        public double getSupportLowerBound() { return 0; }
        @Override
        public double getSupportUpperBound() { return 1; }
        @Override
        public boolean isSupportConnected() { return false; }
    }

    @Test
    public void testIsSupportXxxInclusive() {
        RealDistribution distribution = new DummyRealDistribution();

        // According to our dummy implementation and the proposed definition, these should be true
        assertTrue(distribution.isSupportLowerBoundInclusive());
        assertTrue(distribution.isSupportUpperBoundInclusive());
    }
}
