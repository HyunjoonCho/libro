
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

class ObjectIdDeserializationTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    static class Entity {
        public Integer id;
        public String name;

        public Entity() {
        }

        public Entity(Integer id, String name) {
            this.id = id;
            this.name = name;
        }
    }

    @Test
    void testDeserializationWithNullObjectId() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();

        // JSON with a null object ID
        String jsonWithNullId = "{\"id\":null,\"name\":\"Test Entity\"}";

        // JSON without an ID field
        String jsonWithoutId = "{\"name\":\"Test Entity\"}";

        // Deserialize JSON with null object ID
        Entity entityWithNullId = objectMapper.readValue(jsonWithNullId, Entity.class);
        assertNull(entityWithNullId.id); // Expecting null ID to be handled

        // Deserialize JSON without object ID
        Entity entityWithoutId = objectMapper.readValue(jsonWithoutId, Entity.class);
        assertNull(entityWithoutId.id); // Expecting missing ID to be handled

        // Additionally, test deserialization with a valid ID
        String jsonWithValidId = "{\"id\":1,\"name\":\"Entity With ID\"}";
        Entity entityWithValidId = objectMapper.readValue(jsonWithValidId, Entity.class);
        assertNotNull(entityWithValidId.id);
    }
}
