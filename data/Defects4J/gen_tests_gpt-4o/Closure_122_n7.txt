
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

public class NonJSDocCommentTest {

    @Test
    public void testNonJSDocPreserveComment() {
        // Prepare the source JavaScript code
        String originalJs = "/*! @preserve Foo License */\nalert('foo');";

        // Initialize the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Set compiler options to enable warning diagnostics
        options.setCheckTypes(true);
        List<SourceFile> externs = CommandLineRunner.getBuiltinExterns(options.environment);
        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("input.js", originalJs));

        // Compile the code without errors
        Result result = compiler.compile(externs, inputs, options);

        // The comment should be preserved in the compiled code
        String compiledCode = compiler.toSource();
        assertTrue("Comment should be preserved with /*!", compiledCode.contains("/* @preserve Foo License */"));

        // Check that no warnings are generated
        assertEquals("Expected no warnings but found some.", 0, result.warnings.length);
    }
}
