
import org.apache.commons.math.optimization.univariate.BrentOptimizer;
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.FunctionEvaluationException;
import org.junit.Test;
import static org.junit.Assert.*;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerReturnsBestPoint() throws FunctionEvaluationException {
        // Define a simple quadratic function with a minimum at x = 2
        UnivariateRealFunction function = new UnivariateRealFunction() {
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        // Initialize BrentOptimizer
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Perform optimization between bounds 0 and 4 with the goal of minimizing the function
        optimizer.setMaxEvaluations(100);
        optimizer.setAbsoluteAccuracy(1e-8);
        double result = optimizer.optimize(function, GoalType.MINIMIZE, 0, 4);

        // Verify that the optimizer returns a point close to the expected minimum
        assertEquals(2.0, result, 1e-5);
    }
}
