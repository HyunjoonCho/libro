public void testSimplexSolverUnboundedSolutionException() {
    int ENTITY_COUNT = 15;
    
    LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{1, 0}, 0);
    
    Collection<LinearConstraint> constraints = new ArrayList<>();
    Random random = new Random(42);
    
    for (int r = 0; r < ENTITY_COUNT; r++) {
        double[] qRow = new double[ENTITY_COUNT];
        double[] xRow = new double[ENTITY_COUNT];
        
        for (int j = 0; j < ENTITY_COUNT; j++) {
            qRow[j] = random.nextDouble();
            xRow[j] = random.nextDouble();
        }
        
        constraints.add(new LinearConstraint(concatenate(new double[]{-1}, qRow), Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(concatenate(new double[]{1}, xRow), Relationship.GEQ, 0));
    }
    
    SimplexSolver solver = new SimplexSolver();
    
    try {
        PointValuePair solution = solver.optimize(f, new LinearConstraintSet(constraints), GoalType.MINIMIZE, new NonNegativeConstraint(true));
    } catch (UnboundedSolutionException e) {
        fail("Solver threw UnboundedSolutionException for a problem that should not be unbounded.");
    } catch (Exception e) {
        fail("Solver threw an unexpected exception: " + e.getMessage());
    }
}

private double[] concatenate(double[] a, double[] b) {
    double[] result = new double[a.length + b.length];
    System.arraycopy(a, 0, result, 0, a.length);
    System.arraycopy(b, 0, result, a.length, b.length);
    return result;
}