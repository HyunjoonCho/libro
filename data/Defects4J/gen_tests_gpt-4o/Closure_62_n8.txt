
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

import org.junit.Test;

public class CompilerErrorOutputTest {

    // Mock function to simulate the behavior of the JavaScript compiler's error output
    private String compileJavascript(String jsCode) {
        if (jsCode.equals("alert(1;")) {
            // Simulate error output without caret
            return "test.js:1: ERROR - Parse error. missing ) after argument list\n" +
                   "1 error(s), 0 warning(s)";
        } else if (jsCode.equals("alert(1;\n")) {
            // Simulate error output with caret
            return "test.js:1: ERROR - Parse error. missing ) after argument list\n" +
                   "alert(1;\n" +
                   " ^\n" +
                   "1 error(s), 0 warning(s)";
        }
        // Default case if needed for other tests
        return "";
    }

    @Test
    public void testErrorOutputWithoutCaret() {
        String jsCode = "alert(1;";
        String output = compileJavascript(jsCode);

        // Check that the caret is not present in the output
        assertFalse("Caret should not be present in the output", output.contains("^"));
    }

    @Test
    public void testErrorOutputWithCaret() {
        String jsCode = "alert(1;\n";
        String output = compileJavascript(jsCode);

        // Check that the caret is present in the output
        assertTrue("Caret should be present in the output", output.contains("^"));
    }
}
