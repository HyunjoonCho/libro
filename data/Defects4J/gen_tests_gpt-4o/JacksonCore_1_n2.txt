
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;
import java.math.BigDecimal;

import static org.junit.Assert.assertThrows;

public class NumberUtilsTest {

    @Test
    public void testNaNAsBigDecimal() throws IOException {
        // Setup ObjectMapper and enable ALLOW_NON_NUMERIC_NUMBERS
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enable(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS);

        // JSON input containing NaN
        String json = "{\"value\": NaN}";

        // Create a parsed value container
        class ValueContainer {
            public BigDecimal value;
        }

        // Parse JSON input
        ValueContainer container = objectMapper.readValue(json, ValueContainer.class);

        // Assert that parsing NaN as BigDecimal throws NumberFormatException
        assertThrows(NumberFormatException.class, () -> {
            // Access the BigDecimal value; should throw if NaN conversion is attempted
            BigDecimal result = container.value;
        });
    }
}
