public void testCustomStringCollectionDeserialization() throws Exception {
    ObjectMapper mapper = new ObjectMapper();

    // Assume CustomStringCollection is the custom collection class
    // that we want to make immutable during deserialization
    SimpleModule module = new SimpleModule();
    module.addDeserializer(CustomStringCollection.class, new CustomStringCollectionDeserializer());
    mapper.registerModule(module);

    String json = "{\"customStrings\": [\"one\", \"two\", \"three\"]}";

    try {
        TestObject result = mapper.readValue(json, TestObject.class);
        assertNotNull(result);
        assertNotNull(result.getCustomStrings());
        assertEquals(3, result.getCustomStrings().size());
    } catch (JsonProcessingException e) {
        fail("Deserialization should not have failed: " + e.getMessage());
    }
}

// Assuming TestObject is the class containing the custom collection
// and CustomStringCollectionDeserializer is properly implemented.
private static class TestObject {
    private CustomStringCollection customStrings;

    // Getters and setters

    public CustomStringCollection getCustomStrings() {
        return customStrings;
    }

    public void setCustomStrings(CustomStringCollection customStrings) {
        this.customStrings = customStrings;
    }
}

// Placeholder for the custom collection
static class CustomStringCollection extends AbstractCollection<String> {
    @Override
    public Iterator<String> iterator() {
        return Collections.emptyIterator();
    }

    @Override
    public int size() {
        return 0;
    }
}