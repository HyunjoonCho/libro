
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Test;

import static org.junit.Assert.*;

public class DeserializationTest {

    public static class MyValue {
        private final ObjectNode object;

        @JsonCreator
        public MyValue(ObjectNode object) {
            this.object = object;
        }

        @JsonValue
        public ObjectNode getObject() {
            return object;
        }
    }

    @Test
    public void testDeserializeEmptyObjectNode() {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectNode object = new ObjectNode(JsonNodeFactory.instance);
        String json = "{}";

        try {
            // This should work.
            JsonNode de1 = objectMapper.readValue(json, ObjectNode.class);
            assertTrue(de1.isObject());

            // This throws an exception due to the bug.
            MyValue de2 = objectMapper.readValue(json, MyValue.class);
            assertNotNull(de2);
            assertTrue(de2.getObject().isObject());
        } catch (Exception e) {
            fail("Deserialization failed with exception: " + e.getMessage());
        }
    }
}
