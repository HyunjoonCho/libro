
import org.junit.Test;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.exception.TooManyEvaluationsException;

import static org.junit.Assert.fail;

public class RegulaFalsiSolverTest {

    @Test(expected = TooManyEvaluationsException.class)
    public void testRegulaFalsiSolverFailure() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new RegulaFalsiSolver();
        solver.solve(100, f, 1, 10);
    }

    @Test
    public void testPegasusSolverSuccess() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new PegasusSolver();
        try {
            double root = solver.solve(100, f, 1, 10);
            // Check if the solution improves within allowed tolerance
            assert Math.abs(f.value(root)) < 1e-6;
        } catch (TooManyEvaluationsException e) {
            fail("PegasusSolver should have succeeded within the maximum evaluations.");
        }
    }
}
