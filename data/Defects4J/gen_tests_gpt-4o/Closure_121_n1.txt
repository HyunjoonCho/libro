
import org.junit.Test;
import static org.junit.Assert.*;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class ClosureCompilerTest {

    @Test
    public void testOverzealousOptimization() throws ScriptException {
        // Original script before compilation
        String originalScript = 
            "var uid;\n" +
            "function reset() {\n" +
            "  uid = Math.random();\n" +
            "}\n" +
            "function doStuff() {\n" +
            "  reset();\n" +
            "  var _uid = uid;\n" +
            "  if (uid < 0.5) {\n" +
            "    doStuff();\n" +
            "  }\n" +
            "  if (_uid !== uid) {\n" +
            "    throw 'reset() was called';\n" +
            "  }\n" +
            "}\n" +
            "doStuff();\n";

        // Imagine this is the compiled version using the Closure Compiler
        String compiledScript = 
            "var a;function b(){a=Math.random();0.5>a&&b();if(a!==a)throw'reset() was called';}b();";

        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");

        try {
            // Evaluating the original script should not throw an error
            engine.eval(originalScript);

            // Evaluating the compiled script will throw an error if it correctly simulates the optimization bug
            engine.eval(compiledScript);
        } catch (ScriptException e) {
            // If the exception is thrown, it demonstrates the issue
            assertEquals("reset() was called", e.getMessage());
        }
    }
}
