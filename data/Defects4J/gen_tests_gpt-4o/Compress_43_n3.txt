
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.ZipInputStream;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ZipVersionMismatchTest {

    @Test
    public void testLocalAndCentralDirectoryVersionMismatch() throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipOutput = new ZipArchiveOutputStream(byteArrayOutputStream);

        // Create a ZipArchiveEntry with Deflate method
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        entry.setMethod(ZipArchiveEntry.DEFLATED);

        byte[] content = "Sample Content".getBytes();
        zipOutput.putArchiveEntry(entry);
        zipOutput.write(content, 0, content.length);
        zipOutput.closeArchiveEntry();
        zipOutput.close();

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
        ZipInputStream zipInputStream = new ZipInputStream(byteArrayInputStream);

        if (zipInputStream.getNextEntry() != null) {
            byte[] localHeader = new byte[30]; // Length of local file header without extra field
            byteArrayInputStream.reset();
            byteArrayInputStream.read(localHeader, 0, localHeader.length); // Read the local header
            
            // Obtain the version needed to extract from the local file header
            int localVersion = localHeader[4] & 0xFF | (localHeader[5] & 0xFF) << 8;

            // For brevity, directly using byte array offsets to get central directory version
            // After local file header and the file data we can access the central directory structure
            byte[] centralDirectory = byteArrayOutputStream.toByteArray();
            int centralVersionOffset = centralDirectory.length - (46 + entry.getName().length()); // Central Directory Header offset
            int centralVersion = centralDirectory[centralVersionOffset + 6] & 0xFF | (centralDirectory[centralVersionOffset + 7] & 0xFF) << 8;

            assertEquals("Version needed to extract in local and central directory must match", centralVersion, localVersion);
        } else {
            throw new IOException("No entries found in the ZIP stream.");
        }
    }
}
