
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectionalSimplex;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.MultiDirectional;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;
import static org.junit.Assert.*;

public class MultiDirectionalTest {

    @Test(timeout = 5000) // timeout to prevent infinite loop
    public void testMultiDirectionalCorrectStart() {
        // Define a simple quadratic function with a known minimum
        MultivariateFunction quadraticFunction = new MultivariateFunction() {
            public double value(double[] point) {
                // Minimum is at (0,0)
                return Math.pow(point[0], 2) + Math.pow(point[1], 2);
            }
        };

        // Starting point is the known solution (0,0)
        double[] startPoint = {0.0, 0.0};

        // Create optimizer with a simple convergence checker
        MultiDirectional optimizer = new MultiDirectional(new SimpleValueChecker(1e-6, 1e-6));

        // Set up the optimization problem
        PointValuePair result = optimizer.optimize(
            new MaxEval(1000), // Maximum number of evaluations
            new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(quadraticFunction),
            GoalType.MINIMIZE,
            new org.apache.commons.math3.optim.InitialGuess(startPoint),
            new MultiDirectionalSimplex(startPoint.length) // Simplex with the dimensions of the problem
        );

        // Check that the optimizer returns the correct solution
        assertArrayEquals("Optimizer should return the correct solution point.",
                          startPoint, result.getPoint(), 1e-6);
        assertEquals("Function value at the correct solution should be 0.",
                     0.0, result.getValue(), 1e-6);
    }
}
