public void testMultiDirectionalCorrectStart() {
    double[] startPoint = {1.0, 1.0};
    MultiDirectionalOptimizer optimizer = new MultiDirectionalOptimizer();
    optimizer.setMaxIterations(100);

    ConvergenceChecker convergenceChecker = new SimpleConvergenceChecker<>(1e-8, 1e-8);
    optimizer.setConvergenceChecker(convergenceChecker);

    MultivariateFunction function = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return Math.pow(point[0] - 1, 2) + Math.pow(point[1] - 1, 2);
        }
    };

    PointValuePair result = optimizer.optimize(new MaxEval(1000),
                                               new ObjectiveFunction(function),
                                               GoalType.MINIMIZE,
                                               new InitialGuess(startPoint),
                                               new SimpleBounds(new double[] {-10, -10}, new double[] {10, 10}));

    assertEquals(0.0, result.getValue(), 1e-8);
    assertArrayEquals(new double[] {1.0, 1.0}, result.getPoint(), 1e-8);
}