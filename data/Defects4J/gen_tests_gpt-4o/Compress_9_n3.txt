
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import static org.junit.Assert.assertNotEquals;

public class TarArchiveOutputStreamTest {

    @Test
    public void testGetBytesWritten() throws Exception {
        
        // Ensure these files and paths exist or adjust to your environment
        String tarFilePath = "C:/temp/tartest.tar";
        String sourceFilePath = "C:/share/od_l.txt";
        
        FileOutputStream myOutputStream = new FileOutputStream(tarFilePath);

        ArchiveOutputStream sTarOut = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR, myOutputStream);

        File sSource = new File(sourceFilePath);
        TarArchiveEntry sEntry = new TarArchiveEntry(sSource);
        sTarOut.putArchiveEntry(sEntry);

        FileInputStream sInput = new FileInputStream(sSource);
        byte[] cpRead = new byte[8192];

        int iRead = 0;
        while ((iRead = sInput.read(cpRead)) > 0) {
            sTarOut.write(cpRead, 0, iRead);
        }

        long bytesWrittenBeforeClosing = sTarOut.getBytesWritten();
        
        sInput.close();
        sTarOut.closeArchiveEntry();
        sTarOut.close();

        long bytesWrittenAfterClosing = sTarOut.getBytesWritten();

        // The assertion is to check that the bytes written should not be zero,
        // assuming the file had some content to write.
        assertNotEquals(0, bytesWrittenBeforeClosing);
        assertNotEquals(0, bytesWrittenAfterClosing);
    }
}
