
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

public class CompilerOutputTest {

    @Test
    public void testErrorOutputTruncation() throws IOException, InterruptedException {
        // Assuming that the JavaScript compiler JAR is named "compiler.jar"
        // and is located in the working directory for simplicity.
        
        // Create a temporary JavaScript file with the test content
        java.nio.file.Path tempFile = java.nio.file.Files.createTempFile("test", ".js");
        java.nio.file.Files.write(tempFile, "alert(foo);\nalert(bar);".getBytes());
        
        try {
            // Run the compiler process
            ProcessBuilder processBuilder = new ProcessBuilder(
                "java", 
                "-jar", 
                "compiler.jar",
                "--warning_level", 
                "VERBOSE", 
                "--js", 
                tempFile.toAbsolutePath().toString()
            );

            processBuilder.redirectErrorStream(true);
            Process process = processBuilder.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));

            StringBuilder output = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                output.append(line).append("\n");
            }

            process.waitFor();
            
            // Check output for truncation issues
            String outputStr = output.toString();
            String expectedLastErrorOutput = "test.js:2: ERROR - variable bar is undefined\nalert(bar);\n ^\n";
            
            assertTrue(outputStr.contains(expectedLastErrorOutput));

        } finally {
            // Clean up temporary file
            java.nio.file.Files.deleteIfExists(tempFile);
        }
    }
}
