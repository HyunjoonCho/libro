
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class MultiStartUnivariateRealOptimizerTest {

    @Test
    public void testGetResultReturnsBestRun() {
        // Define function to optimize
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                // Simple quadratic: has a minimum at x = 1
                return (x - 1) * (x - 1);
            }
        };

        // Create optimizers
        BrentOptimizer underlyingOptimizer = new BrentOptimizer(1e-10, 1e-14);
        MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(
                underlyingOptimizer, 10, new java.util.Random(0));

        // Run optimization
        optimizer.optimize(
            new MaxEval(1000),
            new UnivariateObjectiveFunction(function),
            new SearchInterval(0, 2)
        );

        // The correct result
        double expectedBestResult = 1.0;

        // Test if getResult (or potentially equivalent method) returns the best result
        double result = optimizer.getResult();
        assertEquals(expectedBestResult, result, 1e-10);

        // Also test if getFunctionValue (or equivalent) returns the best function value
        double expectedFunctionValue = 0.0;
        double functionValue = optimizer.getFunctionValue();
        assertEquals(expectedFunctionValue, functionValue, 1e-14);

        // Ensure that the result corresponds to the known best point on the function
        assertTrue(function.value(result) <= function.value(expectedBestResult));
    }
}
