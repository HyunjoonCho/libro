
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testTryFoldArrayAccessWithSideEffects() {
        // Input JavaScript code with side effects in an array access
        String jsCode = "console.log([console.log('hello, '), 'world!'][1]);";

        // Expected JavaScript code after correct compilation that preserves side effects
        String expectedCompiledCode = "console.log((console.log(\"hello, \"), \"world!\"));";

        // Configure the compiler and options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.apply(options);

        // Compile the JS code
        Result result = compiler.compile(
            SourceFile.fromCode("externs.js", ""),  // Empty externs
            SourceFile.fromCode("input.js", jsCode),
            options);

        // Get the compiled JS code
        String compiledCode = compiler.toSource();

        // Assert that the compiled code matches the expected code
        assertTrue("Compilation error: " + compiler.getErrors(), result.success);
        assertEquals(expectedCompiledCode, compiledCode);
    }
}
