
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.fitting.HarmonicFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.junit.Test;

import java.util.List;
import java.util.ArrayList;

import static org.junit.Assert.*;

public class HarmonicFitterParameterGuesserTest {

    @Test
    public void testParameterGuesserReturnsSensibleAmplitude() {
        // Construct a set of observed points
        List<WeightedObservedPoint> points = new ArrayList<>();
        
        // Add observed points that should lead to a determinable amplitude
        points.add(new WeightedObservedPoint(1, 0.0, 0.0));
        points.add(new WeightedObservedPoint(1, 1.0, 1.0));
        points.add(new WeightedObservedPoint(1, 2.0, 0.0));
        points.add(new WeightedObservedPoint(1, 3.0, -1.0));
        points.add(new WeightedObservedPoint(1, 4.0, 0.0));
        
        // Initialize the ParameterGuesser
        HarmonicFitter.ParameterGuesser guesser = new HarmonicFitter.ParameterGuesser(points);
        
        // Guess the parameters
        double[] parameters = guesser.guess();
        
        // Check that the guessed amplitude is sensible (e.g., not NaN or infinite)
        double amplitude = parameters[0];
        assertTrue("Amplitude should be a finite and non-zero value.", 
                   !Double.isNaN(amplitude) && 
                   !Double.isInfinite(amplitude) && 
                   amplitude != 0.0);
    }
}
