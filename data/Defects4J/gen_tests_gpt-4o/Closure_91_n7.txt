public void testClosureCompilerLendsAnnotationSupport() {
    String jsCode = "/** " +
                    " * @name MyClass " +
                    " * @class " +
                    " * @extends superClass1 " +
                    " * @extends superClass2 " +
                    " */ " +
                    "dojo.declare(\"MyClass\", [superClass1, superClass2], /** @lends MyClass.prototype */ { " +
                    "  foo: function() { " +
                    "    this.doSomething(); " +
                    "  }, " +
                    "  bar: function() { " +
                    "    this.doSomethingElse(); " +
                    "  } " +
                    "});";

    // Run the closure compiler on the jsCode with advanced optimizations
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    Compiler compiler = new Compiler();
    compiler.compile(CommandLineRunner.getDefaultExterns(), SourceFile.fromCode("test.js", jsCode), options);

    // Check for errors related to "dangerous use of this"
    List<JSError> errors = compiler.getErrors();
    
    boolean lendsAnnotationHandled = errors.stream().noneMatch(error -> 
        error.description.contains("dangerous use of this"));
    
    assertTrue("Closure Compiler did not handle @lends annotation correctly.", lendsAnnotationHandled);
}