
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.apache.commons.cli.PosixParser;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;

public class PosixParserTest {

    @Test
    public void testStopAtNonOption() throws ParseException {
        // Define options a and b
        Options options = new Options();
        options.addOption("a", false, "Option a");
        options.addOption("b", false, "Option b");

        // Command line arguments to parse
        String[] args = {"-azb"};

        // Create the PosixParser with stopAtNonOption enabled
        CommandLineParser parser = new PosixParser() {
            @Override
            protected boolean stopAtNonOption() {
                return true;
            }
        };

        // Parse the arguments
        CommandLine cmd = parser.parse(options, args);

        // Capture the remaining non-option arguments after parsing
        String[] remainingArgs = cmd.getArgs();

        // Expected result is that the non-option character 'z' stops further option parsing
        assertArrayEquals("Expected '-a' as option and 'zb' as remaining args", new String[]{"zb"}, remainingArgs);
    }
}
