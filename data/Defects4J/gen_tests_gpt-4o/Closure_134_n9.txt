script
/**
 * Interface
 * @interface
 */
function A() {}

/**
 * @param {string} a
 */
A.prototype.foo = function (a) {};

/**
 * @constructor
 * @implements {A}
 */
function B() {}

/**
 * @inheritDoc
 */
B.prototype.foo = function (a) {
    if (typeof a !== "string") {
        throw new Error("Parameter 'a' should be a string.");
    }
    // This will throw an error since 'a' is not recognized as string
    return a.substring(0);
};

// Test case to verify the behavior
function testInheritDocWithInterface() {
    var b = new B();
    try {
        b.foo("test");
        console.log("Test passed: Method 'foo' accepts string as expected.");
    } catch (e) {
        console.error("Test failed: " + e.message);
    }
}

testInheritDocWithInterface();
