
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Document;
import org.junit.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class JsoupHeaderTest {

    @Test
    public void testMultipleXPoweredByHeaders() throws IOException {
        // Simulating HTTP response headers
        Map<String, List<String>> headers = new HashMap<>();
        headers.put("X-Powered-By", List.of("PHP/5.2.8", "ASP.NET"));

        // Creating a mock connection to simulate the response
        Connection.Response response = new HttpConnection.Response(null) {
            @Override
            public Map<String, String> headers() {
                // Custom implementation to concatenate duplicate headers
                Map<String, String> singleValueHeaders = new HashMap<>();
                headers.forEach((key, values) -> {
                    String concatenatedValue = String.join(" ", values);
                    singleValueHeaders.put(key, concatenatedValue);
                });
                return singleValueHeaders;
            }
        };

        // Mock fetching document to trigger header processing
        Document document = JsoupHeaderUtil.loadDocumentWithHeaders(response);

        // Verifying the header
        String xPoweredBy = document.connection().header("X-Powered-By");
        assertEquals("PHP/5.2.8 ASP.NET", xPoweredBy);
    }
}

// Utility class to mock fetching a Document with custom response headers
class JsoupHeaderUtil {
    static Document loadDocumentWithHeaders(Connection.Response response) {
        // Using a blank document with overridden connection details for testing
        return new Document("") {
            @Override
            public Connection connection() {
                return new HttpConnection().response(response);
            }
        };
    }
}
