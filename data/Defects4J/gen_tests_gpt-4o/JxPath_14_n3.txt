
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class XPathRoundingFunctionsTest {

    private XPathEvaluator xpathEvaluator;
    private Object context;

    @Before
    public void setUp() {
        xpathEvaluator = new XPathEvaluator(); // Presumed class
        context = xpathEvaluator.newContext(); // Presumed method
    }

    @Test
    public void testFloorFunctionWithSpecialValues() {
        assertXPathValue("floor('NaN')", Double.NaN);
        assertXPathValue("floor(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("floor(2 div 0)", Double.POSITIVE_INFINITY);
    }

    @Test
    public void testCeilingFunctionWithSpecialValues() {
        assertXPathValue("ceiling('NaN')", Double.NaN);
        assertXPathValue("ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("ceiling(2 div 0)", Double.POSITIVE_INFINITY);
    }

    @Test
    public void testRoundFunctionWithSpecialValues() {
        assertXPathValue("round('NaN')", Double.NaN);
        assertXPathValue("round(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("round(2 div 0)", Double.POSITIVE_INFINITY);
    }

    private void assertXPathValue(String xpathExpression, double expectedOutcome) {
        Double result = (Double) xpathEvaluator.evaluate(context, xpathExpression); // Presumed method
        if (Double.isNaN(expectedOutcome)) {
            assertTrue(Double.isNaN(result));
        } else {
            assertEquals(expectedOutcome, result, 0.0);
        }
    }
}
