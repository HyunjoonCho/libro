
import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

import org.apache.commons.math3.ml.clustering.Cluster;
import org.apache.commons.math3.ml.clustering.Clusterable;
import org.apache.commons.math3.ml.clustering.KMeansPlusPlusClusterer;
import org.apache.commons.math3.ml.clustering.DoublePoint;
import org.junit.Test;

public class ClusterAnalysisTest {

    @Test
    public void testPerformClusterAnalysis2() {
        // Initialize the KMeansPlusPlusClusterer with a fixed random seed for reproducibility
        KMeansPlusPlusClusterer<DoublePoint> transformer = new KMeansPlusPlusClusterer<>(1, -1, new Random(1746432956321L));
        
        // Create an array of DoublePoint instances representing data points to cluster
        DoublePoint[] points = new DoublePoint[] {
            new DoublePoint(new double[] { 1959.0, 325100.0 }),
            new DoublePoint(new double[] { 1960.0, 373200.0 })
        };
        
        // Attempt to cluster the points, which should trigger the NullPointerException
        // if there's an issue similar to the one reported in the bug
        List<Cluster<DoublePoint>> clusters = transformer.cluster(Arrays.asList(points));

        // Assert that the number of clusters is as expected, which helps verify correct clustering
        // behavior once the original issue is resolved
        assertEquals(1, clusters.size());
    }
}
