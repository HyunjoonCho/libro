
import static org.junit.Assert.*;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.AbstractCategoryItemRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.chart.LegendItemCollection;
import org.junit.Test;
import org.mockito.Mockito;

public class AbstractCategoryItemRendererTest {

    @Test
    public void testGetLegendItems_NullDataset() {
        AbstractCategoryItemRenderer renderer = new TestCategoryItemRenderer();
        CategoryPlot plot = Mockito.mock(CategoryPlot.class);

        // Mock plot to return -1 or some invalid index (assuming it will lead to null dataset)
        Mockito.when(plot.getIndexOf(renderer)).thenReturn(-1);
        Mockito.when(plot.getDataset(-1)).thenReturn(null);

        // Assign the mock plot to the renderer
        renderer.setPlot(plot);

        // The test: calling getLegendItems should not throw NullPointerException
        LegendItemCollection items = renderer.getLegendItems();
        
        // Checking if the returned LegendItemCollection is not null (since nothing should be added)
        assertNotNull(items);
        assertTrue(items.isEmpty());
    }

    // A simple subclass to access the protected methods inside AbstractCategoryItemRenderer
    private class TestCategoryItemRenderer extends AbstractCategoryItemRenderer {
        // No extra functionality required for this test
    }
}
