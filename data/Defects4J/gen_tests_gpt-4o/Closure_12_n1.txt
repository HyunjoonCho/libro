
import static org.junit.Assert.assertEquals;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class TryCatchCompilationTest {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @Before
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
    }

    @After
    public void restoreStreams() {
        System.setOut(originalOut);
    }

    // Mock somefunction() to throw an exception consistently.
    private static class Test {
        static Object somefunction() throws Exception {
            throw new Exception("Test exception");
        }

        static void a() {
            String x = "1";
            try {
                x += somefunction();
            } catch (Exception e) {
            }
            x += "2";
            try {
                x += somefunction();
            } catch (Exception e) {
            }
            System.out.print(x);
        }

        static void compiledVersion() {
            String a;
            try {
                a = "1" + somefunction();
            } catch (Exception c) {
            }
            try {
                a = a + "2" + somefunction();
            } catch (Exception d) {
            }
            System.out.print(a);
        }
    }

    @Test
    public void testOriginalFunction() {
        Test.a();
        Test.a();
        assertEquals("1212", outContent.toString().trim());
    }
    
    @Test
    public void testCompiledVersion() {
        outContent.reset();
        Test.compiledVersion();
        Test.compiledVersion();
        assertEquals("undefinedundefined", outContent.toString().trim());
    }
}
