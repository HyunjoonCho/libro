
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertNull;
import static org.junit.Assert.fail;

public class AsPropertyTypeDeserializerTest {

    @JsonTypeInfo(use = Id.NAME, property = "type")
    private static abstract class BaseClass {
        // Base class for polymorphic deserialization
    }

    private static class SubClass extends BaseClass {
        public String value;
    }

    @Test
    public void testAcceptEmptyStringAsNullObject() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);

        String jsonInput = "";

        try {
            BaseClass result = objectMapper.readValue(jsonInput, BaseClass.class);
            assertNull("Deserialization of empty string should return null", result);
        } catch (Exception e) {
            fail("Deserialization should not throw an exception: " + e.getMessage());
        }
    }
}
