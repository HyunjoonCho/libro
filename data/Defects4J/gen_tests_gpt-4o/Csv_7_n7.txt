
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.StringReader;
import java.util.Map;

import static org.junit.Assert.*;

public class CSVFormatTest {

    @Test
    public void testHeaderMapWithDuplicateColumns() throws Exception {
        String csvData = "Col1,Col2,Col2,Col3,Col4\n" +
                         "1,2,3,4,5\n" +
                         "4,5,6,7,8\n";

        CSVFormat myFormat = CSVFormat.RFC4180.withDelimiter(',')
                                               .withQuote('"')
                                               .withQuotePolicy(CSVFormat.DEFAULT.getQuotePolicy())
                                               .withIgnoreSurroundingSpaces(true)
                                               .withHeader()
                                               .withSkipHeaderRecord(true);

        try (CSVParser parser = new CSVParser(new StringReader(csvData), myFormat)) {
            for (CSVRecord record : parser) {
                Map<String, String> headerMap = record.toMap();
                // We assume the desired behavior. This depends on how you think the API should handle duplicates.
                // Typically, an assertion for duplicate header names should be made 
                // to see if it's returning the first encountered column or all duplicates should be
                // stored with unique keys or any other expected behavior.
                
                // As per the original behavior, check if all entries are present in the headerMap:
                assertTrue("Header Map missing 'Col1'", headerMap.containsKey("Col1"));
                assertTrue("Header Map missing 'Col2'", headerMap.containsKey("Col2"));
                assertTrue("Header Map missing 'Col3'", headerMap.containsKey("Col3"));
                assertTrue("Header Map missing 'Col4'", headerMap.containsKey("Col4"));
                
                // Here we check that the values in the map are as expected for existing keys.
                assertEquals("1", headerMap.get("Col1"));
                assertEquals("3", headerMap.get("Col2"));  // If duplicates are overwritten, it might hold the last entry.
                assertEquals("4", headerMap.get("Col3"));
                assertEquals("5", headerMap.get("Col4"));
            }
        }
    }
}
