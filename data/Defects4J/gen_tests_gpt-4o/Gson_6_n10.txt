
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.junit.Test;

import static org.junit.Assert.fail;

public class GsonNullTypeAdapterFactoryTest {

    @Test
    public void testNullTypeAdapterFactory() {
        // Custom TypeAdapterFactory that returns null
        TypeAdapterFactory nullReturningFactory = new TypeAdapterFactory() {
            @Override
            public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
                return null; // Return null to simulate the issue
            }
        };

        // Create a Gson instance with the custom TypeAdapterFactory
        Gson gson = new GsonBuilder()
                .registerTypeAdapterFactory(nullReturningFactory)
                .create();

        try {
            // Attempt to serialize an object
            String json = gson.toJson(new TestObject("test"));
            // Since we are testing for error, this point should not be reached
            fail("Expected NullPointerException to be thrown, but it was not.");
        } catch (NullPointerException e) {
            // Expected behavior; Gson 2.6 would throw NPE if TypeAdapterFactory.create() returns null
            System.out.println("Caught expected NullPointerException: " + e.getMessage());
        }
    }

    static class TestObject {
        private String value;

        TestObject(String value) {
            this.value = value;
        }

        public String getValue() {
            return value;
        }
    }
}
