
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Before;
import org.junit.Test;

public class JsonNodeTypingTest {

    private ObjectMapper mapper;
    private Foo foo;

    @Before
    public void setUp() {
        mapper = new ObjectMapper()
                .enableDefaultTyping() // Enable default typing
                .enable(MapperFeature.AUTO_DETECT_GETTERS)
                .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)
                .disable(MapperFeature.USE_GETTERS_AS_SETTERS)
                .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
                .enable(SerializationFeature.INDENT_OUTPUT)
                .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        foo = new Foo("bar");
    }

    @Test(expected = JsonProcessingException.class)
    public void testReadTreeWithDefaultTyping() throws JsonProcessingException {
        // Serialize Foo object
        String serialized = mapper.writeValueAsString(foo); // Expecting --> {"bar" : "bar"}

        // Attempt to read JSON
        JsonNode jsonNode = mapper.readTree(serialized); // Exception expected here
    }

    @Test(expected = JsonProcessingException.class)
    public void testValueToTreeWithDefaultTyping() throws JsonProcessingException {
        // Attempt to convert Foo object to tree
        JsonNode node = mapper.valueToTree(foo); // Exception expected here
    }

    public static class Foo {
        private String bar;

        public Foo() {
        }

        public Foo(String bar) {
            this.bar = bar;
        }

        public String getBar() {
            return bar;
        }

        public void setBar(String bar) {
            this.bar = bar;
        }
    }
}
