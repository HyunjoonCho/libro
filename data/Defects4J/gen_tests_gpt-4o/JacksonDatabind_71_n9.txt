
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.Test;

import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class CharSequenceKeyDeserializerTest {

    public static class CharSequenceKeyMap {
        @JsonSerialize(keyUsing = CharSequenceKeySerializer.class)
        @JsonDeserialize(keyUsing = CharSequenceKeyDeserializer.class)
        public Map<CharSequence, String> map = new HashMap<>();
    }

    private static class CharSequenceKeySerializer extends com.fasterxml.jackson.databind.ser.std.StdKeySerializer {}
    
    private static class CharSequenceKeyDeserializer extends com.fasterxml.jackson.databind.deser.std.StdKeyDeserializer {
        protected CharSequenceKeyDeserializer() {
            super(CharSequence.class, null);
        }

        @Override
        public Object deserializeKey(String key, com.fasterxml.jackson.databind.DeserializationContext ctxt)
                throws JsonProcessingException {
            return key;
        }
    }

    @Test
    public void testCharSequenceKeyDeserializer() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        CharSequenceKeyMap map = new CharSequenceKeyMap();
        map.map.put("key1", "value1");
        
        String json = mapper.writeValueAsString(map);
        CharSequenceKeyMap result = mapper.readValue(json, CharSequenceKeyMap.class);

        assertEquals("value1", result.map.get("key1"));
    }
}
