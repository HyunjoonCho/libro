
import org.junit.Test;
import static org.junit.Assert.*;

public class ExpressionEvaluatorTest {

    @Test
    public void testSimpleCommaExpression() {
        // Assuming ExpressionEvaluator has a method processExpression that handles the expression transformation
        ExpressionEvaluator evaluator = new ExpressionEvaluator();
        String processed = evaluator.processExpression("foo((1, 2, 42))");
        
        // Check the expected outcome
        assertEquals("foo((1, 3))", processed);

        // Check for warning
        assertTrue(evaluator.getWarnings().contains("Warning issued for expression: 1"));
    }

    @Test
    public void testCommaExpressionWithSideEffect() {
        ExpressionEvaluator evaluator = new ExpressionEvaluator();
        String processed = evaluator.processExpression("foo((bar(), 2, 42))");

        // Ensure it is transformed correctly
        assertEquals("foo((bar(), 3))", processed);

        // Expect no warning since bar() has side effects and should not be flagged
        assertFalse(evaluator.getWarnings().contains("Warning issued for expression: bar()"));
    }
    
    @Test
    public void testNestedCommaExpressions() {
        ExpressionEvaluator evaluator = new ExpressionEvaluator();
        String processed = evaluator.processExpression("foo(((1, 2, 3), (4, 5, 42)))");

        // Verify transformation
        assertEquals("foo((1, 4, 42))", processed);

        // Check for warnings for inner sequences
        assertTrue(evaluator.getWarnings().contains("Warning issued for expression: 1"));
        assertTrue(evaluator.getWarnings().contains("Warning issued for expression: 4"));
    }

}
