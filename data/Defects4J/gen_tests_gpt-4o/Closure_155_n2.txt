
import static org.junit.Assert.*;
import javax.script.*;

public class JavaScriptOptimizationTest {
    @org.junit.Test
    public void testOverzealousArgumentsOptimization() throws ScriptException {
        // Setup the JavaScript engine
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");

        // Define a JavaScript function utilizing a temporary variable to prevent overwriting
        String originalFunction = 
            "function d3_call(callback) {" +
            "  var f = callback;" +
            "  arguments[0] = this;" +
            "  return f.apply(this, arguments);" +
            "}";

        // Define the optimized JavaScript function without the temporary variable
        String optimizedFunction = 
            "function d3_call(a) {" +
            "  arguments[0] = this;" +
            "  return a.apply(this, arguments);" +
            "}";

        // Add these functions to the JavaScript context
        engine.eval(originalFunction);
        engine.eval(optimizedFunction);

        // JavaScript code to test both functions
        String testCase = 
            "var context = { value: 42 };" +
            "function callback(arg0, arg1) {" +
            "  return {arg0: arg0, arg1: arg1, thisValue: this.value};" +
            "}" +
            "var originalResult = d3_call.call(context, callback, 'arg');" +
            "var optimizedResult = d3_call.call(context, callback, 'arg');" +
            "JSON.stringify({original: originalResult, optimized: optimizedResult});";

        // Evaluate the test case and parse the result
        String resultJson = (String) engine.eval(testCase);
        engine.eval("var result = " + resultJson);

        // Extract the results
        Invocable inv = (Invocable) engine;
        Object originalResult = engine.eval("result.original");
        Object optimizedResult = engine.eval("result.optimized");

        // Verify that both functions return the same results
        assertEquals(inv.invokeFunction("JSON.stringify", originalResult), inv.invokeFunction("JSON.stringify", optimizedResult));

        // Specifically test that the 'this' context and arguments are as expected for the original function
        assertEquals("{\"arg0\":{\"value\":42},\"arg1\":\"arg\",\"thisValue\":42}", inv.invokeFunction("JSON.stringify", originalResult));
    }
}
