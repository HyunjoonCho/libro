
import org.junit.Test;
import static org.junit.Assert.fail;

import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class JavaScriptFunctionTest {

    @Test
    public void testUnnamedFunctionStatementShouldThrowError() {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");
        
        String script = "function () {};";
        
        try {
            engine.eval(script);
            fail("Expected a SyntaxError for unnamed function statement, but no exception was thrown.");
        } catch (ScriptException e) {
            // Check if the exception is due to syntax error
            if (!e.getMessage().contains("SyntaxError")) {
                fail("Expected a SyntaxError for unnamed function statement, but got: " + e.getMessage());
            }
        }
    }

    @Test
    public void testUnnamedFunctionExpressionIsAllowed() {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");
        
        String script = "(function(){});";
        
        try {
            engine.eval(script);
        } catch (ScriptException e) {
            fail("No exception expected for unnamed function expression, but got: " + e.getMessage());
        }
    }
}
