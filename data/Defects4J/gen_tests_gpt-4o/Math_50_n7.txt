
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;

import static org.junit.Assert.fail;

public class RegulaFalsiSolverTest {

    @Test
    public void testRegulaFalsiSolverFailure() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new RegulaFalsiSolver();
        try {
            // This should exceed the maximum number of evaluations leading to an exception
            double root = solver.solve(100, f, 1, 10);
            fail("Expected IllegalStateException due to evaluation limit exceeded.");
        } catch (IllegalStateException e) {
            // Expected exception
        }
    }

    @Test
    public void testPegasusSolverSuccess() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new PegasusSolver();

        // Expected to find the root with fewer evaluations
        double root = solver.solve(100, f, 1, 10);
        System.out.println("Root found using PegasusSolver: " + root);
    }
}
