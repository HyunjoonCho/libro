
import org.apache.commons.math3.geometry.euclidean.twod.Line;
import org.apache.commons.math3.geometry.euclidean.twod.SubLine;
import org.apache.commons.math3.geometry.euclidean.twod.Vector2D;
import org.apache.commons.math3.geometry.partitioning.Region;
import org.apache.commons.math3.geometry.partitioning.Region.Location;
import org.junit.Test;
import static org.junit.Assert.*;

public class SubLineIntersectionTest {

    @Test
    public void testNonIntersectingLines() {
        try {
            // Create two non-intersecting lines
            Line line1 = new Line(new Vector2D(0, 0), new Vector2D(1, 0), 1.0e-10);
            Line line2 = new Line(new Vector2D(0, 1), new Vector2D(1, 1), 1.0e-10);
            SubLine subLine1 = new SubLine(line1, new Region<>() {
                @Override
                public Location checkPoint(org.apache.commons.math3.geometry.Point<Euclidean2D> point) {
                    return Location.OUTSIDE;
                }

                @Override
                public double getSize() {
                    return 0;
                }

                @Override
                public boolean isEmpty() {
                    return true;
                }
            });

            Vector2D intersection = subLine1.intersection(line2, true);

            // Assert that the result is null, indicating no intersection
            assertNull("Expected no intersection, but was: " + intersection, intersection);

        } catch (NullPointerException e) {
            fail("Expected no exception, but a NullPointerException was thrown.");
        }
    }
}
