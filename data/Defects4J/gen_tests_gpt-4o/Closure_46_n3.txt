
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

public class TypeCheckTest {

    @Test
    public void testClassCastException() {
        // Create a simple JavaScript code snippet that would cause the issue
        String jsCode = "/** @typedef {{key: string}} */ var MyType;" + 
                        "/** @type {MyType} */ var x = {key: 'value'};";

        // Initialize the JS compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Enable warnings for type checking
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CompilerOptions.CheckLevel.WARNING);

        // Run the compiler to type-check the code
        Result result = compiler.compile(
            SourceFile.fromCode("externs.js", ""), // empty externs
            SourceFile.fromCode("test.js", jsCode),
            options
        );

        // Assert that no ClassCastException occurred and no errors were reported
        for (JSError error : result.errors) {
            assertNotEquals("java.lang.ClassCastException", error.getDescription());
        }
        assertEquals(0, result.errors.length);
    }
}
