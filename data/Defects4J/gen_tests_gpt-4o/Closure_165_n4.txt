
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerBugTest {

    @Test
    public void testPropertiesOnUnrelatedRecordTypes() throws IOException {
        // Creating a temporary JavaScript file to reproduce the bug
        File tempFile = File.createTempFile("test", ".js");
        
        // Define JavaScript code as described in the bug report
        String jsCode = "/** @typedef {{name: string, id: number}} */\n"
                      + "var RecordType1;\n\n"
                      + "/** @typedef {{name2: string}} */\n"
                      + "var RecordType2;\n\n"
                      + "/**\n"
                      + "* @param {RecordType1} rec\n"
                      + "*/\n"
                      + "var func = function(rec) {\n"
                      + " alert(rec.name2);\n"
                      + "};\n"
                      + "func({name: 'jim', id: 0});";

        // Write the JavaScript code to the temporary file
        try (FileWriter writer = new FileWriter(tempFile)) {
            writer.write(jsCode);
        }

        // Ensure the closure compiler is available and invoke it
        String command = "java -jar path/to/closure-compiler.jar "
                       + "--compilation_level=ADVANCED_OPTIMIZATIONS "
                       + "--jscomp_error=accessControls "
                       + "--jscomp_error=checkTypes "
                       + "--jscomp_error=checkVars "
                       + "--js " + tempFile.getAbsolutePath();

        Process process = Runtime.getRuntime().exec(command);
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()));

        StringBuilder output = new StringBuilder();
        String line;
        while ((line = reader.readLine()) != null) {
            output.append(line).append("\n");
        }

        // Check if there were no errors, indicating a failure to catch the issue
        // or if a specific expected error is missing
        assertFalse("Expected a compilation error due to the property name2 not defined on rec", output.toString().isEmpty());

        // Clean up by deleting the temporary file
        tempFile.delete();
    }
}
