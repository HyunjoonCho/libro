
import org.junit.Test;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipEntry;

public class TruncatedZipFileTest {

    @Test
    public void testTruncatedZipFileErrorMessage() {
        // This byte array represents a truncated ZIP file
        // The actual content doesn't matter as long as it's not a complete and valid ZIP file
        byte[] truncatedZipContent = {80, 75, 3, 4, 20, 0, 20, 0, 8, 0, 0, 0, 33, 0, -77, 76, -80, -18};

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(truncatedZipContent);
        ZipInputStream zipInputStream = new ZipInputStream(byteArrayInputStream);

        try {
            ZipEntry entry;
            while ((entry = zipInputStream.getNextEntry()) != null) {
                // Process each entry (trivial, as we expect to hit the EOFException before processing)
            }
            zipInputStream.close();
        } catch (IOException e) {
            // Check if the exception thrown is an EOFException
            assertTrue("Expected EOFException was not thrown", e instanceof java.io.EOFException);
            // Log a truncated error message to avoid crippling console output
            String message = e.getMessage();
            if (message != null && message.length() > 100) {
                message = message.substring(0, 100) + "...<truncated>";
            }
            System.err.println("Caught exception: " + message);
        }
    }
}
