
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.*;

public class UUIDDeserializerTest {

    @Test
    public void testUUIDDeserializationWithHandler() throws IOException {
        ObjectMapper mapper = new ObjectMapper()
                .addHandler(new DeserializationProblemHandler() {
                    @Override
                    public Object handleWeirdStringValue(
                            DeserializationContext ctxt,
                            Class<?> targetType,
                            String valueToConvert,
                            String failureMsg) throws IOException {
                        if (targetType == UUID.class) {
                            return UUID.fromString("00000000-0000-0000-0000-000000000000");
                        }
                        return NOT_HANDLED;
                    }
                })
                .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE);
        
        IdBean result = mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
        assertNotNull(result);
        assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000000"), result.getId());
    }

    public static class IdBean {
        private UUID id;

        public UUID getId() {
            return id;
        }

        public void setId(final UUID id) {
            this.id = id;
        }
    }
}
