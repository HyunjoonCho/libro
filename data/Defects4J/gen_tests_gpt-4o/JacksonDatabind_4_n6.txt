
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;
import static org.junit.Assert.*;

import java.util.List;

public class IndexInInvalidFormatExceptionTest {

    public static class TestObject {
        public int number;
    }

    @Test
    public void testInvalidFormatExceptionIndex() {
        ObjectMapper mapper = new ObjectMapper();

        String jsonArray = "[{\"number\": 1}, {\"number\": \"not-a-number\"}, {\"number\": 3}]";

        try {
            // Attempt to deserialize the JSON array
            List<TestObject> result = mapper.readValue(jsonArray, 
                    mapper.getTypeFactory().constructCollectionType(List.class, TestObject.class));
            fail("Expected an InvalidFormatException to be thrown due to an incorrect number format");
        } catch (InvalidFormatException e) {
            // Check if the index is set correctly in the exception
            assertEquals("The exception index should indicate the position of the invalid element", 1, e.getPath().get(0).getIndex());
        } catch (Exception e) {
            fail("Expected an InvalidFormatException, but got: " + e);
        }
    }
}
