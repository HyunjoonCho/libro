
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeParserBucket;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class DateTimeFormatterTest {

    @Test
    public void testParseIntoWithoutYear() {
        // Initialize a formatter that does not include the year in its pattern
        DateTimeFormatter formatter = DateTimeFormat.forPattern("MM-dd");

        // An existing DateTime with a non-2000 year
        DateTime givenInstant = new DateTime(2021, 3, 15, 0, 0);

        // Use parseInto method
        DateTimeParserBucket bucket = new DateTimeParserBucket(
            0, givenInstant.getChronology(), givenInstant.getZone(), 2000, 0
        );
        
        int newPos = formatter.getParser().parseInto(bucket, "02-28", 0);
        DateTime result = new DateTime(bucket.computeMillis());

        // Verifying that the year from the given instant is used 
        // instead of being overwritten by the default year of 2000
        assertEquals(2021, result.getYear());
        assertEquals(2, result.getMonthOfYear());
        assertEquals(28, result.getDayOfMonth());
    }
}
