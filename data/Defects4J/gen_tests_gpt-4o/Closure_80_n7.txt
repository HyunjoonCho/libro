
import com.google.javascript.jscomp.*;

import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test(expected = RuntimeException.class)
    public void testDeleteNodeError() {
        // Create a compiler instance
        Compiler compiler = new Compiler();

        // Set up compiler options for advanced compilation
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Source code to compile
        String jsCode = "function x() { return delete a; }";

        // A simple generic externs, or you can provide specific externs if needed
        String externs = "var a;";

        // Compile the JS input
        SourceFile extern = SourceFile.fromCode("externs", externs);
        SourceFile input = SourceFile.fromCode("input", jsCode);

        // This should trigger the internal compiler error
        compiler.compile(extern, input, options);

        // Verify that the compiler resulted in errors
        // In a real-world test case, if we want to check for an error message,
        // we will explore the compiler's errors, but it should throw the exception before here
        assertTrue(compiler.hasErrors());
    }
}
