
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.junit.Test;
import static org.junit.Assert.*;

public class BracketingNthOrderBrentSolverTest {

    @Test(expected = MaxCountExceededException.class)
    public void testExceedsMaxIterationCount() {
        BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(
                1e-15, 1e-15, 5);

        // Defining a function where the issue occurs
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                // Adjust this based on the real-world use case of the bug
                // The function has a zero very close to x = 12500.0
                return Math.pow(x - 12500.0, 2) - 1e-16;
            }
        };

        // The bracket where the problem occurs (as described)
        double lowerBound = 12500.0;
        double upperBound = 12500.03;

        // Set a lower max iterations limit to force the exception
        solver.solve(100, function, lowerBound, upperBound);
    }
}
