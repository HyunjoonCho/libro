
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class PrimitiveWrapperHandlingTest {

    @Test
    public void testPrimitiveWrapperHandling() throws Exception {
        // Create an ObjectMapper and register a module to handle the type refinement
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        // Let's assume we allowed wrapper refinement in our module configuration
        // For illustration purposes, we'll work with a simple scenario involving an integer
        // mapping to both int and Integer
        module.addAbstractTypeMapping(int.class, Integer.class);
        mapper.registerModule(module);

        // Test case for an int being refined to Integer
        String json = "{\"value\": 10}";
        WrapperClass result = mapper.readValue(json, WrapperClass.class);
        
        // Verify if the refinement from int to Integer works as expected
        assertEquals(Integer.valueOf(10), result.getValue());
    }

    static class WrapperClass {
        private Integer value;

        public Integer getValue() {
            return value;
        }

        public void setValue(Integer value) {
            this.value = value;
        }
    }
}
