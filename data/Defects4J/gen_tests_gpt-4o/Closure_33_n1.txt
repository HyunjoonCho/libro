
import org.junit.Test;
import java.io.*;

public class ClosureCompilerTest {

    @Test
    public void testWeirdObjectLiteralInvalidPropertyError() throws IOException, InterruptedException {
        String jsCode = "/**\n" +
                " * @param {{text: string}} opt_data\n" +
                " * @return {string}\n" +
                " */\n" +
                "function temp1(opt_data) {\n" +
                " return opt_data.text;\n" +
                "}\n" +
                "\n" +
                "/**\n" +
                " * @param {{activity: (boolean|number|string|null|Object)}} opt_data\n" +
                " * @return {string}\n" +
                " */\n" +
                "function temp2(opt_data) {\n" +
                " /** @notypecheck */\n" +
                " function __inner() {\n" +
                " return temp1(opt_data.activity);\n" +
                " }\n" +
                " return __inner();\n" +
                "}\n" +
                "\n" +
                "/**\n" +
                " * @param {{n: number, text: string, b: boolean}} opt_data\n" +
                " * @return {string}\n" +
                " */\n" +
                "function temp3(opt_data) {\n" +
                " return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';\n" +
                "}\n" +
                "\n" +
                "function callee() {\n" +
                " var output = temp3({\n" +
                " n: 0,\n" +
                " text: 'a string',\n" +
                " b: true\n" +
                " });\n" +
                " alert(output);\n" +
                "}\n" +
                "\n" +
                "callee();\n";

        // Save the JS code to a temporary file
        File tempJsFile = File.createTempFile("repro", ".js");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempJsFile))) {
            writer.write(jsCode);
        }

        // Compile the JS code using the Closure Compiler
        ProcessBuilder processBuilder = new ProcessBuilder(
                "java", "-jar", "path/to/compiler.jar",
                "--compilation_level", "ADVANCED_OPTIMIZATIONS",
                "--jscomp_error", "accessControls",
                "--jscomp_error", "checkTypes",
                "--jscomp_error", "checkVars",
                "--js", tempJsFile.getAbsolutePath()
        );

        processBuilder.redirectErrorStream(true);
        Process process = processBuilder.start();

        // Capture the output
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            String line;
            StringBuilder output = new StringBuilder();
            while ((line = reader.readLine()) != null) {
                output.append(line).append(System.lineSeparator());
            }

            // Wait for the process to complete
            int exitCode = process.waitFor();

            // Check the output for the expected error message
            if (!output.toString().contains("ERROR - actual parameter 1 of temp3 does not match formal parameter")) {
                throw new AssertionError("Expected error message not found in compiler output.");
            }
        } finally {
            // Clean up the temporary file
            tempJsFile.delete();
        }
    }
}
