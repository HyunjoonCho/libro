
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class PosixParserTest {

    private static final String OPTION_TARGET = "t";
    private static final String OPTION_TARGET_LONG = "target";

    @Test
    public void testPosixParserWithHyphenatedOption() {
        // Setup options
        Options options = new Options();
        Option generateTarget = new Option(OPTION_TARGET, OPTION_TARGET_LONG, true, "Generate files for the specified target machine");
        options.addOption(generateTarget);

        // Prepare the command line arguments
        String[] args = {"-target", "foobar.com"};

        // Parse using DefaultParser (replacement for PosixParser)
        CommandLineParser parser = new DefaultParser();
        try {
            CommandLine parsedLine = parser.parse(options, args);

            // Check if the option is recognized
            assertTrue(parsedLine.hasOption(OPTION_TARGET));

            // Verify if the correct value is parsed
            String targetValue = parsedLine.getOptionValue(OPTION_TARGET);
            assertEquals("foobar.com", targetValue);
        } catch (ParseException pe) {
            // In an actual test scenario you'd want to fail the test if an unexpected exception occurs
            throw new RuntimeException(pe);
        }
    }
}
