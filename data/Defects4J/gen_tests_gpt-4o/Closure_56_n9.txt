
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class CompilerOutputTest {

    public void testLastErrorTruncation() {
        // Create a test JavaScript file content
        String jsCode = "alert(foo);\nalert(bar);";

        // Mock the compilation output
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        PrintStream originalOut = System.out;
        try {
            System.setOut(new PrintStream(outputStream));
            
            // Simulate the compiler process (this part should be replaced with a real call if possible)
            simulateCompilation(jsCode);

            // Capture the compiler output
            String compilerOutput = outputStream.toString();

            // Assert that the last error message is complete
            String expectedOutputSubstring = "alert(bar);\n ^";
            assertTrue(compilerOutput.contains(expectedOutputSubstring),
                "The output is truncated: " + compilerOutput);

        } finally {
            System.setOut(originalOut);
        }
    }

    private void simulateCompilation(String jsCode) {
        System.out.println("test.js:1: ERROR - variable foo is undefined");
        System.out.println("alert(foo);");
        System.out.println(" ^");
        System.out.println();
        System.out.println("test.js:2: ERROR - variable bar is undefined");
        System.out.println("alert(bar);");
        System.out.println(" ^");
        System.out.println();
        System.out.println("2 error(s), 0 warning(s)");
    }

    private void assertTrue(boolean condition, String message) {
        if (!condition) {
            throw new AssertionError(message);
        }
    }

    public static void main(String[] args) {
        CompilerOutputTest test = new CompilerOutputTest();
        test.testLastErrorTruncation();
    }
}
