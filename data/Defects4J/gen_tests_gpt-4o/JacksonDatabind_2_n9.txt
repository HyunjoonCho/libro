
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

class ListAttribute<T> {
    private String itemJsonKey;
    private List<T> items;

    public ListAttribute(String itemJsonKey, List<T> items) {
        this.itemJsonKey = itemJsonKey;
        this.items = items;
    }

    public String getItemJsonKey() {
        return itemJsonKey;
    }

    public List<T> getItems() {
        return items;
    }
}

class X<T> {
    String s;
    List<T> items;
}

class ListAttributeSerializer extends JsonSerializer<ListAttribute<?>> {
    @Override
    public void serialize(ListAttribute<?> value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
        jgen.writeStartObject();
        jgen.writeStringField("itemType", value.getItemJsonKey());
        jgen.writeObjectField("items", value.getItems());
        jgen.writeEndObject();
    }
    
    @Override
    public void serializeWithType(ListAttribute<?> value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
        typeSer.writeTypePrefixForObject(value, jgen);
        jgen.writeStringField("itemType", value.getItemJsonKey());
        jgen.writeObjectField("items", value.getItems());
        typeSer.writeTypeSuffixForObject(value, jgen);
    }
}

public class SerializationTest {
    @Test
    public void testListAttributeSerializationToTree() throws JsonProcessingException {
        // Set up the custom serializer
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(ListAttribute.class, new ListAttributeSerializer());
        mapper.registerModule(module);

        // Create an instance of X with ListAttribute
        List<String> items = new ArrayList<>();
        items.add("item1");
        items.add("item2");
        ListAttribute<String> listAttribute = new ListAttribute<>("test", items);

        // Attempt to serialize to tree
        JsonNode tree = mapper.valueToTree(listAttribute);

        // Convert back to JSON string to see if it includes VALUE_EMBEDDED_OBJECT
        String jsonString = mapper.writeValueAsString(tree);

        // Check if serialized output is as expected
        assertEquals("{\"itemType\":\"test\",\"items\":[\"item1\",\"item2\"]}", jsonString);
    }
}
