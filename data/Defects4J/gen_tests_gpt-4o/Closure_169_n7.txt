
import com.google.javascript.jscomp.*;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testStrangeWarningForCallbackFunction() {
        // Source code that triggers the warning
        String code = "/** @param {{func: function()}} obj */\n" +
                      "function test1(obj) {}\n" +
                      "var fnStruc1 = {};\n" +
                      "fnStruc1.func = function() {};\n" +
                      "test1(fnStruc1);";

        // Set up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

        // Compile the code
        SourceFile input = SourceFile.fromCode("test.js", code);
        CompilerResult result = compiler.compile(
            Compiler.getBuiltinExterns(CompilerOptions.Environment.BROWSER),
            java.util.Collections.singletonList(input),
            options
        );

        // Check for the expected warning
        boolean warningFound = result.warnings.stream()
            .anyMatch(d -> d.getDescription().contains("actual parameter 1 of func does not match formal parameter"));
        
        assertTrue(warningFound, "Expected warning not found for callback function.");
    }
}
