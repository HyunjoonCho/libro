
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.UnboundedSolutionException;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.fail;

public class SimplexSolverTest {
    private static final int ENTITIES_COUNT = 15; // set to 2 for less impact, 15 may produce the massive exception

    @Test
    public void testUnboundedSolutionException() {
        SimplexSolver solver = new SimplexSolver();
        
        // Objective function: min(1*t + 0*L)
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{1, 0}, 0);

        // Build constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();

        // Constraints for every entity (r-th subject)
        // -q(r) + QL >= 0  and  x(r)t - XL >= 0 
        // L >= 0 
        for (int r = 0; r < ENTITIES_COUNT; r++) {
            constraints.add(new LinearConstraint(new double[]{0, 1}, Relationship.GEQ, 0));  // -q(r) + QL >= 0 (simplified)
            constraints.add(new LinearConstraint(new double[]{1, -1}, Relationship.GEQ, 0)); // x(r)t - XL >= 0 (simplified)
        }

        try {
            PointValuePair solution = solver.optimize(objectiveFunction, constraints, GoalType.MINIMIZE, new NonNegativeConstraint(true));
            System.out.println("Solution: " + solution.getValue());
        } catch (UnboundedSolutionException e) {
            fail("UnboundedSolutionException was thrown unexpectedly.");
        }
    }
}
