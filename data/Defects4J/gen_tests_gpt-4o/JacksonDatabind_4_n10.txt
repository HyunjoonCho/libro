
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;

public class InvalidFormatExceptionReferenceTest {

    public static class Data {
        public List<Integer> numbers;
    }

    @Test
    public void testInvalidFormatExceptionShouldContainIndex() {
        ObjectMapper objectMapper = new ObjectMapper();
        String json = "{\"numbers\": [1, 2, \"invalid\", 4]}"; // The "invalid" entry should trigger the exception

        try {
            objectMapper.readValue(json, Data.class);
        } catch (InvalidFormatException e) {
            // Ensure that the index of the problematic element is reported correctly
            boolean indexFound = e.getPath().stream().anyMatch(ref -> ref.getIndex() != -1);
            assertEquals(true, indexFound);
        } catch (JsonProcessingException e) {
            // Handle other potential parsing exceptions
            e.printStackTrace();
        }
    }
}
