
import org.apache.commons.lang.SystemUtils;
import org.junit.Test;

import java.lang.reflect.Field;

import static org.junit.Assert.fail;

public class SystemUtilsTest {

    @Test
    public void testGetJavaVersionAsFloatOnAndroidRuntime() {
        try {
            // Simulate Android runtime by setting the java.version system property
            setJavaVersion("0"); // An unrealistic Java version to trigger the exception

            // Attempt to get the Java version as a float
            // This should trigger the StringIndexOutOfBoundsException
            SystemUtils.getJavaVersionAsFloat();
            
            // If no exception is thrown, the test should fail
            fail("Expected StringIndexOutOfBoundsException was not thrown");
        } catch (StringIndexOutOfBoundsException e) {
            // Expected exception
        } finally {
            // Reset the java.version property to its original value
            resetJavaVersion();
        }
    }

    private void setJavaVersion(String version) {
        try {
            Field field = SystemUtils.class.getDeclaredField("JAVA_VERSION");
            field.setAccessible(true);
            field.set(null, version);
        } catch (Exception e) {
            throw new RuntimeException("Failed to set JAVA_VERSION", e);
        }
    }

    private void resetJavaVersion() {
        try {
            setJavaVersion(System.getProperty("java.version"));
        } catch (Exception e) {
            // Just print the stack trace for debugging purposes
            e.printStackTrace();
        }
    }
}
