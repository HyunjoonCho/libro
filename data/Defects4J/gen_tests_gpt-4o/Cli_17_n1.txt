
import org.apache.commons.cli.*;

import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;

public class PosixParserTest {

    @Test
    public void testStopAtNonOptionWithBursting() {
        // Create the options as per the description
        Options options = new Options();
        options.addOption("a", false, "Option A");
        options.addOption("b", false, "Option B");

        // Define the command line arguments
        String[] args = new String[]{"-azb"};

        // Use DefaultParser, simulating the behavior of the deprecated PosixParser
        CommandLineParser parser = new DefaultParser();

        // Set stopAtNonOption to true as per description
        boolean stopAtNonOption = true;
        
        try {
            CommandLine cmd = parser.parse(options, args, stopAtNonOption);
            
            // We're expecting only "-a" to be considered as an option, treating "zb" as non-option
            String[] expectedArgs = new String[]{"-a", "zb"};
            assertArrayEquals(expectedArgs, cmd.getArgs());
            
            // Assert that options are parsed correctly
            assertTrue(cmd.hasOption("a"));
            assertFalse(cmd.hasOption("b"));
            
        } catch (ParseException e) {
            e.printStackTrace();
        }
    }
}
