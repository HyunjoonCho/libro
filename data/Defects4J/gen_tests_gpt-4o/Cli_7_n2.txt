
import junit.framework.TestCase;
import org.apache.commons.cli2.CommandLine;
import org.apache.commons.cli2.Option;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.builder.ParserBuilder;
import org.apache.commons.cli2.commandline.Parser;
import org.apache.commons.cli2.option.Argument;
import org.apache.commons.cli2.option.Group;

public class Bug27575Test extends TestCase {

    public void testRequiredOptions() {
        ArgumentBuilder argBuilder = new ArgumentBuilder();
        Argument argC = argBuilder.withName("c").withMinimum(1).create();

        DefaultOptionBuilder optionBuilder = new DefaultOptionBuilder();
        Option optionC = optionBuilder.withLongName("c")
                                      .withArgument(argC)
                                      .withDescription("Option requiring an argument")
                                      .create();

        Option optionH = optionBuilder.withLongName("h")
                                      .withDescription("Simple flag option")
                                      .create();

        Group options = new GroupBuilder().withOption(optionC).withOption(optionH).create();

        Parser parser = new ParserBuilder().withGroup(options).withHelpOption(optionH).create();

        String[] args = new String[]{"-h"};
        CommandLine cmdLine = parser.parse(args);

        // Assert that the '-h' option is recognized as a required option, thus available
        assertTrue("The '-h' option should be present", cmdLine.hasOption("h"));

        // This is a deliberate failure to replicate the described bug
        // It expects the '-h' option but finds the '-c' option
        // We will assert the failure to simulate the failure scenario
        assertEquals("Expected option is not present", "-h", cmdLine.getOption("-h").toString());
    }
}
