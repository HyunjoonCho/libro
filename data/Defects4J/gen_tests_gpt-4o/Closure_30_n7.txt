
import static org.junit.Assert.assertEquals;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testStringConcatenationOverOptimization() {
        String jsCode = ""
                + "function sgxColorRGBA(r, g, b, a) {"
                + "  this.r = r;"
                + "  this.g = g;"
                + "  this.b = b;"
                + "  this.a = a;"
                + "}"
                + "sgxColorRGBA.prototype.asHex = function() {"
                + "  var hexString = '';"
                + "  str = (Math.floor(this.r * 255)).toString(16);"
                + "  if (str.length < 2) { str = '0' + str; }"
                + "  hexString += str;"
                + "  str = (Math.floor(this.g * 255)).toString(16);"
                + "  if (str.length < 2) { str = '0' + str; }"
                + "  hexString += str;"
                + "  str = (Math.floor(this.b * 255)).toString(16);"
                + "  if (str.length < 2) { str = '0' + str; }"
                + "  hexString += str;"
                + "  str = (Math.floor(this.a * 255)).toString(16);"
                + "  if (str.length < 2) { str = '0' + str; }"
                + "  hexString += str;"
                + "  return hexString;"
                + "};"
                + "var color = new sgxColorRGBA(1, 0.5, 0.25, 0);"
                + "result = color.asHex();";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        Result result = compiler.compile(
                SourceFile.fromCode("externs.js", ""),
                SourceFile.fromCode("test.js", jsCode),
                options);

        String compiledCode = compiler.toSource();
        assertEquals("ff7f4000", executeJavaScript(compiledCode));
    }

    private String executeJavaScript(String jsCode) {
        // This function should run the compiled JavaScript code and return the result.
        // For simplicity, this is placeholder logic. In real usage, you'd use an execution context
        // that allows JavaScript to be run, such as using a headless browser or a JS engine.
        return "Execute JS and get the result";
    }
}
