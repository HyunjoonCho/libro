
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import org.junit.Test;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class StdDateFormatTest {

    @Test
    public void testLenientDateParsing() {
        ObjectMapper objectMapper = new ObjectMapper();
        StdDateFormat dateFormat = new StdDateFormat();

        // Use the current lenient behavior (default)
        objectMapper.setDateFormat(dateFormat);

        try {
            // Parsing a date with a non-existent day "2015-01-32"
            Date parsedDate = objectMapper.readValue("\"2015-01-32\"", Date.class);
            
            // Expecting it to parse as "2015-02-01" because of lenient parsing
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
            assertEquals("2015-02-01", simpleDateFormat.format(parsedDate));
        } catch (Exception e) {
            e.printStackTrace();
            fail("Lenient parsing failed: " + e.getMessage());
        }
    }

    @Test
    public void testStrictDateParsing() {
        ObjectMapper objectMapper = new ObjectMapper();
        StdDateFormat dateFormat = new StdDateFormat();

        // This is a hypothetical example since StdDateFormat doesn't currently support setLenient(false)
        // Setting it to non-lenient mode
        // Assuming we could call something like: dateFormat.setLenient(false);
        // For now, we'll just demonstrate what should happen if it could be set

        objectMapper.setDateFormat(dateFormat);

        try {
            // Attempt to parse a date with a non-existent day "2015-01-32"
            objectMapper.readValue("\"2015-01-32\"", Date.class);
            fail("Expected InvalidFormatException due to non-lenient parsing");
        } catch (InvalidFormatException e) {
            // Expected behavior: if setLenient(false) were possible, parsing should fail
            // This catch block should be reached if strict parsing was enforced
        } catch (Exception e) {
            e.printStackTrace();
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
