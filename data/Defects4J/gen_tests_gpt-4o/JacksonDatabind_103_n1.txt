
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;
import static org.junit.Assert.*;

public class JsonMappingExceptionTest {

    private static class Sample {
        public int value;
    }

    @Test
    public void testDoubleLocationInExceptionMessage() {
        ObjectMapper objectMapper = new ObjectMapper();
        String json = "{\"value\": \"notAnInt\"}";  // Intentionally invalid value for "value"

        try {
            objectMapper.readValue(json, Sample.class);
            fail("Expected an InvalidFormatException to be thrown");
        } catch (InvalidFormatException e) {
            String message = e.getMessage();
            int firstOccurrence = message.indexOf(" at [source");
            int secondOccurrence = message.indexOf(" at [source", firstOccurrence + 1);
            
            assertTrue("Exception message should include ' at [source'", firstOccurrence != -1);
            assertTrue("Exception message should include ' at [source' twice", secondOccurrence != -1);
        } catch (Exception e) {
            fail("Expected an InvalidFormatException, but got: " + e);
        }
    }
}
