
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testManageClosureDependenciesWithWhitespaceOnly() throws Exception {
        String[] args = {
                "--compilation_level=WHITESPACE_ONLY",
                "--manage_closure_dependencies=true",
                "--js=src/dependency1.js",
                "--js=src/dependency2.js",
                "--js_output_file=out.js"
        };

        CommandLineRunner runner = new CommandLineRunner(args);

        Compiler compiler = runner.createCompiler();
        List<JSSourceFile> inputs = runner.createInputs(runner.getJsFiles(), false);

        CompilerOptions options = runner.createOptions();
        runner.setRunOptions(options);

        // Assume dependencies need to be resolved in order
        compiler.compile(JSSourceFile.fromCode("externs.js", ""), inputs, options);

        String compiledCode = compiler.toSource();
        
        // Check if the output contains a specific part of a known dependency
        assertTrue(compiledCode.contains("expectedPartOfDependency1"));

        // Alternatively, inspect the order of dependencies in the output file
        assertTrue(compiledCode.indexOf("expectedPartOfDependency1") < 
                   compiledCode.indexOf("expectedPartOfDependency2"));
    }
}

