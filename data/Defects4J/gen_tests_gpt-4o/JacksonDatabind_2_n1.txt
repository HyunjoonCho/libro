
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.POJONode;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertFalse;

public class ListAttributeSerializationTest {

    @JsonSerialize(using = ListAttributeSerializer.class)
    static class ListAttribute<T> {
        private String itemJsonKey;
        private List<T> items;

        public ListAttribute(String itemJsonKey, List<T> items) {
            this.itemJsonKey = itemJsonKey;
            this.items = items;
        }

        public String getItemJsonKey() {
            return itemJsonKey;
        }

        public List<T> getItems() {
            return items;
        }
    }

    public static class ListAttributeSerializer extends StdSerializer<ListAttribute> {

        public ListAttributeSerializer() {
            super(ListAttribute.class);
        }

        @Override
        public void serialize(ListAttribute value, JsonGenerator jgen, SerializerProvider provider)
                throws IOException {
            jgen.writeStartObject();
            jgen.writeStringField("itemType", value.getItemJsonKey());
            jgen.writeObjectField("items", value.getItems());
            jgen.writeEndObject();
        }

        @Override
        public void serializeWithType(ListAttribute value, JsonGenerator jgen, SerializerProvider provider,
                                      TypeSerializer typeSer) throws IOException {
            typeSer.writeTypePrefixForObject(value, jgen);
            serialize(value, jgen, provider); 
            typeSer.writeTypeSuffixForObject(value, jgen);
        }
    }

    @Test
    public void testSerializedTreeDoesNotContainEmbededPOJO() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(ListAttribute.class, new ListAttributeSerializer());
        mapper.registerModule(module);

        List<String> itemList = new ArrayList<>();
        itemList.add("item1");
        itemList.add("item2");

        ListAttribute<String> listAttribute = new ListAttribute<>("test", itemList);

        // Simulating serialization to tree (with workaround)
        byte[] jsonBytes = mapper.writeValueAsBytes(listAttribute);
        JsonNode tree = mapper.readTree(jsonBytes);

        // Printing the actual serialized tree structure
        System.out.println("Serialized JSON Tree: " + tree.toString());

        // Traverse the tree to ensure no POJONodes are present
        ArrayNode itemsNode = (ArrayNode) ((ObjectNode) tree).get("items");

        // Ensure none of the nodes within "items" are of POJONode type
        for (JsonNode node : itemsNode) {
            assertFalse("Encountered POJONode unexpectedly!", node instanceof POJONode);
        }
    }
}
