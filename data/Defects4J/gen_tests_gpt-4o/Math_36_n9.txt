
import org.apache.commons.math3.fraction.BigFraction;
import org.junit.Test;

import java.math.BigInteger;

import static org.junit.Assert.assertFalse;

public class BigFractionTest {

    @Test
    public void testDoubleValueWithLargeNumeratorAndDenominator() {
        // Create a numerator and denominator greater than Double.MAX_VALUE when converted to double
        BigInteger largeValue = new BigInteger("9".repeat(308)); // 308 nines to exceed Double.MAX_VALUE
        BigFraction fraction = new BigFraction(largeValue, largeValue);

        // The result should be 1.0, since numerator equals denominator, so it shouldn't be NaN
        double result = fraction.doubleValue();
        assertFalse("The result should not be NaN for large but equal numerator and denominator.", Double.isNaN(result));
    }
}
