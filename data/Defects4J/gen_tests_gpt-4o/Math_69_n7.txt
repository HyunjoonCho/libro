
import org.apache.commons.math3.stat.correlation.PearsonsCorrelation;
import org.apache.commons.math3.distribution.TDistribution;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class PearsonsCorrelationTest {

    @Test
    public void testGetCorrelationPValuesPrecision() {
        double[] x = {1.0, 2.0, 3.0, 4.0, 5.0}; // Sample data
        double[] y = {2.0, 4.1, 6.0, 8.1, 10.0}; // Sample data

        PearsonsCorrelation pearsonsCorrelation = new PearsonsCorrelation();
        double correlation = pearsonsCorrelation.correlation(x, y);

        int n = x.length;
        double t = correlation * Math.sqrt((n - 2) / (1 - correlation * correlation));

        TDistribution tDistribution = new TDistribution(n - 2);
        
        // Current method
        double pValueCurrent = 2 * (1 - tDistribution.cumulativeProbability(t));
        
        // Proposed method
        double pValueProposed = 2 * tDistribution.cumulativeProbability(-t);

        // Assert that the proposed method doesn't lead to zero when p-values are very small
        assertTrue("Proposed p-value calculation should be greater than current calculation when near zero",
                pValueProposed > pValueCurrent || pValueProposed == 0);
    }
}
