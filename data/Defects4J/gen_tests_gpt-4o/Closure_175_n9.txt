
import java.io.*;
import com.google.javascript.jscomp.*;

public class AdvancedOptimizationsTest {

    public void testIncorrectOptimization() throws IOException {
        // Create a JS source code as a string
        String jsSourceCode = 
            "window['anchor'] = function (obj, modifiesProp) {" +
            "  return (function (saved) {" +
            "    return modifiesProp(obj) + saved;" +
            "  })(obj['prop']);" +
            "};";

        // Write the JS source to a temporary input file
        File inputFile = File.createTempFile("input", ".js");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(inputFile))) {
            writer.write(jsSourceCode);
        }

        // Output file to hold the compiled JS code
        File outputFile = File.createTempFile("output", ".js");

        // Google Closure Compiler options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        Compiler compiler = new Compiler();
        SourceFile externs = SourceFile.fromCode("externs.js", "var window = {};");
        SourceFile input = SourceFile.fromFile(inputFile.getAbsolutePath());
        
        // Compile the code
        compiler.compile(externs, input, options);

        // Get the compiled source code
        String compiledCode = compiler.toSource();

        // Check if the output is equal to the expected outcome
        String expectedOutput = "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD;};";
        
        assertEquals("The compiled code should match the expected output", expectedOutput, compiledCode);

        // Clean up temporary files
        inputFile.delete();
        outputFile.delete();
    }

    private void assertEquals(String message, String expected, String actual) {
        if (!expected.equals(actual)) {
            throw new AssertionError(message + "\nExpected: " + expected + "\nActual: " + actual);
        }
    }

    public static void main(String[] args) {
        try {
            new AdvancedOptimizationsTest().testIncorrectOptimization();
            System.out.println("Test Passed!");
        } catch (Exception e) {
            e.printStackTrace();
            System.err.println("Test Failed");
        }
    }
}
