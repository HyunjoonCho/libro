
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class HandleUnknownTypeIdTest {

    static class BaseClass {
        public String name;
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
    static class SubClass extends BaseClass {
        public int value;
    }

    @Test
    public void testDeserializationWithDeserializationProblemHandler() throws Exception {
        String json = "{\"type\":\"unknownType\",\"name\":\"testName\",\"value\":10}";

        ObjectMapper mapper = new ObjectMapper();
        mapper.activateDefaultTyping(mapper.getPolymorphicTypeValidator(), ObjectMapper.DefaultTyping.NON_FINAL);

        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId,
                                                TypeIdResolver idResolver, String failureMsg) throws IOException {
                // Return Void.class to simulate the bug scenario
                return ctxt.constructType(Void.class);
            }
        });

        assertThrows(JsonMappingException.class, () -> {
            // Attempt to deserialize the JSON string
            mapper.readValue(json, BaseClass.class);
        });
    }
}
