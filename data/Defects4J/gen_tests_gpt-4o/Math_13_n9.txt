
import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
import org.apache.commons.math3.fitting.CurveFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.apache.commons.math3.fitting.PolynomialCurveFitter;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

public class LargeWeightOptimizationTest {

    @Test(expected = OutOfMemoryError.class)
    public void testLargeNumberOfWeightsCausesMemoryIssue() {
        // Simulate a large number of data points with associated weights
        int numberOfPoints = 41200;
        List<WeightedObservedPoint> points = new ArrayList<>();

        for (int i = 0; i < numberOfPoints; i++) {
            // x, y, and weight are arbitrary in this example
            points.add(new WeightedObservedPoint(1.0, i, Math.sin(i)));
        }

        // Attempt to fit these points using a polynomial curve fitter
        PolynomialCurveFitter fitter = PolynomialCurveFitter.create(2);
        
        // This operation should trigger the memory issue
        fitter.fit(points);

        // If the code reaches this point without an OutOfMemoryError, the test should fail
        fail("Expected an OutOfMemoryError due to large weight matrix allocation.");
    }
}
