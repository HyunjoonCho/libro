
import org.junit.Test;
import static org.junit.Assert.*;

public class CsvPrinterTest {

    @Test
    public void testNullStringNotEscaped() {
        // Assuming CsvPrinter is a class we need to test
        CsvFormat format = new CsvFormat();
        format.setEscapeCharacter('\\');
        format.setNullString("\\N");
        
        StringWriter writer = new StringWriter();
        CsvPrinter printer = new CsvPrinter(writer, format);
        
        try {
            printer.print(format.getNullString());
            
            printer.flush(); // Flush the printer to apply changes to the writer
            
            String result = writer.toString();
            
            // Check if the output is as expected, without double escaping
            assertEquals("\\N", result);

        } catch (IOException e) {
            fail("IOException should not occur: " + e.getMessage());
        }
    }
    
    // Example classes to represent CsvPrinter and CsvFormat
    // They should be replaced with actual classes/methods from the library
    class CsvPrinter {
        private final StringWriter writer;
        private final CsvFormat format;

        public CsvPrinter(StringWriter writer, CsvFormat format) {
            this.writer = writer;
            this.format = format;
        }

        public void print(String value) throws IOException {
            // This dummy method should mimic the library's actual behavior
            if (value.equals(format.getNullString())) {
                writer.write(value); // This is where the issue occurs, potentially applying escape
            }
        }
        
        public void flush() throws IOException {
            // Mimic actual flush behavior
            writer.flush();
        }
    }

    class CsvFormat {
        private char escapeCharacter;
        private String nullString;

        public char getEscapeCharacter() {
            return escapeCharacter;
        }

        public void setEscapeCharacter(char escapeCharacter) {
            this.escapeCharacter = escapeCharacter;
        }

        public String getNullString() {
            return nullString;
        }

        public void setNullString(String nullString) {
            this.nullString = nullString;
        }
    }
}
