public void testBuilderDeserializationWithJsonUnwrapped() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper();
    String jsonWithIdFirst = "{ \"emp_age\": 30, \"emp_id\": 1234, \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\" }";
    
    // Deserializing JSON where emp_id is not last should fail to assign name
    Employee employee = objectMapper.readValue(jsonWithIdFirst, Employee.class);
    assertEquals(30, employee.getAge());
    assertEquals(1234, employee.getId());
    assertNull(employee.getName());

    String jsonWithIdLast = "{ \"emp_first_name\": \"John\", \"emp_last_name\": \"Doe\", \"emp_age\": 30, \"emp_id\": 1234 }";
    
    // Deserializing JSON where emp_id is last, should assign all fields correctly
    employee = objectMapper.readValue(jsonWithIdLast, Employee.class);
    assertEquals(30, employee.getAge());
    assertEquals(1234, employee.getId());
    assertNotNull(employee.getName());
    assertEquals("John", employee.getName().getFirst());
    assertEquals("Doe", employee.getName().getLast());

    String jsonWithIdInMiddle = "{ \"emp_first_name\": \"John\", \"emp_id\": 1234, \"emp_last_name\": \"Doe\", \"emp_age\": 30 }";
    
    // Deserializing JSON where emp_id is in the middle should fail to assign age and name
    employee = objectMapper.readValue(jsonWithIdInMiddle, Employee.class);
    assertEquals(0, employee.getAge());
    assertEquals(1234, employee.getId());
    assertNull(employee.getName());
}