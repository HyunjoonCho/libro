public void testAdvancedModeCompilerWarning() {
    // Create superclass Foo
    Foo foo = new Foo();
    assertEquals(7, foo.add(3, 4));
    try {
        foo.sub(3, 4);
        fail("Should have thrown an exception for abstract method");
    } catch (UnsupportedOperationException e) {
        // Expected exception
    }

    // Create subclass Bar and trigger the mismatched signature
    Bar bar = new Bar();
    // In advanced mode, this should trigger a warning or an exception
    assertEquals(3, bar.add(3));

    // This should also trigger a warning due to different signature
    // when trying to use method as defined in the superclass
    assertEquals(3, bar.sub(3));
}