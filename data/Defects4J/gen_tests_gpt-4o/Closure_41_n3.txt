
import static com.google.javascript.jscomp.testing.NodeSubject.assertNode;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import java.util.List;

public class CompilerTest {

    @Test
    public void testOverriddenMethodsWithDifferentSignatures() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.OVERWRITTEN_PROTOTYPE_METHODS, com.google.javascript.jscomp.CheckLevel.WARNING);
        options.setLanguageIn(com.google.javascript.jscomp.parsing.parser.FeatureSet.ES5);

        // Set the compilation level to ADVANCED_OPTIMIZATIONS
        com.google.javascript.jscomp.CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        String code = """
            goog.provide('Foo');
            goog.provide('Bar');
            
            /** @constructor */
            Foo = function() {};
            
            /**
             * @param {number} a
             * @param {number} b
             * @return {number}
             */
            Foo.prototype.add = function(a, b) {
                return a + b;
            };
            
            /**
             * @param {number} a
             * @param {number} b
             * @return {number}
             */
            Foo.prototype.sub = goog.abstractMethod;
            
            /**
             * @constructor
             * @extends {Foo}
             */
            Bar = function() {
                goog.base(this);
            };
            goog.inherits(Bar, Foo);
            
            /** @inheritDoc */
            Bar.prototype.add = function(one) {
                return one;
            };
            
            /** @inheritDoc */
            Bar.prototype.sub = function(one) {
                return one;
            };
            
            var foo = /** @type {Foo} */ (new Bar());
            alert(foo.add(3, 4));
            
            var bar = new Bar();
            // THIS PRODUCES JSC_WRONG_ARGUMENT_COUNT
            alert(bar.add(3, 4));
            """;

        // Compile the code
        List<SourceFile> inputs = List.of(SourceFile.fromCode("test.js", code));
        List<SourceFile> externs = List.of(SourceFile.fromCode("externs.js", ""));
        compiler.compile(externs, inputs, options);

        // Check warnings
        List<JSError> warnings = compiler.getWarnings();
        assert !warnings.isEmpty() : "Expected warnings for overridden methods with different signatures.";
        
        boolean foundWarningForAdd = false;
        boolean foundWarningForSub = false;

        for (JSError warning : warnings) {
            if (warning.getDescription().contains("Bar.prototype.add")) {
                foundWarningForAdd = true;
            }
            if (warning.getDescription().contains("Bar.prototype.sub")) {
                foundWarningForSub = true;
            }
        }

        assert foundWarningForAdd : "Expected a warning for Bar.prototype.add having a different signature.";
        assert foundWarningForSub : "Expected a warning for Bar.prototype.sub having a different signature.";
    }
}
