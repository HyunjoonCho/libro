public void testTemplateTypesOnMethods() {
    // JavaScript test; requires JavaScript environment for execution
    // Simulated test code translated to JavaScript execution
    Context cx = Context.enter();
    try {
        Scriptable scope = cx.initStandardObjects();

        String script = ""
            + "/** \n"
            + " * @constructor \n"
            + " * @template CLASS \n"
            + " */ \n"
            + "var Class = function() {}; \n"
            + "/** \n"
            + " * @param {function(CLASS):CLASS} a \n"
            + " * @template T \n"
            + " */ \n"
            + "Class.prototype.foo = function(a) { \n"
            + "  return 'string'; \n"
            + "}; \n"
            + "/** \n"
            + " * @param {number} a \n"
            + " * @return {string} \n"
            + " */ \n"
            + "var a = function(a) { return ''; }; \n"
            + "new Class().foo(a);";

        cx.evaluateString(scope, script, "testScript", 1, null);
        // If no error is thrown during script execution, the test has replicated the described failure
    } finally {
        Context.exit();
    }
}