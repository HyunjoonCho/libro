
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class ShapePriorityTest {

    // Test class with an explicit shape annotation and locale
    static class MyNumber {
        @JsonFormat(shape = JsonFormat.Shape.NUMBER) // Explicitly set shape
        private Double value;

        public MyNumber(Double value) {
            this.value = value;
        }

        public Double getValue() {
            return value;
        }

        public void setValue(Double value) {
            this.value = value;
        }
    }

    @Test
    public void testNumberShapeShouldPrevail() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();

        MyNumber myNumber = new MyNumber(123.456);
        // Serialize to JSON
        String jsonOutput = mapper.writeValueAsString(myNumber);

        // While locale, context or defaults could affect serialization, explicit number shape should ensure numbers
        assertEquals("{\"value\":123.456}", jsonOutput); // Check that the value is serialized as a number, not a string
    }
}
