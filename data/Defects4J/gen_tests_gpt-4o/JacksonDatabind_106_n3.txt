
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;
import static org.junit.Assert.*;

public class TreeTraversingParserTest {

    public static class IntClass {
        public int x;

        @Override
        public String toString() {
            return String.valueOf(x);
        }
    }

    private final ObjectMapper mapper = new ObjectMapper();

    private String readFromTree(String json) {
        try {
            JsonNode tree = mapper.readTree(json);
            return mapper.readerFor(IntClass.class).readValue(tree).toString();
        } catch (JsonProcessingException e) {
            return e.getClass().getSimpleName();
        }
    }

    private String readFromString(String json) {
        try {
            return mapper.readerFor(IntClass.class).readValue(json).toString();
        } catch (JsonProcessingException e) {
            return e.getClass().getSimpleName();
        }
    }

    @Test
    public void testIntBoundsInTreeTraversingParser() {
        compare("{\"x\": 2147483648}", "2147483647");
        compare("{\"x\": 2147483649}", "2147483647");
        compare("{\"x\": -2147483649}", "2147483647");
        compare("{\"x\": -4294967295}", "2147483647");
        compare("{\"x\": 1e10}", "2147483647");
    }

    private void compare(String json, String expectedException) {
        // Read using TreeTraversingParser and from String comparison
        String resultFromTree = readFromTree(json);
        String resultFromString = readFromString(json);

        // Print comparison (optional)
        System.out.printf("|%30s | %30s | %-30s|\n", json, resultFromTree, resultFromString);

        assertEquals(expectedException, resultFromTree);
        assertEquals("JsonMappingException", resultFromString);
    }
}
