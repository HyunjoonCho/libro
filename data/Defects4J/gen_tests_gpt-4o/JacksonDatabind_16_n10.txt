
import com.fasterxml.jackson.annotation.JacksonAnnotationsInside;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.Test;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

public class Fun {

    @Test
    public void test() throws JsonProcessingException {
        // Set up the ObjectMapper and attach the mix-in with the annotation bundle
        ObjectMapper mapper = new ObjectMapper().addMixIn(Foo.class, FooMixin.class);
        
        // Serialize an instance of Foo and check if the property is renamed as expected
        String result = mapper.writeValueAsString(new Foo("result"));
        
        // Assert that the serialized JSON contains the renamed property "bar"
        Assert.assertEquals("{\"bar\":\"result\"}", result);
    }

    // Define a custom annotation using @JacksonAnnotationsInside and @JsonProperty
    @Target(value={ ElementType.CONSTRUCTOR, ElementType.FIELD, ElementType.METHOD })
    @Retention(value=RetentionPolicy.RUNTIME)
    @JacksonAnnotationsInside
    @JsonProperty("bar")
    public @interface ExposeStuff {
    }

    // Define a mix-in that applies the custom annotation to the method
    public abstract class FooMixin {
        @ExposeStuff
        public abstract String getStuff();
    }

    // Define the original class
    public class Foo {

        private String stuff;

        Foo(String stuff) {
            this.stuff = stuff;
        }

        public String getStuff() {
            return stuff;
        }
    }
}
