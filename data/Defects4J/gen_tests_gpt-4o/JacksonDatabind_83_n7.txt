
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.fail;

public class UUIDDeserializerTest {

    @Test
    public void testUUIDDeserializationWithCustomHandler() {
        ObjectMapper mapper = new ObjectMapper().addHandler(new DeserializationProblemHandler() {
            @Override
            public Object handleWeirdStringValue(final DeserializationContext ctxt,
                                                 final Class<?> targetType,
                                                 final String valueToConvert,
                                                 final String failureMsg) throws IOException {
                // Handle 'weird' string value issues by returning null instead of throwing an exception
                if (targetType == UUID.class) {
                    return null;
                }
                return super.handleWeirdStringValue(ctxt, targetType, valueToConvert, failureMsg);
            }
        });

        try {
            mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
        } catch (InvalidFormatException e) {
            fail("DeserializationProblemHandler was not used; exception was thrown: " + e.getMessage());
        } catch (Exception e) {
            // Any other exception just to make sure no other issue happens
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    public static class IdBean {
        private UUID id;

        public UUID getId() {
            return id;
        }

        public void setId(final UUID id) {
            this.id = id;
        }
    }
}
