
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;

import static org.junit.Assert.fail;

public class JsonSurrogateTest {

    @Test
    public void testSplitSurrogateOnWriteRaw() {
        // String that includes surrogate pair characters
        String testString = "xxxxx"; // Adjust the number of 'x' as needed
        char highSurrogate = '\uD83D'; // High surrogate of a smiley face emoji
        char lowSurrogate = '\uDE00'; // Low surrogate of a smiley face emoji

        // Create a writer and a JSON generator
        StringWriter writer = new StringWriter();
        JsonFactory jsonFactory = new JsonFactory();
        JsonGenerator jsonGenerator = null;

        try {
            jsonGenerator = jsonFactory.createGenerator(writer);

            // Write a JSON object
            jsonGenerator.writeStartObject();
            jsonGenerator.writeFieldName("message");

            // Attempt to write raw value with surrogate pair
            jsonGenerator.writeRaw(testString);
            jsonGenerator.writeRaw(highSurrogate);
            jsonGenerator.writeRaw(lowSurrogate);

            jsonGenerator.writeEndObject();
            jsonGenerator.close();

            // Fail if no exception is thrown
            fail("Expected JsonGenerationException due to surrogate split was not thrown");

        } catch (JsonGenerationException e) {
            // Expecting this exception
            System.out.println("Expected JsonGenerationException: " + e.getMessage());
        } catch (IOException e) {
            // Handle/propagate any unexpected exception
            e.printStackTrace();
            fail("Unexpected IOException: " + e.getMessage());
        } finally {
            if (jsonGenerator != null) {
                try {
                    jsonGenerator.close();
                } catch (IOException e) {
                    // Ignore exception during cleanup
                }
            }
        }
    }
}
