
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import static org.junit.Assert.fail;

public class TarArchiveInputStreamTest {
    
    @Test
    public void testBigUserIdValue() {
        // This is a sample demonstration, you would need a real tar file with a large UID
        // Prepare a simple tar entry with a large UID
        byte[] tarContent = createTarWithLargeUid();

        try (ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(tarContent);
             TarArchiveInputStream tarInput = new TarArchiveInputStream(byteArrayInputStream)) {
            
            TarArchiveEntry entry = tarInput.getNextTarEntry();
            while (entry != null) {
                System.out.println("Reading Entry: " + entry.getName());
                entry = tarInput.getNextTarEntry();
            }
            
        } catch (IOException e) {
            e.printStackTrace();
            fail("Exception occurred: " + e.getMessage());
        }
    }
    
    private byte[] createTarWithLargeUid() {
        try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {
            // This dummy tar content represents a file with a large UID
            // You might need to create an actual tar file to fully test.
            byte[] header = new byte[512];
            String name = "test.txt";
            System.arraycopy(name.getBytes(), 0, header, 0, name.length());

            String largeUid = "62410554"; // Simulate a big user-id
            System.arraycopy(largeUid.getBytes(), 0, header, 108, largeUid.length());

            // Writing a simplistic header (not fully tar-file compliant)
            out.write(header);

            // Adding an empty block representing the file's content (optional)
            out.write(new byte[512]);

            // Return the tar content
            return out.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException("Failed to create test tar with large UID", e);
        }
    }
}
