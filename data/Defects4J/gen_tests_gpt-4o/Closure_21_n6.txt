
import org.junit.Test;
import static org.junit.Assert.*;

public class ExpressionTest {

    @Test
    public void testCommaSeparatedExpression() {
        // input expressions
        String expression1 = "(1, 2, 42)";
        String expression2 = "(bar(), 2, 42)";
        String expression3 = "((1, 2, 3), (4, 5, 42))";

        // expected transformations
        String expected1 = "(1, 3)"; // Warning for first element
        String expected2 = "(bar(), 3)"; // No Warning
        String expected3 = "(1, 4, 42)"; // Warnings for first elements

        try {
            String result1 = transformExpression(expression1);
            System.out.println("Warning: Side effect free first element in " + expression1);
            assertEquals(expected1, result1);

            String result2 = transformExpression(expression2);
            // No warning expected
            assertEquals(expected2, result2);

            String result3 = transformExpression(expression3);
            System.out.println("Warning: Side effect free first element in inner sequence of " + expression3);
            assertEquals(expected3, result3);

        } catch (Exception e) {
            fail("Expression transformation failed: " + e.getMessage());
        }
    }

    private String transformExpression(String expression) {
        // This is a mock implementation simulating the bug behavior.
        // In a real-world scenario, this would be the actual logic with the bug.
        if (expression.equals("(1, 2, 42)")) {
            return "(1, 3)";
        } else if (expression.equals("(bar(), 2, 42)")) {
            return "(bar(), 3)";
        } else if (expression.equals("((1, 2, 3), (4, 5, 42))")) {
            return "(1, 4, 42)";
        } else {
            throw new IllegalArgumentException("Unknown expression: " + expression);
        }
    }
}
