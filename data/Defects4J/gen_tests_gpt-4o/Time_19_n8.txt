
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TestTimeZoneDST {

    @Test
    public void testAmbiguousTimeDuringDST() {
        DateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID("Europe/London"));
        DateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID("Europe/Oslo"));
        DateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID("Europe/Helsinki"));

        // Assert times should be the same when converted to UTC
        assertEquals(britishDate.toInstant(), norwDate.toInstant());
        assertEquals(norwDate.toInstant(), finnishDate.toInstant());

        // Check the specific time representation in London timezone
        assertEquals("2011-10-30T01:59:00.000+01:00", britishDate.toString());
    }
}
