
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.MappingIterator;
import org.junit.Test;
import java.util.List;
import static org.junit.Assert.*;

public class ObjectReaderTest {

    @Test
    public void testReadValuesErrorRecovery() {
        String json = "[{\"valid\": true}, {invalid json}, {\"another_valid\": true}]";
        ObjectMapper mapper = new ObjectMapper();

        try {
            MappingIterator<Object> iterator = mapper.readerFor(Object.class).readValues(json);
            List<Object> values = iterator.readAll();

            // Since the second element is invalid JSON, we should not get here
            fail("Expected a JsonProcessingException due to malformed JSON in the input");

        } catch (JsonProcessingException e) {
            // We expect an error here, let's assert the error position
            String msg = e.getOriginalMessage();
            assertTrue("Unexpected error message: " + msg, msg.contains("Unexpected character"));
        }
    }
}
