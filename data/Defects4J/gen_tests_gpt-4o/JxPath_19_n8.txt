
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.junit.Test;
import org.w3c.dom.Document;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class JXPathNamespaceTest {

    @Test
    public void testIteratePointersWithMultiplePrefixes() throws Exception {
        // Parse the XML document
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();
        String xmlContent = "<a:doc xmlns:a=\"ns\">"
                + "<a:elem />"
                + "<b:elem xmlns:b=\"ns\" />"
                + "</a:doc>";

        Document document = builder.parse(new java.io.ByteArrayInputStream(xmlContent.getBytes()));

        // Create a JXPathContext with the document
        JXPathContext context = JXPathContext.newContext(document);

        // Iterate over elements with XPath expression using namespace prefixes
        List<Pointer> pointers = new ArrayList<>();
        context.iteratePointers("//*").forEachRemaining(pointers::add);

        // Verify if both elements are correctly iterated
        // Expected size = 2, since there are two 'elem' elements in the same namespace
        assertEquals(2, pointers.size());
        
        // Names of the node (Should reflect the different prefixes but same local name)
        assertEquals("a:elem", pointers.get(0).getNode().getNodeName());
        assertEquals("b:elem", pointers.get(1).getNode().getNodeName());
    }
}
