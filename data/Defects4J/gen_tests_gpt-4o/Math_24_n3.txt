
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerNotReturningBestPoint() {
        // Creating a simple quadratic function (concave up)
        UnivariateFunction function = x -> -(x - 2) * (x - 2) + 4; // Maximum at x = 2

        // Using BrentOptimizer with a relative tolerance and absolute tolerance
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Search within the interval [0, 4]
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(1000),
            new UnivariateObjectiveFunction(function),
            SearchInterval.of(0, 4));

        double optimalX = result.getPoint();
        double optimalY = result.getValue();

        // Check if the optimal value returned by the optimizer is as expected
        // The actual maximum point for this function is (2, 4)
        assertTrue("Optimizer did not return the exact maximum point. Expected x = 2, but got x = " 
                   + optimalX, Math.abs(optimalX - 2) < 1e-6);
        assertTrue("Optimizer did not return the correct function value. Expected y = 4, but got y = " 
                   + optimalY, Math.abs(optimalY - 4) < 1e-6);
    }
}
