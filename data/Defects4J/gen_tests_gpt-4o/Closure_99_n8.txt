
package com.example;

import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import com.google.javascript.rhino.Node;

import java.util.List;

public class PrototypeWarningTest {

    public static void main(String[] args) {
        String externsCode = ""
                + "/** @interface */\n"
                + "function MyParent() {}\n"
                + "/** @param {*} a */\n"
                + "MyParent.prototype.MyMethod = function(a) {}\n";

        String sourceCode = ""
                + "/**\n"
                + " * @constructor\n"
                + " * @implements {MyParent}\n"
                + " */\n"
                + "function MyClass() {}\n"
                + "MyClass.prototype[\"MyMethod\"] = function(a) {\n"
                + "  this.a2 = a;\n"
                + "};\n"
                + "window[\"MyClass\"] = MyClass;\n";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(LanguageMode.ECMASCRIPT5);
        options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);
        options.setWarningLevel(DiagnosticGroups.MISSING_PROVIDE, CheckLevel.OFF);
        options.setWarningLevel(DiagnosticGroups.MISSING_REQUIRE, CheckLevel.OFF);
        options.setWarningLevel(DiagnosticGroups.CONFORMANCE_VIOLATIONS, CheckLevel.OFF);
        options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.OFF);

        List<SourceFile> externs = List.of(SourceFile.fromCode("externs.js", externsCode));
        List<SourceFile> inputs = List.of(SourceFile.fromCode("input.js", sourceCode));

        compiler.compile(externs, inputs, options);

        // Check if the specific warning related to the global 'this' and unimplemented interface method is present
        for (JSError warning : compiler.getWarnings()) {
            System.out.println(warning.toString());
        }

        if (compiler.getWarningCount() > 0) {
            System.out.println("Warnings found: " + compiler.getWarningCount());
        } else {
            System.out.println("No warnings.");
        }
    }
}
