public void testPrototypesWithQuotesWarning() {
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.VERBOSE);
    options.setWarningLevel(DiagnosticGroups.MISSING_PROPERTIES, CheckLevel.VERBOSE);

    Compiler compiler = new Compiler();
    String code =
        "/** @constructor */\n" +
        "function MyClass() {}\n" +
        "MyClass.prototype[\"MyMethod\"] = function(a) {\n" +
        "    this.a = a;\n" +
        "};\n" +
        "window[\"MyClass\"] = MyClass;\n";

    String externs = 
        "/** @interface */\n" +
        "function MyParent() {}\n" +
        "/** @param {*} a */\n" +
        "MyParent.prototype.MyMethod = function(a) {}\n";

    compiler.compile(
        SourceFile.fromCode("externs", externs),
        SourceFile.fromCode("testcode", code),
        options
    );

    assertTrue(compiler.hasWarnings());
    assertEquals(2, compiler.getWarnings().length);
    assertTrue(compiler.getWarnings()[0].getDescription().contains("dangerous use of the global this object"));
    assertTrue(compiler.getWarnings()[1].getDescription().contains("property MyMethod on interface MyParent is not implemented by type MyClass"));
}