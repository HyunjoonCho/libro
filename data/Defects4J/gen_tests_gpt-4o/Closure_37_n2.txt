
import static org.junit.Assert.fail;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

public class IncompleteFunctionDefinitionTest {
    
    @Test
    public void testIncompleteFunctionDefinitionWithIdeMode() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setIdeMode(true);

        // JavaScript code with incomplete function definition
        String code = "f f f;\nfunction t";

        SourceFile input = SourceFile.fromCode("test.js", code);
        try {
            Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);
            // Here we should define expectations, since the reported failure is an internal compiler error
            // we expect the compilation to not succeed.
            if (result.success) {
                fail("The compiler should not successfully compile the incomplete function definition.");
            } else {
                // If there are errors, print them out
                for (JSError error : compiler.getErrors()) {
                    System.out.println(error);
                }
                // The test is successful in reproducing the error
            }
        } catch (RuntimeException e) {
            // If there's an internal compiler error, it's what the bug report is about
            System.out.println("Internal compiler error occurred: " + e.getMessage());
        }
    }
}
