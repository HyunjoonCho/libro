script
const {compile} = require('google-closure-compiler-js').compile;

function compileCode(source) {
    const flags = {
        jsCode: [{src: source}],
        languageIn: 'ECMASCRIPT5',
        languageOut: 'ECMASCRIPT5',
        compilationLevel: 'ADVANCED'  // You can set this to WHITESPACE_ONLY or SIMPLE if needed, but ADVANCED shows optimization errors
    };

    const out = compile(flags);
    
    if (out.errors.length > 0) {
        console.error('Compilation failed:', out.errors);
        return null;
    }
    return out.compiledCode;
}

function testIsFunctionCompilation() {
    const originalSource1 = `
        var isFunction = function(functionToCheck) {
            var getType;
            getType = {}; //just an object
            return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';
        };
    `;

    const originalSource2 = `
        var isFunction = function(functionToCheck) {
            var getType;
            getType = []; //now it's an array 
            return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]';
        };
    `;

    const compiled1 = compileCode(originalSource1);
    const compiled2 = compileCode(originalSource2);

    console.log('Compiled with object:', compiled1);
    console.log('Compiled with array:', compiled2);

    // Test and compare results
    if (compiled1.match(/\[object\sFunction\]\s===\s\(void\s0\)\.apply/)) {
        console.error('Error: Compiled incorrectly with object.');
    } else {
        console.log('Success: Compiled correctly with object.');
    }

    if (compiled2.match(/\[object\sFunction\]\s===\sb\.toString\.apply/)) {
        console.log('Success: Compiled correctly with array.');
    } else {
        console.error('Error: Compiled incorrectly with array.');
    }
}

testIsFunctionCompilation();
