public void testConstTypeCastWarning() {
    String code = "/**\n" +
                  " * Class defining an interface with two numbers.\n" +
                  " * @interface\n" +
                  " */\n" +
                  "function TwoNumbers() {}\n" +
                  "/** @type number */\n" +
                  "TwoNumbers.prototype.first;\n" +
                  "/** @type number */\n" +
                  "TwoNumbers.prototype.second;\n" +
                  "/** @const */ var SOME_DEFAULT =\n" +
                  " /** @type {TwoNumbers} */ ({first: 1, second: 2});\n" +
                  "/**\n" +
                  " * Class with a two number member.\n" +
                  " * @constructor\n" +
                  " */\n" +
                  "function HasTwoNumbers() {\n" +
                  " /** @type {TwoNumbers} */\n" +
                  " this.twoNumbers = this.getTwoNumbers();\n" +
                  "}\n" +
                  "/**\n" +
                  " * Get the default two numbers.\n" +
                  " * @return {TwoNumbers}\n" +
                  " */\n" +
                  "HasTwoNumbers.prototype.getTwoNumbers = function() {\n" +
                  " return SOME_DEFAULT;\n" +
                  "};";
    
    CompilerOptions options = new CompilerOptions();
    options.setLanguageIn(LanguageMode.ECMASCRIPT5);
    options.setLanguageOut(LanguageMode.ECMASCRIPT5);
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

    Compiler compiler = new Compiler();
    Result result = compiler.compile(SourceFile.fromCode("externs.js", ""),
                                     SourceFile.fromCode("test.js", code), 
                                     options);

    assertFalse(result.success);
    assertTrue(compiler.getWarnings().size() > 0);
    assertEquals("type-related warning", compiler.getWarnings().get(0).getType().key);
}