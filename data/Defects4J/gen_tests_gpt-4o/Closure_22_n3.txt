public void testClassifyCommaExpressions() {
    // Test case 1: Expect a warning on the first element, transformation should occur
    Expression expr1 = ExpressionParser.parse("foo((1, 2, 42))");
    List<Warning> warnings1 = ExpressionAnalyzer.analyze(expr1);
    assertEquals(1, warnings1.size());
    assertTrue(warnings1.get(0).isOnElement(1));
    Expression transformed1 = ExpressionTransformer.transform(expr1);
    assertEquals("foo((1, 3))", transformed1.toString());

    // Test case 2: No warning expected as first element has side effects
    Expression expr2 = ExpressionParser.parse("foo((bar(), 2, 42))");
    List<Warning> warnings2 = ExpressionAnalyzer.analyze(expr2);
    assertTrue(warnings2.isEmpty());
    Expression transformed2 = ExpressionTransformer.transform(expr2);
    assertEquals("foo((bar(), 3))", transformed2.toString());
    
    // Test case 3: Warnings expected for first elements of inner sequences, transformation should occur
    Expression expr3 = ExpressionParser.parse("foo(((1, 2, 3), (4, 5, 42)))");
    List<Warning> warnings3 = ExpressionAnalyzer.analyze(expr3);
    assertEquals(2, warnings3.size());
    assertTrue(warnings3.get(0).isOnElement(1));
    assertTrue(warnings3.get(1).isOnElement(4));
    Expression transformed3 = ExpressionTransformer.transform(expr3);
    assertEquals("foo((1, 4, 42))", transformed3.toString());
}