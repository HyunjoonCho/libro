
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;

public class ExpressionAnalyzerTest {

    // Mock method to simulate side-effect checking
    private boolean hasSideEffects(List<Object> sequence) {
        // Simulates that only "bar()" has side-effects in our mock scenario
        return sequence.contains("bar()");
    }

    // Mock method to simulate the warning system
    private boolean isProblematic(List<Object> sequence) {
        if (sequence.isEmpty()) return false;

        for (int i = 0; i < sequence.size() - 1; i++) {
            if (!hasSideEffects(List.of(sequence.get(i)))) {
                return true; // Problematic if free of side effects
            }
        }
        return false;
    }

    @Test
    public void testExpressionWarningSystem() {
        assertTrue("Should warn about non-side-effect free first element.", 
            isProblematic(List.of(1, 2, 42))); // Simulates foo((1, 2, 42))

        assertFalse("Should not warn if initial sequence element has side effects.", 
            isProblematic(List.of("bar()", 2, 42))); // Simulates foo((bar(), 2, 42))

        assertTrue("Should warn about non-side-effect free first element of inner sequences.", 
            isProblematic(List.of(1, List.of(4, 5, 42)))); // Simulates foo(((1, 2, 3), (4, 5, 42)))
    }
}
