
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.util.Arrays;

public class TarArchivePaxHeaderTest {

    @Test
    public void testPaxHeaderWithTrailingSlash() throws Exception {
        // Simulated PAX header with a trailing slash in the name
        String paxHeaderName = "pax-header-entry/";
        byte[] paxHeaderBytes = createPaxHeaderEntry(paxHeaderName, TarArchiveEntry.LF_GNUTYPE_SPARSE);

        try (TarArchiveInputStream tarInput = new TarArchiveInputStream(new ByteArrayInputStream(paxHeaderBytes))) {
            TarArchiveEntry entry = tarInput.getNextTarEntry();

            // Expected behavior: the entry should not be recognized as a directory due to the trailing slash
            // if it's a valid PAX header
            assertNotNull("Entry should not be null.", entry);
            assertEquals("Entry name should be as expected.", paxHeaderName, entry.getName());
            assertTrue("Entry should be recognized as a PAX header.", entry.isPaxHeader());

            // The fix should ensure that this PAX header is not treated as a directory entry
            assertFalse("Entry should not be treated as directory.", entry.isDirectory());
        }
    }

    private byte[] createPaxHeaderEntry(String name, byte linkFlag) {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        // Write a minimal tar block for a PAX header with the specified link flag and name
        // This is a placeholder to simulate the entry with the specific conditions as needed for the test
        // Filling it with simple data for simplicity
        byte[] nameBytes = name.getBytes();
        byte[] block = new byte[512];
        System.arraycopy(nameBytes, 0, block, 0, nameBytes.length);
        block[156] = linkFlag; // Set the link flag to PAX header
        baos.write(block, 0, block.length);
        return baos.toByteArray();
    }
}
