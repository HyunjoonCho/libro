
import static org.junit.Assert.*;
import org.junit.Test;

public class SideEffectsAnalysisTest {
    
    private boolean functionCalledWithSideEffect = false;

    class Foo {
        private String location;

        public Foo() {
            Runnable task = () -> {
                // Simulated side effect that would be removed.
                System.out.println("Navigating to: " + this.location);
            };
            // Simulating setTimeout using a separate thread.
            new Thread(task).start();
        }

        public void setLocation(String loc) {
            this.location = loc;
            functionCalledWithSideEffect = true; // Simulate the side-effect
        }
    }

    @Test
    public void testFunctionWithSideEffectNotRemoved() throws InterruptedException {
        Foo foo = new Foo();
        foo.setLocation("http://www.google.com/");
        
        // Allow some time for the side-effect (thread) to execute
        Thread.sleep(100);

        // Check if the function with side effects was effectively "called".
        assertTrue("The function with a side effect was incorrectly removed!", functionCalledWithSideEffect);
    }
}
