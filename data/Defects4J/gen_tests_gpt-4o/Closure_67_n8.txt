public void testAdvancedCompilationFunctionRenaming() {
    String expectedOutput = "function a() {\n" +
                            "    this.a = 1;\n" +
                            "}\n" +
                            "a.prototype.func1 = a.prototype.b = function() {\n" +
                            "    this.a = 2;\n" +
                            "    this.c();\n" +
                            "};\n" +
                            "window.A = a;";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

    String inputJS = "function A() {\n" +
                     "    this._x = 1;\n" +
                     "}\n" +
                     "A.prototype['func1'] = \n" +
                     "A.prototype.func1 = function() {\n" +
                     "    this._x = 2;\n" +
                     "    this.func2();\n" +
                     "};\n" +
                     "A.prototype.func2 = function() {\n" +
                     "    this._x = 3;\n" +
                     "    this.func3();\n" +
                     "};\n" +
                     "window['A'] = A;";

    SourceFile extern = SourceFile.fromCode("externs.js", "");
    SourceFile input = SourceFile.fromCode("input.js", inputJS);

    Result result = compiler.compile(extern, input, options);

    String compiledSource = compiler.toSource();
    assertFalse("Compilation should not succeed without errors", result.success);
    assertEquals("Compiled source should match expected output", expectedOutput, compiledSource);
}