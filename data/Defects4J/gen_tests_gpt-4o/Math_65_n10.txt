
import org.apache.commons.math3.optim.AbstractLeastSquaresOptimizer;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class AbstractLeastSquaresTest {

    @Test
    public void testChiSquareCalculation() {
        AbstractLeastSquaresOptimizer optimizer = new AbstractLeastSquaresOptimizer() {
            @Override
            public double[] getStartPoint() {
                return new double[0];
            }

            @Override
            public double[] optimize() {
                return new double[0];
            }
        };

        double[] observations = {2.0, 3.0, 5.0};
        double[] residuals = {1.0, 1.5, -0.5};
        double[] weights = {1.0, 0.5, 2.0};

        optimizer.setObservations(observations);
        optimizer.setResiduals(residuals);
        optimizer.setResidualsWeights(weights);

        double expectedChiSquare = (weights[0] * residuals[0] * residuals[0]) +
                                   (weights[1] * residuals[1] * residuals[1]) +
                                   (weights[2] * residuals[2] * residuals[2]);

        assertEquals(expectedChiSquare, optimizer.getChiSquare(), 1e-10);
    }
}
