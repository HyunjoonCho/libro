
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlRootElement;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

@JacksonXmlRootElement(localName = "myname")
public class XMLTest {

    @Test
    public void testJacksonXmlRootElementWithMultipleXmlMappers() throws Exception {
        // Set up the XmlMapper that respects annotations
        final ObjectMapper xmlMapper = new XmlMapper();
        
        // Set up a second XmlMapper that does not use annotations
        final ObjectMapper noAnnotationsXmlMapper = xmlMapper.copy()
                .configure(MapperFeature.USE_ANNOTATIONS, false)
                .setSerializationInclusion(JsonInclude.Include.NON_NULL);

        // Serialize with the XmlMapper without annotations
        String noAnnotationsXml = noAnnotationsXmlMapper.writeValueAsString(new XMLTest());
        // Serialize with the XmlMapper using annotations
        String annotatedXml = xmlMapper.writeValueAsString(new XMLTest());
        
        // Verify outputs
        System.out.println(noAnnotationsXml);
        System.out.println(annotatedXml);

        // Verify that the annotated XmlMapper uses the class name by default
        assertTrue(noAnnotationsXml.contains("<XMLTest/>"));
        // The annotated XmlMapper should use the localName specified by the JacksonXmlRootElement
        assertTrue(annotatedXml.contains("<myname/>"));
    }

    public static void main(String[] args) throws Exception {
        XMLTest test = new XMLTest();
        test.testJacksonXmlRootElementWithMultipleXmlMappers();
    }
}
