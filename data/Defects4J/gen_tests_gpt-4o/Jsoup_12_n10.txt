
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.junit.Test;
import static org.junit.Assert.*;

public class JsoupSelectorTest {

    @Test(expected = org.jsoup.select.Selector.SelectorParseException.class)
    public void testDivTableSelectorWithRegex() {
        Document doc = Jsoup.parse("<div><table class='x'></table></div>");
        // This should throw a SelectorParseException
        Elements elements = doc.select("div table[class~=x|y]");
    }

    @Test(expected = org.jsoup.select.Selector.SelectorParseException.class)
    public void testDivDirectChildTableSelectorWithRegex() {
        Document doc = Jsoup.parse("<div><table class='x'></table></div>");
        // This should throw a SelectorParseException
        Elements elements = doc.select("div > table[class~=x|y]");
    }

    @Test(expected = org.jsoup.select.Selector.SelectorParseException.class)
    public void testDivAdjacentSiblingTableSelectorWithRegex() {
        Document doc = Jsoup.parse("<div></div><table class='x'></table>");
        // This should throw a SelectorParseException
        Elements elements = doc.select("div + table[class~=x|y]");
    }

    @Test(expected = org.jsoup.select.Selector.SelectorParseException.class)
    public void testDivGeneralSiblingTableSelectorWithRegex() {
        Document doc = Jsoup.parse("<div></div><table class='x'></table>");
        // This should throw a SelectorParseException
        Elements elements = doc.select("div ~ table[class~=x|y]");
    }

    @Test
    public void testDivTableSelectorWithoutCombinator() {
        Document doc = Jsoup.parse("<div><table class='x'></table></div>");
        // This should not throw an exception
        Elements elements = doc.select("div, table[class~=x|y]");
        assertNotNull(elements);
    }
}
