
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

public class ClosureCompilerTest {

    @Test
    public void testStringEscapingIncreaseSize() throws IOException {
        String originalCode = "var patterns = 'эта строка содержит не-ASCII символы и должна оставаться неэкранированной';";
        
        // Simulate the size of the original files
        int originalSize = originalCode.getBytes(StandardCharsets.UTF_8).length;

        // Setting up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Set the compilation level
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Run the compiler
        SourceFile input = SourceFile.fromCode("input.js", originalCode);
        Result result = compiler.compile(SourceFile.NONE, input, options);

        // Get the output
        String minifiedCode = compiler.toSource();

        // Check if the minified code size is larger than the original
        int minifiedSize = minifiedCode.getBytes(StandardCharsets.UTF_8).length;
        
        // Simulate a test failure if minified size is larger than the original
        assertTrue("Minified size should not be larger than the original size", minifiedSize <= originalSize);

        // Print the sizes for debugging
        System.out.println("Original size: " + originalSize);
        System.out.println("Minified size: " + minifiedSize);
    }
}
