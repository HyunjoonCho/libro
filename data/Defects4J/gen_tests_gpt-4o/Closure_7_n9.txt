
import org.junit.Test;
import static org.junit.Assert.*;

public class GoogTest {

    public static boolean isDef(Object obj) {
        return obj != null;
    }

    public static boolean isFunction(Object obj) {
        return obj instanceof Runnable; // Simplistic simulation for test purposes
    }

    public static boolean isBoolean(Object obj) {
        return obj instanceof Boolean;
    }

    public static boolean isString(Object obj) {
        return obj instanceof String;
    }

    public static boolean isArray(Object obj) {
        return obj instanceof Object[] || obj instanceof int[]
            || obj instanceof char[] || obj instanceof double[];
    }

    public static boolean isMatched(Object object) {
        if (isDef(object)) {
            if (isFunction(object)) {
                // return object();
            } else if (isBoolean(object)) {
                // return object;
            } else if (isString(object)) {
                // return test.isDef(object);
            } else if (isArray(object)) {
                int i = ((Object[]) object).length;
                return i >= 0; // simply to use 'i' in some way
            }
        }
        return false;
    }

    @Test
    public void testIsMatchedWithArray() {
        Object[] array = new Object[5];
        assertTrue(isMatched(array)); // Should not cause any type warnings
    }

    @Test(expected = ClassCastException.class)
    public void testIsMatchedWithNonArray() {
        Integer number = 123;
        isMatched(number); // Should throw an exception as length property won't be defined
    }
}
