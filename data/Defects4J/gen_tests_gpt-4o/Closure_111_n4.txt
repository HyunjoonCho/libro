
import static org.junit.Assert.fail;

import org.junit.Test;

public class ClosureCompilerTest {

    /**
     * Simulate a Closure Compiler Google API function to check if the object is an array.
     */
    public boolean googIsArray(Object object) {
        return object instanceof Object[];
    }

    /**
     * Simulate the function described in the bug report.
     * The function should only cast to Array if goog.isArray confirms it.
     */
    public Object test(Object object) {
        if (googIsArray(object)) {
            // Intentional type casting to demonstrate type erasure issue
            Object[] x = (Object[]) object;
            return x;
        }
        return null;
    }

    @Test
    public void testClosureCompilerIssue107() {
        Object[] validArray = new Object[]{"value1", "value2"};
        String invalidValue = "not an array";

        // Expected to work without any issue
        try {
            Object[] result = (Object[]) test(validArray);
            if (result == null) {
                fail("Expected a valid cast to Object[], but got null.");
            }
        } catch (ClassCastException e) {
            // If we get here, there's a failure in type hinting
            fail("Expected validArray to be castable to Object[], got ClassCastException.");
        }

        // Expected to fail, as the input is not an array
        try {
            test(invalidValue); // This should not be cast, but we need to simulate the check
            fail("Expected a failure when casting non-array type to array.");
        } catch (ClassCastException expected) {
            // This is expected because the input is not an array
        }
    }
}
