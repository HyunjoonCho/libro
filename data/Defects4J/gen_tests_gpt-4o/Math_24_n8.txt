
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.MaxEval;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.GoalType;
import org.junit.Test;
import static org.junit.Assert.*;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerReturnsBestPoint() {
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                // Simple quadratic function with a clear maximum
                return -(x - 2) * (x - 2) + 4;
            }
        };

        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        SearchInterval interval = new SearchInterval(0, 4);
        UnivariatePointValuePair result = optimizer.optimize(
                new MaxEval(100),
                new UnivariateObjectiveFunction(function),
                GoalType.MAXIMIZE,
                interval
        );

        // Expecting the maximum point around x = 2
        assertEquals(2.0, result.getPoint(), 1e-5);
        assertEquals(4.0, result.getValue(), 1e-5);
    }
}
