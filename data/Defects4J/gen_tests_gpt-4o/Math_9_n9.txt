
import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class LineTest {

    // Mock Vector3D class
    public static class Vector3D {
        double x;
        double y;
        double z;

        public Vector3D(double x, double y, double z) {
            this.x = x;
            this.y = y;
            this.z = z;
        }

        public Vector3D negate() {
            return new Vector3D(-x, -y, -z);
        }

        @Override
        public String toString() {
            return "Vector3D{" + "x=" + x + ", y=" + y + ", z=" + z + '}';
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) return true;
            if (obj == null || getClass() != obj.getClass()) return false;
            Vector3D vector3D = (Vector3D) obj;
            return Double.compare(vector3D.x, x) == 0 &&
                    Double.compare(vector3D.y, y) == 0 &&
                    Double.compare(vector3D.z, z) == 0;
        }
    }

    // Mock Line class
    public static class Line {
        private Vector3D point;
        private Vector3D direction;

        public Line(Vector3D point, Vector3D direction) {
            this.point = point;
            this.direction = direction;
        }

        public void revert() {
            // Faulty revert implementation
            // direction = new Vector3D(-direction.x, -direction.y, -direction.z);
            
            // Proposed fix using Vector3D.negate()
            direction = direction.negate();
        }

        public Vector3D getDirection() {
            return direction;
        }
    }

    @Test
    public void testRevertDirection() {
        Vector3D point = new Vector3D(1000000.0, 1000000.0, 1000000.0);
        Vector3D direction = new Vector3D(1.123456789012345, 1.123456789012345, 1.123456789012345);
        Line line = new Line(point, direction);

        line.revert();
        Vector3D expectedDirection = new Vector3D(-1.123456789012345, -1.123456789012345, -1.123456789012345);

        assertEquals("Direction should be negated precisely", expectedDirection, line.getDirection());
    }
}
