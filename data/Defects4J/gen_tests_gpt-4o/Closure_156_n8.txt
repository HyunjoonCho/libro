public void testCompilerCrashOnAssignStatement() {
    String code = "/** @constructor\n" +
                  " * @param {...Object} params\n" +
                  " */\n" +
                  "dojox.gfx.shape.Shape = function(params) {};\n" +
                  "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ {});";
    
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    
    try {
        Node root = compiler.parse(SourceFile.fromCode("test.js", code));
        compiler.compile(ImmutableList.of(), ImmutableList.of(SourceFile.fromCode("test.js", code)), options);
        fail("Expected RuntimeException due to compiler error");
    } catch (RuntimeException e) {
        assertTrue(e.getMessage().contains("INTERNAL COMPILER ERROR"));
    }
}