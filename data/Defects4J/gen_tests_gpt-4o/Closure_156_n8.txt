
import com.google.javascript.jscomp.*;

import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerCrashTest {

    @Test
    public void testCompilerCrashesOnAssignment() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Sample code to reproduce the issue
        String code = "/** @constructor \n" +
                      " * @param {...Object} params\n" +
                      " */\n" +
                      "dojox.gfx.shape.Shape = function(params) {};\n" +
                      "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, {});";

        // Compile the code
        JSSourceFile extern = JSSourceFile.fromCode("extern", "");
        JSSourceFile input = JSSourceFile.fromCode("input", code);
        
        // Perform the compilation
        Result result = compiler.compile(extern, input, options);

        // Check if the compilation failed
        assertFalse("The compilation should fail due to an internal error.", result.success);
        
        // Check if the error message contains "INTERNAL COMPILER ERROR"
        assertTrue("Error message should contain 'INTERNAL COMPILER ERROR'.",
                compiler.getErrors()[0].description.contains("INTERNAL COMPILER ERROR"));
    }
}
