
import org.junit.Test;
import javax.script.*;
import java.io.*;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerBugTest {

    private static final String CLOSURE_COMPILER_JAR = "path/to/closure-compiler.jar";

    @Test
    public void testWeirdObjectLiteralError() throws Exception {
        String script = 
            "/**\n" +
            " * @param {{text: string}} opt_data\n" +
            " * @return {string}\n" +
            " */\n" +
            "function temp1(opt_data) {\n" +
            "  return opt_data.text;\n" +
            "}\n" +
            "\n" +
            "/**\n" +
            " * @param {{activity: (boolean|number|string|null|Object)}} opt_data\n" +
            " * @return {string}\n" +
            " */\n" +
            "function temp2(opt_data) {\n" +
            "    /** @notypecheck */\n" +
            "    function __inner() {\n" +
            "      return temp1(opt_data.activity);\n" +
            "    }\n" +
            "    return __inner();\n" +
            "}\n" +
            "\n" +
            "/**\n" +
            " * @param {{n: number, text: string, b: boolean}} opt_data\n" +
            " * @return {string}\n" +
            " */\n" +
            "function temp3(opt_data) {\n" +
            "  return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';\n" +
            "}\n" +
            "\n" +
            "function callee() {\n" +
            "  var output = temp3({\n" +
            "    n: 0,\n" +
            "    text: 'a string',\n" +
            "    b: true\n" +
            "  });\n" +
            "  alert(output);\n" +
            "}\n" +
            "\n" +
            "callee();";

        File scriptFile = File.createTempFile("repro", ".js");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(scriptFile))) {
            writer.write(script);
        }

        ProcessBuilder processBuilder = new ProcessBuilder(
            "java", "-jar", CLOSURE_COMPILER_JAR,
            "--compilation_level=ADVANCED_OPTIMIZATIONS",
            "--jscomp_error=accessControls",
            "--jscomp_error=checkTypes",
            "--jscomp_error=checkVars",
            "--js", scriptFile.getAbsolutePath()
        );

        Process process = processBuilder.start();
        process.waitFor();

        try (BufferedReader errorReader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {
            String line;
            boolean hasError = false;
            while ((line = errorReader.readLine()) != null) {
                if (line.contains("ERROR")) {
                    hasError = true;
                }
            }
            assertTrue("Closure Compiler should report type mismatch error", hasError);
        }
    }
}
