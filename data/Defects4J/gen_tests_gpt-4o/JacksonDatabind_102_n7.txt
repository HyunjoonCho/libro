
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import org.junit.Test;

import java.sql.Date;
import java.text.SimpleDateFormat;

import static org.junit.Assert.assertEquals;

public class SqlDateSerializerTest {

    @Test
    public void testCustomFormatForSqlDate() throws Exception {
        // Create an ObjectMapper
        ObjectMapper mapper = new ObjectMapper();
        
        // Attempt to set global format for java.sql.Date
        mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
        
        // Test date
        Date sqlDate = Date.valueOf("2023-10-01");
        
        // Serialize using ObjectMapper
        String serializedDate = mapper.writeValueAsString(sqlDate);
        
        // Test the serialization output
        assertEquals("\"2023-10-01\"", serializedDate);
    }

    @Test
    public void testCustomFormatForSqlDateWithWorkaround() throws Exception {
        // Create an ObjectMapper
        ObjectMapper mapper = new ObjectMapper();
        
        // Register a SimpleModule with custom SqlDateSerializer
        mapper.registerModule(new SimpleModule() {
            {
                addSerializer(
                        java.sql.Date.class,
                        new SqlDateSerializer().withFormat(false, new SimpleDateFormat("yyyy-MM-dd"))
                );
            }
        });

        // Test date
        Date sqlDate = Date.valueOf("2023-10-01");
        
        // Serialize using ObjectMapper
        String serializedDate = mapper.writeValueAsString(sqlDate);
        
        // Test the serialization output
        assertEquals("\"2023-10-01\"", serializedDate);
    }
}
