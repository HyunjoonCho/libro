
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.NonNegativeConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.linear.PointValuePair;

import org.junit.Test;
import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Arrays;

public class SimplexSolverTest {

    @Test
    public void testRestrictNonNegative() {
        // Define the objective function: minimize x + y
        LinearObjectiveFunction function = new LinearObjectiveFunction(new double[]{1, 1, 0}, 0);

        // Define the constraints: x = 1
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0, 0}, Relationship.EQ, 1));

        // Create a simplex solver and solve the optimization problem with non-negative constraint
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(function, constraints, GoalType.MINIMIZE, new NonNegativeConstraint(true));

        // Get the solution
        double[] point = solution.getPoint();

        // Assert on the values of x and y
        assertEquals(1.0, point[0], 1e-6); // x should be 1
        assertEquals(0.0, point[1], 1e-6); // y should be 0, not -1 as reported in the bug
    }
}
