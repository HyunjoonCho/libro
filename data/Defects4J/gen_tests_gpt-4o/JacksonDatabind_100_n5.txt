
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.TextNode;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import com.fasterxml.jackson.core.Base64Variants;
import com.fasterxml.jackson.core.JsonParser;
import org.junit.Assert;
import org.junit.Test;

import java.io.IOException;

public class TreeTraversingParserTest {

    @Test
    public void testBase64VariantIgnored() throws IOException {
        // Test data: base64 encoded string using Base64Variants.MODIFIED_FOR_URL
        String base64UrlEncodedText = "SGVsbG8tV29ybGQ";

        // Expected byte array with Base64Variants.MODIFIED_FOR_URL
        byte[] expectedBytes = Base64Variants.MODIFIED_FOR_URL.decode(base64UrlEncodedText);

        // Create a TextNode with the encoded data
        JsonNode textNode = new TextNode(base64UrlEncodedText);

        // Create a TreeTraversingParser with the text node
        TreeTraversingParser parser = new TreeTraversingParser(textNode);

        // Get binary value using the specific Base64 variant
        byte[] actualBytes = parser.getBinaryValue(Base64Variants.MODIFIED_FOR_URL);

        // Check if the actual bytes are equal to the expected bytes
        Assert.assertArrayEquals("The Base64 variant was ignored and decoded incorrectly.", expectedBytes, actualBytes);
    }
}
