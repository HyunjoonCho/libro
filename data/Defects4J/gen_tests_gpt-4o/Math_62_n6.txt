
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.GoalType;
import org.apache.commons.math3.exception.MathIllegalStateException;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerWithoutConvergenceChecker() {
        // Objective function: f(x) = (x - 2)Â²
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        // Expected minimum value and point
        double expectedMinimumX = 2.0;
        double expectedMinimumValue = 0.0;

        // Create an instance of BrentOptimizer with default tolerance values
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        try {
            // Attempt optimization without explicitly setting a convergence checker
            UnivariateObjectiveFunction objectiveFunction = new UnivariateObjectiveFunction(function);
            UnivariatePointValuePair result = optimizer.optimize(objectiveFunction, GoalType.MINIMIZE, 1.0, 3.0);

            assertEquals("Expected x value does not match", expectedMinimumX, result.getPoint(), 1e-8);
            assertEquals("Expected minimum value does not match", expectedMinimumValue, result.getValue(), 1e-8);

        } catch (MathIllegalStateException e) {
            // If the convergence checker is required and not set, an exception may be thrown, but will be caught here.
            // This is expected behavior due to issue in the described bug report.
            System.out.println("Optimization failed due to missing convergence checker: " + e.getMessage());
        }
    }
}
