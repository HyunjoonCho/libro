
import org.apache.commons.cli.*;

import org.junit.Test;
import static org.junit.Assert.*;

public class CommandLineTest {

    @Test
    public void testDefaultArgumentPreventsOverride() {
        // Create an Options object and add an option with an argument
        Options options = new Options();
        Option option = Option.builder("o")
                .longOpt("option")
                .hasArg()
                .desc("An option with a default value")
                .build();
        options.addOption(option);

        // Simulate a CommandLine with a default setting
        // For testing purposes, let's assume that 'defaultValue' is applied
        CommandLineParser parser = new DefaultParser();
        CommandLine cmd = null;
        try {
            cmd = parser.parse(options, new String[]{"--option", "defaultValue"});
        } catch (ParseException e) {
            fail("Exception while parsing default value: " + e.getMessage());
        }

        // At this point, cmd should have a default value for --option
        String defaultValue = cmd.getOptionValue("option");
        assertEquals("defaultValue", defaultValue);

        // Now, simulate command-line input to override the default
        try {
            // This should override the default, but due to the bug, it might not
            cmd = parser.parse(options, new String[]{"--option", "newValue"});
        } catch (ParseException e) {
            fail("Exception while parsing new value: " + e.getMessage());
        }

        // Validate the value is overridden, expect 'newValue' instead of 'defaultValue'
        String overriddenValue = cmd.getOptionValue("option");
        assertEquals("newValue", overriddenValue);
    }
}
