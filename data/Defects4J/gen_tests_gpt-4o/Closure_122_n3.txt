
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.Collections;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

public class ClosureCompilerBugTest {

    @Test
    public void testNonJSDocCommentsHandling() {
        // Source code with a comment that should either be preserved or warned about for wrong syntax
        String jsCode = "/*! @preserve Foo License */\nalert('foo');";
        
        // Setup the compiler with options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setPreserveTypeAnnotations(true); // Ensure preservation of certain types of comments if applicable
        
        // Compile source
        SourceFile input = SourceFile.fromCode("test.js", jsCode);
        Result result = compiler.compile(Collections.emptyList(), Collections.singletonList(input), options);
        
        // Obtain the compiled code and check for the expected behaviors
        String compiledCode = compiler.toSource();
        boolean warning = result.warnings.isEmpty();

        // Check - since we're not expecting the comment to be preserved with /*! syntax, it should generate a warning
        // Ensure it does not preserve the comment and check the alert is present
        assertTrue("Expected warning about annotation in non-JSDoc comment", !warning);
        assertEquals("alert(\"foo\");", compiledCode.trim()); // Verify the comment did not get preserved
    }
}
