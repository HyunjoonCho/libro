
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class CMAESOptimizerTest {

    @Test
    public void testWideBoundsResultInNaNParameters() {
        // Define extremely wide bounds
        double[] lowerBound = {-Double.MAX_VALUE, -Double.MAX_VALUE};
        double[] upperBound = {Double.MAX_VALUE, Double.MAX_VALUE};

        // Create CMAESOptimizer instance
        CMAESOptimizer optimizer = new CMAESOptimizer(
                10000,              // max number of iterations
                Double.MIN_VALUE,   // stop fitness
                true,               // isActiveCMA
                0,                  // diagonalOnly
                0,                  // checkFeasableCount
                new CMAESOptimizer.Sigma(new double[]{1e-4, 1e-4}), // typical sigma
                1,                  // randomization seed
                10                  // max objective evaluation
        );

        // Objective function that checks for NaN parameters
        CMAESOptimizer.FitnessFunction fitnessFunction = new CMAESOptimizer.FitnessFunction() {
            @Override
            public double value(double[] point) {
                // Check if any parameter is NaN
                for (double param : point) {
                    if (Double.isNaN(param)) {
                        return Double.NaN; // Return NaN if an input is NaN
                    }
                }
                // Otherwise, return some constant value for simplicity
                return 1.0;
            }

            @Override
            public boolean isFeasible(double[] point) {
                return true; // All points are feasible in this test
            }
        };

        // Running the optimizer should not result in NaN parameters
        double[] initialGuess = {0.0, 0.0};
        double[] requestedSolution = optimizer.optimize(
                new MaxEval(10000),
                new CMAESOptimizer.FitnessFunction.ObjFunctionWrapper(fitnessFunction),
                GoalType.MINIMIZE,
                initialGuess,
                lowerBound,
                upperBound
        ).getPoint();

        // Assert no NaN values are in the result
        for (double param : requestedSolution) {
            assertFalse("Found NaN parameter in optimizer result", Double.isNaN(param));
        }
    }
}
