
import org.apache.commons.math3.fitting.HarmonicFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class HarmonicFitterTest {

    @Test
    public void testParameterGuesserFailsForAmplitude() {
        // Create a list to store the observed points
        List<WeightedObservedPoint> points = new ArrayList<>();
        
        // Add observed points (these values may need to be adjusted based on real use cases that cause the issue)
        points.add(new WeightedObservedPoint(1.0, 0.0, 0.0));
        points.add(new WeightedObservedPoint(1.0, 1.0, 0.1));
        points.add(new WeightedObservedPoint(1.0, 2.0, 0.2));
        points.add(new WeightedObservedPoint(1.0, 3.0, -0.1));
        points.add(new WeightedObservedPoint(1.0, 4.0, -0.2));
        
        try {
            // Create the parameter guesser
            HarmonicFitter.ParameterGuesser guesser = new HarmonicFitter.ParameterGuesser(points);
            
            // Get the guessed parameters
            double[] parameters = guesser.guess();
            
            // Check if the amplitude is sensible (for instance, greater than a small positive value)
            assertTrue("Amplitude guess is not sensible", Math.abs(parameters[0]) > 0.1);
            
        } catch (Exception e) {
            // The test should fail if there is an exception
            e.printStackTrace();
            assertTrue("Exception thrown during parameter guessing", false);
        }
    }
}
