
import org.apache.commons.lang3.time.StopWatch;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class StopWatchTest {

    @Test
    public void testStopWatchSuspendFollowedByStop() throws InterruptedException {
        StopWatch sw = new StopWatch();

        sw.start();

        // Simulate elapsed time
        Thread.sleep(1000);

        sw.suspend();

        // Time 1 (ok)
        long time1 = sw.getTime();
        System.out.println("Time 1 (expected ~1000 ms): " + time1);

        // Simulate more elapsed time (during suspend)
        Thread.sleep(2000);

        // Time 1 (again, ok)
        assertEquals("Time should not change during suspend", time1, sw.getTime());

        sw.resume();

        // Simulate elapsed time after resume
        Thread.sleep(3000);

        sw.suspend();

        // Time 2 (ok)
        long time2 = sw.getTime();
        System.out.println("Time 2 (expected ~4000 ms): " + time2);

        // Simulate more elapsed time (during suspend)
        Thread.sleep(4000);

        // Time 2 (again, ok)
        assertEquals("Time should not change during suspend", time2, sw.getTime());

        // Simulate more elapsed time (during suspend)
        Thread.sleep(5000);

        sw.stop();

        // Time 2 (should be, but is Time 3 => NOT ok)
        long finalTime = sw.getTime();
        System.out.println("Final Time (expected ~4000 ms, but may be more due to bug): " + finalTime);

        assertEquals("Final time should not exceed time2 after stop", time2, finalTime);
    }
}
