public void testTypeCheckerAnnotationWithinFunction() {
    String ns = "{}";

    // Simulate the first scenario
    ns += "function defineAOutside() { /** @param {string=} b */ ns.a = function(b) {} }";
    ns += "defineAOutside();";
    ns += "function callAOutside() { ns.a(); ns.a(123); }";
    ns += "callAOutside();";

    // Asserting the expected warning for improper parameter type in first scenario
    assertWarningsContain(ns, 1, "actual parameter 123 does not match parameter type {string}");

    // Simulate the second scenario
    ns = "{}";
    ns += "(function defineAInside() { /** @param {string=} b */ ns.a = function(b) {} })();";
    ns += "function callAInside() { ns.a(); ns.a(123); }";
    ns += "callAInside();";

    // Asserting the wrong warning for missing parameter rather than improper parameter type
    assertWarningsContain(ns, 2, "ns.a called with 0 parameters");
    assertWarningsNotContain(ns, 2, "actual parameter 123 does not match parameter type {string}");

    // Simulate the third scenario without outer function calls
    ns = "{}";
    ns += "(function(){ /** @param {string=} b */ ns.a = function(b) {} })();";
    ns += "ns.a();";
    ns += "ns.a(123);";

    // Asserting no warnings emitted for missing parameter and improper parameter type
    assertWarningsNotContain(ns, 3, "ns.a called with 0 parameters");
    assertWarningsNotContain(ns, 3, "actual parameter 123 does not match parameter type {string}");
}