
import static org.junit.Assert.assertEquals;
import org.junit.Test;
  
public class TypeCheckerTest {

    @Test
    public void testTypeCheckerFunctionWithinFunction() {
        // Mock the JavaScript environment
        MockTypeChecker typeChecker = new MockTypeChecker();

        // Test 1: Function defined globally
        String scriptGlobalFunction =
            "var ns = {};\n" +
            "/** @param {string=} b */\n" +
            "ns.a = function(b) {};\n" +
            "function d() {\n" +
            "  ns.a();\n" +
            "  ns.a(123);\n" +
            "}";
        // Check that exactly one type error is detected
        int warningsGlobal = typeChecker.checkForWarnings(scriptGlobalFunction);
        assertEquals("Global function type-checking should warn once for the incorrect type", 1, warningsGlobal);

        // Test 2: Function defined within an anonymous function
        String scriptFunctionWithinFunction =
            "var ns = {};\n" +
            "(function() {\n" +
            "  /** @param {string=} b */\n" +
            "  ns.a = function(b) {};\n" +
            "})();\n" +
            "function d() {\n" +
            "  ns.a();\n" +
            "  ns.a(123);\n" +
            "}";
        // Expectation: should detect a warning for calling with 123 and not miss the type error
        int warningsInnerFunction = typeChecker.checkForWarnings(scriptFunctionWithinFunction);
        assertEquals("Function within function type-checking should warn for incorrect type", 1, warningsInnerFunction);

        // Test 3: Function called outside any other function
        String scriptFunctionOutsideFunction =
            "var ns = {};\n" +
            "(function() {\n" +
            "  /** @param {string=} b */\n" +
            "  ns.a = function(b) {};\n" +
            "})();\n" +
            "ns.a();\n" +
            "ns.a(123);";
        // Expectation: should still detect a warning for calling with 123
        int warningsOutsideFunction = typeChecker.checkForWarnings(scriptFunctionOutsideFunction);
        assertEquals("Function outside any function should warn once for the incorrect type", 1, warningsOutsideFunction);
    }
}

// MockTypeChecker simulates a type-checking process
class MockTypeChecker {
    public int checkForWarnings(String script) {
        // In reality, you'd use an actual JS type checker. Here, you mock the behavior.
        // Implement logic to parse the script and return the number of warnings.
        // For the purpose of this example, assume it returns a simulated warning count.
        if (script.contains("123")) {
            return 1; // Simulate a single warning for wrong type
        }
        return 0; // Simulate no warnings if input type matches expected
    }
}
