
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParserBucket;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class DateTimeFormatterTest {

    @Test
    public void testParseIntoWithoutYear() {
        // Let's set up a base DateTime with a specific year
        DateTime baseDateTime = new DateTime(2021, 1, 15, 0, 0);
        
        // Create a DateTimeFormatter that does not include a year in its pattern
        DateTimeFormatter formatter = DateTimeFormat.forPattern("MM-dd");
        
        // Create a parser bucket to use with parseInto, initialized with the base DateTime
        DateTimeParserBucket bucket = new DateTimeParserBucket(0, baseDateTime.getChronology(), null, baseDateTime.getYear(), 2000);
        
        // The string to parse
        String dateToParse = "02-28"; // Expecting to parse February 28th of the base year, 2021
        
        // Use parseInto and get the offset to know how much to set back
        int offset = formatter.parseInto(bucket, dateToParse, 0);
        
        // Move the bucket into DateTime
        DateTime parsedDateTime = bucket.computeMillis();
        
        assertEquals(baseDateTime.getYear(), parsedDateTime.getYear());
        assertEquals(2, new DateTime(parsedDateTime).getMonthOfYear());
        assertEquals(28, new DateTime(parsedDateTime).getDayOfMonth());
    }
}
