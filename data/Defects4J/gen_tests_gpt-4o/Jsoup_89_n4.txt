
import org.junit.Test;
import static org.junit.Assert.*;

public class AttributeTest {
    
    private static class Attribute {
        private Attributes parent;
        private String key;
        private String val;
        
        public Attribute(String key, String val, Attributes parent) {
            this.key = key;
            this.val = val;
            this.parent = parent;
        }
        
        public String setValue(String val) {
            String oldVal = parent.get(this.key); // This line can cause a NullPointerException
            if (parent != null) {
                int i = parent.indexOfKey(this.key);
                if (i != Attributes.NotFound)
                    parent.vals[i] = val;
            }
            this.val = val;
            return oldVal;
        }

        public void setKey(String key) {
            Validate.notNull(key);
            key = key.trim();
            Validate.notEmpty(key);
            if (parent != null) {
                int i = parent.indexOfKey(this.key);
                if (i != Attributes.NotFound)
                    parent.keys[i] = key;
            }
            this.key = key;
        }
    }
    
    private static class Attributes {
        static final int NotFound = -1;
        String[] vals;
        String[] keys;
        
        String get(String key) {
            return ""; // Stub method for testing
        }
        
        int indexOfKey(String key) {
            return NotFound; // Stub method for testing
        }
    }
    
    private static class Validate {
        static void notNull(Object obj) {
            if (obj == null) throw new IllegalArgumentException("Argument must not be null");
        }
        
        static void notEmpty(String str) {
            if (str.isEmpty()) throw new IllegalArgumentException("String must not be empty");
        }
    }

    @Test(expected = NullPointerException.class)
    public void testSetValueWithoutParent() {
        Attribute attribute = new Attribute("exampleKey", "exampleValue", null);
        attribute.setValue("newValue");
    }
}
