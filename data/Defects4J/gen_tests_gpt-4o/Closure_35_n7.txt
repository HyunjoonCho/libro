script
function testFunc() {
    /**
     * @returns {{prop1: (Object|undefined), prop2: (string|undefined), prop3: (string|undefined)}} 
     */
    function func(a, b) {
        var results;
        if (a) {
            results = {};
            results.prop1 = {a: 3};
        }
        if (b) {
            results = results || {};
            results.prop2 = 'prop2';
        } else {
            results = results || {};
            results.prop3 = 'prop3';
        }
        return results;
    }

    // Test case 1: Both a and b are true
    var result = func(true, true);
    console.assert(result.prop1 !== undefined, 'Test 1 Failed: prop1 should be defined');
    console.assert(result.prop2 !== undefined, 'Test 1 Failed: prop2 should be defined');
    console.assert(result.prop3 === undefined, 'Test 1 Failed: prop3 should be undefined');

    // Test case 2: a is true, b is false
    result = func(true, false);
    console.assert(result.prop1 !== undefined, 'Test 2 Failed: prop1 should be defined');
    console.assert(result.prop2 === undefined, 'Test 2 Failed: prop2 should be undefined');
    console.assert(result.prop3 !== undefined, 'Test 2 Failed: prop3 should be defined');

    // Test case 3: a is false, b is true
    result = func(false, true);
    console.assert(result.prop1 === undefined, 'Test 3 Failed: prop1 should be undefined');
    console.assert(result.prop2 !== undefined, 'Test 3 Failed: prop2 should be defined');
    console.assert(result.prop3 === undefined, 'Test 3 Failed: prop3 should be undefined');

    // Test case 4: Both a and b are false
    result = func(false, false);
    console.assert(result.prop1 === undefined, 'Test 4 Failed: prop1 should be undefined');
    console.assert(result.prop2 === undefined, 'Test 4 Failed: prop2 should be undefined');
    console.assert(result.prop3 !== undefined, 'Test 4 Failed: prop3 should be defined');

    console.log("All test cases passed");
}

testFunc();
