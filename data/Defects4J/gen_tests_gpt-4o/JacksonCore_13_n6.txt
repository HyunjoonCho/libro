
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.json.JsonWriteFeature;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;

import static org.junit.Assert.assertEquals;

public class UTF8JsonGeneratorTest {

    @Test
    public void testToggleQuoteFieldNames() throws IOException {
        JsonFactory factory = new JsonFactory();

        // Enable QUOTE_FIELD_NAMES
        StringWriter writerWithQuotes = new StringWriter();
        try (JsonGenerator generator = factory.createGenerator(writerWithQuotes)) {
            generator.writeStartObject();
            generator.writeFieldName("testField");
            generator.writeString("testValue");
            generator.writeEndObject();
        }

        // We expect JSON object with quoted field names
        assertEquals("{\"testField\":\"testValue\"}", writerWithQuotes.toString());

        // Disable QUOTE_FIELD_NAMES
        factory = JsonFactory.builder()
                .disable(JsonWriteFeature.QUOTE_FIELD_NAMES)
                .build();

        StringWriter writerWithoutQuotes = new StringWriter();
        try (JsonGenerator generator = factory.createGenerator(writerWithoutQuotes)) {
            generator.writeStartObject();
            generator.writeFieldName("testField");
            generator.writeString("testValue");
            generator.writeEndObject();
        }

        // We expect JSON object with unquoted field names
        assertEquals("{testField:\"testValue\"}", writerWithoutQuotes.toString());
    }
}
