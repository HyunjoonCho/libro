
import org.apache.commons.math3.optim.nonlinear.vector.MultivariateVectorOptimizer;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.LeastSquaresBuilder;
import org.apache.commons.math3.optim.nonlinear.vector.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.AbstractCurveFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.apache.commons.math3.fitting.PolynomialCurveFitter;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

public class LargeDataSetTest {

    @Test
    public void testLargeNumberOfWeights() {
        // Generate a large number of observed points
        List<WeightedObservedPoint> points = new ArrayList<>();
        for (int i = 0; i < 41200; i++) {
            // Adding dummy data points with weights
            points.add(new WeightedObservedPoint(1.0, i, Math.sin(i)));
        }

        // Polynomial curve fitter to test with large data set
        final AbstractCurveFitter fitter = PolynomialCurveFitter.create(2);

        // Exception should be thrown due to memory exhaustion
        try {
            fitter.fit(points);
        } catch (OutOfMemoryError e) {
            System.err.println("Memory exhausted as expected: " + e.getMessage());
        }
    }
}
