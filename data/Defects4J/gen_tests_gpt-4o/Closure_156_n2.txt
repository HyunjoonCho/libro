
// Import necessary classes
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;

public class CompilerCrashTest {

    @Test(expected = RuntimeException.class)
    public void testCompilerCrashOnAssignStatement() {
        // Simulate the JavaScript code causing the compiler error
        String jsCode = "/** @constructor\n" +
                        " * @param {...Object} params\n" +
                        " */\n" +
                        "dojox.gfx.shape.Shape = function(params) {};\n" +
                        "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ {});";

        // Prepare arguments for the closure compiler
        String[] args = new String[]{
                "--js", "-", // Read from standard input (simulating file read)
                "--compilation_level", "SIMPLE_OPTIMIZATIONS"
        };

        // Create a command line runner with the defined jsCode input
        CommandLineRunner runner = new CommandLineRunner(args);

        // Execute the compilation process
        try {
            runner.setErrorManager(new com.google.javascript.jscomp.PrintStreamErrorManager(System.err));
            runner.doRun();
        } catch (RuntimeException e) {
            // This exception is expected as the test is to reproduce the error
            throw e;
        }
    }
}
