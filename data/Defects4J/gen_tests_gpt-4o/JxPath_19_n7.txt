
import org.apache.commons.jxpath.JXPathContext;
import org.apache.commons.jxpath.Pointer;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

public class JXPathTest {

    @Test
    public void testIteratePointersWithMultiplePrefixesForSingleNamespace() throws Exception {
        // Prepare the XML document
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        DocumentBuilder builder = factory.newDocumentBuilder();

        Document doc = builder.newDocument();
        Element root = doc.createElementNS("ns", "a:doc");
        doc.appendChild(root);

        Element elem1 = doc.createElementNS("ns", "a:elem");
        root.appendChild(elem1);

        Element elem2 = doc.createElementNS("ns", "b:elem");
        root.appendChild(elem2);

        // Create JXPathContext and iterate over 'elem' elements
        JXPathContext context = JXPathContext.newContext(doc);
        List<String> elementNames = new ArrayList<>();
        for (Pointer pointer : context.iteratePointers("//elem")) {
            elementNames.add(pointer.getNode().getNodeName());
        }

        // Check that both elements with different prefixes but same namespace are found
        assertEquals(2, elementNames.size());
        assertTrue(elementNames.contains("a:elem"));
        assertTrue(elementNames.contains("b:elem"));
    }
}
