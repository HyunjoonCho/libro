
import static org.junit.Assert.*;
import org.junit.Test;

/**
 * Test class to reproduce the bug related to anonymous object type inference inconsistency in union types.
 */
public class AnonymousObjectTypeInferenceTest {

    /**
     * Mock function to simulate the parameter type expected by the function in the bug report.
     * This version expects an object with `prop` and optionally `prop2`.
     * 
     * @param record An object that must contain a 'prop' string and may contain 'prop2'.
     */
    private void func(Record record) {
        System.out.println(record.prop);
    }

    /**
     * Mock function to simulate the parameter type with union in the bug report.
     * Accepts either a string or an object with `prop` and optionally `prop2`.
     * 
     * @param record A string or an object with 'prop' and optionally 'prop2'.
     */
    private void func2(Object record) {
        if (record instanceof String) {
            System.out.println(record);
        } else if (record instanceof Record) {
            Record recordObj = (Record) record;
            System.out.println(recordObj.prop);
        }
    }

    /**
     * Test case demonstrating the bug where func2 fails to accept an object 
     * that func successfully accepts, due to type inference issues.
     */
    @Test
    public void testAnonymousObjectTypeInference() {
        Record record1 = new Record("a", null);
        
        // This call should work fine
        func(record1);

        // This call demonstrates the issue in the bug report
        func2(record1);
    }

    /**
     * Helper class to mock the data structure used in the bug report
     */
    class Record {
        String prop;
        String prop2; // Optional

        Record(String prop, String prop2) {
            this.prop = prop;
            this.prop2 = prop2;
        }
    }
}
