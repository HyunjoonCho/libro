
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.GregorianChronology;
import org.junit.Test;

public class DSTTransitionTest {

    @Test
    public void testDSTTransitionUSCentral() {
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);

        DateTime usCentralStandardInUTC = new DateTime(2008, 11, 2, 7, 0, 0, 0, chronUTC);
        DateTime usCentralDaylightInUTC = new DateTime(2008, 11, 2, 6, 0, 0, 0, chronUTC);

        Chronology chronUSCentral = GregorianChronology.getInstance(DateTimeZone.forID("US/Central"));

        assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));
        assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));

        DateTime usCentralStandardInUSCentral = usCentralStandardInUTC.toDateTime(chronUSCentral);
        DateTime usCentralDaylightInUSCentral = usCentralDaylightInUTC.toDateTime(chronUSCentral);

        assertEquals("Hour should be 1", 1, usCentralStandardInUSCentral.getHourOfDay());
        assertEquals("Hours should match", usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());
        assertTrue("Timestamps should not match", usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());
    }

    @Test
    public void testDSTTransitionAustraliaNSW() {
        Chronology chronUTC = GregorianChronology.getInstance(DateTimeZone.UTC);

        DateTime australiaNSWStandardInUTC = new DateTime(2008, 4, 5, 16, 0, 0, 0, chronUTC);
        DateTime australiaNSWDaylightInUTC = new DateTime(2008, 4, 5, 15, 0, 0, 0, chronUTC);

        Chronology chronAusNSW = GregorianChronology.getInstance(DateTimeZone.forID("Australia/NSW"));

        assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));
        assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));

        DateTime australiaNSWStandardInAustraliaNSW = australiaNSWStandardInUTC.toDateTime(chronAusNSW);
        DateTime australiaNSWDaylightInAustraliaNSW = australiaNSWDaylightInUTC.toDateTime(chronAusNSW);

        assertEquals("Hour should be 2", 2, australiaNSWStandardInAustraliaNSW.getHourOfDay());
        assertEquals("Hours should match", australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAustraliaNSW.getHourOfDay());
        assertTrue("Timestamps should not match", australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAustraliaNSW.getMillis());

        // Verify that setting the hour of day on the DST boundary results in daylight time for both time zones.
        assertEquals("Expected daylight time adjustment",
                usCentralDaylightInUSCentral,
                usCentralStandardInUSCentral.withHourOfDay(1));
        assertEquals("Expected daylight time adjustment",
                australiaNSWDaylightInAustraliaNSW,
                australiaNSWStandardInAustraliaNSW.withHourOfDay(2));
    }
}
