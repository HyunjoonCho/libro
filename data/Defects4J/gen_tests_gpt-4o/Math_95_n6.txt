
import org.apache.commons.math3.distribution.FDistribution;
import org.apache.commons.math3.exception.MathIllegalArgumentException;
import static org.junit.Assert.fail;
import org.junit.Test;

public class FDistributionTest {
    
    @Test
    public void testDenominatorDegreeOfFreedom() {
        try {
            // Create FDistribution with the problematic denominator degree of freedom
            FDistribution fDistribution = new FDistribution(5.0, 2.0);

            // Attempt to compute the inverse cumulative probability with alpha = 0.95,
            // which should use the bracket method internally and trigger the issue.
            fDistribution.inverseCumulativeProbability(0.95);
            
            fail("Expected IllegalArgumentException not thrown");
        } catch (MathIllegalArgumentException e) {
            // Check if the exception message matches the expected issue
            String expectedMessage = "Invalid endpoint parameters: lowerBound=0.0 initial=Infinity upperBound=1.7976931348623157E308";
            assertTrue(e.getMessage().contains(expectedMessage));
        }
    }
}
