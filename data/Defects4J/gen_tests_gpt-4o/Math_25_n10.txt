
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.fitting.HarmonicFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoints;
import org.apache.commons.math3.optim.SimpleVectorValueChecker;
import org.junit.Test;

import static org.junit.Assert.*;

public class HarmonicFitterTest {
    
    @Test
    public void testParameterGuesserFailsToGuessAmplitude() {
        // Create instance of WeightedObservedPoints
        WeightedObservedPoints obs = new WeightedObservedPoints();

        // Add some observations
        // Here we use a sinusoidal function with known amplitude
        double amplitude = 0.0; // Deliberately set to cause trouble
        double omega = 2 * Math.PI / 24.0; // Some frequency
        double phase = 0;
        for (int i = 0; i < 50; i++) {
            obs.add(i, amplitude * Math.sin(omega * i + phase));
        }

        // Create HarmonicFitter
        HarmonicFitter fitter = new HarmonicFitter(new Sin.Parametric(), new SimpleVectorValueChecker(1e-10, 1e-10));

        // Attempt to guess parameters
        HarmonicFitter.ParameterGuesser guesser;
        try {
            guesser = new HarmonicFitter.ParameterGuesser(obs.toList());
            double[] guessedParams = guesser.guess();

            // Verify the guessed amplitude
            assertTrue("Unexpected guessed amplitude", guessedParams[1] != amplitude);
        } catch (DimensionMismatchException e) {
            fail("Parameter guesser threw an exception: " + e.getMessage());
        }
    }
}
