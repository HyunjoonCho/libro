
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.io.IOException;

import org.junit.Test;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class TestJackson {

    public static final class SimplePojo {
        private final int intField;
        private final String stringField;

        // Constructor using an int parameter annotated with @JsonProperty
        public SimplePojo(@JsonProperty("intField") int intField) {
            this(intField, "empty");
        }

        // Constructor using a String parameter annotated with @JsonProperty
        public SimplePojo(@JsonProperty("stringField") String stringField) {
            this(-1, stringField);
        }

        // Constructor annotated with @JsonCreator
        @JsonCreator
        public SimplePojo(@JsonProperty("intField") int intField, @JsonProperty("stringField") String stringField) {
            this.intField = intField;
            this.stringField = stringField;
        }

        public int getIntField() {
            return intField;
        }

        public String getStringField() {
            return stringField;
        }
    }

    @Test
    public void testJacksonDeserialization() throws JsonParseException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        
        try {
            SimplePojo pojo = mapper.readValue("{ \"intField\": 1, \"stringField\": \"foo\" }", SimplePojo.class);
            // Assert that correct values are set, though it currently throws an exception
            assertEquals(1, pojo.getIntField());
            assertEquals("foo", pojo.getStringField());
            fail("Expected a JsonMappingException to be thrown due to ambiguous constructor selection.");
        } catch (JsonMappingException e) {
            // Expected exception due to the ambiguous params without @JsonCreator annotation prioritization
            System.err.println("Caught expected JsonMappingException: " + e.getMessage());
        }
    }
}
