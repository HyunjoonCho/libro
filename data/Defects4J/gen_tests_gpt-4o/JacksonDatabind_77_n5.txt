
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import org.junit.Test;

import java.util.HashMap;

import static org.junit.Assert.assertEquals;

public class JacksonSecurityTest {

    public static class Exploit {
        public String command;

        @Override
        public String toString() {
            return "Exploit{" +
                    "command='" + command + '\'' +
                    '}';
        }
    }

    @Test
    public void testJacksonSecurityVulnerability() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        // Enable default typing to simulate the vulnerability scenario
        mapper.setDefaultTyping(new StdTypeResolverBuilder().init(JsonTypeInfo.Id.CLASS, null)
                .inclusion(JsonTypeInfo.As.PROPERTY));

        // This JSON string simulates the exploit payload
        String json = "[\"com.example.Exploit\", {\"command\":\"rm -rf /\"}]";

        try {
            Object obj = mapper.readValue(json, Object.class);
            if (obj instanceof Exploit) {
                Exploit exploit = (Exploit) obj;
                assertEquals("rm -rf /", exploit.command);
            }
        } catch (Exception e) {
            System.out.println("Exception caught: " + e.getMessage());
        }
    }
}
