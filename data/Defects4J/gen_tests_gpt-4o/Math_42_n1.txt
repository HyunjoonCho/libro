
import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import org.apache.commons.math3.optimization.linear.RealPointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testNegativeValueWithRestrictNonNegative() {
        // Define the objective function: 1 * x + 1 * y
        LinearObjectiveFunction function = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);

        // Define the constraints: 1 * x + 0 * y = 1
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.EQ, 1));

        // Create an instance of SimplexSolver
        SimplexSolver solver = new SimplexSolver();

        // Solve the problem with a non-negativity restriction for variables
        RealPointValuePair result = solver.optimize(function, constraints, GoalType.MINIMIZE, true);

        // Get the solution
        double[] solution = result.getPoint();
        double x = solution[0];
        double y = solution[1];

        // Assert the solution
        assertEquals(1.0, x, 1e-6); // x should be 1
        assertTrue("y should be non-negative but was " + y, y >= 0); // y should be non-negative
    }
}
