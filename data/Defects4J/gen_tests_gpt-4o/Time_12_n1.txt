
import org.joda.time.LocalDate;
import org.junit.Test;

import java.util.Calendar;
import java.util.GregorianCalendar;

import static org.junit.Assert.assertEquals;

public class LocalDateEraTest {

    @Test
    public void testLocalDateFromCalendarFieldsWithEra() {
        // Create a Calendar instance for a date in the AD era
        Calendar calendar = new GregorianCalendar();
        calendar.set(Calendar.YEAR, 2023);
        calendar.set(Calendar.MONTH, Calendar.JANUARY);
        calendar.set(Calendar.DAY_OF_MONTH, 1);
        calendar.set(Calendar.ERA, GregorianCalendar.AD);

        // Convert Calendar to LocalDate
        LocalDate localDate = LocalDate.fromCalendarFields(calendar);

        // Verify the LocalDate fields
        assertEquals(2023, localDate.getYear());
        assertEquals(1, localDate.getMonthOfYear());
        assertEquals(1, localDate.getDayOfMonth());

        // Now set a date in the BC era
        calendar.set(Calendar.YEAR, 500);
        calendar.set(Calendar.MONTH, Calendar.MARCH);
        calendar.set(Calendar.DAY_OF_MONTH, 25);
        calendar.set(Calendar.ERA, GregorianCalendar.BC);

        // Convert Calendar to LocalDate
        localDate = LocalDate.fromCalendarFields(calendar);

        // Verify the LocalDate fields for the BC era
        assertEquals(-499, localDate.getYear()); // Joda-Time represents BC years as negative
        assertEquals(3, localDate.getMonthOfYear());
        assertEquals(25, localDate.getDayOfMonth());
    }
}
