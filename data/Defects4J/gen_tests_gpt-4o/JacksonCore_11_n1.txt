
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import org.junit.Test;
import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.ConcurrentMap;

public class SerializationTest {

    @Test
    public void testRepeatedSerialization() {
        ObjectMapper mapper = new ObjectMapper();
        ConcurrentMap<ObjectUserKey, ServerIndexPair> ssip = Maps.newConcurrentMap();
        UUID user = UUID.randomUUID(); // Assuming user is a UUID, you can replace this as needed

        for (int i = 0; i < 10000; ++i) {
            byte[] indexPairBytes = new byte[2080];
            new Random().nextBytes(indexPairBytes);
            ServerIndexPair sip = new ServerIndexPair(indexPairBytes);

            try {
                byte[] s = mapper.writeValueAsBytes(ImmutableMap.of(UUID.randomUUID().toString(), sip));
                Map<String, ServerIndexPair> metadata = mapper.readValue(s, new TypeReference<Map<String, ServerIndexPair>>() {});
                for (Map.Entry<String, ServerIndexPair> metadataEntry : metadata.entrySet()) {
                    ServerIndexPair indexPair = metadataEntry.getValue();
                    ssip.put(new ObjectUserKey(metadataEntry.getKey(), user), indexPair);
                }
            } catch (Exception e) {
                // Replace println with appropriate logging if needed
                System.err.println("Iteration: " + i + " failed with exception: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
}

class ServerIndexPair {
    public static final String INDEX_PAIR_FIELD = "indexPair";
    private final byte[] indexPair;

    @JsonCreator
    public ServerIndexPair(@JsonProperty(INDEX_PAIR_FIELD) byte[] indexPair) {
        Preconditions.checkState(indexPair.length == 2080, "Index pair must be 2080 bytes long.");
        this.indexPair = indexPair;
    }

    @JsonProperty(INDEX_PAIR_FIELD)
    public byte[] getIndexPair() {
        return indexPair;
    }
}

class ObjectUserKey {
    public static final String SEPARATOR = ":";
    private final String objectId;
    private final UUID userKey;

    @JsonCreator
    public ObjectUserKey(@JsonProperty("objectId") String objectId,
                         @JsonProperty("userKey") UUID userKey) {
        this.objectId = objectId;
        this.userKey = userKey;
    }

    @JsonProperty("objectId")
    public String getObjectId() {
        return objectId;
    }

    @JsonProperty("userKey")
    public UUID getUserKey() {
        return userKey;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((objectId == null) ? 0 : objectId.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        ObjectUserKey other = (ObjectUserKey) obj;
        return objectId.equals(other.objectId) && userKey.equals(other.userKey);
    }

    @Override
    public String toString() {
        return userKey + SEPARATOR + objectId;
    }
}
