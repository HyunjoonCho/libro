public void testConvenientSpyingOnAbstractClasses() {
    // Example 1: Fake with trivial Logic
    abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override public void addEmail(String email) {
            emails.add(email);
        }

        @Override public List<String> getEmails() {
            return Collections.unmodifiableList(emails);
        }
    }

    FakeUserAccount userAccount = Mockito.mock(FakeUserAccount.class, Mockito.CALLS_REAL_METHODS);
    userAccount.addEmail("test@example.com");
    assertEquals(Collections.singletonList("test@example.com"), userAccount.getEmails());

    // Example 2: callback-style API
    abstract class MockAccountService implements AccountService {
        @Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }
        abstract UserAccount getAccount(String id);
    }

    MockAccountService service = Mockito.mock(MockAccountService.class, Mockito.CALLS_REAL_METHODS);
    UserAccount account = Mockito.mock(UserAccount.class);
    Mockito.when(service.getAccount("id")).thenReturn(account);
    AsyncCallback<UserAccount> callback = Mockito.mock(AsyncCallback.class);
    service.getAccount("id", callback);
    Mockito.verify(callback).onSuccess(account);

    // Example 3: Uninteresting parameters
    abstract class MockAccountRpcService implements AccountRpcService {
        @Override public Future<Account> getAccount(RpcContext context, String id) {
            if (context == null) {
                throw new IllegalArgumentException("Context can't be null");
            }
            return getAccount(id);
        }

        abstract Future<Account> getAccount(String id);
    }

    MockAccountRpcService rpcService = Mockito.mock(MockAccountRpcService.class, Mockito.CALLS_REAL_METHODS);
    Future<Account> futureAccount = Mockito.mock(Future.class);
    Mockito.when(rpcService.getAccount("id")).thenReturn(futureAccount);
    assertEquals(futureAccount, rpcService.getAccount(new RpcContext(), "id"));
}