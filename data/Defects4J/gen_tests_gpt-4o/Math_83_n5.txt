
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexSolver;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.LinearOptimizer;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIssue() {
        // Define the linear objective function: 0.8 x0 + 0.2 x1 + 0.7 x2 + 0.3 x3 + 0.6 x4 + 0.4 x5
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0);

        // Define constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0)); // x0 + x2 + x4 = 23
        constraints.add(new LinearConstraint(new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0)); // x1 + x3 + x5 = 23
        constraints.add(new LinearConstraint(new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0)); // x0 >= 10
        constraints.add(new LinearConstraint(new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0));  // x2 >= 8
        constraints.add(new LinearConstraint(new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0));  // x4 >= 5

        // Create the solver and solve the optimization problem
        LinearOptimizer optimizer = new SimplexSolver();
        PointValuePair solution = optimizer.optimize(f, constraints, GoalType.MAXIMIZE);

        // Optimal value expected: 25.8
        assertEquals(25.8, solution.getValue(), 1e-5);

        // Expected solution values
        double[] expectedSolution = new double[] { 10.0, 0.0, 8.0, 0.0, 5.0, 23.0 };

        // Validate solution against expected values
        double[] sol = solution.getPoint();
        for (int i = 0; i < sol.length; i++) {
            assertEquals(expectedSolution[i], sol[i], 1e-5);
        }

        // Assert the last constraint x4 >= 5.0
        assertTrue(sol[4] >= 5.0);
    }
}
