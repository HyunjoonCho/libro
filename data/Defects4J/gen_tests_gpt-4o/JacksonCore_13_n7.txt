
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;

import static org.junit.Assert.*;

public class UTF8JsonGeneratorTest {

    @Test
    public void testQuoteFieldNamesToggle() throws IOException {
        JsonFactory factory = new JsonFactory();
        StringWriter writer = new StringWriter();
        
        try (JsonGenerator generator = factory.createGenerator(writer)) {
            ObjectMapper mapper = new ObjectMapper(factory);
            
            // Enable QUOTE_FIELD_NAMES
            generator.enable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
            mapper.writeValue(generator, new TestObject("value1", "value2"));
            String quotedJson = writer.toString();
            assertTrue("JSON output should contain quoted field names", quotedJson.contains("\"field1\""));
            
            // Reset writer for next test
            writer.getBuffer().setLength(0);
            
            // Disable QUOTE_FIELD_NAMES
            generator.disable(JsonGenerator.Feature.QUOTE_FIELD_NAMES);
            try {
                mapper.writeValue(generator, new TestObject("value1", "value2"));
                fail("Expected JsonProcessingException due to unquoted field names in JSON.");
            } catch (JsonParseException e) {
                // Expected an exception here due to unquoted field names
            }
        }
    }

    static class TestObject {
        public String field1;
        public String field2;

        public TestObject(String field1, String field2) {
            this.field1 = field1;
            this.field2 = field2;
        }
    }
}
