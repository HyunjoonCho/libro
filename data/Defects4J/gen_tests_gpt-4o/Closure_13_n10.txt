
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class TrueFalseReplacementTest {

    @Test
    public void testTrueFalseReplacement() {
        // Initialize the compiler
        Compiler compiler = new Compiler();

        // Setup compiler options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Source code for the function which should be optimized
        String originalJsCode = ""
            + "function some_function() {"
            + "  var fn1;"
            + "  var fn2;"
            + "  if (any_expression) {"
            + "    fn2 = external_ref;"
            + "    fn1 = function () {"
            + "      return fn2();"
            + "    };"
            + "  }"
            + "  return {"
            + "    method1: function () {"
            + "      if (fn1) fn1();"
            + "      return true;"
            + "    },"
            + "    method2: function () {"
            + "      return false;"
            + "    }"
            + "  };"
            + "}";

        // Compile the source code
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""),
                                         SourceFile.fromCode("source.js", originalJsCode),
                                         options);

        // Get the compiled code
        String compiledJsCode = compiler.toSource();

        // Check for the replacement of true with !0 and false with !1
        assertTrue("Expected compiled code to replace 'true' with '!0'", compiledJsCode.contains("return !0;"));
        assertTrue("Expected compiled code to replace 'false' with '!1'", compiledJsCode.contains("return !1;"));
    }
}
