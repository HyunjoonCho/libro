
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.OptionBuilder;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.Parser;
import org.apache.commons.cli.BasicParser;

import java.util.Properties;

import junit.framework.TestCase;

public class ParserTest extends TestCase {

    public void testPartiallyProcessedProperties() throws Exception {
        Options opts = new Options();
        opts.addOption("a", false, "toggle -a");
        opts.addOption("c", "c", false, "toggle -c");
        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));

        Properties properties = new Properties();
        properties.setProperty("a", "false");
        properties.setProperty("c", "no");
        properties.setProperty("e", "0");

        Parser parser = new BasicParser();
        CommandLine cmd = parser.parse(opts, null, properties);

        assertFalse("Option a should not be set", cmd.hasOption("a"));
        assertFalse("Option c should not be set", cmd.hasOption("c"));
        assertTrue("Option e should be set with value '0'", cmd.hasOption("e"));
        assertEquals("0", cmd.getOptionValue("e"));
    }

    public void testPartiallyProcessedPropertiesWithEmptyValue() throws Exception {
        Options opts = new Options();
        opts.addOption("a", false, "toggle -a");
        opts.addOption("c", "c", false, "toggle -c");
        opts.addOption(OptionBuilder.hasOptionalArg().create('e'));

        Properties properties = new Properties();
        properties.setProperty("a", "just a string");
        properties.setProperty("e", "");

        Parser parser = new BasicParser();
        CommandLine cmd = parser.parse(opts, null, properties);

        assertFalse("Option a should not be set", cmd.hasOption("a"));
        assertFalse("Option c should not be set", cmd.hasOption("c"));
        assertTrue("Option e should be set with an empty value", cmd.hasOption("e"));
        assertEquals("", cmd.getOptionValue("e"));
    }
}
