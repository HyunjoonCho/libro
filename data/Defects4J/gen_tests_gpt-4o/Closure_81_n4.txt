
import static org.junit.Assert.fail;

import org.junit.Test;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;

public class JavaScriptParserTest {

    @Test
    public void testUnnamedFunctionStatementShouldGenerateParseError() {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");

        // This test case is meant to check that an unnamed function statement should cause a parse error
        String unnamedFunctionStatement = "function () {};";

        try {
            engine.eval(unnamedFunctionStatement);
            fail("Unnamed function statement should generate a parse error");
        } catch (ScriptException e) {
            // Expected behavior: a parse error due to unnamed function statement
            System.out.println("Parse error as expected: " + e.getMessage());
        }
    }
    
    @Test
    public void testUnnamedFunctionExpressionIsLegal() {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");

        // Unnamed function expressions are legal
        String unnamedFunctionExpression = "(function(){});";

        try {
            engine.eval(unnamedFunctionExpression);
            // No exception expected, so the test should pass without any assert
            System.out.println("Unnamed function expression evaluated successfully.");
        } catch (ScriptException e) {
            fail("Unnamed function expression should not generate a parse error");
        }
    }
}
