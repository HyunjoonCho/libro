
import org.apache.commons.math3.linear.OpenMapRealMatrix;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class OpenMapRealMatrixTest {

    @Test
    public void testIntegerOverflowInComputeKey() {
        try {
            // Create a matrix with a size that causes integer overflow
            int numRows = 70_000;
            int numCols = 70_000;
            OpenMapRealMatrix matrix = new OpenMapRealMatrix(numRows, numCols);

            // Attempt to access a cell that would cause computeKey() to overflow
            // Also, set a value to trigger the internal computeKey() calculation
            matrix.setEntry(numRows - 1, numCols - 1, 1.0);

            // Retrieve and verify the set value to ensure proper handling (though this might not be reached due to overflow)
            double value = matrix.getEntry(numRows - 1, numCols - 1);
            assertEquals("Expected value does not match with the actual value.", 1.0, value, 0.0);
        } catch (Exception e) {
            // Check if an overflow related exception occurred
            fail("Integer overflow occurred in OpenMapRealMatrix: " + e.getMessage());
        }
    }
}
