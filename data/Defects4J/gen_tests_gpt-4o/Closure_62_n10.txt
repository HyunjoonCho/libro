
import java.io.*;
import java.util.*;
import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerTest {

    @Test
    public void testColumnCaretInErrorOutput() throws IOException {
        // Path to the JavaScript file with a syntax error
        String jsFilePath = "test.js";
        // Path to the compiler jar file
        String compilerJarPath = "compiler.jar";

        // Create a JavaScript file with a syntax error and line break
        String jsContentWithLineBreak = "alert(1;\n)";
        createFile(jsFilePath, jsContentWithLineBreak);
        
        // Run the compiler with the file containing a line break
        String outputWithLineBreak = runCompiler(compilerJarPath, jsFilePath);
        // Assert that the caret shows up in the output
        assertTrue("Expected caret is not found in the output with line break", 
                   outputWithLineBreak.contains("^"));

        // Create a JavaScript file with a syntax error but without a line break
        String jsContentWithoutLineBreak = "alert(1;";
        createFile(jsFilePath, jsContentWithoutLineBreak);
        
        // Run the compiler with the file containing no line break
        String outputWithoutLineBreak = runCompiler(compilerJarPath, jsFilePath);
        // Assert that the caret should ideally appear even without a line break
        assertFalse("Expected caret is found in the output without line break", 
                    outputWithoutLineBreak.contains("^"));
    }

    private void createFile(String filePath, String content) throws IOException {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath))) {
            writer.write(content);
        }
    }

    private String runCompiler(String compilerJarPath, String jsFilePath) throws IOException {
        String command = String.format("java -jar %s --js %s", compilerJarPath, jsFilePath);
        Process process = Runtime.getRuntime().exec(command);
        
        try (Scanner scanner = new Scanner(process.getErrorStream()).useDelimiter("\\A")) {
            return scanner.hasNext() ? scanner.next() : "";
        }
    }
}
