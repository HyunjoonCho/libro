public void testVariableConfusionDueToOptimization() {
    try {
        // Run the original unoptimized code
        Object result = runOriginalJavaScript();
        // If no exception is thrown, the test fails
        fail("Expected exception not thrown");
    } catch (RuntimeException e) {
        // Check if the exception message matches the expected one
        assertEquals("reset() was called", e.getMessage());
    }
}

private Object runOriginalJavaScript() {
    double uid;
    Function<Void, Void> reset = (a) -> {
        uid = Math.random();
        return null;
    };

    Function<Void, Void> doStuff = new Function<Void, Void>() {
        public Void apply(Void a) {
            reset.apply(null);
            double _uid = uid;

            if (uid < 0.5) {
                this.apply(null);
            }

            if (_uid != uid) {
                throw new RuntimeException("reset() was called");
            }

            return null;
        }
    };

    return doStuff.apply(null);
}