
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.Iterator;

import static org.junit.Assert.assertEquals;

public class CSVParserTest {

    @Test
    public void testNewIteratorSameLexerWithPeek() throws Exception {
        String fiveRows = "1\n2\n3\n4\n5\n";
        
        CSVParser parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);
        int recordNumber = 0;

        // First iteration, breaking after the second record
        for (CSVRecord record : parser) {
            recordNumber++;
            if (recordNumber >= 2) {
                break;
            }
        }

        // New iterator, call hasNext() before iteration
        Iterator<CSVRecord> iterator = parser.iterator();
        boolean hasNext = iterator.hasNext();
        assertEquals(true, hasNext); // This should be true

        // This iteration should start from the third record
        recordNumber++;
        if (iterator.hasNext()) {
            CSVRecord record = iterator.next();
            assertEquals("3", record.get(0)); // Expected value is '3' but the bug leads to an incorrect sequence
        }
    }
}
