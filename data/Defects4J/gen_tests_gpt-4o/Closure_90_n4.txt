
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DiagnosticGroups;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class TypedefThisWarningTest {

    @Test
    public void testTypedefWithThisWarning() {
        String jsCode = ""
            + "goog.provide('bug');\n"
            + "\n"
            + "/**\n"
            + " * @this {bug.Thing}\n"
            + " */\n"
            + "bug.sharedMethod = function() {};\n"
            + "\n"
            + "/**\n"
            + " * @constructor\n"
            + " */\n"
            + "bug.A = function() {};\n"
            + "\n"
            + "/**\n"
            + " * @constructor\n"
            + " */\n"
            + "bug.B = function() {};\n"
            + "\n"
            + "/**\n"
            + " * @typedef {bug.A|bug.B}\n"
            + " */\n"
            + "bug.Thing;\n";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        // Enable warnings for incorrect @this usage
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CompilerOptions.ErrorLevel.WARNING);

        // Compile the JavaScript code
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("test.js", jsCode);
        Result result = compiler.compile(extern, input, options);

        // Verify that the specific warning about @this with a typedef was produced
        boolean foundWarning = result.warnings.stream().anyMatch(
            warning -> warning.getDescription().contains("@this type of a function must be an object")
        );
        
        assertTrue("Expected warning about @this type with typedef, but it was not found.", foundWarning);
    }
}
