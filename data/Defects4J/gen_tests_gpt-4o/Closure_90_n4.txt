public void testThisWithTypedefWarning() {
    com.google.javascript.rhino.ErrorReporter errorReporter = new com.google.javascript.jscomp.Compiler();
    com.google.javascript.rhino.CompilerEnvirons environs = com.google.javascript.rhino.CompilerEnvirons.ideEnvirons();
    com.google.javascript.jscomp.CompilerOptions options = new com.google.javascript.jscomp.CompilerOptions();
    options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.SUSPICIOUS_CODE, com.google.javascript.jscomp.CheckLevel.WARNING);

    String jsCode = "goog.provide('bug');" +
                    "/** @this {bug.Thing} */" +
                    "bug.sharedMethod = function() {};" +
                    "/** @constructor */" +
                    "bug.A = function() {};" +
                    "/** @constructor */" +
                    "bug.B = function() {};" +
                    "/** @type {bug.A|bug.B} */" +
                    "bug.Thing = goog.typedef;";

    com.google.javascript.jscomp.Compiler compiler = new com.google.javascript.jscomp.Compiler(errorReporter);
    compiler.init(com.google.common.collect.ImmutableList.of(), com.google.common.collect.ImmutableList.of(jsCode), options);

    com.google.javascript.jscomp.Result result = compiler.compile(com.google.common.collect.ImmutableList.of(), 
                             com.google.googleapps.gadget.UserPreferences.SCHEMA, 
                             options);
    
    assertTrue(result.warnings.length > 0);
    com.google.javascript.jscomp.JSError warning = result.warnings[0];
    assertEquals("JSC_TYPE_PARSE_ERROR", warning.getType().key);
    assertTrue(warning.description.contains("@this type of a function must be an object"));
}