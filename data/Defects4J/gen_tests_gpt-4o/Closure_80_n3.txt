
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test(expected = RuntimeException.class)
    public void testDeleteOperatorInReturnStatement() {
        // JavaScript code that triggers the error
        String code = "function x() { return delete a; }";

        // Compiler options for advanced compilation
        CompilerOptions options = new CompilerOptions();
        Compiler compiler = new Compiler();
        CommandLineRunner.setOptionsForAdvancedOptimizations(options);

        // Compile the JavaScript code
        Result result = compiler.compile(
                SourceFile.fromCode("externs.js", ""),
                SourceFile.fromCode("test.js", code),
                options
        );

        // Assert if the compilation resulted in an error
        assertTrue("Expected a compiler error due to use of delete operator in return", !result.success);

        // Since an exception is expected, the test will pass when the exception is thrown
    }
}
