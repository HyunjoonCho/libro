
import static org.junit.Assert.assertEquals;

import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import org.junit.Test;

public class AdvancedOptimizationsBugTest {

    private static final String EXTERNS = "var window = {};";

    private static final String INPUT_CODE = ""
            + "window['anchor'] = function (obj, modifiesProp) {\n"
            + "    return (function (saved) {\n"
            + "        return modifiesProp(obj) + saved;\n"
            + "    })(obj['prop']);\n"
            + "};";

    @Test
    public void testAdvancedOptimizations() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        
        // Set the compiler to use advanced optimizations
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        // Set language input and output
        options.setLanguage(LanguageMode.ECMASCRIPT5);
        options.setWarningLevel(DiagnosticGroups.VERBOSE, CheckLevel.WARNING);

        // Compile the code
        Result result = compiler.compile(SourceFile.fromCode("externs.js", EXTERNS),
                                         SourceFile.fromCode("input.js", INPUT_CODE),
                                         options);

        // Retrieve the compiled output
        String compiledCode = compiler.toSource();

        // Expected output based on the bug report
        String expectedOutput = "window.anchor=function(a,b){var HOLD=a.prop;return b(a)+HOLD;};";

        // Check if the compiled code matches the expected output
        assertEquals("Compiled code does not match expected output", expectedOutput, compiledCode);
    }
}
