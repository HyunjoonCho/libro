
import com.google.javascript.jscomp.*;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions.LanguageMode;
import org.junit.Test;
import static org.junit.Assert.*;

public class SingletonGetterTest {

    @Test
    public void testSingletonPreventsRemoval() {
        // Set up the compiler and options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        options.setLanguage(LanguageMode.ECMASCRIPT5);

        // Input JavaScript code
        String code = ""
                + "goog.provide('foo');\n"
                + "var foo = function() { this.values = []; };\n"
                + "goog.addSingletonGetter(foo);\n"
                + "foo.prototype.add = function(value) { this.values.push(value) };\n";

        // Initialize a JS SourceFile with the code
        SourceFile extern = SourceFile.fromCode("externs.js", "var goog = {};\ngoog.provide = function(s) {};goog.addSingletonGetter = function(ctor) { ctor.getInstance = function() { return ctor.instance_ || (ctor.instance_ = new ctor); }; };");
        SourceFile input = SourceFile.fromCode("input.js", code);

        // Compile the code
        Result result = compiler.compile(extern, input, options);

        // Verify that the output is not empty, indicating that the code was not completely removed
        String output = compiler.toSource();
        System.out.println(output);

        assertFalse("Expected the code to not be completely removed", output.trim().isEmpty());
    }
}
