
import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testUnexpectedTypedCoverage() {
        String sourceCode = 
            "/*global window*/\n" +
            "/*jslint sub: true*/\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @param {!Element} element\n" +
            " */\n" +
            "function Example(element) {\n" +
            "   /**\n" +
            "    * @param {!string} ns\n" +
            "    * @param {!string} name\n" +
            "    * @return {undefined}\n" +
            "    */\n" +
            "   this.appendElement = function appendElement(ns, name) {\n" +
            "       var e = element.ownerDocument.createElementNS(ns, name);\n" +
            "       element.appendChild(e);\n" +
            "   };\n" +
            "}\n" +
            "window[\"Example\"] = Example;";

        // Compile the JavaScript code using a hypothetical method compileJavaScript
        CompilerOutput output = compileJavaScript(sourceCode);

        // The expected outcome should be 100% typed coverage
        assertEquals(100.0, output.getTypedCoverage(), 0.1);
    }

    // Hypothetical method to compile JavaScript which returns a CompilerOutput object
    private CompilerOutput compileJavaScript(String source) {
        // This method would invoke the Closure Compiler and return a CompilerOutput
        // object with details like number of errors, warnings, and typed coverage.
        
        // For now, let's simulate the actual behavior for this test case
        return new CompilerOutput(0, 0, 73.7);
    }

    // A hypothetical class to represent the output of the compiler
    static class CompilerOutput {
        final int errors;
        final int warnings;
        final double typedCoverage;

        CompilerOutput(int errors, int warnings, double typedCoverage) {
            this.errors = errors;
            this.warnings = warnings;
            this.typedCoverage = typedCoverage;
        }

        double getTypedCoverage() {
            return typedCoverage;
        }
    }
}
