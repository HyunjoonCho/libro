
import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.InvokerTransformer;
import org.apache.commons.collections.map.TransformedMap;
import org.junit.Test;

import java.io.*;
import java.util.HashMap;
import java.util.Map;

public class VulnerabilityTest {

    @Test
    public void testArbitraryCodeExecution() {
        try {
            // Create a simple malicious transformer to execute an arbitrary method (e.g., "toString" here for safety)
            Transformer transformer = new InvokerTransformer(
                    "toString", null, null);

            // Prepare a map that will be transformed
            Map<String, String> map = new HashMap<>();
            map.put("testKey", "testValue");

            // Decorate the map with the malignant transformer
            Map transformedMap = TransformedMap.decorate(map, null, transformer);

            // Serialize the malicious map
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(baos);
            oos.writeObject(transformedMap);
            oos.close();

            // Deserialize the map, triggering the vulnerability
            ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
            ObjectInputStream ois = new ObjectInputStream(bais);
            ois.readObject(); // This will invoke the transformer
            ois.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
