public void testEbeMultiplyWithNaNAndInfinity() {
    double[] vectorData1 = {1.0, 2.0, Double.NaN, 4.0, 5.0};
    double[] vectorData2 = {Double.POSITIVE_INFINITY, 1.0, 3.0, 0.0, Double.NaN};
    RealVector v1 = new OpenMapRealVector(vectorData1);
    RealVector v2 = new OpenMapRealVector(vectorData2);

    RealVector resultMultiply = v1.ebeMultiply(v2);
    assertTrue(Double.isInfinite(resultMultiply.getEntry(0))); // 1.0 * Infinity
    assertEquals(2.0, resultMultiply.getEntry(1), 0.0); // 2.0 * 1.0
    assertTrue(Double.isNaN(resultMultiply.getEntry(2))); // NaN * 3.0
    assertEquals(0.0, resultMultiply.getEntry(3), 0.0); // 4.0 * 0.0
    assertTrue(Double.isNaN(resultMultiply.getEntry(4))); // 5.0 * NaN
}

public void testEbeDivideWithNaNAndInfinity() {
    double[] vectorData1 = {Double.POSITIVE_INFINITY, 2.0, Double.NaN, 4.0, 5.0};
    double[] vectorData2 = {1.0, 0.0, 3.0, Double.POSITIVE_INFINITY, Double.NaN};
    RealVector v1 = new OpenMapRealVector(vectorData1);
    RealVector v2 = new OpenMapRealVector(vectorData2);

    RealVector resultDivide = v1.ebeDivide(v2);
    assertTrue(Double.isInfinite(resultDivide.getEntry(0))); // Infinity / 1.0
    assertTrue(Double.isInfinite(resultDivide.getEntry(1))); // 2.0 / 0.0
    assertTrue(Double.isNaN(resultDivide.getEntry(2))); // NaN / 3.0
    assertEquals(0.0, resultDivide.getEntry(3), 0.0); // 4.0 / Infinity
    assertTrue(Double.isNaN(resultDivide.getEntry(4))); // 5.0 / NaN
}