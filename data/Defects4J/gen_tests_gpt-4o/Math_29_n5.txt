
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;

public class OpenMapRealVectorTest {

    @Test
    public void testEbeMultiplyWithNaN() {
        RealVector v1 = new OpenMapRealVector(new double[]{1, Double.NaN, 3});
        RealVector v2 = new OpenMapRealVector(new double[]{4, 5, 6});
        
        RealVector result = v1.ebeMultiply(v2);
        
        assertEquals(4.0, result.getEntry(0), 0.0);
        assertTrue(Double.isNaN(result.getEntry(1)));
        assertEquals(18.0, result.getEntry(2), 0.0);
    }

    @Test
    public void testEbeMultiplyWithInfinity() {
        RealVector v1 = new OpenMapRealVector(new double[]{1, Double.POSITIVE_INFINITY, 3});
        RealVector v2 = new OpenMapRealVector(new double[]{4, 5, 6});
        
        RealVector result = v1.ebeMultiply(v2);
        
        assertEquals(4.0, result.getEntry(0), 0.0);
        assertTrue(Double.isInfinite(result.getEntry(1)));
        assertEquals(18.0, result.getEntry(2), 0.0);
    }

    @Test
    public void testEbeDivideWithNaN() {
        RealVector v1 = new OpenMapRealVector(new double[]{1, Double.NaN, 3});
        RealVector v2 = new OpenMapRealVector(new double[]{4, 5, 6});
        
        RealVector result = v1.ebeDivide(v2);
        
        assertEquals(0.25, result.getEntry(0), 0.00001);
        assertTrue(Double.isNaN(result.getEntry(1)));
        assertEquals(0.5, result.getEntry(2), 0.00001);
    }

    @Test
    public void testEbeDivideWithInfinity() {
        RealVector v1 = new OpenMapRealVector(new double[]{1, Double.POSITIVE_INFINITY, 3});
        RealVector v2 = new OpenMapRealVector(new double[]{4, 5, 6});
        
        RealVector result = v1.ebeDivide(v2);
        
        assertEquals(0.25, result.getEntry(0), 0.00001);
        assertTrue(Double.isInfinite(result.getEntry(1)));
        assertEquals(0.5, result.getEntry(2), 0.00001);
    }
}
