
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;

import java.util.Collections;

public class AdvancedOptimizationTest {

    public static void main(String[] args) {
        String inputJs = "window['anchor'] = function (obj, modifiesProp) {" +
                         "  return (function (saved) {" +
                         "    return modifiesProp(obj) + saved;" +
                         "  })(obj['prop']);" +
                         "};";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        Compiler.setLoggingLevel(java.util.logging.Level.WARNING);
        com.google.javascript.jscomp.CompilationLevel.ADVANCED_OPTIMIZATIONS
             .setOptionsForCompilationLevel(options);
        
        Result result = compiler.compile(
                Collections.singletonList(JSSourceFile.fromCode("externs.js", "var window;")), 
                Collections.singletonList(JSSourceFile.fromCode("input.js", inputJs)), 
                options);
        
        String outputJs = compiler.toSource();

        // Printing the output for review
        System.out.println("Compiled JS: ");
        System.out.println(outputJs);

        // Test case to check the compiled output
        if (outputJs.contains("b(a)+a.prop")) {
            System.out.println("Test Failed: Semantically different output.");
        } else if (outputJs.contains("b(a)+HOLD")) {
            System.out.println("Test Passed: Correct output.");
        } else 
        {
            System.out.println("Unexpected compiled output.");
        }
    }
}
