
import org.apache.commons.math.analysis.BrentSolver;
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.exception.MaxIterationsExceededException;
import org.apache.commons.math.exception.FunctionEvaluationException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentSolverTest {

    @Test
    public void testBrentSolverWhenEndpointIsZero() throws MaxIterationsExceededException, FunctionEvaluationException {
        // Define a function with a zero at the endpoint
        UnivariateRealFunction function = new UnivariateRealFunction() {
            @Override
            public double value(double x) {
                if (x == -100000.0) {
                    return 0.0;
                }
                // Return some value that changes sign
                return Math.pow(x, 2) - 10194504630982173.0;
            }
        };

        BrentSolver solver = new BrentSolver();

        // Try to solve the function within the interval
        double min = -100000.0;
        double max = Double.MAX_VALUE; // Using 1.7976931348623157E308 causes precision issues

        try {
            double result = solver.solve(Integer.MAX_VALUE, function, min, max);
            assertEquals("The solver should return 0 when one endpoint is zero", 0.0, result, 1e-9);
        } catch (IllegalArgumentException e) {
            // If exception is thrown, fail the test because 0.0 is a valid root
            throw new AssertionError("The solver raised an IllegalArgumentException when it shouldn't have.", e);
        }
    }
}
