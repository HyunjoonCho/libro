
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testOptimizeQuadraticFunction() {
        // Create an instance of BrentOptimizer
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Define a simple quadratic function: f(x) = (x-2)^2
        UnivariateObjectiveFunction function = new UnivariateObjectiveFunction(x -> Math.pow(x - 2, 2));

        // Set up the search interval and initialize the optimizer
        SearchInterval interval = new SearchInterval(0, 4);

        // Perform the optimization
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(1000),
            function,
            GoalType.MINIMIZE,
            interval
        );

        // The expected optimal value is x = 2, since (2-2)^2 = 0 is the minimum.
        double expectedMinimumX = 2.0;
        double actualMinimumX = result.getPoint();
        
        // Assert the result is within a reasonable tolerance
        assertEquals("The optimizer did not find the correct minimum point.", expectedMinimumX, actualMinimumX, 1e-5);
    }
}
