public void testInconsistentHandlingOfNonJSDocComments() {
    // Given input with a non-JSDoc comment
    String input = "/* @preserve Foo License */\nalert(\"foo\");";

    // When processed by the Closure Compiler (simulated by a hypothetical method)
    List<String> warnings = simulateClosureCompilerProcessing(input);

    // Then expect a specific warning message about non-JSDoc comments
    assertTrue(warnings.contains("stdin:1: WARNING - Parse error. Non-JSDoc comment has annotations. Did you mean to start it with '/**'?"));
}

private List<String> simulateClosureCompilerProcessing(String input) {
    // Simulate the processing and return a list of warning strings
    // NOTE: This method is hypothetical and would actually involve invoking the Closure Compiler
    List<String> warnings = new ArrayList<>();
    if (input.contains("@preserve") && !input.startsWith("/**")) {
        warnings.add("stdin:1: WARNING - Parse error. Non-JSDoc comment has annotations. Did you mean to start it with '/**'?");
    }
    return warnings;
}