
import com.google.javascript.jscomp.CommandLineRunner;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class NonJSDocCommentTest {

    @Test
    public void testNonJSDocCommentHandling() {
        String[] args = {
            "--warning_level=VERBOSE",
            "--js_output_file=/dev/null"
        };

        String codeWithOrdinaryComment = "/* @preserve Foo License */\nalert(\"foo\");";
        String expectedWarning = "stdin:1: WARNING - Parse error. Non-JSDoc comment has annotations. Did you mean to start it with '/**'?";

        String output = runClosureCompiler(args, codeWithOrdinaryComment);
        assertEquals(true, output.contains(expectedWarning));

        String codeWithExclamationMark = "/*! @preserve Foo License */\nalert(\"foo\");";
        output = runClosureCompiler(args, codeWithExclamationMark);
        assertEquals(false, output.contains(expectedWarning)); // No warning expected

        // Also check that with /*! the comment is not preserved
        String codeWithoutWarning = runClosureCompiler(args, codeWithExclamationMark);
        assertEquals(false, codeWithoutWarning.contains("Foo License"));
    }

    private String runClosureCompiler(String[] args, String inputCode) {
        CustomCommandLineRunner runner = new CustomCommandLineRunner(args, inputCode);
        runner.enableTestMode();
        runner.setExitCodeReceiver((exitCode) -> {});
        runner.doRun();
        return runner.getTestOutputs();
    }

    private static class CustomCommandLineRunner extends CommandLineRunner {

        private final String inputCode;
        private StringBuilder outputBuilder = new StringBuilder();

        CustomCommandLineRunner(String[] args, String inputCode) {
            super(args);
            this.inputCode = inputCode;
        }

        @Override
        protected void addInputSourceFiles(Compiler compiler, List<SourceFile> inputs) throws IOException {
            inputs.add(SourceFile.fromCode("stdin", inputCode));
        }

        @Override
        protected void writeOutput(Compiler compiler, List<SourceFile> inputs) {
            outputBuilder.append(compiler.toSource());
        }

        @Override
        protected void printError(String msg) {
            outputBuilder.append(msg).append("\n");
        }

        public String getTestOutputs() {
            return outputBuilder.toString();
        }
    }
}
