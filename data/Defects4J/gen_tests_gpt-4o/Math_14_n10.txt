public void testLargeNumberOfWeights() {
    int numberOfPoints = 41200;
    double[] weights = new double[numberOfPoints];
    Arrays.fill(weights, 1.0);

    double[] target = new double[numberOfPoints];
    Arrays.fill(target, 0.0);

    double[][] initialGuess = new double[1][numberOfPoints];
    Arrays.fill(initialGuess[0], 1.0);

    ParametricUnivariateFunction polynomialFunction = new PolynomialFunction.Parametric();
  
    try {
        CurveFitter<ParametricUnivariateFunction> fitter = 
            new CurveFitter<>(new LevenbergMarquardtOptimizer());
        for (int i = 0; i < numberOfPoints; i++) {
            fitter.addObservedPoint(weights[i], i, target[i]);
        }
        fitter.fit(polynomialFunction, initialGuess[0]);
        fail("Expected OutOfMemoryError not thrown");
    } catch (OutOfMemoryError e) {
        // Expected exception
    }
}