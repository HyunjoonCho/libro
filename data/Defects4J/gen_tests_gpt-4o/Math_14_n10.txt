
import org.apache.commons.math3.optim.nonlinear.vector.*;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.*;
import org.apache.commons.math3.fitting.PolynomialCurveFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoints;
import org.junit.Test;
import org.apache.commons.math3.fitting.*;

public class WeightMatrixTest {

    @Test
    public void testLargeNumberOfWeights() {
        int numDataPoints = 41200; // Large number of data points
        WeightedObservedPoints obs = new WeightedObservedPoints();

        // Simulating large number of data points
        for (int i = 0; i < numDataPoints; i++) {
            // Adding points with a simple linear y = 2*x + 3 function for simplicity
            obs.add(i, 2 * i + 3);
        }

        // Polynomial curve fitter with a low degree polynomial (e.g., linear)
        PolynomialCurveFitter fitter = PolynomialCurveFitter.create(1);

        try {
            // Attempt to fit the curve
            double[] coefficients = fitter.fit(obs.toList());

            // Successfully fitting would unlikely reach here with such a high number of points
            // due to the memory overhead in the described bug, the purpose is to test memory exhaustion.
            // Thus legitimately expecting the test to fail (or be slow) due to memory constraints.
        } catch (OutOfMemoryError e) {
            // Catching OutOfMemoryError to assert that the expected error occurs
            System.out.println("OutOfMemoryError encountered as expected with large number of weights.");
        }
    }
}
