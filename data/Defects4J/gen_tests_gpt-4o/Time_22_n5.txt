
import static org.junit.Assert.assertEquals;

import org.joda.time.DateTimeConstants;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Period;
import org.junit.Test;

public class DurationToPeriodTest {

    @Test
    public void testDurationToPeriodWithFixedTimeZone() {
        // Setting the default time zone to GMT
        DateTimeZone.setDefault(DateTimeZone.forID("Etc/GMT"));

        // Duration of more than 24 hours
        Duration duration = new Duration(
            DateTimeConstants.MILLIS_PER_HOUR * 30 +
            DateTimeConstants.MILLIS_PER_MINUTE * 50 +
            DateTimeConstants.MILLIS_PER_SECOND * 14
        );

        System.out.println("Timezone: " + DateTimeZone.getDefault());
        System.out.println("Duration before: " + duration);

        Period period = duration.toPeriod();

        System.out.println("Period after: " + period);

        // Check that the period converts correctly
        assertEquals("P1DT6H50M14S", period.toString());
    }

    @Test
    public void testDurationToPeriodWithDSTTimeZone() {
        // Setting the default time zone to America/Chicago (with DST)
        DateTimeZone.setDefault(DateTimeZone.forID("America/Chicago"));

        // Duration of more than 24 hours
        Duration duration = new Duration(
            DateTimeConstants.MILLIS_PER_HOUR * 30 +
            DateTimeConstants.MILLIS_PER_MINUTE * 50 +
            DateTimeConstants.MILLIS_PER_SECOND * 14
        );

        System.out.println("Timezone: " + DateTimeZone.getDefault());
        System.out.println("Duration before: " + duration);

        Period period = duration.toPeriod();

        System.out.println("Period after: " + period);

        // Check that the period converts consistently regardless of the time zone
        assertEquals("PT30H50M14S", period.toString());
    }
}
