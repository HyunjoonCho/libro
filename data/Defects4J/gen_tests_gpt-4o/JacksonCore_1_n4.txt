
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonParser.Feature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;
import java.math.BigDecimal;

public class BigDecimalNanParsingTest {

    @Test(expected = NullPointerException.class)
    public void testParseNanAsBigDecimalThrowsException() throws IOException {
        // Set up a JSON parser with ALLOW_NON_NUMERIC_NUMBERS enabled
        JsonFactory factory = new JsonFactory();
        ObjectMapper mapper = new ObjectMapper(factory);
        factory.configure(Feature.ALLOW_NON_NUMERIC_NUMBERS, true);

        // JSON input containing NaN
        String jsonWithNan = "{\"value\":NaN}";

        JsonParser parser = factory.createParser(jsonWithNan);
        parser.nextToken(); // Start object
        parser.nextToken(); // Field name "value"
        parser.nextToken(); // Value NaN, this should be where the exception occurs

        // Attempt to read NaN as BigDecimal, which should throw a NullPointerException
        BigDecimal value = parser.getDecimalValue();

        // The above line should trigger the exception, so this point should not be reached
    }
}
