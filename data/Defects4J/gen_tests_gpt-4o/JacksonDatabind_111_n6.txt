public void testDeserializeNullWithNestedAtomicReferences() throws IOException {
    class MyBean {
        private AtomicReference<AtomicReference<Integer>> refRef;
        public AtomicReference<AtomicReference<Integer>> getRefRef() {
            return refRef;
        }
        public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {
            this.refRef = refRef;
        }
    }

    ObjectMapper objectMapper = new ObjectMapper();
    ObjectReader objectReader = objectMapper.readerFor(MyBean.class);

    MyBean intRef = objectReader.readValue("{\"refRef\": 2}");
    assertNotNull(intRef.getRefRef());
    assertNotNull(intRef.getRefRef().get());
    assertEquals(Integer.valueOf(2), intRef.getRefRef().get().get());

    MyBean nullRef = objectReader.readValue("{\"refRef\": null}");
    assertNotNull(nullRef.getRefRef());
    assertNotNull(nullRef.getRefRef().get());
    assertNull(nullRef.getRefRef().get().get());
}