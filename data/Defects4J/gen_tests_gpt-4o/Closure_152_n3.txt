public void testResolveTypesCastException() {
    try {
        // Assuming we have a method compileJavaScript that takes the script and 
        // compiler options as parameters and performs the compilation. 
        // Replace with actual API if different.
        List<String> compilerOptions = Arrays.asList(
            "--create_name_map_files", "true", 
            "--jscomp_warning", "missingProperties", 
            "--jscomp_warning", "undefinedVars", 
            "--jscomp_warning", "checkTypes", 
            "--warning_level", "VERBOSE", 
            "--summary_detail_level", "3", 
            "--process_closure_primitives", "true",
            "--jscomp_error", "strictModuleDepCheck", 
            "--jscomp_error", "invalidCasts", 
            "--logging_level", "ALL", 
            "--compilation_level", "ADVANCED_OPTIMIZATIONS"
        );
        
        // Assuming we have the script as a String to be compiled.
        String script = "var x = function() {}; x();"; // Simplified script, replace with appropriate content.
        
        compileJavaScript(script, compilerOptions);
        fail("Expected a ClassCastException due to UnionType to ObjectType cast");
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof ClassCastException);
        assertTrue(e.getCause().getMessage().contains("UnionType cannot be cast to ObjectType"));
    }
}

private void compileJavaScript(String script, List<String> options) {
    // Mock implementation of the compileJavaScript method
    // This method should interact with the actual JavaScript compiler API, setting the appropriate options.
}