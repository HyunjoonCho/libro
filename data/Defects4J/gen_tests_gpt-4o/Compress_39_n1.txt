
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;

import static org.junit.Assert.*;

public class ZipFileTest {

    @Test
    public void testTruncatedZipFileErrorMessage() {
        // Step 1: Create a truncated zip file
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try (ZipOutputStream zos = new ZipOutputStream(baos)) {
            ZipEntry entry = new ZipEntry("test.txt");
            zos.putNextEntry(entry);
            zos.write("This is a test".getBytes());
            // Do not close the entry or the ZipOutputStream correctly to simulate truncation
        } catch (IOException e) {
            fail("Unexpected IOException during ZIP creation.");
        }
        // Now our baos contains a truncated zip data

        // Step 2: Attempt to read from the malformed ZIP data to trigger EOFException
        byte[] truncatedZipData = baos.toByteArray();
        try (ZipInputStream zis = new ZipInputStream(new ByteArrayInputStream(truncatedZipData))) {
            while (zis.getNextEntry() != null) {
                // Attempt to read all entries, expecting an exception
            }
            fail("EOFException was expected but not thrown.");
        } catch (IOException e) {
            // Verify the type of exception and contents
            assertTrue("Expected EOFException", e instanceof java.io.EOFException);
            // Check that the exception message is not excessively large or verbose
            assertTrue("Error message is too verbose or contains large data", 
                       e.getMessage().length() < 1024); // Example constraint on message length
        }
    }
}
