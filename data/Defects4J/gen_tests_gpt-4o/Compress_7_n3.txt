
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TarUtilsTest {

    @Test
    public void testParseNameWithSpecialCharacters() {
        // Example byte buffer with characters outside the range 0-127
        // This should ideally represent the tar entry name in bytes
        byte[] buffer = new byte[] {
            48,  // '0'
            51,  // '3'
            48,  // '0'
            50,  // '2'
            // Some bytes representing special characters
            (byte) 0xB1, // ±
            (byte) 0xB1, // ±
            (byte) 0xB1, // ±
            70,  // 'F'
            48,  // '0'
            54,  // '6'
            (byte) 0xB1, // ±
            // more bytes representing special characters and a model name
            (byte) 0xB1, (byte) 0xB1, (byte) 0xB1, (byte) 0xB1, 
            (byte) 0xB1, (byte) 0xB1, (byte) 0xB1, (byte) 0xB1,
            77,  // 'M'
            79,  // 'O'
            69,  // 'E'
            46,  // '.'
            109, // 'm'
            111, // 'o'
            100, // 'd'
            101, // 'e'
            108  // 'l'
        };

        String expectedName = "0302-0601-3±±±F06±W220±ZB±LALALA±±±±±±±±±±CAN±±DC±±±04±060302±MOE.model";
        
        // Parse the name using the faulty method
        String actualName = TarUtils.parseName(buffer, 0, buffer.length);

        // This assertion should fail if the bug is present, showing the difference
        assertEquals(expectedName, actualName);
    }
}
