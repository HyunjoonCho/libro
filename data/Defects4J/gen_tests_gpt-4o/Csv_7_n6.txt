
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.Reader;
import java.io.StringReader;
import java.util.Map;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class HeaderMapTest {

    @Test
    public void testHeaderMapWithDuplicateHeaders() throws Exception {
        String csvData = "Col1,Col2,Col2,Col3,Col4\n" +
                         "1,2,3,4,5\n" +
                         "4,5,6,7,8\n";

        CSVFormat format = CSVFormat.RFC4180.withDelimiter(',')
                                            .withQuote('"')
                                            .withQuotePolicy(CSVFormat.DEFAULT.getQuotePolicy())
                                            .withIgnoreSurroundingSpaces()
                                            .withHeader()
                                            .withSkipHeaderRecord();

        try (Reader reader = new StringReader(csvData);
             CSVParser parser = new CSVParser(reader, format)) {

            // Get header map
            Map<String, Integer> headerMap = parser.getHeaderMap();

            // Test the behavior with duplicate header names
            // Check if the map contains the last occurrence of duplicate headers
            assertEquals("HeaderMap should map the last duplicate column (Col2) to index 2",
                         Integer.valueOf(2), headerMap.get("Col2"));

            // Optional: If you expect an error or specific behavior, adjust the assertions accordingly
            // For example, assert if the header map should contain a certain entry or have a certain size

            // Iterate over records just to ensure parsing
            for (CSVRecord record : parser) {
                // Ensure that data is accessed correctly through header names
                // For example, check that accessing "Col2" retrieves the value of the last "Col2" column
                assertEquals("3", record.get("Col2"));
            }
        }
    }
}
