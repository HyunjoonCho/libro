public void testConstTypeCastWarning() {
    String jsCode = "/**\n" +
            " * Class defining an interface with two numbers.\n" +
            " * @interface\n" +
            " */\n" +
            "function TwoNumbers() {}\n" +
            "/** @type number */\n" +
            "TwoNumbers.prototype.first;\n" +
            "/** @type number */\n" +
            "TwoNumbers.prototype.second;\n" +
            "\n" +
            "/** @const */ var SOME_DEFAULT =\n" +
            " /** @type {TwoNumbers} */ ({first: 1, second: 2});\n" +
            "\n" +
            "/**\n" +
            " * Class with a two number member.\n" +
            " * @constructor\n" +
            " */\n" +
            "function HasTwoNumbers() {\n" +
            " /** @type {TwoNumbers} */\n" +
            " this.twoNumbers = this.getTwoNumbers();\n" +
            "}\n" +
            "\n" +
            "/**\n" +
            " * Get the default two numbers.\n" +
            " * @return {TwoNumbers}\n" +
            " */\n" +
            "HasTwoNumbers.prototype.getTwoNumbers = function() {\n" +
            " return SOME_DEFAULT;\n" +
            "};";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    Result result = compiler.compile(externs, SourceFile.fromCode("test.js", jsCode), options);
    
    assertFalse("Expected compilation warnings", result.warnings.isEmpty());
    assertTrue("Expected a specific type cast warning", 
        result.warnings.get(0).getDescription().contains("typeCast"));
}