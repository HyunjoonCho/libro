
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class JsonIdentityInfoTest {

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    public static class Item {
        public int id;
        public String name;

        @JsonCreator
        public Item(int id) {
            this.id = id;
        }
    }

    @JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
    public static class Container {
        public int id;
        @JsonIdentityReference(alwaysAsId = true)
        public Item item;

        @JsonCreator
        public Container(int id) {
            this.id = id;
        }
    }

    @Test
    public void testJsonIdentityInfoDeserializationIssue() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();

        List<Item> itemList = new ArrayList<>();
        Item item1 = new Item(1);
        item1.name = "Item1";
        itemList.add(item1);

        Container container = new Container(10);
        container.item = item1;

        String jsonList = mapper.writeValueAsString(itemList);
        String jsonContainer = mapper.writeValueAsString(container);

        List<Item> deserializedItems = mapper.readValue(jsonList, mapper.getTypeFactory().constructCollectionType(List.class, Item.class));
        Container deserializedContainer = mapper.readValue(jsonContainer, Container.class);

        assertEquals(itemList.get(0).id, deserializedItems.get(0).id);
        assertEquals(container.item.id, deserializedContainer.item.id); // This is the crucial part that should fail
    }
}
