
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

// Define a custom collection class
class CustomStringCollection {
    private final List<String> strings;

    // Constructor without a default no-args constructor
    @JsonCreator
    public CustomStringCollection(@JsonProperty("strings") List<String> strings) {
        this.strings = Collections.unmodifiableList(new ArrayList<>(strings));
    }

    public List<String> getStrings() {
        return strings;
    }
}

// An entity class containing a custom collection
class CustomEntity {
    @JsonDeserialize(as = CustomStringCollection.class)
    private final CustomStringCollection collection;

    @JsonCreator
    public CustomEntity(@JsonProperty("collection") CustomStringCollection collection) {
        this.collection = collection;
    }

    public CustomStringCollection getCollection() {
        return collection;
    }
}

public class CustomCollectionDeserializationTest {

    @Test(expected = InvalidDefinitionException.class)
    public void testCustomStringCollectionDeserialization() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        // JSON String where `collection` is supposed to be deserialized into `CustomStringCollection`
        String json = "{ \"collection\": { \"strings\": [\"one\", \"two\", \"three\"] } }";

        // Deserialization should throw an InvalidDefinitionException based on the bug report
        objectMapper.readValue(json, CustomEntity.class);
    }
}
