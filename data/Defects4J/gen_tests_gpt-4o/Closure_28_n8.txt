public void testConstantFunctionInlining() {
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    Compiler compiler = new Compiler();
    SourceFile extern = SourceFile.fromCode("externs.js", "");
    SourceFile input = SourceFile.fromCode("input.js", 
        "function f() { return false; }" +
        "if (!f()) alert('hi');" + // This line repeated 25 times
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" +
        "if (!f()) alert('hi');" 
    );

    Result result = compiler.compile(extern, input, options);
    String compiledCode = compiler.toSource();

    assertFalse("Function should be inlined",
        compiledCode.contains("function f()") || compiledCode.contains("f();"));
}