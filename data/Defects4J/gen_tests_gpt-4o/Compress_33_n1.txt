
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.Deflater;

import static org.junit.Assert.fail;

public class CompressorStreamFactoryTest {

    @Test
    public void testDeflateStreamWithZlibHeader() {
        // Example data compressed with zlib header.
        byte[] inputData = "Example data to compress".getBytes();
        byte[] compressedData = new byte[100];
        Deflater deflater = new Deflater();
        deflater.setInput(inputData);
        deflater.finish();
        int compressedDataLength = deflater.deflate(compressedData);

        // Create a ByteArrayInputStream from the compressed data
        ByteArrayInputStream bais = new ByteArrayInputStream(compressedData, 0, compressedDataLength);

        try {
            // Attempt to create a CompressorInputStream using CompressorStreamFactory
            CompressorInputStream cis = new CompressorStreamFactory().createCompressorInputStream(bais);
            
            // If no exception is thrown and input is processed, the test should fail
            fail("Expected a CompressorException due to unrecognized deflate stream with zlib header");
        } catch (CompressorException e) {
            // Verify the exception message to ensure it's due to the issue we expect
            assertEquals("No Compressor found for the stream signature.", e.getMessage());
        } catch (IOException e) {
            fail("IOException occurred: " + e.getMessage());
        }
    }
}
