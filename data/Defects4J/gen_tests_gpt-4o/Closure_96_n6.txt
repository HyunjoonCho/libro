
import static org.junit.Assert.assertTrue;

import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.rhino.Node;
import org.junit.Test;

public class VarArgsTypeCheckTest {

    @Test
    public void testVarArgsTypeCheck() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        // Enable type-checking warnings
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES, com.google.javascript.jscomp.CheckLevel.WARNING);
        
        String js = ""
            + "/**\n"
            + " * @param {...string} var_args\n"
            + " */\n"
            + "function foo(var_args) {\n"
            + "  return arguments.length;\n"
            + "}\n"
            + "foo('hello');\n"
            + "foo(123);\n"             // Should produce a warning
            + "foo('hello', 123);\n";   // Should also produce a warning
        
        SourceFile extern = SourceFile.fromCode("externs.js", "function alert(x) {}");
        SourceFile input = SourceFile.fromCode("input.js", js);
        
        Result result = compiler.compile(extern, input, options);
        
        // Check that there are warnings
        assertTrue("Expected warnings for type mismatch in var_args", result.warnings.length > 0);
        
        // Print the warnings for manual inspection
        for (com.google.javascript.jscomp.JSError warning : result.warnings) {
            System.out.println(warning);
        }
    }
}
