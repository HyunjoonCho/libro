
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import org.junit.Test;

import java.text.ParseException;

import static org.junit.Assert.assertEquals;

public class StdDateFormatLenientTest {

    @Test
    public void testLenientDateParsing() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        // We would like to do this, but it doesn't work as StdDateFormat doesn't support setting lenient to false
        // StdDateFormat dateFormat = new StdDateFormat().setLenient(false);
        
        // Instead, we use the default lenient behavior
        StdDateFormat dateFormat = new StdDateFormat();

        String dateStr = "2015-01-32"; // This date does not exist

        // Parsing the date using deprecated method just to illustrate
        try {
            dateFormat.parse(dateStr);
            // If we reach here, the parsing was lenient and adjusted the date automatically
            // This asserts the incorrect lenient parsing behavior
            assertEquals("2015-02-01", mapper.writeValueAsString(dateStr)); 
        } catch (ParseException e) {
            // Ideally, we would expect a ParseException for a non-existent date like "2015-01-32"
            throw new AssertionError("Expected lenient parsing, but found strict behavior", e);
        }
    }
}
