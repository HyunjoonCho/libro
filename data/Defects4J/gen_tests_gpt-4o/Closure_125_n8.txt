public void testIllegalStateExceptionGetInstanceType() {
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.ALL_DIAGNOSTICS, CheckLevel.VERBOSE);
    options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);
    options.setLanguageOut(CompilerOptions.LanguageMode.ECMASCRIPT5);

    SourceFile extern = SourceFile.fromCode("externs.js", "");
    SourceFile input = SourceFile.fromCode("crash.js",
        "var test = {};\n" +
        "/**\n" +
        " * @interface\n" +
        " */\n" +
        "test.T = function() {};\n" +
        "/**\n" +
        " * @constructor\n" +
        " * @implements {test.T}\n" +
        " */\n" +
        "test.A = function() {};\n" +
        "/**\n" +
        " * @constructor\n" +
        " * @implements {test.T}\n" +
        " */\n" +
        "test.B = function() {};\n" +
        "/**\n" +
        " * @constructor\n" +
        " */\n" +
        "test.X = function() {\n" +
        "  this.type = test.A;\n" +
        "  this.t = this.f();\n" +
        "};\n" +
        "/**\n" +
        " * @return {test.T}\n" +
        " */\n" +
        "test.X.prototype.f = function() {\n" +
        "  if (this.type === test.A) {\n" +
        "    return new test.A();\n" +
        "  } else if (this.type === test.B) {\n" +
        "    return new test.B();\n" +
        "  }\n" +
        "};");

    try {
        compiler.compile(extern, input, options);
        fail("Expected IllegalStateException not thrown");
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof IllegalStateException);
    }
}