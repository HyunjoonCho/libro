
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;

import java.util.Random;

import static org.junit.Assert.assertEquals;

public class MultiStartUnivariateOptimizerTest {

    @Test
    public void testGetResultReturnsBestResult() {
        // Define a simple quadratic function with a minimum at x = 3
        UnivariateFunction function = x -> (x - 3) * (x - 3);
        
        // Create a BrentOptimizer
        BrentOptimizer brent = new BrentOptimizer(1e-10, 1e-14);
        
        // Create a MultiStartUnivariateOptimizer that tries 5 different starting points
        MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(brent, 5, new Random(1));

        // Optimize the function
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(100),
            new UnivariateObjectiveFunction(function),
            org.apache.commons.math3.optim.univariate.GoalType.MINIMIZE,
            new SearchInterval(-10, 10)
        );

        // Optimize method should have found the minimum at x = 3
        assertEquals(3.0, result.getPoint(), 1e-5);
        
        // Check if getResult() returns the same result as the best found during optimize()
        assertEquals(3.0, optimizer.getResult(), 1e-5);
        
        // Check if getFunctionValue() returns the same value as the best found during optimize()
        assertEquals(0.0, optimizer.getFunctionValue(), 1e-5);
    }
}
