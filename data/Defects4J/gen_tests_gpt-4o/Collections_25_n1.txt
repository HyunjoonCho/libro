
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.collections4.IteratorUtils;
import org.junit.Test;
import static org.junit.Assert.*;

public class CollatedIteratorTest {

    @Test
    public void testCollatedIteratorWithNullComparator() {
        // Prepare test data
        List<Integer> list1 = new ArrayList<>();
        list1.add(1);
        list1.add(3);
        list1.add(5);

        List<Integer> list2 = new ArrayList<>();
        list2.add(2);
        list2.add(4);
        list2.add(6);

        // Create collated iterator with null comparator
        Iterator<Integer> collatedIterator = IteratorUtils.collatedIterator(null, list1.iterator(), list2.iterator());

        // Test that the iterator returns elements in natural order
        assertTrue(collatedIterator.hasNext());
        assertEquals(Integer.valueOf(1), collatedIterator.next());
        assertTrue(collatedIterator.hasNext());
        assertEquals(Integer.valueOf(2), collatedIterator.next());
        assertTrue(collatedIterator.hasNext());
        assertEquals(Integer.valueOf(3), collatedIterator.next());
        assertTrue(collatedIterator.hasNext());
        assertEquals(Integer.valueOf(4), collatedIterator.next());
        assertTrue(collatedIterator.hasNext());
        assertEquals(Integer.valueOf(5), collatedIterator.next());
        assertTrue(collatedIterator.hasNext());
        assertEquals(Integer.valueOf(6), collatedIterator.next());
        assertFalse(collatedIterator.hasNext());
    }
}
