
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.fail;

public class UUIDDeserializerTest {

    public static class IdBean {
        private UUID id;

        public UUID getId() {
            return id;
        }

        public void setId(UUID id) {
            this.id = id;
        }
    }

    @Test
    public void itUsesDeserializationProblemHandlerProperly() {
        ObjectMapper mapper = new ObjectMapper();
        
        // Adding a Deserialization Problem Handler
        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public Object handleWeirdStringValue(DeserializationContext ctxt, Class<?> targetType, String valueToConvert, String failureMsg) {
                // Attempt to handle the problem by returning a null UUID
                if (targetType == UUID.class && valueToConvert.equals("I am not a UUID")) {
                    return null;
                }
                return DeserializationProblemHandler.NOT_HANDLED;
            }
        });

        try {
            // Attempt to deserialize an invalid UUID
            IdBean result = mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
            if (result.getId() != null) {
                fail("Expected id to be null, but was: " + result.getId());
            }
        } catch (InvalidFormatException e) {
            // If we reach this point, the DeserializationProblemHandler did not prevent the exception
            fail("DeserializationProblemHandler was not allowed to handle the problem: " + e.getMessage());
        } catch (IOException e) {
            fail("Unexpected IO exception: " + e.getMessage());
        }
    }
}
