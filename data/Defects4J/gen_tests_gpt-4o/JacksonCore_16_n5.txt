
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonParserSequence;
import com.fasterxml.jackson.core.JsonToken;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

public class JsonParserSequenceTest {

    @Test
    public void testJsonParserSequenceSkipsToken() throws IOException {
        JsonFactory factory = new JsonFactory();

        // Create first parser
        JsonParser parser1 = factory.createParser("{\"key1\":\"value1\"}");
        // Move to start object
        parser1.nextToken();

        // Create second parser
        JsonParser parser2 = factory.createParser("{\"key2\":\"value2\"}");
        // Move to start object, then to the field name
        parser2.nextToken();
        parser2.nextToken();

        // Create a sequence of the two parsers
        JsonParserSequence sequence = JsonParserSequence.createFlattened(parser1, parser2);

        // Move to first parser's field name
        assertEquals(JsonToken.FIELD_NAME, sequence.nextToken());
        assertEquals("key1", sequence.getCurrentName());

        // Move to first parser's value
        assertEquals(JsonToken.VALUE_STRING, sequence.nextToken());
        assertEquals("value1", sequence.getText());

        // Test if we correctly move to the second parser's field name
        assertEquals(JsonToken.FIELD_NAME, sequence.nextToken());
        assertEquals("key2", sequence.getCurrentName());

        // Move to second parser's value
        assertEquals(JsonToken.VALUE_STRING, sequence.nextToken());
        assertEquals("value2", sequence.getText());

        // Should return null as there are no more tokens
        assertNull(sequence.nextToken());
    }
}
