
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonGenerationException;
import java.io.IOException;
import java.io.StringWriter;
import org.junit.Test;

import static org.junit.Assert.*;

public class JsonSurrogateTest {

    @Test
    public void testSplitSurrogateOnWriteRaw() {
        // This string includes a valid multi-byte Unicode character
        // The character "\uD83D\uDE00" represents a smiley emoji
        String jsonWithSurrogate = "{\"message\":\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\\uD83D\\uDE00\"}";

        try {
            StringWriter writer = new StringWriter();
            JsonFactory factory = new JsonFactory();
            JsonGenerator generator = factory.createGenerator(writer);

            generator.writeRaw(jsonWithSurrogate);
            generator.close();

            fail("Expected JsonGenerationException not thrown");
        } catch (JsonGenerationException e) {
            assertTrue(e.getMessage().contains("Split surrogate on writeRaw() input"));
            // Exception is expected, test passes
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
    }
}
