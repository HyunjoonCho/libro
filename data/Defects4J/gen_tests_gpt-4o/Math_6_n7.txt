
import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.Evaluation;
import org.apache.commons.math3.fitting.leastsquares.ParameterValidator;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.PointVectorValuePair;
import org.apache.commons.math3.optim.SimpleVectorValueChecker;
import org.apache.commons.math3.optim.nonlinear.vector.ModelFunction;
import org.apache.commons.math3.optim.nonlinear.vector.ModelFunctionJacobian;
import org.apache.commons.math3.optim.nonlinear.vector.Target;
import org.apache.commons.math3.optim.nonlinear.vector.Weight;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testGetIterations() {
        // setup
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();

        // action
        optimizer.optimize(new MaxEval(100), new Target(new double[]{1}),
                new Weight(new double[]{1}), new org.apache.commons.math3.optim.InitialGuess(new double[]{3}),
                new ModelFunction(new MultivariateVectorFunction() {
                    @Override
                    public double[] value(double[] point) throws IllegalArgumentException {
                        return new double[]{FastMath.pow(point[0], 4)};
                    }
                }), new ModelFunctionJacobian(new MultivariateMatrixFunction() {
                    @Override
                    public double[][] value(double[] point) throws IllegalArgumentException {
                        return new double[][]{{0.25 * FastMath.pow(point[0], 3)}};
                    }
                }));

        // verify
        assertThat(optimizer.getEvaluations(), greaterThan(1));
        assertThat(optimizer.getIterations(), greaterThan(1));
    }
}
