
import static org.junit.Assert.assertEquals;

import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.junit.Test;

public class TarUtilsTest {

    @Test
    public void testParseNameWithSpecialCharacters() {
        // Example byte buffer simulating special characters in the entry name
        byte[] buffer = new byte[] {
            48, 51, 48, 50, 45, 48, 54, 48, 49, 45, 51, (byte) 177, (byte) 177, (byte) 177, 
            70, 48, 54, (byte) 177, 87, 50, 50, 48, (byte) 177, 90, 66, (byte) 177, 76, 65, 
            76, 65, 76, 65, (byte) 177, (byte) 177, (byte) 177, (byte) 177, (byte) 177, (byte) 177, 
            (byte) 177, (byte) 177, (byte) 177, (byte) 177, 67, 65, 78, (byte) 177, (byte) 177, 68, 
            67, (byte) 177, (byte) 177, 48, 52, (byte) 177, 48, 54, 48, 51, 48, 50, (byte) 177, 
            77, 79, 69, 46, 109, 111, 100, 101, 108
        };

        String expected = "0302-0601-3±±±F06±W220±ZB±LALALA±±±±±±±±±±CAN±±DC±±±04±060302±MOE.model";
        String parsedName = parseName(buffer);

        assertEquals(expected, parsedName);
    }

    // Mock method to simulate TarUtils.parseName behavior
    // Implements the fix by correctly handling bytes
    private String parseName(byte[] buffer) {
        StringBuilder result = new StringBuilder();

        // Implementing the correct way of handling bytes to chars
        for (byte b : buffer) {
            result.append(new String(new byte[] { b }, java.nio.charset.StandardCharsets.ISO_8859_1));
        }

        return result.toString();
    }
}
