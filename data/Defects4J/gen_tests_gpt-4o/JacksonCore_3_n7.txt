
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.sym.BytesToNameCanonicalizer;
import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.smile.SmileFactory;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

public class UTF8StreamJsonParserTest {

    @org.junit.jupiter.api.Test
    public void testIncorrectColumnPositionInException() {
        String jsonInput = "{\"key\": \"value\", \"key2\": }"; // Invalid JSON (missing value for key2)
        
        // Convert the JSON String to an InputStream
        InputStream inputStream = new ByteArrayInputStream(jsonInput.getBytes());
        
        ObjectMapper objectMapper = new ObjectMapper();
        
        try {
            IOContext ctxt = new IOContext(objectMapper.getFactory()._createContentReference(), null, false);
            BytesToNameCanonicalizer sym = BytesToNameCanonicalizer.createRoot();

            JsonParser parser = new TestUTF8StreamJsonParser(
                ctxt, 
                0, 
                inputStream, 
                (ObjectCodec) null, 
                sym, 
                new byte[0], 
                0, 
                jsonInput.length(), 
                true);
                
            parser.setCodec(objectMapper);
            
            // Iterate over tokens and force parsing of invalid JSON
            while (parser.nextToken() != null) {
                // No-op
            }
            
            fail("Expected JsonParseException was not thrown");

        } catch (JsonParseException e) {
            // Check if the error message contains the correct column position
            int expectedColumn = jsonInput.indexOf('}') + 1;  // The position where the error should be reported
            int actualColumn = e.getLocation().getColumnNr();
            assertEquals(expectedColumn, actualColumn, "The column position in the exception is incorrect.");
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }

    // Dummy class to access the constructor with input buffering settings
    private static class TestUTF8StreamJsonParser extends UTF8StreamJsonParser {
        public TestUTF8StreamJsonParser(IOContext ctxt, int features, InputStream in, 
                                        ObjectCodec codec, BytesToNameCanonicalizer sym, 
                                        byte[] inputBuffer, int start, int end, 
                                        boolean bufferRecyclable) {
            super(ctxt, features, in, codec, sym, inputBuffer, start, end, bufferRecyclable);
        }
    }
}
