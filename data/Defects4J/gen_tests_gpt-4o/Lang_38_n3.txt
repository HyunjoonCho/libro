
import org.apache.commons.lang3.time.FastDateFormat;
import org.junit.Test;

import java.util.GregorianCalendar;
import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class DateFormatUtilsBugTest {

    @Test
    public void testFormat_CalendarIsoMsZulu_FailsWithoutCallingGetTime() {
        final String dateTime = "2009-10-16T16:42:16.000Z";

        // Create a calendar in a different time zone (GMT-8)
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);

        // Create a FastDateFormat instance for the GMT time zone
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));

        // Check if the formatted output matches the expected dateTime
        // This should fail because the calendar time zone hasn't been correctly handled
        assertEquals("dateTime", dateTime, format.format(cal));
    }

    @Test
    public void testFormat_CalendarIsoMsZulu_PassesWithCallingGetTime() {
        final String dateTime = "2009-10-16T16:42:16.000Z";

        // Create a calendar in a different time zone (GMT-8)
        GregorianCalendar cal = new GregorianCalendar(TimeZone.getTimeZone("GMT-8"));
        cal.clear();
        cal.set(2009, 9, 16, 8, 42, 16);

        // Call getTime() to initialize calendar fields correctly
        cal.getTime();

        // Create a FastDateFormat instance for the GMT time zone
        FastDateFormat format = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));

        // Check if the formatted output matches the expected dateTime
        // This should pass because we called getTime()
        assertEquals("dateTime", dateTime, format.format(cal));
    }
}
