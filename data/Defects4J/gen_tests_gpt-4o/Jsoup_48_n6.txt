
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.junit.Test;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class JsoupHeaderTest {

    @Test
    public void testDuplicateHeader() {
        Map<String, List<String>> mockHeaders = new HashMap<>();
        mockHeaders.put("X-Powered-By", List.of("PHP/5.2.8", "ASP.NET"));

        MockResponse response = new MockResponse(mockHeaders);
        Document doc = Jsoup.parse(response);

        // Checking if the header method retrieves both values concatenated
        // Based on the hypothetical patch, it should return "PHP/5.2.8 ASP.NET"
        String poweredBy = doc.connection().response().header("X-Powered-By");
        assertEquals("PHP/5.2.8 ASP.NET", poweredBy);
    }
    
    /**
     * MockResponse to simulate an HTTP response with headers
     */
    public static class MockResponse implements Connection.Response {
        private final Map<String, String> headers = new HashMap<>();

        public MockResponse(Map<String, List<String>> resHeaders) {
            for (Map.Entry<String, List<String>> entry : resHeaders.entrySet()) {
                StringBuilder concatenatedValues = new StringBuilder();
                for (String value : entry.getValue()) {
                    concatenatedValues.append(value).append(" ");
                }
                headers.put(entry.getKey(), concatenatedValues.toString().trim());
            }
        }

        @Override
        public Map<String, String> headers() {
            return headers;
        }

        // Implement other required methods with default or mock-based logic if needed
        
        @Override
        public String header(String name) {
            return headers.get(name);
        }

        // ... implement other necessary methods
    }
}
