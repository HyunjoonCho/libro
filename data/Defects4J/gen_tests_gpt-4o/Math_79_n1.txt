
package org.fao.fisheries.chronicles.calculation.cluster;

import static org.junit.Assert.assertEquals;

import java.util.Arrays;
import java.util.List;
import java.util.Random;

import org.apache.commons.math.stat.clustering.Cluster;
import org.apache.commons.math.stat.clustering.EuclideanIntegerPoint;
import org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer;
import org.junit.Test;

public class ClusterAnalysisTest {

    @Test
    public void testPerformClusterAnalysis2() {
        KMeansPlusPlusClusterer<EuclideanIntegerPoint> transformer = new KMeansPlusPlusClusterer<EuclideanIntegerPoint>(
                new Random(1746432956321L));

        EuclideanIntegerPoint[] points = new EuclideanIntegerPoint[] { 
            new EuclideanIntegerPoint(new int[] { 1959, 325100 }),
            new EuclideanIntegerPoint(new int[] { 1960, 373200 })
        };

        // Replicating the NullPointerException scenario
        try {
            List<Cluster<EuclideanIntegerPoint>> clusters = transformer.cluster(Arrays.asList(points), 1, 0);
            assertEquals(1, clusters.size());
        } catch (NullPointerException e) {
            // If a NullPointerException is expected, print a more helpful message than the stack trace
            System.out.println("NullPointerException caught during cluster processing. Likely cause: " + e.getMessage());
            throw e; // Re-throwing to show the presence of the bug if needed in context
        }
    }
}
