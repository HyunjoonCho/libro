
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.StringReader;

import static org.junit.Assert.fail;

public class CSVFormatTest {

    @Test
    public void testRejectDuplicateHeaderEntries() {
        String[] headers = {"id", "name", "name"}; // Duplicate "name" header
        String csvData = "1,John Doe,Johnny\n2,Jane Doe,Janet";

        try {
            CSVFormat format = CSVFormat.DEFAULT.withHeader(headers);
            CSVParser parser = new CSVParser(new StringReader(csvData), format);

            for (CSVRecord record : parser) {
                // This part of the code should not execute if duplicates are correctly rejected
            }

            // If we reach this point, the test should fail as it means duplicates were accepted
            fail("CSVFormat should reject header arrays with duplicate entries.");
        } catch (IllegalArgumentException e) {
            // Expected behavior: an exception should be thrown for duplicate headers
            // You might want to assert the message of the exception if necessary
        } catch (Exception e) {
            // Handle other exceptions, which should cause test failure
            fail("An unexpected exception occurred: " + e.getMessage());
        }
    }
}
