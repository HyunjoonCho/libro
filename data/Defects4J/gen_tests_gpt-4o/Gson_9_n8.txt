
import org.junit.Test;
import static org.junit.Assert.*;

public class BooleanValueTest {

    @Test(expected = NullPointerException.class)
    public void testBooleanValueWithNull() {
        Boolean input = null;
        value(input);  // This should throw a NullPointerException due to incorrect method resolution
    }

    @Test
    public void testBooleanValueWithNonNull() {
        Boolean input = Boolean.TRUE;
        assertEquals("Expected value is true", true, value(input));
        
        input = Boolean.FALSE;
        assertEquals("Expected value is false", false, value(input));
    }

    // Simulating the method to be fixed
    public boolean value(boolean bool) {
        return bool;
    }

    // Here's where the overload or the corrected method would be designed
    public Boolean value(Boolean bool) {
        if (bool == null) {
            return null; // Or handle null in an appropriate manner
        }
        return bool;
    }
}
