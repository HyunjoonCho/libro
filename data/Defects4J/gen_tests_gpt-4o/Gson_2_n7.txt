
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonSyntaxException;
import org.junit.Test;

import static org.junit.Assert.fail;

public class TypeHierarchyAdapterTest {

    interface Vehicle {
        // Interface for vehicles
    }

    class Car implements Vehicle {
        // Car specific attributes can go here
    }

    class Truck implements Vehicle {
        // Truck specific attributes can go here
    }

    @Test
    public void testTypeHierarchyAdapter() {
        // Gson instance with a type hierarchy adapter for the Vehicle interface
        Gson gson = new GsonBuilder()
                .registerTypeHierarchyAdapter(Vehicle.class, (com.google.gson.JsonDeserializer<Vehicle>) (json, typeOfT, context) -> {
                    String type = json.getAsJsonObject().get("type").getAsString();
                    switch (type) {
                        case "car":
                            return context.deserialize(json, Car.class);
                        case "truck":
                            return context.deserialize(json, Truck.class);
                        default:
                            throw new JsonSyntaxException("Unknown vehicle type: " + type);
                    }
                })
                .create();

        // JSON string representing a Truck
        String truckJson = "{\"type\": \"truck\"}";

        try {
            // Attempt to deserialize as a Car
            Car car = gson.fromJson(truckJson, Car.class);
            // If no exception is thrown, the test should fail
            fail("Expected JsonSyntaxException not thrown");
        } catch (JsonSyntaxException e) {
            // Expected exception was thrown, test passes
            // Optionally, you can assert that the exception message is as expected
        }
    }
}
