
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import java.text.SimpleDateFormat;
import java.util.Date;

import static org.junit.Assert.assertEquals;

public class DateTimeSerializerTest {

    static class Event {
        @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy/MM/dd")
        public Date date;

        public Event(Date date) {
            this.date = date;
        }
    }

    @Test
    public void testCustomDateFormatSerialization() throws JsonProcessingException {
        // Set up the object mapper with a different global date format
        ObjectMapper mapper = new ObjectMapper();
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
        mapper.setDateFormat(dateFormat);
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);

        // The date to be tested
        Date date = new Date(0); // Epoch time: 1970-01-01
        Event event = new Event(date);

        // Serialize the event
        String json = mapper.writeValueAsString(event);

        // Expected format using the @JsonFormat pattern
        String expectedJson = "{\"date\":\"1970/01/01\"}";

        assertEquals("The serialized output should match the custom pattern", expectedJson, json);
    }
}
