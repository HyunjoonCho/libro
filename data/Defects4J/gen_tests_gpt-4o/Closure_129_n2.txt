
import org.junit.Test;
import static org.junit.Assert.*;

import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;

public class ClosureCompilerTest {

    @Test
    public void testFunctionCastProducesCorrectCode() {
        // Source code with a function cast.
        String source = "/** @type {function(!string):!string} */ " +
                        "((new window.ActiveXObject('ShockwaveFlash.ShockwaveFlash'))['GetVariable'])('$version');";

        // Expected compiled code
        String expectedOutput = "(new window.ActiveXObject(\"ShockwaveFlash.ShockwaveFlash\")).GetVariable(\"$version\");";

        // Initialize the compiler.
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the source code.
        SourceFile extern = SourceFile.fromCode("externs.js", "var window; window.ActiveXObject;");
        SourceFile input = SourceFile.fromCode("input.js", source);

        compiler.compile(extern, input, options);

        // Fetch the compiled code.
        Node root = compiler.getRoot().getLastChild();
        String compiledSource = compiler.toSource(root);

        // Assert that the compiler output is as expected.
        assertEquals(expectedOutput, compiledSource);
    }
}
