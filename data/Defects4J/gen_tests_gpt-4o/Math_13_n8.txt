
import org.apache.commons.math3.fitting.WeightedObservedPoint;
import org.apache.commons.math3.fitting.PolynomialCurveFitter;
import org.apache.commons.math3.fitting.WeightedObservedPoints;
import org.junit.Test;

public class LargeNumberOfWeightsTest {

    @Test(expected = OutOfMemoryError.class)
    public void testLargeNumberOfWeights() {
        int numPoints = 41200;  // Large number of data points
        double[] weights = new double[numPoints];
        WeightedObservedPoints obs = new WeightedObservedPoints();

        // Initialize the data points and weights
        for (int i = 0; i < numPoints; i++) {
            double x = i;
            double y = 2 * x + 1; // Example data; linear relation
            weights[i] = 1.0; // Set uniform weights for simplification
            obs.add(weights[i], x, y);
        }

        // Create curve fitter for polynomial of degree 1 (linear)
        PolynomialCurveFitter fitter = PolynomialCurveFitter.create(1);

        // Attempt to fit curve - expected to trigger the memory issue on large n
        fitter.fit(obs.toList());
    }
}
