
import org.joda.time.DateTime;
import org.joda.time.DurationFieldType;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.junit.Test;

public class PeriodTypeTest {

    @Test(expected = UnsupportedOperationException.class)
    public void testPeriodWithMonthsAndWeeksOnly() {
        DateTime startDate = new DateTime(2023, 1, 1, 0, 0);
        DateTime endDate = new DateTime(2023, 3, 1, 0, 0);

        // Attempt to create a period with months and weeks only
        Period p = new Period(
                startDate,
                endDate,
                PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})
        ).normalizedStandard(
                PeriodType.forFields(new DurationFieldType[]{DurationFieldType.months(), DurationFieldType.weeks()})
        );

        // This line should not be reached due to the exception
        int months = p.getMonths();
    }

    @Test
    public void testPeriodWithStandard() {
        DateTime startDate = new DateTime(2023, 1, 1, 0, 0);
        DateTime endDate = new DateTime(2023, 3, 1, 0, 0);

        // This works with the standard period type
        Period p = new Period(
                startDate,
                endDate,
                PeriodType.standard()
        ).normalizedStandard(PeriodType.standard());

        int months = p.getMonths();

        // This assertion is just for completeness to check the correct number of months
        assertEquals(2, months);
    }
}
