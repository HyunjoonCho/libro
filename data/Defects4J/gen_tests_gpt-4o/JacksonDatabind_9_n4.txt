
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.KeyDeserializer;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.DeserializationContext;
import org.junit.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.Assert.assertEquals;

public class MapDeserializationTest {

    @Test
    public void testMapWithClassAsKey() throws Exception {
        Map<Class<? extends Object>, String> map = new HashMap<>();
        map.put(ArrayList.class, "ArrayList");
        map.put(HashMap.class, "HashMap");

        ObjectMapper mapper = new ObjectMapper();

        // Register custom module with KeyDeserializer for Class type
        SimpleModule module = new SimpleModule();
        module.addKeyDeserializer(Class.class, new KeyDeserializer() {
            @Override
            public Class<?> deserializeKey(String key, DeserializationContext ctxt) throws IOException {
                try {
                    return Class.forName(key.replace("class ", ""));
                } catch (ClassNotFoundException e) {
                    throw new IOException(e);
                }
            }
        });
        mapper.registerModule(module);

        String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map);
        System.out.println(json);

        Map<Class<? extends Object>, String> result = mapper.readValue(json, new TypeReference<Map<Class<? extends Object>, String>>() {});
        assertEquals(map, result);
    }
}
