public void testReadTreeWithDefaultTypingEnabled() throws IOException {
    ObjectMapper mapper = new ObjectMapper()
            .enableDefaultTyping()
            .enable(MapperFeature.AUTO_DETECT_GETTERS)
            .enable(MapperFeature.REQUIRE_SETTERS_FOR_GETTERS)
            .disable(MapperFeature.USE_GETTERS_AS_SETTERS)
            .disable(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS)
            .enable(SerializationFeature.INDENT_OUTPUT)
            .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
    
    Foo foo = new Foo("bar");
    String serialized = mapper.writeValueAsString(foo); // {"bar" : "bar"}

    Exception exception = null;
    try {
        JsonNode jsonNode = mapper.readTree(serialized);
    } catch (Exception e) {
        exception = e;
    }
    
    assertNotNull("Expected exception when reading tree with default typing enabled", exception);
    assertTrue("Exception should be a JsonMappingException", exception instanceof JsonMappingException);
}

static class Foo {
    private String bar;

    public Foo() {
    }

    public Foo(String bar) {
        this.bar = bar;
    }

    public String getBar() {
        return bar;
    }

    public void setBar(String bar) {
        this.bar = bar;
    }
}