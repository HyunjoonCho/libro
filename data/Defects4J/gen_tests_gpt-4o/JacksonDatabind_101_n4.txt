
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class JsonUnwrappedTest {

    static class Bean {
        int x;
        int y;

        @JsonUnwrapped
        UnwrappedBean w;

        public Bean(@JsonProperty("x") int x, @JsonProperty("y") int y) {
            this.x = x;
            this.y = y;
        }

        // Add a setter for w to allow for deserialization with @JsonUnwrapped
        public void setW(UnwrappedBean w) {
            this.w = w;
        }
    }

    static class UnwrappedBean {
        int a;
        int b;

        public UnwrappedBean(@JsonProperty("a") int a, @JsonProperty("b") int b) {
            this.a = a;
            this.b = b;
        }
    }

    @Test
    public void testJsonUnwrappedDeserialization() throws Exception {
        String json = "{\"x\": 1, \"a\": 2, \"y\": 3, \"b\": 4}";

        ObjectMapper objectMapper = new ObjectMapper();
        Bean result = objectMapper.readValue(json, Bean.class);

        assertEquals(1, result.x, "x should be deserialized");
        assertEquals(3, result.y, "y should be deserialized");
        
        // Ensure UnwrappedBean is correctly deserialized
        assertEquals(2, result.w.a, "a in unwrapped should be deserialized");
        assertEquals(4, result.w.b, "b in unwrapped should be deserialized");
    }
}
