
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class RecursiveTypeSerializationTest {

    // Main test case reproducing the issue
    @Test
    public void testRecursiveTypeSerialization() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();

        // Construct the type of the base class first
        // This simulates the scenario where TypeFactory processes the base class type first
        typeFactory.constructType(Base.class);

        Sub subObject = new Sub();
        String serializedSub = mapper.writeValueAsString(subObject);

        // Check if the serialized JSON contains both 'base' and 'sub' properties
        assertEquals("{\"base\":1,\"sub\":2}", serializedSub);
    }

    // Base class implementing an interface with a recursive type
    static class Base implements IFace<Sub> {
        @JsonProperty
        int base = 1;
    }

    // Sub class expected to include properties from the Base class when serialized
    static class Sub extends Base {
        @JsonProperty
        int sub = 2;
    }

    // Interface with a generic type parameter
    interface IFace<T> {}
}
