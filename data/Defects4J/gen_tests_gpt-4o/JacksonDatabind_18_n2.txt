
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.MappingIterator;
import org.junit.Test;

import java.util.Map;

import static org.junit.Assert.*;

public class ObjectReaderErrorRecoveryTest {

    @Test
    public void testErrorRecoveryInObjectReaderReadValues() {
        ObjectMapper mapper = new ObjectMapper();

        // JSON with an intentional error (missing closing brace)
        String malformedJson = "{\"key1\": \"value1\", \"key2\": \"value2\"";

        try {
            MappingIterator<Map<String, String>> it = mapper.readerFor(new TypeReference<Map<String, String>>() {})
                                                            .readValues(malformedJson);

            // Attempt to read the first object
            if (it.hasNext()) {
                Map<String, String> map = it.next();

                // Asserting the content read so far is correct
                assertEquals("value1", map.get("key1"));
                assertEquals("value2", map.get("key2"));
            }

            fail("Expected JsonProcessingException due to malformed JSON");

        } catch (JsonProcessingException e) {
            System.out.println("Caught expected JsonProcessingException: " + e.getMessage());

            // You might want to assert specifics about the exception, e.g., the position of the error
        }
    }
}
