
import org.apache.commons.math3.optimization.linear.*;

import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverOptimality() {
        // Create the objective function: maximize 3x + 2y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3, 2 }, 0);

        // Create the constraints: 
        // x + y <= 4
        // 2x + y <= 5
        // x >= 0, y >= 0
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 4));
        constraints.add(new LinearConstraint(new double[] { 2, 1 }, Relationship.LEQ, 5));
        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));

        // Initialize the SimplexSolver
        SimplexSolver solver = new SimplexSolver();

        // Solve the problem
        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, false);

        // Validate the results
        double expectedX = 1.5; // Expected value for x
        double expectedY = 2.5; // Expected value for y
        double tolerance = 1e-6;

        assertEquals(expectedX, solution.getPoint()[0], tolerance);
        assertEquals(expectedY, solution.getPoint()[1], tolerance);
    }
}
