
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;
import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testCatchVariableScopeOptimization() {
        // JavaScript source code with a function that includes a try-catch block
        String jsSource = 
            "function getStack() {" +
            "  var getErrorObject = function() {" +
            "    try {" +
            "      throw Error(\"\");" +
            "    } catch(err) {" +
            "      return err;" +
            "    }" +
            "  };" +
            "  return getErrorObject().stack;" +
            "}" +
            "window['getStackTrace'] = getStack;";

        // Create a Compiler instance
        Compiler compiler = new Compiler();

        // Set up compiler options with simple optimizations
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Convert JS source to an extern and input
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", jsSource);

        // Run the compiler
        compiler.compile(extern, input, options);

        // Retrieve the optimized output
        String optimizedOutput = compiler.toSource();

        // Define the expected output that should not reference 'a' outside of the catch block
        String expectedOutput = 
            "function getStack(){" +
            "var a;" +  // Declare 'a' outside for its use in return
            "try{" +
            "throw Error(\"\");" +
            "}catch(err){" +
            "a=err;" +  // Assign 'a' inside catch block
            "}" +
            "return a.stack;" +  // Correctly references 'a' declared outside
            "}" +
            "window.getStackTrace=getStack;";

        // Verify that the optimized output is as expected, avoiding illegal scope use
        assertEquals(expectedOutput, optimizedOutput);
    }
}
