public void testLevenbergMarquardtInconsistency() {
    // Assuming we have a LevenbergMarquardtOptimizer optimizer object and a target function to optimize
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();

    MultivariateVectorFunction function = point -> new double[] {
        point[0] * point[0] + point[1] - 1,
        point[0] - point[1]
    };

    double[] initialGuess = new double[] {1.0, 1.0};
    double[] target = new double[] {0.0, 0.0};
    double[] weights = new double[] {1.0, 1.0};

    // Execute optimization
    VectorialPointValuePair result = optimizer.optimize(100, function, target, weights, initialGuess);
    
    // Extract results from the optimizer
    double[] optimizedPoint = result.getPoint();
    double[] residuals = result.getValue();

    // Calculate the expected residuals and cost manually based on the returned point
    double[] expectedResiduals = function.value(optimizedPoint);
    double expectedCost = 0.0;
    for (int i = 0; i < expectedResiduals.length; i++) {
        expectedCost += expectedResiduals[i] * expectedResiduals[i] * weights[i];
    }
    expectedCost *= 0.5;
    
    // Verify if the residuals correspond to the expected residuals
    assertArrayEquals(expectedResiduals, residuals, 1e-6);
    
    // Verify if the cost corresponds to the expected cost
    assertEquals(expectedCost, optimizer.getRMS(), 1e-6);
}