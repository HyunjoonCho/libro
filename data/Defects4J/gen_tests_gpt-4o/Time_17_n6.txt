
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Before;
import org.junit.Test;

import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class DateTimeOverlapTest {

    @Before
    public void setUp() {
        TimeZone.setDefault(TimeZone.getTimeZone("America/Sao_Paulo"));
        DateTimeZone.setDefault(DateTimeZone.forID("America/Sao_Paulo"));
    }

    @Test
    public void testWithLaterOffsetAtOverlap() {
        DateTime dtch;

        // Initial setup with maximum time of day
        dtch = new DateTime(2012, 2, 25, 5, 5, 5, 5).millisOfDay().withMaximumValue();
        System.out.println(dtch); // Expect: 2012-02-25T23:59:59.999-02:00
        assertEquals("-02:00", dtch.getZone().getID());

        // Adding 60,001 milliseconds
        dtch = dtch.plus(60001);
        System.out.println(dtch); // Expect: 2012-02-25T23:01:00.000-03:00
        assertEquals("-03:00", dtch.getZone().getID());

        // Applying withEarlierOffsetAtOverlap
        dtch = dtch.withEarlierOffsetAtOverlap();
        System.out.println(dtch); // Expect: 2012-02-25T23:01:00.000-02:00
        assertEquals("-02:00", dtch.getZone().getID());

        // Applying withLaterOffsetAtOverlap
        dtch = dtch.withLaterOffsetAtOverlap();
        System.out.println(dtch); // Should Expect: 2012-02-25T23:01:00.000-03:00, Problem if it prints -02:00
        assertEquals("-03:00", dtch.getZone().getID());
    }
}
