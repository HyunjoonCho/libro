
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerBugTest {

    @Test
    public void testWrongCodeGeneratedWithTernaryOperator() {
        String jsCode = "var a = (Math.random() > 0.5 ? '1' : 2) + 3 + 4;";
        Compiler compiler = new Compiler();

        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Run the compiler
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                         SourceFile.fromCode("test.js", jsCode), 
                                         options);

        // Check if the compilation was successful
        assertTrue("Compilation failed.", result.success);

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Assert that the compiled code is incorrect by matching the unexpected transformation
        // We're using `contains` as the bug report highlights this specific transformation
        assertTrue("The compiled code doesn't match the expected erroneous behavior.", 
                   compiledCode.contains("(0.5 < Math.random() ? 1 : 2) + 7"));
    }
}
