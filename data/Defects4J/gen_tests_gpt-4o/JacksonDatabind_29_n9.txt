
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;

import org.junit.Test;
import static org.junit.Assert.*;

// Define polymorphic base class
@JsonTypeInfo(use = Id.NAME, include = As.EXTERNAL_PROPERTY, property = "type")
abstract class Animal {
    public String name;
}

// Define a subclass
@JsonTypeName("dog")
class Dog extends Animal {
    public int boneCount;
}

public class PolymorphicDeserializationTest {

    @Test
    public void testDeserializePolymorphicWithoutTypeId() {
        String json = "{\"name\":\"Buddy\", \"boneCount\":5}"; 
        ObjectMapper mapper = new ObjectMapper();

        try {
            Animal animal = mapper.readValue(json, Animal.class);
            fail("Expected InvalidTypeIdException to be thrown");
        } catch (InvalidTypeIdException e) {
            // Exception expected because the type id "type" is missing
            assertTrue(e.getMessage().contains("missing type id property 'type'"));
        } catch (Exception e) {
            fail("Expected InvalidTypeIdException, but got " + e.getClass().getName());
        }
    }
}
