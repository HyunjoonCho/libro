
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import java.io.IOException;
import java.io.StringWriter;
import org.junit.Test;
import static org.junit.Assert.*;

public class JsonWriteTest {

    @Test
    public void testSplitSurrogateException() {
        JsonFactory jsonFactory = new JsonFactory();
        StringWriter writer = new StringWriter();
        JsonGenerator jsonGenerator = null;
        
        try {
            jsonGenerator = jsonFactory.createGenerator(writer);
            jsonGenerator.writeStartObject();
            jsonGenerator.writeRawValue("\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\ud83d\"");
            jsonGenerator.writeEndObject();
            jsonGenerator.close();
            fail("Expected JsonGenerationException was not thrown.");
        } catch (JsonGenerationException ex) {
            String expectedMessage = "Split surrogate on writeRaw() input (last character)";
            assertTrue("Expected JsonGenerationException with specific message", ex.getMessage().contains(expectedMessage));
        } catch (IOException e) {
            fail("Expected JsonGenerationException, but got IOException: " + e.getMessage());
        } finally {
            try {
                if (jsonGenerator != null) {
                    jsonGenerator.close();
                }
            } catch (IOException e) {
                // Ignore closing exceptions
            }
        }
    }
}
