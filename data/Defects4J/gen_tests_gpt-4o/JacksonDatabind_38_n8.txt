
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.SimpleType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.util.List;
import java.util.Map;

import static org.junit.Assert.assertNotNull;

public class SimpleTypeConstructTest {

    public static class ComplexType {
        public List<String> listField;
        public Map<String, Integer> mapField;

        public List<String> getListField() {
            return listField;
        }

        public void setListField(List<String> listField) {
            this.listField = listField;
        }

        public Map<String, Integer> getMapField() {
            return mapField;
        }

        public void setMapField(Map<String, Integer> mapField) {
            this.mapField = mapField;
        }
    }

    @Test
    public void testSimpleTypeConstruct() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Construct using deprecated method
        JavaType simpleType = SimpleType.construct(ComplexType.class);

        // Attempt to use ObjectMapper to introspect the type
        Map<String, Object> fieldMap = mapper.convertValue(new ComplexType(), Map.class);

        assertNotNull("Fields should be introspected", fieldMap.get("listField"));
        assertNotNull("Fields should be introspected", fieldMap.get("mapField"));
    }
}
