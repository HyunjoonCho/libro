
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexTableau;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexTableauTest {

    @Test
    public void testBasicVariableIdentification() {
        // Objective function: maximize x1 + x2
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 1, 1 }, 0);

        // Constraints:
        //  x1 + x2 <= 2
        //  x1      >= 0
        //       x2 >= 0
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 1, 1 }, Relationship.LEQ, 2));
        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));

        // Create and solve the tableau
        SimplexTableau tableau = new SimplexTableau(f, constraints, null, false, -1);
        PointValuePair solution = tableau.getSolution();

        // Verify that the solution is correct
        double[] expectedSolution = new double[] { 2, 0 }; // x1 = 2 and x2 = 0 is an optimal solution
        for (int i = 0; i < expectedSolution.length; i++) {
            assertEquals(expectedSolution[i], solution.getPoint()[i], 1e-9);
        }

        // Check if the basic variable is correctly identified
        // In this test, we will assume that the expected basic variable has its coefficient equal to 1
        for (int i = 0; i < tableau.getNumVariables(); i++) {
            double variableValue = tableau.getEntry(i, tableau.getWidth() - 1);
            if (variableValue == 1.0) {
                // Ensure at least one basic variable is properly identified
                return;
            }
        }
        // If none of the basic variables are correctly identified, fail the test
        assertEquals("No basic variable with value 1.0 identified", true, false);
    }
}
