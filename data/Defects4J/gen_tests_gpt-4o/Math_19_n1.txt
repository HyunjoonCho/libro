
import org.apache.commons.math3.optim.DoubleObjectiveFunction;
import org.apache.commons.math3.optim.MaxIter;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.junit.Test;

public class CMAESOptimizerTest {

    @Test(expected = IllegalArgumentException.class)
    public void testNaNParametersDueToWideBounds() {
        // Objective function that is trivial; we do not expect this to be called in practice
        DoubleObjectiveFunction objectiveFunction = new ObjectiveFunction(point -> {
            for (double p : point) {
                if (Double.isNaN(p)) {
                    throw new IllegalArgumentException("NaN value in parameters");
                }
            }
            return 0.0;
        });

        CMAESOptimizer optimizer = new CMAESOptimizer(
                3000, // Max number of iterations
                Double.MIN_VALUE, // Stop fitness
                true, // IsActiveCMA
                0, // Start value
                0, // Stop variance
                null, // Random generator
                false, // GenerateStatistics
                null // Convergence checker
        );

        double[] startPoint = new double[]{1, 1}; // Starting point
        double[] lowerBound = new double[]{-Double.MAX_VALUE, -Double.MAX_VALUE};
        double[] upperBound = new double[]{Double.MAX_VALUE, Double.MAX_VALUE};

        optimizer.optimize(
                MaxIter.unlimited(),
                MaxEval.unlimited(),
                objectiveFunction,
                GoalType.MINIMIZE,
                new CMAESOptimizer.PopulationSize(5),
                new CMAESOptimizer.Sigma(new double[]{0.3, 0.3}),
                new CMAESOptimizer.SimpleBounds(lowerBound, upperBound),
                new org.apache.commons.math3.optim.InitialGuess(startPoint)
        );
    }
}
