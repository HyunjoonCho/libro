
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.compiler.Compiler;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;

public class AdvancedOptimizationTest {

    @Test
    public void testAdvancedOptimizations() throws IOException {
        // Step 1: Create input file `input.js`
        String inputJsCode = "window['anchor'] = function (obj, modifiesProp) {" +
                " return (function (saved) {" +
                "     return modifiesProp(obj) + saved;" +
                " })(obj['prop']);" +
                "}";
        
        File inputJsFile = new File("input.js");
        try (FileWriter writer = new FileWriter(inputJsFile)) {
            writer.write(inputJsCode);
        }

        // Step 2: Set up Closure Compiler arguments
        String[] args = {
            "--compilation_level", "ADVANCED_OPTIMIZATIONS",
            "--warning_level", "VERBOSE",
            "--externs", "window.js",  // Ensure window.js exists and is valid
            "--js", "input.js",
            "--js_output_file", "output.js"
        };

        // Compile the JavaScript code using Closure Compiler
        Compiler compiler = new Compiler();
        CommandLineRunner runner = new CommandLineRunner(args);
        runner.setCompiler(compiler);
        int result = runner.run();

        // Step 3: Check the result
        assertEquals("Compilation did not succeed", 0, result);

        // Read the output file
        File outputJsFile = new File("output.js");
        assert outputJsFile.exists() : "Output file not created";

        String expectedOutput = "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD};";
        String actualOutput = new String(java.nio.file.Files.readAllBytes(outputJsFile.toPath())).trim();

        // Verify if the output matches the expected result
        assertEquals("Compiled output did not match expected", expectedOutput, actualOutput);

        // Clean up
        inputJsFile.delete();
        outputJsFile.delete();
    }
}
