
import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;
import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;
import org.junit.Test;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;

import static org.junit.Assert.assertTrue;

public class SevenZipTest {

    private File createTempDirectory() throws IOException {
        return Files.createTempDirectory("testDir").toFile();
    }

    private File createFile(File dir, String name, boolean withContent) throws IOException {
        File file = new File(dir, name);
        if (withContent) {
            try (FileOutputStream fos = new FileOutputStream(file)) {
                fos.write("content".getBytes());
            }
        } else {
            file.createNewFile();
        }
        return file;
    }

    private void createArchive(File dir, File outputFile) throws IOException {
        try (SevenZOutputFile sevenZOutput = new SevenZOutputFile(outputFile)) {
            for (File file : dir.listFiles()) {
                SevenZArchiveEntry entry = sevenZOutput.createArchiveEntry(file, file.getName());
                sevenZOutput.putArchiveEntry(entry);
                if (file.length() > 0) {
                    Files.copy(file.toPath(), sevenZOutput);
                }
                sevenZOutput.closeArchiveEntry();
            }
        }
    }

    @Test
    public void testScenario1_7EmptyFiles() throws IOException {
        File tempDir = createTempDirectory();
        for (int i = 0; i < 7; i++) {
            createFile(tempDir, "emptyFile" + i + ".txt", false);
        }

        File archive = new File(tempDir, "archive1.7z");
        createArchive(tempDir, archive);
        assertTrue(archive.exists());
        // You might want to further check the contents of the archive using a 7z tool manually.
    }

    @Test
    public void testScenario2_7MixedFiles() throws IOException {
        File tempDir = createTempDirectory();
        for (int i = 0; i < 4; i++) {
            createFile(tempDir, "emptyFile" + i + ".txt", false);
        }
        for (int i = 4; i < 7; i++) {
            createFile(tempDir, "filledFile" + i + ".txt", true);
        }

        File archive = new File(tempDir, "archive2.7z");
        createArchive(tempDir, archive);
        assertTrue(archive.exists());
        // Check contents manually
    }

    @Test
    public void testScenario3_8EmptyFiles() throws IOException {
        File tempDir = createTempDirectory();
        for (int i = 0; i < 8; i++) {
            createFile(tempDir, "emptyFile" + i + ".txt", false);
        }

        File archive = new File(tempDir, "archive3.7z");
        createArchive(tempDir, archive);
        assertTrue(archive.exists());
        // Check if 7z manager stops working manually
    }

    @Test
    public void testScenario4_2MixedFilesAndLastFilled() throws IOException {
        File tempDir = createTempDirectory();
        for (int i = 0; i < 5; i++) {
            createFile(tempDir, "emptyFile" + i + ".txt", false);
        }
        for (int i = 5; i < 8; i++) {
            createFile(tempDir, "filledFile" + i + ".txt", true);
        }

        File archive = new File(tempDir, "archive4_1.7z");
        createArchive(tempDir, archive);
        assertTrue(archive.exists());
        // Check contents manually
    }

    @Test
    public void testScenario4_2MixedFilesAndLastEmpty() throws IOException {
        File tempDir = createTempDirectory();
        for (int i = 0; i < 7; i++) {
            if (i == 6) {
                createFile(tempDir, "emptyFileLast.txt", false);
            } else {
                createFile(tempDir, "filledFile" + i + ".txt", true);
            }
        }

        File archive = new File(tempDir, "archive4_2.7z");
        createArchive(tempDir, archive);
        assertTrue(archive.exists());
        // Check if archive is corrupt manually
    }
}
