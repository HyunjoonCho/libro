
import org.junit.Test;
import static org.junit.Assert.*;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.util.Scanner;

public class CompilerOutputTest {
    
    @Test
    public void testClosureCompilerBehavior() throws IOException {
        String jsCode = "var foreignObject = gfx.parentNode.parentNode;\n" +
                        "var parentContainer = foreignObject.parentNode.parentNode;";
        
        // Expected output from the Web UI
        String expectedOutputFromWebUI = "if(b){if(a=b.parentNode.parentNode,b=a.parentNode.parentNode,null!==b";
        
        // Simulating command-line jar compilation output
        String commandLineOutput = simulateCommandLineCompilationWithClosureCompiler(jsCode);
        
        // Assert comparison (this special test assumes that the command line output is incorrect)
        boolean isIncorrect = !commandLineOutput.contains(expectedOutputFromWebUI) 
                              && commandLineOutput.contains("var b=a=a.parentNode.parentNode;");
        assertTrue("The command line output should demonstrate the issue", isIncorrect);
    }
    
    private String simulateCommandLineCompilationWithClosureCompiler(String jsCode) throws IOException {
        // This method should simulate the behavior of the command line execution of the jar file.
        // It can be done by actually using the ProcessBuilder in a real environment.
        // This is just a placeholder for demonstration as we cannot run jar files in this environment.
        return runShellCommand("java -jar path/to/compiler.jar --js test.js");
    }
    
    private String runShellCommand(String command) throws IOException {
        // Simplified implementation to simulate shell command execution
        ProcessBuilder processBuilder = new ProcessBuilder(command.split(" "));
        Process process = processBuilder.start();
        
        try (Scanner s = new Scanner(new BufferedInputStream(process.getInputStream())).useDelimiter("\\A")) {
            return s.hasNext() ? s.next() : "";
        }
    }
}
