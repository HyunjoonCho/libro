
import org.apache.commons.codec.binary.Base64InputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.Arrays;

import static org.junit.Assert.fail;

public class Base64InputStreamTest {

    @Test
    public void testArrayIndexOutOfBoundsExceptionOnMultipleReads() {
        byte[] inputData = new byte[10921]; // Create 10921 bytes input

        // Fill inputData with some data, in this case, we'll just fill with zeros
        Arrays.fill(inputData, (byte) 0);

        // Wrap inputData in a ByteArrayInputStream to simulate System.in
        ByteArrayInputStream inputStream = new ByteArrayInputStream(inputData);

        // Initialize Base64InputStream for encoding
        Base64InputStream b64stream = new Base64InputStream(inputStream, true, 0, null);

        // Read byte by byte from the Base64InputStream
        int n = 0;
        try {
            while (b64stream.read() != -1) {
                n++;
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Number of successful reads before exception: " + n);
            e.printStackTrace();
            // We expect an ArrayIndexOutOfBoundsException, so the test should fail if any other exception is thrown
            fail("ArrayIndexOutOfBoundsException was thrown: " + e.getMessage());
        } catch (IOException e) {
            e.printStackTrace();
            fail("IOException was thrown: " + e.getMessage());
        }
    }
}
