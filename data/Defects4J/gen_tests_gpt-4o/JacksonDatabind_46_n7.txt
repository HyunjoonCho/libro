
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.concurrent.atomic.AtomicReference;

public class GenericSignatureTest {

    @Test
    public void testGenericSignatureForAtomicReference() {
        ObjectMapper mapper = new ObjectMapper();

        // Get the JavaType for AtomicReference<String>
        JavaType atomicReferenceType = mapper.getTypeFactory().constructParametricType(AtomicReference.class, String.class);

        // Get the actual generated signature
        String generatedSignature = atomicReferenceType.getGenericSignature();

        // Expected signature with correct closing '>'
        String expectedSignature = "()Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;";

        // Assert to check if the generated signature is equal to the expected signature
        assertEquals(expectedSignature, generatedSignature);
    }
}
