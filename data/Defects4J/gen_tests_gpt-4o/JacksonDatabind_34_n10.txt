
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
import com.fasterxml.jackson.databind.jsonschema.JsonSchemaGenerator;
import com.fasterxml.jackson.module.jsonSchema.types.NumberSchema;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;

import static org.junit.jupiter.api.Assertions.assertTrue;

public class BigDecimalSchemaTest {

    @Test
    public void testBigDecimalSchemaType() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        JsonSchemaGenerator schemaGen = new JsonSchemaGenerator(mapper);

        JsonSchema schema = schemaGen.generateSchema(BigDecimal.class);

        // Check if the schema is correctly identified as a NumberSchema
        assertTrue(schema.isNumberSchema(), "Expected schema to be a number schema for BigDecimal");

        NumberSchema numberSchema = (NumberSchema) schema;

        // Additional checks to ensure it is not wrongly identified as an integer schema
        assertTrue(numberSchema.isFloatingPoint(), "Expected schema to represent a floating-point number");
    }
}
