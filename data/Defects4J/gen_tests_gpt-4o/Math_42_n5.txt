
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.linear.LinearConstraint;
import org.apache.commons.math.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math.optimization.linear.Relationship;
import org.apache.commons.math.optimization.linear.SimplexSolver;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class SimplexSolverTest {

    @Test
    public void testOptimizeWithRestrictNonnegative() throws Exception {
        // Define the objective function: 1 * x + 1 * y + 0
        LinearObjectiveFunction function = new LinearObjectiveFunction(new double[] {1, 1}, 0);

        // Define the constraints: 1 * x + 0 * y = 1
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] {1, 0}, Relationship.EQ, 1));

        // Create the solver and solve the problem with non-negativity restriction
        SimplexSolver solver = new SimplexSolver();
        double[] solution = solver.optimize(function, constraints, GoalType.MINIMIZE, true).getPoint();

        // Check the results
        assertEquals(1.0, solution[0], 1e-6); // x should be 1
        assertTrue("Expected y to be non-negative, but found: " + solution[1], solution[1] >= 0); // y should be >= 0
    }
}
