public void testGenericTypeDeserialization() {
    class Something<T extends Ruleform> {
        private T entity;

        public T getEntity() {
            return entity;
        }

        public void setEntity(T entity) {
            this.entity = entity;
        }
    }

    // Assuming Ruleform is a known class/interface, and RuleformImpl is an implementation.
    RuleformImpl ruleformInstance = new RuleformImpl();
    Something<RuleformImpl> something = new Something<>();
    something.setEntity(ruleformInstance);

    // Serialize
    try {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(byteArrayOutputStream);
        objectOutputStream.writeObject(something);
        objectOutputStream.flush();
        objectOutputStream.close();

        // Deserialize
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArrayOutputStream.toByteArray());
        ObjectInputStream objectInputStream = new ObjectInputStream(byteArrayInputStream);
        Something<RuleformImpl> deserializedSomething = (Something<RuleformImpl>) objectInputStream.readObject();

        assertEquals(ruleformInstance, deserializedSomething.getEntity());
    } catch (IOException | ClassNotFoundException e) {
        fail("Deserialization failed: " + e.getMessage());
    }
}