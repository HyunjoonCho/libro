public void testHandleUnknownTypeIdReturningVoidClassCausesNPE() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);

    mapper.addHandler(new DeserializationProblemHandler() {
        @Override
        public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId, TypeIdResolver idResolver, String failureMsg) {
            return ctxt.constructType(Void.class); // Returning Void.class
        }
    });

    try {
        mapper.readValue("{\"@type\":\"unknownType\"}", Object.class);
        fail("Expected JsonMappingException");
    } catch (JsonMappingException e) {
        assertTrue(e.getCause() instanceof NullPointerException);
    } catch (Exception e) {
        fail("Expected JsonMappingException, but got " + e.getClass().getSimpleName());
    }
}