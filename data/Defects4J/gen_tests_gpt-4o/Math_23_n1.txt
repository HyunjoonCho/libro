
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class BrentOptimizerTest {
    
    @Test
    public void testBrentOptimizerReportsBestPoint() {
        // Function with a maximum not at the boundaries
        UnivariateFunction function = x -> -1 * Math.pow(x - 2, 2) + 4;
        
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        
        // Optimize to find the maximum
        UnivariatePointValuePair result = optimizer.optimize(
                new MaxEval(100),
                new UnivariateObjectiveFunction(function),
                new SearchInterval(0, 4)
        );
        
        double bestPoint = result.getPoint(); 
        double bestValue = result.getValue();
        
        // Check that the reported point is the optimal point for the function
        assertTrue("Reported point is not the best encountered", Math.abs(bestPoint - 2) < 1e-5);
        assertTrue("Reported function value is incorrect", Math.abs(bestValue - 4) < 1e-5);
    }
}
