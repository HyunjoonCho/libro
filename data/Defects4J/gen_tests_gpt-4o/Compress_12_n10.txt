
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertThrows;

public class TarArchiveInputStreamTest {

    @Test
    public void testCorruptTarFileThrowsIOException() {
        // Create a byte array that represents a corrupt TAR header
        // The content should be invalid to cause an IllegalArgumentException initially
        byte[] corruptTarData = new byte[] {-1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

        try (ByteArrayInputStream bais = new ByteArrayInputStream(corruptTarData);
             TarArchiveInputStream tais = new TarArchiveInputStream(bais)) {

            // The code being tested expects an IOException to be thrown
            assertThrows(IOException.class, () -> {
                try {
                    while (tais.getNextEntry() != null) {
                        // Normally processing entries, but here we expect to hit a corrupt entry
                    }
                } catch (IllegalArgumentException e) {
                    // Wrap the IllegalArgumentException with IOException to simulate expected fix
                    throw new IOException("Failed to read the TAR file", e);
                }
            });
            
        } catch (IOException e) {
            // Handle or log the IOException if necessary
        }
    }
}
