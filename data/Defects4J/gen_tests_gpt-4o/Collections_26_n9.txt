public void testMultiKeySerializationSubClass() throws IOException, ClassNotFoundException {
    class MultiKey2<A, B> extends MultiKey {
        private static final long serialVersionUID = 1928896152249821416L;

        public MultiKey2(A key1, B key2) {
            super(key1, key2);
        }

        public A getFirst() {
            return (A) getKey(0);
        }

        public B getSecond() {
            return (B) getKey(1);
        }
    }

    MultiKey2<String, String> originalKey = new MultiKey2<>("key1", "key2");
    int originalHashCode = originalKey.hashCode();

    ByteArrayOutputStream byteOutStream = new ByteArrayOutputStream();
    ObjectOutputStream objectOutStream = new ObjectOutputStream(byteOutStream);
    objectOutStream.writeObject(originalKey);
    objectOutStream.close();

    byte[] serializedData = byteOutStream.toByteArray();
    ByteArrayInputStream byteInStream = new ByteArrayInputStream(serializedData);
    ObjectInputStream objectInStream = new ObjectInputStream(byteInStream);
    MultiKey2<String, String> deserializedKey = (MultiKey2<String, String>) objectInStream.readObject();
    objectInStream.close();

    int deserializedHashCode = deserializedKey.hashCode();

    assertEquals("Hash codes should match after deserialization if readResolve is protected", originalHashCode, deserializedHashCode);
}