
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.Test;
import static org.junit.Assert.assertNotNull;

// Custom type resolver
class CustomTypeIdResolver extends TypeIdResolverBase {
    @Override
    public String idFromValue(Object value) {
        return value.getClass().getSimpleName();
    }

    @Override
    public String idFromValueAndType(Object value, Class<?> suggestedType) {
        return idFromValue(value);
    }

    @Override
    public java.lang.Class<?> typeFromId(com.fasterxml.jackson.databind.DatabindContext context, String id) {
        if ("MyObject".equals(id)) {
            return MyObject.class;
        }
        return null;
    }

    @Override
    public com.fasterxml.jackson.annotation.JsonTypeInfo.Id getMechanism() {
        return JsonTypeInfo.Id.CUSTOM;
    }
}

// Test class
public class ObjectIdAndTypeIdTest {
    
    @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, include = JsonTypeInfo.As.WRAPPER_OBJECT)
    @JsonTypeIdResolver(CustomTypeIdResolver.class)
    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = "@id")
    static class MyObject {
        public String name;
    }

    @Test
    public void testObjectIdWithTypeId() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();

        String json = "{\"MyObject\": {\"@id\": 1, \"name\": \"test\"}}";

        MyObject result = mapper.readValue(json, MyObject.class);
        // Validate if the object was successfully deserialized
        assertNotNull(result);
        assertNotNull(result.name);
    }
}
