
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.datatype.guava.GuavaModule;
import com.google.common.collect.ImmutableMap;
import org.junit.Test;
import java.io.IOException;
import static org.junit.Assert.assertEquals;

public class EnumKeyDeserializerTest {

    // Example Enum
    enum MyEnum {
        VALUE_ONE,
        VALUE_TWO
    }

    @Test
    public void testEnumKeyDeserializer() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new GuavaModule());

        // Register a custom module to handle lowercase enum keys
        SimpleModule module = new SimpleModule();
        module.setDeserializerModifier(new BeanDeserializerModifier() {
            @Override
            public KeyDeserializer modifyKeyDeserializer(
                    DeserializationConfig config,
                    JavaType type,
                    KeyDeserializer deserializer) {
                if (!type.isEnumType()) {
                    return super.modifyKeyDeserializer(config, type, deserializer);
                }
                return new KeyDeserializer() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public Object deserializeKey(String key, DeserializationContext ctxt)
                            throws IOException, JsonProcessingException {
                        Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                        return Enum.valueOf(rawClass, key.toUpperCase());
                    }
                };
            }
        });

        mapper.registerModule(module);

        // JSON input with lowercase enum key
        String json = "{\"value_one\": \"someValue\"}";

        // Attempt to deserialize into an ImmutableMap with an enum key
        ImmutableMap<MyEnum, String> result = mapper.readValue(json,
                new TypeReference<ImmutableMap<MyEnum, String>>() {});

        // Assert that the key has been deserialized correctly
        assertEquals("someValue", result.get(MyEnum.VALUE_ONE)); // This asserts that the key was deserialized correctly
    }
}
