
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.junit.Test;

import java.nio.charset.UnsupportedCharsetException;

import static org.junit.Assert.assertTrue;

public class DataUtilCharsetTest {

    // Mock method to test the issue as described.
    private Document parseByteDataWithCharset(byte[] byteData, String charsetName, String baseUri) throws UnsupportedCharsetException {
        try {
            org.jsoup.helper.Validate.notEmpty(charsetName, "Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML");
            Charset.forName(charsetName).decode(ByteBuffer.wrap(byteData)).toString();
        } catch (UnsupportedCharsetException e) {
            return Jsoup.parse(byteData, null, baseUri);
        }
        return null; // Default return if successful
    }

    @Test
    public void testInvalidCharsetFallback() {
        // Setup a byte array representation of a simple HTML document
        byte[] byteData = "<html><head><title>Test</title></head><body>Hello, world!</body></html>".getBytes();

        // Deliberately use an invalid charset name "UFT8" instead of "UTF8"
        String invalidCharsetName = "UFT8";

        // Expected behavior: the method should not throw an exception and fallback to auto-detection
        try {
            Document doc = parseByteDataWithCharset(byteData, invalidCharsetName, "http://example.com");
            assertTrue(doc.title().equals("Test"));
        } catch (UnsupportedCharsetException e) {
            // If we reach here, it means the fallback mechanism failed
            assertTrue("The exception should have been caught and handled, but it was not", false);
        }
    }
}

