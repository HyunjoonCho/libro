public void testPolymorphicTypeDeserializationWithDefaultImpl() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new Jdk8Module());
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
    mapper.setDefaultTyping(DefaultTyping.JE_CORRECT, JsonTypeInfo.As.PROPERTY);
    
    String json = "{\"type\":\"unknown\",\"baseProperty\":\"baseValue\",\"uniqueProperty\":\"uniqueValue\"}";

    BaseType result = mapper.readValue(json, BaseType.class);

    assertNotNull(result);
    assertEquals("baseValue", result.getBaseProperty());
    assertTrue(result instanceof DefaultSubType);
    assertEquals("uniqueValue", ((DefaultSubType) result).getUniqueProperty());
}

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", defaultImpl = DefaultSubType.class)
@JsonSubTypes({
    @Type(value = SubTypeA.class, name = "subA"),
    @Type(value = SubTypeB.class, name = "subB")
})
public static class BaseType {
    private String baseProperty;
    public String getBaseProperty() { return baseProperty; }
    public void setBaseProperty(String baseProperty) { this.baseProperty = baseProperty; }
}

public static class DefaultSubType extends BaseType {
    private String uniqueProperty;
    public String getUniqueProperty() { return uniqueProperty; }
    public void setUniqueProperty(String uniqueProperty) { this.uniqueProperty = uniqueProperty; }
}

public static class SubTypeA extends BaseType {
}

public static class SubTypeB extends BaseType {
}