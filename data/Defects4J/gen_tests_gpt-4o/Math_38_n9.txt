
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.direct.BOBYQAOptimizer;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.analysis.MultivariateFunction;
import static org.junit.Assert.*;
import org.junit.Test;

public class BOBYQAOptimizerTest {

    @Test(expected = TooManyEvaluationsException.class)
    public void testInterpolationPointsGreaterThanTwoDimPlusOne() {
        // Define a simple quadratic function for testing
        MultivariateFunction quadraticFunction = new MultivariateFunction() {
            public double value(double[] x) {
                double sum = 0;
                for (double xi : x) {
                    sum += xi * xi;
                }
                return sum;
            }
        };

        int dim = 2; // Dimensionality of the problem
        int numberOfInterpolationPoints = 2 * dim + 2; // This exceeds the `2 * dim + 1` limit

        // Initialize the BOBYQAOptimizer with too many interpolation points
        BOBYQAOptimizer optimizer = new BOBYQAOptimizer(numberOfInterpolationPoints);

        double[] startPoint = {1.0, 1.0}; // Start point for optimization
        double[] lowerBound = {-5.0, -5.0}; // Lower bounds
        double[] upperBound = {5.0, 5.0}; // Upper bounds

        // Perform the optimization (this is expected to throw an error)
        RealPointValuePair result = optimizer.optimize(
            1000, // Max evaluations
            quadraticFunction,
            GoalType.MINIMIZE,
            startPoint,
            lowerBound,
            upperBound
        );
    }
}
