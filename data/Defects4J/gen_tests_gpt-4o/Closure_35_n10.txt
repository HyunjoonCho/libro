script
/**
 * @returns {{prop1: (Object|undefined), prop2: (string|undefined), prop3: (string|undefined)}}
 */
function func(a, b) {
    var results;
    if (a) {
        results = {};
        results.prop1 = {a: 3};
    }
    if (b) {
        results = results || {};
        results.prop2 = 'prop2';
    } else {
        results = results || {};
        results.prop3 = 'prop3';
    }
    return results;
}

// Test case to reproduce the type mismatch issue
function testFunc() {
    // Case 1: Both a and b are false
    var result1 = func(false, false);
    console.log(result1);
    if (result1.prop1 !== undefined || result1.prop2 !== undefined || result1.prop3 !== 'prop3') {
        throw new Error('Test case 1 failed: Unexpected result structure for func(false, false)');
    }

    // Case 2: a is true, b is false
    var result2 = func(true, false);
    console.log(result2);
    if (!result2.prop1 || result2.prop2 !== undefined || result2.prop3 !== 'prop3') {
        throw new Error('Test case 2 failed: Unexpected result structure for func(true, false)');
    }

    // Case 3: a is true, b is true
    var result3 = func(true, true);
    console.log(result3);
    if (!result3.prop1 || result3.prop2 !== 'prop2' || result3.prop3 !== undefined) {
        throw new Error('Test case 3 failed: Unexpected result structure for func(true, true)');
    }

    // Case 4: a is false, b is true
    var result4 = func(false, true);
    console.log(result4);
    if (result4.prop1 !== undefined || result4.prop2 !== 'prop2' || result4.prop3 !== undefined) {
        throw new Error('Test case 4 failed: Unexpected result structure for func(false, true)');
    }
}

// Run the test case
try {
    testFunc();
    console.log('All test cases passed');
} catch (e) {
    console.error('A test case failed:', e.message);
}
