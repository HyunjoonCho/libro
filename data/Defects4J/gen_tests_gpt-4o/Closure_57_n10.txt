
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import junit.framework.TestCase;

public class CompilerCrashTest extends TestCase {

    public void testProvideWithNonString() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);

        String code = "goog.provide(mine.Spike);";

        try {
            Node rootNode = compiler.parseTestCode(code);
            assertNotNull("Parsed tree is null", rootNode);
            compiler.compile(externs(), rootNode, options);
            fail("Expected a diagnostic error due to incorrect goog.provide usage with a non-string argument.");
        } catch (RuntimeException e) {
            String expectedMessage = "INTERNAL COMPILER ERROR";
            // Check that we caught the compiler exception and it matches the expected issue
            assertTrue(e.getMessage().contains(expectedMessage));
        }
    }

    private List<SourceFile> externs() {
        return AbstractCommandLineRunner.getDefaultExterns();
    }
}
