
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsonschema.JsonSchema;
import com.fasterxml.jackson.databind.jsonschema.JsonSchemaGenerator;
import com.fasterxml.jackson.module.jsonSchema.JsonSchemaModule;
import com.fasterxml.jackson.module.jsonSchema.factories.SchemaFactoryWrapper;
import org.junit.Before;
import org.junit.Test;

import java.math.BigDecimal;

import static org.junit.Assert.assertTrue;

public class BigDecimalSchemaTest {

    private ObjectMapper objectMapper;

    @Before
    public void setUp() {
        objectMapper = new ObjectMapper();
        objectMapper.registerModule(new JsonSchemaModule());
    }

    @Test
    public void testBigDecimalSchemaType() throws Exception {
        SchemaFactoryWrapper visitor = new SchemaFactoryWrapper();
        objectMapper.acceptJsonFormatVisitor(BigDecimal.class, visitor);
        JsonSchema jsonSchema = visitor.finalSchema();

        // Check if the schema correctly identifies BigDecimal, not BigInteger or another type
        assertTrue(jsonSchema.isObjectSchema());

        String schemaType = jsonSchema.asObjectSchema().getType();
        assertTrue("Expected type to be 'number' for BigDecimal".equals(schemaType));
    }
}
