
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import org.junit.Test;

import java.math.BigDecimal;

import static org.junit.Assert.assertThrows;

public class NaNAsBigDecimalTest {

    @Test
    public void testNaNAsBigDecimalThrowsNPE() throws Exception {
        // Create a JSON factory with the feature ALLOW_NON_NUMERIC_NUMBERS enabled
        JsonFactory factory = new JsonFactory();
        factory.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);

        // Test input JSON string with NaN
        String json = "{\"value\": NaN}";

        try (JsonParser parser = factory.createParser(json)) {
            // Advance to the start of the object and the "value" field
            parser.nextToken(); // Start object
            parser.nextToken(); // Field name "value"
            parser.nextToken(); // NaN value

            // Check that the current token is a floating-point number
            if (parser.currentToken() == JsonToken.VALUE_NUMBER_FLOAT) {
                // Attempt to read the value as a BigDecimal
                // This is expected to throw a NullPointerException
                assertThrows(NullPointerException.class, () -> {
                    BigDecimal value = parser.getDecimalValue();
                });
            }
        }
    }
}
