
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.NameMatchFilter;
import java.io.IOException;
import org.junit.Test;
import static org.junit.Assert.*;

public class FilteringParserDelegateTest {

    @Test
    public void testMissingEndObject() {
        String jsonInput = "{"
                + "\"a\":123,"
                + "\"array\":[1,2],"
                + "\"ob\": {"
                + "\"value0\":2,"
                + "\"value\":3,"
                + "\"value2\":4"
                + "},"
                + "\"b\":true"
                + "}";

        JsonFactory factory = new JsonFactory();
        try {
            JsonParser p0 = factory.createParser(jsonInput);
            JsonParser p = new FilteringParserDelegate(p0,
                    new NameMatchFilter("value"),
                    true, // includePath
                    false // multipleMatches
            );

            StringBuilder output = new StringBuilder();
            while (p.nextToken() != null) {
                if (p.currentToken() == JsonToken.FIELD_NAME || p.currentToken() == JsonToken.VALUE_NUMBER_INT) {
                    output.append("\"").append(p.getText()).append("\"");
                } else if (p.currentToken() == JsonToken.START_OBJECT || p.currentToken() == JsonToken.END_OBJECT) {
                    output.append(p.currentToken() == JsonToken.START_OBJECT ? "{" : "}");
                }
            }
            p.close();

            String expectedOutput = "{\"ob\":{\"value\":3}}";
            assertEquals(expectedOutput, output.toString());
        } catch (IOException e) {
            fail("Parsing failed with IOException: " + e.getMessage());
        }
    }
}
