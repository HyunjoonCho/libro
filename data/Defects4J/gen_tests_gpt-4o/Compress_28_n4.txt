
import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import static org.junit.Assert.fail;

public class TarArchiveInputStreamTest {

    @Test
    public void testCorruptedBzip2() {
        // A sample in-memory truncated tar.bz2 data, as the test is self-contained
        byte[] truncatedArchiveData = new byte[]{/* corrupted/truncated binary data */};

        try (TarArchiveInputStream input = new TarArchiveInputStream(
                new BZip2CompressorInputStream(
                        new ByteArrayInputStream(truncatedArchiveData), true))) {

            ArchiveEntry nextMatchedEntry = input.getNextEntry();

            while (nextMatchedEntry != null) {
                System.out.println("Extracting " + nextMatchedEntry.getName());
                String outputPath = "/tmp/" + nextMatchedEntry.getName();
                
                try (OutputStream out = new FileOutputStream(outputPath)) {
                    byte[] buffer = new byte[1024];
                    int bytesRead;
                    while ((bytesRead = input.read(buffer)) != -1) {
                        out.write(buffer, 0, bytesRead);
                    }
                }

                nextMatchedEntry = input.getNextEntry(); // Attempt to get the next entry
            }

            // If we finish without exception, it means the bug is still present
            fail("IOException expected due to unexpected EOF in truncated archive");

        } catch (IOException e) {
            // Expected behavior, since the archive is truncated and should trigger an EOF exception
            System.out.println("Caught expected IOException: " + e.getMessage());
        }
    }
}
