
import static org.junit.Assert.*;
import org.junit.Test;

public class OrphanNodeTest {

    // Hypothetical class to demonstrate the concept
    static class Node {
        private String value;
        private Node parent;

        // Constructor
        public Node(String value) {
            this.value = value;
        }

        // Method to detach this node from its parent
        public void detach() {
            this.parent = null;
        }

        // Example toString method that might throw an NPE
        @Override
        public String toString() {
            if (parent == null) {
                throw new NullPointerException("Node is detached");
            }
            return "Value: " + value;
        }
    }

    @Test(expected = NullPointerException.class)
    public void testOrphanNodeToStringThrowsNPE() {
        // Setup: Create a node and detach it
        Node node = new Node("test");
        node.detach();

        // Exercise: Call toString() on the detached node
        // Verify: Expect a NullPointerException to be thrown
        node.toString();
    }

    @Test
    public void testOrphanNodeToStringSafe() {
        // Setup: Create a node without detaching
        Node node = new Node("test");
        
        // Try-catch to verify if any exception occurs 
        try {
            node.toString();
        } catch (Exception e) {
            fail("Exception should not be thrown for non-detached nodes.");
        }
    }
}
