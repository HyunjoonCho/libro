
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;
import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolver() {
        // Objective function: max 0.8*x0 + 0.2*x1 + 0.7*x2 + 0.3*x3 + 0.6*x4 + 0.4*x5
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{0.8, 0.2, 0.7, 0.3, 0.6, 0.4}, 0);

        // Constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0, 1, 0, 1, 0}, Relationship.EQ, 23.0)); // x0 + x2 + x4 = 23.0
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 1, 0, 1}, Relationship.EQ, 23.0)); // x1 + x3 + x5 = 23.0
        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0, 0, 0}, Relationship.GEQ, 10.0)); // x0 >= 10.0
        constraints.add(new LinearConstraint(new double[]{0, 0, 1, 0, 0, 0}, Relationship.GEQ, 8.0));  // x2 >= 8.0
        constraints.add(new LinearConstraint(new double[]{0, 0, 0, 0, 1, 0}, Relationship.GEQ, 5.0));  // x4 >= 5.0

        // Solve the optimization problem
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(f, constraints, GoalType.MAXIMIZE, true);

        // Extract the result
        double[] point = solution.getPoint();
        double result = solution.getValue();

        // Assert that the result is as expected (it should not be 22.2 as found through SimplexSolver)
        assertEquals("The optimal value should be 25.8.", 25.8, result, 1e-5);

        // Assert that the constraints are satisfied in the returned solution
        assertEquals("x0 should be 10.0", 10.0, point[0], 1e-5);
        assertEquals("x1 should be 0.0", 0.0, point[1], 1e-5);
        assertEquals("x2 should be 8.0", 8.0, point[2], 1e-5);
        assertEquals("x3 should be 0.0", 0.0, point[3], 1e-5);
        assertEquals("x4 should be 5.0", 5.0, point[4], 1e-5);
        assertEquals("x5 should be 23.0", 23.0, point[5], 1e-5);
    }
}
