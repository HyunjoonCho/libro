
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertFalse;

public class ClosureCompilerTest {

    @Test
    public void testUnreachableCodeWarning() {
        // JavaScript source code we're testing
        String jsCode = 
            "function instanceOf(value, type) {\n" +
            "  try {\n" +
            "    // first try built-in test -- if it succeeds, we're golden.\n" +
            "    if (value instanceof type) {\n" +
            "      return true;\n" +
            "    }\n" +
            "  } catch (exception) {\n" +
            "    if (exception instanceof TypeError) {\n" +
            "      throw exception; // indicates that \"type\" is not a type\n" +
            "    }\n" +
            "    // Otherwise, assume the exception was caused by \n" +
            "    // the Firefox 1.0.3 bug. Work around it.\n" +
            "    return (type === Object);\n" +
            "  }\n" +
            "}";

        // Set up the compiler and options
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CommandLineRunner.setDefaultOptionsForCompilationLevel(
            CommandLineRunner.CompilationLevel.SIMPLE_OPTIMIZATIONS, options);

        // Add the source code to be compiled
        List<SourceFile> input = new ArrayList<>();
        input.add(SourceFile.fromCode("test.js", jsCode));

        // Execute the compilation
        Result result = compiler.compile(new ArrayList<>(), input, options);

        // Check for warnings or errors
        result.warnings.forEach(warning -> {
            System.out.println("Warning: " + warning.getDescription());
            System.out.println("Line: " + warning.lineNumber + ", Char: " + warning.getCharno());
        });

        // The test passes if there are no warnings or if the unreachable code warning doesn't appear
        boolean hasUnreachableCodeWarning = result.warnings.stream()
            .anyMatch(w -> "unreachable code".equalsIgnoreCase(w.getType().key));
            
        assertFalse("Compiler should not report unreachable code", hasUnreachableCodeWarning);
    }
}
