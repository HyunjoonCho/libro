
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Whitelist;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.util.Arrays;
import java.util.Collection;

@RunWith(Parameterized.class)
public class JsoupInvalidTagsTest {

    private final String htmlFragment;

    public JsoupInvalidTagsTest(String htmlFragment) {
        this.htmlFragment = htmlFragment;
    }

    @Parameterized.Parameters
    public static Collection<String[]> dirtyHtml() {
        return Arrays.asList(new String[][] {
            {"<html></html>"},
            {"<head></head>"},
            {"<body></body>"}
        });
    }

    @Test
    public void testIsValidWithEmptyWhitelist() {
        Assert.assertFalse(
            "Jsoup.isValid should return false for tags not in the whitelist",
            Jsoup.isValid(htmlFragment, new Whitelist())
        );
    }

    @Test
    public void testIsValidWithNoneWhitelist() {
        Assert.assertFalse(
            "Jsoup.isValid should return false for tags when Whitelist.none() is used",
            Jsoup.isValid(htmlFragment, Whitelist.none())
        );
    }

    @Test
    public void testIsValidWithTypicalWhitelist() {
        Whitelist whitelist = new Whitelist();
        whitelist.addTags("p");

        Assert.assertFalse(
            "Jsoup.isValid should return false for tags not included in the whitelist",
            Jsoup.isValid(htmlFragment, whitelist)
        );
    }

    @Test
    public void testCleanerIsValid() {
        Document dirty = Parser.parseBodyFragment(htmlFragment, "");
        Cleaner cleaner = new Cleaner(Whitelist.none());

        Assert.assertFalse(
            "Cleaner.isValid should return false for tags when Whitelist.none() is used",
            cleaner.isValid(dirty)
        );
    }
}
