
import org.apache.commons.text.ExtendedMessageFormat;

import java.text.Format;
import java.util.HashMap;
import java.util.Map;

public class ExtendedMessageFormatTest {

    public static void main(String[] args) {
        // Create a custom format registry
        Map<String, FormatFactory> formatRegistry = new HashMap<>();
        formatRegistry.put(DummyFormatFactory.DUMMY_FORMAT, new DummyFormatFactory());

        try {
            // Use a pattern containing single quotes
            ExtendedMessageFormat mf = new ExtendedMessageFormat("it''s a {dummy} 'test'!", formatRegistry);

            // Apply the format
            String formattedPattern = mf.format(new Object[]{"great"});
            System.out.println(formattedPattern);
        } catch (OutOfMemoryError e) {
            System.out.println("Caught OutOfMemoryError: " + e.getMessage());
        }
    }

    // Simulated DummyFormatFactory class
    public static class DummyFormatFactory implements FormatFactory {
        public static final String DUMMY_FORMAT = "dummy";

        @Override
        public Format getFormat(String name, String arguments, Map<String, ? extends Object> registry) {
            return new DummyFormat();
        }
    }

    // Simulated DummyFormat class
    public static class DummyFormat extends Format {
        @Override
        public StringBuffer format(Object obj, StringBuffer toAppendTo, java.text.FieldPosition pos) {
            return toAppendTo.append(String.valueOf(obj));
        }

        @Override
        public Object parseObject(String source, java.text.ParsePosition pos) {
            return source;
        }
    }
}
