script
// The following function simulates the behavior to be tested.
// We will check whether the output matches the expected due to the misplacement of `arguments`.

function originalFunction() {
    return function() {
        var args = arguments; // Capture arguments in the current scope
        setTimeout(function() {
            if (args === arguments) {
                console.error("Test failed: arguments were incorrectly optimized.");
            } else {
                console.log("Test passed: arguments were preserved correctly.");
            }
        }, 0);
    };
}

// To simulate the mis-transformation by the optimizer, let's assume the function
// gets rewritten as follows (for demonstration purposes):

function transformedFunction() {
    return function() {
        // Incorrectly using `arguments` directly inside setTimeout function
        setTimeout(function() {
            if (arguments === undefined) {
                console.error("Test failed: transformed function broke the scope.");
            } else {
                console.log("Test passed: transformed function handled scope correctly.");
            }
        }, 0);
    };
}

// Calling both versions to demonstrate the issue:
originalFunction()(1, 2, 3); // Expected to pass the test
transformedFunction()(1, 2, 3); // Demonstrative expected to fail the test due to scope issue

// Note: In practice, you would configure a build system to perform the actual transformation and testing.
