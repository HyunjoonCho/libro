public void testCompilerRemovesFunctionProperties() {
    // Setup the environment
    Map<String, Function<Void, Void>> map = new HashMap<>();

    // Define function f1 with a property 'alwaysCall'
    Function<Void, Void> f1 = (Void v) -> { System.out.println("f1"); return null; };
    f1.getClass().getMethods()[0].setAccessible(true); // Simulate setting a property
    try {
        f1.getClass().getMethod("alwaysCall").invoke(true); // Hypothetical way to set 'alwaysCall'
    } catch (Exception ignored) {}

    // Define function f2 without any property
    Function<Void, Void> f2 = (Void v) -> { System.out.println("f2"); return null; };
    
    map.put("f1", f1);
    map.put("f2", f2);

    // Test calling function by key 'f1' and check the existence of the 'alwaysCall' property
    String key = "f1";
    Function<Void, Void> function = map.get(key);
    if (function != null) {
        try {
            boolean alwaysCallProperty = function.getClass()
                .getMethod("alwaysCall").invoke(function).equals(true);
            assertTrue(alwaysCallProperty); // Expecting 'alwaysCall' property to be preserved
        } catch (Exception e) {
            fail("Property 'alwaysCall' was not found.");
        }
    }
}