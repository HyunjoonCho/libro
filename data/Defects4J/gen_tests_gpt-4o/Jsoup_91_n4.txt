
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.junit.Assert;
import org.junit.Test;

import java.util.concurrent.*;

public class JsoupParseTest {

    @Test
    public void testJsoupParseDoesNotHangOnBogusInput() {
        // Example of bogus binary input data that causes Jsoup to hang
        byte[] inputData = new byte[]{0x00, 0x01, (byte) 0xFF, (byte) 0xFE};

        // Use a Future and an Executor to impose a time limit
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<Document> future = executor.submit(() -> {
            // We attempt to parse this input; assuming UTF-8 encoding
            return Jsoup.parse(new String(inputData, "UTF-8"));
        });

        try {
            // Get the result allowing a maximum of 5 seconds
            Document doc = future.get(5, TimeUnit.SECONDS);
            // Assert that the document is empty if parse is successful
            Assert.assertTrue("Document should be empty or invalid.", doc.body().text().isEmpty());
        } catch (TimeoutException e) {
            Assert.fail("Jsoup parsing hung on invalid input, expected to handle and not hang.");
        } catch (Exception e) {
            // Other exceptions are okay as long as it's not hanging
            e.printStackTrace();
        } finally {
            // Shutdown the executor
            executor.shutdownNow();
        }
    }
}
