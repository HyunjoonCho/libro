
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class JsonIgnorePropertiesTest {

    @JsonIgnoreProperties(value = { "password" }, ignoreUnknown = true, allowSetters = true)
    public static class JsonTest {
        private String username;
        private String password;

        public JsonTest() {
            super();
        }

        public JsonTest(String username, String password) {
            super();
            this.username = username;
            this.password = password;
        }

        public String getUsername() {
            return username;
        }

        public void setUsername(String username) {
            this.username = username;
        }

        public String getPassword() {
            return password;
        }

        public void setPassword(String password) {
            this.password = password;
        }
    }

    @Test
    public void testJsonIgnorePropertiesWithAllowSetters() throws JsonProcessingException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        JsonTest json = new JsonTest("user", "password");

        // Serialize object to JSON
        String serializedJson = mapper.writeValueAsString(json);
        assertEquals("{\"username\":\"user\"}", serializedJson);

        // Deserialize JSON string back to object
        String jsonString = "{ \"username\":\"username\",\"password\":\"newpassword\" }";
        json = mapper.readValue(jsonString, JsonTest.class);

        // Validate that "password" can be set through deserialization
        assertEquals("username", json.getUsername());
        assertEquals("newpassword", json.getPassword()); // This should not be null if allowSetters is working
    }
}
