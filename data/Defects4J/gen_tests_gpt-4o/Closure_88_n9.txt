script
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

public class ClosureCompilerTest {

    // Simulate the behavior of the function before compilation
    private boolean closureCompilerTestBefore(Node someNode) {
        Integer nodeId;
        if ((nodeId = someNode.id) != null && (nodeId = Integer.parseInt(nodeId.toString().substring(1))) != null) {
            return nodeId > 0;
        }
        return false;
    }

    // Simulate the behavior of the function after incorrect compilation
    private boolean closureCompilerTestAfter(Node someNode) {
        Integer nodeId;
        return someNode.id != null && (nodeId = Integer.parseInt(nodeId.toString().substring(1))) != null && nodeId > 0;
    }

    @org.junit.Test
    public void testIncorrectAssignmentRemoval() {
        Node node = new Node();
        node.id = "a123";  // 'a' prefix to mimic the parseInt and substring behavior
        
        assertTrue("Before Compilation: Expected true as node ID '123' > 0", closureCompilerTestBefore(node));
        assertFalse("After Incorrect Compilation: Expected false as nodeId is not assigned correctly", closureCompilerTestAfter(node));
    }

    // Simple Node class for testing
    private static class Node {
        String id;
    }
}
