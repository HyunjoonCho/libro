public void testIncorrectAssignmentRemoval() {
    String jsCode = "function closureCompilerTest(someNode) {"
                     + " var nodeId;"
                     + " return ((nodeId=someNode.id) && (nodeId=parseInt(nodeId.substr(1))) && nodeId>0);"
                     + "}";
    
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    
    Node extern = IR.externsRoot();
    Node source = IR.sourceRoot("test");
    Node script = IR.script(compiler.parseSyntheticCode(jsCode));
    source.addChildToBack(script);
    
    // Compile the code
    compiler.compile(extern, source, options);
    
    // Get the compiled code
    String compiledCode = compiler.toSource();
    
    // Validate that the compiled code does not incorrectly replace "nodeId=someNode.id"
    assertFalse(compiledCode.contains("&&(a=parseInt(a.substr(1)"));
    assertTrue(compiledCode.contains("&&(a=parseInt(a.substr(1)))"));
}