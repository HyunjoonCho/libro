
import org.apache.commons.math3.geometry.euclidean.threed.Rotation;
import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.junit.Test;
import static org.junit.Assert.*;

public class RotationTest {

    @Test
    public void testNumericalProblemsInRotationCreation() {
        // Vectors from the bug report
        Vector3D u1 = new Vector3D(-4921140.837095533, -2.1512094250440013E7, -890093.279426377);
        Vector3D u2 = new Vector3D(-2.7238580938724895E9, -2.169664921341876E9, 6.749688708885301E10);
        Vector3D v1 = new Vector3D(1, 0, 0);
        Vector3D v2 = new Vector3D(0, 0, 1);

        // Create a rotation from the given vector pairs
        Rotation rotation = new Rotation(u1, u2, v1, v2);

        // Extract the quaternion components
        double q0 = rotation.getQ0();
        double q1 = rotation.getQ1();
        double q2 = rotation.getQ2();
        double q3 = rotation.getQ3();

        // Verify that the quaternion does not contain NaN values
        assertFalse("Rotation quaternion contains NaN", 
            Double.isNaN(q0) || Double.isNaN(q1) || Double.isNaN(q2) || Double.isNaN(q3));
    }
}
