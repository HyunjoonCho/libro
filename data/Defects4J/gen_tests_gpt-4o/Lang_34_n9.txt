
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.junit.Test;

import static org.junit.Assert.assertNull;

public class ToStringStyleMemoryLeakTest {

    @Test
    public void testThreadLocalMemoryLeak() {
        // Create a string representation, which causes the ThreadLocal to be set
        ToStringBuilder.reflectionToString(new Object(), ToStringStyle.DEFAULT_STYLE);

        // Attempt to check for the existence of the ThreadLocal in ToStringStyle
        // Note: This is conceptual since actual access to the private ThreadLocal isn't directly possible via API
        ToStringStyle toStringStyle = ToStringStyle.DEFAULT_STYLE;
        
        try {
            // Use reflection to access the private field, if you have access rights
            java.lang.reflect.Field threadLocalField = ToStringStyle.class.getDeclaredField("threadLocal");
            threadLocalField.setAccessible(true);
            ThreadLocal<?> threadLocal = (ThreadLocal<?>) threadLocalField.get(toStringStyle);

            // Simulate cleanup that should happen in apps for the current thread
            threadLocal.remove();

            // Validate that the ThreadLocal is effectively cleaned up
            assertNull("ThreadLocal was not removed properly", threadLocal.get());

        } catch (ReflectiveOperationException e) {
            // Handle exceptions related to reflection
            e.printStackTrace();
        }
    }
}
