
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class MutableDateTimeTest {

    @Test
    public void testAddDaysZeroChangesMutableDateTime() {
        // Initialize MutableDateTime at the specified date and time in "Europe/Berlin" time zone
        final MutableDateTime mdt = new MutableDateTime(2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID("Europe/Berlin"));
        
        // Add -1 hour, this should correctly transition to the previous hour
        mdt.addHours(-1);
        assertEquals("2011-10-30T02:00:00.000+01:00", mdt.toString());

        // Add 0 hours, the time should remain unchanged
        mdt.addHours(0);
        assertEquals("2011-10-30T02:00:00.000+01:00", mdt.toString());

        // Add 0 days, expecting to remain the same, but observe the incorrect time zone change
        mdt.addDays(0);
        assertEquals("2011-10-30T02:00:00.000+01:00", mdt.toString()); // Fails here, as it changes to +02:00

        // If needed, print the shifted time due to DST change
        System.out.println("Time after addDays(0): " + mdt.toString());
    }
}
