
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import static org.junit.Assert.*;

public class ArchiveOutputStreamTest {

    @Test
    public void testPublicFinishMethod() throws IOException {
        // Create a ByteArrayOutputStream to hold the Zip data in memory
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        
        // Create a ZipArchiveOutputStream around the ByteArrayStream
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(byteArrayOutputStream);
        
        ZipArchiveEntry entry = new ZipArchiveEntry("test.txt");
        zipOutputStream.putArchiveEntry(entry);
        zipOutputStream.write("Hello World".getBytes());
        zipOutputStream.closeArchiveEntry();
        
        // Directly call the finish method to see if output gets corrupted or an exception is thrown
        try {
            zipOutputStream.finish();
            fail("The finish method should not be exposed publicly, and calling it directly may corrupt the output.");
        } catch (IOException e) {
            // If an exception is thrown, confirm it's due to misuse
            assertTrue(e.getMessage().contains("This archive has already been finished"));
        }
        
        // Complete the close process
        zipOutputStream.close();
        
        // Validate the output
        assertTrue(byteArrayOutputStream.size() > 0);
    }
}
