public void testVarArgsTypeCheck() {
    // Set up mock to capture compiler warnings, if applicable.
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
    options.setPrettyPrint(true);
    options.setOutputCharset("default.js");

    String code = "/**\n" +
                  " * @param {...string} var_args\n" +
                  " */\n" +
                  "function foo(var_args) {\n" +
                  "  return arguments.length;\n" +
                  "}\n" +
                  "foo('hello'); // no warning - ok\n" +
                  "foo(123); // warning - ok\n" +
                  "foo('hello', 123); // no warning! error.\n";

    compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", code), options);
    
    JSError[] warnings = compiler.getWarnings();
    JSError[] errors = compiler.getErrors();
    
    boolean typeWarningFound = false;
    for (JSError warning : warnings) {
        if (warning.getDescription().contains("type mismatch")) {
            typeWarningFound = true;
            break;
        }
    }
    
    assertEquals(1, errors.length); // Expecting a type-mismatch warning for the third foo() call.
    assertTrue(typeWarningFound);
}