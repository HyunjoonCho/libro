
import static org.junit.Assert.*;

import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.renderer.category.AbstractCategoryItemRenderer;
import org.jfree.data.category.CategoryDataset;
import org.junit.Test;
import org.mockito.Mockito;

public class AbstractCategoryItemRendererTest {

    @Test
    public void testGetLegendItems_NullDataset() {
        // Mock the CategoryPlot
        CategoryPlot mockPlot = Mockito.mock(CategoryPlot.class);
        
        // Create an instance of AbstractCategoryItemRenderer
        AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};
        
        // Set the mockPlot to the renderer
        renderer.setPlot(mockPlot);
        
        // Mock the plot to return a specific index
        int mockedIndex = 0;
        Mockito.when(mockPlot.getIndexOf(renderer)).thenReturn(mockedIndex);
        
        // Mock the plot to return a null dataset for the given index
        Mockito.when(mockPlot.getDataset(mockedIndex)).thenReturn(null);
        
        // Call getLegendItems and verify it doesn't throw an NPE
        LegendItemCollection legendItems = null;
        try {
            legendItems = renderer.getLegendItems();
            // If the dataset is null, legendItems should be empty
            assertNotNull("Legend items collection should not be null", legendItems);
            assertTrue("Legend items collection should be empty", legendItems.isEmpty());
        } catch (NullPointerException e) {
            fail("getLegendItems method threw a NullPointerException");
        }
    }
}
