
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class HasClassFunctionTest {

    @Test
    public void testHasClassFunction() {
        // Setup a mock jQuery-like object
        MockElement element = new MockElement("test-class another-class");

        // Test with original function logic
        boolean resultOriginal = hasClassOriginal(element, "test-class");
        // Test with munged function logic
        boolean resultMunged = hasClassMunged(element, "test-class");

        // Assert the expected behavior and the mismatched behavior
        assertEquals(resultOriginal, true, "Original function failed to find class.");
        assertEquals(resultMunged, false, "Munged function incorrectly found class.");
    }

    // Original implementation of hasClass as provided
    private boolean hasClassOriginal(MockElement element, String selector) {
        return (element != null && element.className != null && element.className.length() > 0) ?
                !((" " + element.className + " ").indexOf(" " + selector + " ") == -1) : false;
    }

    // The munged version of the hasClass function
    private boolean hasClassMunged(MockElement element, String selector) {
        return (element != null && element.className != null && element.className.length() > 0)
                ? element.className.indexOf(selector) != -1 : false;
    }

    // Mock class representing a jQuery element with a className property
    class MockElement {
        String className;

        MockElement(String className) {
            this.className = className;
        }
    }
}
