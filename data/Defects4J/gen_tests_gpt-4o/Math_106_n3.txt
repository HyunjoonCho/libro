
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.ProperFractionFormat;
import org.junit.Test;

import java.text.ParsePosition;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class ProperFractionFormatTest {

    @Test
    public void testParseNegativeInputReturnsNull() {
        ProperFractionFormat properFormat = new ProperFractionFormat();

        // Test with an invalid fraction string
        String source = "-1 -2 / 3";
        ParsePosition pos = new ParsePosition(0);

        Fraction actual = properFormat.parse(source, pos);

        // Expect null since the input is invalid
        assertNull("The parse method should return null for invalid input.", actual);
    }

    @Test
    public void testParseHandlesInvalidFractionCorrectly() {
        ProperFractionFormat properFormat = new ProperFractionFormat();

        // Test 1: Parse with invalid negative numerator and denominator
        String source1 = "1 -1 / 2";
        ParsePosition pos1 = new ParsePosition(0);
        Fraction result1 = properFormat.parse(source1, pos1);
        assertNull("Expected null for invalid input '1 -1 / 2'.", result1);

        // Test 2: Parse proper fraction format but still invalid
        String source2 = "1 2 / -3";
        ParsePosition pos2 = new ParsePosition(0);
        Fraction result2 = properFormat.parse(source2, pos2);
        assertNull("Expected null for invalid input '1 2 / -3'.", result2);

        // Test 3: Another invalid negative format
        String source3 = "-1 -2 / 3";
        ParsePosition pos3 = new ParsePosition(0);
        Fraction result3 = properFormat.parse(source3, pos3);
        assertNull("Expected null for invalid input '-1 -2 / 3'.", result3);
    }
}
