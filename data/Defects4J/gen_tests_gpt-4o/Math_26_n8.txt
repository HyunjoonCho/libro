
import org.apache.commons.math3.fraction.Fraction;
import org.apache.commons.math3.fraction.FractionConversionException;
import org.junit.Test;
import static org.junit.Assert.*;

public class FractionTest {

    @Test
    public void testLargeNegativeValueReturnsPositiveFraction() {
        try {
            Fraction fraction = new Fraction(-33655.1677817278, 371880);
            // Verify that the fraction has the correct (negative) sign
            assertTrue("Fraction should be negative", fraction.getNumerator() < 0);
            // Verify that the fraction is relatively close to the original number
            double expectedValue = -33655.1677817278;
            assertTrue("Fraction absolute value should be close to original value",
                       Math.abs(fraction.doubleValue() - expectedValue) < 1e-9);
        } catch (FractionConversionException e) {
            fail("FractionConversionException should not be thrown.");
        }
    }

    @Test
    public void testFractionReduction() {
        try {
            Fraction fraction = new Fraction(-43979.60679604749, 366081);
            // Verify that the fraction is reduced
            Fraction expectedReducedFraction = new Fraction(-24654898, 3831);
            assertEquals("Fraction should be reduced", expectedReducedFraction, fraction.reduce());
        } catch (FractionConversionException e) {
            fail("FractionConversionException should not be thrown.");
        }
    }
}
