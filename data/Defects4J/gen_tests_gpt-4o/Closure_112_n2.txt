
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import org.junit.Test;

public class TemplateInferenceTest {

    /**
     * Represents a class with a template type CLASS.
     *
     * @constructor
     * @template CLASS
     */
    static class Class<CLASS> {

        /**
         * Method with a template type T.
         *
         * @param a a function that takes CLASS and returns CLASS
         * @template T
         * @return a string
         */
        public String foo(Function<CLASS, CLASS> a) {
            return "string";
        }
    }

    /**
     * Functional interface to mimic the function type.
     */
    @FunctionalInterface
    interface Function<I, O> {
        O apply(I input);
    }

    @Test
    public void testTemplateInference() {
        Class<Object> clazz = new Class<>();

        // Function that takes a number, but should not affect CLASS template inference
        Function<Number, String> a = (num) -> "";

        try {
            String result = clazz.foo(x -> x);
            assertEquals("string", result); // The expected behavior is to return "string"
        } catch (Exception e) {
            fail("Template inference failed with exception: " + e.getMessage());
        }
    }
}
