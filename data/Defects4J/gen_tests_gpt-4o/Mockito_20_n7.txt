public void testConvenientSpyingOnAbstractClassesExample1() {
    abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        public List<String> getEmails() {
            return Collections.unmodifiableList(emails);
        }
    }

    FakeUserAccount userAccount = Mockito.spy(FakeUserAccount.class);
    userAccount.addEmail("email@example.com");

    List<String> emails = userAccount.getEmails();
    assertEquals(1, emails.size());
    assertEquals("email@example.com", emails.get(0));
}

public void testConvenientSpyingOnAbstractClassesExample2() {
    abstract class MockAccountService implements AccountService {
        @Override
        public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }

        abstract UserAccount getAccount(String id);
    }

    UserAccount mockAccount = Mockito.mock(UserAccount.class);
    MockAccountService service = Mockito.mock(MockAccountService.class);

    when(service.getAccount("id")).thenReturn(mockAccount);

    AsyncCallback<UserAccount> callback = new AsyncCallback<UserAccount>() {
        @Override
        public void onSuccess(UserAccount result) {
            assertEquals(mockAccount, result);
        }

        @Override
        public void onFailure(Throwable caught) {
        }
    };

    service.getAccount("id", callback);
}

public void testConvenientSpyingOnAbstractClassesExample3() {
    abstract class MockAccountRpcService implements AccountRpcService {
        @Override
        public FutureAccount getAccount(RpcContext context, String id) {
            if (context == null) {
                throw new IllegalArgumentException("Context can't be null");
            }
            return getAccount(id);
        }

        abstract FutureAccount getAccount(String id);
    }

    FutureAccount mockFutureAccount = Mockito.mock(FutureAccount.class);
    MockAccountRpcService service = Mockito.mock(MockAccountRpcService.class);

    when(service.getAccount("id")).thenReturn(mockFutureAccount);

    RpcContext mockContext = Mockito.mock(RpcContext.class);

    FutureAccount result = service.getAccount(mockContext, "id");
    assertEquals(mockFutureAccount, result);
}