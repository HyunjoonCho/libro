public void testPrototypeWithQuotesWarning() {
    String code = "/** @constructor */\n" +
                  "function MyClass() {}\n" +
                  "MyClass.prototype[\"MyMethod\"] = function(a) {\n" +
                  " this.a = a;\n" +
                  "}\n" +
                  "window[\"MyClass\"] = MyClass;";

    String warningFreeCode = "/** @interface */\n" +
                             "function MyParent() {}\n" +
                             "/** @param {*} a */\n" +
                             "MyParent.prototype.MyMethod = function(a) {}\n" +
                             "/**\n" +
                             "* @constructor\n" +
                             "* @implements {MyParent}\n" +
                             "*/\n" +
                             "function MyClass() {}\n" +
                             "MyClass.prototype[\"MyMethod\"] = function(a) {\n" +
                             " this.a2 = a;\n" +
                             "}\n" +
                             "window[\"MyClass\"] = MyClass;";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.VERBOSE);
    options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC, CheckLevel.WARNING);
    options.setWarningLevel(DiagnosticGroups.MISSING_OVERRIDE, CheckLevel.WARNING);

    Result result = compiler.compile(CompilerTestCase.getDefaultExternsInput(), 
                                     CompilerTestCase.Lists.newArrayList(SourceFile.fromCode("testcode", code)),
                                     options);
    assertFalse(result.warnings.isEmpty());

    Result warningFreeResult = compiler.compile(CompilerTestCase.getDefaultExternsInput(), 
                                                CompilerTestCase.Lists.newArrayList(SourceFile.fromCode("testcode", warningFreeCode)),
                                                options);
    assertFalse(warningFreeResult.warnings.isEmpty());
}