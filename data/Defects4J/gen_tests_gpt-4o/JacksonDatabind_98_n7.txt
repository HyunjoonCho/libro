public void testExternalPropertyPolymorphicDeserializationWithEnums() throws IOException {
    String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";
    
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new KotlinModule());
    mapper.registerSubtypes(Contact.class);
    
    try {
        Invite invite = mapper.readValue(json, Invite.class);
        fail("Expected JsonMappingException due to enum deserialization issue");
    } catch (JsonMappingException e) {
        assertTrue(e.getMessage().contains("Can not construct instance of"));
    }
}

// Assuming the following classes and enum are defined accordingly:

enum KindEnum {
    CONTACT, OTHER
}

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "kind")
@JsonSubTypes({
    @JsonSubTypes.Type(value = Contact.class, name = "CONTACT")
})
interface Invite {}

class Contact implements Invite {
    public String name;
}