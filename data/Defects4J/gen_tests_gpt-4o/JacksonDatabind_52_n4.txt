
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

// Define base class with type information
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type", visible = true)
@JsonSubTypes({
    @JsonSubTypes.Type(value = SubTypeA.class, name = "A")
})
abstract class BaseType {
    public String type;
    public String name;
}

class SubTypeA extends BaseType {
    public int value;
}

public class ExternalPropertyDeserializationTest {

    @Test
    public void testExternalPropertyDeserialization() throws JsonProcessingException {
        String json = "{\"type\":\"A\", \"name\":\"Example\", \"value\":42}";

        ObjectMapper objectMapper = new ObjectMapper();
        BaseType deserializedObject = objectMapper.readValue(json, BaseType.class);

        // Check that the object is not null
        assertNotNull(deserializedObject);

        // Verify deserialized properties
        assertEquals("A", deserializedObject.type);
        assertEquals("Example", deserializedObject.name);
        
        // Verify object type and its properties
        if (deserializedObject instanceof SubTypeA) {
            SubTypeA subType = (SubTypeA) deserializedObject;
            assertEquals(42, subType.value);
        } else {
            throw new AssertionError("Deserialized object is not of type SubTypeA as expected.");
        }
    }
}
