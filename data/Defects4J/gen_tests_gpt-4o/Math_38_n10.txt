
import org.apache.commons.math.optimization.GoalType;
import org.apache.commons.math.optimization.RealPointValuePair;
import org.apache.commons.math.optimization.direct.BOBYQAOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class BOBYQAOptimizerReproducingTest {

    @Test(expected = Exception.class)
    public void testBOBYQAOptimizerInterpolationPoints() {
        int dim = 2; // Example dimension, can adjust as necessary for the test
        double[] startPoint = {1.0, 1.0}; // Example start point
        int maxEvaluations = 10000;

        // Example objective function: simple quadratic function
        org.apache.commons.math.optimization.MultivariateRealFunction func = point -> {
            double sum = 0;
            for (double v : point) {
                sum += v * v;
            }
            return sum;
        };

        // Create an optimizer with 2 * dim + 2 interpolation points which should raise an exception as per the bug report
        BOBYQAOptimizer optim = new BOBYQAOptimizer(2 * dim + 2);

        try {
            RealPointValuePair result = optim.optimize(maxEvaluations, func, GoalType.MINIMIZE, startPoint);
        } catch (Exception e) {
            // Expected behavior: an exception due to the number of interpolation points
            // Print exception for debugging purposes if needed
            e.printStackTrace();
            throw e;
        }
        // Use assert to ensure that the result is obtained under correct conditions
        assertTrue("Optimization should have failed due to too many interpolation points.", false);
    }
}
