
import static org.junit.Assert.assertEquals;

import org.mozilla.javascript.CompilerEnvirons;
import org.mozilla.javascript.ErrorReporter;
import org.mozilla.javascript.Parser;
import org.mozilla.javascript.ast.AstRoot;

public class WhitespaceCompressionTest {

    @org.junit.Test
    public void testForEachKeywordPreservation() {
        String inputScript = 
            "contactcenter.screenpop.updatePopStatus = function(stamp, status) {\n" +
            "    for each ( var curTiming in this.timeLog.timings ) {\n" +
            "        if ( curTiming.callId == stamp ) {\n" +
            "            curTiming.flag = status;\n" +
            "            break;\n" +
            "        }\n" +
            "    }\n" +
            "};";

        // Assume 'compressScript' is a method that performs the whitespace compression
        // This method is supposed to replicate the compression behavior
        String compressedScript = compressScript(inputScript);

        // We expect the 'for each' keyword to remain unchanged after compression
        String expectedScript = 
            "contactcenter.screenpop.updatePopStatus=function(stamp,status){for each(var curTiming in this.timeLog.timings)if(curTiming.callId==stamp){curTiming.flag=status;break}};";

        assertEquals(expectedScript, compressedScript);
    }

    private String compressScript(String script) {
        CompilerEnvirons env = new CompilerEnvirons();
        ErrorReporter errorReporter = env.getErrorReporter();
        Parser parser = new Parser(env, errorReporter);
        AstRoot astRoot = parser.parse(script, null, 0);

        // Perform compression (as done by your compression algorithm)
        // This simplified placeholder means the actual compression logic should go here and preserve 'for each'

        return astRoot.toSource().replaceAll("\\s+", " ").replace(" ;", ";").replace(") {", "){").replace("{ ", "{");
    }
}
