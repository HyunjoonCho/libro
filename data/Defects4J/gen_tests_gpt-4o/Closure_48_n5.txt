script
/**
 * @constructor
 */
var myclass = function() {
}

/** @param {boolean} success */
myclass.prototype.fn = function(success) { 
    if (typeof success !== 'boolean') {
        throw new TypeError('Expected a boolean value');
    }
}

myclass.prototype.test = function() {
    // The following call should generate a type checking error
    // because it doesn't provide an argument
    try {
        this.fn(); // Expect an error here: Argument of type 'undefined' is not assignable to parameter of type 'boolean'
        console.error('Test failed: Expected a type checking error on first call to this.fn()');
    } catch (e) {
        if (e instanceof TypeError) {
            console.log('Test passed: Caught expected type checking error on first call to this.fn()');
        } else {
            console.error('Test failed: Unexpected error type on first call to this.fn()');
        }
    }

    // Replace this.fn() with a stub that does nothing
    this.fn = function() { };

    // The following call should not generate any type checking error
    try {
        this.fn(); // No error is expected after overwriting this.fn()
        console.log('Test passed: No error on second call to this.fn() after overwrite');
    } catch (e) {
        console.error('Test failed: Unexpected error on second call to this.fn()');
    }
}

// Instantiate myclass and run the test method
var instance = new myclass();
instance.test();
