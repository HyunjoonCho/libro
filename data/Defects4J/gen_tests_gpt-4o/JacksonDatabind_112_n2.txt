
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import java.util.Collection;
import java.util.Collections;

import static org.junit.Assert.assertEquals;

public class CustomStringCollectionDeserializationTest {

    // Custom collection implementation
    public static class ImmutableStringCollection {
        private final Collection<String> strings;

        public ImmutableStringCollection(Collection<String> strings) {
            this.strings = Collections.unmodifiableCollection(strings);
        }

        public Collection<String> getStrings() {
            return strings;
        }
    }

    // Wrapper class to use our custom collection as a property
    static class Wrapper {
        @JsonDeserialize(as = ImmutableStringCollection.class)
        private final ImmutableStringCollection collection;

        public Wrapper(ImmutableStringCollection collection) {
            this.collection = collection;
        }

        public ImmutableStringCollection getCollection() {
            return collection;
        }
    }

    @Test
    public void testCustomStringCollectionDeserialization() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        String json = "{\"collection\": [\"str1\", \"str2\"]}";

        Wrapper result = objectMapper.readValue(json, Wrapper.class);

        assertEquals(2, result.getCollection().getStrings().size());
        assertEquals("str1", result.getCollection().getStrings().toArray()[0]);
        assertEquals("str2", result.getCollection().getStrings().toArray()[1]);
    }
}
