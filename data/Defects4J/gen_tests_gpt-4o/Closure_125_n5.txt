public void testIllegalStateExceptionInCompiler() {
    String jsCode = 
        "var test = {};\n" +
        "/**\n" +
        " * @interface\n" +
        " */\n" +
        "test.T = function() {};\n" +
        "\n" +
        "/**\n" +
        " * @constructor\n" +
        " * @implements {test.T}\n" +
        " */\n" +
        "test.A = function() {};\n" +
        "\n" +
        "/**\n" +
        " * @constructor\n" +
        " * @implements {test.T}\n" +
        " */\n" +
        "test.B = function() {};\n" +
        "\n" +
        "/**\n" +
        " * @constructor\n" +
        " */\n" +
        "test.X = function() {\n" +
        " this.type = test.A;\n" +
        " this.t = this.f();\n" +
        "};\n" +
        "\n" +
        "/**\n" +
        " * @return {test.T}\n" +
        " */\n" +
        "test.X.prototype.f = function() {\n" +
        " if (this.type === test.A) {\n" +
        " return new test.A();\n" +
        " } else if (this.type === test.B) {\n" +
        " return new test.B();\n" +
        " }\n" +
        "};";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.ALL_DIAGNOSTICS, CheckLevel.WARNING);
    options.setCompilationLevel(CompilationLevel.SIMPLE_OPTIMIZATIONS);

    try {
        compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("crash.js", jsCode), options);
        // Fail the test if no exception is thrown
        fail("Expected IllegalStateException to be thrown");
    } catch (RuntimeException e) {
        // Check if the RuntimeException is caused by an IllegalStateException
        assertTrue(e.getCause() instanceof IllegalStateException);
    }
}