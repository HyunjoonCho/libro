
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import java.util.Arrays;

public class ClosureCompilerBugTest {

    @Test(expected = IllegalStateException.class)
    public void testIllegalStateExceptionInClosureCompiler() {
        // JavaScript code from the bug report
        String jsCode = 
            "var test = {};\n" +
            "/**\n" +
            " * @interface\n" +
            " */\n" +
            "test.T = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @implements {test.T}\n" +
            " */\n" +
            "test.A = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " * @implements {test.T}\n" +
            " */\n" +
            "test.B = function() {};\n" +
            "/**\n" +
            " * @constructor\n" +
            " */\n" +
            "test.X = function() {\n" +
            "    this.type = test.A;\n" +
            "    this.t = this.f();\n" +
            "};\n" +
            "/**\n" +
            " * @return {test.T}\n" +
            " */\n" +
            "test.X.prototype.f = function() {\n" +
            "    if (this.type === test.A) {\n" +
            "        return new test.A();\n" +
            "    } else if (this.type === test.B) {\n" +
            "        return new test.B();\n" +
            "    }\n" +
            "};";

        // Prepare a CompilerOptions object
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(com.google.javascript.jscomp.DiagnosticGroups.ALL_CHECKS, com.google.javascript.jscomp.CheckLevel.WARNING);
        options.setCompilationLevel(CompilerOptions.CompilationLevel.SIMPLE_OPTIMIZATIONS);

        // Instantiate the compiler
        Compiler compiler = new Compiler();

        // Compile the JavaScript code
        compiler.compile(
            Arrays.asList(SourceFile.fromCode("externs.js", "")),
            Arrays.asList(SourceFile.fromCode("crash.js", jsCode)),
            options
        );

        // This is where we expect the exception
    }
}
