
import org.junit.Test;
import static org.junit.Assert.*;
import com.google.javascript.jscomp.*;

public class ClosureCompilerTest {

    @Test
    public void testClosureRemovesNeededCode() {
        // Set up a CompilerOptions instance to use SIMPLE_OPTIMIZATIONS
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // The source code to be compiled
        String sourceCode = "Math.blah = function(test) { test.a = 5; }; " +
                            "var test = new Object(); " +
                            "Math.blah(test);";

        // Compile the source code
        Compiler compiler = new Compiler();
        compiler.compile(SourceFile.fromCode("externs.js", ""), 
                         SourceFile.fromCode("input.js", sourceCode), 
                         options);

        // Get the compiled output
        String compiledCode = compiler.toSource();

        // Define the expected output that should be preserved
        String expectedOutputContent = "Math.blah(test);";
        
        // Check that the compiled output still contains the necessary call
        assertTrue("Compiled code should contain the method call Math.blah(test)", 
                   compiledCode.contains(expectedOutputContent));
    }
}
