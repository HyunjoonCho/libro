
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.BeanDeserializerModifier;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.deser.KeyDeserializer;
import com.google.common.collect.ImmutableMap;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class EnumKeyDeserializerTest {

    enum Color {
        RED, BLUE, GREEN
    }

    public static class LowerCaseEnumModule extends SimpleModule {
        private static final long serialVersionUID = 1L;

        public LowerCaseEnumModule() {
            setDeserializerModifier(new BeanDeserializerModifier() {
                @Override
                public KeyDeserializer modifyKeyDeserializer(
                        DeserializationConfig config,
                        JavaType type,
                        KeyDeserializer deserializer) {
                    if (!type.isEnumType()) {
                        return super.modifyKeyDeserializer(config, type, deserializer);
                    }
                    return new KeyDeserializer() {
                        @Override
                        @SuppressWarnings("unchecked")
                        public Object deserializeKey(String key, DeserializationContext ctxt)
                                throws IOException, JsonProcessingException {
                            Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                            return Enum.valueOf(rawClass, key.toUpperCase());
                        }
                    };
                }
            });
        }
    }

    @Test
    public void testEnumKeyDeserializer() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new LowerCaseEnumModule());

        // JSON representation of a map with lowercase enum keys
        String json = "{\"red\":\"#FF0000\",\"green\":\"#00FF00\"}";

        ImmutableMap<Color, String> result = mapper.readValue(json,
                mapper.getTypeFactory().constructMapType(ImmutableMap.class, Color.class, String.class));

        // Assert that the map is deserialized correctly
        assertEquals("#FF0000", result.get(Color.RED));
        assertEquals("#00FF00", result.get(Color.GREEN));
    }
}
