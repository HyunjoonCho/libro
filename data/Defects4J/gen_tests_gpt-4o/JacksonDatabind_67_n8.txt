public void testMapKeyDeserializerModifiersIgnored() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper();
    SimpleModule module = new SimpleModule();
    module.setDeserializerModifier(new BeanDeserializerModifier() {
        @Override
        public KeyDeserializer modifyKeyDeserializer(
                DeserializationConfig config, 
                JavaType type, 
                KeyDeserializer deserializer) {
            if (!type.isEnumType()) {
                return super.modifyKeyDeserializer(config, type, deserializer);
            }
            return new KeyDeserializer() {
                @Override
                @SuppressWarnings("unchecked")
                public Object deserializeKey(String key, DeserializationContext ctxt)
                        throws IOException, JsonProcessingException {
                    Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                    return Enum.valueOf(rawClass, key.toUpperCase());
                }
            };
        }
    });
    objectMapper.registerModule(module);

    String json = "{\"colorMap\":{\"red\":\"value1\", \"blue\":\"value2\"}}";
    JavaType mapType = objectMapper.getTypeFactory().constructMapType(
            ImmutableMap.class, Color.class, String.class);

    Map<Color, String> colorMap = objectMapper.readValue(json, mapType);

    assertEquals("value1", colorMap.get(Color.RED));
    assertEquals("value2", colorMap.get(Color.BLUE));
}

enum Color {
    RED, BLUE, GREEN;
}