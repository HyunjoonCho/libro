
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.linear.PointValuePair;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverOptimization() {
        // Define the objective function: maximize 3x + 5y
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 3, 5 }, 0);

        // Define the constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[] { 2, 8 }, Relationship.LEQ, 13));
        constraints.add(new LinearConstraint(new double[] { 5, -1 }, Relationship.LEQ, 11));
        constraints.add(new LinearConstraint(new double[] { 1, 0 }, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[] { 0, 1 }, Relationship.GEQ, 0));

        // Set up the optimization
        SimplexSolver solver = new SimplexSolver();
        PointValuePair solution = solver.optimize(
            new OptimizationData[] {
                f,
                GoalType.MAXIMIZE,
                new org.apache.commons.math3.optim.linear.LinearConstraintSet(constraints)
            }
        );

        // Assert the expected solution
        double expectedMaxValue = 35; // Expected optimal value for the designed problem
        Assert.assertEquals(expectedMaxValue, solution.getValue(), 1e-9);
        Assert.assertArrayEquals(new double[] { 2, 4.5 }, solution.getPoint(), 1e-9);
    }
}
