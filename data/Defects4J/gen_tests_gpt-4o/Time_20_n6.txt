
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Test;

import static org.junit.Assert.*;

import java.util.Set;

public class JodaDateTimeZoneTest {

    private static DateTimeFormatter formatter = DateTimeFormat.forPattern("MM/dd/yyyy HH:mm:ss.SSS ZZZ");

    @Test
    public void testTimeZoneIdConsistency() {
        Set<String> timeZones = DateTimeZone.getAvailableIDs();

        int numTimeZonesTested = 0;
        int numTimeZonesPassed = 0;
        int numTimeZonesFailed = 0;
        int numTimeZonesException = 0;

        for (String timeZone : timeZones) {
            numTimeZonesTested++;
            try {
                DateTime dateTime = DateTime.now().withZone(DateTimeZone.forID(timeZone));
                String dateTimeZoneId = dateTime.getZone().getID();

                // Format and parse the DateTime to check consistency
                DateTime convertedDateTime = formatter.parseDateTime(formatter.print(dateTime));

                if (!dateTimeZoneId.equals(convertedDateTime.getZone().getID())) {
                    numTimeZonesFailed++;
                    System.out.println("Formatter failed for time zone ID: " + dateTimeZoneId + 
                                       "   converted it to: " + convertedDateTime.getZone().getID());
                } else {
                    numTimeZonesPassed++;
                }
            } catch (IllegalArgumentException iae) {
                numTimeZonesException++;
                System.out.println("Formatter threw exception for time zone id: " + timeZone);
            }
        }

        System.out.println("Number of Time Zones tested: " + numTimeZonesTested);
        System.out.println("Number passed:     " + numTimeZonesPassed);
        System.out.println("Number failed:     " + numTimeZonesFailed);
        System.out.println("Number exceptions: " + numTimeZonesException);

        // Assert that there are no failed conversions or exceptions 
        // (Adjust these assertions based on expected outcomes based on the bug report)
        assertTrue(numTimeZonesFailed > 0);  // As per bug description, some should fail
        assertTrue(numTimeZonesException > 0);  // As per bug description, some should throw exceptions
    }
}
