public void testCorrelatedRandomVectorGeneratorWithZeroRow() {
    double[][] covarianceMatrix1 = {
        {0.0, 0.0, 0.0, 0.0, 0.0},
        {0.0, 0.013445532, 0.01039469, 0.009881156, 0.010499559},
        {0.0, 0.01039469, 0.023006616, 0.008196856, 0.010732709},
        {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
        {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
    };
    
    double[][] covarianceMatrix2 = {
        {0.013445532, 0.01039469, 0.0, 0.009881156, 0.010499559},
        {0.01039469, 0.023006616, 0.0, 0.008196856, 0.010732709},
        {0.0, 0.0, 0.0, 0.0, 0.0},
        {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
        {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
    };
    
    double[][] covarianceMatrix3 = {
        {0.013445532, 0.01039469, 0.009881156, 0.010499559},
        {0.01039469, 0.023006616, 0.008196856, 0.010732709},
        {0.009881156, 0.008196856, 0.019023866, 0.009210099},
        {0.010499559, 0.010732709, 0.009210099, 0.019107243}
    };
    
    Array2DRowRealMatrix matrix1 = new Array2DRowRealMatrix(covarianceMatrix1);
    Array2DRowRealMatrix matrix2 = new Array2DRowRealMatrix(covarianceMatrix2);
    Array2DRowRealMatrix matrix3 = new Array2DRowRealMatrix(covarianceMatrix3);
    
    RectangularCholeskyDecomposition decomposition1 = new RectangularCholeskyDecomposition(matrix1);
    RectangularCholeskyDecomposition decomposition2 = new RectangularCholeskyDecomposition(matrix2);
    RectangularCholeskyDecomposition decomposition3 = new RectangularCholeskyDecomposition(matrix3);
    
    // Check ranks
    assertEquals(4, decomposition1.getRank());
    assertEquals(4, decomposition2.getRank());
    assertEquals(4, decomposition3.getRank());
}