script
/**
 * @returns {{prop1: (Object|undefined), prop2: (string|undefined), prop3: (string|undefined)}}
 */
function func(a, b) {
    var results = {};
    if (a) {
        results.prop1 = { a: 3 };
    }
    if (b) {
        results.prop2 = 'prop2';
    } else {
        results.prop3 = 'prop3';
    }
    return results;
}

function testFunc() {
    // Test case where both 'a' and 'b' are true
    var result1 = func(true, true);
    console.assert(result1.prop1 !== undefined, "Test failed: prop1 should be defined");
    console.assert(result1.prop2 === 'prop2', "Test failed: prop2 should be 'prop2'");
    console.assert(result1.prop3 === undefined, "Test failed: prop3 should be undefined");

    // Test case where 'a' is true and 'b' is false
    var result2 = func(true, false);
    console.assert(result2.prop1 !== undefined, "Test failed: prop1 should be defined");
    console.assert(result2.prop2 === undefined, "Test failed: prop2 should be undefined");
    console.assert(result2.prop3 === 'prop3', "Test failed: prop3 should be 'prop3'");

    // Test case where 'a' is false and 'b' is true
    var result3 = func(false, true);
    console.assert(result3.prop1 === undefined, "Test failed: prop1 should be undefined");
    console.assert(result3.prop2 === 'prop2', "Test failed: prop2 should be 'prop2'");
    console.assert(result3.prop3 === undefined, "Test failed: prop3 should be undefined");

    // Test case where both 'a' and 'b' are false
    var result4 = func(false, false);
    console.assert(result4.prop1 === undefined, "Test failed: prop1 should be undefined");
    console.assert(result4.prop2 === undefined, "Test failed: prop2 should be undefined");
    console.assert(result4.prop3 === 'prop3', "Test failed: prop3 should be 'prop3'");
}

testFunc();
