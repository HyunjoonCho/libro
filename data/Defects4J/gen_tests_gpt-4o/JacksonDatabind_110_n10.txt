
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectMapper.DefaultTyping;
import org.junit.Test;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.LinkedList;

import static org.junit.Assert.assertEquals;

public class CollectionsUnmodifiableListTest {

    @Test
    public void testUnmodifiableNonRandomAccessList() throws Exception {
        // Create an unmodifiable list backed by a LinkedList (not implementing RandomAccess)
        Collection<?> expected = Collections.unmodifiableList(new LinkedList<>(Arrays.asList("first", "second")));

        // Initialize an ObjectMapper with default typing enabled
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);

        // Serialize the collection to JSON
        String json = mapper.writeValueAsString(expected);

        // Deserialize the JSON back to a Collection
        Collection<?> actual = mapper.readValue(json, Collection.class);

        // Ensure that the deserialized collection matches the original expected collection
        assertEquals(expected, actual);

        // Ensure that the class type is the same (i.e., both should be Collections$UnmodifiableList)
        assertEquals(expected.getClass(), actual.getClass());
    }
}
