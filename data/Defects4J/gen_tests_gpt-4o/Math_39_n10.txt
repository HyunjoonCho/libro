public void testLargeInitialStepSizeWithDormandPrince853Integrator() {
    double[] y = {0.0}; 
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(1.0e-8, 100.0, 1.0e-10, 1.0e-10); 
    integrator.setInitialStepSize(1.0e-8); 
    integrator.addStepHandler(new StepHandler() {
        public void handleStep(StepInterpolator interpolator, boolean isLast) {
            if (interpolator.getCurrentTime() > 1.0e-9) {
                fail("Step size was too large for the given range.");
            }
        }
        public boolean requiresDenseOutput() {
            return false;
        }
        public void reset() {}
    });
    integrator.integrate(new FirstOrderDifferentialEquations() {
        public int getDimension() {
            return 1;
        }
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = t + y[0];
        }
    }, 0.0, y, 1.0e-8, y);
}