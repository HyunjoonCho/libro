
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class DeserializationProblemHandlerTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
    static class Base {
    }

    static class Derived extends Base {
    }

    @Test
    public void testDeserializationWithDeserializationProblemHandler() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE, JsonTypeInfo.As.PROPERTY);
        mapper.addHandler(new DeserializationProblemHandler() {
            @Override
            public JavaType handleUnknownTypeId(DeserializationContext ctxt, JavaType baseType, String subTypeId,
                                                TypeIdResolver idResolver, String failureMsg) {
                return ctxt.constructType(Void.class);
            }
        });

        String json = "{\"type\":\"unknownType\"}";

        assertThrows(NullPointerException.class, () -> {
            mapper.readValue(json, new TypeReference<Base>() {});
        });
    }
}
