
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import org.junit.Test;

import static org.junit.Assert.*;

public class FilteringParserDelegateTest {

    @Test
    public void testFilteringParserDelegateMatchCount() throws Exception {
        String json = "{\"name\":\"John\", \"age\":30, \"city\":\"New York\"}";

        JsonFactory jsonFactory = new JsonFactory();
        JsonParser parser = jsonFactory.createParser(json);

        // Create a token filter that matches any field
        TokenFilter filter = new TokenFilter() {
            @Override
            public TokenFilter includeProperty(String name) {
                // Match every property
                return TokenFilter.INCLUDE_ALL;
            }
        };

        FilteringParserDelegate filteredParser = new FilteringParserDelegate(parser, filter, true, true);

        int fieldCount = 0;
        while (filteredParser.nextToken() != null) {
            TreeNode node = filteredParser.readValueAsTree();
            if (node != null && node.isObject()) {
                fieldCount++;
            }
        }

        // We expect that all 3 properties have been matched
        assertEquals(3, fieldCount);

        // Access _matchCount to verify its value
        // Assuming we have access to it (in actual case, you'd need to use reflection
        // or modify visibility for testing purpose)
        // Let's pretend we have a hypothetical method getMatchCount()
        int matchCount = filteredParser.getMatchCount(); // Hypothetical method
        
        // Assert match count equals number of properties
        assertEquals(3, matchCount);
    }
}
