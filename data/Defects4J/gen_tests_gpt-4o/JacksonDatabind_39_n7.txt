
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class CallRecordTest {

    @Test
    public void testFailOnInvalidSubtypeShouldSkipInvalidAndContinue() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper()
                .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)
                .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
                .disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

        String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";

        CallRecord callRecord = objectMapper.readValue(json, CallRecord.class);

        // The item should be invalid, therefore it should be null
        assertNull(callRecord.item);

        // Since item2 is valid, it should be present
        assertEquals("event", ((Event) callRecord.item2).TYPE);

        // The application should be correctly parsed
        assertEquals("123", callRecord.application);
    }

    @JsonInclude(JsonInclude.Include.NON_NULL)
    public static class CallRecord {
        public float version;
        public String application;
        public Item item;
        public Item item2;

        @Override
        public String toString() {
            final StringBuilder builder = new StringBuilder();
            builder.append("CallRecord [version=").append(version).append(", ");
            if (application != null) {
                builder.append("application=").append(application).append(", ");
            }
            if (item != null) {
                builder.append("item=").append(item);
            }
            builder.append("]");
            return builder.toString();
        }
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
    @JsonSubTypes({@JsonSubTypes.Type(value = Event.class, name = Event.TYPE)})
    public interface Item {}

    public static final class Event implements Item {
        public String location;
        public static final String TYPE = "event";
        public Event() {}
    }
}
