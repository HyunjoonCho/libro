
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

// Custom Serializer
class MySerializer extends StdSerializer<Map<String, String>> {

    public MySerializer() {
        super((Class<Map<String, String>>) null);
    }

    @Override
    public void serialize(Map<String, String> value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider provider) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey(), entry.getValue().toUpperCase());
        }
        gen.writeEndObject();
    }
}

// Class with JsonAnyGetter and JsonSerialize
class MyClass {

    private final Map<String, String> parameters;

    @JsonCreator
    public MyClass(@JsonProperty("parameters") Map<String, String> parameters) {
        this.parameters = parameters;
    }

    @JsonAnyGetter
    @JsonSerialize(using = MySerializer.class)
    public Map<String, String> getParameters() {
        return parameters;
    }
}

public class JsonSerializeTest {

    @Test
    public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
        Map<String, String> params = new HashMap<>();
        params.put("key1", "value1");
        params.put("key2", "value2");

        MyClass myObject = new MyClass(params);

        ObjectMapper objectMapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(new MySerializer());
        objectMapper.registerModule(module);

        String jsonResult = objectMapper.writeValueAsString(myObject);

        // Expected serialized string should have all values in uppercase
        // because of the custom serializer MySerializer
        String expected = "{\"key1\":\"VALUE1\",\"key2\":\"VALUE2\"}";

        assertEquals(expected, jsonResult, "Serialized JSON should match expected output with upper-case values");
    }
}
