public void testJsonAnyGetterWithJsonSerialize() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    TestClass testInstance = new TestClass();
    testInstance.parameters.put("key1", "value1");

    String jsonResult = mapper.writeValueAsString(testInstance);
    assertTrue(jsonResult.contains("customValue:value1"));
}

static class TestClass {
    private final Map<String, String> parameters = new HashMap<>();

    @JsonSerialize(converter = MyConverter.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

static class MyConverter extends StdConverter<Map<String, String>, Map<String, String>> {
    @Override
    public Map<String, String> convert(Map<String, String> value) {
        Map<String, String> result = new HashMap<>();
        value.forEach((k, v) -> result.put("customKey:" + k, "customValue:" + v));
        return result;
    }
}