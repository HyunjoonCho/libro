
import org.junit.Test;
import static org.junit.Assert.*;

public class JSCompilerTest {

    // Simulating a minification process and observing the behavior
    @Test
    public void testArgumentsShadowingIssue() {
        try {
            executeJavaScriptFunction();
            fail("Expected an IllegalArgumentException due to shadowing.");
        } catch (IllegalArgumentException e) {
            // This is expected as 'arguments' is shadowed in the logic propagation
            assertEquals("Function arguments should not be shadowed", e.getMessage());
        }
    }

    private void executeJavaScriptFunction() {
        simulateJavaScriptFunctionWithShadowing();
    }

    private void simulateJavaScriptFunctionWithShadowing() {
        // Supposed minified behavior of the function
        Object arguments = getArguments();
        arguments = sliceArguments(arguments);
    }

    private Object getArguments() {
        // Normally, the arguments would be passed, but for this test, simulate as needed
        return new Object[] {"arg1", "arg2"};
    }

    private Object sliceArguments(Object args) {
        if (!(args instanceof Object[])) {
            throw new IllegalArgumentException("Function arguments should not be shadowed");
        }
        return ((Object[]) args).length > 0 ? ((Object[]) args) : new Object[]{};
    }
}
