
import org.apache.commons.math3.optim.linear.*;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverIncorrectSolution() {
        // Create the objective function: Maximize 3x + 4y
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{3, 4}, 0);

        // Create constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 1}, Relationship.LEQ, 4));
        constraints.add(new LinearConstraint(new double[]{2, 1}, Relationship.LEQ, 5));
        
        // Create a simplex solver
        SimplexSolver simplexSolver = new SimplexSolver();

        // Define the optimization data
        OptimizationData[] optimizationData = new OptimizationData[] {
            new LinearConstraintSet(constraints),
            GoalType.MAXIMIZE,
            new NonNegativeConstraint(true)
        };

        // Solve the problem
        PointValuePair solution = simplexSolver.optimize(objectiveFunction, optimizationData);

        // Extract the solution
        double x = solution.getPoint()[0];
        double y = solution.getPoint()[1];
        double maxValue = solution.getValue();

        // Expected values
        double expectedX = 1.5; // Expected x-value of the solution
        double expectedY = 2.5; // Expected y-value of the solution
        double expectedMaxValue = 3 * expectedX + 4 * expectedY; // Expected max value

        // Verify the solution
        assertEquals(expectedX, x, 1e-5);
        assertEquals(expectedY, y, 1e-5);
        assertEquals(expectedMaxValue, maxValue, 1e-5);
    }
}
