
import org.apache.commons.io.IOUtils;
import org.junit.jupiter.api.Test;

import javax.crypto.Cipher;
import javax.crypto.CipherInputStream;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.NoSuchAlgorithmException;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

public class IOUtilsSkipTest {

    private CipherInputStream createCipherInputStream(byte[] data) throws NoSuchAlgorithmException {
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(128);
        SecretKey secretKey = keyGen.generateKey();
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, secretKey);
            byte[] encryptedData = cipher.doFinal(data);
            ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(encryptedData);
            cipher.init(Cipher.DECRYPT_MODE, secretKey);
            return new CipherInputStream(byteArrayInputStream, cipher);
        } catch (Exception e) {
            throw new RuntimeException("Error during stream creation", e);
        }
    }
    
    @Test
    public void testIOUtilsSkipDoesNotWorkAsAdvertised() throws Exception {
        byte[] data = new byte[1024];
        CipherInputStream cipherInputStream = createCipherInputStream(data);

        assertDoesNotThrow(() -> {
            // Assuming we want to skip 512 bytes
            long bytesToSkip = 512;
            long skipped = IOUtils.skip(cipherInputStream, bytesToSkip);

            // Verifying the skip behavior
            if (skipped != bytesToSkip) {
                throw new IOException("Expected " + bytesToSkip + " bytes to be skipped, but got " + skipped);
            }
        });
    }
}
