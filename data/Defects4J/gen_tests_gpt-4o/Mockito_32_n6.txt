
import org.junit.Test;
import org.mockito.Mockito;

// Package-private parent class
class PackagePrivateParent {
    public String getGreeting() {
        return "Hello from Parent!";
    }
}

// Public subclass
public class PublicSubclass extends PackagePrivateParent {
    @Override
    public String getGreeting() {
        return "Hello from Subclass!";
    }
}

// Test case
public class MockitoPackagePrivateClassTest {

    @Test(expected = RuntimeException.class)
    public void testMockingPublicClassWithPackagePrivateParent() {
        // Attempt to create a mock of PublicSubclass which extends PackagePrivateParent
        PublicSubclass mockObject = Mockito.mock(PublicSubclass.class);

        // Verify behavior: In the bug, the real method gets called instead of returning a mock value
        Mockito.when(mockObject.getGreeting()).thenReturn("Mock Greeting");

        // Despite setting up the mock behavior, in the bug situation, the real method runs
        String response = mockObject.getGreeting();

        // The returned response should be the mocked response
        // This assertion will fail if the real method gets called instead
        assertEquals("Mock Greeting", response);
    }
}
