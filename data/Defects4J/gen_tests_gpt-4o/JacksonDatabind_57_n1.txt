
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class ObjectReaderTest {

    @Test
    public void testReadValuesWithOffsetAndLength() throws IOException {
        // Sample JSON array data
        byte[] jsonData = "[1,2,3,4,5]".getBytes();

        // Create ObjectMapper and ObjectReader
        ObjectMapper mapper = new ObjectMapper();
        ObjectReader reader = mapper.readerFor(new TypeReference<List<Integer>>() {});

        // Read values with specific offset and length
        int offset = 1;  // Start at second character in array
        int length = 3;  // Read three characters

        JsonParser parser = new JsonFactory().createParser(jsonData, offset, length);

        // Attempting to read with specified offset and length, it should parse from '2' to '4'
        List<Integer> values = reader.readValues(parser).readAll();

        // Assert the expected behavior
        assertEquals(1, values.size(), "The number of parsed elements should be 1.");
        assertEquals(2, values.get(0), "First element should be 2.");
    }
}
