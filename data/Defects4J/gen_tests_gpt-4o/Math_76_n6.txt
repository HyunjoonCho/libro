
import static org.junit.Assert.*;

import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import org.junit.Test;

public class SingularValueDecompositionTest {
    
    @Test
    public void testNaNSingularValueFromSVD() {
        double[][] data = {
            {1.0, 2.0, 3.0},
            {2.0, 3.0, 4.0},
            {3.0, 5.0, 7.0}
        };
        
        Array2DRowRealMatrix matrix = new Array2DRowRealMatrix(data);
        SingularValueDecomposition svd = new SingularValueDecomposition(matrix);
        
        double[] singularValues = svd.getSingularValues();

        // Check if the last singular value is not NaN and is close to 0
        assertFalse("The last singular value should not be NaN.", Double.isNaN(singularValues[2]));
        assertEquals("The last singular value should be close to 0.", 0.0, singularValues[2], 1e-12);
    }
}
