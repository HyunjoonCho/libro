
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSCompiler;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.Parser;
import com.google.javascript.rhino.head.ast.AstRoot;
import org.junit.Test;

import static org.junit.Assert.*;

public class ECMAScript5Test {

    @Test
    public void testQuotedPropertyName() {
        String sourceCode = "var x = { get 'x'() { return 1 } };";
        boolean parseSuccess = parseJavaScript(sourceCode);
        assertTrue("JavaScript with quoted property name should parse successfully in ECMAScript5.", parseSuccess);
    }
    
    @Test
    public void testNumericPropertyName() {
        String sourceCode = "var x = { get 1() { return 1 } };";
        boolean parseSuccess = parseJavaScript(sourceCode);
        assertTrue("JavaScript with numeric property name should parse successfully in ECMAScript5.", parseSuccess);
    }

    private boolean parseJavaScript(String source) {
        Context context = Context.enter();
        // Use a try-catch to handle parsing exceptions.
        try {
            Context.jsVersion = Context.VERSION_1_5; // Set JavaScript version to ECMAScript 5
            Parser parser = new Parser(context, context.initStandardObjects());
            AstRoot astRoot = parser.parse(source, null, 1);
            return astRoot != null;
        } catch (Exception e) {
            return false;
        } finally {
            Context.exit();
        }
    }
}
