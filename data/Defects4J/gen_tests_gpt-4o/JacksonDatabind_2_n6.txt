
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.node.JsonNodeType;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

class X<T> {
    String s;
    List<T> items;

    public X(String s, List<T> items) {
        this.s = s;
        this.items = items;
    }

    public String getS() {
        return s;
    }

    public List<T> getItems() {
        return items;
    }
}

class ListAttribute {
    private String itemJsonKey;
    private List<?> items;

    public ListAttribute(String itemJsonKey, List<?> items) {
        this.itemJsonKey = itemJsonKey;
        this.items = items;
    }

    public String getItemJsonKey() {
        return itemJsonKey;
    }

    public List<?> getItems() {
        return items;
    }
}

public class ListAttributeSerializer extends JsonSerializer<ListAttribute> {
    @Override
    public void serialize(ListAttribute value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
        jgen.writeStartObject();
        jgen.writeStringField("itemType", value.getItemJsonKey());
        jgen.writeObjectField("items", value.getItems());
        jgen.writeEndObject();
    }

    @Override
    public void serializeWithType(ListAttribute value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
        typeSer.writeTypePrefixForObject(value, jgen);
        jgen.writeStringField("itemType", value.getItemJsonKey());
        jgen.writeObjectField("items", value.getItems());
        typeSer.writeTypeSuffixForObject(value, jgen);
    }
}

public class SerializerTest {
    @Test
    public void testSerialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(ListAttribute.class, new ListAttributeSerializer());
        mapper.registerModule(module);

        ListAttribute listAttribute = new ListAttribute("example", Arrays.asList("item1", "item2"));
        X<ListAttribute> obj = new X<>("test", Arrays.asList(listAttribute));

        // Default behavior leading to the issue
        JsonNode rootNode = mapper.valueToTree(obj);
        JsonNode itemsNode = rootNode.get("items").get(0);

        // Check for the unintended VALUE_EMBEDDED_OBJECT
        assertNotEquals(JsonNodeType.OBJECT, itemsNode.getNodeType(), "The items should not be embedded objects");

        // Workaround - force through full serialization/deserialization
        byte[] jsonBytes = mapper.writeValueAsBytes(obj);
        JsonNode correctTree = mapper.readTree(jsonBytes);

        JsonNode correctItemsNode = correctTree.get("items").get(0);
        assertEquals(JsonNodeType.OBJECT, correctItemsNode.getNodeType(), "The items should be correctly structured as JSON object");
    }
}
