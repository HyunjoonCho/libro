
import org.apache.commons.math3.analysis.function.HarmonicOscillator;
import org.apache.commons.math3.fitting.HarmonicFitter;
import org.apache.commons.math3.optim.SimpleVectorValueChecker;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class HarmonicFitterTest {

    @Test
    public void testHarmonicFitterParameterGuesser() {
        // Sample data
        final double[] xData = {0.0, 1.0, 2.0, 3.0, 4.0, 5.0};
        final double[] yData = {2.0, 0.0, -2.0, 0.0, 2.0, 0.0};

        // Create an instance of HarmonicFitter
        HarmonicFitter fitter = new HarmonicFitter(new LevenbergMarquardtOptimizer());
        
        // Add points to the fitter
        for (int i = 0; i < xData.length; i++) {
            fitter.addObservedPoint(xData[i], yData[i]);
        }
        
        // Attempt to guess parameters
        HarmonicFitter.ParameterGuesser guesser = new HarmonicFitter.ParameterGuesser(fitter.getObservations());
        double[] guessedParameters = guesser.guess();

        // Perform assertions to validate the guessed parameters
        double amplitude = guessedParameters[0];
        double angularFrequency = guessedParameters[1];
        double phase = guessedParameters[2];

        // Asserts that amplitude should be close to >0 based on the data provided
        assertTrue("Amplitude guess should be sensible", amplitude > 0);
        assertTrue("Angular frequency guess should be sensible", angularFrequency > 0);

        // Note: You may extend assertions to check against known correct values.
    }
}
