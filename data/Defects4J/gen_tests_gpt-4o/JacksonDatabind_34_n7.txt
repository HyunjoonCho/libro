
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.jsonSchema.JsonSchema;
import com.fasterxml.jackson.module.jsonSchema.JsonSchemaGenerator;
import com.fasterxml.jackson.module.jsonSchema.types.NumberSchema;
import org.junit.Test;

import java.math.BigDecimal;

import static org.junit.Assert.assertTrue;

public class BigDecimalSchemaTest {

    public static class TestClass {
        public BigDecimal value;
    }

    @Test
    public void testBigDecimalSchema() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        JsonSchemaGenerator schemaGenerator = new JsonSchemaGenerator(objectMapper);

        // Generate JSON schema for the TestClass
        JsonSchema schema = schemaGenerator.generateSchema(TestClass.class);

        // Check that the schema for 'value' field is of type "number"
        JsonSchema valueSchema = schema.asObjectSchema().getProperties().get("value");

        assertTrue("Expected NumberSchema for BigDecimal", valueSchema instanceof NumberSchema);
        NumberSchema numberSchema = (NumberSchema) valueSchema;

        String numberType = numberSchema.getType().toString();
        assertTrue("Expected type 'number' but was " + numberType, 
            numberType.equals("number"));
    }
}

