public void testPrototypeDeclaredWithQuotes() {
    String jsCode = "/** @constructor */\n" +
                    "function MyClass() {}\n" +
                    "MyClass.prototype[\"MyMethod\"] = function(a) {\n" +
                    "  this.a = a;\n" +
                    "}\n" +
                    "window[\"MyClass\"] = MyClass;\n";

    String externs = "/**@interface */\n" +
                     "function MyParent() {}\n" +
                     "/** @param {*} a */\n" +
                     "MyParent.prototype.MyMethod = function(a) {}\n";

    String jsCodeWithInterface = "/**\n" +
                                 "* @constructor\n" +
                                 "* @implements {MyParent}\n" +
                                 "*/\n" +
                                 "function MyClass() {}\n" +
                                 "MyClass.prototype[\"MyMethod\"] = function(a) {\n" +
                                 " this.a2 = a;\n" +
                                 "}\n" +
                                 "window[\"MyClass\"] = MyClass;\n";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    options.setWarningLevel(DiagnosticGroups.GLOBAL_THIS, CheckLevel.WARNING);

    // Compile code with prototypes declared with quotes
    Result result1 = compiler.compile(
        SourceFile.fromCode("externs", externs),
        SourceFile.fromCode("test", jsCode),
        options
    );
    assertFalse("Warnings or errors found during compilation of jsCode.", result1.warnings.length > 0 || result1.errors.length > 0);

    // Compile code with interface
    Result result2 = compiler.compile(
        SourceFile.fromCode("externs", externs),
        SourceFile.fromCode("testWithInterface", jsCodeWithInterface),
        options
    );
    assertFalse("Warnings or errors found during compilation of jsCodeWithInterface.", result2.warnings.length > 0 || result2.errors.length > 0);
}