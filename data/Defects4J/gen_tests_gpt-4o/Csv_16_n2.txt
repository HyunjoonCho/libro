
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.StringReader;
import java.util.Iterator;

import static org.junit.Assert.assertEquals;

public class CSVParserTest {

    @Test
    public void testNewIteratorSameLexer() throws Exception {
        String fiveRows = "1\n2\n3\n4\n5\n";
        CSVParser parser;

        // Test with enhanced for loop without peeking
        parser = new CSVParser(new BufferedReader(new StringReader(fiveRows)), CSVFormat.DEFAULT);
        int recordNumber = 0;
        Iterator<CSVRecord> iter = parser.iterator();
        
        while (iter.hasNext()) {
            CSVRecord record = iter.next();
            recordNumber++;
            assertEquals(String.valueOf(recordNumber), record.get(0));

            if (recordNumber >= 2) {
                break;
            }
        }
        
        // Test with a new iterator
        Iterator<CSVRecord> newIter = parser.iterator();
        assertEquals(true, newIter.hasNext());
        
        // Second iteration continues
        CSVRecord record = newIter.next();
        recordNumber++;
        assertEquals(String.valueOf(3), record.get(0));  // Expecting "3", but incorrectly get "4"
        
        // Clean up parser
        parser.close();
    }
}
