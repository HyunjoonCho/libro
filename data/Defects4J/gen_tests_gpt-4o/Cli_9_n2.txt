
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.MissingOptionException;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class MissingOptionExceptionTest {

    @Test
    public void testMissingOptionMessage() {
        Options options = new Options();
        // Define required options with logic from the bug report.
        options.addOption("format", true, "format option");
        options.addOption("source", true, "source option");
        options.addOption("properties", true, "properties option");
        
        CommandLineParser parser = new DefaultParser();
        String[] args = new String[] {}; // Empty args to trigger MissingOptionException

        try {
            CommandLine cmd = parser.parse(options, args);
        } catch (MissingOptionException e) {
            // Test with CLI 1.1 message format and observe what is expected
            String expectedMessage = "Missing required options: format source properties";
            // Change the message format to the desired output (adding '-' prefix). 
            String modifiedMessage = e.getMissingOptions().stream()
                    .map(option -> "-" + option)
                    .reduce("Missing required options:", (message, option) -> message + " " + option);
            
            // Check the actual error message against the expected
            assertEquals(expectedMessage, modifiedMessage);
        } catch (ParseException e) {
            // Handle other parsing exceptions
            e.printStackTrace();
        }
    }
}
