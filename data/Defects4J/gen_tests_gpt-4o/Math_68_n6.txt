
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.util.Pair;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testCustomConvergenceChecker() {
        LeastSquaresOptimizer optimizer = new LevenbergMarquardtOptimizer().withConvergenceChecker(
                new LeastSquaresProblem.ConvergenceChecker<LeastSquaresProblem.Evaluation>() {
                    @Override
                    public boolean converged(int iteration, LeastSquaresProblem.Evaluation previous, LeastSquaresProblem.Evaluation current) {
                        // Custom convergence criteria based on iteration count
                        return iteration >= 10;
                    }
                }
        );

        LeastSquaresProblem problem = new LeastSquaresProblem() {
            @Override
            public RealVector getStart() {
                return null;
            }

            @Override
            public int getObservationSize() {
                return 0;
            }

            @Override
            public int getParameterSize() {
                return 0;
            }

            @Override
            public LeastSquaresProblem.Evaluation evaluate(RealVector point) {
                return new Evaluation() {
                    @Override
                    public RealVector getPoint() {
                        return null;
                    }

                    @Override
                    public RealVector getResiduals() {
                        return null;
                    }

                    @Override
                    public double getRMS() {
                        return 0;
                    }

                    @Override
                    public RealMatrix getJacobian() {
                        return null;
                    }

                    @Override
                    public Pair<RealVector, RealVector> getCovariances(double threshold) {
                        return null;
                    }

                    @Override
                    public RealMatrix getHessian(double threshold) {
                        return null;
                    }

                    @Override
                    public int getEvaluations() {
                        return 0;
                    }

                    @Override
                    public int getIteration() {
                        return 0;
                    }
                };
            }

            @Override
            public int getMaxEvaluations() {
                return Integer.MAX_VALUE;
            }

            @Override
            public int getMaxIterations() {
                return 100; // Should be higher than the convergence criteria of 10
            }

            @Override
            public boolean isParameterGloballyConverged() {
                return false;
            }
        };

        LeastSquaresOptimizer.Optimum optimum = optimizer.optimize(problem);
        // Check if convergence is reached by checking iteration count
        // As per our custom criteria, the optimizer should stop after 10 iterations
        assertTrue(optimum.getIterations() >= 10);
    }
}
