
import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.IOException;
import com.google.javascript.jscomp.CommandLineRunner;

public class ProcessClosurePrimitivesTest {

    @Test
    public void testProcessClosurePrimitivesFalse() throws IOException {
        try {
            // Simulate compiling a file with --process_closure_primitives false
            String[] argsFalse = {
                "--process_closure_primitives", "false",
                "--js", "test.js",
                "--output_manifest", "output_false.MF"
            };
            CommandLineRunner runnerFalse = new CommandLineRunner(argsFalse);
            int resultFalse = runnerFalse.doRun();
            
            // Check if the provided argument skips processing
            assertEquals("Processing should be skipped", 0, resultFalse);

            // Reading the output to check for goog.provide/require
            File outputFileFalse = new File("test.js");
            String contentFalse = new String(java.nio.file.Files.readAllBytes(outputFileFalse.toPath()));

            assertTrue("The file should still have its goog.provide/require tags", 
                       contentFalse.contains("goog.provide") || contentFalse.contains("goog.require"));

        } finally {
            // Clean up the test files if created such as the output file
            File outputFile = new File("output_false.MF");
            if (outputFile.exists()) {
                outputFile.delete();
            }
        }
    }

    @Test
    public void testProcessClosurePrimitivesTrue() throws IOException {
        try {
            // Simulate compiling a file with --process_closure_primitives true
            String[] argsTrue = {
                "--process_closure_primitives", "true",
                "--js", "test.js",
                "--output_manifest", "output_true.MF"
            };
            CommandLineRunner runnerTrue = new CommandLineRunner(argsTrue);
            int resultTrue = runnerTrue.doRun();
            
            // Check if the provided argument processes the tags
            assertEquals("Processing should be done", 0, resultTrue);

            // Reading the output to check for processed goog.provide/require
            File outputFileTrue = new File("test.js");
            String contentTrue = new String(java.nio.file.Files.readAllBytes(outputFileTrue.toPath()));

            assertFalse("The file should not have its goog.provide/require tags after processing", 
                        contentTrue.contains("goog.provide") || contentTrue.contains("goog.require"));
                
        } finally {
            // Clean up the test files if created such as the output file
            File outputFile = new File("output_true.MF");
            if (outputFile.exists()) {
                outputFile.delete();
            }
        }
    }
}
