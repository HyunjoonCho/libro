
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.BasicPolymorphicTypeValidator;
import org.junit.Test;

public class JdkTypeDeserializationTest {

    private final ObjectMapper mapper = new ObjectMapper();

    @Test(expected = IllegalArgumentException.class)
    public void testBlockJdkTypeFromDeserialization() throws Exception {
        // Setup the ObjectMapper to block unexpected polymorphic types
        mapper.activateDefaultTyping(
            BasicPolymorphicTypeValidator.builder()
                .allowIfSubType("com.yourpackage.allowed") // Example package to allow
                .build(),
            ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE
        );

        // JSON payload that should be blocked
        String jsonPayload = "{ \"@class\": \"java.some.JDKType\", \"value\": \"malicious code\" }";

        // Attempt to deserialize, expecting an exception due to blacklisting
        Object result = mapper.readValue(jsonPayload, Object.class); // Replace Object with your intended class
    }
}
