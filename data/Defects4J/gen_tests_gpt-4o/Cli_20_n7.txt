
import org.apache.commons.cli.*;

import org.junit.Test;
import static org.junit.Assert.*;

public class PosixParserTest {

    @Test
    public void testUnrecognizedLongOptionWithStopAtNonOption() {
        // Define options 'a' and 'b' with 'b' having an argument
        Options options = new Options();
        options.addOption("a", false, "Option a");
        options.addOption(Option.builder("b")
                .hasArg()
                .desc("Option b with argument")
                .build());

        // Command line to be tested
        String[] args = { "--zop", "-abfoo" };

        // Creating the parser
        CommandLineParser parser = new DefaultParser();

        try {
            // Parse the command line with stopAtNonOption enabled
            CommandLine cmd = parser.parse(options, args, true);

            // Check that the unrecognized long option stops further processing
            String[] remainingArgs = cmd.getArgs();

            // Assert the remaining arguments are unchanged
            assertArrayEquals(new String[]{"--zop", "-abfoo"}, remainingArgs);

        } catch (ParseException e) {
            fail("Parsing failed. Reason: " + e.getMessage());
        }
    }
}
