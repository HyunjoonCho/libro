
import org.junit.Test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import static org.junit.Assert.assertTrue;

public class CompilerWarningTest {

    @Test
    public void testCheckVarsWarning() throws IOException {
        String[] commandWithWarningLevelVerbose = {
            "java", "-jar", "compiler.jar",
            "--js", "test.js",
            "--warning_level", "VERBOSE"
        };
        String outputVerbose = runCommandAndCaptureOutput(commandWithWarningLevelVerbose);
        assertTrue("Expected output to contain 'variable foo is undefined'", 
                   outputVerbose.contains("variable foo is undefined"));

        String[] commandWithCheckVars = {
            "java", "-jar", "compiler.jar",
            "--js", "test.js",
            "--jscomp_warning", "checkVars"
        };
        String outputCheckVars = runCommandAndCaptureOutput(commandWithCheckVars);
        assertTrue("Expected output to contain 'variable foo is undefined'", 
                   outputCheckVars.contains("variable foo is undefined"));
    }

    @Test
    public void testUndefinedVarsWarning() throws IOException {
        String[] commandWithUndefinedVars = {
            "java", "-jar", "compiler.jar",
            "--js", "test.js",
            "--jscomp_warning", "undefinedVars"
        };
        String outputUndefinedVars = runCommandAndCaptureOutput(commandWithUndefinedVars);
        assertTrue("Expected output to contain 'variable foo is undefined'", 
                   outputUndefinedVars.contains("variable foo is undefined"));
    }

    private String runCommandAndCaptureOutput(String[] command) throws IOException {
        ProcessBuilder processBuilder = new ProcessBuilder(command);
        Process process = processBuilder.start();

        try (BufferedReader reader = new BufferedReader(
                new InputStreamReader(process.getInputStream()))) {
            StringBuilder result = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                result.append(line).append("\n");
            }
            return result.toString();
        }
    }
}
