
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

import java.util.Map;
import java.util.UUID;

// Define an interface with the method
interface MyCustomIdInterface {
    String getId();
}

// Implementation of the interface
class Foo implements MyCustomIdInterface {
    private String id;
    private String property;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getProperty() {
        return property;
    }

    public void setProperty(String property) {
        this.property = property;
    }
}

// Custom HashMap
class MyHashMap<K, V extends MyCustomIdInterface> extends java.util.HashMap<K, V> {
    // You can add custom logic here if needed
}

// Test class to reproduce the issue
public class JacksonDeserializationTest {

    @JsonDeserialize(as = MyHashMap.class)
    private Map<UUID, Foo> something;

    public Map<UUID, Foo> getSomething() {
        return something;
    }

    public void setSomething(Map<UUID, Foo> something) {
        this.something = something;
    }

    public static void main(String[] args) {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{ \"something\": [ { \"id\": \"123e4567-e89b-12d3-a456-426655440000\", \"property\": \"value\" } ] }";

        try {
            JacksonDeserializationTest test = mapper.readValue(json, JacksonDeserializationTest.class);
            System.out.println("Deserialization successful: " + test.getSomething());
        } catch (JsonProcessingException e) {
            e.printStackTrace();
        }
    }
}
