
import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.invocation.Invocation;
import org.mockito.verification.VerificationMode;

import java.util.List;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

public class CustomVerificationModeTest {

    private static class FirstInvocationVerification implements VerificationMode {

        private boolean verified = false;

        @Override
        public void verify(List<Invocation> invocations) {
            if (!invocations.isEmpty() && !verified) {
                // The first invocation should pass verification
                verified = true;
            } else {
                throw new AssertionError("No invocation should have been verified.");
            }
        }

        @Override
        public boolean equals(Object obj) {
            // Custom equality to check if the same type
            return obj instanceof FirstInvocationVerification;
        }

        @Override
        public int hashCode() {
            return FirstInvocationVerification.class.hashCode();
        }
    }

    @Test
    public void testCustomVerificationMode() {
        List<String> mockedList = mock(List.class);

        // Simulate invocations on the mock
        mockedList.add("one");
        mockedList.add("two");

        // Use custom VerificationMode to verify first invocation
        verify(mockedList, new FirstInvocationVerification()).add("one");
    }

    @Test
    public void testEqualsMethodForCustomVerificationMode() {
        VerificationMode firstInvocation1 = new FirstInvocationVerification();
        VerificationMode firstInvocation2 = new FirstInvocationVerification();

        // Both objects should be equal because they are of the same type
        assertTrue(firstInvocation1.equals(firstInvocation2));

        // Ensure that FirstInvocationVerification's equals method properly distinguishes different types
        assertFalse(firstInvocation1.equals(Mockito.times(1)));
    }
}
