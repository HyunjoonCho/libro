
import com.fasterxml.jackson.core.JsonGenerationException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonFactory;
import org.junit.Test;

import java.io.IOException;
import java.io.StringWriter;

import static org.junit.Assert.fail;

public class JsonSurrogateTest {

    @Test
    public void testSplitSurrogateIssue() {
        // Text designed to force the surrogate pair issue, adding 'x's to fill the buffer and trigger the error
        String problematicString = "xxxxx" + "ðŸ˜€"; // U+1F600 GRINNING FACE emoji

        JsonFactory jsonFactory = new JsonFactory();

        try (StringWriter writer = new StringWriter();
             JsonGenerator jsonGenerator = jsonFactory.createGenerator(writer)) {
             
            jsonGenerator.writeStartObject();
            jsonGenerator.writeFieldName("test");
            jsonGenerator.writeRawValue(problematicString);
            jsonGenerator.writeEndObject();
            jsonGenerator.close();
            
        } catch (JsonGenerationException e) {
            // This exception is expected due to the split surrogate issue
            System.out.println("Caught expected JsonGenerationException: " + e.getMessage());
            return;
        } catch (IOException e) {
            // Fail the test on unexpected IOException
            fail("Unexpected IOException: " + e.getMessage());
        }

        // Fail the test if no JsonGenerationException is caught
        fail("Expected JsonGenerationException due to split surrogate pair, but none was thrown.");
    }
}
