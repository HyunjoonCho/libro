public void testSingletonGetterPreventsUnusedClassRemoval() {
    // Setup the Compiler with ADVANCED_OPTIMIZATIONS
    Compiler compiler = new Compiler();
    CompilerOptions options = getTestOptions();
    
    String code = lines(
        "goog.provide('foo');",
        "var foo = function() { this.values = []; };",
        "goog.addSingletonGetter(foo);",
        "foo.prototype.add = function(value) {this.values.push(value)};"
    );

    // Parse and compile the source code
    Node root = compiler.parseTestCode(code);
    compiler.compile(ExternsUtils.EMPTY_EXTERNS, CompilerInput.fromInput(code), options);

    // Assert that compiled code is empty
    String compiledCode = compiler.toSource();
    assertEquals("", compiledCode.trim());
}

private CompilerOptions getTestOptions() {
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    WarningLevel.VERBOSE.setOptionsForWarningLevel(options);
    options.setPrettyPrint(true);
    return options;
}