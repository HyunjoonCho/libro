
import org.junit.Test;
import org.mozilla.javascript.*;

import static org.junit.Assert.*;

public class ClosureCompilerBugTest {

    @Test
    public void testDangerousUseOfGlobalThisWarning() {
        final String jsCode = "" +
                "/** @constructor */\n" +
                "function Foo() {\n" +
                "    this._bar = null;\n" +
                "};\n" +
                "\n" +
                "/** @this {Foo} */\n" +
                "function writeMethodWithAnnotation() {\n" +
                "    this._bar = 123; // no warning. ok\n" +
                "}\n" +
                "\n" +
                "/** @this {Foo} */\n" +
                "function readMethodWithAnnotation() {\n" +
                "    return this._bar; // no warning. ok\n" +
                "}\n" +
                "\n" +
                "function writeMethodWithoutAnnotation() {\n" +
                "    this._bar = 123; // warning. ok.\n" +
                "}\n" +
                "\n" +
                "function readMethodWithoutAnnotation() {\n" +
                "    return this._bar; // <- No warning!\n" +
                "}";

        // Following the process one might use with a JavaScript interpreter to check the warnings
        Context context = Context.enter();
        context.setOptimizationLevel(-1);

        // Prepare the script
        Scriptable scope = context.initStandardObjects();

        try {
            // Compile and execute the script
            context.compileString(jsCode, "test.js", 1, null).exec(context, scope);

            // We assume fail if no warnings can be captured or confirmed
            // In an actual compiler environment, you may have some code to evaluate compiler output

            // Assumption just to demonstrate no runtime exceptions parsing
            assertTrue(true);
        } finally {
            Context.exit();
        }
    }
}
