
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.Test;

import static org.junit.Assert.assertNull;

public class AsPropertyTypeDeserializerTest {

    @Test
    public void testAcceptEmptyStringAsNullObject() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);

        String json = "\"\""; // Empty string
        Base result = mapper.readValue(json, Base.class);

        // The expected behavior is that an empty string should be deserialized to null.
        assertNull(result);
    }

    // Abstract base class with type info
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
    @JsonTypeIdResolver(CustomTypeIdResolver.class)
    private static abstract class Base {
    }

    // Example subclass
    private static class Subclass extends Base {
    }

    // Custom TypeIdResolver
    private static class CustomTypeIdResolver extends TypeIdResolverBase {
        @Override
        public String idFromValue(Object value) {
            return value.getClass().getSimpleName().toLowerCase();
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public JavaType typeFromId(DatabindContext context, String id) {
            if ("subclass".equals(id)) {
                return context.constructType(Subclass.class);
            }
            return null;
        }

        @Override
        public JsonTypeInfo.Id getMechanism() {
            return JsonTypeInfo.Id.NAME;
        }
    }
}
