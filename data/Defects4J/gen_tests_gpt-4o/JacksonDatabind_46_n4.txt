
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.jupiter.api.Test;
import java.util.concurrent.atomic.AtomicReference;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class GenericSignatureTest {

    @Test
    public void testGenericSignatureGeneration() {
        ObjectMapper objectMapper = new ObjectMapper();
        TypeFactory typeFactory = objectMapper.getTypeFactory();
        
        // Create a JavaType for AtomicReference<String>
        JavaType atomicReferenceType = typeFactory.constructParametricType(AtomicReference.class, String.class);
        
        // Get the signature
        String signature = atomicReferenceType.getGenericSignature();
        
        // Expected signature
        String expectedSignature = "Ljava/util/concurrent/atomic/AtomicReference<Ljava/lang/String;>;";
        
        // Assert that the actual signature matches the expected one
        assertEquals(expectedSignature, signature, "The generic signature is incorrect.");
    }
}
