
import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class OpenMapRealVectorTest {

    @Test
    public void testEbeMultiplyWithNaN() {
        OpenMapRealVector vector1 = new OpenMapRealVector(3);
        vector1.setEntry(0, 1.0);
        vector1.setEntry(1, Double.NaN);
        vector1.setEntry(2, 3.0);

        OpenMapRealVector vector2 = new OpenMapRealVector(3);
        vector2.setEntry(0, 4.0);
        vector2.setEntry(1, 5.0);
        vector2.setEntry(2, Double.POSITIVE_INFINITY);

        RealVector result = vector1.ebeMultiply(vector2);

        assertEquals(4.0, result.getEntry(0), 1e-10); // Expecting 4.0
        assertEquals(Double.NaN, result.getEntry(1), 1e-10); // Expecting NaN
        assertEquals(Double.POSITIVE_INFINITY, result.getEntry(2), 1e-10); // Expecting Infinity
    }
    
    @Test
    public void testEbeDivideWithInfinity() {
        OpenMapRealVector vector1 = new OpenMapRealVector(3);
        vector1.setEntry(0, 4.0);
        vector1.setEntry(1, 5.0);
        vector1.setEntry(2, Double.NEGATIVE_INFINITY);

        OpenMapRealVector vector2 = new OpenMapRealVector(3);
        vector2.setEntry(0, 2.0);
        vector2.setEntry(1, Double.NaN);
        vector2.setEntry(2, 10.0);

        RealVector result = vector1.ebeDivide(vector2);

        assertEquals(2.0, result.getEntry(0), 1e-10); // Expecting 2.0
        assertEquals(Double.NaN, result.getEntry(1), 1e-10); // Expecting NaN
        assertEquals(Double.NEGATIVE_INFINITY, result.getEntry(2), 1e-10); // Expecting Negative Infinity
    }
}
