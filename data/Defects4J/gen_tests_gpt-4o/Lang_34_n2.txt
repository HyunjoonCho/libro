
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.junit.Test;

import java.lang.ref.WeakReference;

import static org.junit.Assert.assertNull;

public class ToStringStyleMemoryLeakTest {

    private static class Example {
        private final int id;
        private final String name;

        public Example(int id, String name) {
            this.id = id;
            this.name = name;
        }

        @Override
        public String toString() {
            return ToStringBuilder.reflectionToString(this, ToStringStyle.SHORT_PREFIX_STYLE);
        }
    }

    @Test
    public void testForMemoryLeak() throws InterruptedException {
        Example example = new Example(1, "example");
        String result = example.toString();

        // Force the Example object to be weakly reachable
        WeakReference<Example> exampleWeakReference = new WeakReference<>(example);
        example = null;
        result = null;

        // Trigger garbage collection
        System.gc();
        Thread.sleep(100);

        // Try to clear the reference and check if the Example instance can be garbage collected
        assertNull("Expected the Example object to be eligible for garbage collection", exampleWeakReference.get());
    }
}
