
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import org.junit.Test;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertFalse;

public class SVDTest {

    @Test
    public void testNaNSingularValue() {
        double[][] Alist = {
            {1.0, 2.0, 3.0},
            {2.0, 3.0, 4.0},
            {3.0, 5.0, 7.0}
        };
        
        Array2DRowRealMatrix A = new Array2DRowRealMatrix(Alist);
        SingularValueDecomposition decomp = new SingularValueDecomposition(A);
        double[] singularValues = decomp.getSingularValues();
        
        // Check the last singular value should be close to zero
        double expectedLastSingularValue = 0.0;
        
        // Asserting singular values not being NaN
        for(double value : singularValues) {
            assertFalse("Singular value is NaN", Double.isNaN(value));
        }
        
        // Optionally, you can also check if the expected last singular value is close to zero
        assertArrayEquals(
            new double[]{11.218599757513008, 0.3781791648535976, expectedLastSingularValue}, 
            singularValues, 
            1e-10
        );
    }
}
