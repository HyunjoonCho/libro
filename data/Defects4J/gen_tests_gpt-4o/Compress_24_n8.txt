
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;
import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertNotNull;

public class TarArchiveInputStreamTest {

    @Test
    public void testReadEntryWithLargeUserId() {
        // Prepare a tar header with a large user ID value
        byte[] header = new byte[512];

        // Placeholder values for test - they need configuring according to the tar file format.
        String name = "test.txt";
        String userId = "62410554"; // Large user ID that would cause the issue
        String magic = "ustar";

        System.arraycopy(name.getBytes(), 0, header, 0, name.length()); // File name
        System.arraycopy(userId.getBytes(), 0, header, 108, userId.length()); // User ID in octal
        System.arraycopy(magic.getBytes(), 0, header, 257, magic.length()); // Magic ustar indicator

        // Create a fake tar input stream
        ByteArrayInputStream bais = new ByteArrayInputStream(header);
        TarArchiveInputStream tarInputStream = new TarArchiveInputStream(bais);

        try {
            TarArchiveEntry entry = tarInputStream.getNextTarEntry();
            assertNotNull("Tar entry should not be null", entry);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
