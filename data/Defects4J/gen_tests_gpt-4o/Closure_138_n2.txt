
import static org.junit.Assert.*;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.List;

import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

public class ClosureCompilerTest {

    @Test
    public void testJSCDeterministicTestWarning() throws IOException {
        // JavaScript code that reproduces the issue
        String jsCode = 
            "var t = null;\n" +
            "window.test = function() {\n" +
            "    if (t != null) {\n" +
            "        t = null;\n" +
            "    }\n" +
            "    t = 1;\n" +
            "};";

        Compiler compiler = new Compiler();

        // Set output stream to capture compiler errors
        OutputStream os = new ByteArrayOutputStream();
        compiler.setErrorManager(new com.google.javascript.jscomp.BasicErrorManager() {
            @Override
            public void println(CheckLevel level, JSError error) {
                try {
                    os.write((error.toString() + "\n").getBytes());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }

            @Override
            protected void printSummary() {
                // no implementation needed for this test
            }
        });

        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Create source file from the JS code string
        SourceFile input = SourceFile.fromCode("test.js", jsCode);
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), List.of(input), options);

        // Check that the compilation result is a success but verify warnings
        assertTrue(result.success);

        String errorOutput = os.toString();
        assertTrue("Expected warning: JSC_DETERMINISTIC_TEST", 
                   errorOutput.contains("condition always evaluates to false"));
    }
}
