public void testIsFunctionCompilation() {
    // Original isFunction implementation using an object
    Object getType = new Object();
    Function<Object, Boolean> isFunctionOriginal = (functionToCheck) ->
            functionToCheck != null && getType.toString.apply(functionToCheck).equals("[object Function]");

    // Simulate the wrongly compiled version which would fail
    Function<Object, Boolean> isFunctionWrong = (a) ->
            a != null && "[object Function]".equals(((Object) null).toString.apply(a));

    // Correct isFunction implementation using an array
    Object getTypeCorrect = new Object[0];
    Function<Object, Boolean> isFunctionCorrect = (functionToCheck) ->
            functionToCheck != null && getTypeCorrect.toString.apply(functionToCheck).equals("[object Function]");

    String functionToString = new Object() {
        @Override
        public String toString() {
            return "[object Function]";
        }
    }.toString();

    assertTrue(isFunctionOriginal.apply(functionToString));
    assertFalse(isFunctionWrong.apply(functionToString));
    assertTrue(isFunctionCorrect.apply(functionToString));
}