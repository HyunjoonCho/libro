
import com.google.javascript.jscomp.*;
import junit.framework.TestCase;

public class ClosureCompilerTest extends TestCase {

    public void testIsFunctionCompilation() {
        // Original function using an object
        String originalFunction = "var isFunction = function(functionToCheck) { " +
                                  "var getType; " +
                                  "getType = {}; " +
                                  "return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]'; " +
                                  "};";

        // Function using an array as a workaround
        String workaroundFunction = "var isFunction = function(functionToCheck) { " +
                                    "var getType; " +
                                    "getType = []; " +
                                    "return functionToCheck && getType.toString.apply(functionToCheck) === '[object Function]'; " +
                                    "};";

        // Compile both versions using Google Closure Compiler
        String compiledOriginal = compileJavaScript(originalFunction);
        String compiledWorkaround = compileJavaScript(workaroundFunction);

        // Check if the original function was incorrectly compiled
        assertTrue("Original function should improperly compile",
                compiledOriginal.contains("(void 0).apply"));

        // Check that the workaround version does not have the same issue
        assertFalse("Workaround version should not improperly compile",
                compiledWorkaround.contains("(void 0).apply"));
    }
    
    private String compileJavaScript(String jsCode) {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", jsCode);
        
        Result result = compiler.compile(extern, input, options);
        return compiler.toSource();
    }
}
