
import static org.junit.Assert.*;
import org.junit.Test;
import java.util.HashSet;
import java.util.Set;

public class ElementTest {

    public class Element implements Cloneable {
        private Set<String> classNames;

        public Element() {
            this.classNames = new HashSet<>();
        }

        public void addClassName(String className) {
            this.classNames.add(className);
        }

        public Set<String> getClassNames() {
            return classNames;
        }

        @Override
        protected Object clone() throws CloneNotSupportedException {
            Element cloned = (Element) super.clone();
            cloned.classNames = new HashSet<>(this.classNames);
            return cloned;
        }
    }

    @Test
    public void testCloneShouldNotShareClassNamesSet() throws CloneNotSupportedException {
        Element original = new Element();
        original.addClassName("classA");
        Element cloned = (Element) original.clone();
        
        // Assert that the cloned element's classNames is a new instance
        assertNotSame("Class names set should not be the same instance", original.getClassNames(), cloned.getClassNames());

        // These assertions ensure behavior remains consistent
        assertTrue(cloned.getClassNames().contains("classA"));
        assertTrue(original.getClassNames().contains("classA"));
        
        // Now modify cloned and ensure it does not affect original
        cloned.addClassName("classB");
        assertFalse(original.getClassNames().contains("classB"));
        assertTrue(cloned.getClassNames().contains("classB"));
    }
}
