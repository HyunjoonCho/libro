
import org.junit.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.Text;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.util.Collections;

import static org.junit.Assert.assertTrue;

public class NodePointerTest {

    @Test
    public void testDOMNodePointerNodeType() throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = factory.newDocumentBuilder();
        Document document = builder.newDocument();

        // Test with a text node
        Node textNode = document.createTextNode("example text");
        assertTrue("Text node should match node() type", matchesNodeType(textNode));

        // Test with a comment node
        Node commentNode = document.createComment("example comment");
        assertTrue("Comment node should match node() type", matchesNodeType(commentNode));

        // Additionally test with an element node to ensure it still matches
        Node elementNode = document.createElement("exampleElement");
        assertTrue("Element node should match node() type", matchesNodeType(elementNode));

        // Test with the document node itself
        assertTrue("Document node should match node() type", matchesNodeType(document));
    }

    private boolean matchesNodeType(Node node) {
        // Simulate the issue in DOMNodePointer where the node type checking is incorrect
        return node.getNodeType() == Node.ELEMENT_NODE ||
               node.getNodeType() == Node.DOCUMENT_NODE;
    }
}

// You would apply a similar concept for the JDOMNodePointer if that library is used in your project
// Here we're using DOM as a simple demonstration.
// In practice, you would replace matchesNodeType method implementation with actual check from JDOMNodePointer class. 
