
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectReader;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.concurrent.atomic.AtomicReference;

class MyBean {
    private AtomicReference<AtomicReference<Integer>> refRef;

    public AtomicReference<AtomicReference<Integer>> getRefRef() {
        return refRef;
    }

    public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {
        this.refRef = refRef;
    }
}

public class DeserializeTest {
    
    @Test
    void deserializeNestedAtomicReference() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        ObjectReader objectReader = objectMapper.readerFor(MyBean.class);

        MyBean intRef = objectReader.readValue(" {\"refRef\": 2 } ");
        Assertions.assertNotNull(intRef.getRefRef(), "Expected non-null AtomicReference for refRef");
        Assertions.assertNotNull(intRef.getRefRef().get(), "Expected non-null AtomicReference inside refRef");
        Assertions.assertEquals(Integer.valueOf(2), intRef.getRefRef().get().get(), "Expected integer value 2");
        
        MyBean nullRef = objectReader.readValue(" {\"refRef\": null } ");
        Assertions.assertNotNull(nullRef.getRefRef(), "Expected non-null AtomicReference for refRef");
        Assertions.assertNotNull(nullRef.getRefRef().get(), "Expected non-null AtomicReference inside refRefâ€™s reference");
        Assertions.assertNull(nullRef.getRefRef().get().get(), "Expected null Integer value inside nested AtomicReference");
    }
}
