
import org.apache.commons.compress.compressors.CompressorException;
import org.apache.commons.compress.compressors.CompressorInputStream;
import org.apache.commons.compress.compressors.CompressorStreamFactory;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.DeflaterOutputStream;

import static org.junit.Assert.fail;

public class DeflateWithZlibHeaderTest {

    @Test
    public void testDeflateStreamWithZlibHeader() {
        String originalString = "This is a test string to compress";
        byte[] compressedDataWithZlibHeader = compressStringWithZlibHeader(originalString);

        ByteArrayInputStream inputStream = new ByteArrayInputStream(compressedDataWithZlibHeader);

        try {
            // Attempt to create a CompressorInputStream from the zlib deflated input stream
            CompressorInputStream compressorInputStream = 
                    new CompressorStreamFactory().createCompressorInputStream(inputStream);

            // If no exception is thrown, the test should fail
            fail("Expected CompressorException for stream with zlib header.");

        } catch (CompressorException e) {
            // Expected outcome, as the implementation currently does not handle zlib headers
            System.out.println("Expected exception caught: " + e.getMessage());
        } catch (IOException e) {
            // Handle the IOException if it occurs
            e.printStackTrace();
            fail("Unexpected IOException occurred.");
        }
    }

    private byte[] compressStringWithZlibHeader(String data) {
        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
             DeflaterOutputStream deflaterOutputStream = new DeflaterOutputStream(outputStream)) {
            deflaterOutputStream.write(data.getBytes());
            deflaterOutputStream.close();
            return outputStream.toByteArray();
        } catch (IOException e) {
            throw new RuntimeException("Error during compression", e);
        }
    }
}
