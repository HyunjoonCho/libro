
import com.google.javascript.jscomp.*;

public class CompilerCrashTest {

    public void testGoogProvideWithNonString() {
        // Create a JS code snippet that triggers the issue
        String jsCode = "goog.provide(mine.Spike);";

        // Initialize the compiler
        Compiler compiler = new Compiler();

        // Define compiler options
        CompilerOptions options = new CompilerOptions();
        // Set appropriate compiler options if needed
        // For example: options.setCheckTypes(true);

        // Use SourceFile.fromCode to emulate an input file
        SourceFile input = SourceFile.fromCode("file.js", jsCode);
        SourceFile externs = SourceFile.fromCode("externs.js", "var goog = {}; goog.provide = function(x) {};");

        // Compile with the provided source
        compiler.compile(externs, input, options);

        // Check if the compiler provided warnings or errors
        assertTrue("Expected an error but got none.", compiler.hasErrors());

        // Optionally, you can assert specific error messages
        // JSError[] errors = compiler.getErrors();
        // for (JSError error : errors) {
        //     System.out.println(error.description);
        // }
    }

    // A simple assert true function for demonstration purposes
    private void assertTrue(String message, boolean condition) {
        if (!condition) {
            throw new AssertionError(message);
        }
    }

    public static void main(String[] args) {
        CompilerCrashTest test = new CompilerCrashTest();
        test.testGoogProvideWithNonString();
        System.out.println("Test completed.");
    }
}
