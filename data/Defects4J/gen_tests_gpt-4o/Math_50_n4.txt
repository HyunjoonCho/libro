
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BaseUnivariateSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class SolverTest {

    @Test
    public void testRegulaFalsiSolverBug() {
        // Define the function f(x) = e^x - π^3
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        // Initialize Regula Falsi Solver
        BaseUnivariateSolver<UnivariateFunction> solver = new RegulaFalsiSolver();

        try {
            // Try to find the root within the interval [1, 10]
            solver.solve(100, f, 1, 10);
            // Fail if no exception is thrown
            throw new AssertionError("Expected MaxCountExceededException not thrown");
        } catch (Exception e) {
            // Ensure the exception is due to exceeding the maximal count
            assertEquals("Maximal count (100) exceeded: evaluations", e.getMessage());
        }
    }

    @Test
    public void testPegasusSolverComparison() {
        // Define the function f(x) = e^x - π^3
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        // Initialize Pegasus Solver
        BaseUnivariateSolver<UnivariateFunction> solver = new PegasusSolver();

        // Find the root within the interval [1, 10]
        double root = solver.solve(100, f, 1, 10);

        // Verify the root is within an acceptable margin of error
        double tolerance = 1e-6;
        assertEquals(3.0, root, tolerance);
    }
}
