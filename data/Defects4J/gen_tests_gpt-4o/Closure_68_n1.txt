
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import com.google.javascript.jscomp.CommandLineRunner;

public class CrypticErrorMessageTest {

    @Test
    public void testUnexpectedEndOfFileErrorMessage() {
        // Redirect standard error stream to capture compiler warnings
        ByteArrayOutputStream errContent = new ByteArrayOutputStream();
        System.setErr(new PrintStream(errContent));

        // JavaScript code with invalid @type function annotation
        String jsCode = "/**\n" +
                        " * @type function\n" +
                        " */\n" +
                        "var callback;";

        // Setup compiler to run with the provided JS code
        String[] args = {"--js", "test.js"};
        CommandLineRunner runner = new CommandLineRunner(args);
        runner.setExitCodeReceiver(exitCode -> {});
        runner.run();

        // Restore standard error stream
        System.setErr(System.err);

        // Assert that the error message is about the unexpected '@type function' usage
        String expectedWarningMessage = "JSC_PARSE_ERROR. Parse error. expected: '('";
        String actualContent = errContent.toString();

        // This is the main assertion to check if the error message is more descriptive
        assert(actualContent.contains(expectedWarningMessage)) :
            "Expected warning message not found: " + actualContent;
    }
}
