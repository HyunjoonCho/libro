kotlin
import com.fasterxml.jackson.annotation.JsonFormat
import com.fasterxml.jackson.core.JsonGenerator
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import org.junit.Assert.assertEquals
import org.junit.Test
import java.math.BigDecimal

data class Test(
    @JsonFormat(shape = JsonFormat.Shape.STRING)
    val value: BigDecimal
)

class BigDecimalSerializationTest {

    @Test
    fun testBigDecimalSerializationWithJsonFormat() {
        val mapper: ObjectMapper = jacksonObjectMapper()
            .configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true)

        val test = Test(BigDecimal("0.0000000005"))
        val jsonOutput = mapper.writeValueAsString(test)

        // Expecting the value to be serialized as a plain string
        val expectedJsonOutput = """{"value":"0.0000000005"}"""
        assertEquals(expectedJsonOutput, jsonOutput)
    }
}
