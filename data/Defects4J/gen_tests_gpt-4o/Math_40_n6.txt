
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class BracketingNthOrderBrentSolverTest {

    @Test
    public void testBracketingNthOrderBrentSolverAgingFeature() {
        // Define the function with an extremely small root near 0
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 12500.0) * (x - 12500.0);
            }
        };
        
        // Create the solver instance with a low iteration count to observe failure quickly
        BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(
                1e-15, 1e-12, 1000);

        // Try to solve the function within the interval which creates an unbalanced aging
        double min = 12500.0;
        double max = 12500.03;
        double initial = 12500.015;
        
        try {
            // This should not succeed in finding the root due to the described bug
            double root = solver.solve(100, function, min, max, initial);
            // Since the issue lies in an infinite loop, we consider it failed if it
            // successfully returns a root
            assertTrue("The solver should not have found a valid root", false);
        } catch (org.apache.commons.math3.exception.TooManyEvaluationsException e) {
            // The test is successful if the solver raises after too many evaluations
            assertTrue("Expected exception due to max evaluations", true);
        }
    }
}
