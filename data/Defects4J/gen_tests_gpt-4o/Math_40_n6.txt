public void testBracketingNthOrderBrentSolverAgingFailure() {
    UnivariateFunction function = new UnivariateFunction() {
        @Override
        public double value(double x) {
            if (x == 12500.0) {
                return 3.7e-16;
            } else if (x == 12500.03) {
                return -7.0e-5;
            }
            return Double.NaN; // For simplicity, only evaluate known points
        }
    };

    BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(1.0e-10, 1.0e-14, 5);
    try {
        solver.solve(100, function, 12500.0, 12500.03);
        fail("Expected MaxCountExceededException");
    } catch (MaxCountExceededException e) {
        // Expected behavior: the solver should exceed max iterations
    } catch (Exception e) {
        fail("Expected MaxCountExceededException but got " + e.getClass().getSimpleName());
    }
}