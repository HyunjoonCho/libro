
import org.apache.commons.math.analysis.UnivariateRealFunction;
import org.apache.commons.math.analysis.solver.BrentSolver;
import org.apache.commons.math.analysis.solver.UnivariateRealSolver;

public class BrentSolverTest {

    public static class TestFunction implements UnivariateRealFunction {
        @Override
        public double value(double x) {
            if (x == -100000.0) {
                return 0.0; // A root of the function
            } else {
                // Some arbitrary function you may want to check against.
                // In this case, it's a simple linear function for demonstration purposes.
                return -101945.04630982173;
            }
        }
    }

    @org.junit.Test
    public void testBrentSolverShouldReturnZeroRoot() {
        UnivariateRealSolver solver = new BrentSolver();
        UnivariateRealFunction function = new TestFunction();

        // In this scenario, passing x = -100000.0 should result in f(x) = 0,
        // which means solver should be able to identify the zero root here
        double min = -100000.0;
        double max = Double.MAX_VALUE; // 1.7976931348623157E308
        double expectedRoot = 0.0;

        double root = solver.solve(100, function, min, max);
        
        // If the deprecated message appears, then ensure you're using the correct library version.
        
        assertEquals(expectedRoot, function.value(root), 1e-6); // Allowing a small tolerance
    }
}
