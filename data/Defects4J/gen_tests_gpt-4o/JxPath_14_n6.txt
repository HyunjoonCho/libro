
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

public class XPathRoundingFunctionsTest {
    
    // Mock context object for XPath evaluation
    private Object context = null;
    
    @Test
    public void testRoundingNaNAndInfiniteValues() throws XPathExpressionException {
        assertXPathNaNValue(context, "floor('NaN')");
        assertXPathValue(context, "floor(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "floor(2 div 0)", Double.POSITIVE_INFINITY);

        assertXPathNaNValue(context, "ceiling('NaN')");
        assertXPathValue(context, "ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "ceiling(2 div 0)", Double.POSITIVE_INFINITY);

        assertXPathNaNValue(context, "round('NaN')");
        assertXPathValue(context, "round(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue(context, "round(2 div 0)", Double.POSITIVE_INFINITY);
    }
    
    private void assertXPathNaNValue(Object context, String expression) throws XPathExpressionException {
        XPath xpath = XPathFactory.newInstance().newXPath();
        Double result = (Double) xpath.evaluate(expression, context, XPathConstants.NUMBER);
        assertEquals(Double.NaN, result, 0.0);
    }

    private void assertXPathValue(Object context, String expression, double expected) throws XPathExpressionException {
        XPath xpath = XPathFactory.newInstance().newXPath();
        Double result = (Double) xpath.evaluate(expression, context, XPathConstants.NUMBER);
        assertEquals(expected, result, 0.0);
    }
}
