
import org.junit.Test;
import java.util.HashSet;
import java.util.Set;
import static org.junit.Assert.*;

public class ElementCloneTest {
    
    class Element implements Cloneable {
        private Set<String> classNames;

        public Element() {
            this.classNames = new HashSet<>();
        }

        public void addClassName(String className) {
            classNames.add(className);
        }

        @Override
        protected Object clone() {
            try {
                return super.clone();
            } catch (CloneNotSupportedException e) {
                throw new AssertionError(); // Should never happen
            }
        }

        public Set<String> getClassNames() {
            return classNames;
        }
    }

    @Test
    public void testCloneSharingClassNamesSet() {
        Element original = new Element();
        original.addClassName("test-class");

        // Clone the original element
        Element cloned = (Element) original.clone();

        // Modify the classNames set in the cloned instance
        cloned.addClassName("new-class");

        // Check if the original classNames set was unaffected
        assertFalse("Original element's classNames should not contain 'new-class'",
                original.getClassNames().contains("new-class"));
        
        // Ensure that cloned instance has both class names
        assertTrue("Cloned element's classNames should contain 'test-class'",
                cloned.getClassNames().contains("test-class"));
        assertTrue("Cloned element's classNames should contain 'new-class'",
                cloned.getClassNames().contains("new-class"));
    }
}
