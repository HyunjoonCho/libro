
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.MultiStartUnivariateOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomVectorGenerator;
import org.apache.commons.math3.random.UncorrelatedRandomVectorGenerator;
import org.apache.commons.math3.optim.univariate.MaxEval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class MultiStartUnivariateRealOptimizerTest {

    @Test
    public void testGetResultAndFunctionValue() {
        UnivariateFunction function = new UnivariateFunction() {
            public double value(double x) {
                return -(x - 2) * (x - 2) + 1; // maximum at x = 2
            }
        };

        BrentOptimizer brentOptimizer = new BrentOptimizer(1e-10, 1e-14);
        int maxEvaluations = 100;
        int starts = 10;
        RandomVectorGenerator rvGenerator = new UncorrelatedRandomVectorGenerator(1, new JDKRandomGenerator());

        MultiStartUnivariateOptimizer optimizer = new MultiStartUnivariateOptimizer(
                brentOptimizer, starts, rvGenerator);

        optimizer.optimize(new MaxEval(maxEvaluations),
                           new UnivariateObjectiveFunction(function),
                           new SearchInterval(0, 5));

        double expectedOptimalX = 2.0;
        double expectedOptimalValue = 1.0;

        // The test should pass if getResult() and getFunctionValue() return the best results
        // Expecting a failure due to the bug described in the report
        assertEquals(expectedOptimalX, optimizer.getResult(), 1e-10); 
        assertEquals(expectedOptimalValue, optimizer.getFunctionValue(), 1e-10);
    }
}
