
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DatasetUtilities;
import org.junit.Test;

public class DatasetUtilitiesTest {

    @Test
    public void testIterateRangeBounds_ValidData() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(1.0, "Row1", "Column1");
        dataset.addValue(2.0, "Row1", "Column2");
        dataset.addValue(3.0, "Row1", "Column3");

        Range range = DatasetUtilities.iterateRangeBounds(dataset);
        assertEquals(1.0, range.getLowerBound(), 0.0001);
        assertEquals(3.0, range.getUpperBound(), 0.0001);
    }

    @Test
    public void testIterateRangeBounds_EmptyDataset() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        Range range = DatasetUtilities.iterateRangeBounds(dataset);
        assertNull(range);
    }

    @Test
    public void testIterateRangeBounds_NullDataset() {
        CategoryDataset dataset = null;

        Range range = DatasetUtilities.iterateRangeBounds(dataset);
        assertNull(range);
    }

    @Test
    public void testIterateRangeBounds_WithMissingValues() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        dataset.addValue(null, "Row1", "Column1");
        dataset.addValue(5.0, "Row1", "Column2");
        dataset.addValue(null, "Row1", "Column3");

        Range range = DatasetUtilities.iterateRangeBounds(dataset);
        assertEquals(5.0, range.getLowerBound(), 0.0001);
        assertEquals(5.0, range.getUpperBound(), 0.0001);
    }
}
