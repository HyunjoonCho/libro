script
// Closure Compiler flags:
// --compilation_level=ADVANCED_OPTIMIZATIONS
// --jscomp_error=accessControls
// --jscomp_error=checkTypes
// --jscomp_error=checkVars
// --jscomp_error=uselessCode
// --jscomp_off=globalThis

var makeClass = function(protoMethods) {
 var clazz = function() {
   this.initialize.apply(this, arguments);
 }
 for (var i in protoMethods) {
   clazz.prototype[i] = protoMethods[i];
 }
 return clazz;
}

/** @constructor */
var Person = function(name){};
Person = makeClass(/** @lends Person.prototype */ {
  /** @this {Person} */
  initialize: function(name) {
    this.name = name;
  },

  /** @this {Person} */
  getName: function() { return this.name; },

  /**
   * @param {string} message
   * @this {Person}
   */
  say: function(message) {
    // Uncomment the line below to see error when not using setTimeout
    // window.console.log(this.getName(1) + ' says: ' + message);

    // This aliasing prevents error detection
    var self = this;
    setTimeout(function() {
      window.console.log(self.getName(1) + ' says: ' + message);
    }, 500);
  }
});

var joe = new Person('joe');
joe.say('hi');
var jane = new Person('jane');
jane.say('hello');
