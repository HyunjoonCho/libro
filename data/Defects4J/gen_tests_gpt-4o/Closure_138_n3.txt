
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testJscDeterministicWarning() {
        Compiler compiler = new Compiler();

        CompilerOptions options = new CompilerOptions();
        // Set the compilation level to ADVANCED_OPTIMIZATIONS
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Define input and output
        List<SourceFile> externs = new ArrayList<>();
        List<SourceFile> inputs = new ArrayList<>();
        inputs.add(SourceFile.fromCode("test.js", 
              "var t = null;\n" +
              "window.test = function() {\n" +
              "  if (t != null) {\n" +
              "    t = null;\n" +
              "  }\n" +
              "  t = 1;\n" +
              "};"));

        // Compile
        Result result = compiler.compile(externs, inputs, options);

        // Assert there is no JSC_DETERMINISTIC_TEST warning
        boolean hasDeterministicWarning = result.warnings.stream()
            .anyMatch(warning -> "JSC_DETERMINISTIC_TEST".equals(warning.getType().key));

        assertTrue("Expected no JSC_DETERMINISTIC_TEST warning, but it was found.", !hasDeterministicWarning);
    }
}
