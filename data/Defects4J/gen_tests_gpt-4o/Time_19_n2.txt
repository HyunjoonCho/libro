
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class DateTimeDSTTest {

    @Test
    public void testAmbiguousTimeDuringDST() {
        DateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID("Europe/London"));
        DateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID("Europe/Oslo"));
        DateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID("Europe/Helsinki"));
        
        // These should all represent the same moment in time
        assertEquals(britishDate.getMillis(), norwDate.getMillis() - norwDate.getZone().getOffset(norwDate));
        assertEquals(britishDate.getMillis(), finnishDate.getMillis() - finnishDate.getZone().getOffset(finnishDate));
        
        // Check the correct offsets based on expected correct results
        assertEquals("2011-10-30T01:59:00.000+01:00", britishDate.toString());
        assertEquals("2011-10-30T02:59:00.000+01:00", norwDate.toString());
        assertEquals("2011-10-30T03:59:00.000+02:00", finnishDate.toString());
    }
}
