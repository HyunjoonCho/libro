
import org.apache.commons.lang3.builder.ToStringBuilder;
import org.apache.commons.lang3.builder.ToStringStyle;
import org.junit.Test;

public class ToStringStyleMemoryLeakTest {

    @Test
    public void testThreadLocalMemoryLeakInToStringStyle() {
        // Simulate use of ToStringBuilder that would load ToStringStyle
        for (int i = 0; i < 1000; i++) {
            DummyObject dummy = new DummyObject("Name" + i, i);
            String result = ToStringBuilder.reflectionToString(dummy, ToStringStyle.DEFAULT_STYLE);
            
            // Ensure the result is not null to validate the operation
            assertNotNull(result);
        }

        // In a real environment, you would want to confirm the effect of the ThreadLocal causing memory leakage
        // when unloading and reloading applications. However, that requires specific container environment and monitoring.
    }

    private static class DummyObject {
        private final String name;
        private final int value;

        public DummyObject(String name, int value) {
            this.name = name;
            this.value = value;
        }
    }
}
