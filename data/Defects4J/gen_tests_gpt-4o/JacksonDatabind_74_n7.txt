
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.ClassNameIdResolver;
import com.fasterxml.jackson.databind.jsontype.TypeIdResolver;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertNull;

public class AsPropertyTypeDeserializerTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = "@class")
    public static abstract class BaseClass {}

    public static class SubClass extends BaseClass {
        public String value;
    }

    @Test
    public void testDeserializationWithEmptyString() throws Exception {
        // Create an ObjectMapper with the problematic feature enabled
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);

        String emptyJson = "\"\"";

        // Try to deserialize an empty string to a BaseClass object
        BaseClass result = mapper.readValue(emptyJson, BaseClass.class);

        // Verify that the result is null
        assertNull(result, "Deserialization of empty string should result in null object");
    }
}
