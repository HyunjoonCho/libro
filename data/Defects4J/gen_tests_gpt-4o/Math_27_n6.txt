
import org.apache.commons.math3.fraction.Fraction;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class FractionTest {

    @Test
    public void testPercentageValueOverflow() {
        // Create a fraction with a numerator that would cause overflow if multiplied directly by 100
        // Use a common denominator for simplicity, here we are assuming the Fraction constructor: `new Fraction(int numerator, int denominator)`
        int largeNumerator = Integer.MAX_VALUE / 50; // This should be safe when converted to double and multiplied by 100

        Fraction fraction = new Fraction(largeNumerator, Integer.MAX_VALUE);
        // We expect the double conversion to NOT overflow and provide a small percentage
        // Because the fraction is quite small, expect a result close to 2 (percent)
        double expectedPercentage = ((double)largeNumerator / Integer.MAX_VALUE) * 100;

        assertEquals(expectedPercentage, fraction.percentageValue(), 1e-10);
    }
}
