
import org.apache.commons.math3.analysis.MultivariateFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.BOBYQAOptimizer;
import org.junit.Test;

import static org.junit.Assert.assertNotNull;

public class BOBYQAOptimizerBugTest {

    @Test
    public void testInterpolationPointsGreaterThanThreshold() {
        int dim = 3; // Dimension of the problem
        int numberOfInterpolationPoints = 2 * dim + 2; // Greater than 2*dim+1

        // Define a simple quadratic function as the objective
        MultivariateFunction quadraticFunction = point -> {
            double sum = 0;
            for (int i = 0; i < point.length; i++) {
                sum += point[i] * point[i];
            }
            return sum;
        };

        // Initialize optimizer with a higher than normal interpolation points
        MultivariateOptimizer optimizer = new BOBYQAOptimizer(numberOfInterpolationPoints);

        // Define starting point
        double[] startPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            startPoint[i] = 1.0;
        }

        // Perform optimization
        PointValuePair result = optimizer.optimize(
                new MaxEval(1000),
                new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(quadraticFunction),
                GoalType.MINIMIZE,
                new org.apache.commons.math3.optim.InitialGuess(startPoint),
                SimpleBounds.unbounded(dim)
        );

        // Assert that some result is obtained (should fail with the bug)
        assertNotNull(result);
    }
}
