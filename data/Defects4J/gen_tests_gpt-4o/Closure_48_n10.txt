
import org.junit.Test;
import static org.junit.Assert.*;

import org.mozilla.javascript.Context;
import org.mozilla.javascript.Function;
import org.mozilla.javascript.Scriptable;
import org.mozilla.javascript.ScriptableObject;

public class TypeCheckingTest {

    @Test
    public void testTypeCheckingErrorWithFunctionStubbing() {
        Context ctx = Context.enter();
        try {
            Scriptable scope = ctx.initStandardObjects();

            // Define the JavaScript code
            String script =
                "/** @constructor */\n" +
                "var myclass = function() {\n" +
                "}\n" +
                "\n" +
                "/** @param {boolean} success */\n" +
                "myclass.prototype.fn = function(success) { }\n" +
                "\n" +
                "myclass.prototype.test = function() {\n" +
                "  this.fn();\n" + // This call should cause a type error due to missing parameter
                "  this.fn = function() { };\n" +
                "}\n" +
                "var instance = new myclass();\n" +
                "instance.test();";

            // Evaluate the script
            ctx.evaluateString(scope, script, "TestScript", 1, null);

            // Attempt to call `instance.fn()` directly and expect an error
            Function fn = (Function) scope.get("instance", scope);
            try {
                fn.call(ctx, scope, fn, new Object[]{});
                fail("Expected a type checking error due to missing parameter in fn() call");
            } catch (Exception e) {
                // Verify that the error is indeed due to missing parameter
                assertTrue(e.getMessage().contains("function success"));
            }
        } finally {
            Context.exit();
        }
    }
}
