
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class CustomSerializerTest {

    // POJO with @JsonValue annotation
    static class MyPojoWithJsonValue {
        private String value;

        public MyPojoWithJsonValue(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }
    }

    // Custom serializer for MyPojoWithJsonValue
    static class MyPojoSerializer extends JsonSerializer<MyPojoWithJsonValue> {
        @Override
        public void serialize(MyPojoWithJsonValue value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
            gen.writeString("custom-" + value.getValue());
        }
    }

    @Test
    public void testCustomSerializerWithJsonValueAnnotation() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.registerModule(new com.fasterxml.jackson.databind.module.SimpleModule()
                .addSerializer(MyPojoWithJsonValue.class, new MyPojoSerializer()));

        MyPojoWithJsonValue pojo = new MyPojoWithJsonValue("test");
        String jsonResult = objectMapper.writeValueAsString(pojo);

        // The expected result should be "custom-test" if the custom serializer is used
        assertEquals("\"custom-test\"", jsonResult); // This assertion will fail if the bug exists
    }
}
