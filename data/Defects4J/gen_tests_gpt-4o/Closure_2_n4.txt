
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;
import static org.junit.Assert.*;

public class CompilerCrashTest {

    @Test
    public void testMultipleExtendsWithInterface() {
        // JavaScript source with multiple @extends annotations
        String jsCode = ""
                + "/**\n"
                + " * @interface\n"
                + " * @extends {unknown_1}\n"
                + " * @extends {unknown_2}\n"
                + " */\n"
                + "function Foo() {}\n";

        // Instantiate the compiler
        Compiler compiler = new Compiler();
        
        // Set compiler options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        // Compile the source
        Result result = compiler.compile(
                SourceFile.fromCode("externs.js", ""), 
                SourceFile.fromCode("test.js", jsCode), 
                options
        );
        
        // Check if the result contains an exception message indicating NullPointerException
        assertFalse("Compiler should not crash", result.errors.stream()
                .anyMatch(error -> error.toString().contains("NullPointerException")));
    }
}
