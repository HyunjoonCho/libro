public void testClosureCompilerIsFunction() {
    // Original function using an object
    Function<Object, Boolean> isFunctionOriginal = functionToCheck -> {
        Object getType = new Object();
        return functionToCheck != null &&
                getType.toString().apply(functionToCheck).equals("[object Function]");
    };

    // Refactored function using an array
    Function<Object, Boolean> isFunctionRefactored = functionToCheck -> {
        Object getType = new Object[0];
        return functionToCheck != null && 
                getType.toString().apply(functionToCheck).equals("[object Function]");
    };

    // Test with a function to check if both implementations behave the same
    Function<Object, Boolean> dummyFunction = x -> true;
    
    // The original function should not work correctly after compilation
    assertFalse(isFunctionOriginal.apply(dummyFunction));
    
    // The refactored function should work correctly even after compilation
    assertTrue(isFunctionRefactored.apply(dummyFunction));
}