
import com.fasterxml.jackson.core.JsonPointer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.*;

public class JsonPointerTest {

    @Test
    public void testJsonPointerInvalidIndex() throws Exception {
        String json = "{ \"00\": \"value\", \"array\": [\"zero\", \"one\"] }";

        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode rootNode = objectMapper.readTree(json);

        // Create a JSON pointer that points to the property "00"
        JsonPointer pointerValid = JsonPointer.compile("/00");
        JsonNode nodeValid = rootNode.at(pointerValid);
        assertFalse(nodeValid.isMissingNode());
        assertEquals("value", nodeValid.asText());

        // Try to create a JSON pointer that incorrectly interprets "00" as an array index
        JsonPointer pointerInvalid = JsonPointer.compile("/array/00");
        JsonNode nodeInvalid = rootNode.at(pointerInvalid);

        // Ensure that array index "00" is not considered valid, should result in a missing node
        assertTrue(nodeInvalid.isMissingNode());
    }
}
