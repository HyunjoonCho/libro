
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import org.junit.Test;

import java.io.IOException;
import java.util.Map;
import java.util.UUID;

// Interface with the required method.
interface MyCustomIdInterface {
    UUID getId();
}

// The Foo class that implements this interface.
class Foo implements MyCustomIdInterface {
    private final UUID id;
    private final String property;

    @JsonCreator
    public Foo(@JsonProperty("id") UUID id, @JsonProperty("property") String property) {
        this.id = id;
        this.property = property;
    }

    @Override
    public UUID getId() {
        return id;
    }

    // Getters for the properties (if needed)
    public String getProperty() {
        return property;
    }
}

// Custom HashMap that processes the JSON objects.
class MyHashMap<K, V extends MyCustomIdInterface> extends java.util.HashMap<K, V> {
    // Custom logic can be added here. For simplicity, leaving it empty.
}

// Wrapper class for deserialization.
class Wrapper {
    
    @JsonDeserialize(as = MyHashMap.class)
    private Map<UUID, Foo> something;

    public Map<UUID, Foo> getSomething() {
        return something;
    }

    public void setSomething(Map<UUID, Foo> something) {
        this.something = something;
    }
}

public class JacksonDeserializationTest {

    @Test
    public void testDeserialization() throws IOException {
        String json = "{\"something\": [{\"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"property\": \"value\"}]}";
        
        ObjectMapper objectMapper = new ObjectMapper();
        Wrapper result = objectMapper.readValue(json, Wrapper.class);

        // Check if deserialization was successful and objects are created correctly.
        Map<UUID, Foo> map = result.getSomething();
        Foo foo = map.get(UUID.fromString("123e4567-e89b-12d3-a456-426614174000"));
        
        assertNotNull("Foo object should not be null", foo);
        assertEquals("Property value should be 'value'", "value", foo.getProperty());
    }
}
