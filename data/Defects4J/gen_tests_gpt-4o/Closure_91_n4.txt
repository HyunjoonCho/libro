
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class LendsAnnotationTest {

    @Test
    public void testLendsAnnotationHandling() {
        // @lends usage in JavaScript snippet
        String jsCode = ""
                + "/**\n"
                + " * @name MyClass\n"
                + " * @class\n"
                + " * @extends superClass1\n"
                + " * @extends superClass2\n"
                + " */\n"
                + "dojo.declare('MyClass', [superClass1, superClass2], /** @lends MyClass.prototype */ {\n"
                + "  foo: function() {\n"
                + "    // Implementation\n"
                + "  },\n"
                + "  bar: function() {\n"
                + "    // Implementation\n"
                + "  }\n"
                + "});";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        // Configure the compiler options as needed; for simplicity, using default options

        SourceFile externs = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("input.js", jsCode);

        // Compile the JS code
        Result result = compiler.compile(externs, input, options);

        // Assert no errors are generated specifically from the use of `@lends`
        for (JSError error : result.errors) {
            // You can adjust the condition to focus on messages related to 'this' or 'lends'
            if (error.description.contains("lends") || error.description.contains("this")) {
                System.err.println("Error related to @lends: " + error.description);
            }
        }

        assertEquals("Expected no errors regarding @lends annotation", 0, result.errors.length);
    }
}
