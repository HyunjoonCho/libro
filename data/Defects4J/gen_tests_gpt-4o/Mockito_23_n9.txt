
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.mockito.junit.MockitoJUnitRunner;

import static org.mockito.Mockito.when;

// The abstract class as mentioned in the bug report
abstract class AbstractClass {
    abstract protected Long lol();
    abstract protected String wow();
    public String give() {
        wow();
        lol();
        return "give";
    }
}

// Concrete class extending the abstract class
public class ClassExtendsAbstractClass extends AbstractClass {
    @Override
    protected Long lol() {
        return 2L;
    }
    @Override
    protected String wow() {
        return "WOW";
    }
}

// Class A that uses ClassExtendsAbstractClass
public class A {
    private ClassExtendsAbstractClass classExtendsAbstractClass;

    public A(ClassExtendsAbstractClass classExtendsAbstractClass) {
        this.classExtendsAbstractClass = classExtendsAbstractClass;
    }

    public String doSomeThing() {
        return classExtendsAbstractClass.wow();
    }
}

// Test class
@RunWith(MockitoJUnitRunner.class)
public class BugReproductionTest {

    @Mock
    private ClassExtendsAbstractClass classExtendsAbstractClass;

    @InjectMocks
    private A a;

    @Before
    public void setUp() {
        MockitoAnnotations.openMocks(this);
        // The error arises here because the method give() calls both wow() and lol()
        // But we're mocking the result incorrectly
        when(classExtendsAbstractClass.give()).thenReturn("aaa");
    }

    @Test
    public void testDoSomething() {
        // This will reproduce the error described in the bug report
        a.doSomeThing();
    }
}
