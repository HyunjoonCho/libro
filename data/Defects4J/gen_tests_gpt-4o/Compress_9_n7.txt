
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import static org.junit.Assert.assertTrue;

public class TarArchiveOutputStreamTest {

    @Test
    public void testTarArchiveOutputStreamBytesWritten() throws Exception {
        // Setup
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ArchiveOutputStream tarOut = new ArchiveStreamFactory().createArchiveOutputStream(ArchiveStreamFactory.TAR, byteArrayOutputStream);

        // Create a temporary file to simulate the input
        File tempFile = File.createTempFile("test", ".txt");
        tempFile.deleteOnExit();
        byte[] content = new byte[1024 * 100]; // 100 KB
        ByteArrayInputStream contentStream = new ByteArrayInputStream(content);

        TarArchiveEntry entry = new TarArchiveEntry(tempFile);
        entry.setSize(content.length);
        tarOut.putArchiveEntry(entry);
        
        // Read from the input file and write to the tar output
        byte[] buffer = new byte[8192];
        int bytesRead;
        while ((bytesRead = contentStream.read(buffer)) != -1) {
            tarOut.write(buffer, 0, bytesRead);
        }
        
        contentStream.close();
        tarOut.closeArchiveEntry();

        // Check the number of bytes written is non-zero, indicating an issue.
        long bytesWritten = ((TarArchiveOutputStream) tarOut).getBytesWritten();
        assertTrue("Number of bytes written should be greater than zero", bytesWritten > 0);

        // Cleanup
        tarOut.close();
    }
}
