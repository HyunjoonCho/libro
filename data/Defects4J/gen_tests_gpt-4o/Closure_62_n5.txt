public void testColumnIndicatingCaret() throws IOException {
    // Create a temporary JavaScript file with no line break after the semicolon
    Path jsFileNoLineBreak = Files.createTempFile("testNoLineBreak", ".js");
    Files.write(jsFileNoLineBreak, Collections.singletonList("alert(1;"));

    // Run the compiler jar on the file
    ProcessBuilder processBuilderNoLineBreak = new ProcessBuilder("java", "-jar", "compiler.jar", "--js", jsFileNoLineBreak.toString());
    Process processNoLineBreak = processBuilderNoLineBreak.start();
    String outputNoLineBreak = new String(processNoLineBreak.getInputStream().readAllBytes(), StandardCharsets.UTF_8);

    // Check if the caret symbol is not present in the output
    assertFalse(outputNoLineBreak.contains("^"));

    // Create a temporary JavaScript file with a line break after the semicolon
    Path jsFileWithLineBreak = Files.createTempFile("testWithLineBreak", ".js");
    Files.write(jsFileWithLineBreak, Arrays.asList("alert(1;", ""));

    // Run the compiler jar on the file
    ProcessBuilder processBuilderWithLineBreak = new ProcessBuilder("java", "-jar", "compiler.jar", "--js", jsFileWithLineBreak.toString());
    Process processWithLineBreak = processBuilderWithLineBreak.start();
    String outputWithLineBreak = new String(processWithLineBreak.getInputStream().readAllBytes(), StandardCharsets.UTF_8);

    // Check if the caret symbol is present in the output
    assertTrue(outputWithLineBreak.contains("^"));

    // Cleanup temporary files
    Files.deleteIfExists(jsFileNoLineBreak);
    Files.deleteIfExists(jsFileWithLineBreak);
}