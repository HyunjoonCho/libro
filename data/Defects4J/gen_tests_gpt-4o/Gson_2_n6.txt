public void testTypeHierarchyAdapterRuntimeCheck() {
    Gson gson = new GsonBuilder()
        .registerTypeHierarchyAdapter(Vehicle.class, new JsonDeserializer<Vehicle>() {
            @Override
            public Vehicle deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) 
                throws JsonParseException {
                // Simplified deserialization logic
                if ("truck".equals(json.getAsJsonObject().get("type").getAsString())) {
                    return new Truck();
                } else if ("car".equals(json.getAsJsonObject().get("type").getAsString())) {
                    return new Car();
                } else {
                    throw new JsonParseException("Unknown vehicle type");
                }
            }
        })
        .create();

    String carJson = "{\"type\":\"car\"}";
    String truckJson = "{\"type\":\"truck\"}";

    // Expect to deserialize successfully as Car
    Vehicle car = gson.fromJson(carJson, Car.class);
    assertTrue(car instanceof Car);

    try {
        // Expect a JsonParseException if incorrectly deserializing Truck JSON as Car
        gson.fromJson(truckJson, Car.class);
        fail("Expected JsonParseException for deserializing Truck JSON as Car");
    } catch (JsonParseException e) {
        // Success if exception is thrown
    }
}