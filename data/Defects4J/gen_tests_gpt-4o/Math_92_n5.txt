
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.math.BigInteger;

public class MathUtilsTest {

    public static long binomialCoefficient(int n, int k) {
        if (k == 0 || k == n)
            return 1;
        BigInteger result = BigInteger.ONE;
        for (int i = k + 1; i <= n; i++) {
            result = result.multiply(BigInteger.valueOf(i));
        }
        for (int i = 1; i <= n - k; i++) {
            result = result.divide(BigInteger.valueOf(i));
        }
        if (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {
            throw new ArithmeticException(
                "Binomial coefficient overflow: " + n + ", " + k);
        }
        return result.longValue();
    }

    @Test
    public void testBinomialCoefficientOverflow() {
        // Verify recursive property
        assertEquals(MathUtils.binomialCoefficient(65, 32) + MathUtils.binomialCoefficient(65, 33),
                     MathUtils.binomialCoefficient(66, 33));

        // Verify with externally calculated expected value
        assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66, 33));

        // Use BigInteger implementation to verify the result directly
        assertEquals(binomialCoefficient(66, 33), MathUtils.binomialCoefficient(66, 33));
    }
}
