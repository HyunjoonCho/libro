
import static org.junit.Assert.assertThat;
import static org.hamcrest.Matchers.greaterThan;

import org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.ModelFunction;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.ModelFunctionJacobian;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.Target;
import org.apache.commons.math3.optim.nonlinear.vector.jacobian.Weight;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testGetIterations() {
        // setup
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();

        // action
        optimizer.optimize(new MaxEval(100), new Target(new double[] { 1 }),
                new Weight(new double[] { 1 }), new InitialGuess(
                        new double[] { 3 }), new ModelFunction(
                        new MultivariateVectorFunction() {
                            @Override
                            public double[] value(double[] point)
                                    throws IllegalArgumentException {
                                return new double[] { FastMath.pow(point[0], 4) };
                            }
                        }), new ModelFunctionJacobian(
                        new MultivariateMatrixFunction() {
                            @Override
                            public double[][] value(double[] point)
                                    throws IllegalArgumentException {
                                return new double[][] { { 0.25 * FastMath.pow(
                                        point[0], 3) } };
                            }
                        }));

        // verify
        assertThat(optimizer.getEvaluations(), greaterThan(1));
        assertThat(optimizer.getIterations(), greaterThan(1));
    }
}
