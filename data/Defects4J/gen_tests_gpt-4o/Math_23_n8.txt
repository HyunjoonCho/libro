
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentOptimizerBugTest {

    @Test
    public void testBrentOptimizerReturnsBestPoint() {
        // Define a simple unimodal function where the maximum should be clear
        UnivariateObjectiveFunction objectiveFunction = new UnivariateObjectiveFunction(x -> -1 * (x - 2) * (x - 2));

        // Set up the optimizer
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Provide the search interval, and optimize
        UnivariatePointValuePair result = optimizer.optimize(
            org.apache.commons.math3.optim.MaxEval.unlimited(),
            objectiveFunction,
            new SearchInterval(1.0, 5.0),
            org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MAXIMIZE
        );

        // The maximum should be at x=2, as the function is symmetric and peaks there
        double expectedBestPoint = 2.0;
        
        assertEquals(expectedBestPoint, result.getPoint(), 1e-10);
    }
}
