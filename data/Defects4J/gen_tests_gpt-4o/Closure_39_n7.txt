public void testExternExportWithTypedef() {
    // Setup: Define the input JS code
    String sourceCode = 
        "/** @typedef {Object} */ let MyType;\n" +
        "/**\n" +
        " * @param {MyType=} param\n" +
        " */\n" +
        "function funcA(param) {}\n" +
        "/**\n" +
        " * @param {MyType} param\n" +
        " */\n" +
        "function funcB(param) {};\n"; 

    // Configure Closure Compiler with extern export 
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setExternExports(true);
    compiler.compile(ExternsUtils.DEFAULT_EXTERNS, SourceFile.fromCode("test", sourceCode), options);

    // Test: Validate extern export
    String externExport = compiler.toSource();
    String expectedOutput = 
        "/** @constructor @const */ var test = function() {};\n" +
        "/** @type {MyType|undefined} */ test.prototype.funcA;\n" +
        "/** @type {MyType} */ test.prototype.funcB;\n";
        
    assertEquals(expectedOutput.trim(), externExport.trim());
}