
import static org.junit.Assert.*;
import org.joda.time.Partial;
import org.joda.time.DateTimeFieldType;
import org.junit.Test;

public class PartialTest {

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidPartialConstructionWithArray() {
        new Partial(new DateTimeFieldType[] { DateTimeFieldType.clockhourOfDay(), 
                                              DateTimeFieldType.hourOfDay() }, 
                    new int[] { 1, 1 });
    }

    @Test
    public void testInvalidPartialConstructionWithWithMethod() {
        Partial partial = new Partial(DateTimeFieldType.clockhourOfDay(), 1)
            .with(DateTimeFieldType.hourOfDay(), 1);
        assertEquals(1, partial.get(DateTimeFieldType.clockhourOfDay()));
        assertEquals(1, partial.get(DateTimeFieldType.hourOfDay()));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testInvalidPartialComparisonDueToFieldMismatch() {
        Partial partial1 = new Partial(DateTimeFieldType.clockhourOfDay(), 1)
            .with(DateTimeFieldType.hourOfDay(), 1);
        Partial partial2 = new Partial(DateTimeFieldType.hourOfDay(), 1)
            .with(DateTimeFieldType.clockhourOfDay(), 1);

        partial1.isEqual(partial2);
    }
}
