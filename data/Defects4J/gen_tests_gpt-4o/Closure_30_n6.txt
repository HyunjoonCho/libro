script
function testHexStringGeneration() {
    function sgxFloor(value) {
        return Math.floor(value);
    }
    
    function sgxColorRGBA(r, g, b, a) {
        this.r = r;
        this.g = g;
        this.b = b;
        this.a = a;
    }
    
    sgxColorRGBA.prototype.asHex = function() {
        var hexString = ""; // Declare 'hexString' and 'str' with 'var'
        var str;
        
        str = (sgxFloor(this.r * 255)).toString(16);
        if (str.length < 2) { str = "0" + str; }
        hexString += str;

        str = (sgxFloor(this.g * 255)).toString(16);
        if (str.length < 2) { str = "0" + str; }
        hexString += str;

        str = (sgxFloor(this.b * 255)).toString(16);
        if (str.length < 2) { str = "0" + str; }
        hexString += str;

        str = (sgxFloor(this.a * 255)).toString(16);
        if (str.length < 2) { str = "0" + str; }
        hexString += str;

        return hexString;
    };

    // Create an instance of sgxColorRGBA and test the output
    var color = new sgxColorRGBA(1, 0, 0.5, 1); // RGBA of (255, 0, 127.5, 255) -> "ff007fff"
    var expectedOutput = "ff007fff";
    
    var result = color.asHex();
    console.assert(result === expectedOutput, `Expected: ${expectedOutput}, but got: ${result}`);
}

// Execute the test case
testHexStringGeneration();
