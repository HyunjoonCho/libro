public void testDefaultMockingDetails_ShouldGetExtraInterfaces() {
    Bar bar = mock(Bar.class, withSettings().extraInterfaces(List.class, Observer.class));
    MockingDetails details = mockingDetails(bar);
    assertTrue(details.getExtraInterfaces().contains(List.class));
    assertTrue(details.getExtraInterfaces().contains(Observer.class));
}

public void testNoJUnitDependenciesTest_ShouldNotDependOnJUnit() {
    try {
        Class<?> clazz = Class.forName("org.mockito.configuration.MockitoConfiguration");
        fail("Expected a NoClassDefFoundError, but none was thrown.");
    } catch (NoClassDefFoundError e) {
        assertTrue(e.getMessage().contains("org/mockito/configuration/MockitoConfiguration"));
    } catch (ClassNotFoundException e) {
        fail("Expected a NoClassDefFoundError, but a ClassNotFoundException was thrown.");
    }
}

public void testClassLoaders_ExcludingClassLoaderCannotLoadClassesWhenNoCorrectSourceUrlSet() {
    ClassLoader parent = Thread.currentThread().getContextClassLoader();
    URLClassLoader urlClassLoader = new URLClassLoader(new URL[]{}, parent);
    ClassLoader excludingLoader = new ClassLoaders.ExcludingClassLoader(urlClassLoader, "junit", "org.junit");

    assertThrows(ClassNotFoundException.class, () -> {
        excludingLoader.loadClass("org.mockito.internal.progress.TimesTest");
    });

    assertThrows(ClassNotFoundException.class, () -> {
        excludingLoader.loadClass("junit.framework.Assert");
    });
}