
import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.ParameterValidator;
import org.apache.commons.math3.linear.DiagonalMatrix;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testGetIterations() {
        // setup
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();

        // action
        LeastSquaresProblem problem = LeastSquaresFactory.create(
                new MultivariateVectorFunction() {
                    @Override
                    public double[] value(double[] point) throws IllegalArgumentException {
                        return new double[]{FastMath.pow(point[0], 4)};
                    }
                },
                new MultivariateMatrixFunction() {
                    @Override
                    public double[][] value(double[] point) throws IllegalArgumentException {
                        return new double[][]{{4 * FastMath.pow(point[0], 3)}};
                    }
                },
                new double[]{1}, // target
                new double[]{3}, // initial guess
                new DiagonalMatrix(new double[]{1}), // weights
                new ParameterValidator() {
                    @Override
                    public double[] validate(double[] point) {
                        return point; // no validation
                    }
                },
                100, // maximum evaluations
                100  // maximum iterations
        );

        optimizer.optimize(problem);

        // verify
        assertThat(optimizer.getEvaluations(), greaterThan(1));
        assertThat(optimizer.getIterations(), greaterThan(1));
    }
}
