
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

public class DiscreteDistributionTest {
    
    private static class Pair<T, U> {
        private final T first;
        private final U second;

        public Pair(T first, U second) {
            this.first = first;
            this.second = second;
        }

        public T getFirst() {
            return first;
        }

        public U getSecond() {
            return second;
        }
    }

    private static class DiscreteDistribution<T> {
        private final List<Pair<T, Double>> distribution;

        public DiscreteDistribution(List<Pair<T, Double>> distribution) {
            this.distribution = distribution;
        }

        @SuppressWarnings("unchecked")
        public T[] sample(int sampleSize) {
            // An error may occur here if the actual sampled type is different from the expected subclass type.
            T[] samples = (T[]) java.lang.reflect.Array.newInstance(distribution.get(0).getFirst().getClass(), sampleSize);
            for (int i = 0; i < sampleSize; i++) {
                samples[i] = distribution.get(1).getFirst(); // Intentionally return a different type (for example's sake)
            }
            return samples;
        }
    }

    @Test(expected = ArrayStoreException.class)
    public void testDiscreteDistributionSample() {
        List<Pair<Object, Double>> list = new ArrayList<>();
        list.add(new Pair<>(new Object() {}, 0.0)); // Anonymous subclass instance
        list.add(new Pair<>(new Object(), 1.0));   // Another object

        DiscreteDistribution<Object> distribution = new DiscreteDistribution<>(list);
        distribution.sample(1); // This line should throw ArrayStoreException
    }
}
