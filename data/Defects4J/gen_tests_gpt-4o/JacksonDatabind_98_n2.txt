
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.fail;

public class EnumPolymorphismTest {

    // Define an enum for the kind of invites
    public enum InviteType {
        CONTACT, OTHER
    }

    // Interface for polymorphism
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "kind")
    @JsonSubTypes({
        @JsonSubTypes.Type(value = ContactInvite.class, name = "CONTACT")
    })
    public interface Invite {
    }

    // Class for contact invites
    public static class ContactInvite implements Invite {
        public String name;

        public ContactInvite(String name) {
            this.name = name;
        }

        public ContactInvite() {
            // Default constructor needed by Jackson
        }
    }

    // POJO with external enum and invite property
    public static class InviteWrapper {
        public InviteType kind;
        public Invite to;
    }

    @Test
    public void testEnumPolymorphicDeserialization() {
        String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";
        ObjectMapper objectMapper = new ObjectMapper();

        try {
            InviteWrapper inviteWrapper = objectMapper.readValue(json, InviteWrapper.class);
            System.out.println("Deserialized InviteWrapper: " + inviteWrapper);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            fail("Exception occurred during deserialization: " + e.getMessage());
        }
    }
}
