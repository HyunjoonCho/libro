
import org.junit.Test;
import java.text.ParseException;

import static org.junit.Assert.*;

public class TypeHandlerTest {

    // Hypothetical TypeHandler class for demonstration
    public static class TypeHandler {
        public static Object createValue(String str, Class<?> clazz) throws ParseException {
            // Simulate the bug: if clazz is unsupported, return null instead of throwing ParseException
            if (!isSupportedClass(clazz)) {
                return null; // Bug: should throw ParseException
            }

            // Simulating normal behavior for supported classes
            if (clazz == Integer.class) {
                return Integer.valueOf(str);
            }
            // ... other supported classes

            throw new ParseException("Unsupported class type", 0); // Assume this is the intended behavior for unsupported classes
        }

        private static boolean isSupportedClass(Class<?> clazz) {
            // Simulating support check for few classes
            return clazz == Integer.class;
            // Add other supported classes if needed
        }
    }

    @Test(expected = ParseException.class)
    public void testUnsupportedClassThrowsParseException() throws ParseException {
        // Attempt to create a value for an unsupported class, e.g., String
        Class<?> unsupportedClass = String.class; // Assuming String is unsupported for this test
        TypeHandler.createValue("example", unsupportedClass);
    }
}
