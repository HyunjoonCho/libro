
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class EnumDeserializationTest {

    public enum TestEnum {
        VALUE_ONE("value1");

        private String valueInJson;

        TestEnum(String valueInJson) {
            this.valueInJson = valueInJson;
        }

        @JsonCreator
        public static TestEnum getEnumFromValue(String value) {
            for (TestEnum testEnum : values()) {
                if (testEnum.valueInJson.equals(value)) {
                    return testEnum;
                }
            }
            throw new IllegalArgumentException();
        }

        @JsonValue
        public String toJson() {
            return valueInJson;
        }
    }

    @Test
    public void testDeserializeEnumFromCustomValue() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();

        String json = "\"value1\"";
        TestEnum result = objectMapper.readValue(json, TestEnum.class);

        assertEquals(TestEnum.VALUE_ONE, result);
    }

    @Test
    public void testSerializeEnumToCustomValue() throws Exception {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.enable(SerializationFeature.WRITE_ENUMS_USING_TO_STRING);

        String json = objectMapper.writeValueAsString(TestEnum.VALUE_ONE);

        assertEquals("\"value1\"", json);
    }
}
