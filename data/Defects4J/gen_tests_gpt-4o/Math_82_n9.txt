
import org.apache.commons.math3.optim.linear.*;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.PointValuePair;
import org.junit.Test;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolver() {
        // Objective function: 7a + 3b
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{7, 3, 0, 0}, 0);

        // Constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.LEQ, 1));   // a <= 1
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.LEQ, 1));   // b <= 1
        constraints.add(new LinearConstraint(new double[]{3, 0, -5, 0}, Relationship.LEQ, 0));  // 3a - 5c <= 0
        constraints.add(new LinearConstraint(new double[]{2, 0, 0, -5}, Relationship.LEQ, 0));  // 2a - 5d <= 0
        constraints.add(new LinearConstraint(new double[]{0, 2, -5, 0}, Relationship.LEQ, 0));  // 2b - 5c <= 0
        constraints.add(new LinearConstraint(new double[]{0, 3, 0, -5}, Relationship.LEQ, 0));  // 3b - 5d <= 0
        constraints.add(new LinearConstraint(new double[]{3, 2, 0, 0}, Relationship.LEQ, 5));   // 3a + 2b <= 5
        constraints.add(new LinearConstraint(new double[]{2, 3, 0, 0}, Relationship.LEQ, 5));   // 2a + 3b <= 5

        // Create a SimplexSolver
        SimplexSolver solver = new SimplexSolver();

        // Solve the problem
        PointValuePair result = solver.optimize(objectiveFunction, new LinearConstraintSet(constraints), GoalType.MAXIMIZE);

        // Extract values
        double a = result.getPoint()[0];
        double b = result.getPoint()[1];
        double optimalValue = result.getValue();

        // Assert
        assertEquals(1.0, a, 1e-5);
        assertEquals(1.0, b, 1e-5);
        assertEquals(10.0, optimalValue, 1e-5);
    }
}
