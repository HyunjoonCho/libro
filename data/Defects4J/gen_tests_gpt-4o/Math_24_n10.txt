
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.MaxEval;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerBestPoint() {
        UnivariateFunction function = new Sin();
        BrentOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        
        // Using the interval to include both left and right sides for a proper comparison
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(100),
            new UnivariateObjectiveFunction(function),
            new SearchInterval(3, 4)  // Search in this interval
        );

        // Expected maximum point of sin(x) between 3 and 4 is at or near Ï€ (3.141592...)
        double expectedBestPoint = Math.PI;
        
        // Check if the optimizer returns the point very close to expectedBestPoint
        assertEquals(expectedBestPoint, result.getPoint(), 1e-5);
    }
}
