public void testConvenientSpyingOnAbstractClasses() {
    abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        public List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    FakeUserAccount fakeUserAccount = spy(FakeUserAccount.class);

    // Test adding email and checking if it's retrieved correctly
    fakeUserAccount.addEmail("test@example.com");
    assertEquals(1, fakeUserAccount.getEmails().size());
    assertTrue(fakeUserAccount.getEmails().contains("test@example.com"));
    
    // Test AccountService example with Mockito spy
    abstract class MockAccountService implements AccountService {
        @Override
        public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }

        abstract UserAccount getAccount(String id);
    }

    MockAccountService mockAccountService = spy(MockAccountService.class);
    UserAccount mockUserAccount = mock(UserAccount.class);
    doReturn(mockUserAccount).when(mockAccountService).getAccount("id");

    AsyncCallback<UserAccount> mockCallback = mock(AsyncCallback.class);
    mockAccountService.getAccount("id", mockCallback);
    verify(mockCallback).onSuccess(mockUserAccount);

    // Test AccountRpcService with Mockito spy
    abstract class MockAccountRpcService implements AccountRpcService {
        @Override
        public FutureAccount getAccount(RpcContext context, String id) {
            Objects.requireNonNull(context);
            return getAccount(id);
        }

        abstract FutureAccount getAccount(String id);
    }

    MockAccountRpcService mockAccountRpcService = spy(MockAccountRpcService.class);
    FutureAccount mockFutureAccount = mock(FutureAccount.class);
    doReturn(mockFutureAccount).when(mockAccountRpcService).getAccount("id");

    RpcContext mockContext = mock(RpcContext.class);
    FutureAccount result = mockAccountRpcService.getAccount(mockContext, "id");
    assertEquals(mockFutureAccount, result);
}