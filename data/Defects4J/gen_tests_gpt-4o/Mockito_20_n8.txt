
import static org.mockito.ArgumentMatchers.eq;
import static org.mockito.Mockito.*;

import org.junit.Test;
import org.mockito.Answers;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.util.ArrayList;
import java.util.List;

// Example 1: FakeUserAccount implementation
interface UserAccount {
    List<String> getEmails();
    void addEmail(String email);
}

abstract class FakeUserAccount implements UserAccount {
    private final List<String> emails = new ArrayList<>();

    @Override
    public void addEmail(String email) {
        emails.add(email);
    }

    @Override
    public List<String> getEmails() {
        return new ArrayList<>(emails);
    }
}

public class AbstractClassMockitoTest {

    @Mock(answer = Answers.CALLS_REAL_METHODS)
    FakeUserAccount fakeUserAccount;

    public AbstractClassMockitoTest() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testFakeUserAccount() {
        // Verify default behavior with real method calls
        fakeUserAccount.addEmail("user@example.com");
        fakeUserAccount.addEmail("admin@example.com");
        
        List<String> emails = fakeUserAccount.getEmails();

        // Validate the logic where the tested method correctly accumulates emails
        assertEquals(2, emails.size());
        assertTrue(emails.contains("user@example.com"));
        assertTrue(emails.contains("admin@example.com"));
    }
}
