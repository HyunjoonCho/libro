
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

public class DiscreteDistributionTest {

    class Pair<U, V> {
        private U first;
        private V second;

        public Pair(U first, V second) {
            this.first = first;
            this.second = second;
        }

        public U getFirst() {
            return first;
        }

        public V getSecond() {
            return second;
        }
    }

    class DiscreteDistribution<T> {
        private final List<Pair<T, Double>> list;

        public DiscreteDistribution(List<Pair<T, Double>> list) {
            this.list = list;
        }

        public T[] sample(int sampleSize) {
            // Simulated behavior based on Array.newInstance usage as described
            @SuppressWarnings("unchecked")
            T[] samples = (T[]) java.lang.reflect.Array.newInstance(list.get(0).getFirst().getClass(), sampleSize);
            // Simulating behavior where the sample could have a type mismatch
            samples[0] = list.get(1).getFirst(); // Assuming logic picks elements from list
            return samples;
        }
    }

    @Test(expected = ArrayStoreException.class)
    public void testSampleTypeMismatch() {
        List<Pair<Object, Double>> list = new ArrayList<>();
        list.add(new Pair<>(new Object() {}, 0.0));
        list.add(new Pair<>(new Object() {}, 1.0));
        DiscreteDistribution<Object> distribution = new DiscreteDistribution<>(list);
        distribution.sample(1);
    }
}
