
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

public class NestedListDeserializationTest {

    static class Definition {
        @JsonProperty("records")
        @JsonUnwrapped
        public List<Record> records = new ArrayList<>();
    }

    static class Record {
        @JsonProperty("fields")
        @JsonUnwrapped
        public List<Field> fields = new ArrayList<>();
    }

    static class Field {
        @JsonProperty("fieldName")
        public String fieldName;

        @JsonProperty("fieldValue")
        public String fieldValue;
    }

    @Test
    public void testNestedListDeserializationWithEmptyInnerList() throws Exception {
        String json = "{ \"records\": [ { \"fields\": [] }, { \"fields\": [ { \"fieldName\": \"name\", \"fieldValue\": \"value\" } ] } ] }";

        ObjectMapper objectMapper = new ObjectMapper();
        Definition definition = objectMapper.readValue(json, Definition.class);

        Assert.assertEquals(2, definition.records.size());
        Assert.assertEquals(0, definition.records.get(0).fields.size());
        Assert.assertEquals(1, definition.records.get(1).fields.size());
        Assert.assertEquals("name", definition.records.get(1).fields.get(0).fieldName);
        Assert.assertEquals("value", definition.records.get(1).fields.get(0).fieldValue);
    }
}
