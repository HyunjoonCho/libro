public void testPolymorphicTypeLostWithJsonValue() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);

    // Create an instance of the commandAPDU
    byte[] apduBytes = new byte[]{(byte) 0x81, (byte) 0xA9, (byte) 0x10}; 
    CommandAPDU commandAPDU = new CommandAPDU(apduBytes);

    // Serialize the object
    String json = mapper.writeValueAsString(commandAPDU);

    // Deserialize back to a CommandAPDU object
    CommandAPDU deserializedApdu = (CommandAPDU) mapper.readValue(json, CommandAPDU.class);

    // Verify that the deserialized object is correctly constructed via JsonCreator
    assertArrayEquals(apduBytes, deserializedApdu.getBytes());
}

static class CommandAPDU {
    private final byte[] apdu;

    @JsonCreator
    public CommandAPDU(@JsonProperty("bytes") byte[] apdu) {
        this.apdu = apdu.clone();
    }

    @JsonValue
    public byte[] getBytes() {
        return apdu.clone();
    }
}