
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;

public class PolymorphicTypeTest {

    static class CommandAPDU {
        /** @serial */
        private byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
            this.apdu = apdu.clone();
        }
        
        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }
    }
    
    @Test
    public void testPolymorphicTypeLostWithJsonValue() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();

        // Create an instance of CommandAPDU
        byte[] originalApdu = new byte[]{1, 2, 3, 4};
        CommandAPDU originalCommand = new CommandAPDU(originalApdu);

        // Serialize the CommandAPDU object
        String json = mapper.writeValueAsString(originalCommand);
        
        // Deserialize back to CommandAPDU object
        CommandAPDU deserializedCommand = (CommandAPDU) mapper.readValue(json, CommandAPDU.class);

        // Verify if the deserialized byte array is equal to original
        assertArrayEquals("The deserialized byte array should match the original", originalCommand.getBytes(), deserializedCommand.getBytes());
    }
}
