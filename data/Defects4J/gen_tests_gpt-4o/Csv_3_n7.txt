
import static org.junit.Assert.assertEquals;

public class EscapeCharacterTest {

    @Test
    public void testUnescapeHandlesUnrecognizedEscapes() {
        // Setup input with unrecognized escape sequence
        String input = "some\\xtext";

        // Apply unescape logic (simulated as unescapeImpl; replace with the actual method if available)
        String expectedOutput = "some\\xtext"; // Based on choosing to leave the escape char as is
        String actualOutput = unescapeImpl(input);

        // Verify that unrecognized escape sequences are unchanged
        assertEquals(expectedOutput, actualOutput);
    }

    private String unescapeImpl(String input) {
        StringBuilder result = new StringBuilder();
        boolean isEscaping = false;
        for (char ch : input.toCharArray()) {
            if (isEscaping) {
                // Only treat special escape characters accordingly
                if (" \\\"bfnrt".indexOf(ch) != -1) {
                    // Simulate special escape character handling (e.g., \n to newline)
                    result.append('\\').append(ch);
                } else {
                    // Leave unrecognized escapes as is with the backslash
                    result.append('\\').append(ch);
                }
                isEscaping = false;
            } else if (ch == '\\') {
                isEscaping = true;
            } else {
                result.append(ch);
            }
        }
        // Append any trailing backslash
        if (isEscaping) {
            result.append('\\');
        }
        return result.toString();
    }
}
