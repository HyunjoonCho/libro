
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.util.zip.GZIPInputStream;
import static org.junit.Assert.*;

public class TarUnpackTest {

    @Test(expected = IOException.class)
    public void testInvalidTarHeader() throws IOException {
        // Simulate a corrupted or malformed .tgz data
        byte[] corruptedData = new byte[] {
                0x1f, (byte) 0x8b, // GZIP magic number
                0x08, // compression method (deflate)
                0x00, // flags
                0x00, 0x00, 0x00, 0x00, // mtime
                0x00, // extra flags
                0x03, // OS (Unix)
                // Tar Header starts here with invalid data:
                '0', '5', '4', '1', '2', '\0', '1', '1'
        };

        // Using ByteArrayInputStream for the corrupted data
        try (TarArchiveInputStream tarIn = new TarArchiveInputStream(
                new GZIPInputStream(new ByteArrayInputStream(corruptedData)))) {

            // This should trigger IllegalArgumentException in TarUtils during parsing
            TarArchiveEntry entry = tarIn.getNextTarEntry();
        }
    }
}
