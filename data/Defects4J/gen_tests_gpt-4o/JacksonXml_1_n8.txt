
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import java.util.List;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

// POJO Definitions
class Field {
    // Add properties for Field if necessary
}

class Record {
    @JsonProperty("fields")
    private List<Field> fields;

    public List<Field> getFields() {
        return fields;
    }
}

class Definition {
    @JsonProperty("records")
    private List<Record> records;

    public List<Record> getRecords() {
        return records;
    }
}

public class DeserializationBugTest {

    @Test
    public void testNestedUnwrappedListsDeserialization() throws Exception {
        // JSON string with an empty "fields" list
        String json = "{\"records\":[{\"fields\":[]},{\"fields\":[]}]}";

        // ObjectMapper for JSON serialization/deserialization
        ObjectMapper objectMapper = new ObjectMapper();

        // Attempt to deserialize
        Definition definition = objectMapper.readValue(json, Definition.class);

        // Assertions
        assertNotNull("Definition should not be null", definition);
        assertNotNull("Records should not be null", definition.getRecords());
        assertTrue(
            "Records should contain two elements",
            definition.getRecords().size() == 2
        );
        assertTrue(
            "First record should have an empty fields list",
            definition.getRecords().get(0).getFields() != null && definition.getRecords().get(0).getFields().isEmpty()
        );
        assertTrue(
            "Second record should have an empty fields list",
            definition.getRecords().get(1).getFields() != null && definition.getRecords().get(1).getFields().isEmpty()
        );
    }
}
