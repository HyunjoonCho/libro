public void testNestedNonWrappedListDeserialization() {
    String json = "{\"records\":[{\"fields\":[]}, {\"fields\":[{\"name\":\"field1\"}]}]}";
    ObjectMapper mapper = new ObjectMapper();
    try {
        Definition definition = mapper.readValue(json, Definition.class);
        assertNotNull(definition.getRecords());
        assertEquals(2, definition.getRecords().size());
        assertNotNull(definition.getRecords().get(0).getFields());
        assertEquals(0, definition.getRecords().get(0).getFields().size());
        assertNotNull(definition.getRecords().get(1).getFields());
        assertEquals(1, definition.getRecords().get(1).getFields().size());
        assertEquals("field1", definition.getRecords().get(1).getFields().get(0).getName());
    } catch (IOException e) {
        fail("Deserialization threw an exception: " + e.getMessage());
    }
}

private static class Definition {
    private List<Record> records;

    public List<Record> getRecords() {
        return records;
    }

    public void setRecords(List<Record> records) {
        this.records = records;
    }
}

private static class Record {
    private List<Field> fields;

    public List<Field> getFields() {
        return fields;
    }

    public void setFields(List<Field> fields) {
        this.fields = fields;
    }
}

private static class Field {
    private String name;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}