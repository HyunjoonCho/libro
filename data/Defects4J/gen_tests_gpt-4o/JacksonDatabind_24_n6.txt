
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.text.SimpleDateFormat;

public class DateTimeSerializationTest {

    @Test
    public void testDateTimeSerializationWithConfiguredDateFormat() throws JsonProcessingException {
        String expectedOutputVersion254 = "\"1988-06-25 20:30:00\"";
        String expectedOutputVersion260 = "\"1988-06-25 21:30:00\""; // as per the default timezone

        // Get output from the custom method which creates ObjectMapper and serialize DateTime
        String serializedDateTime = createObjectMapper()
                .writeValueAsString(new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC));

        // Check the output based on the version of Jackson
        String testJacksonVersion = "Your Jackson Version Here"; // replace with "2.5.4" or "2.6.0" depending on the version you're testing
        if (testJacksonVersion.equals("2.5.4")) {
            assertEquals(expectedOutputVersion254, serializedDateTime);
        } else if (testJacksonVersion.equals("2.6.0")) {
            assertEquals(expectedOutputVersion260, serializedDateTime);
        }
    }

    private ObjectMapper createObjectMapper() {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(createJodaModule());
        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
        mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
        return mapper;
    }

    private SimpleModule createJodaModule() {
        SimpleModule module = new SimpleModule();
        module.addSerializer(DateTime.class, new DateTimeSerializer(
                new JacksonJodaDateFormat(DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss")
                        .withZoneUTC())));
        return module;
    }
}
