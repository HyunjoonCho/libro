
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class TarChecksumTest {

    @Test
    public void testRightAlignedChecksum() {
        // Creating a tar entry with a correct checksum but right aligned with zero padding
        byte[] header = createTarHeaderWithRightAlignedChecksum();

        try (TarArchiveInputStream tarInput = new TarArchiveInputStream(new ByteArrayInputStream(header))) {
            TarArchiveEntry entry = tarInput.getNextTarEntry();
            if (entry == null) {
                fail("Failed to read tar entry");
            }

            // Assuming the test data claims this should be valid
            assertEquals("Right aligned checksum should be accepted as valid.", "testfile", entry.getName());
        } catch (IOException e) {
            fail("IOException occurred: " + e.getMessage());
        }
    }

    private byte[] createTarHeaderWithRightAlignedChecksum() {
        byte[] header = new byte[512]; // Standard TAR header size

        String name = "testfile";
        System.arraycopy(name.getBytes(), 0, header, 0, name.length());

        // Simulate right-aligned checksum
        String checksum = "000549";
        System.arraycopy(checksum.getBytes(), 0, header, 148, checksum.length());

        // Null terminator for the checksum field
        header[156] = '\0';

        // Additional required fields can be set if necessary, for this test we simulate minimally

        return header;
    }
}
