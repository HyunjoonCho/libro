
import static org.junit.Assert.*;
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;
import org.junit.Test;

public class TypeErrorTest {

    @Test
    public void testWrongTypeReportedOnMissingProperty() {
        String jsCode = ""
            + "/**\n"
            + " * @constructor\n"
            + " */\n"
            + "function C2() {}\n"
            + "\n"
            + "/**\n"
            + " * @constructor\n"
            + " */\n"
            + "function C3(c2) {\n"
            + "  /**\n"
            + "   * @type {C2}\n"
            + "   * @private\n"
            + "   */\n"
            + "  this.c2_ = c2;\n"
            + "\n"
            + "  use(this.c2_.prop);\n"
            + "}\n";

        // Setting up a Compiler instance
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

        // Create a SourceFile instance for the input test code
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        SourceFile input = SourceFile.fromCode("test.js", jsCode);

        // Run the compiler
        compiler.initOptions(options);
        compiler.compile(extern, input, options);

        // Capture the warnings/errors
        JSError[] warnings = compiler.getWarnings();
        JSError[] errors = compiler.getErrors();

        // Check for exactly one warning and ensure it's about the incorrect property definition
        assertEquals(1, warnings.length);
        String expectedMessage = "Property prop never defined on C2";
        assertTrue(warnings[0].description.contains(expectedMessage));
        
        // Ensure there are no errors
        assertEquals(0, errors.length);
    }

}
