
import org.junit.Test;
import java.math.BigInteger;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class MathUtilsTest {

    @Test
    public void testBinomialCoefficientRecursiveProperty() {
        try {
            assertEquals(MathUtils.binomialCoefficient(65, 32) + MathUtils.binomialCoefficient(65, 33),
                    MathUtils.binomialCoefficient(66, 33));
        } catch (ArithmeticException e) {
            fail("ArithmeticException should not have been thrown");
        }
    }

    @Test
    public void testBinomialCoefficientExpectedValue() {
        try {
            assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66, 33));
        } catch (ArithmeticException e) {
            fail("ArithmeticException should not have been thrown");
        }
    }

    @Test
    public void testBinomialCoefficientNonrecursiveImplementation() {
        try {
            assertEquals(binomialCoefficient(66, 33), MathUtils.binomialCoefficient(66, 33));
        } catch (ArithmeticException e) {
            fail("ArithmeticException should not have been thrown");
        }
    }

    // Exact implementation using BigInteger and the explicit formula for binomial coefficients
    public static long binomialCoefficient(int n, int k) {
        if (k == 0 || k == n)
            return 1;
        BigInteger result = BigInteger.ONE;
        for (int i = k + 1; i <= n; i++) {
            result = result.multiply(BigInteger.valueOf(i));
        }
        for (int i = 1; i <= n - k; i++) {
            result = result.divide(BigInteger.valueOf(i));
        }
        if (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {
            throw new ArithmeticException("Binomial coefficient overflow: " + n + ", " + k);
        }
        return result.longValue();
    }
}
