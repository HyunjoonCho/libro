
import static org.junit.Assert.assertEquals;
import org.junit.Test;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.databind.ObjectMapper;

public class ObjectIdTypeIdTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = "@id")
    public static class Animal {
        public String name;

        public Animal() {}
        public Animal(String name) {
            this.name = name;
        }
    }
    
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.WRAPPER_OBJECT)
    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = "@id")
    public static class Zoo {
        public Animal animal;

        public Zoo() {}
        public Zoo(Animal animal) {
            this.animal = animal;
        }
    }

    @Test
    public void testObjectIdWithTypeId() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        
        Animal animal = new Animal("Lion");
        Zoo zoo = new Zoo(animal);
        
        // Serialize zoo with the animal
        String json = mapper.writeValueAsString(zoo);
        
        // Deserialize back
        Zoo result = mapper.readValue(json, Zoo.class);

        // Validate the object is same after round-trip
        assertEquals(zoo.animal.name, result.animal.name);
    }
}
