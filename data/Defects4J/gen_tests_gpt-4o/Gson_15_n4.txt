
import com.google.gson.stream.JsonWriter;
import java.io.StringWriter;
import org.junit.Test;

import static org.junit.Assert.fail;

public class JsonWriterTest {
    
    @Test
    public void testLenientModeWithNumberValue() {
        StringWriter stringWriter = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(stringWriter);
        jsonWriter.setLenient(true);
        
        try {
            jsonWriter.beginObject();
            jsonWriter.name("value").value((Number) Double.valueOf(Double.NaN));
            jsonWriter.endObject();
        } catch (Exception e) {
            fail("JsonWriter in lenient mode should allow Number NaN: " + e.getMessage());
        }
    }

    @Test
    public void testLenientModeWithDoubleValue() {
        StringWriter stringWriter = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(stringWriter);
        jsonWriter.setLenient(true);

        try {
            jsonWriter.beginObject();
            jsonWriter.name("value").value(Double.NaN);
            fail("JsonWriter in lenient mode should allow Double NaN");
        } catch (IllegalArgumentException expected) {
            // Expected exception: "Numeric values must be finite, but was NaN"
        } catch (Exception e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
