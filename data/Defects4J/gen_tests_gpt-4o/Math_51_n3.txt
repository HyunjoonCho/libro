
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;
import static org.junit.Assert.*;

public class SolverTest {

    @Test(expected = org.apache.commons.math3.exception.TooManyEvaluationsException.class)
    public void testRegulaFalsiSolverFailure() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new RegulaFalsiSolver();
        // This line is expected to throw an exception due to too many evaluations
        solver.solve(100, f, 1, 10);
    }

    @Test
    public void testPegasusSolverSuccess() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.exp(x) - Math.pow(Math.PI, 3.0);
            }
        };

        UnivariateSolver solver = new PegasusSolver();
        double root = solver.solve(100, f, 1, 10);
        // Check if the root is approximately the expected value
        assertEquals(3.0, root, 1e-5);
    }
}
