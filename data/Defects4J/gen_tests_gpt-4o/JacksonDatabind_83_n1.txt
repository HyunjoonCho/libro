
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.fail;

public class UUIDDeserializerTest {

    @Test
    public void itShouldRespectDeserializationProblemHandlerForUUID() {
        ObjectMapper mapper = new ObjectMapper().addHandler(new DeserializationProblemHandler() {
            @Override
            public Object handleWeirdStringValue(final DeserializationContext ctxt, final Class<?> targetType, final String valueToConvert, final String failureMsg) throws IOException {
                if (UUID.class.isAssignableFrom(targetType)) {
                    // Custom handling logic: ignoring this UUID parsing issue
                    return null;
                }
                return super.handleWeirdStringValue(ctxt, targetType, valueToConvert, failureMsg);
            }
        });

        try {
            IdBean result = mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
            // Expecting the handler to catch the issue and set 'id' to null without exception
            if (result.getId() != null) {
                fail("Expected 'id' field to be null due to invalid UUID value");
            }
        } catch (InvalidFormatException e) {
            fail("DeserializationProblemHandler was not respected for UUID, exception should not have been thrown: " + e.getMessage());
        } catch (IOException e) {
            fail("Unexpected IOException: " + e.getMessage());
        }
    }

    public static class IdBean {
        private UUID id;

        public UUID getId() {
            return id;
        }

        public void setId(final UUID id) {
            this.id = id;
        }
    }
}
