
import static org.junit.Assert.assertThrows;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

public class IncompleteFunctionDefinitionTest {

    @Test
    public void testIncompleteFunctionDefinitionCrashesCompiler() {
        // Set up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Enable IDE mode to simulate the environment that causes the error
        options.setIdeMode(true);

        // Source code that triggers the bug
        String code = "f f f ;\nfunction t";

        // Attempt to compile the problematic code and expect a crash
        RuntimeException thrown = assertThrows(
            RuntimeException.class,
            () -> compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", code), options)
        );

        // Optional: Verify the error message or the cause to ensure we're catching the right issue
        // assertTrue(thrown.getMessage().contains("INTERNAL COMPILER ERROR"));
    }
}
