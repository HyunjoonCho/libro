public void testCMAESOptimizerEnforcesBounds() {
    CMAESOptimizer optimizer = new CMAESOptimizer(
        10000, // max iterations
        -1,    // no forced value for the stopping criteria
        true,  // isActiveCMA
        0,     // checkFeasableCount set to default (zero)
        5,     // number of restarts
        RandomVectorGenerator.DEFAULT,
        false // no need to generate statistics
    );

    double[] startPoint = {0.5, 0.5};
    double[] lowerBound = {0.0, 0.0};
    double[] upperBound = {1.0, 1.0};
    
    MultivariateFunction fitnessFunction = new MultivariateFunction() {
        public double value(double[] point) {
            return point[0] * point[0] + point[1] * point[1];
        }
    };

    PointValuePair result = optimizer.optimize(new MaxEval(10000),
                                               new ObjectiveFunction(fitnessFunction),
                                               GoalType.MINIMIZE,
                                               new InitialGuess(startPoint),
                                               new SimpleBounds(lowerBound, upperBound));
    
    double[] optimizedPoint = result.getPoint();

    for (int i = 0; i < optimizedPoint.length; i++) {
        assertTrue("Optimized point exceeds the bounds", 
                   optimizedPoint[i] >= lowerBound[i] && optimizedPoint[i] <= upperBound[i]);
    }
}