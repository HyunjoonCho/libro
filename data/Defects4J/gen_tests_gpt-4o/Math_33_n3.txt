
import org.apache.commons.math3.linear.RealVector;
import org.apache.commons.math3.linear.ArrayRealVector;
import org.apache.commons.math3.optim.linear.*;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.Collection;

public class SimplexSolverTest {

    @Test
    public void testSimplexSolverOptimization() {
        // Define the coefficients of the objective function (maximize 3x + 5y)
        LinearObjectiveFunction objectiveFunction = new LinearObjectiveFunction(new double[]{3, 5}, 0);

        // Define the constraints
        Collection<LinearConstraint> constraints = new ArrayList<>();
        constraints.add(new LinearConstraint(new double[]{2, 1}, Relationship.LEQ, 14));  // 2x + y <= 14
        constraints.add(new LinearConstraint(new double[]{4, 3}, Relationship.LEQ, 28));  // 4x + 3y <= 28
        constraints.add(new LinearConstraint(new double[]{1, 2}, Relationship.LEQ, 14));  // x + 2y <= 14

        // Use SimplexSolver to optimize
        SimplexSolver simplexSolver = new SimplexSolver();
        PointValuePair solution = simplexSolver.optimize(
                new LinearConstraintSet(constraints),
                objectiveFunction,
                GoalType.MAXIMIZE,
                new NonNegativeConstraint(true)
        );

        // Expected result: maximize 3x + 5y under given constraints
        RealVector expectedSolution = new ArrayRealVector(new double[]{4, 5}); // Example expected result

        // Compare the result with the expected result
        assertEquals(expectedSolution.getEntry(0), solution.getPoint()[0], 1e-5);
        assertEquals(expectedSolution.getEntry(1), solution.getPoint()[1], 1e-5);
    }
}
