
import static org.junit.Assert.assertEquals;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.junit.Test;
import org.w3c.dom.Document;
import org.xml.sax.InputSource;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.StringReader;

public class CoreRoundingFunctionsTest {

    private Object evaluateXPath(String expression, Object context) throws XPathExpressionException {
        XPathFactory xPathFactory = XPathFactory.newInstance();
        XPathExpression xPathExpression = xPathFactory.newXPath().compile(expression);
        return xPathExpression.evaluate(context, XPathConstants.NUMBER);
    }

    private void assertXPathValue(Object context, String expression, Double expectedValue) throws XPathExpressionException {
        Double result = (Double) evaluateXPath(expression, context);
        assertEquals(expectedValue, result, 0.0);
    }

    @Test
    public void testCoreRoundingFunctions() throws Exception {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        Document context = dbf.newDocumentBuilder().parse(new InputSource(new StringReader("<dummy/>")));

        // Testing floor function
        assertXPathValue(context, "floor('NaN')", Double.NaN);  
        assertXPathValue(context, "floor(-2 div 0)", Double.NEGATIVE_INFINITY);  
        assertXPathValue(context, "floor(2 div 0)", Double.POSITIVE_INFINITY);

        // Testing ceiling function
        assertXPathValue(context, "ceiling('NaN')", Double.NaN);  
        assertXPathValue(context, "ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);  
        assertXPathValue(context, "ceiling(2 div 0)", Double.POSITIVE_INFINITY);

        // Testing round function
        assertXPathValue(context, "round('NaN')", Double.NaN);  
        assertXPathValue(context, "round(-2 div 0)", Double.NEGATIVE_INFINITY);  
        assertXPathValue(context, "round(2 div 0)", Double.POSITIVE_INFINITY);
    }
}
