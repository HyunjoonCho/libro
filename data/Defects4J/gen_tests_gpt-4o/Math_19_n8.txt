
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.SimpleBounds;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapter;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.PopulationSize;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.junit.Test;

import static org.junit.Assert.assertFalse;

public class CMAESOptimizerTest {

    @Test
    public void testCMAESOptimizerWithWideBounds() {
        // Define an example fitness function that just checks for NaN values
        MultivariateFunctionMappingAdapter fitnessFunction = new MultivariateFunctionMappingAdapter(
            point -> {
                for (double param : point) {
                    // Fails the test if any parameter is NaN
                    assertFalse("Parameter is NaN", Double.isNaN(param));
                }
                return 0.0; // Dummy return value for fitness, since we only care about NaN check
            },
            new double[]{-Double.MAX_VALUE, -Double.MAX_VALUE},
            new double[]{Double.MAX_VALUE, Double.MAX_VALUE}
        );

        RandomGenerator randomGenerator = new Well1024a();

        CMAESOptimizer optimizer = new CMAESOptimizer(10000, 1e-5, true, 10, 0, randomGenerator, false, null);

        // Run optimization
        optimizer.optimize(
            new MaxEval(1000),
            CMAESOptimizer.Sigma(1),
            new PopulationSize(5),
            new InitialGuess(new double[]{0, 0}),
            GoalType.MINIMIZE,
            SimpleBounds.unbounded(2),
            fitnessFunction
        );
    }
}
