
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.Test;

import java.io.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class ZipFileCorruptionTest {

    @Test
    public void testZipCorruption() {
        String[] fileNames = generateFileNamesWithHashCollisions();
        
        File zipFile = new File("test.zip");
        try (FileOutputStream fos = new FileOutputStream(zipFile);
             ZipArchiveOutputStream zos = new ZipArchiveOutputStream(fos)) {

            for (String fileName : fileNames) {
                ZipArchiveEntry entry = new ZipArchiveEntry(fileName);
                zos.putArchiveEntry(entry);
                zos.write(fileName.getBytes());
                zos.closeArchiveEntry();
            }
            
        } catch (IOException e) {
            fail("Unexpected IO exception during zip creation: " + e.getMessage());
        }

        // Validate zip integrity
        try (FileInputStream fis = new FileInputStream(zipFile);
             ZipInputStream zis = new ZipInputStream(fis)) {

            ZipEntry entry;
            int entryCount = 0;
            while ((entry = zis.getNextEntry()) != null) {
                entryCount++;
            }

            // Assert we have the correct number of entries
            assertEquals("Zip should contain all entries", fileNames.length, entryCount);

        } catch (IOException e) {
            fail("Unexpected IO exception during zip reading: " + e.getMessage());
        } finally {
            zipFile.delete();
        }
    }

    private String[] generateFileNamesWithHashCollisions() {
        // Create filenames with controlled hash collisions
        return new String[] {
            "file0001.txt",
            "file0002.txt",
            // Add more as necessary to increase collision probability
            "file1023.txt",
            "file2047.txt"
        };
    }
}
