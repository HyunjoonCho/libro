public void testBadTypeInferenceForNotEqualsUndefined() {
    String jsCode = ""
        + "/** @param {undefined} x */"
        + "function f(x) {"
        + "  if (x != undefined) { g(x); }"
        + "}"
        + "/** @param {string} x */"
        + "function g(x) {}";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
    compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("test.js", jsCode), options);
    
    assertNotNull(compiler.getErrors());
    assertFalse(compiler.getErrors().length == 0);

    boolean typeMismatchFound = false;
    for (JSError error : compiler.getErrors()) {
        if ("JSC_TYPE_MISMATCH".equals(error.getType().key)) {
            typeMismatchFound = true;
            break;
        }
    }
    
    assertTrue("Expected type mismatch warning not found", typeMismatchFound);
}