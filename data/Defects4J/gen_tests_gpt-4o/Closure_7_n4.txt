public void testBadTypeInferenceWithGoogIsFunction() {
    // This test will use a mock variant of goog to induce the failure.
    Object mockObject = "test"; // Ensures string handling
    boolean result = test.isMatched(mockObject);
    assertFalse(result);
    
    Function<Object, Boolean> mockIsDef = (obj) -> obj != null;
    Function<Object, Boolean> mockIsFunction = (obj) -> obj instanceof Runnable;
    Function<Object, Boolean> mockIsBoolean = (obj) -> obj instanceof Boolean;
    Function<Object, Boolean> mockIsString = (obj) -> obj instanceof String;
    Function<Object, Boolean> mockIsArray = (obj) -> obj instanceof Object[];

    test.isMatched = (object) -> {
        if (mockIsDef.apply(object)) {
            if (mockIsFunction.apply(object)) {
                return false;
            } else if (mockIsBoolean.apply(object)) {
                return false;
            } else if (mockIsString.apply(object)) {
                return false;
            } else if (mockIsArray.apply(object)) {
                int i = ((Object[]) object).length;
                return true;
            }
        }
        return false;
    };
    
    Object[] mockArrayObject = new Object[10];
    boolean returnValueForArray = test.isMatched(mockArrayObject);
    assertTrue(returnValueForArray);
}