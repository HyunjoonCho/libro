
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testAdvancedModeWarning() {
        Compiler compiler = new Compiler();

        CompilerOptions options = new CompilerOptions();
        
        // Set the compilation level to ADVANCED_OPTIMIZATIONS
        options.setAdvancedOptimizations(true);

        // JS source code: simulate the described situation in the bug
        String code = "goog.provide('Foo');" +
                "goog.provide('Bar');" +
                "/** @constructor */ Foo = function() {};" +
                "/** @param {number} a @param {number} b @return {number} */ Foo.prototype.add = function(a, b) { return a + b; };" +
                "/** @param {number} a @param {number} b @return {number} */ Foo.prototype.sub = goog.abstractMethod;" +
                "/** @constructor @extends {Foo} */ Bar = function() { goog.base(this); };" +
                "goog.inherits(Bar, Foo);" +
                "/** @inheritDoc */ Bar.prototype.add = function(one) { return one; };" +
                "/** @inheritDoc */ Bar.prototype.sub = function(one) { return one; };";

        // External inputs could be needed depending on your setup
        JSSourceFile extern = JSSourceFile.fromCode("externs.js", "");

        // Add the source code to be compiled
        JSSourceFile input = JSSourceFile.fromCode("testCode.js", code);

        // Compile the JS code
        Result result = compiler.compile(extern, input, options);

        // Assert that there are warnings (expected behavior)
        assertTrue(result.warnings.length > 0);
    }
}
