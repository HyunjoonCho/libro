
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.JsonMappingException;
import org.junit.Test;
import static org.junit.Assert.*;

public class TreeTraversingParserBoundsTest {

    public static class IntClass {
        public int x;

        @Override
        public String toString() {
            return String.valueOf(x);
        }
    }

    ObjectMapper mapper = new ObjectMapper();

    @Test
    public void testIntBoundsFromTree() throws JsonProcessingException {
        testIntBounds("{\"x\": 1e10}", 2147483647);
        testIntBounds("{\"x\": 2147483648}", -2147483648);
        testIntBounds("{\"x\": -2147483649}", 2147483647);
    }

    private void testIntBounds(String json, int expected) {
        try {
            JsonNode tree = mapper.readTree(json);
            int actual = mapper.readerFor(IntClass.class).readValue(tree).x;
            assertEquals("Mismatch between tree parsing and string parsing", expected, actual);
        } catch (JsonProcessingException e) {
            fail("Expected integer overflow, but got an exception instead: " + e.getMessage());
        }

        // Now parse the same JSON as a string to validate different behavior
        try {
            mapper.readerFor(IntClass.class).readValue(json);
            fail("Expected JsonMappingException due to overflow");
        } catch (JsonMappingException e) {
            // Expected behavior for overflow
        } catch (IOException e) {
            fail("Unexpected exception: " + e.getMessage());
        }
    }
}
