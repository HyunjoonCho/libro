
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.TokenBuffer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class TokenBufferDeserializationTest {

    static class Value {
        final TokenBuffer buffer;

        @JsonCreator
        public static Value from(TokenBuffer buffer) {
            return new Value(buffer);
        }

        private Value(TokenBuffer buffer) {
            this.buffer = buffer;
        }
    }

    @Test
    public void testCorrectTokenBufferDeserialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Register a custom deserializer for the Value class
        SimpleModule module = new SimpleModule();
        module.addDeserializer(Value.class, (parser, ctxt) -> {
            TokenBuffer buffer = new TokenBuffer(parser);
            buffer.copyCurrentStructure(parser);
            return Value.from(buffer);
        });
        mapper.registerModule(module);

        // The JSON string we are testing with
        String json = "{ \"a\":1, \"b\":null }";

        // Deserialize the JSON string into a Value object
        Value value = mapper.readValue(json, Value.class);
        TokenBuffer buffer = value.buffer;

        try (JsonParser tokenParser = buffer.asParser()) {
            // Validate that the tokens in the buffer match the expectation
            assertTrue(tokenParser.nextToken() == JsonToken.START_OBJECT, "Expected START_OBJECT token");
            assertTrue(tokenParser.nextToken() == JsonToken.FIELD_NAME && "a".equals(tokenParser.getCurrentName()), "Expected field 'a'");
            assertTrue(tokenParser.nextToken() == JsonToken.VALUE_NUMBER_INT && tokenParser.getIntValue() == 1, "Expected value 1 for 'a'");
            assertTrue(tokenParser.nextToken() == JsonToken.FIELD_NAME && "b".equals(tokenParser.getCurrentName()), "Expected field 'b'");
            assertTrue(tokenParser.nextToken() == JsonToken.VALUE_NULL, "Expected null value for 'b'");
            assertTrue(tokenParser.nextToken() == JsonToken.END_OBJECT, "Expected END_OBJECT token");
            assertTrue(tokenParser.nextToken() == null, "Expected end of buffer");
        }
    }
}
