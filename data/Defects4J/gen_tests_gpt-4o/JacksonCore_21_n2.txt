
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.NameMatchFilter;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class FilteringParserDelegateTest {

    @Test
    public void testMissingEndObject() throws IOException {
        String json = "{ \"a\":123, \"array\":[1,2], \"ob\": { \"value0\":2, \"value\":3, \"value2\":4 }, \"b\":true }";

        JsonFactory factory = new JsonFactory();
        JsonParser p0 = factory.createParser(json);

        FilteringParserDelegate parser = new FilteringParserDelegate(p0,
                new NameMatchFilter("value"),
                true,  // includePath
                false  // multipleMatches
        );

        StringBuilder filteredJson = new StringBuilder();
        JsonToken token;

        while ((token = parser.nextToken()) != null) {
            switch (token) {
                case START_OBJECT:
                    filteredJson.append('{');
                    break;
                case END_OBJECT:
                    filteredJson.append('}');
                    break;
                case FIELD_NAME:
                    filteredJson.append("\"").append(parser.getCurrentName()).append("\":");
                    break;
                case VALUE_NUMBER_INT:
                    filteredJson.append(parser.getIntValue());
                    break;
                default:
                    break;
            }
        }

        assertEquals("{\"ob\":{\"value\":3}}", filteredJson.toString());
    }
}
