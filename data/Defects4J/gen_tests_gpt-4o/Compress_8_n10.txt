
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class TarArchiveEntryTest {

    @Test
    public void testParseTarHeaderWithInvalidSizeParsing() {
        byte[] header = new byte[512];
        
        // Fill with spaces
        for (int i = 0; i < header.length; i++) {
            header[i] = ' ';
        }
        
        // Set correct magic values for a tar entry
        header[257] = 'u';
        header[258] = 's';
        header[259] = 't';
        header[260] = 'a';
        header[261] = 'r';
        header[262] = ' ';
        
        // Set the size field in octal, note: last byte should be space or NUL but not part of the size value
        String sizeInOctal = "000000000777 "; // 511 in decimal, with trailing space
        System.arraycopy(sizeInOctal.getBytes(), 0, header, 124, sizeInOctal.length());

        try {
            TarArchiveEntry entry = new TarArchiveEntry(header);
            assertEquals(511L, entry.getSize());
        } catch (Exception e) {
            fail("Parsing failed due to exception: " + e.getMessage());
        }
    }
}
