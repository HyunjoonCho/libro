
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertThrows;

public class JacksonVulnerabilityTest {

    // Vulnerability demonstration code should never be used in production
    @Test
    public void testDefaultTypingVulnerability() throws IOException {
        // Existing ObjectMapper instance
        ObjectMapper mapper = new ObjectMapper();

        // Enable Default Typing, which causes the vulnerability
        mapper.setDefaultTyping(new StdTypeResolverBuilder());

        // Malicious JSON payload exploiting the vulnerability
        String maliciousPayload = "[\"org.apache.commons.collections.functors.InvokerTransformer\", {\"iMethodName\":\"exec\",\"iParamTypes\":[\"java.lang.String\"],\"iArgs\":[\"calc\"]}]";

        // Ensure the mapping of malicious payload doesn't occur, expect IOException
        assertThrows(IOException.class, () -> {
            mapper.readValue(maliciousPayload, Object.class);
        });
    }
}
