
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class BrentSolverTest {

    // Define a simple function where x=2 is a root
    private static final UnivariateFunction TEST_FUNCTION = new UnivariateFunction() {
        @Override
        public double value(double x) {
            return x - 2;
        }
    };

    @Test
    public void testBrentSolverWithEndpointRoot() {
        UnivariateSolver solver = new BrentSolver();
        // Use a range where one endpoint is the root
        double min = 2.0;
        double max = 3.0;
        double initial = 2.5; // arbitrary initial guess

        // The bug is that the solver might return the function value instead of the actual root
        double root = solver.solve(100, TEST_FUNCTION, min, max, initial);
        
        // Assert that the root found by the solver is the actual root
        assertEquals(2.0, root, 1e-6);
    }
}
