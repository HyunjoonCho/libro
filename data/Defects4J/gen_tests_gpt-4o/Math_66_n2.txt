
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BrentOptimizer;
import org.apache.commons.math3.exception.MaxCountExceededException;
import org.apache.commons.math3.exception.TooManyEvaluationsException;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.OptimizationData;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.junit.Test;
import static org.junit.Assert.assertEquals;


public class BrentOptimizerTest {

    @Test
    public void testBrentOptimizerForQuadraticFunction() {
        UnivariateFunction quadraticFunction = new UnivariateFunction() {
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);
        UnivariatePointValuePair result = optimizer.optimize(
            new MaxEval(1000),
            new UnivariateObjectiveFunction(quadraticFunction),
            new SearchInterval(0, 4) // We know the minimum lies in this interval
        );
        assertEquals(2.0, result.getPoint(), 1e-6);  // Should find minimum at x = 2
        assertEquals(0.0, result.getValue(), 1e-6);  // Minimum function value should be 0
    }
}
