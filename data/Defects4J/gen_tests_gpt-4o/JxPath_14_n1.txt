
import org.junit.Test;
import static org.junit.Assert.*;

public class CoreRoundingFunctionsTest {

    @Test
    public void testFloorFunctionWithSpecialValues() {
        assertXPathValue("floor('NaN')", Double.NaN);
        assertXPathValue("floor(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("floor(2 div 0)", Double.POSITIVE_INFINITY);
    }

    @Test
    public void testCeilingFunctionWithSpecialValues() {
        assertXPathValue("ceiling('NaN')", Double.NaN);
        assertXPathValue("ceiling(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("ceiling(2 div 0)", Double.POSITIVE_INFINITY);
    }

    @Test
    public void testRoundFunctionWithSpecialValues() {
        assertXPathValue("round('NaN')", Double.NaN);
        assertXPathValue("round(-2 div 0)", Double.NEGATIVE_INFINITY);
        assertXPathValue("round(2 div 0)", Double.POSITIVE_INFINITY);
    }

    // Mock method to simulate the XPath value check
    private void assertXPathValue(String expression, Double expected) {
        // Placeholder for expression evaluation using an XPath library
        Double actual = evaluateXPath(expression);
        if (expected.isNaN()) {
            assertTrue(Double.isNaN(actual));
        } else {
            assertEquals(expected, actual);
        }
    }

    // Mock method to simulate XPath evaluation
    private Double evaluateXPath(String expression) {
        // Here we would parse and evaluate the expression using a real XPath processing library
        // For demonstration purposes, this method is a placeholder that should
        // be substituted with the actual implementation.
        return null;
    }
}
