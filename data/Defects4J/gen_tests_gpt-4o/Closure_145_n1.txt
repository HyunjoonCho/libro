
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.Result;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class ClosureCompilerBugTest {

    @Test
    public void testLabeledLoopsAndBreaksIssue() {
        // Original JavaScript code to be compiled
        String inputJs = "var i = 0; " +
                "lab1: do{ " +
                " lab2: do{ " +
                " i++; " +
                " if (1) { " +
                " break lab2; " +
                " } else { " +
                " break lab1; " +
                " } " +
                " } while(false); " +
                "} while(false); " +
                "console.log(i);";

        // Expected output
        // In a working scenario, make sure wrapping brackets are present after `do` keyword.
        String expectedOutput = "var a=0;do{a++;break}while(0);console.log(a);";

        // Create the source file from the input string
        SourceFile inputSourceFile = SourceFile.fromCode("input.js", inputJs);

        // Create a compiler options instance
        CompilerOptions options = new CompilerOptions();

        // Instantiate the runner with a command-line style
        CommandLineRunner runner = new CommandLineRunner(new String[]{"--jscomp_off=globalThis"});

        // Run with the current options
        Result result = runner.doRun(new SourceFile[]{inputSourceFile}, new SourceFile[]{}, options);

        // Compile the result (output)
        if (result.success) {
            String outputJs = runner.getLastCompiler().toSource();
            System.out.println("Compiled Output: " + outputJs);

            // Assert the output with expected output
            assertEquals(expectedOutput, outputJs);
        } else {
            // If compilation did not succeed, print the errors
            System.err.println("Compilation Errors!");
        }
    }
}
