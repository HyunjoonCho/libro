
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.CompilerOptions;
import org.junit.Test;
import java.io.*;

import static org.junit.Assert.assertTrue;

public class ClosureCompilerTest {

    @Test
    public void testJSC_DETERMINISTIC_TESTWarning() throws Exception {
        // Source code to be compiled
        String sourceCode = "var t = null;\n" +
                            "\n" +
                            "window.test = function() {\n" +
                            "  if (t != null) {\n" +
                            "    t = null;\n" +
                            "  }\n" +
                            "  t = 1;\n" +
                            "};";

        // Expected warning message
        String expectedWarning = "JSC_DETERMINISTIC_TEST";

        // Write the source to a temporary file
        File tempFile = File.createTempFile("test", ".js");
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {
            writer.write(sourceCode);
        }

        // Prepare compiler options
        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(CompilerOptions.WarningLevel.VERBOSE);

        // Run the Closure Compiler
        CommandLineRunner runner = new CommandLineRunner(
                new String[]{
                        "--js", tempFile.getAbsolutePath(),
                        "--compilation_level", "ADVANCED_OPTIMIZATIONS"
                });

        // Capture output
        ByteArrayOutputStream outStream = new ByteArrayOutputStream();
        PrintStream out = new PrintStream(outStream);
        System.setErr(out);  // Capture error stream output
        runner.run();

        // Read the output
        String output = outStream.toString();

        // Assert that the expected warning is present in the output
        assertTrue(output.contains(expectedWarning));

        // Clean up the temporary file
        tempFile.delete();
    }
}
