
import org.apache.commons.math3.optim.univariate.MultiDirectional;
import org.apache.commons.math3.optim.PointValuePair;
import org.apache.commons.math3.optim.SimpleValueChecker;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizer;
import org.junit.Test;

import static org.junit.Assert.fail;

public class MultiDirectionalTest {

    @Test(timeout = 1000) // Adding a timeout to prevent infinite loop
    public void testMultiDirectionalCorrectStart() {
        // Objective function: a simple quadratic bowl with a known minimum at (3, 3)
        SimpleObjectiveFunction objectiveFunction = new SimpleObjectiveFunction();

        // Initial guess: the correct solution
        double[] startPoint = {3, 3};

        SimpleValueChecker checker = new SimpleValueChecker(1e-6, 1e-6);

        SimplexOptimizer optimizer = new SimplexOptimizer(checker);

        MultiDirectional optimizerMethod = new MultiDirectional();        

        try {
            // Attempt to optimize
            PointValuePair result = optimizer.optimize(
                new org.apache.commons.math3.optim.InitialGuess(startPoint),
                new org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction(objectiveFunction),
                org.apache.commons.math3.optim.nonlinear.scalar.GoalType.MINIMIZE,
                new org.apache.commons.math3.optim.SimpleBounds(new double[] {-10, -10}, new double[] {10, 10}),
                new org.apache.commons.math3.optim.initialguess.SimplexStepSize(1.0, 1.0), 
                optimizerMethod);
            
            // Check if the optimization returns the correct point
            double[] optimum = result.getPoint();
            if (optimum[0] != 3 || optimum[1] != 3) {
                fail("The optimization did not return the correct solution.");
            }
        } catch (Exception e) {
            fail("Optimization failed: " + e.getMessage());
        }
    }

    public static class SimpleObjectiveFunction implements org.apache.commons.math3.analysis.MultivariateFunction {
        @Override
        public double value(double[] point) {
            double x = point[0];
            double y = point[1];
            // A simple quadratic function with a minimum at (3, 3)
            return (x - 3)*(x - 3) + (y - 3)*(y - 3);
        }
    }
}
