
import org.jsoup.Connection;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.jsoup.parser.Parser;

import org.jsoup.helper.HttpConnection.KeyVal;

import org.jsoup.Connection.KeyVal;
import org.jsoup.nodes.FormElement;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertFalse;

public class JsoupBugTest {

    @Test
    public void testRemovingNodesFromForm() throws Exception {
        // Simulating document parsing, replace with your actual URL if needed
        String html = "<html><body><form><input type='text' name='alpha' value='1'></form></body></html>";
        Document doc = Jsoup.parse(html, "", Parser.htmlParser());

        // Print HTML before removal
        System.out.println("Before removal: " + doc.toString());

        Element inputAlpha = doc.select("input[name=alpha]").first();
        if (inputAlpha != null) {
            inputAlpha.remove();
        }

        // Print HTML after removal
        System.out.println("After removal: " + doc.toString());

        FormElement form = (FormElement) doc.select("form").first();
        
        // Ensure that input[name=alpha] is not in the form anymore
        assertFalse("Input 'alpha' should have been removed.", form.toString().contains("name=\"alpha\""));

        List<KeyVal> data = form.formData();

        // Print the form data after node removal
        System.out.println("Form data: " + data.toString());

        // Assert that alpha is not part of the form data
        data.forEach(kv -> assertFalse("Input 'alpha' should have been removed from form data.", "alpha".equals(kv.key())));
    }
}
