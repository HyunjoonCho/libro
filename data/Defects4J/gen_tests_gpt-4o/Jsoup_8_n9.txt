
import org.junit.Test;
import static org.junit.Assert.*;

public class OrphanElementTest {

    @Test(expected = NullPointerException.class)
    public void testToStringNPEForOrphanElement() {
        // Simulating an element that gets removed, causing it to become "orphaned"
        CustomElement element = new CustomElement("TestElement");
        
        // Detach the element from its parent or main structure
        element.remove();

        // Attempting to call toString on the detached (orphaned) element
        // should result in a NullPointerException based on the current issue
        element.toString();
    }

    // Mock class to illustrate the issue
    static class CustomElement {
        private String name;
        private boolean isOrphan = false;

        public CustomElement(String name) {
            this.name = name;
        }

        public void remove() {
            isOrphan = true;
        }

        @Override
        public String toString() {
            if (isOrphan) {
                throw new NullPointerException("Element is orphaned");
            }
            return "CustomElement{name='" + name + "'}";
        }
    }
}
