
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.common.base.Preconditions;
import com.google.common.collect.Maps;
import org.junit.Test;

import java.util.Map;
import java.util.Random;
import java.util.UUID;
import java.util.Map.Entry;

public class ByteArraySerializationTest {

    private static final ObjectMapper mapper = new ObjectMapper();
    private static final UUID user = UUID.randomUUID(); // Sample user UUID

    @Test(expected = IndexOutOfBoundsException.class)
    public void testArraySerialization() throws Exception {
        Map<ObjectUserKey, ServerIndexPair> ssip = Maps.newConcurrentMap();

        for (int i = 0; i < 10000; ++i) {
            byte[] indexPairBytes = new byte[2080];
            new Random().nextBytes(indexPairBytes);
            ServerIndexPair sip = new ServerIndexPair(indexPairBytes);

            // Serialize
            byte[] serializedData = mapper.writeValueAsBytes(Map.of(UUID.randomUUID().toString(), sip));

            // Deserialize
            Map<String, ServerIndexPair> metadata = mapper.readValue(
                    serializedData,
                    new TypeReference<Map<String, ServerIndexPair>>() {}
            );

            // Simulate processing of deserialized data
            for (Entry<String, ServerIndexPair> metadataEntry : metadata.entrySet()) {
                ServerIndexPair indexPair = metadataEntry.getValue();
                ssip.put(new ObjectUserKey(metadataEntry.getKey(), user), indexPair);
            }

            // Simulate iteration logging
            System.out.println("Iteration: " + i);
        }
    }

    public static class ServerIndexPair {
        public static final String INDEX_PAIR_FIELD = "indexPair";
        private final byte[] indexPair;

        public ServerIndexPair(byte[] indexPair) {
            Preconditions.checkState(indexPair.length == 2080, "Index pair must be 2080 bytes long.");
            this.indexPair = indexPair;
        }

        public byte[] getIndexPair() {
            return indexPair;
        }
    }

    public static class ObjectUserKey {
        public static final String SEPARATOR = ":";
        private final String objectId;
        private final UUID userKey;

        public ObjectUserKey(String objectId, UUID userKey) {
            Preconditions.checkArgument(objectId != null && userKey != null, "objectId and userKey must not be null");
            this.objectId = objectId;
            this.userKey = userKey;
        }

        public String getObjectId() {
            return objectId;
        }

        public UUID getUserKey() {
            return userKey;
        }

        @Override
        public int hashCode() {
            final int prime = 31;
            int result = 1;
            result = prime * result + ((objectId == null) ? 0 : objectId.hashCode());
            return result;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || getClass() != obj.getClass()) {
                return false;
            }
            ObjectUserKey other = (ObjectUserKey) obj;
            return objectId.equals(other.objectId) && userKey.equals(other.userKey);
        }

        @Override
        public String toString() {
            return userKey + SEPARATOR + objectId;
        }
    }
}
