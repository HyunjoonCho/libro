
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import org.junit.Test;
import static org.junit.Assert.*;

public class DefineFlagTest {

    @Test
    public void testDefineFlagWithString() {
        String jarPath = "path/to/compiler.jar"; // Update with the actual path
        String[] command = {
                "java", "-jar", jarPath,
                "--compilation_level", "ADVANCED_OPTIMIZATIONS",
                "--define", "test.VERSION=1.0.0",
                "--js_output_file", "test-min.js",
                "--js", "test.js"
        };

        try {
            Process process = Runtime.getRuntime().exec(command);
            process.waitFor();

            BufferedReader stdError = new BufferedReader(new InputStreamReader(process.getErrorStream()));
            StringBuilder errorOutput = new StringBuilder();
            String line;
            while ((line = stdError.readLine()) != null) {
                errorOutput.append(line).append("\n");
            }

            String expectedErrorMessage = "java.lang.RuntimeException: --define flag syntax invalid: test.VERSION=1.0.0";
            assertTrue("Expected error message not found", errorOutput.toString().contains(expectedErrorMessage));

        } catch (IOException | InterruptedException e) {
            fail("Exception occurred during test execution: " + e.getMessage());
        }
    }
}
