
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.assertEquals;

// POJOs
class Definition {
    @JsonUnwrapped
    public List<Record> records;

    public Definition() {
        this.records = new ArrayList<>();
    }
}

class Record {
    @JsonUnwrapped
    public List<Field> fields;

    public Record() {
        this.fields = new ArrayList<>();
    }
}

class Field {
    @JsonProperty("value")
    public String value;

    public Field(String value) {
        this.value = value;
    }
}

// Test Class
public class JsonDeserializationTest {

    @Test
    public void testNestedNonWrappedListDeserialization() throws JsonProcessingException {
        ObjectMapper objectMapper = new ObjectMapper();
        String json = "{\"records\":[{\"fields\":[]}, {\"fields\":[{\"value\":\"data\"}]}]}";

        Definition result = objectMapper.readValue(json, Definition.class);

        // Verify that outer list has 2 records
        assertEquals(2, result.records.size());

        // Verify that the first record's fields list is empty
        assertEquals(0, result.records.get(0).fields.size());

        // Verify that the second record has 1 field with value "data"
        assertEquals(1, result.records.get(1).fields.size());
        assertEquals("data", result.records.get(1).fields.get(0).value);
    }
}
