
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertNotNull;

public class TarChecksumTest {

    @Test
    public void testTarChecksumRightAligned() throws IOException {
        // Mocked TAR header for a file entry with right-aligned checksum
        // The checksum field is 8 bytes: "0001234\0"
        // Padding zeros instead of nulls and spaces
        byte[] mockedTarHeader = new byte[512];
        System.arraycopy("myfile.txt".getBytes(), 0, mockedTarHeader, 0, "myfile.txt".getBytes().length);
        String rightAlignedChecksum = "0001234\0";
        System.arraycopy(rightAlignedChecksum.getBytes(), 0, mockedTarHeader, 148, rightAlignedChecksum.getBytes().length);

        // Set file size in header
        String fileSize = "00000000007";
        System.arraycopy(fileSize.getBytes(), 0, mockedTarHeader, 124, fileSize.getBytes().length);

        // Create a TAR input stream with the header and some file content
        byte[] fileContent = "content".getBytes();
        byte[] tarContent = new byte[mockedTarHeader.length + fileContent.length];
        System.arraycopy(mockedTarHeader, 0, tarContent, 0, mockedTarHeader.length);
        System.arraycopy(fileContent, 0, tarContent, mockedTarHeader.length, fileContent.length);

        try (ByteArrayInputStream bais = new ByteArrayInputStream(tarContent);
             TarArchiveInputStream tais = new TarArchiveInputStream(bais)) {
             
            TarArchiveEntry entry = tais.getNextTarEntry();
            assertNotNull("Expected valid TAR entry", entry);
        }
    }
}
