
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIdentityReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class JsonIdentityReferenceTest {

    private static final ObjectMapper MAPPER = new ObjectMapper();

    @JsonIdentityInfo(generator = ObjectIdGenerators.IntSequenceGenerator.class, property = "@id")
    @JsonIdentityReference(alwaysAsId = true)
    static class ReallyAlwaysAsId {
        public int value;

        public ReallyAlwaysAsId() {
            this(0);
        }

        public ReallyAlwaysAsId(int v) {
            value = v;
        }
    }

    @JsonPropertyOrder(alphabetic = true)
    static class ReallyAlwaysContainer {

        @JsonIdentityReference(alwaysAsId = true) // works as expected when set here
        public ReallyAlwaysAsId a = new ReallyAlwaysAsId(13);

        // this field should also be serialized as an ID, but isn't when annotation only on class
        public ReallyAlwaysAsId b = new ReallyAlwaysAsId(13);
    }

    @Test
    public void testJsonIdentityReference() throws Exception {
        String json = MAPPER.writeValueAsString(new ReallyAlwaysContainer());
        // The expected value considers a distinct ID for each separate instance
        assertEquals("{\"a\":1,\"b\":2}", json);
    }
}
