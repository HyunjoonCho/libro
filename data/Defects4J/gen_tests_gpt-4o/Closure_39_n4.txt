
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.assertFalse;

public class ExternExportTest {

    @Test
    public void testExternExportWithTypedef() {
        // Source JavaScript code with @typedef
        String sourceCode = ""
                + "/** @typedef {Object<string, number>} */\n"
                + "var MyTypeDef;\n"
                + "\n"
                + "/**\n"
                + " * @param {MyTypeDef=} opt_param Optional parameter.\n"
                + " */\n"
                + "function useMyTypeDef(opt_param) {};\n"
                + "\n"
                + "/**\n"
                + " * @param {MyTypeDef} param Required parameter.\n"
                + " */\n"
                + "function anotherFunction(param) {};";

        // Set up the closure compiler input and options
        SourceFile input = SourceFile.fromCode("test.js", sourceCode);
        String[] args = new String[]{
                "--externs", "", // Add any necessary extern paths
                "--js", "test.js",
                "--compilation_level", "ADVANCED_OPTIMIZATIONS",
                "--generate_exports",
                "--export_local_property_definitions"
        };

        // Run the closure compiler
        CommandLineRunner runner = new CommandLineRunner(args);
        Result result = runner.run();

        // Check if the extern export contains invalid truncation
        String externExport = result.externExport;
        boolean containsInvalidTruncation = externExport.contains("...");

        // Assert that there is no invalid truncation
        assertFalse("Extern export should not contain invalid truncation", containsInvalidTruncation);
    }
}
