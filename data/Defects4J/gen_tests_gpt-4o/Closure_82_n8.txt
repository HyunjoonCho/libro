
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import org.junit.Test;

import static org.junit.Assert.*;

public class IndexOfWarningTest {

    @Test
    public void testMissingPropertyWarningForIndexOf() throws ScriptException {
        ScriptEngineManager manager = new ScriptEngineManager();
        ScriptEngine engine = manager.getEngineByName("JavaScript");

        // Code that does not produce a warning
        String script1 = "var s = new String('hello'); s.toLowerCase.indexOf('l');";

        // Code that does produce a warning
        String script2 = "var s = new String('hello'); s.toLowerCase.substr(0, 1);";

        try {
            engine.eval(script1);
            // Here you would typically verify that no warnings are raised.
            // But in practice, this depends on the scripting engine's error handling capabilities.
        } catch (ScriptException e) {
            fail("Expected no warnings for script1 but got: " + e.getMessage());
        }

        try {
            engine.eval(script2);
            // Here you would verify the warning was raised if your environment supports it.
        } catch (ScriptException e) {
            // If this is expected to raise a warning, you can assert here as part of the test.
            assertTrue(e.getMessage().contains("Missing property warning for 'substr'"));
        }
    }
}
