public void testBSPTreeRecoveryIssue() {
    // Example input data for a cube
    float[][] vertices = {
        {0.0f, 0.0f, 0.0f},
        {0.0f, 0.0f, 1.0f},
        {0.0f, 1.0f, 0.0f},
        {0.0f, 1.0f, 1.0f},
        {1.0f, 0.0f, 0.0f},
        {1.0f, 0.0f, 1.0f},
        {1.0f, 1.0f, 0.0f},
        {1.0f, 1.0f, 1.0f}
    };
    
    int[][] indices = {
        {0, 1, 2}, {1, 3, 2}, {4, 5, 6}, {5, 7, 6},
        {0, 1, 4}, {1, 5, 4}, {2, 3, 6}, {3, 7, 6},
        {0, 2, 4}, {2, 6, 4}, {1, 3, 5}, {3, 7, 5}
    };
    
    BSPMesh bspMesh = new BSPMesh(vertices, indices);
    PolyhedronsSet polyhedronsSet = new PolyhedronsSet(bspMesh);
    List<Face> faces = polyhedronsSet.getFaces();
    
    // Slight modification to one vertex
    vertices[0][0] = 0.1f;

    BSPMesh bspMeshModified = new BSPMesh(vertices, indices);
    PolyhedronsSet polyhedronsModifiedSet = new PolyhedronsSet(bspMeshModified);
    List<Face> modifiedFaces = polyhedronsModifiedSet.getFaces();

    assertNotEquals("The face recovery should reflect vertex modification", faces, modifiedFaces);
}