public void testCompilerUnreachableCodeError() {
    CompilationLevel compilationLevel = CompilationLevel.SIMPLE_OPTIMIZATIONS;
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    compilationLevel.setOptionsForCompilationLevel(options);

    String code = ""
        + "function instanceOf(value, type) {\n"
        + "  try {\n"
        + "    if (value instanceof type) {\n"
        + "      return true;\n"
        + "    }\n"
        + "  } catch (exception) {\n"
        + "    if (exception instanceof TypeError) {\n"
        + "      throw exception;\n" 
        + "    }\n"
        + "    return (type === Object);\n"
        + "  }\n"
        + "}";

    SourceFile input = SourceFile.fromCode("test.js", code);

    compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

    List<JSError> warnings = compiler.getWarnings();
    boolean unreachableCodeWarningFound = warnings.stream()
        .anyMatch(warning -> warning.description.contains("unreachable code"));
    
    assertTrue("Expected unreachable code warning but none was found", unreachableCodeWarningFound);
}