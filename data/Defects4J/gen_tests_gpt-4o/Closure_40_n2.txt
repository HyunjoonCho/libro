
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.*;

public class SmartNameRemovalTest {

    @Test
    public void testSmartNameRemovalCausingCompilerCrash() {
        String code = "var goog = {};\n" +
                "goog.inherits = function(x, y) {};\n" +
                "var ns = {};\n" +
                "/** @constructor */ ns.PageSelectionModel = function(){};\n" +
                "/** @constructor */ \n" +
                "ns.PageSelectionModel.FooEvent = function() {};\n" +
                "/** @constructor */ \n" +
                "ns.PageSelectionModel.SelectEvent = function() {};\n" +
                "goog.inherits(ns.PageSelectionModel.ChangeEvent, ns.PageSelectionModel.FooEvent);";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);
        
        try {
            Result result = compiler.compile(SourceFile.fromCode("externs", ""), SourceFile.fromCode("Test", code), options);
            assertFalse("Compiler should fail with an exception, but it didn't.", result.success);
            assertTrue("The compiler should provide errors.", result.errors.length > 0);
            for (JSError error : result.errors) {
                System.out.println(error);
            }
        } catch (Exception e) {
            fail("The test should handle the exception correctly rather than crashing the process.");
        }
    }
}
