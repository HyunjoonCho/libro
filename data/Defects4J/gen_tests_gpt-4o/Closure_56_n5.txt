
import static org.junit.Assert.assertTrue;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class CompilerOutputTest {

    // Store the original System.err and System.out to restore later
    private final PrintStream originalErr = System.err;
    private final PrintStream originalOut = System.out;
    private ByteArrayOutputStream errContent;
    private ByteArrayOutputStream outContent;

    @Before
    public void setUpStreams() {
        errContent = new ByteArrayOutputStream();
        outContent = new ByteArrayOutputStream();
        System.setErr(new PrintStream(errContent));
        System.setOut(new PrintStream(outContent));
    }

    @After
    public void restoreStreams() {
        System.setErr(originalErr);
        System.setOut(originalOut);
    }

    @Test
    public void testTruncatedErrorOutput() {
        // Simulating the JavaScript file content
        String jsContent = "alert(foo);\nalert(bar);";

        // Simulate the compilation process and error generation
        compileJavaScript(jsContent);

        // Check the error output
        String[] outputLines = errContent.toString().split("\n");
        assertTrue("Output should contain an error message", outputLines.length > 0);

        // Check if the last error message is correctly formed
        // Since the issue was about the last error being truncated,
        // we assert that it contains both the line of code and the caret
        String lastError = outputLines[outputLines.length - 2];
        String caretLine = outputLines[outputLines.length - 1];

        assertTrue("Last error should include the line of code", lastError.contains("alert(bar);"));
        assertTrue("Last error should include the caret", caretLine.contains("^"));
    }

    private void compileJavaScript(String jsContent) {
        // In a real setup, this would be the call to the compiler tool
        // Here, we simulate the output to reproduce the reported issue

        // Simulating error output similar to the bug described
        System.err.println("test.js:1: ERROR - variable foo is undefined");
        System.err.println("alert(foo);");
        System.err.println(" ^\n");

        System.err.println("test.js:2: ERROR - variable bar is undefined");
        // Simulating the truncation issue
        // System.err.println("alert(bar);");
        // System.err.println(" ^\n");
    }
}
