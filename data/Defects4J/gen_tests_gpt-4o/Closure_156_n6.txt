
import com.google.javascript.jscomp.CommandLineRunner;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import java.util.Arrays;

import static org.junit.Assert.fail;

public class CompilerCrashTest {

    @Test
    public void testCompilerCrashOnAssignStatement() {
        // JavaScript code causing the compiler error
        String jsCode = 
                "/** @constructor \n" +
                " * @param {...Object} params \n" +
                " */\n" +
                "dojox.gfx.shape.Shape = function(params) {};\n" +
                "dojox.gfx.shape.Shape = dojo.declare(\"dojox.gfx.shape.Shape\", null, /** @lends dojox.gfx.shape.Shape.prototype */ {});\n";

        // Set up the compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        SourceFile input = SourceFile.fromCode("test.js", jsCode);

        // Compile the JavaScript code
        Result result = compiler.compile(CommandLineRunner.getDefaultExterns(), Arrays.asList(input), options);

        // Check for the expected compiler failure
        for (JSError error : result.errors) {
            if (error.getDescription().contains("INTERNAL COMPILER ERROR")) {
                fail("Unexpected internal compiler error: " + error);
            }
        }

        if (!result.success) {
            fail("Expected compilation to fail with error message, but it succeeded.");
        }
    }
}
