
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

@JsonInclude(JsonInclude.Include.NON_NULL)
public class CallRecord {
    public float version;
    public String application;
    public Item item;
    public Item item2;
    
    // Other code...

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append("CallRecord [version=").append(version).append(", ");
        if (application != null) {
            builder.append("application=").append(application).append(", ");
        }
        if (item != null) {
            builder.append("item=").append(item);
        }
        builder.append("]");
        return builder.toString();
    }

    @Test
    public void testDeserializationWithInvalidSubtype() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper().disable(
                DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

        String json1 = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
        CallRecord callRecord1 = objectMapper.readValue(json1, CallRecord.class);
        assertEquals("CallRecord [version=0.0, application=123, ]", callRecord1.toString());

        String json2 = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}}";
        CallRecord callRecord2 = objectMapper.readValue(json2, CallRecord.class);
        assertEquals("CallRecord [version=0.0, application=123, ]", callRecord2.toString());

        String json3 = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, \"version\":0.0,\"application\":\"123\"}";
        CallRecord callRecord3 = objectMapper.readValue(json3, CallRecord.class);
        assertEquals("CallRecord [version=0.0, ]", callRecord3.toString());
    }
}

@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type", visible = true)
@JsonSubTypes({@JsonSubTypes.Type(value = Event.class, name = Event.TYPE)})
interface Item {
}

final class Event implements Item {
    public String location;
    public static final String TYPE = "event";
    public Event() {}
}
