public void testJacksonContinueParsingAfterInvalidSubtype() throws IOException {
    final ObjectMapper objectMapper = new ObjectMapper()
            .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                     DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                     DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    // Test case for item2 which is valid and should be parsed
    String json1 = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord result1 = objectMapper.readValue(json1, CallRecord.class);
    assertNotNull(result1.item2); // Verifies item2 is parsed
    assertEquals("123", result1.application); // Verifies application is parsed

    // Test case where application should still be parsed if located after invalid item
    String json2 = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, \"version\":0.0,\"application\":\"123\"}";
    CallRecord result2 = objectMapper.readValue(json2, CallRecord.class);
    assertEquals("123", result2.application); // Verifies application is parsed
}