
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.FirstOrderIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.junit.Test;
import static org.junit.Assert.*;

public class DormandPrince853IntegratorTest {

    static class SimpleODE implements FirstOrderDifferentialEquations {
        public int getDimension() {
            return 1;
        }

        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = -0.5 * y[0]; // Example ODE: y' = -0.5 * y
        }
    }

    @Test
    public void testTooLargeFirstStep() {
        FirstOrderDifferentialEquations ode = new SimpleODE();
        double[] y = new double[] { 1.0 }; // initial state
        double[] y0 = y.clone();
        
        double initialTime = 0.0;
        double shortEndTime = 1.0e-10; // very short integration range

        // Create the integrator
        FirstOrderIntegrator integrator = new DormandPrince853Integrator(
            1.0e-15, 1.0, 1.0e-10, 1.0e-10); // Arbitrary tolerances
        
        integrator.integrate(ode, initialTime, y0, shortEndTime, y);

        // Verify that the final time is close to the very short end time
        assertEquals("Integrator should handle small time range without overshooting", shortEndTime, y[0], 1.0e-10);
    }
}
