public void testLargeFirstStepWithDormandPrince853Integrator() {
    double initialTime = 0.0;
    double shortTime = 1.0e-10; // Extremely short integration range
    double[] initialState = {1.0, 0.0, 0.0, 0.0};
    
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(1.0e-12, 1.0, 1.0e-10, 1.0e-10);
    integrator.addStepHandler(new StepHandler() {
        @Override
        public void handleStep(StepInterpolator interpolator, boolean isLast) throws MaxCountExceededException {
            double t = interpolator.getCurrentTime();
            if (t > shortTime) {
                fail("Step beyond the integration range was erroneously taken.");
            }
        }
        
        @Override
        public void init(double t0, double[] y0, double t) { }
    });
    
    try {
        integrator.integrate((t, y, yDot) -> {
            yDot[0] = -y[0];
            yDot[1] = y[0] - y[1];
            yDot[2] = y[1] - y[2];
            yDot[3] = y[2] - y[3];
        }, initialTime, initialState, shortTime, new double[4]);
        fail("Integration did not fail even though first step was too large.");
    } catch (Exception e) {
        // Expected to fail due to the large first step
    }
}