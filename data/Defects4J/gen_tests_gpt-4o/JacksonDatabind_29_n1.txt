
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;

import static org.junit.Assert.*;

public class PolymorphicDeserializationTest {

    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY, property = "type")
    abstract static class Animal {
        public String name;
    }

    static class Dog extends Animal {
        public String breed;
    }

    @Test
    public void testMissingTypeIdWithExternalProperty() {
        ObjectMapper mapper = new ObjectMapper();
        String json = "{\"name\":\"Buddy\", \"breed\":\"Golden Retriever\"}"; // Missing "type" field

        try {
            Animal animal = mapper.readValue(json, Animal.class);
            fail("Expected an InvalidTypeIdException due to missing type id");
        } catch (InvalidTypeIdException e) {
            // Expected outcome: No type id provided and no defaultImpl defined
            assertTrue(e.getMessage().contains("missing type id"));
        }
    }
}
