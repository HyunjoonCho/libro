
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

// Define the class X<T>
class X<T> {
    String s;
    List<T> items;

    // Constructor for convenience
    public X(String s, List<T> items) {
        this.s = s;
        this.items = items;
    }

    // Getters for serialization
    public String getS() {
        return s;
    }

    public List<T> getItems() {
        return items;
    }
}

// Define ListAttribute class similar to X for custom serialization
class ListAttribute {
    private String itemJsonKey;
    private List<String> items;

    public ListAttribute(String itemJsonKey, List<String> items) {
        this.itemJsonKey = itemJsonKey;
        this.items = items;
    }

    public String getItemJsonKey() {
        return itemJsonKey;
    }

    public List<String> getItems() {
        return items;
    }
}

// Custom JsonSerializer for ListAttribute
class ListAttributeSerializer extends JsonSerializer<ListAttribute> {
    @Override
    public void serialize(ListAttribute value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
        jgen.writeStartObject();
        jgen.writeStringField("itemType", value.getItemJsonKey());
        jgen.writeObjectField("items", value.getItems());
        jgen.writeEndObject();
    }
}

public class SerializationTest {

    @Test
    public void testUnwantedEmbeddedObjectSerialization() throws IOException {
        // Initialize ObjectMapper and register the custom serializer
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addSerializer(ListAttribute.class, new ListAttributeSerializer());
        mapper.registerModule(module);

        // Create an instance of ListAttribute
        List<String> items = new ArrayList<>();
        items.add("item1");
        items.add("item2");
        ListAttribute listAttribute = new ListAttribute("string", items);

        // Serialize and deserialize using the recommendation from Tatu
        byte[] jsonBytes = mapper.writeValueAsBytes(listAttribute);
        JsonNode tree = mapper.readTree(jsonBytes);

        // Assertions to verify the correct serialization
        assertTrue(tree.has("itemType"));
        assertEquals("string", tree.get("itemType").asText());
        
        assertTrue(tree.has("items"));
        assertTrue(tree.get("items").isArray());
        assertEquals(2, tree.get("items").size());
        assertEquals("item1", tree.get("items").get(0).asText());
        assertEquals("item2", tree.get("items").get(1).asText());
    }
}
