public void testDateTimeZoneConsistency() {
    Set<String> timeZones = DateTimeZone.getAvailableIDs();
    DateTimeFormatter formatter = DateTimeFormat.forPattern("MM/dd/yyyy HH:mm:ss.SSS ZZZ");
    int numTimeZonesFailed = 0;
    int numTimeZonesException = 0;

    for (String timeZone : timeZones) {
        DateTime dateTime = DateTime.now().withZone(DateTimeZone.forID(timeZone));
        String dateTimeZoneId = dateTime.getZone().getID();

        if (!timeZone.equals(dateTimeZoneId)) {
            numTimeZonesFailed++;
            System.out.println(timeZone + " failed to construct into the proper date time zone - constructed time zone = " + dateTimeZoneId);
            continue;
        }
        try {
            String formattedDateTime = formatter.print(dateTime);
            DateTime convertedDateTime = formatter.parseDateTime(formattedDateTime);

            if (!dateTime.equals(convertedDateTime)) {
                numTimeZonesFailed++;
                System.out.println("Formatter failed for time zone ID: " + dateTimeZoneId + "    converted it to: " + convertedDateTime.getZone().getID());
            }
        } catch (IllegalArgumentException iae) {
            numTimeZonesException++;
            System.out.println("Formatter threw exception for time zone id: " + dateTimeZoneId);
        }
    }

    assertEquals("There should be no time zone ID mismatches", 0, numTimeZonesFailed);
    assertEquals("There should be no exceptions thrown", 0, numTimeZonesException);
}