
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Test;
import static org.junit.Assert.*;

public class DateTimeZoneTest {

    private static DateTimeFormatter formatter = DateTimeFormat.forPattern("MM/dd/yyyy HH:mm:ss.SSS ZZZ");

    @Test
    public void testTimeZoneIDs() {
        Set<String> timeZones = DateTimeZone.getAvailableIDs();
        int numTimeZonesTested = 0;
        int numTimeZonesFailed = 0;
        int numTimeZonesException = 0;

        for (String timeZone : timeZones) {
            try {
                DateTime dateTime = DateTime.now().withZone(DateTimeZone.forID(timeZone));
                final String dateTimeZoneId = dateTime.getZone().getID();

                if (!timeZone.equals(dateTimeZoneId)) {
                    numTimeZonesFailed++;
                    System.out.println(timeZone + " failed to construct into the proper date time zone - constructed time zone = " + dateTimeZoneId);
                } else {
                    DateTime convertedDateTime = parseStringToDateTime(convertDateTimeToFormattedString(dateTime));
                    assertEquals("DateTime objects should be equal", dateTime, convertedDateTime);
                }
                numTimeZonesTested++;
            } catch (IllegalArgumentException iae) {
                numTimeZonesException++;
                System.out.println("Formatter threw exception for time zone id: " + timeZone);
            }
        }

        System.out.println();
        System.out.println("Number of Time Zones tested: " + numTimeZonesTested);
        System.out.println("Number failed: " + numTimeZonesFailed);
        System.out.println("Number exceptions: " + numTimeZonesException);
        System.out.println();

        assertEquals("Number failed should be zero", 0, numTimeZonesFailed);
        assertEquals("Number exceptions should be zero", 0, numTimeZonesException);
    }

    private static String convertDateTimeToFormattedString(DateTime dateTime) {
        return formatter.print(dateTime);
    }

    private static DateTime parseStringToDateTime(String formattedDateTime) {
        return formatter.parseDateTime(formattedDateTime);
    }
}
