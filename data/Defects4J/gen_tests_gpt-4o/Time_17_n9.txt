
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;

import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class TestIssue141 {

    @Test
    public void testWithLaterOffsetAtOverlap() {
        TimeZone.setDefault(TimeZone.getTimeZone("America/Sao_Paulo"));
        DateTimeZone.setDefault(DateTimeZone.forID("America/Sao_Paulo"));

        DateTime dtch = new DateTime(2012, 2, 25, 5, 5, 5, 5).millisOfDay().withMaximumValue();
        System.out.println(dtch);  // Expected: 2012-02-25T23:59:59.999-02:00
        
        dtch = dtch.plus(60001);
        System.out.println(dtch);  // Expected: 2012-02-25T23:01:00.000-03:00
        
        dtch = dtch.withEarlierOffsetAtOverlap();
        System.out.println(dtch);  // Expected: 2012-02-25T23:01:00.000-02:00
        
        dtch = dtch.withLaterOffsetAtOverlap();
        System.out.println(dtch);  // Expected: 2012-02-25T23:01:00.000-03:00
        
        // Assert to verify the correct offset based on Joda-Time's API behavior expectations
        DateTime expectedDateTime = new DateTime(2012, 2, 25, 23, 1, DateTimeZone.forOffsetHours(-3));
        assertEquals(expectedDateTime, dtch);
    }
}
