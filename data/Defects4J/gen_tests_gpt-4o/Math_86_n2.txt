
import org.junit.Test;
// Hypothetical imports, adjust based on the actual library you are using
import static org.junit.Assert.fail;
import org.apache.commons.math3.linear.CholeskyDecomposition;
import org.apache.commons.math3.linear.MatrixUtils;
import org.apache.commons.math3.linear.RealMatrix;
import org.apache.commons.math3.linear.NonPositiveDefiniteMatrixException;

public class CholeskyDecompositionTest {

    @Test
    public void testSymmetricPositiveDefiniteMatrix() {
        double[][] validMatrixData = {
            {0.40434286, 0.09376327, 0.30328980, 0.04909388},
            {0.09376327, 0.10400408, 0.07137959, 0.04762857},
            {0.30328980, 0.07137959, 0.30458776, 0.04882449},
            {0.04909388, 0.04762857, 0.04882449, 0.07543265}
        };

        RealMatrix validMatrix = MatrixUtils.createRealMatrix(validMatrixData);
        try {
            CholeskyDecomposition decomposition = new CholeskyDecomposition(validMatrix);
            // Optional: Add assertions to check decomposition results if needed
        } catch (NonPositiveDefiniteMatrixException e) {
            fail("Expected matrix to be symmetric positive definite.");
        }
    }

    @Test(expected = NonPositiveDefiniteMatrixException.class)
    public void testNonSymmetricPositiveDefiniteMatrix() {
        double[][] invalidMatrixData = {
            {0.40434286, -0.09376327, 0.30328980, 0.04909388},
            {-0.09376327, 0.10400408, 0.07137959, 0.04762857},
            {0.30328980, 0.07137959, 0.30458776, 0.04882449},
            {0.04909388, 0.04762857, 0.04882449, 0.07543265}
        };

        RealMatrix invalidMatrix = MatrixUtils.createRealMatrix(invalidMatrixData);
        // Should throw an exception because the matrix is not symmetric positive definite
        CholeskyDecomposition decomposition = new CholeskyDecomposition(invalidMatrix);
    }
}
