
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;

import java.sql.Date;
import java.text.SimpleDateFormat;

public class SqlDateSerializerTest {

    public void testCustomSqlDateSerialization() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();

        // Attempting to set global format for java.sql.Date
        mapper.configOverride(Date.class).setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));

        // Creating a sample java.sql.Date object
        Date sqlDate = Date.valueOf("2021-10-23");

        // Serializing with the global configuration to test
        String jsonResult = mapper.writeValueAsString(sqlDate);

        // Setting up the expected formatted date string
        String expectedDateStr = "\"2021-10-23\"";

        // Assert to check if serialization matches the expected format
        assertEquals(expectedDateStr, jsonResult);
    }

    public static void main(String[] args) throws JsonProcessingException {
        new SqlDateSerializerTest().testCustomSqlDateSerialization();
    }

    // Simple assert replacement for demonstration
    private void assertEquals(String expected, String actual) {
        if (!expected.equals(actual)) {
            throw new AssertionError("Expected: " + expected + ", but got: " + actual);
        } else {
            System.out.println("Test passed! Serialized value: " + actual);
        }
    }
}
