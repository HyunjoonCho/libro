
import org.junit.Test;
import java.math.BigInteger;
import static org.junit.Assert.*;

public class MathUtilsTest {

    @Test
    public void testBinomialCoefficientLargeValues() {
        // Test the property: C(n, k) + C(n, k+1) == C(n+1, k+1)
        assertEquals(MathUtils.binomialCoefficient(65, 32) + MathUtils.binomialCoefficient(65, 33),
                     MathUtils.binomialCoefficient(66, 33));

        // Test against a known correct value computed by another method
        assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66, 33));

        // Test with correct implementation to assert correctness
        assertEquals(binomialCoefficient(66, 33), MathUtils.binomialCoefficient(66, 33));
    }

    /**
     * Correct implementation using BigInteger based on the explicit formula:
     * C(n, k) = (n*(n-1)*...*(n-k+1)) / (k*(k-1)*...*1)
     */
    public static long binomialCoefficient(int n, int k) {
        if (k < 0 || n < 0 || k > n) {
            throw new IllegalArgumentException("Invalid values for n or k");
        }
        if (k == 0 || k == n) {
            return 1;
        }
        BigInteger result = BigInteger.ONE;
        for (int i = 1; i <= k; i++) {
            result = result.multiply(BigInteger.valueOf(n - i + 1)).divide(BigInteger.valueOf(i));
        }
        if (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {
            throw new ArithmeticException("Binomial coefficient overflow: " + n + ", " + k);
        }
        return result.longValue();
    }
}
