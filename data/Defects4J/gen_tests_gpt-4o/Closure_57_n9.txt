
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSError;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.*;

public class CompilerCrashTest {

    @Test
    public void testGoogProvideWithNonString() {
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // JavaScript code with incorrect usage of goog.provide
        String jsCode = "goog.provide(mine.Spike);";

        // SourceFile with the problematic JS code
        SourceFile input = SourceFile.fromCode("file.js", jsCode);

        // Compile the source
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), input, options);

        // Assert that there should be an error
        assertFalse("Expected the compiler to report errors", result.success);

        // Check if the specific error message related to goog.provide usage is present
        boolean foundTargetError = false;
        for (JSError error : result.errors) {
            if (error.description.contains("is not a string node")) {
                foundTargetError = true;
                break;
            }
        }
        assertTrue("Expected error related to non-string node in goog.provide", foundTargetError);
    }
}
