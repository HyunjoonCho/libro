public void testInvalidPartialConstruction() {
    try {
        new Partial(new DateTimeFieldType[] { DateTimeFieldType.clockhourOfDay(), DateTimeFieldType.hourOfDay() }, new int[] { 1, 1 });
        fail("Expected IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
        assertEquals("Types array must not contain duplicate", e.getMessage());
    }
}

public void testInvalidPartialWith() {
    Partial p1 = new Partial(DateTimeFieldType.clockhourOfDay(), 1).with(DateTimeFieldType.hourOfDay(), 1);
    Partial p2 = new Partial(DateTimeFieldType.hourOfDay(), 1).with(DateTimeFieldType.clockhourOfDay(), 1);
    try {
        p1.isEqual(p2);
        fail("Expected IllegalArgumentException not thrown");
    } catch (IllegalArgumentException e) {
        assertEquals("objects must have matching field types", e.getMessage());
    }
}