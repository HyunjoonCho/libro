
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonSerializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;

import java.io.IOException;

// Custom serializer for MyPojo
class MyPojoSerializer extends JsonSerializer<MyPojo> {
    @Override
    public void serialize(MyPojo value, com.fasterxml.jackson.core.JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeString("CustomSerialization");
    }
}

class MyPojo {
    private String value;

    public MyPojo(String value) {
        this.value = value;
    }

    @JsonValue
    public String getValue() {
        return value;
    }
}

public class JsonSerializerTest {
    @Test
    public void testCustomSerializerWithJsonValue() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();

        // Register custom serializer
        SimpleModule module = new SimpleModule();
        module.addSerializer(MyPojo.class, new MyPojoSerializer());
        mapper.registerModule(module);

        MyPojo pojo = new MyPojo("OriginalValue");
        
        String serialized = mapper.writeValueAsString(pojo);
        assertEquals("\"CustomSerialization\"", serialized);
    }
}
