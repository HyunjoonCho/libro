
import org.apache.commons.math3.analysis.MultivariateMatrixFunction;
import org.apache.commons.math3.analysis.MultivariateVectorFunction;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.EvaluationRmsChecker;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.ModelFunction;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem.ModelFunctionJacobian;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresOptimizer.Optimum;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresProblem;
import org.apache.commons.math3.fitting.leastsquares.LevenbergMarquardtOptimizer;
import org.apache.commons.math3.fitting.leastsquares.LeastSquaresFactory;
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.initialization.InitialGuess;
import org.apache.commons.math3.optim.SimplePointChecker;
import org.apache.commons.math3.optim.nonlinear.vector.Weight;
import org.apache.commons.math3.optim.nonlinear.vector.Target;
import org.apache.commons.math3.util.FastMath;
import org.junit.Test;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;

public class LevenbergMarquardtOptimizerTest {

    @Test
    public void testGetIterations() {
        // setup
        LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
        
        // create the least squares problem
        LeastSquaresProblem problem = LeastSquaresFactory.create(
                new ModelFunction(new MultivariateVectorFunction() {
                    @Override
                    public double[] value(double[] point) {
                        return new double[]{FastMath.pow(point[0], 4)};
                    }
                }),
                new ModelFunctionJacobian(new MultivariateMatrixFunction() {
                    @Override
                    public double[][] value(double[] point) {
                        return new double[][] {{0.25 * FastMath.pow(point[0], 3)}};
                    }
                }),
                new Target(new double[]{1}),
                new Weight(new double[]{1}),
                new InitialGuess(new double[]{3}),
                new MaxEval(100),
                new SimplePointChecker<>(1e-6, 1e-6)
        );

        // action
        Optimum result = optimizer.optimize(problem);

        // verify
        assertThat(result.getEvaluations(), greaterThan(1));
        // Issue in reporting iterations count
        assertThat(result.getIterations(), greaterThan(1));
    }
}
