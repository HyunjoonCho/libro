
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.util.JsonParserSequence;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

public class JsonParserSequenceTest {

    @Test
    public void testJsonParserSequenceSkipsToken() throws Exception {
        JsonParser parser1 = mock(JsonParser.class);
        JsonParser parser2 = mock(JsonParser.class);

        // Simulating parser1 ends its tokens.
        when(parser1.nextToken()).thenReturn(JsonToken.END_OBJECT);
        
        // Simulating parser2 having tokens START_OBJECT, FIELD_NAME, and VALUE_STRING.
        when(parser2.nextToken()).thenReturn(
                JsonToken.START_OBJECT,
                JsonToken.FIELD_NAME,
                JsonToken.VALUE_STRING,
                null
        );

        // Create a JsonParserSequence to concatenate parser1 and parser2.
        JsonParserSequence sequence = JsonParserSequence.createFlattened(parser1, parser2);

        // First call should skip parser1's END_OBJECT and start with parser2's START_OBJECT.
        assertEquals(JsonToken.START_OBJECT, sequence.nextToken());

        // Next token should be FIELD_NAME from parser2.
        assertEquals(JsonToken.FIELD_NAME, sequence.nextToken());

        // Third token should be VALUE_STRING from parser2.
        assertEquals(JsonToken.VALUE_STRING, sequence.nextToken());
        
        // Ensure it is now null, which suggests parsers are exhausted.
        assertEquals(null, sequence.nextToken());
    }
}
