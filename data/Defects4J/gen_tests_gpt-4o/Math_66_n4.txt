
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.univariate.BrentOptimizer;
import org.apache.commons.math3.optim.univariate.SearchInterval;
import org.apache.commons.math3.optim.univariate.UnivariatePointValuePair;
import org.apache.commons.math3.optim.univariate.UnivariateObjectiveFunction;
import org.apache.commons.math3.optim.univariate.UnivariateOptimizer;
import org.junit.Test;
import static org.junit.Assert.*;

public class BrentOptimizerBugTest {

    @Test
    public void testBrentOptimizer() {
        // Define a simple quadratic function f(x) = (x - 2)^2
        UnivariateFunction function = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return (x - 2) * (x - 2);
            }
        };

        // Create an instance of BrentOptimizer
        UnivariateOptimizer optimizer = new BrentOptimizer(1e-10, 1e-14);

        // Search for the minimum in the interval [0, 4]
        SearchInterval searchInterval = new SearchInterval(0, 4);
        UnivariateObjectiveFunction objectiveFunction = new UnivariateObjectiveFunction(function);

        // Execute optimization
        UnivariatePointValuePair result = optimizer.optimize(objectiveFunction, searchInterval);

        // The known minimum of the function is at x = 2.0; check if optimizer finds the correct point
        double foundMin = result.getPoint();
        assertEquals("BrentOptimizer did not find the correct minimum", 2.0, foundMin, 1e-5);
    }
}
