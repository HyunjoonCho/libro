
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonTypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.impl.AsPropertyTypeDeserializer;
import com.fasterxml.jackson.databind.jsontype.impl.TypeIdResolverBase;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertNull;

public class AsPropertyTypeDeserializerTest {

    static class CustomTypeIdResolver extends TypeIdResolverBase {
        @Override
        public String idFromValue(Object value) {
            return value.getClass().getSimpleName();
        }

        @Override
        public String idFromValueAndType(Object value, Class<?> suggestedType) {
            return idFromValue(value);
        }

        @Override
        public Class<?> typeFromId(String id) {
            if ("MyType".equals(id)) {
                return MyType.class;
            }
            return null;
        }
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.CUSTOM, property = "type")
    @JsonTypeIdResolver(CustomTypeIdResolver.class)
    @JsonDeserialize(using = AsPropertyTypeDeserializer.class)
    static class MyType {
        public String value;
    }

    @Test
    public void testAsPropertyTypeDeserializerWithEmptyString() throws Exception {
        String emptyJson = "\"\"";

        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT, true);

        MyType result = mapper.readValue(emptyJson, MyType.class);
        
        assertNull(result, "The deserialization result should be null for an empty string");
    }
}
