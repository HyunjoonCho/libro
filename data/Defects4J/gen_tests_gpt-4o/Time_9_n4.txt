
import org.junit.Test;
import org.joda.time.DateTimeZone;

import static org.junit.Assert.*;

public class DateTimeZoneTest {

    @Test
    public void testMaxOffset() {
        // Test parsing with the maximum valid offset
        try {
            DateTimeZone dateTimeZone = DateTimeZone.forOffsetHoursMinutes(23, 59);
            assertNotNull(dateTimeZone);
        } catch (IllegalArgumentException e) {
            fail("Failed to create DateTimeZone with maximum offset 23:59");
        }

        // Test parsing with offset one second beyond the maximum
        try {
            DateTimeZone.forOffsetHoursMinutesSeconds(23, 59, 60);
            fail("Expected IllegalArgumentException was not thrown for offset 23:59:60");
        } catch (IllegalArgumentException e) {
            // Exception is expected
            assertEquals("Invalid offset - should throw exception for offset one second beyond 23:59", e.getMessage());
        }
    }

    @Test
    public void testMinOffset() {
        // Test parsing with the minimum valid offset
        try {
            DateTimeZone dateTimeZone = DateTimeZone.forOffsetHoursMinutes(-23, -59);
            assertNotNull(dateTimeZone);
        } catch (IllegalArgumentException e) {
            fail("Failed to create DateTimeZone with minimum offset -23:59");
        }

        // Test parsing with offset one second beyond the minimum
        try {
            DateTimeZone.forOffsetHoursMinutesSeconds(-23, -59, -60);
            fail("Expected IllegalArgumentException was not thrown for negative offset -23:59:60");
        } catch (IllegalArgumentException e) {
            // Exception is expected
            assertEquals("Invalid offset - should throw exception for negative offset one second beyond -23:59", e.getMessage());
        }
    }
}
