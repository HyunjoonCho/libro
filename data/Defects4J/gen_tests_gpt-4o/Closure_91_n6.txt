
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;

import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class LendsAnnotationTest {

    @Test
    public void testLendsAnnotation() {
        // JavaScript code snippet using @lends annotation
        String originalJsCode = 
            "/**\n" +
            " * @name MyClass\n" +
            " * @class\n" +
            " * @extends {superClass1}\n" +
            " * @extends {superClass2}\n" +
            " */\n" +
            "dojo.declare('MyClass', [superClass1, superClass2], /** @lends {MyClass.prototype} */ {\n" +
            "  foo: function() {\n" +
            "    this.bar();\n" +
            "  },\n" +
            "  bar: function() {\n" +
            "    this.foo();\n" +
            "  }\n" +
            "});";

        // Initialize the Closure Compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();

        // Compile the provided JavaScript code
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                         SourceFile.fromCode("test.js", originalJsCode), 
                                         options);

        // Check if the compilation succeeded (no errors or warnings related to 'dangerous use of this')
        assertTrue("The Closure Compiler should not report errors related to this usage.", 
                   result.success);
    }
}
