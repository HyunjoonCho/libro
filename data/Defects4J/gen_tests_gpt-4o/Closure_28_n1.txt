
import com.google.javascript.jscomp.*;

public class InlineTest {

    public static void main(String[] args) {
        String code = "function f() { return false; } " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); " +
                      "if (!f()) alert('hi'); ";

        // Set up compiler
        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Create JS input and compile
        SourceFile input = SourceFile.fromCode("input.js", code);
        SourceFile extern = SourceFile.fromCode("externs.js", "");
        Result result = compiler.compile(extern, input, options);

        // Output the compiled code
        if (result.success) {
            System.out.println(compiler.toSource());
        } else {
            System.out.println("Compilation failed.");
            for (JSError error : result.errors) {
                System.out.println(error.toString());
            }
        }
    }
}
