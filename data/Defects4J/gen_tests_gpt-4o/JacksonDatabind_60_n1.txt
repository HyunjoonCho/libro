
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertTrue;

public class CommandAPDUTest {

    private static final class RemoteCall {
        @JsonProperty("args")
        private Object[] args;

        // Assume necessary constructor, getters, and setters
    }

    public static class CommandAPDU {
        @JsonIgnore // Ignore all other fields
        private byte[] apdu;

        @JsonCreator
        public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
            this.apdu = apdu.clone();
        }

        @JsonValue
        public byte[] getBytes() {
            return apdu.clone();
        }
    }

    private final ObjectMapper mapper;

    public CommandAPDUTest() {
        this.mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();
    }

    @Test
    public void testPolymorphicTypeWithJsonValue() throws Exception {
        // Create an instance of CommandAPDU with some bytes
        byte[] originalBytes = {1, 2, 3, 4, 5};
        CommandAPDU apdu = new CommandAPDU(originalBytes);

        // Serialize the CommandAPDU object
        String json = mapper.writeValueAsString(apdu);

        // Deserialize the JSON back to CommandAPDU object
        CommandAPDU deserializedApdu = (CommandAPDU) mapper.readValue(json, CommandAPDU.class);

        // Validate that the deserialized object is correct
        assertArrayEquals(originalBytes, deserializedApdu.getBytes());

        // Validate that the type information is preserved
        assertTrue(json.contains("CommandAPDU")); // Ensure type information is in JSON
    }
}
