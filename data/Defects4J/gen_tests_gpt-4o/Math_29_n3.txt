
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import org.apache.commons.math3.linear.OpenMapRealVector;
import org.apache.commons.math3.linear.RealVector;
import org.junit.Test;

public class OpenMapRealVectorTest {

    @Test
    public void testEbeMultiplyWithNaN() {
        double[] data1 = {1.0, Double.NaN, 3.0};
        double[] data2 = {2.0, 2.0, 2.0};

        RealVector v1 = new OpenMapRealVector(data1);
        RealVector v2 = new OpenMapRealVector(data2);

        RealVector result = v1.ebeMultiply(v2);

        // Expected output: [2.0, NaN, 6.0]
        assertEquals(3, result.getDimension());
        assertEquals(2.0, result.getEntry(0), 0.0);
        assertTrue(Double.isNaN(result.getEntry(1)));
        assertEquals(6.0, result.getEntry(2), 0.0);
    }

    @Test
    public void testEbeMultiplyWithInfinity() {
        double[] data1 = {1.0, 2.0, Double.POSITIVE_INFINITY};
        double[] data2 = {3.0, 0.0, 1.0};

        RealVector v1 = new OpenMapRealVector(data1);
        RealVector v2 = new OpenMapRealVector(data2);

        RealVector result = v1.ebeMultiply(v2);

        // Expected output: [3.0, 0.0, Infinity]
        assertEquals(3, result.getDimension());
        assertEquals(3.0, result.getEntry(0), 0.0);
        assertEquals(0.0, result.getEntry(1), 0.0);
        assertEquals(Double.POSITIVE_INFINITY, result.getEntry(2), 0.0);
    }

    @Test
    public void testEbeDivideWithNaN() {
        double[] data1 = {1.0, Double.NaN, 3.0};
        double[] data2 = {1.0, 1.0, 1.0};

        RealVector v1 = new OpenMapRealVector(data1);
        RealVector v2 = new OpenMapRealVector(data2);

        RealVector result = v1.ebeDivide(v2);

        // Expected output: [1.0, NaN, 3.0]
        assertEquals(3, result.getDimension());
        assertEquals(1.0, result.getEntry(0), 0.0);
        assertTrue(Double.isNaN(result.getEntry(1)));
        assertEquals(3.0, result.getEntry(2), 0.0);
    }

    @Test
    public void testEbeDivideWithInfinity() {
        double[] data1 = {Double.POSITIVE_INFINITY, 2.0, 6.0};
        double[] data2 = {1.0, 1.0, 0.0};

        RealVector v1 = new OpenMapRealVector(data1);
        RealVector v2 = new OpenMapRealVector(data2);

        RealVector result = v1.ebeDivide(v2);

        // Expected output: [Infinity, 2.0, Infinity]
        assertEquals(3, result.getDimension());
        assertEquals(Double.POSITIVE_INFINITY, result.getEntry(0), 0.0);
        assertEquals(2.0, result.getEntry(1), 0.0);
        assertEquals(Double.POSITIVE_INFINITY, result.getEntry(2), 0.0);
    }
}
