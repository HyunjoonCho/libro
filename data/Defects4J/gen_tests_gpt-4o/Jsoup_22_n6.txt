
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.junit.Test;
import static org.junit.Assert.*;

public class ElementTest {

    @Test
    public void testSiblingMethodsWithoutParent() {
        // Create an element with no parent
        Element orphanElement = new Element("div");

        try {
            // Attempt to access a sibling on an element without a parent
            Node nextSibling = orphanElement.nextSibling();
            assertNull("Expected nextSibling() to return null when there is no parent.", nextSibling);
        } catch (NullPointerException e) {
            fail("nextSibling() should not throw a NullPointerException when the element has no parent.");
        }

        try {
            // Attempt to access a sibling on an element without a parent
            Node previousSibling = orphanElement.previousSibling();
            assertNull("Expected previousSibling() to return null when there is no parent.", previousSibling);
        } catch (NullPointerException e) {
            fail("previousSibling() should not throw a NullPointerException when the element has no parent.");
        }

        try {
            // Attempt to access sibling elements on an element without a parent
            Iterable<Element> siblingElements = orphanElement.siblingElements();
            assertNotNull("Expected siblingElements() to return an empty iterable when there is no parent.", siblingElements);
            assertFalse("Expected siblingElements() to return an empty iterable when there is no parent.", siblingElements.iterator().hasNext());
        } catch (NullPointerException e) {
            fail("siblingElements() should not throw a NullPointerException when the element has no parent.");
        }
    }
}
