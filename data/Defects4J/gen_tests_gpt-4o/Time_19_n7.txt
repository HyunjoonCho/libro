
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TimezoneDSTTest {

    @Test
    public void testInconsistentTimeDuringDST() {
        // Create DateTime instances for each region
        DateTime britishDate = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.forID("Europe/London"));
        DateTime norwDate = new DateTime(2011, 10, 30, 2, 59, 0, 0, DateTimeZone.forID("Europe/Oslo"));
        DateTime finnishDate = new DateTime(2011, 10, 30, 3, 59, 0, 0, DateTimeZone.forID("Europe/Helsinki"));

        // Convert all dates to UTC and print them
        System.out.println(britishDate.toDateTime(DateTimeZone.UTC));
        System.out.println(norwDate.toDateTime(DateTimeZone.UTC));
        System.out.println(finnishDate.toDateTime(DateTimeZone.UTC));

        // Expected values pre-version 2.0 behavior
        DateTime expectedBritishInUtc = new DateTime(2011, 10, 30, 0, 59, 0, 0, DateTimeZone.UTC);
        DateTime expectedNorwInUtc = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.UTC);
        DateTime expectedFinnishInUtc = new DateTime(2011, 10, 30, 1, 59, 0, 0, DateTimeZone.UTC);

        // Assert that all DateTime objects should refer to the same instant
        assertEquals(expectedBritishInUtc, britishDate.toDateTime(DateTimeZone.UTC));
        assertEquals(expectedNorwInUtc, norwDate.toDateTime(DateTimeZone.UTC));
        assertEquals(expectedFinnishInUtc, finnishDate.toDateTime(DateTimeZone.UTC));
    }
}
