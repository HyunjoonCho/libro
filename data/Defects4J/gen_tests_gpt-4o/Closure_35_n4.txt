public void testAssignmentToRecordTypeInConditional() {
    final String script = "function func(a, b) {\n" +
            " var results;\n" +
            " if (a) {\n" +
            " results = {};\n" +
            " results.prop1 = {a: 3};\n" +
            " }\n" +
            " if (b) {\n" +
            " results = results || {};\n" +
            " results.prop2 = 'prop2';\n" +
            " } else {\n" +
            " results = results || {};\n" +
            " results.prop3 = 'prop3';\n" +
            " }\n" +
            " return results;\n" +
            "}";
    
    Context cx = Context.enter();
    Scriptable scope = cx.initStandardObjects();
    cx.evaluateString(scope, script, "script", 1, null);

    Function func = (Function) scope.get("func", scope);

    Scriptable result1 = (Scriptable) func.call(cx, scope, scope, new Object[]{true, false});
    assertNotNull(result1.get("prop1", result1));
    assertEquals("{a=3}", result1.get("prop1", result1).toString());
    assertNull(result1.get("prop2", result1));
    assertEquals("prop3", result1.get("prop3", result1));

    Scriptable result2 = (Scriptable) func.call(cx, scope, scope, new Object[]{false, true});
    assertNull(result2.get("prop1", result2));
    assertEquals("prop2", result2.get("prop2", result2));
    assertNull(result2.get("prop3", result2));
    
    Scriptable result3 = (Scriptable) func.call(cx, scope, scope, new Object[]{true, true});
    assertNotNull(result3.get("prop1", result3));
    assertEquals("{a=3}", result3.get("prop1", result3).toString());
    assertEquals("prop2", result3.get("prop2", result3));
    assertNull(result3.get("prop3", result3));
    
    Scriptable result4 = (Scriptable) func.call(cx, scope, scope, new Object[]{false, false});
    assertNull(result4.get("prop1", result4));
    assertNull(result4.get("prop2", result4));
    assertEquals("prop3", result4.get("prop3", result4));
    
    Context.exit();
}