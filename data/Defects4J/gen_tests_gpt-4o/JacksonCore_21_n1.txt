
import com.fasterxml.jackson.core.JsonFactory;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.filter.FilteringParserDelegate;
import com.fasterxml.jackson.core.filter.TokenFilter;
import com.fasterxml.jackson.core.filter.TokenFilter.Inclusion;
import com.fasterxml.jackson.core.filter.NameMatchFilter;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import java.io.IOException;

public class FilteringParserDelegateTest {

    @Test
    public void testMissingEndObject() throws IOException {
        String jsonString = "{"
                + "\"a\":123,"
                + "\"array\":[1,2],"
                + "\"ob\": {"
                + "\"value0\":2,"
                + "\"value\":3,"
                + "\"value2\":4"
                + "},"
                + "\"b\":true"
                + "}";

        JsonFactory jsonFactory = new JsonFactory();
        JsonParser originalParser = jsonFactory.createParser(jsonString);

        TokenFilter filter = new NameMatchFilter("value");
        JsonParser filteredParser = new FilteringParserDelegate(
                originalParser,
                filter,
                Inclusion.INCLUDE_PATH,
                false
        );

        StringBuilder result = new StringBuilder();
        JsonToken token;
        while ((token = filteredParser.nextToken()) != null) {
            result.append(filteredParser.getText());
            if (token == JsonToken.START_OBJECT || token == JsonToken.END_OBJECT ||
                token == JsonToken.START_ARRAY || token == JsonToken.END_ARRAY) {
                result.append(token.asString());
            }
        }

        String expectedOutput = "{\"ob\":{\"value\":\"3\"}}";
        assertEquals(expectedOutput, result.toString());
    }
}
