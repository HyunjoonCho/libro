
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.Option;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;

import static org.junit.Assert.assertTrue;

public class HelpFormatterTest {

    @Test
    public void testIncorrectLineWrapping() {
        // Create the option with a long description
        Option option = new Option("d", "description", true,
                "This is a long description that is intended to test the wrapping functionality of the HelpFormatter class."
                + "It should correctly wrap the text to adhere to the specified width."
                + "However, due to a bug, subsequent lines are improperly wrapped.");

        Options options = new Options();
        options.addOption(option);

        // Use HelpFormatter to print the usage
        HelpFormatter formatter = new HelpFormatter();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        PrintWriter pw = new PrintWriter(out);

        int width = 40; // Specify a wrapping width
        formatter.printHelp(pw, width, "commandlineapp", null, options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null, false);

        pw.flush();
        String formattedOutput = out.toString();

        // Split the output into lines
        String[] outputLines = formattedOutput.split(System.lineSeparator());

        // Check first line - expected line length should be <= width
        assertTrue("First line is not wrapped correctly", outputLines[3].length() <= width);

        // Check subsequent lines - expected line length should be <= width
        for (int i = 4; i < outputLines.length; i++) {
            assertTrue("Line " + i + " is not wrapped correctly: " + outputLines[i], outputLines[i].length() <= width);
        }
    }
}
