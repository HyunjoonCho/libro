
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.fasterxml.jackson.databind.ser.std.SqlDateSerializer;
import org.junit.Test;

import java.sql.Date;
import java.text.SimpleDateFormat;

import static org.junit.Assert.*;

public class CustomSqlDateSerializerTest {

    @Test
    public void testCustomSqlDateSerializationGlobalFormat() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        // Attempt to set the global serialization format for java.sql.Date
        mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));

        Date sqlDate = Date.valueOf("2023-10-01");
        String json = mapper.writeValueAsString(sqlDate);
        
        // Verify if the date is serialized as "yyyy-MM-dd"
        assertEquals("\"2023-10-01\"", json);
    }

    @Test
    public void testCustomSqlDateSerializerOverride() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Workaround to achieve desired serialization format with SqlDateSerializer
        mapper.registerModule(new SimpleModule() {
            {
                addSerializer(
                        java.sql.Date.class,
                        new SqlDateSerializer().withFormat(false, new SimpleDateFormat("yyyy-MM-dd"))
                );
            }
        });

        Date sqlDate = Date.valueOf("2023-10-01");
        String json = mapper.writeValueAsString(sqlDate);
        
        // Verify if the date is serialized as "yyyy-MM-dd"
        assertEquals("\"2023-10-01\"", json);
    }
}
