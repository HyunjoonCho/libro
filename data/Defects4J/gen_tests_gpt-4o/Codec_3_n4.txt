
import org.apache.commons.codec.language.DoubleMetaphone;
import org.junit.Test;
import static org.junit.Assert.*;

public class DoubleMetaphoneTest {

    private final DoubleMetaphone doubleMetaphone = new DoubleMetaphone();

    @Test
    public void testHandleGMethod() {
        // Test the alternative encoding for "Angier"
        String primaryAngier = doubleMetaphone.doubleMetaphone("Angier", false);
        String alternateAngier = doubleMetaphone.doubleMetaphone("Angier", true);
        assertEquals("ANKR", primaryAngier); // Please adjust if necessary, depending on expected primary encoding
        assertEquals("ANJR", alternateAngier);

        // Test the alternative encoding for "rogier"
        String primaryRogier = doubleMetaphone.doubleMetaphone("rogier", false);
        String alternateRogier = doubleMetaphone.doubleMetaphone("rogier", true);
        assertEquals("RKR", primaryRogier); // Please adjust if necessary, depending on expected primary encoding
        assertEquals("RJR", alternateRogier);
    }

    @Test
    public void testHandleLMethod() {
        // Test the alternative encoding for "cabrillo"
        String primaryCabrillo = doubleMetaphone.doubleMetaphone("cabrillo", false);
        String alternateCabrillo = doubleMetaphone.doubleMetaphone("cabrillo", true);
        assertEquals("KPRL", primaryCabrillo); // Please adjust if necessary, depending on expected primary encoding
        assertEquals("KPR", alternateCabrillo);
    }

    @Test
    public void testConditionL0Method() {
        // Test the alternative encoding for "gallegos"
        String primaryGallegos = doubleMetaphone.doubleMetaphone("gallegos", false);
        String alternateGallegos = doubleMetaphone.doubleMetaphone("gallegos", true);
        assertEquals("KLKS", primaryGallegos); // Please adjust if necessary, depending on expected primary encoding
        assertEquals("KKS", alternateGallegos);
    }
}
