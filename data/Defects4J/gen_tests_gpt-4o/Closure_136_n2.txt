
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.Result;
import com.google.javascript.jscomp.SourceFile;
import org.junit.Test;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

public class SuperRenamingTest {

    @Test
    public void testSuperIsNotRenamed() {
        // JavaScript code containing Prototype's $super usage
        String jsCode = "function Example() {}\n" +
                        "Example.prototype.method = function($super) {\n" +
                        "    $super();\n" +
                        "};";

        // Create a Closure Compiler instance
        Compiler compiler = new Compiler();

        // Set up compiler options for advanced optimizations
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.ADVANCED_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Compile the JavaScript code
        Result result = compiler.compile(SourceFile.fromCode("externs.js", ""), 
                                         SourceFile.fromCode("test.js", jsCode), 
                                         options);

        // Get the compiled code
        String compiledCode = compiler.toSource();

        // Validate the compiled code
        // Ensure '$super' is not replaced
        assertFalse("The identifier $super should not be renamed.", compiledCode.contains("$super$$"));
        assertTrue("The identifier $super should be present in the compiled code.", compiledCode.contains("$super"));
    }
}
