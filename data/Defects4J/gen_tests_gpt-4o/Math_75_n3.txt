
import static org.junit.Assert.assertEquals;

import org.apache.commons.math3.stat.Frequency;
import org.junit.Test;

public class FrequencyTest {

    @Test
    public void testGetPctObjectDeprecated() {
        // Create a Frequency instance and add some data
        Frequency frequency = new Frequency();
        frequency.addValue("apple");
        frequency.addValue("apple");
        frequency.addValue("banana");
        frequency.addValue("banana");
        frequency.addValue("banana");
        frequency.addValue("orange");

        // Use the deprecated getPct(Object) method which incorrectly uses getCumPct
        double pctAppleDeprecated = frequency.getPct((Object) "apple");
        double pctBananaDeprecated = frequency.getPct((Object) "banana");

        // The expected percentage using getPct should be:
        // "apple": 2 occurrences out of 6 total (2/6 = 0.3333)
        // "banana": 3 occurrences out of 6 total (3/6 = 0.5)

        // Verify that the deprecated method returns cumulative percentage
        // Expecting incorrect cumulative results due to the issue
        double expectedPctApple = 0.3333; // Non-cumulative percentage for "apple"
        double expectedPctBanana = 0.5;   // Non-cumulative percentage for "banana"
        
        // In an incorrect implementation, `getPct` would return `getCumPct`
        assertEquals(expectedPctApple, pctAppleDeprecated, 0.0001);
        assertEquals(expectedPctBanana, pctBananaDeprecated, 0.0001);
    }

    @Test
    public void testGetPctComparableCorrect() {
        // Create a Frequency instance and add some data
        Frequency frequency = new Frequency();
        frequency.addValue("apple");
        frequency.addValue("apple");
        frequency.addValue("banana");
        frequency.addValue("banana");
        frequency.addValue("banana");
        frequency.addValue("orange");

        // Use the recommended getPct(Comparable) method which correctly calculates percentages
        double pctApple = frequency.getPct("apple");
        double pctBanana = frequency.getPct("banana");

        // The expected percentage using getPct should be the same:
        // "apple": 2 occurrences out of 6 total (2/6 = 0.3333)
        // "banana": 3 occurrences out of 6 total (3/6 = 0.5)

        // Verify that the correct getPct method returns correct percentage
        double expectedPctApple = 0.3333;
        double expectedPctBanana = 0.5;
        
        assertEquals(expectedPctApple, pctApple, 0.0001);
        assertEquals(expectedPctBanana, pctBanana, 0.0001);
    }
}
