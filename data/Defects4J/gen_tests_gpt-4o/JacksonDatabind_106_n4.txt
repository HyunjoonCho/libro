
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.JsonMappingException;
import com.fasterxml.jackson.databind.node.TreeTraversingParser;
import org.junit.Test;

import java.io.IOException;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

public class TreeTraversingParserBoundsTest {

    // Class representing the JSON structure
    public static class IntClass {
        public int x;
        
        @Override
        public String toString() {
            return String.valueOf(x);
        }
    }

    private final ObjectMapper mapper = new ObjectMapper();

    // Helper method to perform deserialization from JSON and Tree
    private void assertMismatchedInputException(String json) {
        try {
            // Read JSON as a tree and deserialize
            JsonNode tree = mapper.readTree(json);
            JsonParser treeParser = new TreeTraversingParser(tree);
            assertThrows(JsonMappingException.class, () -> mapper.readValue(treeParser, IntClass.class));

            // Deserialize directly from JSON string
            assertThrows(JsonMappingException.class, () -> mapper.readValue(json, IntClass.class));
        } catch (IOException e) {
            // Any exceptions here indicate parsing problems, which we don't expect
            throw new AssertionError("Unexpected exception", e);
        }
    }

    @Test
    public void testOutOfBoundsIntDeserialization() {
        // In the int range
        compareTreeAndDirect("{\"x\": 0}", 0);
        compareTreeAndDirect("{\"x\": 10}", 10);
        
        // Out of int range should yield exceptions
        assertMismatchedInputException("{\"x\": 2147483648}");
        assertMismatchedInputException("{\"x\": 2147483649}");
        assertMismatchedInputException("{\"x\": -2147483649}");
        assertMismatchedInputException("{\"x\": -4294967295}");
        
        // Test cases for values in scientific notation
        assertMismatchedInputException("{\"x\": 1e10}");
        assertMismatchedInputException("{\"x\": -1e10}");

        // Test cases for fractional values
        assertMismatchedInputException("{\"x\": 0.1}");
        assertMismatchedInputException("{\"x\": 1.9}");
    }

    // Helper method to verify consistent behavior for in-bound values
    private void compareTreeAndDirect(String json, int expected) {
        try {
            // Deserialize using TreeTraversingParser
            JsonNode tree = mapper.readTree(json);
            TreeTraversingParser treeParser = new TreeTraversingParser(tree);
            IntClass fromTree = mapper.readValue(treeParser, IntClass.class);
            assertEquals(expected, fromTree.x);

            // Direct deserialization
            IntClass fromDirect = mapper.readValue(json, IntClass.class);
            assertEquals(expected, fromDirect.x);
        } catch (IOException e) {
            // If there are parsing errors, we fail the test
            throw new AssertionError("Unexpected exception", e);
        }
    }
}
