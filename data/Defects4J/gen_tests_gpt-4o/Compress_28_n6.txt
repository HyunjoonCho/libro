
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Paths;

import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;
import org.junit.Test;

public class TarArchiveInputStreamTest {

    @Test
    public void testCorruptedBzip2() {
        String archivePath = Paths.get("testdata/test.tar.bz2").toString();
        TarArchiveInputStream input = null;

        try {
            input = new TarArchiveInputStream(new BZip2CompressorInputStream(
                new FileInputStream(archivePath), true));

            ArchiveEntry nextEntry = input.getNextEntry();

            while (nextEntry != null) {
                String outputPath = Paths.get("/tmp/", nextEntry.getName()).toString();
                OutputStream out = new FileOutputStream(outputPath);
                byte[] buffer = new byte[1024];
                int len;
                while ((len = input.read(buffer)) != -1) {
                    out.write(buffer, 0, len);
                }
                out.close();
                nextEntry = input.getNextEntry();
            }

            fail("Expected an IOException to be thrown due to the corrupted tar file.");
        } catch (IOException e) {
            // Expected exception due to the corrupted tar file, test passes
            assertNotNull(e.getMessage());
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    // Ignoring exception on close
                }
            }
        }
    }
}
