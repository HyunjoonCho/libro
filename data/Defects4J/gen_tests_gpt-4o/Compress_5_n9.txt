
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import static org.junit.Assert.assertThrows;

public class ZipArchiveInputStreamTest {

    @Test
    public void testTruncatedZipArchive() {
        // Example of a truncated ZIP file header (not a valid zip file)
        byte[] truncatedData = {
            0x50, 0x4B, 0x03, 0x04, // Local file header signature
            // Missing parts of the ZIP file data
        };

        try (ZipArchiveInputStream zipInputStream = new ZipArchiveInputStream(new ByteArrayInputStream(truncatedData))) {
            byte[] buffer = new byte[10];
            IOException exception = assertThrows(IOException.class, () -> {
                int bytesRead = zipInputStream.read(buffer);
                while (bytesRead != -1) {
                    bytesRead = zipInputStream.read(buffer);
                }
            });

            // Assert that an IOException with the expected message is thrown
            final String expectedMessage = "Truncated ZIP file";
            assert(exception.getMessage().contains(expectedMessage));
        } catch (IOException e) {
            // Handle potential I/O exceptions during stream operations
            e.printStackTrace();
        }
    }
}
