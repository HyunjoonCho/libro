
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipFile;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

public class ZipArchiveTest {

    @Test
    public void testZipArchiveEntryEquality() throws IOException {
        // Create a zip file for testing
        File tempZipFile = createTestZipFile();

        // Read the entry using ZipArchiveInputStream
        ZipArchiveEntry inputStreamEntry = null;
        try (ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(getZipFileBytes(tempZipFile)))) {
            inputStreamEntry = zais.getNextZipEntry();
        }

        // Read the entry using ZipFile
        ZipArchiveEntry zipFileEntry = null;
        try (ZipFile zipFile = new ZipFile(tempZipFile)) {
            Enumeration<ZipArchiveEntry> entries = zipFile.getEntries();
            if (entries.hasMoreElements()) {
                zipFileEntry = entries.nextElement();
            }
        }

        // Test that the entries are not equal
        assertNotEquals("ZipArchiveEntry from InputStream and ZipFile should not be equal", inputStreamEntry, zipFileEntry);
        
        // Optionally assert on the specific issue with comment handling
        if (inputStreamEntry != null && zipFileEntry != null) {
            assertEquals("Comment difference causes inequality",
                         inputStreamEntry.getComment() == null ? "" : inputStreamEntry.getComment(),
                         zipFileEntry.getComment());
        }

        // Cleanup
        if (tempZipFile.exists()) {
            tempZipFile.delete();
        }
    }

    private File createTestZipFile() throws IOException {
        File tempFile = File.createTempFile("test", ".zip");
        try (FileOutputStream fos = new FileOutputStream(tempFile);
             ZipOutputStream zos = new ZipOutputStream(fos)) {
            ZipEntry entry = new ZipEntry("test.txt");
            zos.putNextEntry(entry);
            zos.write("Test Content".getBytes());
            zos.closeEntry();
        }
        return tempFile;
    }

    private byte[] getZipFileBytes(File zipFile) throws IOException {
        try (ByteArrayOutputStream bos = new ByteArrayOutputStream();
             FileOutputStream fos = new FileOutputStream(zipFile);
             ZipOutputStream zos = new ZipOutputStream(fos)) {
            ZipEntry entry = new ZipEntry("test.txt");
            zos.putNextEntry(entry);
            zos.write("Test Content".getBytes());
            zos.closeEntry();

            bos.writeTo(fos);
            return bos.toByteArray();
        }
    }
}
