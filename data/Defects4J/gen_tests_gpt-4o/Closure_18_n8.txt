
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.DependencyOptions;
import com.google.javascript.jscomp.JSSourceFile;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

public class DependencySortingTest {

    @Test
    public void testDependencySortingWithoutClosurePass() {
        Compiler compiler = new Compiler();

        // Set closurePass to false
        CompilerOptions options = new CompilerOptions();
        options.setClosurePass(false);

        // Enable dependency sorting
        DependencyOptions dependencyOptions = new DependencyOptions();
        dependencyOptions.setDependencySorting(true);
        options.setDependencyOptions(dependencyOptions);

        // Create source files with dependencies
        JSSourceFile source1 = JSSourceFile.fromCode("file1.js", "goog.provide('example');\n");
        JSSourceFile source2 = JSSourceFile.fromCode("file2.js", "goog.require('example');\n");

        // Execute compilation
        List<JSSourceFile> sourceFiles = List.of(source2, source1);
        compiler.compile(List.of(), sourceFiles, options);

        // Check the order of files in the compiled result
        try {
            String compiledCode = compiler.toSource();
            int index1 = compiledCode.indexOf("goog.provide('example');");
            int index2 = compiledCode.indexOf("goog.require('example');");

            // Ensure that the provide statement is before the require statement
            assertTrue("Dependency ordering failed: provide statement should precede the require statement.",
                    index1 < index2);
        } catch (Exception e) {
            fail("Compilation failed: " + e.getMessage());
        }
    }
}
