
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidFormatException;
import com.fasterxml.jackson.databind.exc.MismatchedInputException;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class TreeTraversingParserTest {

    public static class IntClass {
        public int x;

        @Override
        public String toString() {
            return String.valueOf(x);
        }
    }

    @Test
    public void compareFromTree_shouldShowInconsistentBehavior() {
        ObjectMapper mapper = new ObjectMapper();

        String jsonInput1 = "{\"x\": 2147483648}";
        assertParsingBehaviorForJsonInput(mapper, jsonInput1, MismatchedInputException.class, JsonMappingException.class);

        String jsonInput2 = "{\"x\": -2147483649}";
        assertParsingBehaviorForJsonInput(mapper, jsonInput2, MismatchedInputException.class, JsonMappingException.class);

        String jsonInput3 = "{\"x\": 1e10}";
        assertParsingBehaviorForJsonInput(mapper, jsonInput3, MismatchedInputException.class, JsonMappingException.class);

        System.out.println("Test cases executed. Review assertions for failure indications.");
    }

    private void assertParsingBehaviorForJsonInput(ObjectMapper mapper, String jsonInput, Class<?> fromTreeException, Class<?> fromStringException) {
        String fromTree;
        try {
            JsonNode tree = mapper.readTree(jsonInput);
            fromTree = mapper.readerFor(IntClass.class).readValue(tree).toString();
        } catch (Exception e) {
            assertTrue(fromTreeException.isInstance(e));
            fromTree = e.getClass().getSimpleName();
        }

        String fromString;
        try {
            fromString = mapper.readerFor(IntClass.class).readValue(jsonInput).toString();
        } catch (Exception e) {
            assertTrue(fromStringException.isInstance(e));
            fromString = e.getClass().getSimpleName();
        }

        System.out.printf("|%30s | %30s | %-30s|\n", jsonInput, fromTree, fromString);
    }
}
