public void testTreeTraversingParserIntBounds() throws IOException {
    ObjectMapper mapper = new ObjectMapper();

    // Test case for overflow with large values
    JsonNode treeNodeLarge = mapper.readTree("{\"x\": 1e10}");
    try {
        mapper.readerFor(IntClass.class).readValue(treeNodeLarge);
        fail("Expected JsonMappingException due to overflow not thrown for large integer");
    } catch (JsonMappingException e) {
        // Expected exception
    }

    JsonNode treeNodeLargeNegative = mapper.readTree("{\"x\": -2147483649}");
    try {
        mapper.readerFor(IntClass.class).readValue(treeNodeLargeNegative);
        fail("Expected JsonMappingException due to overflow not thrown for large negative integer");
    } catch (JsonMappingException e) {
        // Expected exception
    }

    JsonNode treeNodeTrue = mapper.readTree("{\"x\": true}");
    try {
        mapper.readerFor(IntClass.class).readValue(treeNodeTrue);
        fail("Expected MismatchedInputException for boolean value");
    } catch (MismatchedInputException e) {
        // Expected exception
    }

    JsonNode treeNodeFloat = mapper.readTree("{\"x\": 1.9}");
    try {
        mapper.readerFor(IntClass.class).readValue(treeNodeFloat);
    } catch (JsonMappingException e) {
        fail("Unexpected exception for float converted to int");
    }

    JsonNode treeNodeStringOverflow = mapper.readTree("{\"x\": \"2147483648\"}");
    try {
        mapper.readerFor(IntClass.class).readValue(treeNodeStringOverflow);
        fail("Expected InvalidFormatException for string overflow");
    } catch (InvalidFormatException e) {
        // Expected exception
    }
}