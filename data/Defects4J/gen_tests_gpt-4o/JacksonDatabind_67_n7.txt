public void testMapKeyDeserializerModifier() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule module = new SimpleModule();
    module.setDeserializerModifier(new BeanDeserializerModifier() {
        @Override
        public KeyDeserializer modifyKeyDeserializer(
                DeserializationConfig config,
                JavaType type,
                KeyDeserializer deserializer) {
            if (!type.isEnumType()) {
                return super.modifyKeyDeserializer(config, type, deserializer);
            }
            return new KeyDeserializer() {
                @Override
                public Object deserializeKey(String key, DeserializationContext ctxt)
                        throws IOException, JsonProcessingException {
                    Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                    return Enum.valueOf(rawClass, key.toUpperCase());
                }
            };
        }
    });
    mapper.registerModule(module);

    String json = "{\"keyone\": \"value1\", \"keytwo\": \"value2\"}";
    TypeReference<ImmutableMap<TestEnum, String>> typeRef = new TypeReference<ImmutableMap<TestEnum, String>>() {};
    
    // Before the bug fix, this will fail because the key deserializer will not handle lowercase properly
    ImmutableMap<TestEnum, String> result = mapper.readValue(json, typeRef);
    assertEquals("value1", result.get(TestEnum.KEYONE));
    assertEquals("value2", result.get(TestEnum.KEYTWO));
}

public enum TestEnum {
    KEYONE, KEYTWO
}