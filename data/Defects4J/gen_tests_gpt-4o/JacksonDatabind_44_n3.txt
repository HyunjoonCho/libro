
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.annotation.JsonTypeInfo.As;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.StdTypeResolverBuilder;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class PolymorphicTypeTest {

    @JsonTypeInfo(use = Id.NAME, include = As.PROPERTY, property = "type", defaultImpl = BaseType.class)
    @JsonSubTypes({
        @Type(value = SubType.class, name = "subtype")
    })
    static class BaseType {
        public String baseProperty;

        public String getBaseProperty() {
            return baseProperty;
        }

        public void setBaseProperty(String baseProperty) {
            this.baseProperty = baseProperty;
        }
    }

    static class SubType extends BaseType {
        public String subProperty;

        public String getSubProperty() {
            return subProperty;
        }

        public void setSubProperty(String subProperty) {
            this.subProperty = subProperty;
        }
    }

    @Test
    public void testPolymorphicDeserializationWithDefaultImpl() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        String json = "{\"type\": \"subtype\", \"baseProperty\": \"baseValue\", \"subProperty\": \"subValue\"}";

        BaseType result = mapper.readValue(json, BaseType.class);

        assertNotNull("Deserialization result should not be null", result);
        assertEquals("baseValue", result.getBaseProperty());
        assertEquals("subValue", ((SubType)result).getSubProperty());
    }
}
