
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.jupiter.api.Test;

import java.io.IOException;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class JsonShapeTest {

    static class NumberShapeTest {
        @JsonFormat(shape = JsonFormat.Shape.NUMBER)
        public int value;

        public NumberShapeTest(int value) {
            this.value = value;
        }
    }

    // This test case simulates the issue described;
    // It tests that if shape is defined as NUMBER, the output should strictly be numeric.
    @Test
    public void testExplicitNumberShape() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.WRITE_NUMBERS_AS_STRINGS);

        // Serialize class with explicitly set shape to NUMBER
        NumberShapeTest testObj = new NumberShapeTest(42);

        // Before fix: the output might incorrectly honor SerializationFeature setting
        // After fix: the output should ignore SerializationFeature and honor the shape
        String jsonResult = mapper.writeValueAsString(testObj);

        // Assert that the result is numeric and not a string
        assertEquals("{\"value\":42}", jsonResult);
    }
}
