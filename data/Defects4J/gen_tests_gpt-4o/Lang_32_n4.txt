public void testThreadLocalMemoryLeak() throws Exception {
    Class<?> clazz = Class.forName("org.apache.commons.lang3.builder.ToStringStyle");
    Field threadLocalField = clazz.getDeclaredField("threadLocal");
    threadLocalField.setAccessible(true);
    ThreadLocal<?> threadLocal = (ThreadLocal<?>) threadLocalField.get(null);

    Object before = threadLocal.get();

    // Simulate use of ToStringStyle
    Method appendClassNameMethod = clazz.getDeclaredMethod("appendClassName", StringBuffer.class, Object.class);
    appendClassNameMethod.setAccessible(true);
    appendClassNameMethod.invoke(getCustomToStringStyleInstance(), new StringBuffer(), new Object());

    assertNotNull("ThreadLocal should have a value set after usage", threadLocal.get());

    // Clear ThreadLocal to simulate memory leak resolution
    threadLocal.remove();

    assertNull("ThreadLocal should be cleared after removal", threadLocal.get());
}

private Object getCustomToStringStyleInstance() throws Exception {
    // Normally we would create or obtain an instance of a class that uses ToStringStyle,
    // for the purposes of this test, a mock or similar logic may be used
    Class<?> clazz = Class.forName("org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle");
    Constructor<?> constructor = clazz.getDeclaredConstructor();
    constructor.setAccessible(true);
    return constructor.newInstance();
}