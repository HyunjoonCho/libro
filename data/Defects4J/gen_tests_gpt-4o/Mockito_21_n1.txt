
import static org.mockito.Mockito.*;

import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.invocation.InvocationOnMock;
import org.mockito.stubbing.Answer;

import java.util.ArrayList;
import java.util.List;

interface UserAccount {
    List<String> getEmails();
    void addEmail(String email);
}

abstract class FakeUserAccount implements UserAccount {
    private final List<String> emails = new ArrayList<>();

    @Override
    public void addEmail(String email) {
        emails.add(email);
    }

    @Override
    public List<String> getEmails() {
        return new ArrayList<>(emails);
    }
}

public class SpyAbstractClassTest {

    @Test
    public void testSpyOnAbstractClass() {
        // Create a spy of the abstract class
        FakeUserAccount userAccountSpy = spy(new FakeUserAccount() {});

        // Use the spy to verify behavior
        userAccountSpy.addEmail("test@example.com");
        userAccountSpy.addEmail("another@example.com");

        // Assert the method behavior using the spy
        assertEquals(2, userAccountSpy.getEmails().size());
        assertTrue(userAccountSpy.getEmails().contains("test@example.com"));
        assertTrue(userAccountSpy.getEmails().contains("another@example.com"));

        // Verify addEmail is called twice
        verify(userAccountSpy, times(2)).addEmail(anyString());
    }

    private void assertEquals(int expected, int actual) {
        if (expected != actual) {
            throw new AssertionError("Expected " + expected + " but got " + actual);
        }
    }

    private void assertTrue(boolean condition) {
        if (!condition) {
            throw new AssertionError("Condition is not true.");
        }
    }
}
