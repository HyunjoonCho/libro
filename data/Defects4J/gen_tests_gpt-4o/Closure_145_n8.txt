
import org.junit.Test;
import static org.junit.Assert.*;
import javax.script.*;

public class ClosureCompilerBugTest {

    @Test
    public void testLabeledLoopsWithBreaks() throws ScriptException {
        // JS code to be compiled
        String originalCode = "var i = 0;\n" +
                              "lab1: do {\n" +
                              "  lab2: do {\n" +
                              "    i++;\n" +
                              "    if (1) {\n" +
                              "      break lab2;\n" +
                              "    } else {\n" +
                              "      break lab1;\n" +
                              "    }\n" +
                              "  } while(false);\n" +
                              "} while(false);\n" +
                              "console.log(i);";

        // Set up JavaScript engine
        ScriptEngine engine = new ScriptEngineManager().getEngineByName("nashorn");

        // Execute original JavaScript and check output
        engine.eval(originalCode);
        Object originalOutput = engine.get("i");
        assertEquals(1, originalOutput);

        // Mock-up compilation step (assuming Closure Compiler minification)
        String compiledCode = "var a=0;do b:do{a++;break b}while(0);while(0);";

        // Execute compiled JavaScript and check output (simulating IE misbehavior)
        engine.eval(compiledCode);
        Object compiledOutput = engine.get("a");
        
        // This would fail in IE due to the lack of curly brackets
        assertEquals("Expected output in IE", originalOutput, compiledOutput);
    }
}
