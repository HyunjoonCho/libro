
import org.apache.commons.math3.ode.*;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.junit.Test;
import static org.junit.Assert.*;

public class ODEEventDetectionTest {

    @Test
    public void testCloseEventsDetection() {
        FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {
            public int getDimension() {
                return 1;
            }

            public void computeDerivatives(double t, double[] y, double[] yDot) {
                yDot[0] = 1;
            }
        };

        DormandPrince853Integrator integrator = new DormandPrince853Integrator(1.0e-8, 1.0, 1.0e-10, 1.0e-10);
        double[] y = new double[] { 0.0 };

        EventHandler event1 = new EventHandler() {
            public double g(double t, double[] y) {
                // Event at t = 90
                return t - 90.0;
            }

            public Action eventOccurred(double t, double[] y, boolean increasing) {
                System.out.println("Event 1 occurred at t = " + t);
                return Action.CONTINUE;
            }

            public void init(double t0, double[] y0, double t) {
            }

            public double getMaxCheckInterval() {
                return 1.0;
            }

            public double getThreshold() {
                return 1.0e-8;
            }

            public double getMaxIterationCount() {
                return 100;
            }
        };

        EventHandler event2 = new EventHandler() {
            public double g(double t, double[] y) {
                // Event at t = 135
                return t - 135.0;
            }

            public Action eventOccurred(double t, double[] y, boolean increasing) {
                System.out.println("Event 2 occurred at t = " + t);
                return Action.CONTINUE;
            }

            public void init(double t0, double[] y0, double t) {
            }

            public double getMaxCheckInterval() {
                return 1.0;
            }

            public double getThreshold() {
                return 1.0e-8;
            }

            public double getMaxIterationCount() {
                return 100;
            }
        };

        integrator.addEventHandler(event1, 1.0, 1.0e-8, 100);
        integrator.addEventHandler(event2, 1.0, 1.0e-8, 100);

        integrator.integrate(ode, 0.0, y, 150.0, y);

        double tolerance = 1.0e-8;
        assertEquals(90.0, y[0], tolerance);
        assertEquals(135.0, y[0], tolerance);
    }
}
