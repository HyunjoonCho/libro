
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.apache.commons.compress.utils.IOUtils;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

public class TarArchiveInputStreamTest {

    @Test
    public void testLargeUserIdInTarEntry() {
        // Simulated TAR header with large user ID (user ID is typically at offset 108 in the header)
        byte[] tarHeader = new byte[512];
        System.arraycopy("testfile.txt".getBytes(StandardCharsets.UTF_8), 0, tarHeader, 0, "testfile.txt".length());
        
        // Simulating large user-id in the TAR header 
        // Normally user-id is represented from offset 108 - 115 octal fields
        byte[] largeUserId = "62410554".getBytes(StandardCharsets.UTF_8);
        System.arraycopy(largeUserId, 0, tarHeader, 108, largeUserId.length);

        // Adjusting checksum to pass header parsing (fake checksum for demonstration purposes)
        System.arraycopy("123456".getBytes(StandardCharsets.UTF_8), 0, tarHeader, 148, "123456".length());

        // Set null termination
        tarHeader[124] = '\0';
        tarHeader[125] = '\0';

        // A small content for our fake file
        byte[] content = "Hello, World!".getBytes(StandardCharsets.UTF_8);
        
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            baos.write(tarHeader); // fake header
            baos.write(content); // content of the fake entry
            // Pad to reach the 512-byte block
            for (int i = content.length; i < 512; i++) {
                baos.write(0);
            }
        } catch (IOException e) {
            fail("Failed to prepare TAR entry: " + e.getMessage());
        }

        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        TarArchiveInputStream tais = new TarArchiveInputStream(bais);

        try {
            TarArchiveEntry entry = tais.getNextTarEntry();
            assertNotNull("The entry should not be null", entry);
            byte[] fileContent = IOUtils.toByteArray(tais);
            System.out.println("File Content: " + new String(fileContent, StandardCharsets.UTF_8));
        } catch (IOException e) {
            fail("Failed to read TAR entry: " + e.getMessage());
        }
    }
}
