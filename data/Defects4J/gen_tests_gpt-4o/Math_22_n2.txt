
import org.apache.commons.math3.distribution.RealDistribution;
import org.junit.Test;
import static org.junit.Assert.*;

public class RealDistributionTest {

    private static class MockRealDistribution implements RealDistribution {
        @Override
        public double getSupportLowerBound() {
            return 0.0;
        }

        @Override
        public double getSupportUpperBound() {
            return 1.0;
        }

        @Override
        public boolean isSupportLowerBoundInclusive() {
            return true;
        }

        @Override
        public boolean isSupportUpperBoundInclusive() {
            return false;
        }

        @Override
        public double density(double x) {
            // Simple density function for testing
            if (x >= getSupportLowerBound() && x <= getSupportUpperBound()) {
                return 1.0;
            }
            return 0.0;
        }

        @Override
        public double cumulativeProbability(double x) {
            return 0; // Simplified for the purpose of this test case
        }

        @Override
        public double sample() {
            return 0; // Simplified for the purpose of this test case
        }

        @Override
        public void reseedRandomGenerator(long seed) {}

        @Override
        public double probability(double x0, double x1) {
            return 0; // Simplified for the purpose of this test case
        }

        @Override
        public double getNumericalMean() {
            return 0; // Simplified for the purpose of this test case
        }

        @Override
        public double getNumericalVariance() {
            return 0; // Simplified for the purpose of this test case
        }

        @Override
        public boolean isSupportConnected() {
            return true; // Simplified for the purpose of this test case
        }
    }

    @Test
    public void testSupportInclusivityDefinition() {
        RealDistribution distribution = new MockRealDistribution();

        double lowerBound = distribution.getSupportLowerBound();
        double upperBound = distribution.getSupportUpperBound();

        assertTrue(distribution.isSupportLowerBoundInclusive());
        assertFalse(distribution.isSupportUpperBoundInclusive());

        // Test that applying density to bounds returns finite, non-NaN values
        assertTrue(Double.isFinite(distribution.density(lowerBound)));
        assertFalse(Double.isFinite(distribution.density(upperBound)));
    }
}
