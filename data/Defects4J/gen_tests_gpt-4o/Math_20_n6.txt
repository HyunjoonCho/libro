
import org.apache.commons.math3.optim.MaxEval;
import org.apache.commons.math3.optim.nonlinear.scalar.GoalType;
import org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.PopulationSize;
import org.apache.commons.math3.optim.nonlinear.scalar.ObjectiveFunction;
import org.apache.commons.math3.optim.InitialGuess;
import org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer.Sigma;
import org.junit.Test;
import static org.junit.Assert.assertTrue;

public class CMAESOptimizerTest {

    @Test
    public void testBoundsEnforcement() {
        // Define an objective function
        MultivariateFunction objectiveFunction = point -> {
            // A simple quadratic function
            double sum = 0;
            for (double x : point) {
                sum += x * x;
            }
            return sum;
        };

        // Define bounds
        double[] lowerBound = {-1.0, -1.0};
        double[] upperBound = {1.0, 1.0};

        // Set up the optimizer
        CMAESOptimizer optimizer = new CMAESOptimizer(
                10000,                               // max iterations
                Double.MIN_VALUE,                    // stop fitness
                true,                                // isActiveCMA
                0,                                   // lambda (population size)
                0,                                   // randomSeed
                CMAESOptimizer.DEFAULT_CHECK_FEASABLE_COUNT,  // checkFeasableCount
                0,                                   // isRepairing
                null,                                // randomGenerator
                false                                // generateStatistics
        );

        // Optimize the function within the bounds
        double[] startPoint = {0.5, 0.5};  // Initial guess
        double[] sigma = {0.3, 0.3};      // Initial step size

        double[] solution = optimizer.optimize(
                new MaxEval(1000),
                new ObjectiveFunction(objectiveFunction),
                GoalType.MINIMIZE,
                new InitialGuess(startPoint),
                new Sigma(sigma),
                new PopulationSize(optimizer.getPopulationSize()),
                new org.apache.commons.math3.optim.SimpleBounds(lowerBound, upperBound)
        ).getPoint();

        // Check that each dimension of the solution is within the specified bounds
        for (int i = 0; i < solution.length; i++) {
            assertTrue("Solution element " + i + " is out of bounds: " + solution[i],
                solution[i] >= lowerBound[i] && solution[i] <= upperBound[i]);
        }
    }
}
