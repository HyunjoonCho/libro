public void testCMAESOptimizerRespectBounds() {
    CMAESOptimizer optimizer = new CMAESOptimizer(1000, 1e-9, true, 0, 10, new Well19937c(), false, new SimpleValueChecker(1e-9, 1e-9));
    
    MultivariateFunction sphereFunction = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            double sum = 0;
            for (double val : point) {
                sum += val * val;
            }
            return sum;
        }
    };
    
    double[] startPoint = { 0.5, 0.5 };
    double[] lowerBound = { 0.0, 0.0 };
    double[] upperBound = { 1.0, 1.0 };
    
    PointValuePair result = optimizer.optimize(
        new MaxEval(10000),
        new ObjectiveFunction(sphereFunction),
        GoalType.MINIMIZE,
        new InitialGuess(startPoint),
        new SimpleBounds(lowerBound, upperBound)
    );
    
    double[] solution = result.getPoint();
    for (int i = 0; i < solution.length; i++) {
        assertTrue(solution[i] >= lowerBound[i] && solution[i] <= upperBound[i]);
    }
}