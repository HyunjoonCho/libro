
import com.google.javascript.jscomp.CompilationLevel;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.JSSourceFile;
import org.junit.Test;

import static org.junit.Assert.*;

public class ClosureCompilerTest {

    @Test
    public void testCompileJavaScriptCode() {
        // Create a new Compiler instance
        Compiler compiler = new Compiler();

        // Set compile options
        CompilerOptions options = new CompilerOptions();
        CompilationLevel.SIMPLE_OPTIMIZATIONS.setOptionsForCompilationLevel(options);

        // Define the JS source code that is to be compiled
        String jsCode = "function keys(obj) { var a = [], i = 0; for (a[i++] in obj) ; return a; }";

        // Compile the JS code
        compiler.compile(JSSourceFile.fromCode("externs.js", ""), JSSourceFile.fromCode("input.js", jsCode), options);

        // Check if there are errors after compilation
        if (compiler.hasErrors()) {
            fail("Closure Compiler reported an error: " + compiler.getErrors()[0].toString());
        }

        // Verify the compiled code (should not throw an error)
        String output = compiler.toSource();
        assertNotNull("Compiled code should not be null", output);
        assertFalse("Compiled code should not be empty", output.isEmpty());

        // Optionally, print the compiled code
        System.out.println("Compiled JS Code: " + output);
    }
}
