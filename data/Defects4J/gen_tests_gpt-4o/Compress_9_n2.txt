
import org.apache.commons.compress.archivers.ArchiveOutputStream;
import org.apache.commons.compress.archivers.ArchiveStreamFactory;
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;
import org.junit.Test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

import static org.junit.Assert.assertTrue;

public class TarArchiveOutputStreamTest {

    @Test
    public void testGetBytesWritten() throws Exception {
        File outputTar = new File("test-output.tar");
        try (FileOutputStream fileOutputStream = new FileOutputStream(outputTar);
             ArchiveOutputStream tarOut = new ArchiveStreamFactory()
                                             .createArchiveOutputStream(ArchiveStreamFactory.TAR, fileOutputStream)) {

            File inputFile = new File("test-input.txt");
            // Ensure the input file exists and has content for meaningful testing.
            assertTrue("Test input file should exist and have content.", inputFile.exists() && inputFile.length() > 0);

            TarArchiveEntry entry = new TarArchiveEntry(inputFile);
            tarOut.putArchiveEntry(entry);

            try (FileInputStream inputStream = new FileInputStream(inputFile)) {
                byte[] buffer = new byte[8192];
                int bytesRead;
                while ((bytesRead = inputStream.read(buffer)) > 0) {
                    tarOut.write(buffer, 0, bytesRead);
                }
            }

            long bytesWrittenBeforeClose = ((TarArchiveOutputStream)tarOut).getBytesWritten();
            tarOut.closeArchiveEntry();
            tarOut.close();
            long bytesWrittenAfterClose = ((TarArchiveOutputStream)tarOut).getBytesWritten();

            // Check if bytes written was updated and greater than zero
            assertTrue("Bytes written should be greater than zero before closing the archive.", bytesWrittenBeforeClose > 0);
            
            // Both should include the tar header sizes, which is checked by ensuring bytesWrittenAfterClose is greater than inputFile length
            assertTrue("Bytes written after closing should be greater than input file length.", bytesWrittenAfterClose > inputFile.length());
        } finally {
            // Cleanup test output file
            if (outputTar.exists()) {
                outputTar.delete();
            }
        }
    }
}
