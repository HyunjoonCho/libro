public void testFileValidatorClassCastException() {
    try {
        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();

        DefaultOption fileNameOption = obuilder
            .withShortName("f")
            .withLongName("file-name")
            .withRequired(true)
            .withDescription("name of an existing file")
            .withArgument(abuilder
                .withName("file-name")
                .withValidator(FileValidator.getExistingFileInstance())
                .create())
            .create();

        Group options = gbuilder
            .withName("options")
            .withOption(fileNameOption)
            .create();

        Parser parser = new Parser();
        parser.setHelpTrigger("--help");
        parser.setGroup(options);

        // Assuming "path-to-an-existing-file" is a valid file path.
        String[] args = new String[] {"--file-name", "path-to-an-existing-file"};
        CommandLine cl = parser.parseAndHelp(args);
        fail("Expected ClassCastException due to incorrect handling of FileValidator");
    } catch (ClassCastException e) {
        assertTrue(e.getMessage().contains("java.io.File cannot be cast to java.lang.String"));
    } catch (Exception e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}