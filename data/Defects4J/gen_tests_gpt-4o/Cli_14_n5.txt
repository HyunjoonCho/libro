
import org.apache.commons.cli2.CommandLine;
import org.apache.commons.cli2.Group;
import org.apache.commons.cli2.builder.ArgumentBuilder;
import org.apache.commons.cli2.builder.DefaultOptionBuilder;
import org.apache.commons.cli2.builder.GroupBuilder;
import org.apache.commons.cli2.commandline.Parser;
import org.apache.commons.cli2.option.DefaultOption;
import org.apache.commons.cli2.validation.FileValidator;
import org.junit.Test;

import java.io.File;

public class CLI2SampleTest {
    
    @Test(expected = ClassCastException.class)
    public void testFileValidatorClassCastException() {
        // Simulate command-line argument for an existing file
        String[] args = new String[]{"--file-name", "path-to-an-existing-file"};

        final DefaultOptionBuilder obuilder = new DefaultOptionBuilder();
        final ArgumentBuilder abuilder = new ArgumentBuilder();
        final GroupBuilder gbuilder = new GroupBuilder();
        
        DefaultOption fileNameOption = obuilder
            .withShortName("f")
            .withLongName("file-name")
            .withRequired(true)
            .withDescription("name of an existing file")
            .withArgument(abuilder
                .withName("file-name")
                .withValidator(FileValidator.getExistingFileInstance())
                .create())
            .create();
        
        Group options = gbuilder
            .withName("options")
            .withOption(fileNameOption)
            .create();
        
        Parser parser = new Parser();
        parser.setHelpTrigger("--help");
        parser.setGroup(options);

        // This line should throw the expected ClassCastException
        CommandLine cl = parser.parse(args);
    }
}
