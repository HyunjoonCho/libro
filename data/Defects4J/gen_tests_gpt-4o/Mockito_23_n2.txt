
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;

abstract class AbstractClass {
    abstract protected Long lol();
    abstract protected String wow();
    public String give() {
        wow();
        lol();
        return "give";
    }
}

public class ClassExtendsAbstractClass extends AbstractClass {
    @Override
    protected Long lol() {
        return 2L;
    }

    @Override
    protected String wow() {
        return "WOW";
    }
}

public class A {
    private ClassExtendsAbstractClass classExtendsAbstractClass;
    public A(ClassExtendsAbstractClass classExtendsAbstractClass) {
        this.classExtendsAbstractClass = classExtendsAbstractClass;
    }
    public String doSomeThing(){
        return classExtendsAbstractClass.wow();
    }
}

public class BugReportTest {
    @Mock
    private ClassExtendsAbstractClass classExtendsAbstractClass;
    private A a;

    @BeforeEach
    public void setup() {
        MockitoAnnotations.openMocks(this);
        Mockito.when(classExtendsAbstractClass.give()).thenReturn("aaa");
    }

    @Test
    public void testMockitoMisuse() {
        a = new A(classExtendsAbstractClass);
        
        // This test does not use the mocked 'give' method,
        // but will trigger the WrongTypeOfReturnValue error due to setup.
        Mockito.when(classExtendsAbstractClass.wow()).thenReturn("Mocked WOW");

        assertEquals("Mocked WOW", a.doSomeThing());
    }
}
