
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class NumberShapeTest {

    static class TestEntity {
        @JsonFormat(shape = JsonFormat.Shape.NUMBER)
        public double value;

        public TestEntity() {}

        public TestEntity(double value) {
            this.value = value;
        }
    }

    @Test
    public void testNumberShape() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.WRITE_NUMBERS_AS_STRINGS);

        TestEntity entity = new TestEntity(123.45);
        String json = mapper.writeValueAsString(entity);

        // Before the fix, this would serialize the value as a String due to WRITE_NUMBERS_AS_STRINGS
        // After the fix, the shape defined as NUMBER should make it stay as a number despite the configuration
        assertFalse(json.contains("\"123.45\""));

        // Instead, it should contain the number without quotes
        assertTrue(json.contains("123.45"));
    }
}
