
import org.apache.commons.lang3.reflect.TypeUtils;
import org.junit.Assert;
import org.junit.Test;

import java.util.Map;

public class TypeUtilsTest {

    // Definitions for the test case
    public interface This<K, V> {
    }

    public class Other<T> implements This<String, T> {
    }

    @Test
    public void testGetTypeArguments() {
        // Retrieve the type arguments from Other class when viewed as a This class
        Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);

        // Verify that two type arguments are found
        Assert.assertEquals(2, typeVarAssigns.size());

        // Check that the first type parameter for This is assigned to String
        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));

        // Check that the second type parameter for This is the same as the first type parameter for Other
        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
    }
}
