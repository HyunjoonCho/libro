public void testIllegalStateExceptionOnJavaScriptCompilation() {
    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.ALL_CHECKS, CheckLevel.VERBOSE);
    options.setOptimizationLevel(CompilationLevel.SIMPLE_OPTIMIZATIONS);

    String jsCode = "var test = {};\n" +
                    "/**\n" +
                    " * @interface\n" +
                    " */\n" +
                    "test.T = function() {};\n" +
                    "/**\n" +
                    " * @constructor\n" +
                    " * @implements {test.T}\n" +
                    " */\n" +
                    "test.A = function() {};\n" +
                    "/**\n" +
                    " * @constructor\n" +
                    " * @implements {test.T}\n" +
                    " */\n" +
                    "test.B = function() {};\n" +
                    "/**\n" +
                    " * @constructor\n" +
                    " */\n" +
                    "test.X = function() {\n" +
                    "  this.type = test.A;\n" +
                    "  this.t = this.f();\n" +
                    "};\n" +
                    "/**\n" +
                    " * @return {test.T}\n" +
                    " */\n" +
                    "test.X.prototype.f = function() {\n" +
                    "  if (this.type === test.A) {\n" +
                    "    return new test.A();\n" +
                    "  } else if (this.type === test.B) {\n" +
                    "    return new test.B();\n" +
                    "  }\n" +
                    "};";

    // The expected behavior is that no exception should be thrown,
    // so we want to catch and assert any IllegalStateException.
    try {
        compiler.compile(SourceFile.fromCode("externs.js", ""), SourceFile.fromCode("crash.js", jsCode), options);
        fail("IllegalStateException was expected on JavaScript compilation");
    } catch (RuntimeException e) {
        assertTrue(e.getCause() instanceof IllegalStateException);
    }
}