
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class DormandPrince853IntegratorTest {

    private static class ExampleODE implements FirstOrderDifferentialEquations {

        @Override
        public int getDimension() {
            return 1; // Simple 1D ODE
        }

        @Override
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            yDot[0] = -0.5 * y[0]; // Example ODE: exponential decay
        }
    }

    @Test
    public void testTooLargeFirstStep() {
        FirstOrderDifferentialEquations ode = new ExampleODE();

        // Create the integrator
        DormandPrince853Integrator integrator = new DormandPrince853Integrator(
            1.0e-8, // min step
            1.0e+1, // max step
            1.0e-8, // absolute accuracy
            1.0e-8  // relative accuracy
        );

        double[] yStart = { 1.0 }; // initial state
        double[] yEnd = new double[1];

        final double t0 = 0.0;
        final double t1 = 1.0e-10; // very short integration range

        integrator.addStepHandler(new StepHandler() {
            @Override
            public void handleStep(StepInterpolator interpolator, boolean isLast) {
                double t = interpolator.getCurrentTime();
                assertTrue("Integration stepped outside of target range.", t >= t0 && t <= t1);
            }

            @Override
            public void init(double t0, double[] y0, double t) {
                // No initialization needed
            }
        });

        integrator.integrate(ode, t0, yStart, t1, yEnd);
    }
}
