
import org.apache.commons.math3.optim.linear.LinearConstraint;
import org.apache.commons.math3.optim.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optim.linear.LinearOptimizer;
import org.apache.commons.math3.optim.linear.GoalType;
import org.apache.commons.math3.optim.linear.Relationship;
import org.apache.commons.math3.optim.linear.SimplexSolver;
import org.apache.commons.math3.optim.PointValuePair;

import java.util.ArrayList;
import java.util.Collection;

import static org.junit.Assert.assertEquals;

public class SimplexSolverTest {

    @org.junit.Test
    public void testSimplexSolverIssue() {
        LinearObjectiveFunction f = new LinearObjectiveFunction(
            new double[] { 0.8, 0.2, 0.7, 0.3, 0.6, 0.4 }, 0 
        );

        Collection<LinearConstraint> constraints = new ArrayList<>();

        // r1: x0 + x2 + x4 = 23.0
        constraints.add(new LinearConstraint(
            new double[] { 1, 0, 1, 0, 1, 0 }, Relationship.EQ, 23.0
        ));

        // r2: x1 + x3 + x5 = 23.0
        constraints.add(new LinearConstraint(
            new double[] { 0, 1, 0, 1, 0, 1 }, Relationship.EQ, 23.0
        ));

        // r3: x0 >= 10.0
        constraints.add(new LinearConstraint(
            new double[] { 1, 0, 0, 0, 0, 0 }, Relationship.GEQ, 10.0
        ));

        // r4: x2 >= 8.0
        constraints.add(new LinearConstraint(
            new double[] { 0, 0, 1, 0, 0, 0 }, Relationship.GEQ, 8.0
        ));

        // r5: x4 >= 5.0
        constraints.add(new LinearConstraint(
            new double[] { 0, 0, 0, 0, 1, 0 }, Relationship.GEQ, 5.0
        ));

        LinearOptimizer optimizer = new SimplexSolver();
        PointValuePair solution = optimizer.optimize(
            f, constraints, GoalType.MAXIMIZE, false
        );

        double solutionValue = solution.getValue();

        assertEquals(25.8, solutionValue, 1e-5);
        assertEquals(10.0, solution.getPoint()[0], 1e-5);
        assertEquals(0.0, solution.getPoint()[1], 1e-5);
        assertEquals(8.0, solution.getPoint()[2], 1e-5);
        assertEquals(0.0, solution.getPoint()[3], 1e-5);
        assertEquals(5.0, solution.getPoint()[4], 1e-5);
        assertEquals(23.0, solution.getPoint()[5], 1e-5);
    }
}
