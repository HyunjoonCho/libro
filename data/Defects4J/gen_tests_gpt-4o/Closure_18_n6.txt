
import com.google.javascript.jscomp.*;

public class CompilerDependencySortTest {

    public static void main(String[] args) {
        // Create a Compiler instance
        Compiler compiler = new Compiler();

        // Create CompilerOptions and set options as described in the bug report
        CompilerOptions options = new CompilerOptions();

        // Set closurePass to false
        options.setClosurePass(false);

        // Turn on dependency sorting
        DependencyOptions dependencyOptions = new DependencyOptions();
        dependencyOptions.setDependencySorting(true);
        options.setDependencyOptions(dependencyOptions);

        // Sample source files simulating goog.provide and goog.require
        SourceFile[] inputs = {
            SourceFile.fromCode("main.js", "goog.require('moduleA'); console.log('main');"),
            SourceFile.fromCode("moduleA.js", "goog.provide('moduleA'); console.log('moduleA');")
        };

        // Compile the code
        Result result = compiler.compile(new SourceFile[]{}, inputs, options);

        // Output the compiled code to verify if sorting is correct
        if (result.success) {
            String compiledCode = compiler.toSource();
            System.out.println("Compiled Code:");
            System.out.println(compiledCode);
            
            // Check if 'moduleA' appears before 'main'
            assert compiledCode.indexOf("moduleA") < compiledCode.indexOf("main");
        } else {
            System.err.println("Compilation failed.");
        }
    }
}
