
import org.apache.commons.math3.exception.FractionConversionException;
import org.apache.commons.math3.fraction.Fraction;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class FractionConstructorTest {

    @Test
    public void testFractionConstructorPositiveSignBug() {
        try {
            Fraction fraction = new Fraction(-33655.1677817278, 371880);
            int expectedNumeratorSign = -1;
            int actualNumeratorSign = Integer.signum(fraction.getNumerator());
            assertEquals("Expected the fraction to be negative.", expectedNumeratorSign, actualNumeratorSign);
        } catch (FractionConversionException e) {
            // Handle potential exception gracefully
            e.printStackTrace();
        }
    }

    @Test
    public void testFractionConstructorReductionBug() {
        try {
            Fraction fraction = new Fraction(-43979.60679604749, 366081);
            Fraction expectedFraction = new Fraction(-24654898, 3831);
            assertEquals("The fraction was not reduced properly.", expectedFraction, fraction);
        } catch (FractionConversionException e) {
            // Handle potential exception gracefully
            e.printStackTrace();
        }
    }
}
