
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.junit.Test;
import static org.junit.Assert.*;

public class MutableDateTimeTest {

    @Test
    public void testAddDaysZeroDuringDST() {
        // Create a MutableDateTime object positioned at the DST transition for Europe/Berlin
        final MutableDateTime mdt = new MutableDateTime(2011, 10, 30, 3, 0, 0, 0, DateTimeZone.forID("Europe/Berlin"));
        
        System.out.println("Start date: " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        assertEquals("Start date in millis should match", 1319940000000L, mdt.toInstant().getMillis());

        // Moving backward an hour to handle DST transition
        mdt.addHours(-1);
        System.out.println("addHours(-1): " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        assertEquals("Millis should match after addHours(-1)", 1319936400000L, mdt.toInstant().getMillis());

        // Adding 0 hours should not change the time
        mdt.addHours(0);
        System.out.println("addHours(0): " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        assertEquals("Millis should remain unchanged after addHours(0)", 1319936400000L, mdt.toInstant().getMillis());

        // Adding 0 days should not change the time, but it unexpectedly does due to DST issue
        mdt.addDays(0);
        System.out.println("addDays(0): " + mdt + " (" + mdt.toInstant().getMillis() + ")");
        // This assertion will fail, exposing the DST-related issue
        assertEquals("Millis should remain unchanged after addDays(0)", 1319936400000L, mdt.toInstant().getMillis());
    }
}
