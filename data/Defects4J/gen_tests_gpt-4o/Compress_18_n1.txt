public void testLongDirectoryNameInTarArchive() {
    Path tempDir = null;
    FileOutputStream fos = null;
    TarArchiveOutputStream tarOut = null;
    try {
        tempDir = Files.createTempDirectory("long_dir_name_");
        String longDirName = "";
        while (longDirName.getBytes().length <= 100) {
            longDirName += "a";
        }
        File longNameDir = new File(tempDir.toFile(), longDirName);
        longNameDir.mkdirs();

        File tempTarFile = Files.createTempFile("test", ".tar").toFile();
        fos = new FileOutputStream(tempTarFile);
        tarOut = new TarArchiveOutputStream(fos);
        
        tarOut.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);
        TarArchiveEntry entry = new TarArchiveEntry(longNameDir, longNameDir.getName());
        tarOut.putArchiveEntry(entry);
        tarOut.closeArchiveEntry();
    } catch (IOException e) {
        fail("IOException should not have been thrown: " + e.getMessage());
    } finally {
        try {
            if (tarOut != null) {
                tarOut.close();
            }
            if (fos != null) {
                fos.close();
            }
            if (tempDir != null) {
                Files.walk(tempDir)
                    .sorted(Comparator.reverseOrder())
                    .map(Path::toFile)
                    .forEach(File::delete);
            }
        } catch (IOException e) {
            // Ignore exceptions during cleanup
        }
    }
}