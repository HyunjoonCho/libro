public void testMultiDirectionalCorrectStart() {
    MultivariateFunction function = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return 0;  // The function returns 0 for the correct solution.
        }
    };

    // Assuming the known correct solution is [1.0, 1.0], create a goal.
    double[] correctSolution = new double[] { 1.0, 1.0 };
    SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
    MultiDirectional simplex = new MultiDirectional();

    PointValuePair result = optimizer.optimize(
        new MaxEval(1000),
        new ObjectiveFunction(function),
        GoalType.MINIMIZE,
        new InitialGuess(correctSolution),
        simplex
    );

    // The test will hang if the bug exists, as optimize will loop forever.
    assertArrayEquals(correctSolution, result.getPoint(), 1e-10);
}