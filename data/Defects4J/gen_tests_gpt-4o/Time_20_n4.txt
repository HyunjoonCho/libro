
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;
import org.junit.Test;

import java.util.Set;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

public class JodaDateTimeZoneTest {

    private static final DateTimeFormatter formatter = DateTimeFormat.forPattern("MM/dd/yyyy HH:mm:ss.SSS ZZZ");

    @Test
    public void testTimeZoneParsingAndConversion() {
        Set<String> timeZones = DateTimeZone.getAvailableIDs();
        int numTimeZonesTested = 0;
        int numTimeZonesPassed = 0;
        int numTimeZonesFailed = 0;
        int numTimeZonesException = 0;

        for (String timeZone : timeZones) {
            numTimeZonesTested++;
            try {
                DateTime dateTime = DateTime.now().withZone(DateTimeZone.forID(timeZone));
                String dateTimeZoneId = dateTime.getZone().getID();

                if (!timeZone.equals(dateTimeZoneId)) {
                    numTimeZonesFailed++;
                    System.out.println(timeZone + " failed to construct into the proper date time zone - constructed time zone = " + dateTimeZoneId);
                    continue;
                }

                DateTime convertedDateTime = formatter.parseDateTime(formatter.print(dateTime));
                if (dateTime.equals(convertedDateTime)) {
                    numTimeZonesPassed++;
                } else {
                    numTimeZonesFailed++;
                    System.out.println("Formatter failed for time zone ID: " + dateTimeZoneId + "    converted it to: " + convertedDateTime.getZone().getID());
                }
            } catch (IllegalArgumentException iae) {
                numTimeZonesException++;
                System.out.println("Formatter threw exception for time zone id: " + timeZone + " with message: " + iae.getMessage());
                fail("Formatter threw exception for time zone id: " + timeZone + " with exception: " + iae.getMessage());
            }
        }

        System.out.println("Number of Time Zones tested: " + numTimeZonesTested);
        System.out.println("Number passed:     " + numTimeZonesPassed);
        System.out.println("Number failed:     " + numTimeZonesFailed);
        System.out.println("Number exceptions: " + numTimeZonesException);

        assertEquals("There should be no failed time zone conversions", 0, numTimeZonesFailed);
        assertEquals("There should be no time zone exceptions", 0, numTimeZonesException);
    }
}
