
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.ReferenceType;
import org.apache.commons.collections4.map.LRUMap;

public class ReferenceTypeBugTest {

    @Test
    public void testReferenceTypeCanonicalString() {
        TypeFactory typeFactory = TypeFactory.defaultInstance();
        // Construct JavaType for Object
        JavaType objectType = typeFactory.constructType(Object.class);

        // Use a placeholder for the reference type parameter
        JavaType placeholderType = typeFactory.constructType(Object.class);

        // Create ReferenceType using objectType and placeholderType
        ReferenceType referenceType = ReferenceType.upgradeFrom(objectType, placeholderType);

        // Get the canonical string
        String canonicalString = referenceType.toCanonical();

        // Assert that the canonical string is correctly formed with trailing '>'
        assertEquals("java.lang.Object<$1>", canonicalString);
    }
}
