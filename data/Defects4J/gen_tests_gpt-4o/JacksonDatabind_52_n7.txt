
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.*;

// Define your base class with JsonTypeInfo
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, property = "type")
@JsonSubTypes({
    @JsonSubTypes.Type(value = SubTypeA.class, name = "typeA"),
    @JsonSubTypes.Type(value = SubTypeB.class, name = "typeB")
})
abstract class BaseType {
    public String baseProperty;
}

// Define your subtypes
class SubTypeA extends BaseType {
    public String specificToA;
}

class SubTypeB extends BaseType {
    public String specificToB;
}

// Container class that holds a BaseType
class Container {
    public String id;
    public BaseType item;
}

public class ExternalIdDeserTest {

    @Test
    public void testExternalPropertyDeserialization() throws JsonProcessingException {
        String json = "{\"id\":\"123\", \"item\":{\"type\":\"typeA\", \"baseProperty\":\"baseValue\", \"specificToA\":\"aValue\"}}";
        
        ObjectMapper mapper = new ObjectMapper();
        Container result = mapper.readValue(json, Container.class);

        assertNotNull(result);
        assertEquals("123", result.id);
        assertNotNull(result.item);
        assertTrue(result.item instanceof SubTypeA);
        assertEquals("baseValue", result.item.baseProperty);
        assertEquals("aValue", ((SubTypeA) result.item).specificToA);
    }
}
