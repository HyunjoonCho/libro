
import org.apache.commons.compress.archivers.tar.TarArchiveEntry;
import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.nio.charset.StandardCharsets;

public class TarArchiveInputStreamTest {

    @Test
    public void testUidParsingWithHighValue() throws Exception {
        // Create a tar entry with a uid larger than Integer.MAX_VALUE (e.g., 4294967294).
        // This is a simplified representation of the tar header as a string.
        // In practice, tar headers are binary and this is for illustration purposes.
        String posixHeader = "00000000000\n" +    // Dummy tar header parts 
                             "4294967294 uid\n";  // The uid in question, simulating an extended header value

        // Convert to byte array (mimicking a tar file content)
        byte[] tarBytes = posixHeader.getBytes(StandardCharsets.UTF_8);
        ByteArrayInputStream bais = new ByteArrayInputStream(tarBytes);

        // Create the TarArchiveInputStream
        TarArchiveInputStream tais = new TarArchiveInputStream(bais);

        // Read entries from the archive
        TarArchiveEntry entry = tais.getNextTarEntry();

        if (entry != null) {
            // This should not throw a NumberFormatException if the bug is fixed
            long uid = entry.getLongUserId();
            assertEquals(4294967294L, uid);
        }

        tais.close();
    }
}
