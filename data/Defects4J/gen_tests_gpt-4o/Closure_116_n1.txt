
import org.junit.Test;
import static org.junit.Assert.assertTrue;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.nio.file.Paths;

public class AdvancedOptimizationsTest {

    @Test
    public void testErroneousOptimizationInAdvancedOptimizationsMode() throws Exception {
        // Path to Google Closure Compiler jar
        String compilerJar = "path/to/compiler.jar";
        // Create the JavaScript input file
        String inputJsPath = "input.js";
        Files.write(Paths.get(inputJsPath), getInputJs().getBytes());

        // Create the externs file
        String externsJsPath = "window.js";
        Files.write(Paths.get(externsJsPath), "var window;".getBytes());

        // Compile the input.js with the specified options
        String[] command = {
            "java",
            "-jar",
            compilerJar,
            "--compilation_level",
            "ADVANCED_OPTIMIZATIONS",
            "--warning_level",
            "VERBOSE",
            "--externs",
            externsJsPath,
            "--js",
            inputJsPath,
            "--js_output_file",
            "output.js"
        };

        Process process = Runtime.getRuntime().exec(command);
        process.waitFor();

        // Read the output.js file
        String compiledCode = new String(Files.readAllBytes(Paths.get("output.js")));

        // Assert the expected behavior
        assertTrue("Unexpected optimization occurred", compiledCode.contains("var HOLD=a.prop;"));
    }

    private String getInputJs() {
        return "window[\"anchor\"] = function (obj, modifiesProp) {\n" +
               "  return (function (saved) {\n" +
               "  return modifiesProp(obj) + saved;\n" +
               "  })(obj[\"prop\"]);\n" +
               "}";
    }
}
