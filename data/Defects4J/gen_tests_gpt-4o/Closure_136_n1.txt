
import com.google.javascript.jscomp.*;
import com.google.javascript.rhino.Node;

import org.junit.Test;
import static org.junit.Assert.*;

public class SuperReplacementTest {

    @Test
    public void testSuperNotRenamed() {
        String originalJsCode = "function MyClass() {} MyClass.prototype.myMethod = function($super) { return $super; };";

        Compiler compiler = new Compiler();
        CompilerOptions options = new CompilerOptions();
        options.setCompilationLevel(CompilationLevel.ADVANCED_OPTIMIZATIONS);
        
        SourceFile input = SourceFile.fromCode("input.js", originalJsCode);
        SourceFile externs = SourceFile.fromCode("externs.js", ""); // Adjust as necessary
        Result result = compiler.compile(externs, input, options);

        // Check if the $super is used as is in the compiled code
        assertFalse("Compilation had errors", result.hasErrors());
        String compiledCode = compiler.toSource();
        
        // Verify that $super is not renamed
        assertTrue("The $super should not be renamed", compiledCode.contains("$super"));
    }
}
