public void testPreconditionCrashGoogScopeAlias() {
    String code = "var goog = {};\n" +
                  "goog.scope;\n" +
                  "var ns = {};\n" +
                  "ns.sub = {};\n" +
                  "/** @constructor */\n" +
                  "ns.sub.C = function() {};\n" +
                  "goog.scope(function() {\n" +
                  " var sub = ns.sub;\n" +
                  " /** @type {sub.C} */\n" +
                  " var x = null;\n" +
                  "});";

    Compiler compiler = new Compiler();
    CompilerOptions options = new CompilerOptions();
    options.setWarningLevel(DiagnosticGroups.CHECK_TYPES, CheckLevel.WARNING);

    // Test process to catch IllegalStateException
    try {
        Node astRoot = compiler.parseTestCode(code);
        Assert.assertFalse("Parsing errors", compiler.hasErrors());
        new ScopedAliases(compiler).process(null, astRoot);
        fail("Expected IllegalStateException was not thrown.");
    } catch (IllegalStateException e) {
        // Exception expected to be thrown
        assertTrue(e.getMessage().contains("checkState"));
    }
}