
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.exc.InvalidTypeIdException;
import org.junit.Test;

import static org.junit.Assert.fail;

public class DeserializationSecurityTest {

    @Test
    public void testBlockC3P0Gadgets() {
        ObjectMapper mapper = new ObjectMapper();
        // Enable default typing to simulate vulnerability
        mapper.enableDefaultTyping();
        
        // These are the potentially dangerous classes
        String[] maliciousPayloads = {
            "com.mchange.v2.c3p0.JndiRefDataSource", 
            "com.mchange.v2.c3p0.WrapperConnectionPoolDataSource"
        };

        for (String payload : maliciousPayloads) {
            String json = "[\"" + payload + "\"]";
            try {
                mapper.readValue(json, Object.class);
                fail("Deserialization should have failed for class: " + payload);
            } catch (InvalidTypeIdException e) {
                // Expected exception, parsing should not succeed
                System.out.println("Blocked deserialization for class: " + payload);
            } catch (Exception e) {
                fail("Unexpected exception for class: " + payload + " -> " + e.getMessage());
            }
        }
    }
}
