
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.junit.Test;
import static org.junit.Assert.*;

public class ZipFileCorruptionTest {

    @Test
    public void testZipFileCorruption() throws IOException {
        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        ZipArchiveOutputStream zipOutputStream = new ZipArchiveOutputStream(byteArrayOutputStream);

        // Creating entries with hash collisions
        String[] entryNames = new String[] {
            "entry1.txt", "entry1_.txt",
            "entry2.txt", "entry2_.txt",
            "entry3.txt", "entry3_.txt",
            // Add more entries selectively to induce collisions
        };
        
        for (String entryName : entryNames) {
            ZipArchiveEntry zipEntry = new ZipArchiveEntry(entryName);
            zipOutputStream.putArchiveEntry(zipEntry);
            zipOutputStream.write("Sample content".getBytes());
            zipOutputStream.closeArchiveEntry();
        }
        
        zipOutputStream.close();
        
        // Attempt to read back the entries to see if there's any corruption
        byte[] zipBytes = byteArrayOutputStream.toByteArray();
        verifyZipIntegrity(zipBytes);
    }

    private void verifyZipIntegrity(byte[] zipBytes) {
        try (java.util.zip.ZipInputStream zipInputStream = new java.util.zip.ZipInputStream(new java.io.ByteArrayInputStream(zipBytes))) {
            ZipEntry entry;
            while ((entry = zipInputStream.getNextEntry()) != null) {
                assertNotNull("Entry should not be null", entry);
                System.out.println("Entry: " + entry.getName());
                zipInputStream.closeEntry();
            }
        } catch (IOException e) {
            fail("Zip file is corrupted or cannot be read: " + e.getMessage());
        }
    }
}
