public void testJsonAnyGetterWithJsonSerialize() {
    // Setup your test data and object
    MyObject obj = new MyObject();
    
    // Test that JsonAnyGetter is ignored when using JsonSerialize annotation
    ObjectMapper mapper = new ObjectMapper();
    mapper.writeValueAsString(obj);
    assertNotEquals("{\"parameters\":{...}}", mapper.writeValueAsString(obj));
    
    // Test that JsonAnyGetter works when using JsonSerialize(keyUsing)
    mapper = new ObjectMapper();
    mapper.setVisibility(mapper.getVisibilityChecker().withFieldVisibility(JsonProperty.Access.READ_WRITE));
    mapper.configure(MapperFeature.USE_ANNOTATIONS, true);
    mapper.configure(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);
    mapper.addMixIn(MyObject.class, MyObjectMixIn.class);
    assertEquals("{\"parameters\":{...}}", mapper.writeValueAsString(obj));
}

// Mix-in class to enable Jackson annotations
public static class MyObjectMixIn {
    @JsonSerialize(keyUsing = MyKeySerializer.class)
    public Map<String, String> getParameters() {
        return null; // Not needed, just to satisfy the interface
    }
}