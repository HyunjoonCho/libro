java
public class TestTreeTraversingParser {
    
    private ObjectMapper mapper = new ObjectMapper();
    
    @Test
    public void testTreeTraversingParser() {
        // Test cases from the bug report
        testOverflow();
        testNonIntegralValues();
        testNonStringValues();
        testInvalidFormat();
    }
    
    private void testOverflow() {
        IntClass fromTree;
        try {
            JsonNode tree = mapper.readTree("{\"x\": 1e10}");
            fromTree = mapper.treeToValue(tree, IntClass.class);
        } catch (IOException e) {
            fail("Expected Int overflow, but got " + e.getMessage());
        }
        assertEquals(2147483647, fromTree.x);
        
        try {
            mapper.readerFor(IntClass.class).readValue("{\"x\": 1e10}");
            fail("Expected Int overflow");
        } catch (IOException e) {
            // expected
        }
    }
    
    private void testNonIntegralValues() {
        IntClass fromTree;
        try {
            JsonNode tree = mapper.readTree("{\"x\": 0.1}");
            fromTree = mapper.treeToValue(tree, IntClass.class);
        } catch (IOException e) {
            fail