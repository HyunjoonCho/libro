java
public void testEnumSerializationUsingJsonProperty() {
    // Test with custom deserialization method
    TestEnum enumValue = new TestEnumDeserializer().getEnumFromValue("value1");
    assertEquals(TestEnum.VALUE_ONE, enumValue);

    // Test with DeserializationFeature.READ_ENUMS_USING_TO_STRING
    TestEnum enumValue2 = new TestEnum();
    ObjectMapper mapper = new ObjectMapper();
    mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
    try {
        enumValue2 = mapper.readValue("{\"value\":\"value1\"}", TestEnum.class);
    } catch (JsonProcessingException e) {
        fail("Expected enum deserialization to work");
    }
    assertEquals(TestEnum.VALUE_ONE, enumValue2);

    // Test with @JsonProperty annotation (expected to fail)
    TestEnum enumValue3 = new TestEnum();
    ObjectMapper mapper2 = new ObjectMapper();
    try {
        enumValue3 = mapper2.readValue("{\"value\":\"value1\"}", TestEnum.class);
    } catch (JsonProcessingException e) {
        fail("Expected enum deserialization to work");
    }
    assertEquals(TestEnum.VALUE_ONE, enumValue3);
}
