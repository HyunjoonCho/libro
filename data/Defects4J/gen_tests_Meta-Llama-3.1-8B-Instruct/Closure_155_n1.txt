java
public void testOverzealousArgumentsOptimization() {
    Object obj = new Object();
    Object result = d3Call(obj, new Runnable() {
        @Override
        public void run() {
            System.out.println("Hello, World!");
        }
    });
    assertEquals(obj, result);
}

private Object d3Call(final Object obj, Runnable callback) {
    Object a = callback;
    a.getClass(); // Introduce a temporary reference to avoid overwriting the first argument
    a.getClass(); // Introduce another reference to prevent compiler from optimizing away the previous line
    a.getClass(); // Introduce another reference to prevent compiler from optimizing away the previous line
    a.getClass(); // Introduce another reference to prevent compiler from optimizing away the previous line
    a.getClass(); // Introduce another reference to prevent compiler from optimizing away the previous line
    a.getClass(); // Introduce another reference to prevent compiler from optimizing away the previous line
    a.getClass(); // Introduce another reference to prevent compiler from optimizing away the previous line
    a.getClass(); // Introduce another reference to prevent compiler from optimizing away the previous line
    a.getClass(); // Introduce another reference to