java
public void testLevenbergMarquardt() {
    // Create a sample objective function
    ObjectiveFunction func = new AbstractMultivariateFunction() {
        @Override
        public double value(double[] point) {
            return Math.pow(point[0] - 3, 2) + Math.pow(point[1] - 4, 2);
        }
    };

    // Create a sample point to start the optimization from
    double[] startPoint = new double[] {0, 0};

    // Perform the optimization
    VectorialPointValuePair result = new LevenbergMarquardtOptimizer().doOptimize(1e-5, 1e-5, 100, startPoint, func);

    // Check that the result point matches the point that leads to the residuals and cost
    double[] optimumPoint = result.getPoint();
    double[] gradients = func.gradient(optimumPoint);
    double[] residuals = func.value(optimumPoint);
    double cost = func.value(optimumPoint);

    // The point returned by doOptimize should match the optimum point
    assertArrayEquals(optimumPoint, result.getPoint(), 1e-6);

    // The cost should match the value of the objective