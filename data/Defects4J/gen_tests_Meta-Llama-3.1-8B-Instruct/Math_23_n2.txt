java
public void testBrentOptimizer() {
    BrentOptimizer optimizer = new BrentOptimizer();
    double[] initialPoint = new double[] {1.0};
    double[] min = new double[] {0.0};
    double min2 = Double.POSITIVE_INFINITY;
    for (int i = 0; i < 10; i++) {
        min2 = Math.min(min2, optimizer.optimize(new Function() {
            @Override
            public double value(double[] point) {
                return Math.pow(point[0], 2);
            }
        }, initialPoint)[0]);
        optimizer.optimize(new Function() {
            @Override
            public double value(double[] point) {
                return Math.pow(point[0], 2);
            }
        }, initialPoint);
    }
    double[] result = optimizer.optimize(new Function() {
        @Override
        public double value(double[] point) {
            return Math.pow(point[0], 2);
        }
    }, initialPoint);
    assertTrue(Math.abs(result[0] - min2) < 1e-6);
}
