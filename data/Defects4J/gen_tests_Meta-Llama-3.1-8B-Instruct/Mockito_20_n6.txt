public void testAbstractClassMocking() {
    @Fake private FakeUserAccount userAccount;
    when(userAccount.getEmails()).thenReturn(Collections.emptyList());
    userAccount.addEmail("email1");
    userAccount.addEmail("email2");
    assertEquals(2, userAccount.getEmails().size());
}

public void testAsyncCallback() {
    @Fake private MockAccountService service;
    when(service.getAccount("id")).thenAnswer(new Answer<Void>() {
        @Override
        public Void answer(InvocationOnMock invocation) throws Throwable {
            AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) invocation.getArguments()[1];
            callback.onSuccess(new FakeUserAccount());
            return null;
        }
    });
}

public void testUninterestingParameter() {
    @Fake private MockAccountRpcService service;
    when(service.getAccount(any(RpcContext.class), "id")).thenReturn(null);
}