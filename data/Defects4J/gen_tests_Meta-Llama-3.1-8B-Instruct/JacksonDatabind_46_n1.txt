public void testJavaTypeGenericSignature() {
    JavaType type = new JavaType(AtomicReference.class, String.class);
    String signature = type.getGenericSignature();
    assertTrue(signature.contains("Ljava/util/concurrent/atomic/AtomicReference;"));
    assertTrue(signature.contains(">") + signature.contains("<"));
    int closingAngleBracketCount = countOccurrences(signature, '>');
    int openingAngleBracketCount = countOccurrences(signature, '<');
    assertEquals(closingAngleBracketCount, openingAngleBracketCount + 1);
}

private int countOccurrences(String str, char c) {
    int count = 0;
    for (int i = 0; i < str.length(); i++) {
        if (str.charAt(i) == c) {
            count++;
        }
    }
    return count;
}