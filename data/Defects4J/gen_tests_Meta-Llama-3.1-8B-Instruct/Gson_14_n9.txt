java
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

public class TestGsonTypes {
    public static class Foo1<A> {
        Foo2<? extends A> foo2;
    }

    public static class Foo2<B> {
        Foo1<? super B> foo1;
    }

    public void testRecursiveResolveSimple() {
        Gson gson = new Gson();
        TypeToken<Foo1<Object>> typeToken = new TypeToken<Foo1<Object>>() {};
        try {
            gson.getAdapter(typeToken.getType());
            fail("Expected StackOverflowError");
        } catch (StackOverflowError e) {
            // Expected
        }
    }

    public void testCollapseSupertypeOfSupertypeOf() {
        TypeToken<Foo1<Object>> typeToken = new TypeToken<Foo1<Object>>() {};
        TypeToken<?> collapsedType = collapseSupertypeOfSupertypeOf(typeToken.getType());
        assertEquals(Foo1.class, collapsedType.getType());
    }

    public void testCollapseSubtypeOfSubtypeOf() {
        TypeToken<Foo2<Object>> typeToken = new TypeToken<Foo2<Object>>() {};
        TypeToken<?> collapsedType = collapseSubtypeOfSubtypeOf(typeToken.getType());
        assertEquals