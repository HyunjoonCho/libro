public void testAbstractClassSpying() {
    @Spy FakeUserAccount userAccount = new FakeUserAccount();
    when(userAccount.addEmail(anyString())).thenAnswer(new Answer<Void>() {
        @Override
        public Void answer(InvocationOnMock invocation) throws Throwable {
            String email = (String) invocation.getArguments()[0];
            userAccount.getEmails().add(email);
            return null;
        }
    });
    userAccount.addEmail("test1");
    userAccount.addEmail("test2");
    assertEquals(2, userAccount.getEmails().size());
    assertTrue(userAccount.getEmails().contains("test1"));
    assertTrue(userAccount.getEmails().contains("test2"));

    @Spy MockAccountService service = new MockAccountService() {
        @Override
        public UserAccount getAccount(String id) {
            return new UserAccount() {
                @Override
                public List<String> getEmails() {
                    return ImmutableList.of("test1", "test2");
                }
            };
        }
    };
    when(service.getAccount(anyString())).thenReturn(service.getAccount("id"));
    service.getAccount("id");
    verify(service, times(1)).getAccount(anyString());

    @Spy MockAccountRpcService accountRpcService = new Mock