java
public void testTokenLocationAfterFieldName() throws Exception {
    JsonFactory jf = new JsonFactory();
    String doc = "{\"name\":123}";

    // Test with Reader-based parser
    {
        JsonParser jp = jf.createJsonParser(new StringReader(doc));
        assertEquals(JsonToken.START_OBJECT, jp.nextToken());
        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());
        assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
        assertEquals(1, jp.getTokenLocation().getLineNr());
        assertEquals(9, jp.getTokenLocation().getColumnNr());
        jp.close();
        jp = jf.createJsonParser(new StringReader(doc));
        assertEquals(JsonToken.START_OBJECT, jp.nextToken());
        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());
        assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
        assertEquals(1, jp.getTokenLocation().getLineNr());
        assertEquals(9, jp.getTokenLocation().getColumnNr());
    }

    // Test with Stream-based parser
    {
        JsonParser jp = jf.createJsonParser(new ByteArrayInputStream(doc.getBytes("UTF-8")));
        assertEquals(JsonToken.START_OBJECT, jp.nextToken());
        assertEquals(JsonToken.FIELD_NAME, jp.nextToken());
        assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());
        assertEquals(1, jp.getToken