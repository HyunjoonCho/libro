java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameters;

import java.util.Arrays;
import java.util.Collection;

import static org.junit.Assert.assertThrows;

@RunWith(Parameterized.class)
public class WeightMultivariateVectorOptimizerTest {

    private int n;

    public WeightMultivariateVectorOptimizerTest(int n) {
        this.n = n;
    }

    @Parameters
    public static Collection<Object[]> data() {
        return Arrays.asList(new Object[][]{
                {1000},
                {2000},
                {40000},
                {41200},
                // Add more test cases as needed
        });
    }

    @Test
    public void testWeightMultivariateVectorOptimizerMemoryIssue() {
        // Create a large number of weights
        double[] weights = new double[n];

        // Create a multivariate vector optimizer
        // This should cause a memory issue when n is large
        // The exact implementation may vary depending on the multivariate vector optimizer being used
        // For example, with SimpleRegression:
        SimpleRegression regression = new SimpleRegression();
        regression.addData(weights);
    }
}
