java
public void testPolymorphicTypesLosingProperties() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    // Define a base class with a property
    class Base {
        @JsonProperty("baseProperty")
        public String baseProperty = "baseValue";
    }
    // Define a subclass that extends the base class and adds its own property
    class Sub extends Base {
        @JsonProperty("subProperty")
        public String subProperty = "subValue";
    }
    // Define a type resolver that uses the default implementation
    SimpleModule module = new SimpleModule();
    module.addAbstractTypeMapping(Base.class, Sub.class);
    module.setDefaultTyping(new StdDelegatingTypeFactory());
    mapper.registerModule(module);
    
    // Serialize the object to JSON
    String json = mapper.writeValueAsString(new Sub());
    // The JSON string should contain both properties
    assertEquals("{\"baseProperty\":\"baseValue\",\"subProperty\":\"subValue\"}", json);
}
