java
public void testBrentOptimizer() {
    // Create a function to optimize
    final double[] result = new double[1];
    final UnivariateFunction func = new AbstractUnivariateFunction() {
        @Override
        public double value(double x) {
            result[0] = x;
            return Math.pow(x - 2, 2);
        }
    };

    // Initialize the optimizer
    BrentOptimizer brentOptimizer = new BrentOptimizer(0, 5, 1e-6, 1e-10);
    brentOptimizer.optimize(func, new DifferentiableFunction() {
        @Override
        public double value(double x) {
            return func.value(x);
        }

        @Override
        public double derivative(double x) {
            return -2 * (x - 2);
        }
    });

    // Check that the result is correct
    assertEquals(2, result[0], 1e-6);
}
