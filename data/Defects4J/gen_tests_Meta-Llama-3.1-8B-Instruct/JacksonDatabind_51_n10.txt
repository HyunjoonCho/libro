java
public class TestTypeResolver {
    @Test
    public void testTypeResolver() throws JsonProcessingException {
        // Create a simple POJO with a generic type
        class GenericType<T> {
            private T value;

            public T getValue() {
                return value;
            }

            public void setValue(T value) {
                this.value = value;
            }
        }

        // Create a TypeIdResolver that returns a JavaType for the generic type
        TypeFactory typeFactory = new StdTypeFactory();
        JavaType genericType = typeFactory.constructType(GenericType.class, typeFactory.constructType(String.class));
        TypeIdResolver resolver = new TypeIdResolver() {
            @Override
            public JavaType resolveType(DeserializationContext ctxt, String type) throws JsonMappingException {
                return genericType;
            }
        };

        // Create a ObjectMapper with the resolver
        ObjectMapper mapper = new ObjectMapper();
        mapper.setTypeIdResolver(resolver);

        // Try to deserialize a JSON string into the generic type
        String json = "{\"value\":\"hello\"}";
        GenericType<String> result = mapper.readValue(json, GenericType.class);

        // Check that the generic type is correctly used
        assertEquals("hello", result.getValue());
   