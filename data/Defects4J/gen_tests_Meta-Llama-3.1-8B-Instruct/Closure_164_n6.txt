java
public void testFunctionOverloading() {
    // Test that a function with a parameter of type (string, number) cannot be assigned to a function with a parameter of type (number)
    try {
        // This should throw a compiler error
        // func(paramFunc2);
        // However, since Java does not support function overloading like JavaScript, we can test this using method references
        // Here we are testing the opposite scenario, where a function with a parameter of type (number) is assigned to a function with a parameter of type (string, number)
        // This should throw a compiler error
        ((Function<String, Number, Boolean>) (x, y) -> true).accept("hello", 5);
    } catch (Exception e) {
        // This should throw a compiler error, similar to the JavaScript example
    }
}

// Helper function to test
interface Function<T1, T2, R> {
    R accept(T1 t1, T2 t2);
}

// Test functions
Function<String, Number, Boolean> paramFunc1 = (x, y) -> true;
Function<String, Boolean> paramFunc2 = (x) -> true;
