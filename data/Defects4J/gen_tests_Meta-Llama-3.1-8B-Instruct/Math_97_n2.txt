java
public void testBrentSolverIllegalArgumentException() {
    // Create a function with a root at 0
    UnivariateFunction f = new AbstractUnivariateFunction() {
        @Override
        public double value(double x) {
            return x * x;
        }
    };

    // Test case that should not throw an exception
    BrentSolver solver = new BrentSolver(f);
    try {
        solver.solve(0.0, 1.0);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        fail("Expected no exception");
    }

    // Test case that should throw an exception
    solver = new BrentSolver(f);
    try {
        solver.solve(-100000.0, 1.7976931348623157E308);
        fail("Expected IllegalArgumentException");
    } catch (IllegalArgumentException e) {
        // Expected exception
    }

    // Test case with a modified BrentSolver that returns 0 when one endpoint is 0
    BrentSolver modifiedSolver = new ModifiedBrentSolver(f);
    assertEquals(0, modifiedSolver.solve(-100000.0, 1.7976931348623157E308), 1e-6);
}

class ModifiedBrentSolver extends BrentSolver