java
public void testTypeIdResolver() {
    // Create a TypeIdResolver that returns a JavaType for a generic type
    TypeIdResolver resolver = new TypeIdResolver() {
        @Override
        public JavaType resolveType(DeserializationConfig config, String typeId) {
            // Return a JavaType for a generic type (e.g. List<String>)
            return new TypeFactory(config).constructCollectionType(List.class, String.class);
        }
    };

    // Create a BeanProperty with the TypeIdResolver
    BeanProperty prop = new BeanProperty.Builder()
           .name("property")
           .type(String.class)
           .typeIdResolver(resolver)
           .build();

    // Create a BeanDeserializer
    BeanDeserializer deserializer = new BeanDeserializer(prop);

    // Try to deserialize a JSON string that references the generic type
    JsonNode json = JsonNodeFactory.instance.fromString("{\"property\":[\"hello\"]}");
    DeserializationContext context = DeserializationContext.empty();
    Object value = deserializer.deserialize(json, context);
    // Verify that the deserialized value is not a raw List, but a List<String>
    assertTrue(value instanceof List.class);
    List<?> list = (List<?>) value;
    assertTrue(list.get(