public void testTypeIdResolver() {
    // Create a type resolver that returns a JavaType for a generic type
    TypeIdResolver resolver = new TypeIdResolver() {
        @Override
        public JavaType resolveType(DeserializationContext context, Object value) throws JsonMappingException {
            return TypeFactory.defaultInstance().constructParametricType(List.class, Integer.class);
        }
    };

    // Create a JSON node with a list of integers
    JsonNode node = JsonNodeFactory.instance.createArrayNode().add(1).add(2).add(3);

    // Use the resolver to deserialize the node
    DeserializationConfig config = DeserializationConfig.defaultInstance();
    config.setHandlerInstantiator(new HandlerInstantiator() {
        @Override
        public Object instantiate(DeserializationConfig config, JavaType type, TypeFactory typeFactory, Annotated classAnnotated) throws JacksonException {
            return resolver;
        }
    });
    ObjectMapper mapper = new ObjectMapper(config);
    List<Integer> list = mapper.readValue(node.toString(), List.class);

    // Verify that the list is empty, indicating that the generic type was not properly resolved
    assertEquals(0, list.size());
}