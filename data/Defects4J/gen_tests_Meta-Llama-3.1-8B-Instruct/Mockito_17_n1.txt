java
import org.junit.Test;
import org.mockito.Mockito;
import org.mockito.exceptions.verification.ArgumentsAreDifferent;
import org.mockito.exceptions.verification.junit.ComparisonFailure;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import static org.junit.Assert.fail;

public class VerificationTimeoutTest {

    @Test(expected = VerificationError.class)
    public void shouldThrowVerificationErrorWithNoJUnitOnClasspath() throws Exception {
        Class<?> verificationOverTimeImplClass = Class.forName("org.mockito.internal.verification.VerificationOverTimeImpl");
        Constructor<?> verificationOverTimeImplConstructor = verificationOverTimeImplClass.getConstructor();
        verificationOverTimeImplConstructor.setAccessible(true);
        Object verificationOverTimeImpl = verificationOverTimeImplConstructor.newInstance();

        Class<?> verificationTimeoutClass = Class.forName("org.mockito.verification.Timeout");
        Constructor<?> verificationTimeoutConstructor = verificationTimeoutClass.getConstructor();
        verificationTimeoutConstructor.setAccessible(true);
        Object verificationTimeout = verificationTimeoutConstructor.newInstance();

        verificationTimeoutClass.getMethod("init", Object.class).invoke(verificationTimeout, verificationOverTimeImpl);

        Class<?> argumentsAreDifferentClass = Class.forName("org.mockito.exceptions.verification.junit.ArgumentsAreDifferent");
        Constructor