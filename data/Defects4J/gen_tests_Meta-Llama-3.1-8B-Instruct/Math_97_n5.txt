java
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.optim.nonlinear.scalar.BrentSolver;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class BrentSolverTest {

    @Test
    public void testBrentSolver() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return x * x - 1;
            }
        };

        BrentSolver solver = new BrentSolver();
        try {
            solver.solve(0.0, 1000000.0, f);
        } catch (Exception e) {
            // Expected exception
            return;
        }
        fail("Expected IllegalArgumentException to be thrown");
    }

    @Test
    public void testBrentSolverShouldReturnZero() {
        UnivariateFunction f = new UnivariateFunction() {
            @Override
            public double value(double x) {
                return x * x - 1;
            }
        };

        BrentSolver solver = new BrentSolver();
        double result = solver.solve(0.0, 1000000.0, f);
        assertEquals(0.0, result, 1e-9);
    }
}
