java
@Test
public void testDeserializeWithDefaultTyping() throws JsonProcessingException {
    // Create a deserialization configuration that allows default typing
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);

    // Create a malicious object that exploits the vulnerability
    Object maliciousObject = new Object() {
        @Override
        public Class<?> getClass() {
            try {
                return Class.forName("java.lang.Runtime");
            } catch (ClassNotFoundException e) {
                throw new RuntimeException(e);
            }
        }
    };

    // Attempt to deserialize the malicious object
    try {
        mapper.readValue(mapper.writeValueAsBytes(maliciousObject), Object.class);
        fail("Expected JsonMappingException to be thrown");
    } catch (JsonMappingException e) {
        // Expected exception
    }
}
