java
import org.apache.commons.math.linear.Array2DRealMatrix;
import org.apache.commons.math.linear.SingularValueDecomposition;
import org.apache.commons.math.linear.SingularValueDecompositionImpl;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class SingularValueDecompositionTest {

    @Test
    public void testSingularMatrix() {
        double[][] data = {{1.0, 2.0, 3.0}, {2.0, 3.0, 4.0}, {3.0, 5.0, 7.0}};
        Array2DRealMatrix A = new Array2DRealMatrix(data);
        SingularValueDecomposition decomp = new SingularValueDecompositionImpl(A);
        double[] singularValues = decomp.getSingularValues();
        // Due to the nature of floating point arithmetic, we can't assert the last value is exactly 0.
        // We can only assert that it is close to 0.
        for (int i = 0; i < singularValues.length - 1; i++) {
            assertTrue(singularValues[i] > 0