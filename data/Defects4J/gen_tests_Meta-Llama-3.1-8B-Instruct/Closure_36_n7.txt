public void testAddSingletonGetter() {
    // Create a class with a method that prevents unused class removal
    class Foo {
        private static Foo instance;
        public void add() {}
        public static Foo getInstance() {
            if (instance == null) {
                instance = new Foo();
            }
            return instance;
        }
    }
    
    // Compile the class
    String code = "goog.provide('foo');\n" +
                  "var foo = function() { this.values = []; };";
    code += "\nfoo.prototype.add = function(value) {this.values.push(value)};";
    code += "\n" + Foo.class.getName() + ".prototype.add = Foo.prototype.add;";
    
    // Check that the compiled code still contains the instance variable
    String compiledCode = ClosureCompiler.compile(code);
    assertTrue(compiledCode.contains("instance"));
}