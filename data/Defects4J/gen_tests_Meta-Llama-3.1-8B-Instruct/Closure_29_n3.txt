java
public void testIsFunctionClosureCompilerIssue() {
    // Original implementation (should not work)
    Function isFunction1 = new Function() {
        public boolean apply(Object functionToCheck) {
            Object getType = {};
            return functionToCheck!= null && getType.toString.apply(functionToCheck).equals("[object Function]");
        }
    };
    assertFalse(isFunction1.apply(null));
    assertTrue(isFunction1.apply(new Function() {
        public Object apply(Object... args) {
            return null;
        }
    }));

    // Working implementation (using array instead of object)
    Function isFunction2 = new Function() {
        public boolean apply(Object functionToCheck) {
            Object getType = new Object[] {};
            return functionToCheck!= null && getType.toString().equals("[object Array]");
        }
    };
    assertFalse(isFunction2.apply(null));
    assertTrue(isFunction2.apply(new Object[] {}));

    // Expected result
    assertTrue(isFunction1.apply(new Function() {
        public Object apply(Object... args) {
            return null;
        }
    }));
}
