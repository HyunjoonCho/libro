javascript
describe('testRemoveKey', () => {
    it('should return the correct value when key exists', () => {
        const customData = { key: 'value' };
        const testRemoveKey = (key) => {
            let dataSlot = customData;
            let retval = dataSlot && dataSlot[key];
            let hadKey = dataSlot && (key in dataSlot);

            if (dataSlot) {
                delete dataSlot[key];
            }

            return hadKey? retval : null;
        };

        expect(testRemoveKey('key')).toBe('value');
        expect('key' in customData).toBe(false);
    });
});

describe('compiled testRemoveKey', () => {
    it('should return the correct value when key exists', () => {
        const customData = { key: 'value' };
        let testRemoveKey = (key) => {
            let a = customData;
            let c = a && a[key];
            a && delete a[key];
            return a && key in a? c : null;
        };

        expect(testRemoveKey("