java
public void testAbstractEstimatorCovariances() {
    // Create a problem with bound and unbound parameters
    Problem problem = new Problem(2);
    problem.addParameter(new Parameter("unbound", 0, 1));
    problem.addParameter(new Parameter("bound", 0, 1, 0, 1));

    // Create an estimator
    AbstractEstimator estimator = new AbstractEstimator(problem) {
        @Override
        protected double[] calculateJacobian() {
            return new double[] {1, 0}; // Jacobian for unbound parameter only
        }
    };

    // Test that getCovariances() crashes with ArrayOutOfBounds exception
    try {
        estimator.getCovariances();
        fail("getCovariances() should crash with ArrayOutOfBounds exception");
    } catch (ArrayIndexOutOfBoundsException e) {
        // Expected exception
    }

    // Fix the issue by changing the loop to use getUnboundParameters()
    estimator = new AbstractEstimator(problem) {
        @Override
        protected double[] calculateJacobian() {
            return new double[] {1, 0}; // Jacobian for unbound parameter only
        }
    };

    double[] covariances =