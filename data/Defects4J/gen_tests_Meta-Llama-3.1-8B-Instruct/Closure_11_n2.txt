javascript
describe('Test Issue', function() {
    it('should report invalid property on function with @this annotation', function() {
        var Person = function(options) {};
        Person = makeClass('/* @lends Person.prototype */', {
            /**
             * @this {Person}
             * @param {{name: string, height: number}} options
             */
            initialize: function(options) {
                /** @type {string} */ this.name_ = options.thisPropDoesNotExist;
            },

            /**
             * @param {string} message
             * @this {Person}
             */
            say: function(message) {
                window.console.log(this.name_ +'says:'+ message);
            }
        });

        try {
            var joe = new Person({name: 'joe', height: 300});
            joe.say('hi');
        } catch (e) {
            expect(e.message).toContain('Invalid property name');
        }
    });
});

function makeClass(protoMethods) {
    var clazz = function() {
        this.initialize.apply(this, arguments);
    }
    for (var i in protoMethods) {
        clazz.prototype[i] = protoMethods[i];
    }

    return clazz;
}
