java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;

import org.junit.Test;

public class TestTypeRefinements {
    
    @Test
    public void testIntRefinement() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JaxbAnnotationModule());
        mapper.enable(SerializationFeature.INDENT_OUTPUT);
        
        // Test case 1: Ignore primitive/wrapper override
        String json1 = mapper.writeValueAsString(5);
        assertEquals("{\"value\":5}", json1);
        
        // Test case 2: Allow wrapper to "refine" primitive
        Integer intWrapper = 5;
        String json2 = mapper.writeValueAsString(intWrapper);
        assertEquals("{\"value\":5}", json2);
        
        // Test case 3: Allow wrapper to "refine" primitive (with different type)
        int primitiveInt = 5;
        String json3 = mapper.writeValueAsString(primitiveInt);
        assertEquals("{\"value\":5}", json3);
    }
}
