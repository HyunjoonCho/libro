public void testLevenbergMarquardtInconsistency() {
    // Set up a simple unconstrained minimization problem
    double[] x0 = new double[] {1, 2};
    double[] target = new double[] {0};
    int n = x0.length;
    int m = target.length;
    UnivariateFunction f = new SimpleUnivariateFunction() {
        @Override
        public double value(double x) {
            return Math.pow(x[0] - 1, 2) + Math.pow(x[1] - 2, 2);
        }
    };
    UnivariateFunction[] g = new UnivariateFunction[] {
        new SimpleUnivariateFunction() {
            @Override
            public double value(double x) {
                return x[0] - 1;
            }
        },
        new SimpleUnivariateFunction() {
            @Override
            public double value(double x) {
                return x[1] - 2;
            }
        }
    };
    LevenbergMarquardt minimizer = new LevenbergMarquardt(x0, f, g, target);
    PointValuePair result = minimizer.doOptimize();
    double[] point =