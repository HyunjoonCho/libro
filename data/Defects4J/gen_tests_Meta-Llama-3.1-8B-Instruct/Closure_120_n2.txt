public void testOverzealousOptimization() {
    int uid;
    int _uid;
    int value = 0;

    reset();
    _uid = uid;

    if (uid < 0.5) {
        reset();
        _uid = uid;
    }

    if (_uid!= uid) {
        assert false;
    }

    // Adding an extra assignment to force the compiler to not optimize away the local variable
    uid = _uid;

    if (_uid!= uid) {
        assert false;
    }

    // Using a non-primitive type to prevent the optimization
    Object objUid;
    Object objUidCopy;
    objUid = uid;

    if (uid < 0.5) {
        reset();
        objUidCopy = uid;
    }

    if (objUid!= objUidCopy) {
        assert false;
    }
}