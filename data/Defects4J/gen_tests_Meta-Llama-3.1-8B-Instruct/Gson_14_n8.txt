java
public void testResolveRecursiveSuper() {
    // Define the classes
    private static class Foo1<A> {
        Foo2<? extends A> foo2;
    }

    private static class Foo2<B> {
        Foo1<? super B> foo1;
    }

    // Create a Gson instance
    Gson gson = new Gson();

    // Attempt to resolve the type of Foo1 with a type parameter
    try {
        // This should not throw a StackOverflowError
        Type type = new TypeToken<Foo1<Integer>>(){}.getType();
        gson.getAdapter(type);

        // This should not throw a StackOverflowError
        type = new TypeToken<Foo1<Number>>(){}.getType();
        gson.getAdapter(type);

        // This should not throw a StackOverflowError
        type = new TypeToken<Foo1<Object>>(){}.getType();
        gson.getAdapter(type);

        // This should throw a StackOverflowError
        type = new TypeToken<Foo1<String>>(){}.getType();
        gson.getAdapter(type);
    } catch (StackOverflowError e) {
        // Expected
    }

    // Attempt to resolve the type of Foo2 with a type parameter
    try {
        // This should not throw