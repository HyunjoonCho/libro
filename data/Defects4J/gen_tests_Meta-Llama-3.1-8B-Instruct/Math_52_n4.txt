public void testNumericalProblemsInRotationCreation() {
    double[] u1 = { -4921140.837095533, -2.1512094250440013E7, -890093.279426377 };
    double[] u2 = { -2.7238580938724895E9, -2.169664921341876E9, 6.749688708885301E10 };
    double[] v1 = { 1, 0, 0 };
    double[] v2 = { 0, 0, 1 };

    double[] v1Prime = new double[3];
    double[] v2Prime = new double[3];

    // Assuming the Quaternion constructor is in the same class
    Quaternion quaternion = new Quaternion(u1, u2, v1, v2);
    quaternion.createRotation(u1, u2, v1, v2);

    // Manually calculate v1' and v2'
    double v1PrimeSquared = u1[0]*u1[0] + u1[1]*u1[1] + u1[2]*u1[2];
    double v2PrimeSquared = u2[0