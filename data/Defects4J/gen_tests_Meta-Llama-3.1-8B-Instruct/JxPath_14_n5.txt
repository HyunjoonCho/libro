public void testRoundingFunctions() {
    // floor
    try {
        NumberUtils.floor(Double.NaN);
        fail("Expected ArithmeticException for NaN");
    } catch (ArithmeticException e) {
        // expected
    }
    try {
        NumberUtils.floor(Double.NEGATIVE_INFINITY);
        fail("Expected ArithmeticException for negative infinity");
    } catch (ArithmeticException e) {
        // expected
    }
    try {
        NumberUtils.floor(Double.POSITIVE_INFINITY);
        fail("Expected ArithmeticException for positive infinity");
    } catch (ArithmeticException e) {
        // expected

    // ceiling
    try {
        NumberUtils.ceiling(Double.NaN);
        fail("Expected ArithmeticException for NaN");
    } catch (ArithmeticException e) {
        // expected
    }
    try {
        NumberUtils.ceiling(Double.NEGATIVE_INFINITY);
        fail("Expected ArithmeticException for negative infinity");
    } catch (ArithmeticException e) {
        // expected
    }
    try {
        NumberUtils.ceiling(Double.POSITIVE_INFINITY);
        fail("Expected ArithmeticException for positive infinity");
    } catch (ArithmeticException e) {
        // expected

    // round
    try {
        NumberUtils.round(Double.NaN);