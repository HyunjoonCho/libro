javascript
// t.js
/**
 * @interface
 */
function OtherType() {}

/**
 * @implements {MyType}
 * @constructor
 */
function MyType() {}

/**
 * @type {MyType}
 */
var x = /** @type {!OtherType} */ (new Object());

// Test case
function testCycleDetection() {
  try {
    // Create a cycle by implementing MyType with itself
    var MyTypeImpl = function() {};
    MyTypeImpl.prototype = Object.create(MyType.prototype);
    MyType.prototype = Object.create(MyTypeImpl.prototype);
    new MyTypeImpl();
  } catch (e) {
    // Expected exception: Infinite recursion in PrototypeObjectType.isSubtype
    if (!(e instanceof Error && e.message.includes("Infinite recursion in PrototypeObjectType.isSubtype"))) {
      throw e;
    }
  }
}
