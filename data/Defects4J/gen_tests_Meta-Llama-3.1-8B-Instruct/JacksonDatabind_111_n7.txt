java
public class TestReferenceTypeDeserializer {
    @Test
    public void testDeserializeNull() throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        JsonNode jsonNode = JsonNodeFactory.instance.fromString("{\"refRef\": null}");
        JsonNode jsonNode2 = JsonNodeFactory.instance.fromString("{\"refRef\": 2}");
        
        MyBean intRef = objectMapper.treeToValue(jsonNode, MyBean.class);
        Assertions.assertNotNull(intRef.refRef); // succeeds
        Assertions.assertNotNull(intRef.refRef.get()); // succeeds
        Assertions.assertEquals(intRef.refRef.get().get(), null); // fails
        
        MyBean nullRef = objectMapper.treeToValue(jsonNode2, MyBean.class);
        Assertions.assertNotNull(nullRef.refRef); // succeeds
        Assertions.assertNotNull(nullRef.refRef.get()); // succeeds
        Assertions.assertEquals(nullRef.refRef.get().get(), new Integer(2)); // succeeds
    }

    static class MyBean {
        private AtomicReference<AtomicReference<Integer>> refRef;
        public AtomicReference<AtomicReference<Integer>> getRefRef() {
            return refRef;
        }
        public void setRefRef(AtomicReference<AtomicReference<Integer>> refRef) {
            this.refRef = refRef;
        }
    }
}
