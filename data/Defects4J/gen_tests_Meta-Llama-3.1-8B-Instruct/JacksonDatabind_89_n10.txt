java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.TypeFactory;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;

public class JacksonTest {

    public void testBlockJDKTypesFromPolymorphicDeserialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();

        // Test that we can deserialize a known-safe class
        InputStream safeJson = new ByteArrayInputStream("{\"value\":\"hello\"}".getBytes());
        JavaType safeType = typeFactory.constructType(String.class);
        Object safeObject = mapper.readValue(safeJson, safeType);
        assertNotNull(safeObject);

        // Test that we cannot deserialize an unsafe class (e.g. java.lang.reflect.Proxy)
        InputStream unsafeJson = new ByteArrayInputStream("{\"value\":\"java.lang.reflect.Proxy\"}".getBytes());
        JavaType unsafeType = typeFactory.constructType(Proxy.class);
        try {
            mapper.readValue(unsafeJson, unsafeType);
            fail("Expected IOException to be thrown");
        } catch (IOException e) {
            // Expected
        }
    }
}
