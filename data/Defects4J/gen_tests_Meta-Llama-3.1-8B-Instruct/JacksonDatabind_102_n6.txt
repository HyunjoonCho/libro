java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializationConfig;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.databind.ser.std.DateTimeSerializerBase;
import org.junit.Test;
import java.sql.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.TimeZone;

public class JacksonSerializationTest {

    @Test
    public void testCustomFormatForSqlDate() throws Exception {
        // Create an object mapper and configure it to override the format for java.sql.Date
        ObjectMapper mapper = new ObjectMapper();
        mapper.configOverride(Date.class).setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
        mapper.enable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

        // Create a java.sql.Date object
        Date date = new Date(0);

        // Serialize the object to JSON
        String json = mapper.writeValueAsString(date);

        // Verify that the date is serialized as a string
        assert json.equals("0000-01-01");
    }

    @Test
    public void testCustomFormatForSqlDateNotWorking() throws Exception {
        // Create an object mapper and configure it to override the