java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertTrue;

@RunWith(JUnit4.class)
public class TestNonEmptyExclusion {

    @Test
    public void testNonEmptyExclusion() throws Exception {
        ObjectMapper mapper = new ObjectMapper();

        // Test with Integer
        NonEmptyBean bean = new NonEmptyBean();
        bean.setIntField(1);
        String json = "{\"intField\":1}";
        byte[] bytes = mapper.writeValueAsBytes(bean);
        byte[] expectedBytes = mapper.writeValueAsBytes(new NonEmptyBean(1));
        assertTrue(java.util.Arrays.equals(bytes, expectedBytes));

        // Test with String
        bean = new NonEmptyBean();
        bean.setStringField("hello");
        json = "{\"stringField\":\"hello\"}";
        bytes = mapper.writeValueAsBytes(bean);
        expectedBytes = mapper.writeValueAsBytes(new NonEmptyBean("hello"));
        assertTrue(java.util.Arrays.equals(bytes, expectedBytes));
    }

    public static class NonEmptyBean {
        @JsonSerialize(using = NonEmptySerializer.class)
        @JsonDeserialize(using