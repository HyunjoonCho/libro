public void testAbstractClassSpying() {
    @Fake private FakeUserAccount userAccount = new FakeUserAccount();
    when(userAccount.getEmails()).thenReturn(Arrays.asList("email1", "email2"));
    userAccount.addEmail("email3");
    assertEquals(Arrays.asList("email1", "email2", "email3"), userAccount.getEmails());
}

public void testAbstractClassSpyingWithCallback() {
    @Fake private MockAccountService service = new MockAccountService() {
        @Override
        UserAccount getAccount(String id) {
            return new UserAccount() {
                @Override
                public List<String> getEmails() {
                    return Arrays.asList("email1", "email2");
                }

                @Override
                public void addEmail(String email) {
                    // do nothing
                }
            };
        }
    };
    when(service.getAccount("id")).thenAnswer(new Answer<UserAccount>() {
        @Override
        public UserAccount answer(InvocationOnMock invocation) throws Throwable {
            return (UserAccount) invocation.getArguments()[1];
        }
    });
    service.getAccount("id", new AsyncCallback<UserAccount>() {
        @Override
        public void onSuccess(UserAccount result) {
            assertNotNull(result);
        }