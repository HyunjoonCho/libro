java
public void testLevenbergMarquardt() {
    // Set up a simple function to optimize
    final int n = 2;
    final double[] x0 = new double[] { 1.0, 1.0 };
    final double[] f = new double[n];
    final double[] J = new double[n][n];
    final double[] r = new double[n];

    // Define the objective function and its Jacobian
    final FunctionWithBoxedDerivatives func = new FunctionWithBoxedDerivatives() {
        @Override
        public double value(double[] point) {
            return (point[0] - 1) * (point[0] - 1) + (point[1] - 2) * (point[1] - 2);
        }

        @Override
        public void derivative(double[] point, double[] derivatives) {
            derivatives[0] = 2 * (point[0] - 1);
            derivatives[1] = 2 * (point[1] - 2);
        }
    };

    // Run the Levenberg-Marquardt algorithm
    final LevenbergMarquardt optimizer = new