java
public class TestTreeSerialization {
    public static class X<T> {
        String s;
        List<T> items;

        public List<T> getItems() {
            return items;
        }

        public void setItems(List<T> items) {
            this.items = items;
        }
    }

    public static class ListAttributeSerializer extends JsonSerializer<X<Object>> {
        @Override
        public void serialize(X<Object> value, JsonGenerator jgen, SerializerProvider provider) throws IOException {
            jgen.writeStartObject();
            jgen.writeStringField("s", value.s);
            jgen.writeObjectField("items", value.items);
            jgen.writeEndObject();
        }

        @Override
        public void serializeWithType(X<Object> value, JsonGenerator jgen, SerializerProvider provider, TypeSerializer typeSer) throws IOException {
            typeSer.writeTypePrefixForObject(value, jgen);
            jgen.writeStringField("s", value.s);
            jgen.writeObjectField("items", value.items);
            typeSer.writeTypeSuffixForObject(value, jgen);
        }
    }

    @Test
    public void testTreeSerialization() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        X<Object