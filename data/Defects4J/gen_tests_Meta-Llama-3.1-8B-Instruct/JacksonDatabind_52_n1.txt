public void testExternalPropertyDeserialization() {
    ExternalIdDeserTest test = new ExternalIdDeserTest();
    ObjectMapper mapper = new ObjectMapper();
    mapper.readValue("{\"external\":\"int\"}", test.getClass());
    assertNotNull(test.getExternal());
    assertEquals(Integer.class, test.getExternal().getClass());
}
However, the above test will fail because the `external` property is not being deserialized correctly. The failing test you mentioned is likely due to a bug in the `ExternalIdDeser` class or its usage. To write a test that reproduces the failure behavior, you would need to know more about the class and its usage.

Here's an example of how the `ExternalIdDeser` class could be written to cause this issue:

public class ExternalIdDeser {
    @JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.EXTERNAL_PROPERTY)
    public Class<?> external;

    // getters and setters
}

In this case, the `external` field is annotated with `@JsonTypeInfo` to specify that it should be used as an external type identifier. However, when deserializing, the `external` field is not being set correctly, resulting in a null value.

To fix this