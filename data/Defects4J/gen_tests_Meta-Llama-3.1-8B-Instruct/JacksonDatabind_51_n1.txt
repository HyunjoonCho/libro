java
public class TestTypeIdResolver {

    public static class GenericType<T> {
        public T value;
    }

    public static class TypeIdResolver extends TypeIdResolverBase {
        @Override
        public JavaType resolveType(DeserializationConfig config, Type type) {
            if (type instanceof Class) {
                Class<?> clazz = (Class<?>) type;
                if (GenericUtils.resolveTypeParameter(clazz, 0)!= null) {
                    return new SimpleType<>(GenericUtils.resolveTypeParameter(clazz, 0));
                }
            }
            return super.resolveType(config, type);
        }
    }

    @Test
    public void testTypeIdResolver() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setTypeIdResolver(new TypeIdResolver());

        GenericType<String> gt = new GenericType<>();
        gt.value = "test";

        byte[] json = mapper.writeValueAsBytes(gt);

        // This should fail, because the generic type is not being used
        // We need to use a different approach to test this, since the generic type is not being used
        // One way is to check if the type is being serialized as expected
       