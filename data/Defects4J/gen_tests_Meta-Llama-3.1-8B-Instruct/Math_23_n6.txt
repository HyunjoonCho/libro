java
public void testBrentOptimizerBestPoint() {
    // Create a function to optimize
    final double[] bestPoint = new double[1];
    final double[] bestValue = new double[1];
    final Function1<Double, Double> func = new Function1<Double, Double>() {
        @Override
        public Double value(Double x) {
            bestValue[0] = x;
            return Math.pow(x, 2);
        }
    };

    // Set up the BrentOptimizer
    BrentOptimizer brentOptimizer = new BrentOptimizer();
    brentOptimizer.setTolerance(1e-6);
    brentOptimizer.setMinimize(true);

    // Simulate an evaluation of the function at two points
    brentOptimizer.evaluate(func, 0.0);
    brentOptimizer.evaluate(func, 0.1);

    // Simulate an evaluation at a point that is slightly worse than the previous one
    brentOptimizer.evaluate(func, 0.1 + 1e-7);

    // Run the BrentOptimizer
    brentOptimizer.optimize(func);

    // Check that the best point is the last one evaluated
    assertEquals(0.1, bestPoint[0], 1e-6);
