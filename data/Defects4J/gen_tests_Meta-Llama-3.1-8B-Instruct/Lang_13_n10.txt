java
import org.apache.commons.lang3.SerializationUtils;
import org.junit.Test;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertThrows;

public class SerializationUtilsTest {

    @Test
    public void primitiveTypeClassSerialization() throws Exception {
        Class<?> primitiveType = int.class;

        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(bos);
        oos.writeObject(primitiveType);
        oos.close();

        ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(bis);
        Class<?> deserializedPrimitiveType = (Class<?>) ois.readObject();
        ois.close();

        // Test that SerializationUtils throws a ClassNotFoundException
        assertThrows(ClassNotFoundException.class, () -> SerializationUtils.clone(primitiveType));

        // Test that the fixed ObjectInputStream implementation works correctly
        ois = new ObjectInputStream(bis) {
            @Override
            protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
                String name = desc.getName();
                try