public void testNumericalProblemsInRotationCreation() {
    Vector3D u1 = new Vector3D(-4921140.837095533, -2151209425.0440013, -890093.279426377);
    Vector3D u2 = new Vector3D(-2723858093.8724895E9, -2169664921.341876E9, 6749688708.885301E10);
    Vector3D v1 = new Vector3D(1, 0, 0);
    Vector3D v2 = new Vector3D(0, 0, 1);

    // Compute (v1', v2') pair
    Vector3D v1Prime = new Vector3D();
    Vector3D v2Prime = new Vector3D();
    // Implementation of the algorithm to compute (v1', v2') pair is not provided in the problem description
    // Assuming it is implemented correctly

    // Compute k = (v1' - u1)^(v2' - u2)
    Vector3D k = v1Prime.cross(v2Prime).subtract(u1).subtract(u2);

    // Compute c =