public void testMultiKeySerialization() {
    class MultiKey2<A, B> extends MultiKey {
        private static final long serialVersionUID = 1928896152249821416L;

        public MultiKey2(A key1, B key2) {
            super(key1, key2);
        }

        public A getFirst() {
            return (A) getKey(0);
        }

        public B getSecond() {
            return (B) getKey(1);
        }
    }
    MultiKey2<String, String> one = new MultiKey2<>("bla", "blub");
    ByteArrayOutputStream byteOut = new ByteArrayOutputStream();
    try (ObjectOutputStream out = new ObjectOutputStream(byteOut)) {
        out.writeObject(one);
    } catch (IOException e) {
        fail("IOException during serialization");
    }
    byte[] serialized = byteOut.toByteArray();
    ByteArrayInputStream byteIn = new ByteArrayInputStream(serialized);
    try (ObjectInputStream in = new ObjectInputStream(byteIn)) {
        MultiKey2<String, String> two = (MultiKey2<String, String>) in.readObject();
        assertEquals(one.getFirst(), two.getFirst());
        assertEquals(one.getSecond(), two.getSecond());
    } catch (ClassNotFoundException | IOException e) {
        fail("IOException during des