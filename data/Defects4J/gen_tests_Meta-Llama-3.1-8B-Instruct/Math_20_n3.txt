java
public void testCMAESOptimizerBounds() {
    // Set up CMAESOptimizer with small checkFeasableCount to reproduce the issue
    int checkFeasableCount = 1;
    CMAESOptimizer optimizer = new CMAESOptimizer(10, 10, 100, 0.5, 0.5, checkFeasableCount);

    // Define a simple objective function that is outside the bounds
    Function function = new Function() {
        @Override
        public double value(double[] x) {
            double sum = 0;
            for (double val : x) {
                sum += val;
            }
            return sum;
        }
    };

    // Optimize with a large upper bound
    double[] lowerBound = new double[] {-1000, -1000};
    double[] upperBound = new double[] {1000, 1000};
    double[] result = optimizer.optimize(function, lowerBound, upperBound);

    // Check that the result is outside the bounds
    assertNotEquals(lowerBound[0], result[0]);
    assertNotEquals(lowerBound[1], result[1]);
    assertNotEquals(upperBound[0], result[0]);
