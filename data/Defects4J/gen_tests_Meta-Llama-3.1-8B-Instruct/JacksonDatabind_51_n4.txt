java
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertThrows;

public class TestTypeIdResolver {

    @Test
    public void testGenericTypeIdResolver() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();
        TypeReference<List<String>> typeRef = new TypeReference<List<String>>() {};

        // Create a TypeIdResolver that returns a JavaType for a generic type
        TypeIdResolver resolver = new TypeIdResolver() {
            @Override
            public JavaType resolveType(TypeFactory typeFactory, Class<?> clazz) {
                return typeFactory.constructParametricType(List.class, String.class);
            }
        };

        // Register the TypeIdResolver with the ObjectMapper
        mapper.setTypeIdResolver(resolver);

        // Try to deserialize a JSON string into the generic type
        String json = "[\"hello\", \"world\"]";
        assertThrows(Exception.class, () -> mapper.readValue(json, typeRef));
    }
}
