java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationModule;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TestJacksonModuleJaxbAnnotations {

    @Test
    public void testIntAndInteger() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JaxbAnnotationModule());
        // Approach 1: Ignore primitive/wrapper override, return original type as is
        mapper.configure(SerializationFeature.WRITE_DUP_CLASS_TO_PROPERTY, true);
        String json = mapper.writeValueAsString(10);
        assertEquals("10", json);

        // Approach 2: Allow wrapper to "refine" primitive, return wrapper
        mapper.configure(SerializationFeature.WRITE_DUP_CLASS_TO_PROPERTY, false);
        json = mapper.writeValueAsString(Integer.valueOf(10));
        assertEquals("{\"value\":10}", json);
    }

    @Test
    public void testIntToLong() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(new JaxbAnnotationModule());
        // For now, let's assume we want to allow "int to long" refinements
        String json = mapper.writeValueAsString(10L);
