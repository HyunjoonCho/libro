java
public void testJacksonContinueParsingAfterFailOnInvalidSubtype() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, 
                        DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, 
                        DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    CallRecord call = new CallRecord();

    String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord parsedCall = objectMapper.readValue(json, CallRecord.class);
    assertNotNull(parsedCall.item2); // should not be null

    json = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}";
    try {
        objectMapper.readValue(json, CallRecord.class);
        fail("Expected JsonParseException");
    } catch (JsonParseException e) {
        // expected
    }

    json = "{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}, \"version\":0.0,\"application\":\"123\"}";
    parsedCall = objectMapper.readValue(json, CallRecord.class);
    assertNotNull(parsedCall.application); // should not be null
}
