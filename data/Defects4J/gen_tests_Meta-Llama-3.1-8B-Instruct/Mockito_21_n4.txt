public void testAbstractClassMocking() {
    FakeUserAccount userAccount = mock(FakeUserAccount.class);
    when(userAccount.getEmails()).thenReturn(new ArrayList<>());
    when(userAccount.addEmail("email")).thenAnswer(invocation -> {
        ((List<String>) invocation.getArguments()[0]).add("email");
        return null;
    });
    assertEquals(0, userAccount.getEmails().size());
    userAccount.addEmail("email");
    assertEquals(1, userAccount.getEmails().size());
}

public void testAbstractClassMocking2() {
    MockAccountService service = mock(MockAccountService.class);
    when(service.getAccount("id")).thenAnswer(invocation -> {
        return new UserAccount() {
            @Override
            public List<String> getEmails() {
                return new ArrayList<>();
            }
            @Override
            public void addEmail(String email) {
                // do nothing
            }
        };
    });
    // test the service
}

public void testAbstractClassMocking3() {
    MockAccountRpcService service = mock(MockAccountRpcService.class);
    when(service.getAccount("id")).thenAnswer(invocation -> {
        return mock(Future.class);
    });
    // test the service
}