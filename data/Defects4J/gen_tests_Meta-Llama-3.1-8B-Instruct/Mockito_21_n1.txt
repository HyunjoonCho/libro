java
public class AbstractClassMockingTest {

    @Test
    public void testFakeAbstractClass() {
        UserAccount fakeUserAccount = Mockito.mock(FakeUserAccount.class);
        when(fakeUserAccount.getEmails()).thenReturn(Arrays.asList("email1", "email2"));
        when(fakeUserAccount.addEmail("email3")).thenAnswer(invocation -> {
            fakeUserAccount.getEmails().add(invocation.getArgument(0));
            return null;
        });
        assertEquals(2, fakeUserAccount.getEmails().size());
        fakeUserAccount.addEmail("email3");
        assertEquals(3, fakeUserAccount.getEmails().size());
    }

    public static class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        public List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    @Test
    public void testCallbackStyleAbstractClass() {
        AccountService service = Mockito.mock(MockAccountService.class);
        when(service.getAccount("id")).thenAnswer(invocation -> {
