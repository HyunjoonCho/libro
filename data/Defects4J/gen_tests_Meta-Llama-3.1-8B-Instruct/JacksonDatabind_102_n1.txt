java
public void testCustomFormatForSqlDate() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));

    SqlDateSerializer serializer = new SqlDateSerializer();
    serializer.createContextual(JavaType.class, null, null, null, null);
    try {
        serializer.serialize(new java.sql.Date(0), null, null, null, null);
    } catch (JsonProcessingException e) {
        fail("Expected no exception");
    }

    // The above code should not throw an exception, but the custom format is not applied.
    // So we test that the default format is used
    try {
        serializer.serialize(new java.sql.Date(0), null, null, null, null);
        fail("Expected JsonProcessingException");
    } catch (JsonProcessingException e) {
        // Expected
    }

    // Test the hacky solution
    ObjectMapper mapperHacky = new ObjectMapper();
    mapperHacky.registerModule(new SimpleModule() {
        {
            addSerializer(java.sql.Date.class, new SqlDateSerializer().withFormat(false, new SimpleDateFormat("yyyy-MM-dd")));
        }
    });
    try {
        mapperHacky.writeValueAsString(new java.sql