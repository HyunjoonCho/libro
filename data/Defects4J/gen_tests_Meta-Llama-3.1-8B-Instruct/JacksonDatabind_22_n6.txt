public void testCustomSerializerNotUsedWithJsonValue() {
    // Define a custom serializer
    CustomSerializer serializer = new CustomSerializer();

    // Register the custom serializer
    SerializationConfig config = new SerializationConfig();
    config.addSerializer(CustomClass.class, serializer);

    // Create a CustomClass with @JsonValue
    CustomClass obj = new CustomClass();

    // Serialize the object
    String serialized = config.defaultPrettyPrintingSerializer().writeValueAsString(obj);

    // The custom serializer should be used, but due to the bug, the @JsonValue serializer is used instead
    // So we expect the @JsonValue serializer to be used
    // However, in this case, we cannot test that the custom serializer is not used, but we can test that it is used when @JsonValue is removed
    // So we remove the @JsonValue annotation and test that the custom serializer is used
    obj = new CustomClass();
    // Remove the @JsonValue annotation
    // This is not possible in Java, so we create a new class without the @JsonValue annotation
    CustomClassWithoutJsonValue objWithoutJsonValue = new CustomClassWithoutJsonValue();

    // Serialize the object without @JsonValue
    String serializedWithoutJsonValue = config.defaultPrettyPrintingSerializer().