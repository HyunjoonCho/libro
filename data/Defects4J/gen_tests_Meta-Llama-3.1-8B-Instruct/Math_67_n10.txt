java
public void testMultiStartUnivariateRealOptimizerGetResult() {
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer();
    // Set up the underlying optimizer to return a non-optimal result
    // For simplicity, let's assume we're using a simple optimizer that just returns the first value
    Optimizer underlyingOptimizer = new Optimizer() {
        @Override
        public double optimize() {
            return 1.0;
        }
    };
    optimizer.setUnderlyingOptimizer(underlyingOptimizer);

    // Run the optimizer to get an optimal result
    double[] optima = new double[] { 2.0 };
    double[] optimaValues = new double[] { 0.0 };
    optimizer.setOptima(optima);
    optimizer.setOptimaValues(optimaValues);

    // Now getResult() should return the optimal result
    assertEquals(2.0, optimizer.getResult());

    // However, if we run the optimizer again, getResult() should still return the optimal result
    optimizer.optimize();
    assertEquals(2.0, optimizer.getResult());
}
