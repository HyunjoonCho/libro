java
public void testAbstractClassMocking() {
    // Arrange
    AccountService service = mock(AccountService.class);
    when(service.getAccount(anyString(), any(AsyncCallback.class))).thenAnswer(new Answer<Void>() {
        AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];
        @Override
        public Void answer(Runnable runnable) throws Throwable {
            UserAccount account = new UserAccount() {
                @Override
                public List<String> getEmails() {
                    return Arrays.asList("email1", "email2");
                }
                @Override
                public void addEmail(String email) {
                    // Do nothing
                }
            };
            callback.onSuccess(account);
            return null;
        }
    });

    // Act
    service.getAccount("id", new AsyncCallback<UserAccount>() {
        @Override
        public void onSuccess(UserAccount result) {
            List<String> emails = result.getEmails();
            assertEquals(2, emails.size());
        }

        @Override
        public void onFailure(Throwable e) {
            fail("Should not fail");
        }
    });

    // Assert
    verify(service).getAccount(anyString(), any(AsyncCallback.class));
}
