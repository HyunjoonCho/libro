public void testAbstractClassMocking() {
    @Spy FakeUserAccount userAccount = new FakeUserAccount();
    when(userAccount.addEmail(anyString())).thenAnswer(invocation -> {
        String email = invocation.getArgument(0);
        userAccount.getEmails().add(email);
        return null;
    });
    when(userAccount.getEmails()).thenReturn(new ArrayList<>());
    userAccount.addEmail("test1");
    userAccount.addEmail("test2");
    assertEquals(2, userAccount.getEmails().size());
}

public void testAbstractClassMocking2() {
    @Spy MockAccountService service = new MockAccountService() {
        @Override
        public UserAccount getAccount(String id) {
            return new FakeUserAccount();
        }
    };
    when(service.getAccount("id")).thenReturn(new FakeUserAccount());
}

public void testAbstractClassMocking3() {
    @Spy MockAccountRpcService service = new MockAccountRpcService() {
        @Override
        public Future<Account> getAccount(String id) {
            return mock(Future.class);
        }
    };
    when(service.getAccount("id")).thenReturn(mock(Account.class));
}