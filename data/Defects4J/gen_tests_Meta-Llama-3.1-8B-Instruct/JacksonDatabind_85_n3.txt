public void testDateTimeSerializerBaseContextual() {
    // Create a configuration with a custom date format
    SimpleModule module = new SimpleModule();
    module.addSerializer(LocalDateTime.class, new DateTimeSerializerBase() {
        @Override
        protected DateFormat getDateFormat(SerializationConfig config, JavaType type) {
            return SimpleDateFormat.getDateInstance(SimpleDateFormat.SHORT, Locale.US);
        }
    });
    ObjectMapper mapper = new ObjectMapper().registerModule(module);

    // Annotate a field with a custom date format
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    private LocalDateTime date;

    // Serialize the object and check the date format
    String json = mapper.writeValueAsString(new TestObject(date));
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    sdf.setTimeZone(TimeZone.getTimeZone("UTC"));
    try {
        Date dateValue = sdf.parse(mapper.readValue(json, Date.class));
        assertEquals("2024-07-26", sdf.format(dateValue));
    } catch (Exception e) {
        fail(e.getMessage());
    }
}

private static class TestObject {
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public LocalDateTime date;

    public