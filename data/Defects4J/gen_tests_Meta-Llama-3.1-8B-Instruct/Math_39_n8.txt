public void testEmbeddedRungeKuttaFirstStep() {
    final double start = 0;
    final double end = 1;
    final double expectedStepSize = 0.5;
    final double functionValue = 1.0;
    final double functionValueAtEnd = 2.0;
    final double functionValueAtStartPlusStep = 1.5;

    // Make the integration range extremely short
    double min = start;
    double max = start + expectedStepSize;

    // Test that the first step size is not checked against the integration range
    // and evaluate the function out of the range
    try {
        // This should throw an exception because the function is evaluated at a point outside the range
        Integrator integrator = new Integrator() {
            @Override
            public double integrate(double start, double end, double[] values) {
                return functionValueAtStartPlusStep;
            }
        };
        integrator.integrate(start, end, new double[0]);
        fail("Expected exception");
    } catch (Exception e) {
        // Expected exception
    }
}