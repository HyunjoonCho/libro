public void testGetIterations() {
    // setup
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    final AtomicReference<Integer> iterations = new AtomicReference<>(0);
    optimizer.addOptimizerEventListener(new BaseOptimizer.OptimizerEventListener() {
        @Override
        public void iterationStarted(BaseOptimizer optimizer) {
            iterations.set(optimizer.getIterations());
        }
    });

    // action
    optimizer.optimize(new MaxEval(100), new Target(new double[] { 1 }),
            new Weight(new double[] { 1 }), new InitialGuess(
                    new double[] { 3 }), new ModelFunction(
                    new MultivariateVectorFunction() {
                        @Override
                        public double[] value(double[] point)
                                throws IllegalArgumentException {
                            return new double[] { FastMath.pow(point[0], 4) };
                        }
                    }), new ModelFunctionJacobian(
                    new MultivariateMatrixFunction() {
                        @Override
                        public double[][] value(double[] point)
                                throws IllegalArgumentException {
                            return new double[][] { { 0.25 * FastMath.pow(
                                    point[0], 3) } };
                        }
                    }));

    // verify
    assertThat(optimizer.getEvaluations