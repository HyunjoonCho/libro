javascript
// Test case for issue: Casting a function before calling it produces bad code and breaks plugin code

var console = {
    log: function(message) {
        // This is a simple mock implementation for console.log
    }
};

var ActiveXObject = function() {
    this.GetVariable = function() {
        return "$version";
    };
};

var originalConsoleLog = console.log;
var originalActiveXCreate = window.ActiveXObject;

beforeEach(function() {
    window.console = console;
    window.ActiveXObject = ActiveXObject;
});

afterEach(function() {
    window.console = originalConsoleLog;
    window.ActiveXObject = originalActiveXCreate;
});

test('casting a function before calling it produces bad code', function() {
    // Test the buggy code
    var result = /** @type {function(!string):!string} */ ((new window.ActiveXObject( 'ShockwaveFlash.ShockwaveFlash' ))['GetVariable']);
    result = result(); // This should fail because of the (0,...) wrapping
    expect(result).toBeUndefined();

    // Test the fixed code
    result = /** @type {string} */ ((new window.ActiveXObject( 'ShockwaveFlash.Shockwave