public void testExtraneousTypeMapping() {
    // Test case 1: Abstract base type with explicit name
    Type type = new Type("BaseClass", new Type[] { new Type("SubClass") }, null);
    TypeResolutionResult result1 = TypeResolution.resolveType("BaseClass", new Type[] { type });
    assertTrue(result1.getTypeIds().contains("BaseClass"));
    
    // Test case 2: Abstract base type with default name
    Type type2 = new Type("BaseClass", new Type[] { new Type("SubClass") }, null);
    TypeResolutionResult result2 = TypeResolution.resolveType("BaseClass", new Type[] { type2 });
    assertFalse(result2.getTypeIds().contains("BaseClass"));
    
    // Test case 3: Concrete base type with explicit name
    Type type3 = new Type("BaseClass", new Type[] { new Type("SubClass") }, null, true);
    TypeResolutionResult result3 = TypeResolution.resolveType("BaseClass", new Type[] { type3 });
    assertTrue(result3.getTypeIds().contains("BaseClass"));
}