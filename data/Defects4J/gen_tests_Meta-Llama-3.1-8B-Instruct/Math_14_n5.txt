public void testMultivariateVectorOptimizerMemoryIssue() {
    double[] weights = new double[41200];
    for (int i = 0; i < weights.length; i++) {
        weights[i] = i;
    }
    Weight weight = new Weight(weights);
    try {
        // Any multivariate vector optimizer should reproduce the memory issue
        // For example, using the PowellMultivariateOptimizer
        PowellMultivariateOptimizer optimizer = new PowellMultivariateOptimizer();
        optimizer.optimize(new CurveFitter() {
            @Override
            public double[] value(double[] x) {
                // Simple polynomial curve fitter
                double sum = 0;
                for (int i = 0; i < x.length; i++) {
                    sum += Math.pow(x[i], 5);
                }
                return new double[]{sum};
            }
        }, weight);
        fail("Expected OutOfMemoryError");
    } catch (OutOfMemoryError e) {
        // Expected
    }
}