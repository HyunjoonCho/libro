java
@JsonComponent
public class CustomDateFormatSerializer extends DateTimeSerializerBase<Date> {

    private final String pattern;

    public CustomDateFormatSerializer(ObjectMapper mapper, JavaType type, TypeFactory typeFactory, String pattern) {
        super(mapper, type, typeFactory);
        this.pattern = pattern;
    }

    @Override
    protected void resolve(DeserializationConfig config, BeanProperty property, TypeDeserializer typeDeserializer, JsonFormatShape shape) {
        super.resolve(config, property, typeDeserializer, shape);
        String pattern = this.pattern;
        if (pattern == null) {
            pattern = StdDateFormat.DATE_FORMAT_STR_ISO8601;
        }
        // Test that the configured format is used instead of the default
        assertEquals(pattern, StdDateFormat.forPattern(pattern).toPattern());
    }

    @JsonFormat(pattern = "yyyy-MM-dd")
    public static class TestDate {
        @JsonFormat(pattern = "yyyy-MM-dd")
        private Date date;
    }
}
