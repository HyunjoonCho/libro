public void testDeserializationProblemHandler() {
    DeserializationContext ctxt = JsonFactory.createDeserializationContext();
    DeserializationProblemHandler handler = new DeserializationProblemHandler() {
        @Override
        public Object handleUnknownTypeId(DeserializationContext ctxt, JavaType type, String propertyName, TypeIdResolver idRes, String message) {
            return Void.class;
        }
    };
    try {
        JsonNode json = JsonNodeFactory.instance.objectNode();
        ctxt.initForReading(json, TypeFactory.defaultInstance);
        handler.handleUnknownTypeId(ctxt, TypeFactory.defaultInstance.constructType(Void.class), "test", new TypeIdResolver() {
            @Override
            public JavaType resolveType(DeserializationConfig config, DeserializationContext ctxt, String typeId) throws JsonMappingException {
                return null;
            }
        }, "test");
    } catch (Exception e) {
        assertNotNull(e);
    }
}