java
public void testPrimitiveWrapperRefinement() {
    ObjectMapper mapper = new ObjectMapper();
    ClassIntWithWrapper classIntWithWrapper = new ClassIntWithWrapper();

    // Test approach 1: ignore primitive/wrapper override, return original type as is
    ClassIntWithWrapper result1 = mapper.convertValue(classIntWithWrapper, ClassIntWithWrapper.class);
    assertEquals(Integer.class, result1.getIntField().getClass());

    // Test approach 2: allow wrapper to "refine" primitive, return wrapper
    // For this to work, the ObjectMapper needs to be configured to allow primitive-to-wrapper refinements
    mapper.activateDefaultTyping(DeserializationFeature.NON_PRIMITIVE_AS_WRAPPER_ARRAYS, DeserializationFeature.NON_PRIMITIVE_AS_WRAPPER_OBJECTS);
    ClassIntWithWrapper result2 = mapper.convertValue(classIntWithWrapper, ClassIntWithWrapper.class);
    assertEquals(Integer.class, result2.getIntField().getClass());
}

class ClassIntWithWrapper {
    public Integer getIntegerField() {
        return 1;
    }
}
