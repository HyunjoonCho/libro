java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.std.StringCollectionDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class CustomCollectionTest {

    public static class CustomImmutableStringCollection extends ArrayList<String> {
        public CustomImmutableStringCollection() {
            // Make the collection immutable by making the constructor private
        }
    }

    @Test(expected = InstantiationException.class)
    public void testDeserialization() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);

        CustomImmutableStringCollection collection = new CustomImmutableStringCollection();
        collection.add("string1");
        collection.add("string2");

        // Create a parent object with the custom collection as a property
        ParentObject parent = new ParentObject();
        parent.setStringCollection(collection);

        // Deserialization should fail
        mapper.readValue("{\"stringCollection\":[\"string1\",\"string2\"]}", ParentObject.class);
    }

    public static class ParentObject {
        private CustomImmutableStringCollection stringCollection;

        public void setStringCollection