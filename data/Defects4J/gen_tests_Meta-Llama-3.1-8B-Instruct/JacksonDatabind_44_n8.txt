java
public void testDefaultImplSubTypeResolution() {
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule module = new SimpleModule();
    module.addDeserializer(BaseClass.class, new BaseDeserializer());
    module.addDeserializer(SubClass.class, new SubDeserializer());
    mapper.registerModule(module);
    
    // Create an instance of SubClass and serialize it
    SubClass sub = new SubClass();
    String json = mapper.writeValueAsString(sub);
    
    // Now, let's verify that the default implementation is correctly used
    // and properties from the base class are not lost
    assertEquals("{\"baseProperty\":\"baseValue\"}", json);
}

class BaseClass {
    public String baseProperty = "baseValue";
}

class SubClass extends BaseClass {
    public String subProperty = "subValue";
}

class BaseDeserializer extends JsonDeserializer<BaseClass> {
    @Override
    public BaseClass deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        return new BaseClass();
    }
}

class SubDeserializer extends JsonDeserializer<SubClass> {
    @Override
    public SubClass deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        return new SubClass();
    }
}
