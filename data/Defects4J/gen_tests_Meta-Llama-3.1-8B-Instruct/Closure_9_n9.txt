java
import org.junit.Test;
import static org.junit.Assert.fail;

public class AmdModuleTest {

    @Test
    public void testAmdModuleInSubdirectory() throws Exception {
        // Create 1st AMD module in lib/Foo.js
        String fooJs = "define('module$lib$Foo', ['require'], function(require) { return { foo: 'bar' }; });";

        // Create 2nd AMD module in Bar.js depending on lib/Foo.js
        String barJs = "define('module$Bar', ['module$lib$Foo'], function(Foo) { return { bar: Foo.foo }; });";

        // Try to compile both files with Bar.js as main module
        String compilationCommand = "java -jar compiler.jar --transform_amd_modules --process_common_js_modules --common_js_entry_module=module$Bar --compilation_level=ADVANCED_OPTIMIZATIONS --js_output_file=out.js --js=Bar.js --js=lib/Foo.js";

        // Simulate compilation
        // In a real test, you would use a process builder to run the command and capture the output
        // For simplicity, we