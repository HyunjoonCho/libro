java
import org.junit.Test;

import static org.junit.Assert.fail;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class DateTimeZoneBuilderTest {

    @Test
    public void testDateTimeZoneBuilder() throws Exception {
        final DateTimeZoneBuilder builder1 = getTestDataTimeZoneBuilder();
        final DateTimeZoneBuilder builder2 = getTestDataTimeZoneBuilder();

        ExecutorService executor = Executors.newFixedThreadPool(2);
        executor.submit(new Runnable() {
            @Override
            public void run() {
                builder1.toDateTimeZone("TestDTZ1", true);
            }
        });
        executor.submit(new Runnable() {
            @Override
            public void run() {
                builder2.toDateTimeZone("TestDTZ2", true);
            }
        });
        executor.shutdown();
        try {
            executor.awaitTermination(10, TimeUnit.SECONDS);
        } catch (InterruptedException e) {
            fail("Thread interruption failed");
        }
    }

    private DateTimeZoneBuilder getTestDataTimeZoneBuilder() {
        return new DateTimeZoneBuilder()
               .addCutover(1601, 'w', 1, 1, 1, false, 7200000)
               .set