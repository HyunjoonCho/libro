java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.JavaType;
import java.io.IOException;
import java.util.HashMap;

public void testJacksonVulnerability() throws IOException {
    // Create an object with default typing
    HashMap<String, Object> object = new HashMap<>();
    object.put("foo", "bar");

    // Create a Jackson ObjectMapper
    ObjectMapper mapper = new ObjectMapper();

    // Use the TypeFactory to create a JavaType with default typing
    TypeFactory typeFactory = mapper.getTypeFactory();
    JavaType javaType = typeFactory.constructType(Object.class);

    // Attempt to deserialize the object into a default-typed object
    mapper.readValue("{\"foo\":\"bar\"}", javaType);

    // Note: This code will not actually trigger the vulnerability,
    // but it demonstrates the potential for deserialization attacks.
}
