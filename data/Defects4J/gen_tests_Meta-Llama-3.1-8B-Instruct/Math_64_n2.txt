java
public void testLevenbergMarquardtInconsistency() {
    double[] x0 = {1, 2};
    double[] bounds = new double[]{-10, -10, 10, 10};
    double[] point = new double[]{-5, -5};
    double[] function = new double[]{-1, -1};
    double cost = 2;
    double[] residuals = new double[]{-1, -1};
    
    // Set up the LevenbergMarquardt solver
    LevenbergMarquardt solver = new LevenbergMarquardt();
    solver.setInitialPoint(x0);
    solver.setBounds(bounds);
    
    // Run the optimization
    VectorialPointValuePair result = solver.doOptimize();
    
    // Check that the result is consistent
    assertEquals(point.length, result.getPoint().length);
    for (int i = 0; i < point.length; i++) {
        assertEquals(point[i], result.getPoint()[i], 1e-6);
    }
    assertEquals(cost, result.getValue(), 1e-6);
    for (int i