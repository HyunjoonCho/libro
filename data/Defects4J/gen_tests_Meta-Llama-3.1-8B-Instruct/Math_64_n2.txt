public void testLevenbergMarquardtInconsistency() {
    // Create a function to test
    UnivariateFunction f = new AbstractUnivariateFunction() {
        @Override
        public double value(double x) {
            return x * x + 2 * x + 3;
        }
    };

    // Create a LevenbergMarquardt optimizer
    LevenbergMarquardt optimizer = new LevenbergMarquardt(f);

    // Optimize the function
    VectorialPointValuePair result = optimizer.doOptimize();

    // Check that the value returned by doOptimize corresponds to the point
    double optimumPoint = result.getPoint()[0];
    double expectedValue = f.value(optimumPoint);
    double actualValue = result.getValue();
    assertEquals(expectedValue, actualValue, 1e-6);
}