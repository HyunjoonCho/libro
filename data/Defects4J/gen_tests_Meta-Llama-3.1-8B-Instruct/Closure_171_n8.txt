public void testAssignObjectLiteralToPrototype() {
    Function foo = new Function() {
        @Override
        public Object run(Object... args) {
            return null;
        }
    };
    Function inner = new Function() {
        @Override
        public Object run(Object... args) {
            foo.getClass().getDeclaredField("prototype").setAccessible(true);
            try {
                foo.getClass().getDeclaredField("prototype").set(foo, new Object() {
                    public void alert() {
                        System.out.println("hello world");
                    }
                });
            } catch (Exception e) {
                // Handle exception
            }
            return null;
        }
    };
    inner.run();
    try {
        foo.getClass().getDeclaredField("prototype").get(foo).getClass().getMethod("alert").invoke(foo.getClass().getDeclaredField("prototype").get(foo));
    } catch (Exception e) {
        // Handle exception
    }
}