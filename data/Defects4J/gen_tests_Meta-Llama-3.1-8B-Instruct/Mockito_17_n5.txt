java
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.mockito.junit.MockitoJUnitRunner;
import org.mockito.internal.verification.VerificationOverTimeImpl;
import org.mockito.exceptions.verification.junit.ArgumentsAreDifferent;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;

import static org.junit.Assert.fail;

@RunWith(MockitoJUnitRunner.class)
public class VerifyErrorOnVerificationWithTimeoutTest {

    @Test
    public void should_throw_VerifyError() {
        try {
            Class<?> clazz = Class.forName("org.mockito.internal.verification.VerificationOverTimeImpl");
            Constructor<?> constructor = clazz.getConstructor();
            Object verificationOverTimeImpl = constructor.newInstance();

            Class<?> argumentsAreDifferentClass = Class.forName("org.mockito.exceptions.verification.junit.ArgumentsAreDifferent");
            Constructor<?> argumentsAreDifferentConstructor = argumentsAreDifferentClass.getConstructor();
            Object argumentsAreDifferent = argumentsAreDifferentConstructor.newInstance();

            VerificationOverTimeImpl verificationOverTime = (VerificationOverTimeImpl) verificationOverTimeImpl;
            verificationOverTime.exception = (ArgumentsAreDifferent) argumentsAreDifferent;

            verificationOverTime.throwException();

            fail("Expected VerifyError or