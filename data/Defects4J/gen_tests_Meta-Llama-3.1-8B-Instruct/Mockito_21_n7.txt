java
public class AbstractClassMockingTest {
    
    @RunWith(MockitoJUnitRunner.class)
    public static class FakeUserAccount extends UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        public List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    @InjectMocks
    private FakeUserAccount userAccount;

    @Test
    public void testFakeUserAccount() {
        userAccount.addEmail("email1");
        userAccount.addEmail("email2");
        assertEquals(2, userAccount.getEmails().size());
    }

    public interface UserAccount {
        void addEmail(String email);
        List<String> getEmails();
    }

    @RunWith(MockitoJUnitRunner.class)
    public static class MockAccountService implements AccountService {
        @Override
        public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }

        abstract UserAccount getAccount(String id);
    }

    @InjectMocks
    private MockAccountService service;

    @Test
