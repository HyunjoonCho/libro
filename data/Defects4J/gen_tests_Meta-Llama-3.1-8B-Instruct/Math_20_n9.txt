java
public void testCMAESOptimizerBounds() {
    // Initialize the optimizer with a small checkFeasableCount to force isFeasible() to be called
    CMAESOptimizer optimizer = new CMAESOptimizer();
    optimizer.setCheckFeasableCount(1);
    
    // Initialize a simple objective function that always returns a value outside the bounds
    ObjectiveFunction func = new ObjectiveFunction() {
        @Override
        public double evaluate(double[] point) {
            return 10000; // a value outside the bounds
        }
        
        @Override
        public double getLowerBound() {
            return -100;
        }
        
        @Override
        public double getUpperBound() {
            return 100;
        }
    };
    
    // Optimize the function
    optimizer.optimize(func, 10);
    
    // Assert that the optimized value is outside the bounds
    assertTrue(optimizer.getBestSolution().getFitness() > 100);
}
