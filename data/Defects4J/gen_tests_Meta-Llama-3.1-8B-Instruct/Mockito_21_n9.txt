java
public void testMockingAbstractClasses() {
    // Example 1: Fake with trivial logic
    AbstractUserAccount fakeUserAccount = Mockito.mock(AbstractUserAccount.class);
    when(fakeUserAccount.getEmails()).thenReturn(new ArrayList<>());
    when(fakeUserAccount.addEmail(anyString())).thenAnswer(new Answer<Void>() {
        @Override
        public Void answer(InvocationOnMock invocation) throws Throwable {
            ((AbstractUserAccount) invocation.getMock().getClass().newInstance()).addEmail(invocation.getArgumentAt(0, String.class));
            return null;
        }
    });
    // This test is tedious because we need to manually program the logic for addEmail() to return the correct value in getEmails()
    assertEquals(0, ((AbstractUserAccount) fakeUserAccount).getEmails().size());

    // Example 2: Callback-style API
    AbstractAccountService fakeAccountService = Mockito.mock(AbstractAccountService.class);
    when(fakeAccountService.getAccount(eq("id"), any(AsyncCallback.class))).thenAnswer(new Answer<Void>() {
        AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];
        @Override
        public Void answer(InvocationOnMock invocation)