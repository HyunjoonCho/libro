java
public void testJsonValueOverrideCustomSerializer() {
    // Create a custom serializer for a simple type
    MyCustomSerializer customSerializer = new MyCustomSerializer();
    JacksonFactory factory = new ObjectMapper().getFactory();
    factory.registerModule(new SimpleModule().addSerializer(MyType.class, customSerializer));

    // Create an object with @JsonValue annotation
    MyType obj = new MyType("value");

    // Attempt to serialize the object
    ObjectMapper mapper = new ObjectMapper(factory);
    try {
        String serialized = mapper.writeValueAsString(obj);
        fail("Expected custom serializer to be used, but got default serialization");
    } catch (JsonProcessingException e) {
        // Expected
    }
}

class MyType {
    @JsonValue
    private String value;

    public MyType(String value) {
        this.value = value;
    }
}

class MyCustomSerializer extends JsonSerializer<MyType> {
    @Override
    public void serialize(MyType value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {
        gen.writeString("Custom serialized value");
    }
}
