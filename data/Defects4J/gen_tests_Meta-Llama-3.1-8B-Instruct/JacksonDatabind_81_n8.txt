public void testPrimitiveWrapperRefinement() {
    // Test case 1: ignore primitive/wrapper override, return original type as is
    ObjectMapper mapper = new ObjectMapper();
    JavaType intType = mapper.getTypeFactory().constructType(int.class);
    JavaType intWrapperType = mapper.getTypeFactory().constructType(Integer.class);
    assertEquals(intType, mapper.getDeserializationConfig().getHandlerInstantiator().createType(intType));
    assertEquals(intType, mapper.getDeserializationConfig().getHandlerInstantiator().createType(intWrapperType));

    // Test case 2: allow wrapper to "refine" primitive, return wrapper
    ObjectMapper mapper2 = new ObjectMapper();
    mapper2.enable(DeserializationFeature.USE_WRAPPER_NAME_AS_PROPERTY_NAME);
    JavaType intType2 = mapper2.getTypeFactory().constructType(int.class);
    JavaType intWrapperType2 = mapper2.getTypeFactory().constructType(Integer.class);
    assertEquals(intWrapperType2, mapper2.getDeserializationConfig().getHandlerInstantiator().createType(intType2));
    assertEquals(intWrapperType2, mapper2.getDeserializationConfig().getHandlerInstantiator().createType(intWrapperType2));
}