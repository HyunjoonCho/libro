javascript
describe('Template types on methods', () => {
    class Class {
        /**
         * @constructor
         * @template CLASS
         */
        constructor() {}

        /**
         * @param {function(CLASS):CLASS} a
         * @template T
         */
        foo(a) {
            return'string';
        }
    }

    function a(a) {
        return '';
    }

    it('should not throw an error when CLASS is not specified', () => {
        const instance = new Class();
        expect(() => instance.foo(a)).not.toThrow();
    });

    it('should throw an error when CLASS is inferred', () => {
        /**
         * @param {number} a
         * @return {string}
         */
        function a(a) {
            return '';
        }

        class Class {
            /**
             * @constructor
             * @template CLASS
             */
            constructor() {}

            /**
             * @param {function(CLASS):CLASS} a
             */
            foo(a) {
                return'string';
            }
        }

        const instance = new Class();
        expect(() => instance.foo(a)).toThrow();
    });
});
