java
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;

import org.junit.Test;
import static org.junit.Assert.assertEquals;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class TestCase {
  public final static ObjectMapper mapper = new ObjectMapper();

  @JsonSerialize(using = TestCase.CustomSer.class)
  public static class Data {
    public String aStr;
  }

  public static class CustomSer extends StdSerializer<Data> {
    public CustomSer() {
      super(Data.class);
    }

    @Override
    public void serialize(Data value, JsonGenerator gen, SerializerProvider provider) throws IOException {
      String attrStr = (String) provider.getAttribute("myAttr");
      gen.writeStartObject();
      gen.writeObjectField("aStr", "The value is: " + (attrStr == null? "NULL" : attrStr));
      gen.writeEndObject();
    }
  }

  @Test
  public void test() throws IOException {
   