public void testTemplateInference() {
    // Create a class with a template type parameter
    Class<?> clazz = new Class();

    // Create a method that takes a function as a parameter
    Method method = clazz.getMethod("foo", Function.class);

    // Create a method that returns a string and takes an int parameter
    Method otherMethod = clazz.getMethod("a", int.class);

    // Try to invoke the foo method with the a method as a parameter
    try {
        clazz.getMethod("foo", Function.class).invoke(clazz, (Function) otherMethod);
    } catch (Exception e) {
        // Verify that the exception is due to an unbound type parameter
        assertTrue(e.getMessage().contains("unbound type parameter 'CLASS'"));
    }
}

class Class {
    public String foo(Function<? extends Object> a) {
        return "string";
    }

    public String a(int a) {
        return "";
    }
}