public void testTypeAliases() {
    // Create a dynamic proxy class to mimic the behavior of the Closure compiler
    Class<?> foo = new ClassLoader() {
        @Override
        public Class<?> loadClass(String name) throws ClassNotFoundException {
            if (name.equals("foo.Foo")) {
                return Class.forName("foo.Foo");
            } else if (name.equals("foo.Foo$Bar")) {
                return Class.forName("foo.Foo$Bar");
            } else {
                return super.loadClass(name);
            }
        }
    }.loadClass("foo.Foo");

    // Test the annotation
    try {
        java.lang.reflect.Method method = foo.getMethod("constructor", foo.getClassLoader().loadClass("foo.Foo$Bar"));
        org.junit.Assert.fail("Expected compilation error");
    } catch (NoSuchMethodException e) {
        // Expected
    }
}