public void testAdvancedCompilation() {
    // Create a test class with a method that mimics the behavior of the Advanced compiler
    class A {
        int _x;
        public void func1() {
            this._x = 2;
            this.func2();
        }
        public void func2() {
            this._x = 3;
            this.func3();
        }
        public void func3() {
            System.out.println("func3 called");
        }
    }

    // Test that the reference is not saved correctly when using the original syntax
    A originalA = new A();
    originalA.func1 = originalA.func2;
    originalA.func2 = new A() {
        @Override
        public void func2() {
            System.out.println("func2 called");
            super.func3();
        }
    };

    // Verify that func3 is called
    originalA.func1();

    // Test that the reference is saved correctly when using the workaround syntax
    A workaroundA = new A();
    workaroundA.func1 = (A.Function) workaroundA.getClass().getDeclaredMethod("func1").getDeclaringClass().getDeclaredMethod("func2");
    workaroundA.func2 = new A()