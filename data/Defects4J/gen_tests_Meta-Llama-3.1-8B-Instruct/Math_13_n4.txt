public void testMultivariateVectorOptimizerMemoryIssue() {
    int n = 41200; // or any large number that reproduces the issue
    double[] weights = new double[n];
    for (int i = 0; i < n; i++) {
        weights[i] = i; // initialize with some values
    }
    try {
        MultivariateFunction f = new MyMultivariateFunction(weights);
        MultivariateOptimizer optimizer = new MyMultivariateOptimizer();
        optimizer.optimize(f, weights);
    } catch (OutOfMemoryError e) {
        // expected, large matrix creation fails
    }
}

private class MyMultivariateFunction implements MultivariateFunction {
    private double[] weights;

    public MyMultivariateFunction(double[] weights) {
        this.weights = weights;
    }

    @Override
    public double value(double[] point) {
        // dummy implementation
        return 0;
    }
}

private class MyMultivariateOptimizer extends MultivariateOptimizer {
    @Override
    public double optimize(MultivariateFunction f, double[] point) {
        // dummy implementation
        return 0;
    }
}