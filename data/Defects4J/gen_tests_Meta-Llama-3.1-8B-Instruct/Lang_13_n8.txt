java
import org.apache.commons.lang3.SerializationUtils;
import org.junit.Test;

public class SerializationUtilsTest {

    @Test(expected = ClassNotFoundException.class)
    public void testClassNotFoundExceptionForPrimitiveClass() {
        Class<?> primitiveType = int[].class;
        SerializationUtils.clone(primitiveType);
    }

    @Test
    public void testClassNotFoundExceptionForPrimitiveClassWithFallback() {
        ClassLoaderAwareObjectInputStream classLoaderAwareObjectInputStream = new ClassLoaderAwareObjectInputStream() {
            @Override
            protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {
                String name = desc.getName();
                try {
                    return Class.forName(name, false, getClass().getClassLoader());
                } catch (ClassNotFoundException ex) {
                    try {
                        return Class.forName(name, false, Thread.currentThread().getContextClassLoader());
                    } catch (Exception e) {
                        return super.resolveClass(desc);
                    }
                }
            }
        };

        SerializationUtils.clone(int[].class, classLoaderAwareObjectInputStream);
    }
}
