public void testIssueWithCustomEnumKeyDeserializer() throws IOException {
    String json = "{\"someMap\": {\"FOO\": \"bar\"}}";
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule simpleModule = new SimpleModule();
    simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer<SuperTypeEnum>() {
        @Override
        public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {
            return SuperTypeEnum.valueOf(jsonParser.getText());
        }
    });
    mapper.registerModule(simpleModule);

    SuperType superType = mapper.readValue(json, SuperType.class);
    assertEquals("Deserialized someMap.FOO should equal bar", "bar", superType.getSomeMap().get(SuperTypeEnum.FOO));

    // Test with missing type info
    json = "{\"someMap\": {\"FOO\": \"bar\"}}";
    DeserializationContext ctxt = mapper.getDeserializationConfig().makeContext(SuperType.class, json);
    JsonParser jp = mapper.getFactory().createParser(new ByteArrayInputStream(json.getBytes()));
    DeserializationContext context = ctxt.makeChildContext(jp);
    Map<SuperTypeEnum, String> map = new HashMap<>();
    map.put(SuperTypeEnum.FOO, "bar