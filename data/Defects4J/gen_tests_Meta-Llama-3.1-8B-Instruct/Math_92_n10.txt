java
public void testBinomialCoefficientLargeResult() {
    // Test using the recursive property
    assertEquals(MathUtils.binomialCoefficient(65, 32) + MathUtils.binomialCoefficient(65, 33),
                MathUtils.binomialCoefficient(66, 33));

    // Test using an externally calculated and expected value
    assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66, 33));

    // Test the suggested non-recursive implementation
    long expectedValue = binomialCoefficient(66, 33);
    assertEquals(expectedValue, MathUtils.binomialCoefficient(66, 33));
}

// Suggested non-recursive implementation
public static long binomialCoefficient(int n, int k) {
    if (k == 0 || k == n)
        return 1;
    BigInteger result = BigInteger.ONE;
    for (int i = k + 1; i <= n; i++) {
        result = result.multiply(BigInteger.valueOf(i));
    }
    for (int i = 1; i <= n - k; i++) {
        result = result.divide(BigInteger.valueOf(i));
    }
    if (result.compareTo(BigInteger