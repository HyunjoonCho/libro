public void testCompilerWarning() {
    // Create a mock Compiler instance
    Compiler compiler = new Compiler();

    // Create a mock Foo class with add and sub methods
    Foo foo = new Foo();
    foo.add = new Method("add", new Parameter[]{new Parameter("a", Type.NUMBER), new Parameter("b", Type.NUMBER)}, Type.NUMBER);
    foo.sub = new Method("sub", new Parameter[]{new Parameter("a", Type.NUMBER), new Parameter("b", Type.NUMBER)}, Type.NUMBER);

    // Create a mock Bar class that extends Foo
    Bar bar = new Bar();
    bar.add = new Method("add", new Parameter[]{new Parameter("one", Type.NUMBER)}, Type.NUMBER);
    bar.sub = new Method("sub", new Parameter[]{new Parameter("one", Type.NUMBER)}, Type.NUMBER);

    // Set the add and sub methods to be inherited from Foo
    bar.add.setInheritedFrom(foo.add);
    bar.sub.setInheritedFrom(foo.sub);

    // Check if the compiler warns about the overridden methods with different signatures
    compiler.check(bar);
    // Assert that the compiler warning is triggered
    assertTrue(compiler.hasWarning("Bar.prototype.add and