java
public void testSqlDateSerializerCustomFormat() {
    ObjectMapper mapper = new ObjectMapper();
    try {
        mapper.configOverride(java.sql.Date.class).setFormat(JsonFormat.Value.forPattern("yyyy-MM-dd"));
        // The following assertion should fail because the custom format is not applied
        // You can use a test helper library like AssertJ or Hamcrest to make this assertion more readable
        AssertJAssert.assertThat(mapper.writeValueAsString(new java.sql.Date(0L)), not(containsString("yyyy-MM-dd")));
    } catch (JsonProcessingException e) {
        // Expected because custom format is not applied
    }

    // Test that the hacky solution works
    mapper = new ObjectMapper();
    mapper.registerModule(new SimpleModule() {
        {
            addSerializer(
                    java.sql.Date.class,
                    new SqlDateSerializer().withFormat(false, new SimpleDateFormat("yyyy-MM-dd"))
            );
        }
    });
    AssertJAssert.assertThat(mapper.writeValueAsString(new java.sql.Date(0L)), containsString("yyyy-MM-dd"));
}
