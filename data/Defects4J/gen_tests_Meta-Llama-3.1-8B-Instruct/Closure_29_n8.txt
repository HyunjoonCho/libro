public void testClosureCompilerIssue() {
    Object obj = new Object();
    Object func = new Object() {
        public String toString() {
            return "[object Function]";
        }
    };
    
    Function original = new Function() {
        public Object invoke(Object... args) {
            return null;
        }
    };
    
    Function compiled1 = new Function() {
        public Object invoke(Object... args) {
            return obj.toString.apply(this);
        }
    };
    
    Function compiled2 = new Function() {
        public Object invoke(Object... args) {
            Object[] array = new Object[0];
            return array.toString.apply(this);
        }
    };
    
    assertNotSame(original.getClass(), compiled1.getClass());
    assertNotSame(original.getClass(), compiled2.getClass());
    assertTrue(isFunction(original));
    assertTrue(isFunction(compiled1));
    assertTrue(isFunction(compiled2));
}

private boolean isFunction(Object obj) {
    try {
        obj.getClass().getMethod("toString").invoke(obj);
        return true;
    } catch (Exception e) {
        return false;
    }
}