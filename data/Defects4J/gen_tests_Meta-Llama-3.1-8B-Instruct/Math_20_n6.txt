java
public void testCMAESOptimizerBounds() {
    // Create a CMAESOptimizer with a small checkFeasableCount to force early abandonment of feasible solutions
    CMAESOptimizer optimizer = new CMAESOptimizer(1);
    
    // Define the bounds for the optimization
    double[] lowerBound = new double[1];
    double[] upperBound = new double[1];
    lowerBound[0] = 0.0;
    upperBound[0] = 10.0;
    
    // Define an objective function that always returns a value outside the bounds
    ObjectiveFunction objectiveFunction = new ObjectiveFunction() {
        @Override
        public double evaluate(double[] point) {
            return 20.0; // This value is outside the bounds
        }
    };
    
    // Initialize the optimizer with a point that is within the bounds
    double[] initialPoint = new double[1];
    initialPoint[0] = 5.0;
    
    // Optimize the objective function
    optimizer.optimize(initialPoint, objectiveFunction, lowerBound, upperBound);
    
    // Check that the final solution is within the bounds
    double[] finalPoint = optimizer.getBestSolution();
    assertTrue(final