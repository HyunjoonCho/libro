javascript
describe('Issue 123', function() {
    it('should detect inheritance when prototype directly assigned', function() {
        function SuperClass() {}
        SuperClass.prototype.CustomMethod = function() {}

        function SubClass() {}
        SubClass.prototype = new SuperClass();

        SubClass.prototype.CustomMethod = function() {
            this.myProperty = "value";
        }

        var subClassInstance = new SubClass();

        // Check for the warning
        expect(function() {
            // Try to call the method on the prototype chain
            SuperClass.prototype.CustomMethod.call(subClassInstance);
        }).toThrow();
    });

    it('should not detect inheritance when prototype assignment is wrapped in a function', function() {
        function SuperClass() {}
        SuperClass.prototype.CustomMethod = function() {}

        function inherit(Child, Parent) {
            Child.prototype = new Parent();
        }

        function SubClass() {}
        inherit(SubClass, SuperClass);

        SubClass.prototype.CustomMethod = function() {
            this.myProperty = "value";
        }

        var subClassInstance = new SubClass();

        // Check that the method is callable on the prototype chain
        expect(function() {
            SuperClass.prototype.CustomMethod.call(subClassInstance);
        }).