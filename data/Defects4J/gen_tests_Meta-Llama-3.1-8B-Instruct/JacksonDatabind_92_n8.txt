java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.module.jakarta.ser.JakartaSerializerProvider;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.Base64;

public void testBlockJDKTypesFromDeserialization() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    TypeFactory typeFactory = mapper.getTypeFactory();
    JakartaSerializerProvider provider = new JakartaSerializerProvider(typeFactory);

    // Test that ClassLoader is blocked from deserialization
    InputStream in = getClass().getResourceAsStream("/class-loader.ser");
    try {
        mapper.readValue(in, ClassLoader.class);
        fail("ClassLoader should not be deserialized");
    } catch (IOException e) {
        // expected
    }

    // Test that URLClassLoader is blocked from deserialization
    in = getClass().getResourceAsStream("/url-class-loader.ser");
    try {
        mapper.readValue(in, URLClassLoader.class);
        fail("URLClassLoader should not be deserialized");
    } catch (IOException e) {
        // expected
    }

    // Test that SecureClassLoader is blocked from deserialization
    in = getClass().getResourceAsStream("/secure-class-loader.ser");
   