java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.junit.Test;

import java.lang.reflect.Type;
import java.util.concurrent.atomic.AtomicReference;

import static org.junit.Assert.fail;

public class GsonTest {

    private static class Foo1<A> {
        Foo2<? extends A> foo2;
    }

    private static class Foo2<B> {
        Foo1<? super B> foo1;
    }

    @Test(expected = StackOverflowError.class)
    public void testRecursiveResolveSimple() {
        Gson gson = new GsonBuilder().create();
        TypeAdapterFactory typeAdapterFactory = gson.getAdapterFactories().get(TypeToken.class);
        typeAdapterFactory.create(gson, new TypeToken<Foo1<String>>() {}.getType());
    }

    @Test
    public void testRecursiveResolveCollapsed() {
        Gson gson = new GsonBuilder().create();
        TypeAdapterFactory typeAdapterFactory = gson.getAdapterFactories().get(TypeToken.class);
        Type type = new TypeToken<Foo1<String>>() {}.getType();
        Type actualType = new AtomicReference<>((Type) typeAdapterFactory.create(gson, type));
        while (actualType!= Object.class) {
           