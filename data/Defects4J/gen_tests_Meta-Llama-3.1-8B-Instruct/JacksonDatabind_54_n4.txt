java
public void testJacksonSerializationWithOptional() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.setSerializationInclusion(JsonInclude.Include.NON_ABSENT);
    mapper.registerModule(new Jdk8Module());

    JsonResult result = new JsonResult();
    result.setA(Optional.empty());
    result.setB(Optional.empty());

    // Test that null is serialized as null
    String json1 = mapper.writeValueAsString(result);
    assertEquals("{\"a\":null,\"b\":null}", json1);

    // Test that NON_ABSENT does not ignore Optional.empty()
    JsonResult result2 = new JsonResult();
    result2.setA(null);
    result2.setB(Optional.empty());
    String json2 = mapper.writeValueAsString(result2);
    assertEquals("{\"a\":null,\"b\":null}", json2);

    // Test that using NON_EMPTY removes empty values
    mapper.setSerializationInclusion(JsonInclude.Include.NON_EMPTY);
    JsonResult result3 = new JsonResult();
    result3.setA(Optional.empty());
    result3.setB(Optional.empty());
    String json3 = mapper.writeValueAsString(result3);
    assertEquals("{}", json3);

    // Test that using a custom serializer for Optional
    JsonSerializer<Object> serializer = new JsonSerializer<Object>()