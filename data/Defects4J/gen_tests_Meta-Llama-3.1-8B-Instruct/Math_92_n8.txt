java
public void testBinomialCoefficientLargeResult() {
    // Test using the recursive property
    assertEquals(MathUtils.binomialCoefficient(65, 32) + MathUtils.binomialCoefficient(65, 33),
                MathUtils.binomialCoefficient(66, 33));

    // Test with a large result that is near Long.MAX_VALUE
    assertEquals(binomialCoefficient(66, 33), MathUtils.binomialCoefficient(66, 33));

    // Test with a large result that overflows Long.MAX_VALUE
    try {
        MathUtils.binomialCoefficient(100, 50);
        fail("Expected ArithmeticException");
    } catch (ArithmeticException e) {
        // Expected
    }
}

private static long binomialCoefficient(int n, int k) {
    if (k == 0 || k == n)
        return 1;
    BigInteger result = BigInteger.ONE;
    for (int i = k + 1; i <= n; i++) {
        result = result.multiply(BigInteger.valueOf(i));
    }
    for (int i = 1; i <= n - k; i++) {
        result = result.divide(BigInteger.valueOf(i));
    }
    if (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0