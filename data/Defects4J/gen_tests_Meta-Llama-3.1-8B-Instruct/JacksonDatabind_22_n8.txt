public void testCustomSerializerPrecedence() {
    // Test custom serializer is not used when @JsonValue is present
    MyObject obj = new MyObject();
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new SimpleModule() {
        @Override
        public Set<Class<?>> getTypes() {
            return Collections.singleton(MyObject.class);
        }
        @Override
        public JsonSerializer<?> getSerializer(Class<?> type, Type t, Annotation[] annotations, HandlerInstantiator instantiator) {
            return new JsonSerializer<MyObject>() {
                @Override
                public void serialize(MyObject value, JsonGenerator gen, SerializerProvider provider) throws IOException {
                    gen.writeString("custom serializer");
                }
            };
        }
    });
    assertEquals("custom serializer", mapper.writeValueAsString(obj));
    
    // Test custom serializer is used when @JsonValue is absent
    obj = new MyObjectWithoutJsonValue();
    mapper = new ObjectMapper();
    mapper.registerModule(new SimpleModule() {
        @Override
        public Set<Class<?>> getTypes() {
            return Collections.singleton(MyObjectWithoutJsonValue.class);
        }
        @Override
        public JsonSerializer<?> getSerializer(Class<?> type, Type t, Annotation[] annotations, HandlerInstantiator instantiator) {
            return new JsonSerializer<MyObject