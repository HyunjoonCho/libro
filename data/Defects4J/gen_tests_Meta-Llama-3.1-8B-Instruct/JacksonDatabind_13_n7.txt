java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.Test;
import static org.junit.Assert.*;

public class JacksonTest {

    @Test
    public void testDeserializeNullObjectId() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        JsonNode json = mapper.readTree("{\"id\": null}");
        // If the Object Id is null, the following line should not throw an exception.
        mapper.readValue(json, Object.class);
    }

    @Test
    public void testDeserializeMissingObjectId() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        JsonNode json = mapper.readTree("{}");
        // If the Object Id is missing, the following line should not throw an exception.
        mapper.readValue(json, Object.class);
    }

    @Test(expected = JsonMappingException.class)
    public void testDeserializeNonStrictObjectId() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(SerializationFeature.FAIL_ON