public void testLevenbergMarquardtInconsistency() {
    // setup test data
    // assuming we have a SimpleUnivariateFunction and a LevenbergMarquardt instance
    SimpleUnivariateFunction function = new SimpleUnivariateFunction() {
        @Override
        public double value(double x) {
            return Math.pow(x, 2);
        }
    };
    LevenbergMarquardt lm = new LevenbergMarquardt(function);
    
    // run the optimization
    VectorialPointValuePair result = lm.doOptimize(10, 1e-6, 100);
    
    // check if the returned value matches the point that leads to the residuals and cost
    double calculatedCost = function.value(result.getPoint().get(0));
    double calculatedResiduals = result.getResiduals()[0];
    assertEquals(result.getValue(), calculatedCost, 1e-6);
    assertEquals(calculatedResiduals, 0, 1e-6);
}