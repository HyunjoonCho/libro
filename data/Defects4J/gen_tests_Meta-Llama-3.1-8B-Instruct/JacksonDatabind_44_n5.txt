java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class JacksonPolymorphicTypeTest {

    @Test
    public void testPolymorphicTypeResolution() throws Exception {
        // Create a base class with a property
        class Base {
            public String baseProperty = "baseProperty";
        }

        // Create a sub-class with an additional property
        class Sub extends Base {
            public String subProperty = "subProperty";
        }

        // Create an ObjectMapper with polymorphic type handling enabled
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.FAIL_ON_EMPTY_BEANS);
        mapper.enableDefaultTyping(DefaultTyping.NON_PRIMITIVES);

        // Create a PolymorphicType with a default implementation
        TypeFactory typeFactory = mapper.getTypeFactory();
        Type baseType = typeFactory.constructType(Base.class);
        Type subType = typeFactory.constructType(Sub.class);
        Type defaultImplType = typeFactory.constructType(DefaultImpl.class);

        // Serialize the sub-class
        Sub sub = new Sub();
        String json = mapper.writeValueAsString(sub);

        // Check that the JSON