java
public void testCMAESOptimizerBounds() {
    // Create a fitness function with large bounds
    double lowerBound = -Double.MAX_VALUE;
    double upperBound = Double.MAX_VALUE;
    
    // Define a simple fitness function to check for NaN parameters
    FitnessFunction fitnessFunction = (params) -> {
        for (double param : params) {
            if (Double.isNaN(param)) {
                return Double.NaN;
            }
        }
        return 0.0;
    };

    // Create a CMAES optimizer with the fitness function and large bounds
    CMAESOptimizer optimizer = new CMAESOptimizer(fitnessFunction, lowerBound, upperBound);

    // Run the optimizer (this should not throw an exception)
    try {
        optimizer.optimize();
    } catch (Exception e) {
        fail("Optimizer threw exception: " + e.getMessage());
    }

    // Check that the optimizer did not pass NaN parameters to the fitness function
    assertEquals(false, Double.isNaN(fitnessFunction.encode(0.0)));
}
