java
import org.junit.Test;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;

import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.ErrorReporter;

public class IssueTest {

    @Test
    public void testLastWarningOrErrorTruncated() throws IOException {
        File tempFile = File.createTempFile("test", ".js");
        try (PrintWriter writer = new PrintWriter(new FileWriter(tempFile))) {
            writer.println("alert(foo);");
            writer.println("alert(bar);");
        }

        CompilerOptions options = new CompilerOptions();
        options.setWarningLevel(CompilerOptions.WarningLevel.VERBOSE);
        Compiler compiler = new Compiler(options);
        ErrorReporter reporter = new ErrorReporter();
        compiler.compile(new String[] {tempFile.getAbsolutePath()}, reporter);

        // Verify the last error message is truncated
        String[] messages = reporter.getMessages();
        String lastMessage = messages[messages.length - 1];
        String expectedMessage = "variable bar is undefined";
        if (!lastMessage.contains(expectedMessage)) {
            throw new AssertionError("Last error message is