java
public void testExtraneousTypeMapping() {
    // Test case for concrete base type with explicit name
    Class<?> concreteBaseType = ConcreteClass.class;
    assertEquals(2, TypeResolver.getTypeIdMapping(concreteBaseType).size());
    assertTrue(TypeResolver.getTypeIdMapping(concreteBaseType).containsKey(concreteBaseType.getName()));
    assertTrue(TypeResolver.getTypeIdMapping(concreteBaseType).containsKey("concreteBaseType"));

    // Test case for abstract base type with default name
    Class<?> abstractBaseType = AbstractClass.class;
    assertEquals(1, TypeResolver.getTypeIdMapping(abstractBaseType).size());
    assertTrue(TypeResolver.getTypeIdMapping(abstractBaseType).containsKey(abstractBaseType.getName()));

    // Test case for abstract base type with explicit name
    Class<?> abstractExplicitBaseType = AbstractExplicitClass.class;
    assertEquals(2, TypeResolver.getTypeIdMapping(abstractExplicitBaseType).size());
    assertTrue(TypeResolver.getTypeIdMapping(abstractExplicitBaseType).containsKey(abstractExplicitBaseType.getName()));
    assertTrue(TypeResolver.getTypeIdMapping(abstractExplicitBaseType).containsKey("abstractExplicitBaseType"));
}

class ConcreteClass {}
class AbstractClass {}
class AbstractExplicitClass {}
