public void testJsonSerializeAsSuperType() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);

    Foo foo = new Foo();
    try {
        String json = mapper.writeValueAsString(foo);
        fail("Expected JsonMappingException");
    } catch (JsonProcessingException e) {
        assertTrue(e.getMessage().contains("Failed to widen type [simple type, class org.pharmgkb.model.AccessionIdentifier]"));
    }
}

class Foo {
    @JsonSerialize(as = BaseAccessionIdentifier.class)
    @JsonDeserialize(as = BaseAccessionIdentifier.class)
    public AccessionIdentifier getReference() {
        return null;
    }
}

interface AccessionIdentifier {
}

class BaseAccessionIdentifier implements AccessionIdentifier {
}