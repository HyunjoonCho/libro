public void testInitializeStep() {
    double[] y0 = new double[] {1.0, 2.0};
    double[] yDotK = new double[y0.length];
    double[] yTmp = new double[y0.length];
    double[] yDotK1 = new double[y0.length];
    double[] scale = new double[y0.length];
    double[] vecAbsoluteTolerance = null;
    double[] vecRelativeTolerance = null;
    double scalAbsoluteTolerance = 1e-6;
    double scalRelativeTolerance = 1e-6;
    
    // EmbeddedRungeKuttaIntegrator implementation
    for (int i = 0; i < scale.length; ++i) {
        final double yi = Math.max(Math.abs(y0[i]), Math.abs(y0[i]));
        scale[i] = scalAbsoluteTolerance;
    }
    
    try {
        // Expected to throw an exception due to incorrect step size
        EmbeddedRungeKuttaIntegrator.initializeStep(null, true, 0, scale, 0, y0, yDotK[0], yTmp, yDotK[1]);
        fail("Expected exception to be thrown");
    } catch (