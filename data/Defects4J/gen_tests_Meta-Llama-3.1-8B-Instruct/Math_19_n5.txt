public void testCMAESOptimizerNaNBounds() {
    double lowerBound = Double.MAX_VALUE;
    double upperBound = lowerBound + Double.MAX_VALUE;
    CMAESOptimizer optimizer = new CMAESOptimizer(1);
    optimizer.setBounds(lowerBound, upperBound);
    try {
        optimizer.optimize(new FitnessFunction() {
            @Override
            public double evaluate(double[] parameters) {
                return parameters[0];
            }
        });
        fail("Expected ArithmeticException");
    } catch (ArithmeticException e) {
        // expected
    }
}