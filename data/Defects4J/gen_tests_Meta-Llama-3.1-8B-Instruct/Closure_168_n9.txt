javascript
// test3.js
function makeClass(protoMethods) {
  var clazz = function() {
    this.initialize.apply(this, arguments);
  }
  for (var i in protoMethods) {
    clazz.prototype[i] = protoMethods[i];
  }

  return clazz;
}

/**
 * @constructor
 */
var Person = function(name){};
Person = makeClass({
  /**
   * @this {Person}
   */
  initialize: function(name) {
    this.name = name;
  },

  /**
   * @this {Person}
   */
  getName: function() { return this.name; },

  /**
   * @param {string} message
   * @this {Person}
   */
  say: function(message) {
    // Intentionally call getName with an argument to test the bug
    this.getName(1);
    window.console.log(this.name +'says:'+ message);
  }
});

var joe = new Person('joe');
joe.say('hi');

// Test the function is called with an argument in a setTimeout
var jane = new Person('jane');
setTimeout(function() {
  jane.say('hello');
}, 