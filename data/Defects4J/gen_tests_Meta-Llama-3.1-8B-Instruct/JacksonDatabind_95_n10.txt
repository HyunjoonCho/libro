java
public void testTypeFactoryConstructFromCanonical() {
    ObjectMapper mapper = new ObjectMapper();
    TypeFactory typeFactory = mapper.getTypeFactory();
    
    // Test with unparameterized generic type
    String returnType = "java.util.List";
    try {
        typeFactory.constructFromCanonical(returnType);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        // expected
    }
    
    // Test with parameterized generic type
    returnType = "java.util.List<java.lang.Object>";
    Type type = typeFactory.constructFromCanonical(returnType);
    assertNotNull(type);
    
    // Test backward compatibility by adding a workaround
    // This is not a direct solution but one possible workaround
    // It removes the parameterized type information from the string
    returnType = returnType.replace("<java.lang.Object>", "");
    try {
        type = typeFactory.constructFromCanonical(returnType);
        assertNotNull(type);
    } catch (Exception e) {
        fail("Failed to construct type from canonical string with workaround");
    }
}
