java
import org.junit.Test;

public class TestSingletonRemoval {

    @Test
    public void testSingletonRemoval() throws Exception {
        // Create a simple JavaScript class that uses goog.addSingletonGetter
        String code = """
            goog.provide('foo');
            var foo = function() { this.values = []; };
            goog.addSingletonGetter(foo);
            foo.prototype.add = function(value) { this.values.push(value); };
        """;

        // Compile the code using a JavaScript engine (e.g. Nashorn)
        // For simplicity, we'll use a simple JavaScript interpreter
        // In a real test, you'd use a more robust JavaScript engine
        String compiledCode = compileCode(code);

        // Check that the compiled code still uses goog.addSingletonGetter
        // This should fail because goog.addSingletonGetter prevents unused class removal
        assertCompiledCodeContains(compiledCode, "goog.addSingletonGetter");
    }

    private String compileCode(String code) {
        // Simple JavaScript interpreter (replace with a real one in a real test)
        return code;
    }

    private boolean assertCompiledCodeContains(String code, String substring) {
        return code.contains(substring);
    }
}
