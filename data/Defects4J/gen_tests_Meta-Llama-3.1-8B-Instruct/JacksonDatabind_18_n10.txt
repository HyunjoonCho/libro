public void testErrorRecoveryInReadValues() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    JsonFactory jsonFactory = new JsonFactory();
    JsonParser jp = jsonFactory.createParser(new ByteArrayInputStream("{\"a\":{".getBytes()));
    JsonParserWrapper jpWrapper = new JsonParserWrapper(jp);
    MappingIterator iter = mapper.reader(jpWrapper).readValues(Map.class);
    try {
        iter.next();
        fail("Expected JsonProcessingException");
    } catch (JsonProcessingException e) {
        // test that iterator is not left in indeterminate state
        assertFalse(jpWrapper.nextToken() == JsonToken.END_OBJECT);
        // test that error recovery is attempted
        jpWrapper.nextToken();
        assertEquals(JsonToken.END_OBJECT, jpWrapper.nextToken());
    }
}

public class JsonParserWrapper extends JsonParser {
    private JsonParser jp;
    public JsonParserWrapper(JsonParser jp) {
        this.jp = jp;
    }
    @Override
    public JsonToken nextToken() {
        return jp.nextToken();
    }
}