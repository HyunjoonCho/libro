public void testAbstractClassMocking() {
    UserAccount fakeUserAccount = mock(UserAccount.class);
    when(fakeUserAccount.getEmails()).thenReturn(new ArrayList<>());
    when(fakeUserAccount.addEmail(anyString())).thenAnswer(invocation -> {
        List<String> emails = (List<String>) invocation.getArguments()[0];
        emails.add((String) invocation.getArguments()[1]);
        return null;
    });
    fakeUserAccount.addEmail("email1");
    assertEquals(1, fakeUserAccount.getEmails().size());
    fakeUserAccount.addEmail("email2");
    assertEquals(2, fakeUserAccount.getEmails().size());

    AccountService fakeAccountService = mock(AccountService.class);
    when(fakeAccountService.getAccount(anyString(), any(AsyncCallback.class))).thenAnswer(invocation -> {
        AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) invocation.getArguments()[1];
        callback.onSuccess(mock(UserAccount.class));
        return null;
    });
    // Test the service

    AccountRpcService fakeAccountRpcService = mock(AccountRpcService.class);
    when(fakeAccountRpcService.getAccount(any(RpcContext.class), anyString())).thenAnswer(invocation -> {
        RpcContext context = (RpcContext) invocation.getArguments()[