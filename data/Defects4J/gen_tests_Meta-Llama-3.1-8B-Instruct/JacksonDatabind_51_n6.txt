public void testTypeIdResolverGeneric() {
    ObjectMapper mapper = new ObjectMapper();
    TypeIdResolver resolver = new TypeIdResolver() {
        @Override
        public String idFromValue(Object value) {
            return "GenericClass<java.lang.String>";
        }

        @Override
        public JavaType typeFromId(String id) {
            return TypeFactory.defaultInstance().constructType(GenericClass.class, String.class);
        }
    };
    JavaType javaType = resolver.typeFromId("GenericClass<java.lang.String>");
    assertEquals(GenericClass.class, javaType.getRawClass());
    assertEquals(String.class, javaType.getTypeArguments().get(0));
}

class GenericClass<T> {
    private T value;
}