java
public void testTypeIdResolverGeneric() throws JsonProcessingException {
    // Define a generic class
    class GenericClass<T> {
        public T value;
    }

    // Create a JavaType for the generic class
    JavaType genericType = TypeFactory.defaultInstance().constructType(GenericClass.class, String.class);

    // Create a TypeIdResolver that returns the generic JavaType
    TypeIdResolver resolver = new TypeIdResolver() {
        @Override
        public JavaType resolveType(DeserializationContext ctxt, Type type) {
            return genericType;
        }
    };

    // Use the resolver to deserialize a JSON string
    String json = "{\"value\":\"hello\"}";
    JsonFactory f = new JsonFactory();
    JsonParser jp = f.createJsonParser(json);
    DeserializationConfig config = DeserializationConfig.global();
    DeserializationContext ctxt = config.createContext();
    ObjectCodec codec = f.getCodec();
    JsonDeserializer<Object> deserializer = codec.treeAsArrayDeserializer(Object.class, resolver);
    Object result = deserializer.deserialize(jp, ctxt);

    // Assert that the deserialized object is of the correct type
    assertTrue(result instanceof GenericClass);
    GenericClass<?> castedResult = (GenericClass