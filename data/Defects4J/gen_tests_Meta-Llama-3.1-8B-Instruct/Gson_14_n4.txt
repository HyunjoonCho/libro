public void testResolveChains() {
    Gson gson = new Gson();
    TypeAdapter<?> adapter = gson.getAdapter(Foo1.class);

    // Test supertypeOf(supertypeOf(X)) == supertypeOf(X)
    assertEquals(Foo1.class, gson.getAdapter(Foo1.class).get(TypeToken.get(Foo1.class).getType()).getType());

    // Test subtypeOf(subtypeOf(X)) == subtypeOf(X)
    assertEquals(Foo2.class, gson.getAdapter(Foo2.class).get(TypeToken.get(Foo2.class).getType()).getType());

    // Test supertypeOf(subtypeOf(X)) == subtypeOf(Object.class)
    assertEquals(Object.class, gson.getAdapter(Foo2.class).get(TypeToken.get(Foo1.class).getType()).getType());

    // Test subtypeOf(supertypeOf(X)) == subtypeOf(Object.class)
    assertEquals(Object.class, gson.getAdapter(Foo1.class).get(TypeToken.get(Foo2.class).getType()).getType());
}

private static class Foo1<A> {
    Foo2<? extends A> foo2;
}

private static class Foo2<B> {
    Foo1<? super B> foo1;
}