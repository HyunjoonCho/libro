java
public void testBrentOptimizerConvergenceChecker() {
    BrentOptimizer optimizer = new BrentOptimizer();
    optimizer.setConvergenceChecker(new ConvergenceChecker() {
        @Override
        public boolean converged(List<PointValuePair> points) {
            return points.size() > 10;
        }
    });
    try {
        optimizer.optimize(new SimpleUnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.sin(x);
            }
        });
        fail("Expected ConvergenceException");
    } catch (ConvergenceException e) {
        // expected
    }
}

public void testPowellOptimizerTolerances() {
    PowellOptimizer optimizer = new PowellOptimizer();
    optimizer.setConvergenceChecker(new ConvergenceChecker() {
        @Override
        public boolean converged(List<PointValuePair> points) {
            return points.size() > 10;
        }
    });
    try {
        optimizer.optimize(new SimpleUnivariateFunction() {
            @Override
            public double value(double x) {
                return Math.sin(x);
            }
        });
        fail("Expected ConvergenceException");
    } catch (ConvergenceException e) {
        // expected
    }
}

public