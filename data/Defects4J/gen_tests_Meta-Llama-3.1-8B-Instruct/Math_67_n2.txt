public void testMultiStartUnivariateRealOptimizerGetResult() {
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer();
    // Assume we have a function that returns a single value
    double[] optima = new double[optimizer.getRuns()];
    double[] optimaValues = new double[optimizer.getRuns()];
    // Simulate a scenario where the last run is not the best one
    optima[optima.length - 1] = 10.0;
    optimaValues[optimaValues.length - 1] = 5.0;
    for (int i = 0; i < optima.length - 1; i++) {
        optima[i] = i;
        optimaValues[i] = i * i;
    }
    optimizer.setOptima(optima);
    optimizer.setOptimaValues(optimaValues);
    optimizer.optimize();
    double result = optimizer.getResult();
    double functionValue = optimizer.getFunctionValue();
    // Since the last run is not the best one, the result and functionValue should not be the same
    assertNotEquals(optima[optima.length - 1], result);
    assertNotEquals(optimaValues[optimaValues.length - 1