public void testCMAESOptimizerBounds() {
    // Create a CMAESOptimizer with a checkFeasableCount of 0
    CMAESOptimizer optimizer = new CMAESOptimizer(0);
    
    // Initialize the bounds to (0, 10)
    double[] lowerBounds = new double[] {0};
    double[] upperBounds = new double[] {10};
    
    // Create a dummy fitness function that always returns a value outside the bounds
    FitnessFunction fitnessFunction = new FitnessFunction() {
        @Override
        public double evaluate(double[] x) {
            return 100; // Value is always outside the bounds
        }
    };
    
    // Optimize the fitness function
    optimizer.doOptimize(fitnessFunction, lowerBounds, upperBounds, 1);
    
    // Check that the best fitness is outside the bounds
    assertTrue(optimizer.getBestFitness() > 10);
}