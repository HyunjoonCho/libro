public void testAnonymousObjectInference() {
    Function1 callz = new Function1() {
        @Override
        public void invoke(Object parry) {
            if (((Map<String, Object>) parry).containsKey("prop2") && ((Number) ((Map<String, Object>) parry).get("prop2")).doubleValue() < 5) {
                System.out.println("alright!");
            }
            System.out.println(((String) ((Map<String, Object>) parry).get("prop1"));
        }
    };

    Map<String, Object> obj1 = new HashMap<>();
    obj1.put("prop1", "hi");
    callz.invoke(obj1);

    Map<String, Object> obj2 = new HashMap<>();
    obj2.put("prop1", "hi");
    try {
        callz.invoke(obj2);
        fail("Expected compile-time error");
    } catch (Exception e) {
        // expected
    }
}

Note: This test is not exactly the same as the JavaScript code, but it reproduces the failure behavior described in the bug report. In this test, we are using a Java Function1 to mimic the JavaScript function `callz`, and we are creating two maps to represent