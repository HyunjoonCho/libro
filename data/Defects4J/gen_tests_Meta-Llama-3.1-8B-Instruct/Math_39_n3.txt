public void testEmbeddedRungeKuttaFirstStepSize() {
    // Define a function that throws an exception when evaluated out of range
    final double[] x = new double[] { 1.0 };
    final double[] y = new double[] { 1.0 };
    final double[] dydx = new double[] { 1.0 };
    final double[] func = new double[] { 1.0 };
    final double lowerBound = 0.0;
    final double upperBound = 1.0;

    // Set the function to throw an exception when evaluated out of range
    final Function funcEval = new Function() {
        @Override
        public double value(double x) {
            if (x < lowerBound || x > upperBound) {
                throw new RuntimeException("Function evaluated out of range");
            }
            return func[0];
        }
    };

    // Create an instance of the integrator
    Integrator integrator = new DormandPrince853Integrator(funcEval, lowerBound, upperBound, 1e-6, 1e-6);

    // Try to integrate with an extremely short range
    try {
        integrator.integrate(x, y, dy