java
public void testKeyDeserializerModifierIgnored() {
    // Create a module with a custom key deserializer modifier
    SimpleModule module = new SimpleModule();
    module.addDeserializerModifier(new BeanDeserializerModifier() {
        @Override
        public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, JavaType type, KeyDeserializer deserializer) {
            if (!type.isEnumType()) {
                return super.modifyKeyDeserializer(config, type, deserializer);
            }
            return new KeyDeserializer() {
                @Override
                @SuppressWarnings("unchecked")
                public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException {
                    Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                    return Enum.valueOf(rawClass, key.toUpperCase());
                }
            };
        }
    });

    // Create a ObjectMapper with the custom module
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(module);

    // Test that the custom key deserializer modifier is ignored for enum types
    try {
        // This should not throw an exception, but the deserializer should not be modified
        mapper.readValue("\"ENUM_VALUE\"", Enum.class);
        fail("Expected an exception");
    } catch (JsonParseException e)