javascript
describe('Test inheritance detection', () => {
    it('should detect inheritance when prototype is assigned directly', () => {
        class SuperClass {}
        SuperClass.prototype.CustomMethod = function() {}

        class SubClass extends SuperClass {}
        SubClass.prototype = new SuperClass();
        SubClass.prototype.CustomMethod = function() {
            this.myProperty = "value";
        }

        const subClassInstance = new SubClass();
        expect(() => {
            // Intentionally trying to access a property to make JSLint or JSC throw an error
            subClassInstance.myProperty;
        }).toThrow();
    });

    it('should not detect inheritance when prototype is assigned directly with a constructor call', () => {
        class SuperClass {}
        SuperClass.prototype.CustomMethod = function() {}

        class SubClass extends SuperClass {}
        SubClass.prototype = new SuperClass();
        SubClass.prototype.CustomMethod = function() {
            this.myProperty = "value";
        }

        const subClassInstance = new SubClass();
        expect(subClassInstance.myProperty).toBe("value");
    });

    it('should detect inheritance when prototype is assigned using a function', () => {
        function inherit(Child, Parent) {
            Child.prototype = new