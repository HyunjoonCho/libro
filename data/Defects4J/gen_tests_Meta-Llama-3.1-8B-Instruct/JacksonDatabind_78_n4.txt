java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

import java.io.IOException;
import java.lang.reflect.Field;

import static org.junit.Assert.fail;

public class JacksonDeserializerVulnerabilityTest {

    @Test
    public void testDeserializeWithDefaultTyping() throws Exception {
        // Setup
        ObjectMapper mapper = new ObjectMapper();
        Field typeFactoryField = ObjectMapper.class.getDeclaredField("typeFactory");
        typeFactoryField.setAccessible(true);
        TypeFactory typeFactory = (TypeFactory) typeFactoryField.get(mapper);

        // Vulnerable code
        String json = "{\"@type\":\"java.lang.String\"}";
        try {
            // Deserialization should throw an exception due to the vulnerability
            mapper.readValue(json, String.class);
            fail("Expected exception was not thrown");
        } catch (IOException e) {
            // Expected exception
        }
    }
}
