public void testEmbeddedRungeKuttaIntegrator() {
    double[] y0 = new double[] {1.0, 2.0};
    double[] yDotK = new double[y0.length];
    double[] yTmp = new double[y0.length];
    double[] scalAbsoluteTolerance = new double[] {1.0};
    double[] scalRelativeTolerance = new double[] {0.0};
    double[] vecAbsoluteTolerance = new double[] {1.0};
    double[] vecRelativeTolerance = new double[] {0.0};

    // Original implementation
    double[] scale = new double[y0.length];
    for (int i = 0; i < scale.length; ++i) {
        scale[i] = scalAbsoluteTolerance[0] + scalRelativeTolerance[0] * Math.max(Math.abs(y0[i]), Math.abs(y0[i]));
    }
    double hNewOriginal = EmbeddedRungeKuttaIntegrator.initializeStep(null, true, 4, scale, 0, y0, yDotK, yTmp, yDotK);

    // Correct implementation
    double[] scaleCorrect = new double[y0.length];
    if (vec