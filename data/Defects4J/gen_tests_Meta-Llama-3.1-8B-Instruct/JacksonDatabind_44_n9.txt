java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.PropertyNamingStrategy;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.Default;
import com.fasterxml.jackson.databind.ser.DefaultSerializer;

import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class TestDefaultImplPolymorphism {

    @JsonDeserialize(as = SubType.class, using = Default.class)
    public static class BaseClass {
        public String baseProperty;
    }

    @JsonSerialize(using = CustomSerializer.class)
    public static class SubType extends BaseClass {
        public String subProperty;
    }

    public static class CustomSerializer extends DefaultSerializer<SubType> {
        @Override
        public void serialize(SubType value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            // do nothing
        }
    }

    @Test
    public void testDefaultImplPolymorphism() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.setPropertyNamingStrategy(PropertyNamingStrategy.SNAKE_CASE);

        SubType subType = new SubType();
        subType.baseProperty = "baseValue";
        subType.subProperty = "subValue";

        String json = mapper.writeValueAsString(subType