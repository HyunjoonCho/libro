public void testBrentOptimizer() {
    BrentOptimizer brentOptimizer = new BrentOptimizer();
    // Test case where the last evaluated point is worse than the previous one
    brentOptimizer.optimize(new UnivariateFunction() {
        @Override
        public double value(double x) {
            return x * x + 1; // This function has a minimum at x = 0
        }
    }, 0, 1, 1e-6, 1e-6);
    double bestPoint = brentOptimizer.getBestPoint();
    double bestValue = brentOptimizer.getBestValue();
    brentOptimizer.optimize(new UnivariateFunction() {
        @Override
        public double value(double x) {
            return x * x; // This function has a minimum at x = 0
        }
    }, 0, 1, 1e-6, 1e-6);
    double lastPoint = brentOptimizer.getBestPoint();
    double lastValue = brentOptimizer.getBestValue();
    // Assert that the best point from the second optimization is not the same as the last point from the first optimization
    assertNotSame(bestPoint, lastPoint);
    // Assert that the best value