javascript
function testInheritanceDetection() {
    function SuperClass() {}
    SuperClass.prototype.CustomMethod = function() {}

    function SubClass() {}
    SubClass.prototype = new SuperClass();

    SubClass.prototype.CustomMethod = function() {
        this.myProperty = "value";
    }

    var subClassInstance = new SubClass();

    // Test that the warning is thrown
    try {
        SubClass.prototype = Object.create(SuperClass.prototype);
        SubClass.prototype.constructor = SubClass;
        // This should not throw any errors
        subClassInstance.CustomMethod();
    } catch (e) {
        // If the warning is thrown, we can assume the test passed
        return;
    }

    // If the above test passed, test that the warning is not thrown when using a function to inherit
    function inherit(Child, Parent) {
        Child.prototype = Object.create(Parent.prototype);
        Child.prototype.constructor = Child;
    }
    function NewSubClass() {}
    inherit(NewSubClass, SuperClass);
    NewSubClass.prototype.NewCustomMethod = function() {
        this.myProperty = "value";
    }
    var newSubClassInstance = new NewSubClass();
    NewSubClass.prototype.NewCustomMethod();