java
public void testSimplexSolverNegativeValueWithRestrictNonNegative() {
    final double[] coefficients = {1, 1};
    final double[] lowerBound = {0, 0};
    final double[] upperBound = {Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY};
    final double[] initialPoint = {0, 0};
    final double[] constraints = {1, 0};
    final double[] rhs = {1};
    final GoalType goalType = GoalType.MINIMIZE;

    SimplexSolver solver = new SimplexSolver();
    try {
        solver.optimize(new AbstractOptimizationProblem() {
            @Override
            public double evaluate(double[] point) {
                return 1 * point[0] + 1 * point[1];
            }
        }, constraints, rhs, goalType, lowerBound, upperBound, initialPoint, true);
        fail("Expected an exception");
    } catch (OptimizationProblemException e) {
        // Expected exception
    }

    // Test with a valid solution
    try {
        solver.optimize(new AbstractOptimizationProblem() {
            @Override
            public double evaluate(double[] point) {
                return 1 * point[0] + 1 * point