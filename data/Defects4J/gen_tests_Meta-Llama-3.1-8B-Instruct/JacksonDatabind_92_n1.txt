java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeReference;

import org.junit.Test;

import java.io.IOException;

public class JacksonDeserializationTest {

    @Test(expected = com.fasterxml.jackson.core.JsonParseException.class)
    public void testDeserializationBlockedTypes() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();
        TypeReference<Object> typeRef = new TypeReference<Object>() {
        };

        // Add the types to be blocked from polymorphic deserialization here
        // For example, let's block the following types:
        typeFactory.constructType(Map.class);
        typeFactory.constructType(ArrayList.class);
        typeFactory.constructType(List.class);
        typeFactory.constructType(Set.class);
        typeFactory.constructType(TreeMap.class);

        String json = "{\"type\":\"Map\"}";
        mapper.readValue(json, typeRef);
    }
}
