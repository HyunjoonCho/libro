java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationConfig;
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper.DefaultTypeFactory;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;

public class TestDeserializationProblemHandler {
    
    public void testDeserializationWithDeserializationProblemHandler() throws JsonMappingException {
        ObjectMapper mapper = new ObjectMapper();
        DeserializationConfig config = mapper.getDeserializationConfig();
        DeserializationProblemHandler handler = new DeserializationProblemHandler() {
            @Override
            public Object handleUnknownTypeId(DeserializationContext ctxt, JavaType type, String typeId, TypeIdResolver idResolver, String problemMsg) {
                return Void.class;
            }
        };
        config.setHandler(handler);
        mapper.setDeserializationConfig(config);
        DefaultTypeFactory typeFactory = new DefaultTypeFactory(config);
        JavaType type = typeFactory.constructType(Void.class);
        // Try to deserialize a JSON object that would normally return Void.class
        // This should cause a NPE
        String json = "{\"type\":\"Void\"}";
        try {
            mapper.readValue(json, type);
            fail("Expected NPE");
        } catch (Exception