public void testLevenbergMarquardtInconsistentResult() {
    // create a simple function to test
    UnivariateFunction f = new AbstractUnivariateFunction() {
        @Override
        public double value(double x) {
            return x * x;
        }
    };

    // create a point to start from
    double x0 = 2.0;

    // perform the optimization
    LevenbergMarquardt optimizer = new LevenbergMarquardt(f);
    VectorialPointValuePair result = optimizer.doOptimize(x0);

    // check if the result point matches the point that leads to the residuals and cost
    double xOptimum = result.getPoint()[0];
    double yOptimum = f.value(xOptimum);
    double residual = yOptimum - result.getValue();
    double cost = result.getChivar()[0] * result.getChivar()[0] + result.getChivar()[1] * result.getChivar()[1];

    double expectedX = 0.0;
    double expectedY = f.value(expectedX);
    double expectedResidual = expectedY - result.getValue();
    double expectedCost = f.value(expectedX) * f.value(expectedX);