java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Test;

public class TestTypeRefinements {
    
    @Test
    public void testIntAndInteger() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();
        
        // Test ignoring primitive/wrapper override
        java.lang.Integer javaInteger = new java.lang.Integer(10);
        Class<?> refinedType = typeFactory.findType(javaInteger.getClass());
        assertEquals(Integer.class, refinedType);
        
        // Test allowing wrapper to "refine" primitive
        Class<?> primitiveType = typeFactory.findType(int.class);
        refinedType = typeFactory.findType(javaInteger.getClass());
        assertEquals(java.lang.Integer.class, refinedType);
    }
    
    @Test
    public void testIntToLong() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();
        
        // Test allowing "int to long" refinement
        java.lang.Integer javaInteger = new java.lang.Integer(10);
        Class<?> refinedType = typeFactory.findType(javaInteger.getClass());
        assertEquals(java.lang.Long.class, refinedType);
    }
}
