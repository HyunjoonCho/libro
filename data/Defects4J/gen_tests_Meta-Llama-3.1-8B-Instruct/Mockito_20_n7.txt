public void testAbstractClassSpying() {
    // Example 1
    @Spy abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();
        @Override public void addEmail(String email) {
            emails.add(email);
        }
        @Override List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }
    FakeUserAccount userAccount = mock(FakeUserAccount.class);
    when(userAccount.addEmail(anyString())).thenAnswer(invocation -> {
        userAccount.getEmails().add(invocation.getArgument(0));
        return null;
    });
    userAccount.addEmail("email1");
    assertEquals(1, userAccount.getEmails().size());
    userAccount.addEmail("email2");
    assertEquals(2, userAccount.getEmails().size());

    // Example 2
    @Spy abstract class MockAccountService implements AccountService {
        @Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }
        abstract UserAccount getAccount(String id);
    }
    MockAccountService service = mock(MockAccountService.class);
    when(service.getAccount(anyString())).thenReturn(new UserAccount() {
        @Override public