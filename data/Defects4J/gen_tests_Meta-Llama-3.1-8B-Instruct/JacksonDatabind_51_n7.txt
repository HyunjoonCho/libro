public void testTypeIdResolverGeneric() {
    // Create a type with a generic type parameter
    JavaType genericType = new TypeFactory().constructType(Object.class, String.class);

    // Create a TypeIdResolver that returns the generic type
    TypeIdResolver resolver = new TypeIdResolver() {
        @Override
        public JavaType resolveType(DeserializationConfig config, Type type) {
            if (type == String.class) {
                return genericType;
            }
            return null;
        }
    };

    // Create a test class with a field of the generic type
    JavaType testType = new TypeFactory().constructType(TestClass.class);

    // Serialize and deserialize the test class
    ObjectMapper mapper = new ObjectMapper();
    mapper.setTypeIdResolver(resolver);
    String json = mapper.writeValueAsString(new TestClass());
    TestClass result = mapper.readValue(json, testType);

    // Verify that the deserialized field is of the generic type
    assertEquals(genericType, result.getClass());
}

// Test class with a field of the generic type
class TestClass {
    public String field;
}