java
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeFactory.TypeResolverBuilder;
import org.junit.Test;

import java.io.IOException;

public class TestTypeIdResolver {
    
    @Test
    public void testGenericTypeIdResolver() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();
        TypeResolverBuilder typeResolverBuilder = typeFactory.findTypeResolverBuilder(TypeReference.class);
        
        // Create a TypeReference with a generic type
        TypeReference<List<String>> typeReference = new TypeReference<List<String>>() {};
        
        // Create a TypeIdResolver that returns a JavaType for the generic type
        TypeIdResolver resolver = new TypeIdResolver() {
            @Override
            public JavaType resolve(Type type) {
                return typeFactory.constructCollectionType(List.class, String.class);
            }
        };
        
        // Use the TypeIdResolver to create a TypeReference
        TypeReference<List<String>> resolvedTypeReference = typeResolverBuilder.buildTypeReference(typeReference);
        
        // The resolved TypeReference should have the same type as the original
        assertEquals(typeReference.getType(), resolvedTypeReference.getType());
   