javascript
describe('prototype function', function() {
    var ns = {};
    ns.Thing = function() {
        this.subthing = {prop: 3};
    };

    ns.MyClass = function(thing) {
        this.thing_ = thing;
    };

    ns.MyClass.prototype.doIt = function() {
        var subthing = this.thing_.subthing;
        for (var i = 0; i < subthing.noprop; i++) {
            window.console.log(i);
        }
    };

    it('should throw an error when accessing an invalid property in a for loop', function() {
        var thing = new ns.Thing();
        expect(function() {
            new ns.MyClass(thing).doIt();
        }).toThrow();
    });

    it('should not throw an error when accessing an invalid property outside a for loop', function() {
        var thing = new ns.Thing();
        expect(function() {
            var subthing = thing.subthing;
            for (var i = 0; i < subthing.noprop; i++) {
                window.console.log(i);
            }
        }).not.toThrow();
    });
});
