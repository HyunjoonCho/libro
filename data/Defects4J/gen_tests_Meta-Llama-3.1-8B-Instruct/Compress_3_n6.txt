java
public void testFinishMethodNecessity() {
    ByteArrayOutputStream bos = new ByteArrayOutputStream();
    ArchiveOutputStream aos = new MyArchiveOutputStream(bos);
    // Make sure finish() is not called directly
    try {
        aos.finish();
        fail("Expected IOException");
    } catch (IOException e) {
        // Expected
    }
    // Test that close() calls finish() internally
    try {
        aos.close();
        fail("Expected finish() to be called");
    } catch (IOException e) {
        // Expected
    }
    assertEquals(0, bos.toByteArray().length);
}

class MyArchiveOutputStream extends ArchiveOutputStream {
    public MyArchiveOutputStream(OutputStream out) {
        super(out);
    }

    @Override
    public void finish() throws IOException {
        // Simulate finish() method
        throw new IOException("finish() called directly");
    }

    @Override
    public void close() throws IOException {
        finish(); // Call finish() from close()
        super.close();
    }
}
