public void testAbstractClassMocking() {
    @Mock(answer = Answers.RETURNS_DEEP_STUBS) abstract class FakeUserAccount implements UserAccount {
        List<String> emails = new ArrayList<>();
        @Override public void addEmail(String email) {
            emails.add(email);
        }
        @Override List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    FakeUserAccount userAccount = mock(FakeUserAccount.class);
    when(userAccount.getEmails()).thenReturn(ImmutableList.of("email1", "email2"));
    when(userAccount.addEmail("email3")).thenAnswer(invocation -> {
        emails.add("email3");
        return null;
    });
    assertEquals(ImmutableList.of("email1", "email2"), userAccount.getEmails());
    userAccount.addEmail("email3");
    assertEquals(ImmutableList.of("email1", "email2", "email3"), userAccount.getEmails());
}

public void testAbstractClassMocking2() {
    @Mock(answer = Answers.RETURNS_DEEP_STUBS) abstract class MockAccountService implements AccountService {
        @Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount