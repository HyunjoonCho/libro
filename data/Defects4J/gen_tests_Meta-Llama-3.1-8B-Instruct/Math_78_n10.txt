public void testODEEventDetection() {
    // Create an event handler that switches the sign of the function at t = 90
    public class SwitchingFunctionEventHandler implements EventListener {
        private boolean triggered = false;

        @Override
        public void handleEvent(Event event) {
            triggered = true;
        }

        public boolean isTriggered() {
            return triggered;
        }
    }

    // Create an event handler that switches the sign of the function at t = 135
    public class AnotherSwitchingFunctionEventHandler implements EventListener {
        private boolean triggered = false;

        @Override
        public void handleEvent(Event event) {
            triggered = true;
        }

        public boolean isTriggered() {
            return triggered;
        }
    }

    // Create a test function that switches its sign at t = 90 and t = 135
    public class SwitchingFunction extends AbstractODE {
        public double g(double t) {
            if (t >= 90 && t <= 135) {
                return -1;
            } else {
                return 1;
            }
        }
    }

    // Create a solver and set up the test function and event handlers
    ODESolver solver = new DormandPrince