public void testObjectMapperTimeZoneChange() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new SimpleModule());
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    System.out.println(mapper.getSerializationConfig().getTimeZone());

    // Before 2.6.0, this had no effect
    mapper.setDateFormat(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"));
    System.out.println(mapper.getSerializationConfig().getTimeZone());

    DateTimeFormatter dtf = DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss").withZoneUTC();
    DateTime dt = new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC);
    String json = mapper.writeValueAsString(dt);
    assertEquals("1988-06-25 20:30:00", json);

    // Reset to original state
    mapper = new ObjectMapper();
    mapper.registerModule(new SimpleModule());
    mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false);
    System.out.println(mapper.getSerializationConfig().getTimeZone());

    // In 2.6.0, this now sets the time zone to the JVM's default
    mapper.setDateFormat(new