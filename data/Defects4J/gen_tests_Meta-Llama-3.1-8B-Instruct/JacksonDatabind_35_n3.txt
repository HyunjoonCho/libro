public void testObjectIdWithWrapperType() {
    // Set up test data
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(DefaultTyping.NON_FINAL);

    // Create a sample Java class with wrapper object type id
    JavaType type = mapper.getTypeFactory().constructType(ArrayList.class, Long.class);

    // Attempt to serialize and deserialize the object with type id
    ArrayList<Long> list = new ArrayList<>();
    list.add(1L);
    String json = mapper.writeValueAsString(new TypedObject(list, type));
    Object result = mapper.readValue(json, TypedObject.class);

    // Verify the result
    assertNotNull(result);
    assertEquals(1, ((TypedObject) result).getValue().size());
    assertEquals(type, result.getClass());
}

class TypedObject {
    private Object value;
    private Class<?> type;

    public TypedObject(Object value, Class<?> type) {
        this.value = value;
        this.type = type;
    }

    public Object getValue() {
        return value;
    }

    public Class<?> getType() {
        return type;
    }
}