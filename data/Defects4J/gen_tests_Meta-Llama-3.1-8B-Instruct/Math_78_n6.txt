public void testLastEventDetection() {
    // Set up the switching function
    final double eps = 1e-10;
    final double g = new Function() {
        public double value(double t) {
            if (t >= 90 - eps && t <= 90 + eps) {
                return 0; // Tricky case where the function value is zero
            } else if (t >= 90 && t <= 135) {
                return t - 90;
            } else if (t >= 135 && t <= 153) {
                return -(t - 135);
            } else {
                return 0;
            }
        }
    };

    // Set up the event detector
    EventDetector detector = new EventDetector(g, 0, 153);

    // Set up the ODE solver
    ODESolver solver = new DormandPrince853Integrator(detector, g, 0, 153);

    // Set the initial step size to 45 to ensure that the first event is detected
    solver.setInitialStepSize(45);

    // Set up the event detection threshold
    detector.setDetectionThreshold(1e-6);

    // Run the solver
    solver