public void testAbstractClassSpying() {
    UserAccount fakeUserAccount = new FakeUserAccount() {
        @Override
        public List<String> getEmails() {
            return ImmutableList.of("email1", "email2");
        }
    };
    when(fakeUserAccount.addEmail("email3")).thenReturn(fakeUserAccount);
    assertEquals(ImmutableList.of("email1", "email2", "email3"), fakeUserAccount.getEmails());

    AccountService mockAccountService = new MockAccountService() {
        @Override
        public UserAccount getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(new FakeUserAccount());
            return null;
        }
    };
    when(mockAccountService.getAccount("id")).thenReturn(mockAccountService);
    AsyncCallback<UserAccount> callback = mock(AsyncCallback.class);
    mockAccountService.getAccount("id", callback);
    verify(callback).onSuccess(new FakeUserAccount());

    AccountRpcService mockAccountRpcService = new MockAccountRpcService() {
        @Override
        public Future<Account> getAccount(RpcContext context, String id) {
            return new MockFuture<>(new Account());
        }
    };
    when(mockAccountRpcService.getAccount("id")).thenReturn(mockAccountRpcService