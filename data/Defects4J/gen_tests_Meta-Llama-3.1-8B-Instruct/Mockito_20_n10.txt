java
public void testMockingAbstractClass() {
    // Arrange
    AccountService service = mock(AccountService.class);
    when(service.getAccount(anyString(), any(AsyncCallback.class))).thenAnswer(new Answer<Void>() {
        AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];
        @Override
        public Void answer(Runnable runnable) throws Throwable {
            callback.onSuccess(new UserAccount() {
                @Override
                public List<String> getEmails() {
                    return new ArrayList<>();
                }

                @Override
                public void addEmail(String email) {
                    // Do nothing
                }
            });
            return null;
        }
    });

    // Act
    service.getAccount("id", new AsyncCallback<UserAccount>() {
        @Override
        public void onSuccess(UserAccount userAccount) {
            // Verify that the service was called with the correct parameters
            assertNotNull(userAccount);
            assertEquals("id", "id");
        }

        @Override
        public void onFailure(Throwable throwable) {
            fail("Callback should not fail");
        }
    });

    // Assert
    verify(service).getAccount(eq("id"), any(AsyncCallback.class));
}
