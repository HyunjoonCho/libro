public void testCMAESOptimizerResolution() {
    // Create a simple function to optimize
    final int numParams = 1;
    final int numDimensions = 1;
    final int numSamples = 10;
    final double[] lowerBound = new double[] { 0.0 };
    final double[] upperBound = new double[] { 10.0 };
    final double[] bestFitness = new double[1];
    final double[] bestParams = new double[numParams];

    // Define the objective function to minimize
    double f(double[] params) {
        return params[0] * params[0];
    }

    // Run the optimizer
    CMAESOptimizer optimizer = new CMAESOptimizer(numParams, numDimensions, numSamples, lowerBound, upperBound);
    optimizer.optimize(f, bestFitness, bestParams);

    // Check that the solution is near the lower bound
    assertTrue(bestParams[0] < 1.0);

    // Run the optimizer with a different initial guess near the upper bound
    double[] initialGuess = new double[numParams];
    initialGuess[0] = 9.0;
    optimizer.optimize(f, bestFitness, bestParams, initialGuess);