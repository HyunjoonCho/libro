java
public class TestTypeIdResolver {

    public static class GenericClass<T> {
        public T value;
    }

    @Test
    public void testTypeIdResolver() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        TypeFactory typeFactory = mapper.getTypeFactory();

        TypeIdResolver resolver = new TypeIdResolver() {
            @Override
            public int typeOf(Object pojo, TypeBindings typeContext) {
                return typeFactory.constructType(GenericClass.class, typeContext.getTypeParameter(0));
            }
        };

        mapper.setTypeIdResolver(resolver);
        String json = "{\"value\":\"hello\"}";
        GenericClass<String> obj = mapper.readValue(json, GenericClass.class);

        // The generic type should be preserved, so we should be able to get the value without a cast
        assertEquals("hello", obj.value);
    }
}
