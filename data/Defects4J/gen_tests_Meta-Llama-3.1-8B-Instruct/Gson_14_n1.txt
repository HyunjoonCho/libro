java
public void testCollapseRecursiveTypeBounds() {
    Gson gson = new Gson();
    Class<?> result1 = gson.getAdapter(Foo1.class).getType();
    assertEquals(Foo1.class, result1);

    Class<?> result2 = gson.getAdapter(Foo2.class).getType();
    assertEquals(Foo2.class, result2);

    // Test supertypeOf(supertypeOf(X)) == supertypeOf(X)
    Class<?> result3 = gson.getAdapter(Foo2.class).getType();
    TypeToken<?> typeToken = new TypeToken<Foo2<Number>>() {};
    assertEquals(typeToken.getType(), result3);

    // Test subtypeOf(subtypeOf(X)) == subtypeOf(X)
    Class<?> result4 = gson.getAdapter(Foo1.class).getType();
    TypeToken<?> typeToken2 = new TypeToken<Foo1<Integer>>() {};
    assertEquals(typeToken2.getType(), result4);

    // Test supertypeOf(subtypeOf(X)) == subtypeOf(Object.class)
    Class<?> result5 = gson.getAdapter(Foo2.class).getType();
    TypeToken<?> typeToken3 = new TypeToken<Foo2<Number>>() {};
    assertEquals(Object.class, typeToken3.getType().getSuperclass());

    //