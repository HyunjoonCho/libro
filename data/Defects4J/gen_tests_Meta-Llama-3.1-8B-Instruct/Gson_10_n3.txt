public void testJsonAdapterAnnotationIgnoredForPrimitiveFields() {
    Gson gson = new Gson();
    String json = gson.toJson(new PrimitiveGadget(42));
    assertEquals("{\"part\":\"42\"}", json);
    PrimitiveGadget gadget = gson.fromJson(json, PrimitiveGadget.class);
    assertEquals(42, gadget.part);
}

private static final class PrimitiveGadget {
    @JsonAdapter(LongToStringTypeAdapterFactory.class)
    final long part;

    private PrimitiveGadget(long part) {
        this.part = part;
    }
}

private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {
    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {
        @Override
        public void write(JsonWriter out, Long value) throws IOException {
            out.value(value.toString());
        }

        @SuppressWarnings("unchecked")
        @Override
        public Long read(JsonReader in) throws IOException {
            return in.nextLong();
        }
    };

    @Override
    public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
        Class<?> cls = type.getRawType();
        if (Long.class.isAssignableFrom(cls)) {
            return (TypeAdapter<T>) ADAPTER;
        } else if (