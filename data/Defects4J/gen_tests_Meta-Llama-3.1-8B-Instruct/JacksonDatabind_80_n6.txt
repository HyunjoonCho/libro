java
@Test
public void testExtraneousTypeMapping() {
    // Mock the TypeManager to control the type resolution process
    TypeManager typeManager = mock(TypeManager.class);

    // Create a concrete type with an explicit name
    Type concreteType = new Type("ConcreteType", TypeCategory.CLASS);

    // Create a base type with the default name
    Type baseType = new Type(TypeCategory.CLASS);

    when(typeManager.resolveType(anyString())).thenReturn(baseType);

    // Call the method that adds the type mappings
    typeManager.addTypeMappings();

    // Verify that the base type is not included in the type mappings
    verify(typeManager, never()).addMapping(baseType.getName(), baseType);

    // Create a new base type with an explicit name
    Type explicitBaseType = new Type("ExplicitBaseType", TypeCategory.CLASS);

    // Verify that the explicit base type is included in the type mappings
    typeManager.addMapping(explicitBaseType.getName(), explicitBaseType);
    verify(typeManager).add