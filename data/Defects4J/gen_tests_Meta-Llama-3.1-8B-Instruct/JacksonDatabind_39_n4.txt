java
public void testJacksonContinuesParsingAfterDeserializationError() throws IOException {
    ObjectMapper mapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE, 
            DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);
    
    // Test that parsing continues after encountering a DeserializationFeature.FAIL_ON_INVALID_SUBTYPE error
    CallRecord call = new CallRecord();
    String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    ObjectReader reader = mapper.readerFor(CallRecord.class);
    try {
        reader.readValue(json);
        fail("Expected DeserializationFeature.FAIL_ON_INVALID_SUBTYPE to be enabled");
    } catch (JsonMappingException e) {
        // expected
    }
    // Verify that the subsequent fields are still parsed correctly
    CallRecord call2 = new CallRecord();
    ObjectReader reader2 = mapper.readerFor(CallRecord.class);
    reader2.readValue(json);
    assertEquals(0.0f, call2.version, 0);
    assertEquals("123", call2.application);
    assertNotNull(call2.item);
    assertNotNull(call2.item2