java
public void testTypeResolution() {
    // Test case 1: Base type is concrete and has explicit name
    Type baseType1 = new Type("ConcreteBaseType");
    assertEquals(2, TypeIdManager.getTypeIdsForType(baseType1).size());
    assertTrue(TypeIdManager.getTypeIdsForType(baseType1).contains(baseType1.getTypeId()));

    // Test case 2: Base type is abstract and has explicit name
    Type baseType2 = new Type("AbstractBaseType");
    assertEquals(1, TypeIdManager.getTypeIdsForType(baseType2).size());
    // No id for base type should be added if it's abstract

    // Test case 3: Base type is concrete but has default name
    Type baseType3 = new Type();
    assertEquals(0, TypeIdManager.getTypeIdsForType(baseType3).size());
    // No id for base type should not be added if it has default name
}
