javascript
// ==ClosureCompiler==
// @compilation_level ADVANCED_OPTIMIZATIONS
// @output_file_name default.js
// @use_closure_library true
// ==/ClosureCompiler==

goog.provide('Foo');
goog.provide('Bar');

/**
 * @constructor
 */
Foo = function() {};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
Foo.prototype.add = function(a, b) {
  return a + b;
};

/**
 * @param {number} a
 * @param {number} b
 * @return {number}
 */
Foo.prototype.sub = goog.abstractMethod;

/**
 * @constructor
 * @extends {Foo}
 */
Bar = function() {
  goog.base(this);
};
goog.inherits(Bar, Foo);

/**
 * @inheritDoc
 */
Bar.prototype.add = function(one) {
  return one;
};

/**
 * @inheritDoc
 */
Bar.prototype.sub = function(one) {
  return one;
};

// Test that add method with different signature in Bar does not produce warning
var foo = /** @type {Foo} */ (new Bar());
goog.asserts.assert(foo.add(3, 4) === 7);

// Test that sub