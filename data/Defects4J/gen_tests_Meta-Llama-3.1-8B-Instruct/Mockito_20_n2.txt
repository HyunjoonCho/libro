public void testAbstractClassMocking() {
    @Mock abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override public void addEmail(String email) {
            emails.add(email);
        }

        @Override List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    @InjectMocks FakeUserAccount userAccount = new FakeUserAccount();

    userAccount.addEmail("email1");
    userAccount.addEmail("email2");

    assertEquals(2, userAccount.getEmails().size());
}

public void testAbstractClassMockingAsync() {
    @Mock abstract class MockAccountService implements AccountService {
        @Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }

        abstract UserAccount getAccount(String id);
    }

    @InjectMocks MockAccountService service = new MockAccountService() {
        @Override UserAccount getAccount(String id) {
            return new UserAccount() {
                @Override public List<String> getEmails() {
                    return new ArrayList<>();
                }

                @Override public void addEmail(String email) {
                }
            };
        }
    };

    when(service.getAccount("id