java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

public class TestJacksonIgnoreWriteBigDecimalAsPlain {
    private final ObjectMapper mapper = new ObjectMapper();

    @Before
    public void setup() {
        mapper.configure(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN, true);
    }

    @Test
    public void testWriteBigDecimalAsPlainIgnoredWithJsonFormat() throws Exception {
        // Create a BigDecimal with a small value
        BigDecimal value = BigDecimal.valueOf(0.0000000005);

        // Use @JsonFormat(shape = JsonFormat.Shape.STRING) to serialize as a string
        Test test = new Test(value);
        String json = mapper.writeValueAsString(test);
        System.out.println(json); // Should print {"value":"5.0E-10"}

        // Verify that WRITE_BIGDECIMAL_AS_PLAIN is ignored
        assert json.contains("E-10"); // Should contain scientific notation

        // Create a new mapper without @JsonFormat
        ObjectMapper mapperWithoutFormat = new ObjectMapper();
        mapperWithoutFormat.configure(SerializationFeature.WRITE_BIGDECIMAL_AS_PLAIN, true);

        // Serialize the same BigDecimal without @JsonFormat
        String jsonWithoutFormat = mapperWithout