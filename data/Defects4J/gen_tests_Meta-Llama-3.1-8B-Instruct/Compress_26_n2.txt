java
import java.io.ByteArrayInputStream;
import java.io.CipherInputStream;
import java.io.IOException;
import java.security.SecureRandom;
import java.util.Base64;

public void testIOUtilsSkip() throws IOException {
    // Create a CipherInputStream that stops at the end of each byte buffer
    byte[] data = new byte[1024];
    new SecureRandom().nextBytes(data);
    ByteArrayInputStream bais = new ByteArrayInputStream(data);
    CipherInputStream cipherInputStream = new CipherInputStream(bais, new SecureRandom());

    // Try to skip 1024 bytes
    long numToSkip = 1024;
    long skipped = IOUtils.skip(cipherInputStream, numToSkip);

    // Check if we actually skipped the requested number of bytes
    assertEquals(numToSkip, skipped);

    // Try to skip 1 byte (should be skipped if not at end of stream)
    numToSkip = 1;
    skipped = IOUtils.skip(cipherInputStream, numToSkip);
    assertTrue(skipped >= 0 && skipped <= 1);

    // Try to skip 1 byte when at end of stream (should return 0)
    numToSkip = 1;
    cipherInputStream = new CipherInputStream(new ByteArrayInputStream(new byte[0]), new