public void testMapDeserializerWithCustomEnumKeyDeserializer() throws IOException {
    String json = "{\"someMap\": {\"FOO\": \"bar\"}}";
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule simpleModule = new SimpleModule();
    simpleModule.addDeserializer(SuperTypeEnum.class, new JsonDeserializer<SuperTypeEnum>() {
        @Override
        public SuperTypeEnum deserialize(JsonParser jsonParser, DeserializationContext deserializationContext)
                throws IOException {

            return SuperTypeEnum.valueOf(jsonParser.getText());
        }
    });
    mapper.registerModule(simpleModule);

    // Set the token to END_OBJECT to simulate the case where type info field is missing
    JsonParser parser = mapper.getFactory().createParser(json.getBytes());
    parser.nextToken();
    parser.nextToken();

    DeserializationContext ctxt = new DeserializationContext(parser, mapper);
    MapDeserializer mapDeserializer = new MapDeserializer(SuperTypeEnum.class, new StdKeyDeserializer.DelegatingKD(SuperTypeEnum.class));
    try {
        mapDeserializer.deserialize(parser, ctxt);
        fail("Expected a JsonParseException");
    } catch (JsonParseException e) {
        // Expected exception
    }
}