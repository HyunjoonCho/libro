public void testJsonAdapterIgnoredForPrimitiveFields() {
    Gson gson = new Gson();
    GadgetWithPrimitivePart gadget = new GadgetWithPrimitivePart(42);
    String json = gson.toJson(gadget);
    assertEquals("{\"part\":42}", json);
    GadgetWithPrimitivePart deserializedGadget = gson.fromJson(json, GadgetWithPrimitivePart.class);
    assertEquals(42, deserializedGadget.part);
}

private static final class GadgetWithPrimitivePart {
    @JsonAdapter(LongToStringTypeAdapterFactory.class)
    final long part;

    private GadgetWithPrimitivePart(long part) {
        this.part = part;
    }
}

private static final class LongToStringTypeAdapterFactory implements TypeAdapterFactory {
    static final TypeAdapter<Long> ADAPTER = new TypeAdapter<Long>() {
        @Override public void write(JsonWriter out, Long value) throws IOException {
            out.value(value.toString());
        }
        @SuppressWarnings("unchecked")
        @Override public Long read(JsonReader in) throws IOException {
            return in.nextLong();
        }
    };
    @Override public <T> TypeAdapter<T> create(Gson gson, final TypeToken<T> type) {
        Class<?> cls = type.getRawType();
        if (Long.class.is