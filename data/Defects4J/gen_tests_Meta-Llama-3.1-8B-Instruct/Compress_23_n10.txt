public void testSevenZDictionarySize() {
    SevenZArchiveEntry entry = new MockSevenZArchiveEntry("entry", new byte[1024], 16 * 1024 * 1024);
    SevenZArchiveFile archive = new MockSevenZArchiveFile();
    archive.addEntry(entry);
    try {
        SevenZFile sevenZFile = new SevenZFile(new MockFile(archive));
        fail("Expected UnsupportedOptionsException for large dictionary size");
    } catch (UnsupportedOptionsException e) {
        // expected
    }
}

// Helper classes
class MockSevenZArchiveEntry implements SevenZArchiveEntry {
    private byte[] data;
    private long size;

    public MockSevenZArchiveEntry(String name, byte[] data, long size) {
        this.data = data;
        this.size = size;
    }

    @Override
    public String getName() {
        return "entry";
    }

    @Override
    public long getSize() {
        return size;
    }

    @Override
    public byte[] getData() {
        return data;
    }
}

class MockSevenZArchiveFile implements SevenZArchiveFile {
    private List<SevenZArchiveEntry> entries = new ArrayList<>();

    public void addEntry