java
public void testExternExportWithTypedef() {
    String code = 
        "var foo = function(x: { @typedef {a: number} A }) {\n" +
        "  x.a;\n" +
        "}\n" +
        "\n" +
        "var bar = function(y: { a: { @typedef {b: number} B } }) {\n" +
        "  y.a.b;\n" +
        "}";

    // Compile the code and retrieve the externs
    String externs = compile(code);

    // Verify that the externs are generated correctly
    String expectedExterns = 
        "function A(a:number):void {\n" +
        "  this.a = a;\n" +
        "}\n" +
        "\n" +
        "function B(b:number):void {\n" +
        "  this.b = b;\n" +
        "}\n";

    assertEquals(expectedExterns, externs);
}

private String compile(String code) {
    // Implement the compilation logic here
    // For example, you can use the Closure Compiler API
    // or use a temporary file to compile the code and read the externs
}
