java
public class TestPojo {
    @JsonValue
    public long getValue() {
        return 1;
    }
}

public class CustomSerializer extends JsonSerializer<TestPojo> {
    @Override
    public void serialize(TestPojo value, JsonGenerator gen, SerializerProvider provider) throws IOException, JsonProcessingException {
        gen.writeNumber(value.getValue() * 2);
    }
}

public void testCustomSerializerNotUsed() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new SimpleModule().addSerializer(TestPojo.class, new CustomSerializer()));
    TestPojo pojo = new TestPojo();
    String json = mapper.writeValueAsString(pojo);
    // This should throw a custom serializer exception or fail to serialize
    // with a default serializer, but it doesn't because of the @JsonValue annotation
    // So we need to check if the value is serialized correctly
    assertEquals(2, Long.parseLong(json));
}
