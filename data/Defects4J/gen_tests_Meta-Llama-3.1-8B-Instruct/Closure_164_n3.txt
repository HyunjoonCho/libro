public void testFunctionOverloadResolution() {
    Function<String, Number, Boolean> func = new Function<String, Number, Boolean>() {
        @Override
        public Boolean apply(String s, Number number) {
            return null;
        }
    };

    Function<String, Number> paramFunc1 = new Function<String, Number>() {
        @Override
        public Number apply(String s) {
            return null;
        }
    };

    Function<String> paramFunc2 = new Function<String>() {
        @Override
        public Object apply(String s) {
            return null;
        }
    };

    // first call should compile
    func.apply("test", 1);

    // second call should not compile
    // Java does not support this syntax, so we'll simulate it with a try-catch block
    try {
        func.apply("test");
        fail("Expected compilation error");
    } catch (Exception e) {
        // expected
    }
}