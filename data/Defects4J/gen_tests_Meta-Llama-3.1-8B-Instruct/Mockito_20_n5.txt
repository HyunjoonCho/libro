public void testAbstractClassMocking() {
    @Spy
    abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    @Spy
    abstract class MockAccountService implements AccountService {
        @Override
        public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }

        abstract UserAccount getAccount(String id);
    }

    @Spy
    abstract class MockAccountRpcService implements AccountRpcService {
        @Override
        Future<Account> getAccount(RpcContext context, String id) {
            checkNotNull(context);
            return getAccount(id);
        }

        abstract Future<Account> getAccount(String id);
    }

    when(new FakeUserAccount().getEmails()).thenReturn(new ArrayList<>());
    when(new MockAccountService().getAccount("id")).thenReturn(new UserAccount() {
        @Override
        public List<String> getEmails() {
            return new ArrayList<>();
        }
    });
    when(new MockAccountRpcService