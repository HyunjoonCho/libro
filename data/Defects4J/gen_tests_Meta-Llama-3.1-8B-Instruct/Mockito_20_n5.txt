java
public class AbstractClassMockingTest {
    @Test
    public void testMockingAbstractClass() {
        // Arrange
        AccountService service = Mockito.mock(AccountService.class);
        when(service.getAccount(eq("id"), any(AsyncCallback.class))).thenAnswer(new Answer<Void>() {
            AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];
            @Override
            public Void answer() throws Throwable {
                callback.onSuccess(getAccount("id"));
                return null;
            }
        });

        // Act and Assert
        UserAccount account = new MockAccount("id");
        service.getAccount("id", new AsyncCallback<UserAccount>() {
            @Override
            public void onSuccess(UserAccount userAccount) {
                assertEquals(account, userAccount);
            }

            @Override
            public void onFailure(Throwable throwable) {
                fail("Should not fail");
            }
        });
    }

    private static class MockAccount implements UserAccount {
        private final String id;

        public MockAccount(String id) {
            this.id = id;
        }

        @Override
        public List<String> getEmails() {
            return new ArrayList<>();
        }

        @Override
        public void addEmail(String