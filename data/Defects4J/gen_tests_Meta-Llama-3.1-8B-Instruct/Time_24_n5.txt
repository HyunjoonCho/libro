java
import org.junit.Test;
import org.junit.runner.JUnitCore;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;

import static org.junit.Assert.*;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

public class DateTimeFormatterTest {

    @Test
    public void testIssue107() {
        DateTimeFormatter dtf = DateTimeFormat.forPattern("xxxxMM'w'ww");
        try {
            DateTime dt = dtf.parseDateTime("201101w01");
            fail("Expected ParseException");
        } catch (ParseException e) {
            // Expected exception
        }
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Date expectedDate = sdf.parse("2011-01-03");
        
        // Since the actual date is incorrect, we cannot directly compare it with expectedDate
        // We can compare the year, month and day separately
        DateTimeFormatter dtf2 = DateTimeFormat.forPattern("yyyy-MM-dd");
        DateTime actualDate = dtf2.parseDateTime("201101w01");
        assertEquals(2011, actualDate.getYear());
        assertEquals(1, actualDate.getMonthOfYear());
        assertEquals(3, actualDate