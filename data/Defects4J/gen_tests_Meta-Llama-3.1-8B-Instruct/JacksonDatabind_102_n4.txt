java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import org.junit.Test;

import java.sql.Date;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.TimeZone;

import static org.junit.Assert.assertEquals;

public class JacksonSerializationTest {

    @Test
    public void testSqlDateSerialization() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);

        // Test that java.sql.Date serializes as a string
        Date sqlDate = new Date(Instant.now().atZone(TimeZone.getTimeZone("UTC").toZoneId()).toLocalDate().atStartOfDay().toInstant().getEpochSecond() * 1000);
        String json = mapper.writeValueAsString(sqlDate);
        assertEquals("2014-01-01", json);

        // Test that java.util.Date serializes as a number
        java.util.Date utilDate = new java.util.Date(Instant.now().toEpochMilli());
        json = mapper.writeValueAsString(utilDate