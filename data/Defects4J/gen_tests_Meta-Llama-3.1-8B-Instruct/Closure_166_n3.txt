javascript
describe('anonymous object type inference inconsistency', () => {
    it('should not allow function with union type parameter to call with non-union type argument', () => {
        const func = (record: { prop: string, prop2: string | undefined }) => {
            console.log(record.prop);
        };

        const func2 = (record: { prop: string, prop2: string | undefined } | string) => {
            if (typeof record ==='string') {
                console.log(record);
            } else {
                console.log(record.prop);
            }
        };

        func({ prop: 'a' });
        try {
            func2({ prop: 'a' });
            fail('Expected error');
        } catch (error) {
            expect(error.message).toBe('actual parameter 1 of func2 does not match formal parameter');
        }
    });

    it('should allow function with union type parameter to call with union type argument', () => {
        const func2 = (record: { prop: string, prop2: string | undefined } | string) => {
            if (typeof record ==='string') {
                console.log(record);
            } else {
                console.log(record.prop);
            }
        };

        func2