public void testAdvancedModeWarning() {
    Compiler compiler = new Compiler();
    compiler.addImport("goog.provide('Foo')");
    compiler.addImport("goog.provide('Bar')");
    compiler.addCode("/** @constructor */ Foo = function() {};");
    compiler.addCode("/** * @param {number} a * @param {number} b * @return {number} */ Foo.prototype.add = function(a, b) { return a + b;};");
    compiler.addCode("/** * @param {number} a * @param {number} b * @return {number} */ Foo.prototype.sub = goog.abstractMethod;");
    compiler.addCode("/** @constructor * @extends {Foo} */ Bar = function() { goog.base(this);};");
    compiler.addCode("goog.inherits(Bar, Foo);");
    compiler.addCode("/** @inheritDoc */ Bar.prototype.add = function(one) { return one;};");
    compiler.addCode("/** @inheritDoc */ Bar.prototype.sub = function(one) { return one;};");

    List<String> output = compiler.compile();
    assertFalse(output.contains("Warning: Bar.prototype.add has different signature than Foo.prototype.add"));
    assertFalse(output.contains("Warning: Bar.prototype.sub has