java
public void testPrimitiveWrapperRefinement() {
    // Test 1: Ignore primitive/wrapper override, return original type as is
    ObjectMapper mapper = new ObjectMapper();
    mapper.activateDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
    JsonNode node = mapper.readValue("{\"value\": 123}", JsonNode.class);
    assertEquals(Integer.class, node.get("value").getNodeType().getClass());
    assertEquals(Integer.class, node.get("value").get("value").getClass());
    assertEquals(123, node.get("value").getIntValue());

    // Test 2: Allow wrapper to "refine" primitive, return wrapper
    mapper = new ObjectMapper();
    mapper.activateDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
    node = mapper.readValue("{\"value\": 123}", JsonNode.class);
    assertEquals(Integer.class, node.get("value").getClass());
    assertEquals(Integer.class, node.get("value").get("value").getClass());
    assertEquals(123, node.get("value").getIntValue());
}
