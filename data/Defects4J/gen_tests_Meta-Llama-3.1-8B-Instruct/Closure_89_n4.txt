public void testClosureCompiler() {
    Map<String, Function> map = new HashMap<>();
    Function f1 = () -> System.out.println("f1");
    f1.setAlwaysCall(true);
    Function f2 = () -> System.out.println("f2");

    map.put("f1", f1);
    map.put("f2", f2);

    Function callFunctionByKey = (key) -> {
        Function f = map.get(key);
        if (f.isAlwaysCall()) {
            f.run();
        }
    };

    callFunctionByKey(Math.random() > 0.5? "f1" : "f2");

    // Verify that f1's alwaysCall property was removed
    assertFalse(f1.getClass().getDeclaredFields().anyMatch(field -> field.getName().equals("alwaysCall")));
}

class Function {
    private boolean alwaysCall;

    public void setAlwaysCall(boolean alwaysCall) {
        this.alwaysCall = alwaysCall;
    }

    public boolean isAlwaysCall() {
        return alwaysCall;
    }

    public void run() {
        // Implementation of run method
    }
}