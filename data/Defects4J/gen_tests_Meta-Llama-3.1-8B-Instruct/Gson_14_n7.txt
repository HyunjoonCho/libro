java
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.internal.$Gson$Types;

import org.junit.Test;

import java.lang.reflect.Type;
import java.util.concurrent.atomic.AtomicReference;

import static org.junit.Assert.fail;

public class GsonTest {

    private static class Foo1<A> {
        Foo2<? extends A> foo2;
    }

    private static class Foo2<B> {
        Foo1<? super B> foo1;
    }

    @Test(expected = StackOverflowError.class)
    public void testRecursiveResolveSimple() {
        Gson gson = new GsonBuilder().create();
        TypeAdapter<Foo1<?>> adapter = gson.getAdapter(Foo1.class);
    }

    @Test
    public void testRecursiveResolveWithCollapse() {
        Gson gson = new GsonBuilder()
               .registerTypeAdapterFactory(new TypeAdapterFactory() {
                    @Override
                    public <T> TypeAdapter<T> create(Gson gson, Type typeOfT) {
                        return new TypeAdapter<T>() {
                            @Override
                            public T read(JsonReader jsonReader) throws IOException {
                                return null;
                            }

                            @Override
                            public void write