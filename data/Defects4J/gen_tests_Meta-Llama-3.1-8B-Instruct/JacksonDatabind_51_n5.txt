java
import com.fasterxml.jackson.databind.JavaType;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import com.fasterxml.jackson.databind.type.TypeFactory.DefaultTypeFactory;

import org.junit.Test;

public class TestTypeIdResolver {

    @Test
    public void testTypeIdResolver() throws Exception {
        // Create a TypeFactory with a custom TypeIdResolver
        TypeFactory tf = TypeFactory.defaultInstance();
        ObjectMapper mapper = new ObjectMapper(tf);

        // Create a JavaType for a generic type (e.g. List<String>)
        JavaType genericType = tf.constructParametricType(List.class, String.class);

        // Use the TypeIdResolver to get the type id
        // Assuming the TypeIdResolver is implemented correctly
        String typeId = "com.example.GenericType";

        // Create a JavaType for the same generic type using the type id
        JavaType type = tf.constructType(typeId);

        // The generic type information should be lost
        // Let's assume the actual type is List