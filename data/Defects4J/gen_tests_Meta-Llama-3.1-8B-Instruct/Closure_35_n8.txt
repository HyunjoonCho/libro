javascript
function func(a, b) {
    var results;
    if (a) {
        results = {};
        results.prop1 = { a: 3 };
    }
    if (b) {
        results = results || {};
        results.prop2 = 'prop2';
    } else {
        results = results || {};
        results.prop3 = 'prop3';
    }
    return results;
}

// Test case to reproduce the error
function testAssignmentToObjectInConditionalCausesTypeError() {
    // Call the function with a = true and b = false
    var result1 = func(true, false);
    // This should pass as the return type is {prop1: {a: number}}
    // but the error is due to the inconsistent return type in the function

    // Call the function with a = false and b = true
    var result2 = func(false, true);
    // This should pass as the return type is {prop2: string}
    // but the error is due to the inconsistent return type in the function

    // Call the function with a = true and b = true
    var result3 = func(true, true);
    // This should pass as the return type is {prop1