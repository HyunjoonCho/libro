java
public void testMultiStartUnivariateRealOptimizerResult() {
    MultiStartUnivariateRealOptimizer optimizer = new MultiStartUnivariateRealOptimizer();
    double[] optima = new double[1];
    double[] optimaValues = new double[1];
    
    // Simulate the optimization process
    optimizer.optimize(new Function() {
        @Override
        public double value(double x) {
            return Math.pow(x, 2); // simple function for demonstration
        }
    }, 0, 10, optima, optimaValues);
    
    // The last result might not be the best one
    double lastResult = optimizer.getResult();
    double bestResult = Double.POSITIVE_INFINITY;
    for (int i = 0; i < optima.length; i++) {
        if (optima[i] < bestResult) {
            bestResult = optima[i];
        }
    }
    
    assertNotEquals(bestResult, lastResult);
    
    // getFunctionValue() should also return the best result
    assertEquals(bestResult, optimizer.getFunctionValue());
}
