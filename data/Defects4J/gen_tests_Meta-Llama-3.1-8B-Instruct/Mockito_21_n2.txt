java
public class AccountServiceTest {

    @Mock
    private AccountService service;

    @Test
    public void testGetAccount() {
        // Without using an abstract class
        when(service.getAccount(anyString(), any(AsyncCallback.class))).thenReturn(null);

        // This requires using Answer and is not statically type safe
        // when(service.getAccount(anyString(), any(AsyncCallback.class))).thenAnswer(new Answer<Void>() {
        //    AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) getArguments()[1];
        //    //...
        //});

        // Using an abstract class to mock the behavior
        AbstractAccountService fakeService = new FakeAccountService();
        when(service).getAccount(anyString(), any(AsyncCallback.class)).thenReturn(fakeService.getAccount("id"));

        // Now we can test the callback
        AsyncCallback<UserAccount> callback = mock(AsyncCallback.class);
        fakeService.getAccount("id", callback);
        verify(callback).onSuccess(any(UserAccount.class));
    }

    public static class FakeAccountService implements AccountService {
        @Override
        public void getAccount(String id, AsyncCallback