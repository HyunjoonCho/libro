java
public class EnumSerializationTest {

    public enum TestEnum {
        @JsonValue
        VALUE_ONE("value1");
        @JsonValue
        VALUE_TWO("value2");

        private String valueInJson;

        private TestEnum(String valueInJson) {
            this.valueInJson = valueInJson;
        }

        public static TestEnum getEnumFromValue(String value) {
            for (TestEnum testEnum : values()) {
                if (testEnum.valueInJson.equals(value)) {
                    return testEnum;
                }
            }
            throw new IllegalArgumentException();
        }
    }

    @Test
    public void testEnumSerialization() throws JsonParseException, JsonMappingException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(DeserializationFeature.READ_ENUMS_USING_TO_STRING);
        assertEquals(TestEnum.VALUE_ONE, mapper.readValue("{\"value\":\"value1\"}", TestEnum.class));
        assertEquals(TestEnum.VALUE_TWO, mapper.readValue("{\"value\":\"value2\"}", TestEnum.class));
    }

    @Test
    public void testEnumDeserializationWithJsonValue() throws JsonParseException, JsonMappingException, IOException {
        ObjectMapper mapper = new ObjectMapper();
        assertEquals(TestEnum.VALUE_ONE, mapper.readValue("{\"