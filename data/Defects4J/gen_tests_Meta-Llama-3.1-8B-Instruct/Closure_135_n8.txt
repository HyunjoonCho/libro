javascript
describe('Test inheritance detection', function() {
    it('should detect inheritance when prototype directly assigned', function() {
        function SuperClass() {}
        SuperClass.prototype.CustomMethod = function() {}

        function SubClass() {}
        SubClass.prototype = new SuperClass();
        SubClass.prototype.CustomMethod = function() {
            this.myProperty = "value";
        }

        let subClassInstance = new SubClass();

        // Expect warning or error for missing @override annotation
        expect(function() {
            SubClass.prototype.CustomMethod.call(subClassInstance);
        }).toThrowError(/property CustomMethod not defined on any superclass of SubClass/);
    });

    it('should not detect inheritance when prototype directly assigned with a function', function() {
        function SuperClass() {}
        SuperClass.prototype.CustomMethod = function() {}

        function SubClass() {}
        function inherit(Child, Parent) {
            Child.prototype = new Parent();
        }
        inherit(SubClass, SuperClass);
        SubClass.prototype.CustomMethod = function() {
            this.myProperty = "value";
        }

        let subClassInstance = new SubClass();

        // Expect no warning or error
        expect(function() {
            SubClass.prototype.CustomMethod.call(subClassInstance);
       