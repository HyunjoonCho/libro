public void testAbstractClassMocking() {
    // Example 1: Fake with trivial logic
    @Mock
    private UserAccount userAccount;
    when(userAccount.getEmails()).thenReturn(new ArrayList<>());
    userAccount.addEmail("email1");
    assertEquals(1, userAccount.getEmails().size());
    when(userAccount.getEmails()).thenReturn(Arrays.asList("email1"));
    assertEquals(1, userAccount.getEmails().size());

    // Example 2: Callback-style API
    @Mock
    private AccountService service;
    when(service.getAccount(anyString(), any(AsyncCallback.class))).thenAnswer(new Answer<Void>() {
        @Override
        public Void answer(InvocationOnMock invocation) throws Throwable {
            AsyncCallback<UserAccount> callback = (AsyncCallback<UserAccount>) invocation.getArguments()[1];
            callback.onSuccess(new UserAccount() {
                @Override
                public void addEmail(String email) {}
                @Override
                public List<String> getEmails() {
                    return new ArrayList<>();
                }
            });
            return null;
        }
    });
    service.getAccount("id", new AsyncCallback<UserAccount>() {
        @Override
        public void onSuccess(UserAccount userAccount) {
            // do nothing
        }

        @