javascript
// t.js
/**
 * @interface
 */
var OtherType = function() {}

/**
 * @implements {MyType}
 * @constructor
 */
var MyType = function() {}

/**
 * @type {MyType}
 */
var x = /** @type {!OtherType} */ (new Object());

// Test case for detecting infinite recursion
function testCycleDetection() {
    // Create a type that implements itself
    var SelfType = function() {}
    SelfType.prototype = Object.create(Object.getPrototypeOf(SelfType));
    SelfType.prototype.constructor = SelfType;
    Object.defineProperty(SelfType.prototype, 'constructor', {value: SelfType});
    Object.defineProperty(SelfType, 'prototype', {value: SelfType.prototype});
    Object.defineProperty(SelfType.prototype, 'SelfType', {value: SelfType});

    // Check if the type system detects the cycle
    try {
        var instance = new SelfType();
    } catch (e) {
        // If the above line throws an exception, the cycle is detected
        console.log("Cycle detected");
    }
}

testCycleDetection();
