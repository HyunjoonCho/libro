java
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.afterburner.PropertyWriteFilter;
import org.junit.Test;

import static org.junit.Assert.assertTrue;

public class AfterburnerIssue55Test {

    @Test
    public void testNonEmptyExclusion() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        PropertyWriteFilter filter = mapper.getSerializationConfig().getSerializationInclusion().enabledByDefault(true);
        filter.addNonExcludedProperty("nonEmpty");

        // Create an object with a non-empty string property
        Object obj = new TestObject("non-empty-value");

        // Try to serialize the object with the default ObjectMapper
        ObjectMapper defaultMapper = new ObjectMapper();
        String json = defaultMapper.writeValueAsString(obj);
        assertTrue(json.contains("nonEmpty"));

        // Try to serialize the object with the Afterburner-enabled ObjectMapper
        ObjectMapper afterburnerMapper = new ObjectMapper();
        afterburnerMapper.registerModule(new AfterburnerModule());
        String afterburnerJson = afterburnerMapper.writeValueAsString(obj);
        assertTrue(afterburnerJson.contains("nonEmpty"));
    }

    public static class TestObject {
        private String nonEmpty;

        public TestObject(String nonEmpty