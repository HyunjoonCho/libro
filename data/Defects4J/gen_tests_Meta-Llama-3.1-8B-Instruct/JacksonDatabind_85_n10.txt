java
public void testDateTimeSerializerBaseContextualFormat() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule module = new SimpleModule();
    module.addSerializer(new DateTimeSerializerBase() {
        @Override
        public void serialize(DateTime value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            // Do nothing
        }
    });
    mapper.registerModule(module);

    // Test with custom format
    DateTimeFormatter formatter = DateTimeFormat.forPattern("yyyy-MM-dd");
    mapper.setDateFormat(formatter);

    // Serialize a date with custom format
    String json = mapper.writeValueAsString(new Date());
    assertEquals("2014-03-21", json);

    // Test with no custom format
    mapper.setDateFormat(null);
    json = mapper.writeValueAsString(new Date());
    assertEquals("2014-03-21", json);

    // Test that custom format is ignored when using DateTimeSerializerBase
    DateTimeSerializerBase serializer = new DateTimeSerializerBase() {
        @Override
        public void serialize(DateTime value, JsonGenerator gen, SerializerProvider provider) throws IOException {
            // Do nothing
        }
    };
    DateTimeFormatter ignoredFormatter = DateTimeFormat.forPattern("yyyy-MM-dd");
    serializer.setDateFormat(ignoredFormatter);
    json = serializer