java
public class TestGenericTypeIdResolver {
    public static class GenericClass<T> {
        public T value;
    }

    public static class TypeIdResolver implements TypeIdResolver {
        @Override
        public String typeOf(Object pojo) {
            return "java.lang.Integer";
        }

        @Override
        public JavaType typeOf(JavaType type, Object pojo) {
            return new TypeFactory.Default().constructType(type.getRawClass(), Integer.class);
        }
    }

    @Test
    public void testGenericTypeIdResolver() throws JsonProcessingException {
        ObjectMapper mapper = new ObjectMapper();
        TypeIdResolver resolver = new TypeIdResolver();
        mapper.setTypeIdResolver(resolver);

        String json = "{\"value\":\"123\"}";
        GenericClass<Integer> genericClass = mapper.readValue(json, GenericClass.class);

        // The bug is that the type of genericClass.value is Object, not Integer
        assertEquals(Object.class, genericClass.value.getClass());
    }
}
