public void testTypeIdResolverGenericIgnored() {
    TypeFactory typeFactory = new TypeFactory() {
        @Override
        public JavaType constructType(TypeBindings typeBindings, Collection<JavaType> directTypes, JavaType parent, Class<?> rawType, Type type, BaseDataType shape) {
            if (rawType == List.class) {
                JavaType elementType = typeBindings.resolveType(type);
                return CollectionType.constructCollectionType(typeFactory, elementType, rawType);
            }
            return super.constructType(typeBindings, directTypes, parent, rawType, type, shape);
        }
    };

    ObjectMapper mapper = new ObjectMapper();
    SimpleModule module = new SimpleModule() {
        @Override
        public void setupModule(SetupContext context) {
            context.setTypeIdResolver(new TypeIdResolver() {
                @Override
                public String idFromValue(Object value) {
                    if (value instanceof List) {
                        List<?> list = (List<?>) value;
                        JavaType elementType = typeFactory.constructType(TypeFactory.defaultTypeBindings(), Collections.emptyList(), null, list.get(0).getClass(), null, BaseDataType.UNKNOWN);
                        return "List<" + typeFactory.typeId(elementType) + ">";
                    }
                    return null