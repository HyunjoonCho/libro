public void testSpyingOnAbstractClasses() {
    // Example 1: Fake with trivial logic
    FakeUserAccount userAccount = mock(FakeUserAccount.class);
    when(userAccount.getEmails()).thenReturn(new ArrayList<>());
    userAccount.addEmail("email1");
    assertEquals(1, userAccount.getEmails().size());

    // Example 2: Callback-style API
    MockAccountService service = mock(MockAccountService.class);
    when(service.getAccount(eq("id"))).thenAnswer(invocation -> {
        UserAccount account = mock(UserAccount.class);
        when(account.getEmails()).thenReturn(new ArrayList<>());
        return account;
    });
    service.getAccount("id");
    verify(service).getAccount("id");

    // Example 3: Uninteresting parameters
    MockAccountRpcService rpcService = mock(MockAccountRpcService.class);
    when(rpcService.getAccount(any(RpcContext.class), eq("id"))).thenReturn(null);
    rpcService.getAccount(null, "id");
    verify(rpcService).getAccount(any(RpcContext.class), eq("id"));
}

// Helper classes
abstract class FakeUserAccount implements UserAccount {
    private final List<String> emails = new ArrayList<>();

    @Override
    public void addEmail