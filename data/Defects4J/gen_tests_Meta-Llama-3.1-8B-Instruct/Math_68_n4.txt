public void testLevenbergMarquardtOptimizer() {
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    double[] data = {1, 2, 3};
    double[] result = optimizer.optimize(data);
    // Since the optimizer ignores the VectorialConvergenceChecker, it should converge to some point
    // To verify the bug, we need to create a custom VectorialConvergenceChecker and set it to the optimizer
    // For simplicity, let's assume we want the optimizer to stop when the residual is less than 1e-6
    VectorialConvergenceChecker checker = new VectorialConvergenceChecker() {
        @Override
        public boolean isConverged(double[] data, double[] result) {
            double residual = 0;
            for (int i = 0; i < data.length; i++) {
                residual += Math.pow(data[i] - result[i], 2);
            }
            return Math.sqrt(residual) < 1e-6;
        }
    };
    optimizer.setConvergenceChecker(checker);
    result = optimizer.optimize(data);
    // Now the optimizer should stop when the residual is less than