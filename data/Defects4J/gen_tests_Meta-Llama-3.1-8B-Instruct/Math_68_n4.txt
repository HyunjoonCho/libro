java
public void testLevenbergMarquardtOptimizer() {
    // Create a custom convergence checker that always returns false
    VectorialConvergenceChecker customChecker = new VectorialConvergenceChecker() {
        @Override
        public boolean isConverged(double[] params, double[] residuals) {
            return false;
        }
    };

    // Create a LevenbergMarquardtOptimizer with the custom convergence checker
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(customChecker);

    // Use the optimizer and assert that it ignores the custom convergence checker
    // For example, you can use a simple function to optimize
    double[] params = {1.0, 2.0};
    double[] residuals = new double[1];
    optimizer.optimize(params, residuals, new double[0], new double[0]);

    // The optimizer should continue running even though the custom checker says it's not converged
    // So, we can assert that the number of iterations is greater than 1
    assertTrue(optimizer.getIterations() > 1);
}
