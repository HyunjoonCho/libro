java
public void testDormandPrinceStepSize() {
    // Set up a function that goes to infinity as x approaches 1
    double[] f = new double[1];
    double[] df = new double[1];
    f[0] = 1.0 / (x - 1);
    df[0] = -1.0 / Math.pow(x - 1, 2);
    
    // Set up an integration range that is very short
    double x0 = 0.999;
    double xEnd = 1.0;
    double y0 = 1.0;
    double[] y = new double[]{y0};
    
    // Use the Dormand-Prince integrator to integrate
    // The first step size should be very small, otherwise it will try to evaluate the function at x=1
    double[] result = DormandPrince.integrate(f, df, x0, xEnd, 1e-12, y);
    
    // Check that the function has been evaluated at a point very close to x0, but not at x=1
    assertEquals(x0, result[0], 1e-12);
}
