public void testJSCUsedGlobalThis() {
    // Create a JavaScript interface
    Object myParent = new Object();
    java.util.Map<String, Object> myParentPrototype = new java.util.HashMap<>();
    myParentPrototype.put("MyMethod", new Object() {
        public void invoke(Object a) {}
    });
    myParentPrototype.put("constructor", new Object() {
        public Object invoke() {
            return this;
        }
    });
    // Create a JavaScript class implementing the interface
    Object myClass = new Object();
    java.util.Map<String, Object> myClassPrototype = new java.util.HashMap<>();
    myClassPrototype.put("MyMethod", new Object() {
        public void invoke(Object a) {
            ((java.util.Map<String, Object>)myClassPrototype).put("a2", a);
        }
    });
    myClassPrototype.put("constructor", new Object() {
        public Object invoke() {
            return this;
        }
    });
    // Set the prototype of the class to the interface
    ((java.util.Map<String, Object>)myClassPrototype).put("prototype", myParentPrototype);
    // Set the class on the global object
    ((java.util.Map<String, Object>)((java.util.Map