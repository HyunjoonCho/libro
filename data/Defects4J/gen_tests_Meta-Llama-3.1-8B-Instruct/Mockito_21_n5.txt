public void testAbstractClassSpying() {
    @Spy abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override public void addEmail(String email) {
            emails.add(email);
        }

        @Override List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    @Spy abstract class MockAccountService implements AccountService {
        @Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }

        abstract UserAccount getAccount(String id);
    }

    @Spy abstract class MockAccountRpcService implements AccountRpcService {
        @Override Future<Account> getAccount(RpcContext context, String id) {
            checkNotNull(context);  // Common sanity test. Don't have to repeat it in tests.
            return getAccount(id);
        }

        abstract Future<Account> getAccount(String id);
    }

    UserAccount userAccount = new FakeUserAccount();
    AccountService service = new MockAccountService() {
        @Override
        UserAccount getAccount(String id) {
            return userAccount;
        }
    };
    AccountRpcService rpcService = new MockAccountRpcService() {
        @Override