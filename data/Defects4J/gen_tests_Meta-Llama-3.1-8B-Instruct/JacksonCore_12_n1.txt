java
public void testTokenLocationAfterFieldName() throws Exception {
    // Test with Reader-based parser
    _testTokenLocationAfterFieldName(false);

    // Test with Stream-based parser
    _testTokenLocationAfterFieldName(true);
}

private void _testTokenLocationAfterFieldName(Boolean useStream) throws Exception {
    // Create a JSON string to test with
    final String DOC = "{\"name\":123}";

    // Create a JsonFactory and a JsonParser
    JsonFactory jf = new JsonFactory();
    JsonParser jp = useStream?
            jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes("UTF-8"))) // Stream-based parser
            : jf.createJsonParser(new StringReader(DOC)); // Reader-based parser

    // Parse the JSON string
    assertEquals(JsonToken.START_OBJECT, jp.nextToken());
    assertEquals(JsonToken.FIELD_NAME, jp.nextToken());
    assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());

    // Get the location of the FIELD_NAME token
    Location loc1 = jp.getTokenLocation();

    // Advance to the next token (should be a VALUE_NUMBER_INT)
    jp.nextToken();

    // Get the location of the VALUE_NUMBER_INT token
    Location loc