public void testBrentOptimizerBestPoint() {
    BrentOptimizer optimizer = new BrentOptimizer();
    optimizer.setMaxEvaluations(100);
    optimizer.optimize(new Function() {
        double best = Double.MAX_VALUE;
        double last = Double.MAX_VALUE;
        double penultimate = Double.MAX_VALUE;

        @Override
        public double evaluate(double x) {
            double result = Math.sin(x) + 2 * (x - 1);
            if (result < best) {
                best = result;
            }
            if (result < last) {
                last = result;
            } else if (result < penultimate) {
                penultimate = result;
            }
            return result;
        }
    });
    assertEquals(last, optimizer.getBestPoint().getX(), 1e-6);
}