public void testWeightInChiSquare() {
    // setup with some weights and residuals
    double[] weights = {1.0, 2.0, 3.0};
    double[] residuals = {1.0, 2.0, 3.0};
    AbstractLeastSquares als = new AbstractLeastSquares(weights, residuals, 3) {
        @Override
        public double getChiSquare() {
            return super.getChiSquare(); // use superclass implementation
        }
    };
    // expected chi2 should be sum of (residual/weight)^2
    double expectedChi2 = Math.pow(residuals[0]/weights[0], 2) + Math.pow(residuals[1]/weights[1], 2) + Math.pow(residuals[2]/weights[2], 2);
    double chi2 = als.getChiSquare();
    assertEquals(expectedChi2, chi2, 1e-15); // allow for small floating point errors
    // now check getRMS()
    double rms = als.getRMS();
    assertEquals(Math.sqrt(expectedChi2/als.rows()), rms, 1e-15);
}