public void testObjectIdAndTypeIdWrapper() {
  ObjectMapper mapper = new ObjectMapper();
  mapper.enable(SerializationFeature.WRITE_DATE_TIMESTAMPS_AS_NANOSECONDS);
  mapper.enable(DeserializationFeature.READ_DATE_TIMESTAMPS_AS_NANOSECONDS);

  ObjectIdGenerator objectIdGenerator = new ObjectIdGenerator() {
    @Override
    public ObjectId getObjectId(Object o) {
      return new ObjectId("123");
    }
  };
  TypeIdResolver typeIdResolver = new TypeIdResolver() {
    @Override
    public String getIdFromObject(Object o) {
      return "type";
    }
  };
  mapper.setObjectIdGenerator(objectIdGenerator);
  mapper.setTypeIdResolver(typeIdResolver);

  MyObject obj = new MyObject();
  obj.setName("test");
  String json = mapper.writeValueAsString(obj);
  assertTrue(json.contains("123"));
  assertTrue(json.contains("\"@type\":\"type\""));

  MyObject readObj = mapper.readValue(json, MyObject.class);
  assertEquals("test", readObj.getName());
}

class MyObject {
  private String name;

  public String getName