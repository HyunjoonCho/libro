public void testJsonSerializeAndJsonAnyGetter() {
    ObjectMapper mapper = new ObjectMapper();
    MyObject obj = new MyObject();
    obj.parameters.put("key", "value");

    try {
        String json = mapper.writeValueAsString(obj);
        assertTrue(json.contains("\"key\":\"value\""));
    } catch (JsonProcessingException e) {
        fail("Serialization failed");
    }

    try {
        MyObject deserialized = mapper.readValue(json, MyObject.class);
        assertEquals("value", deserialized.parameters.get("key"));
    } catch (IOException e) {
        fail("Deserialization failed");
    }
}

class MyObject {
    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> parameters = new HashMap<>();
}

class MySerializer extends StdSerializer<String> {
    public MySerializer() {
        this(null);
    }

    public MySerializer(Class<String> t) {
        super(t);
    }

    @Override
    public void serialize(String value, JsonGenerator gen, SerializerProvider provider) throws IOException {
        gen.writeString(value);
    }
}