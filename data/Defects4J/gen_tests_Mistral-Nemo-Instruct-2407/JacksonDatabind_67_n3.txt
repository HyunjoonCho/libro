public void testMapKeyDeserializerModifiersIgnored() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.addMixIn(Enum.class, EnumMixIn.class);

    MyEnum enumValue = Enum.valueOf(MyEnum.class, "my_enum");
    ImmutableMap<String, MyEnum> map = ImmutableMap.of("my_enum", enumValue);

    String json = "{\"my_enum\": \"MY_ENUM\"}";
    try {
        ImmutableMap<String, MyEnum> result = mapper.readValue(json, new TypeReference<ImmutableMap<String, MyEnum>>() {});
        assertEquals(enumValue, result.get("my_enum"));
    } catch (IOException e) {
        fail("Should not throw exception");
    }
}

private static enum MyEnum {
    MY_ENUM
}

private static abstract class EnumMixIn {
    public abstract Enum deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException;
}