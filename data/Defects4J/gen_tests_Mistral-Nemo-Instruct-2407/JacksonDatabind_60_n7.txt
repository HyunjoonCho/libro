public void testJsonValueWithJsonIgnoreAndByteArray() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
    mapper.enableDefaultTyping();

    byte[] apdu = new byte[]{0x01, 0x02, 0x03};
    CommandAPDU command = new CommandAPDU(apdu);

    try {
        String json = mapper.writeValueAsString(command);
        RemoteCall deserialized = mapper.readValue(json, RemoteCall.class);
        assertTrue(deserialized.getArgs()[0][0] instanceof byte[]);
    } catch (JsonMappingException | JsonProcessingException e) {
        fail("Should not throw exception");
    }
}

class CommandAPDU {
    private byte[] apdu;

    @JsonCreator
    public CommandAPDU(@JsonProperty("bytes") byte[] apdu) {
        this.apdu = apdu.clone();
    }

    @JsonValue
    public byte[] getBytes() {
        return apdu.clone();
    }
}

class RemoteCall {
    private Object[] args;

    public Object[] getArgs() {
        return args;
    }

    public void setArgs