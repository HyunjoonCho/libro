public void testAbstractClassSpying() {
    // Example 1
    UserAccount userAccount = spy(new FakeUserAccount());
    userAccount.addEmail("test@example.com");
    assertEquals(List.of("test@example.com"), userAccount.getEmails());

    // Example 2
    AccountService service = spy(new MockAccountService() {
        @Override
        UserAccount getAccount(String id) {
            return new FakeUserAccount();
        }
    });
    AsyncCallback<UserAccount> callback = mock(AsyncCallback.class);
    service.getAccount("id", callback);
    verify(callback).onSuccess(userAccount);

    // Example 3
    AccountRpcService rpcService = spy(new MockAccountRpcService() {
        @Override
        Future<Account> getAccount(String id) {
            return mock(Future.class);
        }
    });
    when(rpcService.getAccount("id")).thenReturn(mock(Future.class));
    rpcService.getAccount(mock(RpcContext.class), "id");
    verify(rpcService).getAccount(any(RpcContext.class), eq("id"));
}

abstract class FakeUserAccount implements UserAccount {
    private final List<String> emails = new ArrayList<>();

    @Override
    public void addEmail