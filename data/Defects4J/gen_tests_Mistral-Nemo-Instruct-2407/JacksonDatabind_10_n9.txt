public void testJsonAnyGetterWithJsonSerialize() {
    ObjectMapper mapper = new ObjectMapper();
    MyBean bean = new MyBean();
    bean.parameters = Collections.singletonMap("key", "value");

    try {
        String json = mapper.writeValueAsString(bean);
        assertFalse(json.contains("parameters"));
    } catch (JsonMappingException e) {
        fail("JsonMappingException should not be thrown");
    } catch (JsonProcessingException e) {
        fail("JsonProcessingException should not be thrown");
    }
}

class MyBean {
    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> parameters;
}

class MySerializer extends StdSerializer<String> {
    public MySerializer() {
        this(null);
    }

    public MySerializer(Class<String> t) {
        super(t);
    }

    @Override
    public void serialize(String value, JsonGenerator gen, SerializerProvider provider) throws IOException {
        gen.writeString(value);
    }
}