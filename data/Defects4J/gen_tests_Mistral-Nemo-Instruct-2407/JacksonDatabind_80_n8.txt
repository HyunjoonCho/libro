public void testExtraneousTypeIdMapping() {
    // Assuming BaseType is an abstract class with a default name and has a concrete subclass SubType with an explicit name
    class BaseType {}
    class SubType extends BaseType {
        public static final String TYPE_ID = "SubType";
    }

    // Assuming getTypeIdMapping() returns a map of type names to type ids
    Map<String, String> mappings =... getTypeIdMapping();

    // Expecting "BaseType" not to be in the map, but it is
    assertFalse(mappings.containsKey("BaseType"));

    // Expecting "SubType" to be in the map
    assertTrue(mappings.containsKey("SubType"));
}