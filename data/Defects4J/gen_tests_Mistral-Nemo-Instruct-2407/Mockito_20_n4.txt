public void testAllowConvenientSpyingOnAbstractClasses() {
    // Example 1
    abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override public void addEmail(String email) {
            emails.add(email);
        }
        @Override List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }
    FakeUserAccount userAccount = spy(new FakeUserAccount());
    userAccount.addEmail("test@example.com");
    assertEquals(List.of("test@example.com"), userAccount.getEmails());

    // Example 2
    abstract class MockAccountService implements AccountService {
        @Override public void getAccount(String id, AsyncCallback<UserAccount> callback) {
            callback.onSuccess(getAccount(id));
        }
        abstract UserAccount getAccount(String id);
    }
    MockAccountService service = spy(new MockAccountService() {
        @Override UserAccount getAccount(String id) {
            return null;
        }
    });
    when(service.getAccount("id")).thenReturn(new UserAccount() {
        @Override public List<String> getEmails() {
            return List.of();
        }
        @Override public void addEmail(String email) {