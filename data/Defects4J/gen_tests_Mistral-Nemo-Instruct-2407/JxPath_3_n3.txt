public void testStackOverflowError() {
    Map<String, Object> map = new HashMap<>();
    map.put("a", null);
    JXPathContext pathContext = JXPathContext.newContext(map);
    pathContext.setFactory(new AbstractFactory() {
        @Override
        public boolean createObject(JXPathContext context, Pointer pointer, Object parent, String name, int index) {
            Map<String, Object> parentMap = (Map<String, Object>) parent;
            if (index > -1) {
                List<Object> list = (List<Object>) parentMap.get(name);
                if (list == null) {
                    list = new ArrayList<>();
                }
                int size = list.size();
                for (int i = size; i <= index; i++) {
                    list.add(i, null);
                }
                parentMap.put(name, list);
            } else {
                parentMap.put(name, new HashMap<>());
            }
            return true;
        }
    });
    pathContext.createPath("a/b[1]/c");
    try {
        pathContext.createPath("a/b[2]/c");
        fail("Expected StackOverflowError");
    } catch (StackOverflowError e) {
        // Expected