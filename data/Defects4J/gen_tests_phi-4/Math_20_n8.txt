public void testCMAESOptimizerBounds() {
    double[][] lowerBounds = {{-5.0, -5.0}};
    double[][] upperBounds = {{5.0, 5.0}};

    CMAESOptimizer optimizer = new CMAESOptimizer(lowerBounds, upperBounds);
    optimizer.setCheckFeasibilityCount(0);

    // Assuming a simple fitness function that does not enforce bounds
    FitnessFunction fitnessFunction = new SimpleFitnessFunction() {
        @Override
        public double evaluate(double[] solution) {
            return solution[0] * solution[0] + solution[1] * solution[1];
        }
    };

    optimizer.optimize(fitnessFunction, 10000);

    double[] bestSolution = optimizer.getBestSolution();
    assertTrue("Best solution should be within bounds", 
               bestSolution[0] >= lowerBounds[0][0] && bestSolution[0] <= upperBounds[0][0] &&
               bestSolution[1] >= lowerBounds[0][1] && bestSolution[1] <= upperBounds[0][1]);
}