public void testUnwantedPOJOSEmbeddedInTree() {
    ObjectMapper mapper = new ObjectMapper();
    ListAttributeSerializer serializer = new ListAttributeSerializer();

    ListAttribute listAttribute = new ListAttribute();
    listAttribute.setItemJsonKey("exampleKey");
    listAttribute.setItems(Arrays.asList("item1", "item2", "item3"));

    // Serialize directly to JSON byte array
    byte[] jsonBytes = mapper.writerWithDefaultPrettyPrinter()
                            .writerFor(ListAttribute.class)
                            .withSerializerModifier(new SimpleModule()
                                .addSerializer(ListAttribute.class, serializer))
                            .writeValueAsBytes(listAttribute);

    // Deserialize to JsonNode
    JsonNode tree = mapper.readTree(jsonBytes);

    // Check that items are not VALUE_EMBEDDED_OBJECT
    JsonNode itemsNode = tree.get("items");
    assertFalse("Items should not be VALUE_EMBEDDED_OBJECT", 
                itemsNode.isValueNode() && itemsNode.asText().contains("VALUE_EMBEDDED_OBJECT"));

    // Verify the contents of the items array
    assertEquals("[\"item1\",\"item2\",\"item3\"]", itemsNode.toString());
}

This test method reproduces the failure by serializing a `ListAttribute` instance and then