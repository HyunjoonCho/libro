import org.junit.Test;
import static org.junit.Assert.fail;

public class PluginCastingTest {

    @Test
    public void testCastingFunctionBeforeCalling() {
        try {
            ((Function<Object, String>) ((new ActiveXObject("ShockwaveFlash.ShockwaveFlash"))['GetVariable'])).apply(null, "$version");
        } catch (Exception e) {
            fail("Casting the function before calling it should not cause an exception.");
        }
    }

    @Test
    public void testDirectFunctionCall() {
        try {
            String result = (String) ((new ActiveXObject("ShockwaveFlash.ShockwaveFlash"))['GetVariable']("$version"));
            // Assuming the expected result is a string representation of the Flash version
            assert result!= null : "The direct function call should return a non-null result.";
        } catch (Exception e) {
            fail("Direct function call should not cause an exception.");
        }
    }

    // Mock ActiveXObject to simulate the behavior for the test
    private class ActiveXObject {
        private String progID;

        public ActiveXObject(String progID) {
            this.progID = progID;
        }

        public Object GetVariable(String variableName) {
            if ("