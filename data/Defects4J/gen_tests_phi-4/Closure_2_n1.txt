import org.junit.Test;
import static org.junit.Assert.fail;

public class CompilerCrashTest {

    @Test(expected = NullPointerException.class)
    public void testInterfaceWithMultipleExtendsCausesCompilerCrash() {
        String inputJavaScript = 
            "/**\n" +
            " * @interface\n" +
            " * @extends {unknown_1}\n" +
            " * @extends {unknown_2}\n" +
            " */\n" +
            "function Foo() {}\n";

        try {
            // Simulate the behavior that causes the compiler to crash
            compile(inputJavaScript);
        } catch (NullPointerException e) {
            // This is the expected exception as per the bug report
            fail("Expected NullPointerException to be thrown");
        }
    }

    private void compile(String jsCode) {
        // Placeholder for the actual compilation logic that triggers the NullPointerException
        // This would be where the compiler logic that causes the crash is invoked
        throw new NullPointerException("Simulated NullPointerException as per bug report");
    }
}

**Note:** The `compile` method is a placeholder to simulate the behavior that causes the NullPointerException. In a real scenario, this would involve invoking the actual compiler logic that processes the JavaScript