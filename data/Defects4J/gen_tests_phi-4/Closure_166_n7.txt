import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class TestAnonymousObjectTypeInference {

    @Test(expected = IllegalArgumentException.class)
    public void testAnonymousObjectTypeInferenceInconsistency() {
        // Assuming a hypothetical logging function that throws an exception when receiving incorrect types
        func3({ "prop": "a" });
    }

    private void func(Object record) {
        // Simulate the behavior of the original JavaScript function
        if (record instanceof String) {
            System.out.println((String) record);
        } else if (record instanceof Map) {
            Map<?,?> map = (Map<?,?>) record;
            System.out.println(map.get("prop"));
        } else {
            throw new IllegalArgumentException("Invalid type");
        }
    }

    private void func3(Object record) {
        // Simulate the behavior of the original JavaScript function with type inconsistency
        if (record instanceof String) {
            System.out.println((String) record);
        } else if (record instanceof Map) {
            Map<?,?> map = (Map<?,?>) record;
            System.out.println(map.get("prop"));
        } else if (!(record instanceof Map)) { // This is where the inconsistency is simulated
            throw new IllegalArgumentException