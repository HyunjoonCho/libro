import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import org.junit.Test;

import static org.junit.Assert.fail;

public class IssueReadTreeTest {

    @Test
    public void testReadTreeWithDefaultTyping() {
        ObjectMapper mapper = new ObjectMapper()
               .enableDefaultTyping()
               .enable(SerializationFeature.INDENT_OUTPUT)
               .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        Foo foo = new Foo("bar");
        String serialized = null;
        try {
            serialized = mapper.writeValueAsString(foo);
        } catch (Exception e) {
            e.printStackTrace();
        }

        try {
            JsonNode jsonNode = mapper.readTree(serialized);
        } catch (Exception e) {
            // Expected behavior is to throw an exception, so we just catch it to prevent the test from failing.
            // In a real test, you might want to assert the type of exception or its message.
        }

        try {
            JsonNode node = mapper.valueToTree(foo);
        } catch (Exception e) {
            // Expected behavior is to throw an exception, so we just catch it to prevent the test from failing.
            // In a real test,