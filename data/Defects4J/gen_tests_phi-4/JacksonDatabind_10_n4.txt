public void testJsonAnyGetterWithJsonSerialize() {
    MyBean bean = new MyBean();
    bean.setParameters(Map.of("key", "value"));

    ObjectMapper mapper = new ObjectMapper();
    String json = mapper.writeValueAsString(bean);

    assertEquals("{\"key\":\"customValue\"}", json);
}

class MyBean {
    private Map<String, String> parameters;

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }

    public void setParameters(Map<String, String> parameters) {
        this.parameters = parameters;
    }
}

class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey(), "customValue");
        }
        gen.writeEndObject();
    }
}