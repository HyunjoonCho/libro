public void testInvalidTypeFunctionAnnotation() {
    // Simulate the environment where the JavaScript file is provided to the compiler
    String javaCommand = "java -jar compiler.jar --js test.js";
    String testJsContent = "/*\n" +
            " * @type function\n" +
            " */\n" +
            "var callback;";

    ProcessBuilder processBuilder = new ProcessBuilder("sh", "-c", javaCommand);
    processBuilder.redirectInput(new ByteArrayInputStream(testJsContent.getBytes(StandardCharsets.UTF_8)));
    Process process = processBuilder.start();

    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getErrorStream()))) {
        String line;
        String expectedWarning = "expected '('";
        boolean foundExpectedWarning = false;

        while ((line = reader.readLine())!= null) {
            if (line.contains(expectedWarning)) {
                foundExpectedWarning = true;
                break;
            }
        }

        // Assert that the expected warning message is not found
        assertFalse("Expected warning message was found. The error message is not cryptic as reported.", foundExpectedWarning);
    } catch (IOException e) {
        fail("Error occurred while reading process output: " + e.getMessage());
    }
}