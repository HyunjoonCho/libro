import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.DeserializationFeature;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;

import java.util.Map;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertThrows;

public class JsonDeserializationTest {

    @Test
    public void testMapDeserializationWithSubtype() {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);

        String json = "{ \"something\": [ { \"id\": \"123e4567-e89b-12d3-a456-426614174000\", \"property\": \"value\" } ] }";

        try {
            objectMapper.readValue(json, MyPojo.class);
            Assertions.fail("Expected deserialization to fail");
        } catch (Exception e) {
            Assertions.assertTrue(e.getMessage().contains("Can not construct instance of MyCustomIdInterface"));
        }
    }

    static class MyPojo {
        @JsonDeserialize(as = MyHashMap.class)
        private Map<UUID, Foo> something;

        public void setSomething(Map<UUID, Foo> incomingValue) {
            this.something = incomingValue;
        }
    }

    static class MyHashMap extends HashMap<UUID, Foo