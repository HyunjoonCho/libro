public void testJsonAnyGetterWithJsonSerialize() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new SimpleModule().addSerializer(MyClass.class, new MySerializer()));

    MyClass instance = new MyClass();
    instance.parameters = new HashMap<>();
    instance.parameters.put("key", "value");

    String json = mapper.writeValueAsString(instance);
    assertEquals("{\"key\":\"value\"}", json);
}

class MyClass {
    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }

    private Map<String, String> parameters;
}

class MySerializer extends JsonSerializer<MyClass> {
    @Override
    public void serialize(MyClass value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.getParameters().entrySet()) {
            gen.writeStringField(entry.getKey(), entry.getValue());
        }
        gen.writeEndObject();
    }
}