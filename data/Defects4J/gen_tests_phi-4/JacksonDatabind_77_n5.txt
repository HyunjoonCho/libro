public void testJacksonDeserializerVulnerability() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);

    SamplePojo pojo = new SamplePojo();
    pojo.setSensitiveData("Sensitive Data");

    // Vulnerable serialization
    String json = mapper.writeValueAsString(pojo);

    // Vulnerable deserialization
    Object deserialized = mapper.readValue(json, Object.class);

    assertTrue(deserialized instanceof SamplePojo);
    SamplePojo result = (SamplePojo) deserialized;
    assertEquals("Sensitive Data", result.getSensitiveData());
}

In this test, the `ObjectMapper` is configured to enable default typing, which is part of the vulnerability. The test checks that sensitive data can be deserialized without specifying the correct type, which should not be possible in a secure setup.