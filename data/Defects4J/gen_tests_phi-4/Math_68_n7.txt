public void testLevenbergMarquardtIgnoringConvergenceChecker() {
    VectorialFunction function = new VectorialFunction() {
        @Override
        public int getDimension() {
            return 1;
        }

        @Override
        public double value(double[] variables) {
            return variables[0] * variables[0] - 4;
        }
    };

    VectorialConvergenceChecker checker = new VectorialConvergenceChecker() {
        @Override
        public boolean hasConverged(VectorialOptimizationData data) {
            return data.getFk().length == 1 && data.getFk()[0] < 1e-10;
        }
    };

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    try {
        optimizer.optimize(1.0, new ArrayDoubleVector(new double[]{10.0}), function, 1.0e-10, 1.0e-10, null, checker);
        fail("Optimizer should not converge with custom checker");
    } catch (Exception e) {
        // Expected to catch exception due to ignoring the convergence checker
    }

    double[] result = optimizer.optimize(1.0