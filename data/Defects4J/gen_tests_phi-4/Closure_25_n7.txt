public void testAnonymousObjectTypeInference() {
    callz(new Object() {
        public String prop1 = "hi";
    });
    
    try {
        new callz(new Object() {
            public String prop1 = "hi";
        });
        fail("Expected a type mismatch error");
    } catch (Exception e) {
        assertEquals("actual parameter 1 of callz does not match formal parameter", 
                     e.getMessage().contains("found : {prop1: string} required: {prop1: string, prop2: (number|undefined)}"));
    }
}

private void callz(Object parry) {
    if (parry instanceof Map) {
        Map<?,?> map = (Map<?,?>) parry;
        if (map.containsKey("prop2") && map.get("prop2") instanceof Number) {
            if (((Number) map.get("prop2")).doubleValue() < 5) {
                System.out.println("alright!");
            }
        }
        System.out.println(map.get("prop1"));
    }
}

private callz(Object parry) {
    if (parry instanceof Map) {
        Map<?,?> map = (Map<?,?>) parry;
        if (map.containsKey("prop2")