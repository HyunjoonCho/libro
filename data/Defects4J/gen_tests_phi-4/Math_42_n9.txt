public void testNegativeValueWithRestrictNonNegative() {
    // Define the function: 1 * x + 1 * y + 0
    RealVector coefficients = new ArrayRealVector(new double[]{1, 1, 0});

    // Define the constraint: 1 * x + 0 * y = 1
    LinearConstraint constraint = new LinearConstraint(new ArrayRealVector(new double[]{1, 0, 0}), Relationship.EQ, 1.0);

    // Create the optimization problem
    UnivariateRealFunction function = new UnivariateRealFunction() {
        @Override
        public double value(double x) {
            double y = 1 - x; // from the constraint 1 * x + 0 * y = 1
            return coefficients.dotProduct(new ArrayRealVector(new double[]{x, y, 0}));
        }
    };

    // Configure the SimplexSolver
    SimplexSolver solver = new SimplexSolver();
    solver.setMaxIterations(100);

    // Solve the problem with restrictToNonnegative flag
    double[] solution = solver.optimize(function, new Constraint[] { constraint }, GoalType.MINIMIZE, true);

    // Check the solution
    assertEquals(