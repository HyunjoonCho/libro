public void testWideBoundsCausingNaN() {
    double lowerBound = -Double.MAX_VALUE;
    double upperBound = Double.MAX_VALUE;
    CMAESOptimizer optimizer = new CMAESOptimizer(lowerBound, upperBound);
    double[] initialParameters = new double[] {0.0}; // Adjust size and initial values as needed
    
    try {
        optimizer.optimize(initialParameters, new FitnessFunction() {
            @Override
            public double evaluate(double[] parameters) {
                // This line should trigger the NaN issue
                return 0.0; // Dummy evaluation to trigger the NaN parameter issue
            }
        });
        fail("Expected exception due to NaN parameters");
    } catch (ArithmeticException e) {
        // Verify that the exception is related to NaN operations
        assertTrue(e.getMessage().contains("NaN"));
    }
}