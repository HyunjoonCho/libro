public void testAnonymousObjectInference() {
    // Simulating the JavaScript behavior in Java using a constructor-like approach
    new Callz(new Object() {
        public String prop1 = "hi";
    });

    // This would be equivalent to calling the function directly
    callz(new Object() {
        public String prop1 = "hi";
    });

    // Define the Callz class to mimic the constructor behavior
    class Callz {
        private String prop1;
        private Number prop2; // Using Number to allow null as undefined equivalent

        public Callz(Object obj) {
            this.prop1 = (String) obj.getClass().getField("prop1").get(obj);
            this.prop2 = obj.getClass().hasField("prop2")? (Number) obj.getClass().getField("prop2").get(obj) : null;
            if (this.prop2!= null && this.prop2.doubleValue() < 5) {
                System.out.println("alright!");
            }
            System.out.println(this.prop1);
        }
    }

    // Define the callz function to mimic the direct call behavior
    public void callz(Object obj) {
        String prop1 = (String) obj.getClass().getField("prop1").