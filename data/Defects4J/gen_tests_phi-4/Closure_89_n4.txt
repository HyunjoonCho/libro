public void testCompilerRemovesFunctionProperties() {
    final Map<String, Function<Void>> map = new HashMap<>();
    
    Function<Void> f1 = () -> { /* perform alert('f1'); */ };
    f1.alwaysCall = true; // Simulating adding a property to a function
    Function<Void> f2 = () -> { /* perform alert('f2'); */ };
    
    map.put("f1", f1);
    map.put("f2", f2);
    
    String key = Math.random() > 0.5? "f1" : "f2";
    Function<Void> function = map.get(key);
    
    if (function!= null && function.alwaysCall) {
        function.apply(null);
    }
    
    // Simulate the expected failure: the property is not recognized after optimization
    if (function == null ||!function.alwaysCall) {
        throw new AssertionError("Function properties should not be removed by the compiler.");
    }
}

// Helper to simulate function properties
interface Function<T> {
    T apply(T t);
    // Simulate a property
    boolean alwaysCall;
}

Note: This Java code simulates the expected behavior and failure of the JavaScript