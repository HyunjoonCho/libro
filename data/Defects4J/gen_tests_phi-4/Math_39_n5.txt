public void testLargeFirstStepWithRungeKutta() {
    double[] y0 = {1.0}; // Initial condition
    double t0 = 0.0;     // Initial time
    double tf = 1e-10;   // Final time (extremely short range)
    
    RungeKuttaIntegrator integrator = new DormandPrince853Integrator(1e-10, 1e-10, 1e-10, 1e-10, 1e-10);
    
    try {
        integrator.integrate(new MyODE(), t0, tf, y0);
        fail("Expected an exception due to the first step size being too large.");
    } catch (Exception e) {
        // Expected exception
    }
}

class MyODE implements FirstOrderDifferentialEquation {
    @Override
    public int getDimension() {
        return 1;
    }

    @Override
    public void computeDerivatives(double t, double[] y, double[] yDot) {
        yDot[0] = -y[0];
    }
}