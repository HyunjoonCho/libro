import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import org.junit.Test;

public class IsFunctionTest {

    @Test
    public void testIsFunction() {
        // Original implementation that fails with closure compiler
        Function<String> originalImplementation = (FunctionToCheck) -> {
            Object getType = {}; // Just an object
            return functionToCheck -> getType.toString().equals("[object Function]");
        };

        assertTrue(originalImplementation.apply(() -> {}));
        assertFalse(originalImplementation.apply("not a function"));

        // Fixed implementation that works with closure compiler
        Function<String> fixedImplementation = (FunctionToCheck) -> {
            Object getType = new Object[]{};
            return functionToCheck -> getType.toString().equals("[object Function]");
        };

        assertTrue(fixedImplementation.apply(() -> {}));
        assertFalse(fixedImplementation.apply("not a function"));
    }

    @FunctionalInterface
    interface FunctionToCheck {
        boolean apply(Object functionToCheck);
    }
}

Note: This test simulates the behavior change by using a Java functional interface to mimic the behavior of JavaScript functions. The test checks both the original and fixed implementations to ensure the correct behavior.