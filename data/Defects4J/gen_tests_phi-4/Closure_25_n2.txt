public void testAnonymousObjectTypeInference() {
    // Simulating the JavaScript behavior in Java using a similar setup
    interface Parry {
        String prop1();
        Object prop2();
    }

    class Callz {
        Callz(Parry parry) {
            if (parry.prop2()!= null && (Integer) parry.prop2() < 5) {
                System.out.println("alright!");
            }
            System.out.println(parry.prop1());
        }
    }

    // This should pass as it matches the expected interface
    Callz callz1 = new Callz(implementation -> {
        implementation.prop1 = "hi";
        implementation.prop2 = null;
        return implementation;
    });

    // This should fail as it does not match the expected interface
    try {
        new Callz(implementation -> {
            implementation.prop1 = "hi";
            // Missing prop2, should simulate the error
            return implementation;
        });
        fail("Expected a mismatch error due to missing prop2");
    } catch (Exception e) {
        // Expected exception due to missing prop2
    }
}