public void testInheritDocDoesNotPlayWellWithInterfaces() {
    // Simulate interface and class definitions with Javadoc
    interface A {
        void foo(String a); // Javadoc: @param {string} a
    }

    class B implements A {
        @Override
        public void foo(String a) {
            // Simulate the error behavior when trying to use a method on the parameter
            // In JavaScript, this would cause an error due to type inference issues
            // In Java, this should not cause an error as types are known at compile time
            if (a.length() == 0) {
                throw new UnsupportedOperationException("Simulated error: could not determine the type of this expression");
            }
        }
    }

    // Test to reproduce the failure behavior
    B b = new B();
    try {
        b.foo(""); // This should simulate the error behavior
        fail("Expected UnsupportedOperationException");
    } catch (UnsupportedOperationException e) {
        // Expected exception due to simulated error
    }
}

This test method simulates the behavior described in the bug report by attempting to use a method (`substring`) on a parameter of a known type (`String`). In Java, this should not cause an