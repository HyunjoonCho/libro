public void testOverzealousOptimization() {
    final ThreadLocal<Math> math = ThreadLocal.withInitial(Math::new);
    final ThreadLocal<Double> uid = ThreadLocal.withInitial(math::random);
    
    reset();
    
    double _uid = uid.get();
    
    doStuff();
    
    if (_uid!= uid.get()) {
        throw new AssertionError("reset() was called");
    }
}

private void reset() {
    uid.set(Math.random());
}

private void doStuff() {
    reset();
    double _uid = uid.get();

    if (uid.get() < 0.5) {
        doStuff();
    }

    if (_uid!= uid.get()) {
        throw new AssertionError("reset() was called");
    }
}