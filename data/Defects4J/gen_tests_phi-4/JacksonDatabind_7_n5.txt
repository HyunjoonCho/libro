import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.util.TokenBuffer;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

class Value {
    private final int a;
    private final Object b;

    public Value(int a, Object b) {
        this.a = a;
        this.b = b;
    }

    public static Value from(TokenBuffer buffer) {
        JsonParser parser = buffer.asParser();
        if (parser.nextToken()!= JsonToken.START_OBJECT) {
            throw new IllegalStateException("Expected start of object");
        }
        
        int a = 0;
        Object b = null;
        while (parser.nextToken()!= JsonToken.END_OBJECT) {
            String fieldName = parser.getCurrentName();
            parser.nextToken();
            if ("a".equals(fieldName)) {
                a = parser.getIntValue();
            } else if ("b".equals(fieldName)) {
                b = parser.getValue();
            }
        }
        return new