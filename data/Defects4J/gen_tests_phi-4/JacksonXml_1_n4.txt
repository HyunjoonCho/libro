public void testNestedNonWrappedListDeserialization() {
    String jsonInput = "{ \"records\": [ { \"fields\": [] }, { \"fields\": [ { \"name\": \"field1\", \"value\": \"value1\" } ] } ] }";

    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);

    try {
        Definition definition = objectMapper.readValue(jsonInput, Definition.class);
        assertEquals(2, definition.getRecords().size());
        assertEquals(0, definition.getRecords().get(0).getFields().size());
        assertEquals(1, definition.getRecords().get(1).getFields().size());
        assertEquals("field1", definition.getRecords().get(1).getFields().get(0).getName());
        assertEquals("value1", definition.getRecords().get(1).getFields().get(0).getValue());
    } catch (Exception e) {
        fail("Deserialization failed: " + e.getMessage());
    }
}

// Placeholder classes to match the described structure
class Definition {
    private List<Record> records;

    public List<Record> getRecords() {
        return records;
    }

    public void setRecords(List<Record> records)