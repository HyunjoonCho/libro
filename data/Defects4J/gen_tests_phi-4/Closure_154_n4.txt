import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class InterfaceDataMemberTest {

    public interface I {
        String foobar();
    }

    public static class C implements I {
        private String foobar = "2";

        @Override
        public String foobar() {
            return foobar;
        }
    }

    @Test
    public void testInterfaceDataMember() {
        I test = new C();
        assertEquals("2", test.foobar());
    }
}

### Explanation:

- **Interface `I`:** Acts as a contract with a method `foobar()`.
- **Class `C`:** Implements `I` and provides an implementation for `foobar()`.
- **Test Method `testInterfaceDataMember()`:** Creates an instance of `C`, assigns it to an `I` type, and checks if `foobar()` returns the expected value. This simulates the behavior described in the bug