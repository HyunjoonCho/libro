import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.linear.SingularValueDecomposition;
import java.util.Arrays;

public void testIssueNanSingularValue() {
    double[][] Alist = {
        {1.0, 2.0, 3.0},
        {2.0, 3.0, 4.0},
        {3.0, 5.0, 7.0}
    };

    Array2DRowRealMatrix A = new Array2DRowRealMatrix(Alist);
    SingularValueDecomposition svd = new SingularValueDecomposition(A);
    double[] singularValues = svd.getSingularValues();

    // Check for NaN in the singular values
    assertTrue(Arrays.stream(singularValues).noneMatch(Double::isNaN));
    // Check if the last singular value is close to 0
    assertEquals(0.0, singularValues[2], 1e-10);
}