public void testJsonIncludeNonDefault() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping();
    
    String json = mapper.writeValueAsString(new TestObject("value"));
    assertEquals("{\"nonNullField\":\"value\"}", json);
    
    json = mapper.writeValueAsString(new TestObject());
    assertEquals("{\"nonNullField\":null}", json);
}

@JsonInclude(JsonInclude.Include.NON_DEFAULT)
static class TestObject {
    private final String nonNullField = "value";
    
    private String nullField;
    
    public TestObject() {}
    
    public TestObject(String nullField) {
        this.nullField = nullField;
    }
}

This test checks if the `@JsonInclude(JsonInclude.Include.NON_DEFAULT)` annotation is correctly suppressing the `nullField` from being serialized when it is `null`. The expected behavior is that the `nullField` should not appear in the JSON output when it has a default `null` value.