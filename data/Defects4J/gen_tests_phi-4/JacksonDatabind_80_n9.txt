public void testExtraneousTypeIdMapping() {
    // Assume TypeResolver is the class responsible for type resolution
    TypeResolver resolver = new TypeResolver();
    
    // Assume BaseType is a concrete class with an explicit name
    Class<BaseType> baseType = BaseType.class;
    
    // Assume resolveTypeIds is the method that returns a mapping of type ids
    Map<String, Class<?>> typeMap = resolver.resolveTypeIds(baseType);
    
    // Check if base type itself is included in the map
    assertTrue("Base type should not be included automatically",!typeMap.containsKey(baseType.getName()));
    
    // Manually add base type to ensure it's not automatically added
    resolver.addTypeMapping(baseType.getName(), baseType);
    
    // Re-check the map
    assertTrue("Base type should be included after manual addition", typeMap.containsKey(baseType.getName()));
}