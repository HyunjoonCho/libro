public void testCMAESOptimizerWithWideBounds() {
    double[] lowerBounds = {-Double.MAX_VALUE};
    double[] upperBounds = {Double.MAX_VALUE};
    CMAESOptimizer optimizer = new CMAESOptimizer(1, lowerBounds, upperBounds);
    optimizer.optimize(fitnessFunction);
    
    // Capture the parameters passed to the fitness function
    double[] parameters = new double[1];
    boolean nanDetected = false;

    fitnessFunction.setParameters(parameters, (p) -> {
        if (Double.isNaN(p[0])) {
            nanDetected = true;
        }
    });

    assertTrue("Parameters should include NaN", nanDetected);
}