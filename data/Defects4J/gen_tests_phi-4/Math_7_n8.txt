public void testEventStateNotUpdated() {
    ODESolver solver = new ODESolver();
    EventHandler eventHandler1 = new EventHandler() {
        @Override
        public void eventOccurred() {
            solver.resetState();
        }
    };

    EventHandler eventHandler2 = new EventHandler() {
        @Override
        public void eventOccurred() {
            // This handler does not reset state
        }
    };

    solver.addEventHandler(eventHandler1);
    solver.addEventHandler(eventHandler2);

    solver.integrateStep();

    assertEquals("Expected state reset for eventHandler1", // Expected state
                 solver.getState(), // Actual state
                 expectedStateAfterReset); // Define expected state

    assertEquals("Expected eventHandler2 to use correct state", 
                 eventHandler2.getCurrentState(), // Actual state used by eventHandler2
                 correctStateForHandler2); // Define correct state
}

Note: You will need to define `expectedStateAfterReset` and `correctStateForHandler2` based on the expected behavior of your ODE solver and event handlers. The `ODESolver`, `EventHandler`, and methods like `resetState`, `integrateStep`, `addEventHandler`, `getState`, and `getCurrentState`