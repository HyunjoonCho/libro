public void testLevenbergMarquardtOptimizerIgnoresVectorialConvergenceChecker() {
    RealVector initialGuess = new ArrayRealVector(new double[]{0.1, 0.1});
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialConvergenceChecker<VectorialLeastSquaresFunction> checker = 
        new VectorialConvergenceChecker<VectorialLeastSquaresFunction>() {
            @Override
            public boolean check(IterativeOptimizer optimizer,
                                 VectorialLeastSquaresFunction objectiveFunction,
                                 VectorialPointValuePair currentBest,
                                 VectorialPointValuePair previousBest) {
                return true; // Custom stopping criteria
            }
        };

    optimizer.setConvergenceChecker(checker);
    VectorialLeastSquaresFunction function = new VectorialLeastSquaresFunction() {
        @Override
        public int getDimension() {
            return 2;
        }

        @Override
        public RealVector value(RealVector variables) {
            return new ArrayRealVector(new double[]{0.0, 0.0});
        }

        @Override
        public RealMatrix jacobian(RealVector variables) {
            return new Array2DRow