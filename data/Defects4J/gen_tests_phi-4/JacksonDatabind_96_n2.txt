public void testPropertyNamingStrategyIssue() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.setPropertyNamingStrategy(PropertyNamingStrategy.LOWER_CAMEL_CASE);
    
    try {
        mapper.readValue("{\"dateOfCreation\": \"2023-10-01\"}", DateHolder.class);
        fail("Expected JsonMappingException due to incorrect property naming");
    } catch (JsonMappingException e) {
        assertTrue(e.getMessage().contains("could not instantiate"));
    }
}

// Assuming DateHolder is a class with a constructor annotated to map "dateOfCreation"
// and a field or property named "dateOfCreation" that uses the naming strategy.
class DateHolder {
    private final LocalDate dateOfCreation;

    @JsonCreator
    public DateHolder(@JsonProperty("dateOfCreation") LocalDate dateOfCreation) {
        this.dateOfCreation = dateOfCreation;
    }

    public LocalDate getDateOfCreation() {
        return dateOfCreation;
    }
}