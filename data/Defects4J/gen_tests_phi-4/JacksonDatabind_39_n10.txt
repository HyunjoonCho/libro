public void testJacksonDeserializationFailure() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
            DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    // Test 1: item2 should be read, but not due to invalid item
    String json1 = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord call1 = objectMapper.readValue(json1, CallRecord.class);
    assertEquals("CallRecord [version=0.0, application=123]", call1.toString());

    // Test 2: item is invalid, application should still be read
    String json2 = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}}";
    CallRecord call2 = objectMapper.readValue(json2, CallRecord.class);
    assertEquals("CallRecord [version=0.0, application=123]", call2.toString());

    // Test 3: item invalid and before application, application should be read
    String json3 = "{\"item\":{\"