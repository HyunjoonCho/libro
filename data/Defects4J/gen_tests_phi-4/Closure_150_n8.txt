public void testTypeCheckerMissesAnnotations() {
    // Define ns.a within an anonymous function
    var ns = new Object();
    java.util.function.Function<Object, Object> defineFunction = () -> {
        ns.a = (Function<Object, Object>) (b -> {
            // Simulate type checking
            if (b instanceof String) {
                return b;
            } else if (b == null) {
                throw new IllegalArgumentException("Expected a string or null");
            } else {
                throw new IllegalArgumentException("Expected a string");
            }
        });
    };
    defineFunction.apply(null);

    // Call ns.a with no parameters and with incorrect type
    try {
        ns.a.apply(null);
        fail("Expected an IllegalArgumentException for no parameters");
    } catch (IllegalArgumentException e) {
        assertEquals("Expected a string or null", e.getMessage());
    }

    try {
        ns.a.apply(123);
    } catch (IllegalArgumentException e) {
        assertEquals("Expected a string", e.getMessage());
    }
}