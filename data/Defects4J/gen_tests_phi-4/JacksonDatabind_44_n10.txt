public void testPolymorphicTypeResolution() {
    ObjectMapper mapper = new ObjectMapper();

    // Define base class and subclass
    class Base {
        public String baseProp;
    }

    class Sub extends Base {
        public String subProp;
    }

    // Register module with default implementation
    SimpleModule module = new SimpleModule();
    module.setDefaultImpl(Sub.class, Sub.class);
    mapper.registerModule(module);

    // JSON with subProp and baseProp
    String json = "{\"@type\":\"Sub\",\"baseProp\":\"baseValue\",\"subProp\":\"subValue\"}";

    // Deserialize JSON
    Base base = mapper.readValue(json, Base.class);

    // Assertions to reproduce the issue
    assertNotNull(base.baseProp);
    assertNull(base.subProp); // This should not be null if properties are properly resolved

    // The expected behavior is that subProp should not be null
    // if subProp is still null, it indicates properties from super-types are not properly resolved
}