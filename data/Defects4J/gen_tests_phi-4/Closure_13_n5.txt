public void testTrueFalseReplacement() {
    boolean anyExpression = true;
    Object externalRef = new Object() {
        public Object invoke() {
            return null;
        }
    };

    Object result = someFunction(anyExpression, externalRef);

    // Assuming someFunction is implemented and returns an object with method1 and method2
    Boolean method1Result = (Boolean) ((Function) result).invoke("method1");
    Boolean method2Result = (Boolean) ((Function) result).invoke("method2");

    assertTrue(method1Result.equals(true));
    assertTrue(method2Result.equals(false));
}

private Object someFunction(boolean anyExpression, Object externalRef) {
    Function fn1 = null;
    Function fn2;

    if (anyExpression) {
        fn2 = (Function) externalRef;
        fn1 = content -> fn2.invoke();
    }

    return new Object() {
        public Boolean method1() {
            if (fn1!= null) fn1.invoke();
            return true;
        }

        public Boolean method2() {
            return false;
        }
    };
}

@FunctionalInterface
interface Function {
    Object invoke();
}