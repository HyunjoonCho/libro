public void testWriting7zEmptyEntries() {
    File tempDir = createTempDirectoryWithFiles(8, (file, index) -> {
        if (index == 7) {
            // Leave the last file empty
            return false;
        }
        return true; // Other files have content
    });

    File archive = new File(tempDir.getParent(), "archive.7z");
    ZipArchiver archiver = new ZipArchiver(archive);

    try {
        archiver.addDirectory(tempDir);
        archiver.createArchive();
    } catch (IOException e) {
        fail("Expected to create archive without IOException");
    }

    try {
        SevenZipArchiver sevenZipArchiver = new SevenZipArchiver(archive);
        sevenZipArchiver.extractArchive(new File(tempDir.getParent(), "extracted"));
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Cannot open file 'archive.7z' as archive"));
    } finally {
        deleteDirectory(tempDir);
        archive.delete();
    }
}

private File createTempDirectoryWithFiles(int numberOfFiles, Predicate<File, Integer> fileContentCondition) throws IOException {
    File tempDir = Files.createTempDirectory("testDir").toFile();