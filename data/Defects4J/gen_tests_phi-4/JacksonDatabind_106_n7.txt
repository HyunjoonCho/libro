public void testTreeTraversingParserIntBounds() {
    ObjectMapper mapper = new ObjectMapper();

    // Test case where TreeTraversingParser does not throw an exception for overflow
    JsonNode tree = mapper.readTree("{\"x\": 1e10}");
    IntClass resultFromTree = mapper.readerFor(IntClass.class).readValue(tree);
    assertEquals(-2147483647, resultFromTree.x);

    // Test case where reading from string throws an exception for overflow
    Exception exception = assertThrows(JsonMappingException.class, () -> {
        mapper.readerFor(IntClass.class).readValue("{\"x\": 1e10}");
    });
    assertTrue(exception.getMessage().contains("overflow"));

    // Test case for non-integral value "0.1" being converted to 0
    tree = mapper.readTree("{\"x\": 0.1}");
    resultFromTree = mapper.readerFor(IntClass.class).readValue(tree);
    assertEquals(0, resultFromTree.x);

    // Test case where reading "0.1" from string throws an exception
    exception = assertThrows(InvalidFormatException.class, () -> {
        mapper.readerFor(IntClass.class).readValue("{\"x\": \"0.1\"");
    });
    assertTrue