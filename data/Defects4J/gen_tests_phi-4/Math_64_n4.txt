public void testLevenbergMarquardtInconsistency() {
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    optimizer.setFunction(new MockFunction());

    VectorialPointValuePair result = optimizer.doOptimize(new InitialGuess(), new LevenbergMarquardtOptimizer.ConvergenceChecker());

    double expectedCost = calculateExpectedCost(result);
    double actualCost = result.getCost();
    
    assertEquals(expectedCost, actualCost, 1e-10);

    double expectedResidualsNorm = calculateExpectedResidualsNorm(result);
    double actualResidualsNorm = result.getResiduals().norm();
    
    assertEquals(expectedResidualsNorm, actualResidualsNorm, 1e-10);
}

private double calculateExpectedCost(VectorialPointValuePair result) {
    // Calculate the expected cost based on the result's point and function
    return...;
}

private double calculateExpectedResidualsNorm(VectorialPointValuePair result) {
    // Calculate the expected residuals norm based on the result's point and function
    return...;
}

// MockFunction and InitialGuess would be defined elsewhere to replicate the conditions of the reported issue