public void testMissingPropertiesInRecursiveType() throws Exception {
    ObjectMapper mapper = new ObjectMapper();

    // Register the types with the mapper
    SimpleModule module = new SimpleModule();
    module.addDeserializer(Base.class, new BaseDeserializer());
    mapper.registerModule(module);

    // Serialize the Sub object
    Sub sub = new Sub();
    String result = mapper.writeValueAsString(sub);

    // Check if the serialized output is missing the base property
    assertEquals("{\"base\":1,\"sub\":2}", result);
}

// Custom deserializer to handle Base properties
static class BaseDeserializer extends JsonDeserializer<Base> {
    @Override
    public Base deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        Base base = new Base();
        JsonNode node = p.getCodec().readTree(p);
        if (node.has("base")) {
            base.base = node.get("base").asInt();
        }
        return base;
    }
}

// Assuming Base and Sub classes are defined as follows
class Base implements IFace<Sub> {
    @JsonProperty
    int base = 1;
}

class Sub {
    @JsonProperty
    int sub = 2;
}

interface IFace<T> {}