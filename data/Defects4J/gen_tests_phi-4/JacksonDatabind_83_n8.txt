import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.deser.DeserializationProblemHandler;
import org.junit.Test;

import java.io.IOException;
import java.util.UUID;

import static org.junit.Assert.fail;

public class UUIDDeserializerTest {

    @Test
    public void testFromDeserializerIgnoresProblemHandler() throws IOException {
        ObjectMapper mapper = new ObjectMapper().addHandler(new DeserializationProblemHandler() {
            @Override
            public Object handleWeirdStringValue(final DeserializationContext ctxt, final Class<?> targetType, final String valueToConvert, final String failureMsg) throws IOException {
                // Returning a dummy UUID to simulate successful handling
                return UUID.fromString("00000000-0000-0000-0000-000000000000");
            }
        });

        try {
            mapper.readValue("{\"id\" : \"I am not a UUID\"}", IdBean.class);
            fail("Expected an InvalidFormatException to be thrown.");
        } catch (Exception e) {
            // Check that the exception is indeed an InvalidFormatException
            if (!(e.getCause() instanceof com.fasterxml.jackson.databind.exc.InvalidFormatException)) {
                throw e;
            }
        }
    }

    public static class IdBean {