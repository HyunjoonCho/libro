public void testBrentOptimizerBestPoint() {
    BrentOptimizer optimizer = new BrentOptimizer();
    // Assuming a hypothetical function to minimize
    Function<Double, Double> function = x -> (x - 2) * (x - 2) + 1;
    
    // Set bounds for the optimizer
    optimizer.setRange(0.0, 4.0);
    
    // Perform optimization
    optimizer.minimize(function);
    
    // Retrieve the best point and value
    double bestPoint = optimizer.getMinimum();
    double bestValue = function.apply(bestPoint);
    
    // Check if the best point is indeed the global minimum
    assertNotEquals(2.0, bestPoint, 1e-6); // The optimizer should find close to x = 2
    
    // Check if the last evaluated point might be worse
    double secondBestPoint = optimizer.getSecondBestPoint();
    double secondBestValue = function.apply(secondBestPoint);
    
    assertTrue(secondBestValue < bestValue || Math.abs(bestValue - secondBestValue) < 1e-6);
}