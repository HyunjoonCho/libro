public void testRecordTypeInvalidPropertyNotReported() {
    // Simulate the environment and logic described in the bug report
    try {
        // Define the function to create a class with prototype methods
        Function<Map<String, Function>> makeClass = (protoMethods) -> {
            Function<Object[]> clazz = args -> {
                initialize.apply(args);
            };

            protoMethods.forEach((key, method) -> {
                clazz.getClass().getDeclaredMethod(key, Object[].class).setAccessible(true);
                clazz.getClass().getDeclaredMethod(key, Object[].class).setBody(method);
            });

            return clazz;
        };

        // Define the Person class using the makeClass function
        Function<Map<String, Function>> createPerson = makeClass(Map.of(
            "initialize", args -> {
                // @type {string} this.name_ = options.thisPropDoesNotExist;
                String name_ = (String) ((Map<String, Object>) args[0]).get("thisPropDoesNotExist");
            },
            "say", args -> {
                System.out.println("Expected error: Property 'thisPropDoesNotExist' does not exist");
            }
        ));

        // Instantiate a Person object with invalid property
        Function<Object[]> Person = createPerson