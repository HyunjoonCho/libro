import static org.junit.jupiter.api.Assertions.assertThrows;

import org.junit.jupiter.api.Test;

public class FunctionTest {

    public record FuncResult(
            Object prop1,
            String prop2,
            String prop3) {}

    public FuncResult func(boolean a, boolean b) {
        FuncResult results;
        if (a) {
            results = new FuncResult(new Object() {{ put("a", 3); }}, null, null);
        }
        if (b) {
            results = results!= null? results : new FuncResult(null, "prop2", null);
        } else {
            results = results!= null? results : new FuncResult(null, null, "prop3");
        }
        return results;
    }

    @Test
    public void testAssignmentInConditionalCausesTypeError() {
        // Test case where a is true and b is false
        assertThrows(
            IllegalStateException.class,
            () -> func(true, false) // This should trigger the type mismatch error
        );
    }
}

Note: Since Java does not directly support the same issue as JavaScript with type mismatches in record return types, the test uses `IllegalStateException` to simulate a type mismatch error. The scenario is adapted to reflect