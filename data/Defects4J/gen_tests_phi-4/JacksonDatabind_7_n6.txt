public void testTokenBufferDelegateDeserialization() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    String json = "{\"a\":1, \"b\":null}";
    
    Value value = mapper.readValue(json, Value.class);
    
    // Assuming Value has a method to expose the internal TokenBuffer
    TokenBuffer buffer = value.getBuffer();
    
    JsonToken currentToken = buffer.readToken();
    assertEquals(JsonToken.START_OBJECT, currentToken);
    
    JsonToken fieldToken = buffer.readToken();
    assertEquals(JsonToken.FIELD_NAME, fieldToken);
    
    JsonToken valueToken = buffer.readToken();
    assertEquals(JsonToken.VALUE_NUMBER_INT, valueToken);
    
    fieldToken = buffer.readToken();
    assertEquals(JsonToken.FIELD_NAME, fieldToken);
    
    valueToken = buffer.readToken();
    assertEquals(JsonToken.VALUE_NULL, valueToken);
    
    JsonToken endToken = buffer.readToken();
    assertEquals(JsonToken.END_OBJECT, endToken);
}

Note: This test assumes that the `Value` class has a method `getBuffer()` to retrieve the `TokenBuffer` for inspection. You may need to adjust the test based on the actual implementation details of `Value`.