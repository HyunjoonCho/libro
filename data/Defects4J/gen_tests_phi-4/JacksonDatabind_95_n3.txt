public void testConstructFromCanonicalWithUnparameterizedGeneric() {
    String returnType = "java.util.List";
    try {
        objectMapper.getTypeFactory().constructFromCanonical(returnType);
        fail("Expected NullPointerException");
    } catch (NullPointerException e) {
        // Expected exception
    }
}

### Workaround Example

To handle both cases (parameterized and unparameterized), you can use a conditional check:

String returnType = "java.util.List";
if (!returnType.contains("<")) {
    returnType += "<java.lang.Object>";
}
Type constructedType = objectMapper.getTypeFactory().constructFromCanonical(returnType);

This approach appends a default parameter type if none is specified, ensuring compatibility across versions.