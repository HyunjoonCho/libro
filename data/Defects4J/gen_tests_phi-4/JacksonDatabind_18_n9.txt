public void testBasicErrorRecovery() {
    ObjectMapper mapper = new ObjectMapper();
    String json = "{\"validProperty\": \"validValue\"}invalidCharacter";

    DeserializationContext context = DeserializationContext.builder(mapper.getDeserializationConfig())
           .withParsedType(HashMap.class)
           .build();

    ObjectReader reader = mapper.readerFor(Map.class);
    MappingIterator<Map.Entry<Object, Object>> iterator = reader.readValues(json).readContext(context).readMapLikeObject();

    Map.Entry<Object, Object> firstEntry = iterator.next();
    assertNotNull(firstEntry.getKey());
    assertEquals("validValue", firstEntry.getValue());

    boolean moreEntries = iterator.hasNext();
    assertFalse(moreEntries);

    // Simulate the error recovery by attempting to continue parsing after an error
    try {
        iterator.next();
    } catch (JsonProcessingException e) {
        // Expected outcome: the iterator should not advance further after the error
    }
}