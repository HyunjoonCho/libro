public void testSwitchedOrder() {
    var customData = Map.of("key", "value");

    String result = testRemoveKey("key");
    boolean hasKey = customData.containsKey("key");

    assertEquals("value", result);
    assertTrue(hasKey);
}

private String testRemoveKey(String key) {
    Map<String, String> dataSlot = customData;
    String retval = dataSlot!= null && dataSlot.containsKey(key)? dataSlot.get(key) : null;
    boolean hadKey = dataSlot!= null && dataSlot.containsKey(key);

    if (dataSlot!= null) {
        dataSlot.remove(key);
    }

    return hadKey? retval : null;
}

To adapt this to Java, I've used a `Map` instead of an object with properties, as Java doesn't support object properties like JavaScript. The test checks if the key is still present after deletion, which should be true if the order is incorrect.