public void testFakeUserAccountWithTrivialLogic() {
    // Assuming a FakeUserAccount class is created as proposed
    FakeUserAccount fakeUserAccount = new FakeUserAccount() {}; // Instantiating the abstract class

    fakeUserAccount.addEmail("test@example.com");
    fakeUserAccount.addEmail("another@example.com");

    List<String> emails = fakeUserAccount.getEmails();
    assertEquals(2, emails.size());
    assertTrue(emails.contains("test@example.com"));
    assertTrue(emails.contains("another@example.com"));
}

### Test Method for Example 2: Callback-style API

public void testMockAccountServiceWithCallback() {
    // Assuming a MockAccountService class is created as proposed
    UserAccount mockAccount = Mockito.mock(UserAccount.class);
    MockAccountService mockService = new MockAccountService() {
        @Override
        UserAccount getAccount(String id