public void testNumberShapePrecedence() {
    // Assuming a method `getFormattedValue` that formats a number based on shape and locale
    // Before the fix, it would respect locale even if shape is NUMBER

    // Set up a scenario where shape is NUMBER, but locale is provided
    NumberShapeConfig config = new NumberShapeConfig(Shape.NUMBER, Locale.US);

    // Before the fix, this would potentially use locale formatting
    String resultBeforeFix = getFormattedValue(1234.56, config);

    // Expected result should be a plain number representation
    assertEquals("1234.56", resultBeforeFix);

    // After the fix, it should respect the NUMBER shape explicitly
    String resultAfterFix = getFormattedValue(1234.56, config);

    // The result should be exactly as expected without locale formatting
    assertEquals("1234.56", resultAfterFix);
}

This test assumes the existence of a method `getFormattedValue` and a configuration class `NumberShapeConfig`. The test checks that the output respects the `NUMBER` shape explicitly, ignoring any locale settings.