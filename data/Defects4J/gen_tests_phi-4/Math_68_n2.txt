public void testLevenbergMarquardtOptimizerIgnoresConvergenceChecker() {
    VectorialConvergenceChecker<Point2D> customChecker = new VectorialConvergenceChecker<Point2D>() {
        @Override
        public boolean converged(List<Point2D> previousPoints, List<Point2D> currentPoints) {
            return currentPoints.size() < previousPoints.size();
        }
    };

    LevenbergMarquardtOptimizer<Point2D> optimizer = new LevenbergMarquardtOptimizer<>(customChecker);
    // Assuming there's a method to set up the problem and some hypothetical input data
    Dataset dataset = createSampleDataset();
    Point2D[] initialValues = new Point2D[]{new Point2D(0, 0)};
    optimizer.iterate(createProblem(dataset), initialValues);

    // Assuming some method to retrieve the convergence checker actually used
    VectorialConvergenceChecker<Point2D> usedChecker = optimizer.getConvergenceChecker();
    
    // Check if the default convergence checker is used instead of the custom one
    assertTrue(usedChecker instanceof DefaultVectorialConvergenceChecker);
}