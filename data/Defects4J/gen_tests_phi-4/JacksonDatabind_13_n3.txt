public void testDeserializationOfNullObjectId() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES, false);

    String json = "{\"id\": null, \"name\": \"Test Object\"}";

    try {
        MyObject obj = mapper.readValue(json, MyObject.class);
        assertNull(obj.getId());
    } catch (JsonProcessingException e) {
        fail("Deserialization should not throw an exception when 'id' is null.");
    }
}

// Assuming a simple POJO like this
class MyObject {
    private Integer id;
    private String name;

    // Getters and setters
    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }
}

This test method checks if the deserialization process can handle a JSON object with a `null` `id` without throwing an exception. The `DeserializationFeature.FAIL_ON_NULL_FOR_PRIMITIVES` is configured to `false` to allow `null` values for primitive types.