public void testClosureCompilerIssue() {
    Function<Object, Boolean> isFunction = createIsFunction();
    assertTrue(isFunction.apply(() -> {})); // Should return true for a function
    assertFalse(isFunction.apply(42)); // Should return false for a non-function
}

private Function<Object, Boolean> createIsFunction() {
    Object getType = new Object[]{}; // Using an array to avoid closure compiler bug
    return functionToCheck -> functionToCheck!= null && getType.toString().equals(Function.class.toString());
}