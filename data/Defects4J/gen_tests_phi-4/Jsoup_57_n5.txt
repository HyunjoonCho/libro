public void testRemoveIgnoreCaseConcurrentModificationException() {
    LinkedHashMultimap<String, String> attributes = LinkedHashMultimap.create();
    attributes.put("abc", "attr1");
    attributes.put("abc", "attr2");

    try {
        attributes.asMap().values().stream()
           .filter(attr -> attr.contains("attr1"))
           .forEach(Attribute::removeAttr);
        fail("Expected ConcurrentModificationException");
    } catch (ConcurrentModificationException e) {
        // Expected exception
    }

    // Correct approach using iterator
    for (Iterator<Map.Entry<String, String>> iter = attributes.asMap().values().iterator(); iter.hasNext();) {
        Map.Entry<String, String> entry = iter.next();
        if (entry.getValue().contains("attr1")) {
            iter.remove();
        }
    }
    assertEquals(1, attributes.asMap().values().size());
}