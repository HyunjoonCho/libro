public void testNonEmptyExclusion() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new AfterburnerModule());

    // Assuming we have a class with a non-empty annotation that should exclude null or empty fields
    class TestClass {
        @JsonProperty("intField")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private Integer intField;

        @JsonProperty("stringField")
        @JsonInclude(JsonInclude.Include.NON_EMPTY)
        private String stringField;

        public TestClass(Integer intField, String stringField) {
            this.intField = intField;
            this.stringField = stringField;
        }
    }

    TestClass testInstance = new TestClass(null, "");
    String json = mapper.writeValueAsString(testInstance);

    // Expected: "{}" because both fields are either null or empty and should be excluded
    assertEquals("{}", json);

    // Test with non-empty values
    TestClass testInstance2 = new TestClass(42, "not empty");
    String json2 = mapper.writeValueAsString(testInstance2);

    // Expected: {"intField":42,"stringField":"not empty"}
    assertEquals("{\"intField\":42,\"stringField\":\"not empty\"}", json2);
}