public void testClosureCompilerIssue() {
    // Define the original problematic implementation
    boolean isFunctionOriginal = isFunction(() -> true);
    // Define the fixed implementation using an array
    boolean isFunctionFixed = isFunctionWithArray(() -> true);
    
    // Assert that the original implementation fails
    assertFalse(isFunctionOriginal);
    // Assert that the fixed implementation succeeds
    assertTrue(isFunctionFixed);
}

// Original problematic implementation
private boolean isFunction(Function<Object> functionToCheck) {
    Object getType = new Object(); // just an object
    return functionToCheck!= null && getType.toString().equals("[object Function]");
}

// Fixed implementation using an array
private boolean isFunctionWithArray(Function<Object> functionToCheck) {
    Object getType = new Object[0]; // using an array
    return functionToCheck!= null && getType.toString().equals("[object Function]");
}