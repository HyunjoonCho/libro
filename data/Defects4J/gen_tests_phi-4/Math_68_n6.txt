public void testLevenbergMarquardtOptimizerConvergenceChecker() {
    VectorialConvergenceChecker<ActualParameter[]> customChecker = new VectorialConvergenceChecker<ActualParameter[]>() {
        @Override
        public boolean hasConverged(EvolutionState state, 
                                    int threadIndex, 
                                    OptimizationData data, 
                                    ActualParameter[] candidate, 
                                    ActualParameter[] previous) {
            // Custom stopping criterion
            return candidate[0].getValue().getRealValue() < 0.01;
        }
    };

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(customChecker);
    OptimizationProblem problem = new MockOptimizationProblem();
    optimizer.setOptimizationProblem(problem);

    PopulationState populationState = new PopulationState(optimizer);
    EvolutionState evolutionState = new EvolutionState();
    evolutionState.setPopulationState(populationState);
    evolutionState.setThreadContext(new ThreadContext());

    optimizer.evolve(evolutionState, 1);

    assertTrue(customChecker.hasConverged(evolutionState, 0, optimizer.getOptimizationData(), optimizer.getCurrentParam(), optimizer.getPreviousParam()));
}

Note: This test assumes the existence of `ActualParameter`, `Ev