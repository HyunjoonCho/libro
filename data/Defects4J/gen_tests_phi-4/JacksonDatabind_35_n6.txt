public void testObjectIdAndTypeIdAsWrapperObjectRegression() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enable(SerializationFeature.WRAP_ROOT_VALUE);
    mapper.addMixIn(Object.class, MixIn.class);

    String json = "{\"@type\":\"com.example.MyClass\",\"@id\":\"123\"}";

    ObjectNode node = (ObjectNode) mapper.readTree(json);
    assertEquals("123", node.get("@id").asText());
    assertEquals("com.example.MyClass", node.get("@type").asText());

    String serialized = mapper.writeValueAsString(node);
    assertEquals("{\"@type\":\"com.example.MyClass\",\"@id\":\"123\"}", serialized);

    // Reproduce deserialization
    ObjectNode deserializedNode = (ObjectNode) mapper.readTree(serialized);
    assertEquals("123", deserializedNode.get("@id").asText());
    assertEquals("com.example.MyClass", deserializedNode.get("@type").asText());
}

// MixIn class
abstract static class MixIn {
    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("@type")
    protected String type;

    @JsonInclude(JsonInclude.Include.NON_NULL)
    @JsonProperty("@id")
    protected String id;
}