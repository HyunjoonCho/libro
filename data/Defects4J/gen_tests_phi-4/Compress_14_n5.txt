import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;
import org.junit.Test;
import java.io.ByteArrayInputStream;
import java.io.IOException;

public class TarArchiveInputStreamTest {

    @Test(expected = IOException.class)
    public void testAixTarWithSymlink() throws IOException {
        // Simulate the binary content of a tar file created on AIX containing a symlink
        byte[] aixTarWithSymlinkBinary = {
            0, 0, 0, 0, // Null bytes at the start causing the issue
            0x17, 0x22, 0x00, 0x07, 0x26, 0x20, // Following bytes that would follow in a header
            //... (rest of the expected binary content)
        };

        try (TarArchiveInputStream tarInputStream = new TarArchiveInputStream(new ByteArrayInputStream(aixTarWithSymlinkBinary))) {
            tarInputStream.getNextTarEntry(); // This should throw IOException due to the malformed header
        }
    }
}

This test method simulates the scenario described in the bug report by creating a `ByteArrayInputStream` with binary content that includes the problematic null bytes at the start, mimicking a tar file created