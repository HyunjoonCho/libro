import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class CompilerPropertyRemovalTest {

    @Test
    public void testFunctionPropertyRemoval() {
        var map = new java.util.HashMap<String, java.util.function.Supplier<() -> void>>();

        var f1 = () -> System.out.println("f1");
        f1.alwaysCall = true; // Assigning a custom property to a lambda function

        var f2 = () -> System.out.println("f2");

        map.put("f1", () -> f1.run());
        map.put("f2", () -> f2.run());

        var callFunctionByKey = (key) -> {
            var f = map.get(key);
            if (f!= null && f.get().alwaysCall) f.get().run();
        };

        callFunctionByKey(Math.random() > 0.5? "f1" : "f2");

        // This test assumes the environment where the property is preserved.
        // Since Java doesn't preserve such properties, a real test might need to
        // simulate or mock the environment where this behavior is observed.
        assertTrue(f1.alwaysCall, "The 'alwaysCall' property should be