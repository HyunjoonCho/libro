import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator;
import com.fasterxml.jackson.databind.jsontype.DefaultBaseTypeLimitingValidator.TypeIdResolver;
import com.fasterxml.jackson.databind.jsontype.NamedType;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class IssuePolymorphicTypesTest {

    @Test
    public void testPolymorphicTypeResolution() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enableDefaultTyping(new DefaultBaseTypeLimitingValidator(), ObjectMapper.DefaultTyping.NON_FINAL);

        // Register named type for polymorphic handling
        mapper.registerSubtypes(new NamedType(BaseType.class, "base"),
                                new NamedType(DerivedType.class, "derived"));

        String json = "{\"_type\":\"derived\",\"value\":\"overridden\"}";

        DerivedType result = mapper.readValue(json, DerivedType.class);

        assertEquals("overridden", result.value);
        assertEquals("baseValue", result.baseValue); // Ensure base property is present
    }

    public static class BaseType {
        @JsonProperty("baseValue")
        public String baseValue = "baseValue";
    }

    public static class