import static org.junit.Assert.assertEquals;
import org.junit.Test;

public class TestRemoveKey {

    @Test
    public void testSwitchedOrderOfDeleteAndIn() {
        var customData = new java.util.HashMap<String, String>();
        customData.put("key", "value");

        String result = testRemoveKey("key");
        assertEquals("value", result);
        assertEquals(false, customData.containsKey("key"));
    }

    private String testRemoveKey(String key) {
        if (customData.containsKey(key)) {
            return customData.get(key);
        } else {
            return null;
        }
    }

    private java.util.HashMap<String, String> customData = new java.util.HashMap<String, String>() {{
        put("key", "value");
    }};
}

To replicate the behavior described, the test checks that the `key` is initially present, retrieves and returns its value, and then confirms the key is no longer present in the `customData` map after the operation. This test setup assumes the operation is similar to the JavaScript behavior described, focusing on the order of operations.