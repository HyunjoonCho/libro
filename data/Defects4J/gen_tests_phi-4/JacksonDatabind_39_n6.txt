public void testJacksonDeserializationFeatureFailOnInvalidSubtype() throws IOException {
    final ObjectMapper objectMapper = new ObjectMapper()
       .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE)
       .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
       .disable(DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    // Test case 1: Can't read item2 which is valid
    String json1 = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord result1 = objectMapper.readValue(json1, CallRecord.class);
    assertEquals(0.0f, result1.version, 0.0f);
    assertEquals("123", result1.application);
    assertNull(result1.item2);

    // Test case 2: Can't read item2 after invalid item
    String json2 = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}}";
    CallRecord result2 = objectMapper.readValue(json2, CallRecord.class);
    assertEquals(0.0f, result2.version, 0.0f);