public void testMockingAbstractClass() {
    // Attempt to mock an abstract class using Mockito
    AccountService mockService = Mockito.mock(AccountService.class);
    
    // Define a callback to simulate the response
    AsyncCallback<UserAccount> callback = Mockito.mock(AsyncCallback.class);
    
    // Attempt to stub the method with a callback
    Mockito.doAnswer(invocation -> {
        AsyncCallback<UserAccount> cb = invocation.getArgument(1);
        cb.onSuccess(new UserAccount() {
            @Override
            public List<String> getEmails() {
                return Arrays.asList("test@example.com");
            }

            @Override
            public void addEmail(String email) {
                // No-op
            }
        });
        return null;
    }).when(mockService).getAccount(Mockito.eq("id"), Mockito.any(AsyncCallback.class));
    
    // Call the method to trigger the callback
    mockService.getAccount("id", callback);