public void testPolymorphicTypeLossWithJsonValue() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
    mapper.enableDefaultTyping();

    CommandAPDU original = new CommandAPDU(new byte[]{0x01, 0x02, 0x03, 0x04});
    String json = mapper.writeValueAsString(original);

    RemoteCall deserialized = mapper.readValue(json, RemoteCall.class);
    CommandAPDU deserializedCommandAPDU = (CommandAPDU) deserialized.getArgs()[0].get(0);

    assertNotEquals(original.getClass(), deserializedCommandAPDU.getClass());
    assertArrayEquals(original.getBytes(), deserializedCommandAPDU.getBytes());
}

class CommandAPDU {
    @JsonCreator
    public CommandAPDU(@JsonProperty(value = "bytes") byte[] apdu) {
        this.apdu = apdu.clone();
    }

    @JsonValue
    public byte[] getBytes() {
        return apdu.clone();
    }

    private byte[] apdu;
}

class RemoteCall {
    private Object[][] args;

    public Object[][] getArgs() {
        return args;
    }

    public void setArgs(Object[][] args) {