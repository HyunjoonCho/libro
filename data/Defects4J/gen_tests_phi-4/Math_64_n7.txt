public void testLevenbergMarquardtInconsistency() {
    // Assuming `optimizer` is an instance of a class implementing Levenberg-Marquardt
    VectorialPointValuePair result = optimizer.doOptimize(initialGuess);

    double[] optimalPoint = result.getOptimumPoint();
    double[] objectiveFunctionValues = result.getObjectiveFunctions();
    double cost = result.getCost();
    double[] residuals = result.getResiduals();

    // Recompute cost and residuals using the optimal point
    double recomputedCost = computeCost(optimalPoint);
    double[] recomputedResiduals = computeResiduals(optimalPoint);

    assertEquals(recomputedCost, cost, 1e-6);
    assertArrayEquals(recomputedResiduals, residuals, 1e-6);
}

private double computeCost(double[] point) {
    // Implement cost computation based on the objective function
    return 0.0; // Placeholder
}

private double[] computeResiduals(double[] point) {
    // Implement residuals computation based on the objective function
    return new double[0]; // Placeholder
}

Note: The `computeCost` and `computeResiduals` methods should be implemented