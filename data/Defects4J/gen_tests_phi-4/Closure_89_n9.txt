public void testClosureCompilerPropertyRemoval() {
    Map<String, Function> map = new HashMap<>();
    
    Function f1 = () -> {
        System.out.println("f1");
    };
    f1.alwaysCall = true; // Assume we have a way to add a property to Function or use a custom class
    Function f2 = () -> {
        System.out.println("f2");
    };

    map.put("f1", f1);
    map.put("f2", f2);

    String key = Math.random() > 0.5? "f1" : "f2";
    Function f = map.get(key);
    if (Boolean.TRUE.equals(f.alwaysCall)) {
        f.run();
    }

    // Mock the expected behavior by verifying the output or using a custom assertion mechanism
    // For demonstration, assume a logging mechanism or a mock to verify the call
    // Assert that "f1" is called if f1.alwaysCall is true
}

Note: Since Java functions (lambdas) do not support adding properties like in JavaScript, you would need a custom wrapper class to simulate this behavior. The test assumes such a class exists.