public void testCMAESOptimizerBoundsEnforcement() {
    CMAESOptimizer optimizer = new CMAESOptimizer(10, 100);
    optimizer.setMaximumFunctionCalls(1000);
    optimizer.setInitialMean(new double[]{0.0, 0.0});
    optimizer.setInitialSigma(1.0);
    optimizer.setBoundaryRanges(new double[][]{{-5.0, 5.0}, {-5.0, 5.0}});
    optimizer.setCheckFeasibleCount(0); // Ensure bounds check is not performed

    Optimizer.OptimizationResult result = optimizer.optimize(new MyFunction());

    double[] optimizedSolution = result.getOptimum();
    boolean isWithinBounds = optimizedSolution[0] >= -5.0 && optimizedSolution[0] <= 5.0
                            && optimizedSolution[1] >= -5.0 && optimizedSolution[1] <= 5.0;
    assertFalse(isWithinBounds, "The optimizer should not produce a solution outside the bounds.");
}

class MyFunction implements Optimizer.OptimizerFunction {
    @Override
    public double value(Optimizer.OptimizationData data) {
        double[] x = data.getPoint();
        return x[