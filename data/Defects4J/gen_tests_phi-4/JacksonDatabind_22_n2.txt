import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Assert;
import org.junit.Test;

import java.io.IOException;

public class CustomSerializerTest {

    public static class PojoWithJsonValue {
        private final String value = "value";

        @com.fasterxml.jackson.annotation.JsonValue
        public String toJsonValue() {
            return value;
        }
    }

    public static class CustomSerializer extends com.fasterxml.jackson.databind.JsonSerializer<PojoWithJsonValue> {
        @Override
        public void serialize(PojoWithJsonValue value, com.fasterxml.jackson.core.JsonGenerator gen, com.fasterxml.jackson.databind.SerializerProvider serializers) throws IOException {
            gen.writeString("customValue");
        }
    }

    @Test
    public void testCustomSerializerNotUsedIfJsonValuePresent() throws IOException {
        SimpleModule module = new SimpleModule();
        module.addSerializer(PojoWithJsonValue.class, new CustomSerializer());

        ObjectMapper mapper = new ObjectMapper();
        mapper.registerModule(module);

        PojoWithJsonValue pojo = new PojoWithJsonValue();
        String result = mapper.writeValueAsString(pojo);

        Assert.assertEquals("value", result); // Expected to use @JsonValue, but custom serializer should be used
    }
}