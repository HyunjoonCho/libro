public void testSerializationDeserializationWithTypeVariable() {
    Gson gson = new Gson();
    Bar bar1 = new Bar(1);
    
    try {
        String json = gson.toJson(bar1); // Fails due to serialization issue
        Bar bar2 = gson.fromJson("{\"someField\":1}", Bar.class); // Fails due to deserialization issue
        assertEquals(bar1, bar2);
    } catch (Exception e) {
        fail("Serialization or deserialization failed: " + e.getMessage());
    }
}

class Foo<T> {
    private final T someField;

    public Foo(T value) {
        this.someField = value;
    }

    public boolean equals(Object o) {
        if (!(o instanceof Foo)) {
            return false;
        } else {
            return someField.equals(((Foo<?>) o).someField);
        }
    }

    @Override
    public int hashCode() {
        return someField.hashCode();
    }
}

class Bar extends Foo<Integer> {
    public Bar(Integer i) {
        super(i);
    }
}