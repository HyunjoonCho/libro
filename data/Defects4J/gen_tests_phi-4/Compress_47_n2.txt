public void testZipArchiveInputStreamCompressedSizeUnknown() {
    ZipArchiveInputStream archiveInputStream = new ZipArchiveInputStream(mockInputStream());
    archiveInputStream.getNextZipEntry(); // Assume this sets the current entry

    // Mock the entry to have an unknown compressed size
    ZipEntry entry = mock(ZipEntry.class);
    when(entry.getCompressedSize()).thenReturn(ZipEntry.SIZE_UNKNOWN);
    when(archiveInputStream.getCurrentEntry()).thenReturn(entry);

    Exception exception = assertThrows(IllegalArgumentException.class, () -> {
        archiveInputStream.getNextZipEntry();
    });

    assertEquals("Compressed size is unknown for the current entry", exception.getMessage());
}

Note: This assumes that the `getNextZipEntry` method has been modified to throw an `IllegalArgumentException` when the compressed size is unknown. Adjust the exception type and message as necessary based on the actual implementation. Additionally, `mockInputStream()` and `mock(ZipEntry.class)` are placeholders for creating mock objects, which would typically be implemented using a mocking framework like Mockito.