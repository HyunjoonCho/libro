public void testLevenbergMarquardtOptimizerVectorialConvergenceCheckerIgnored() {
    VectorialLevenbergMarquardtOptimizer optimizer = new VectorialLevenbergMarquardtOptimizer(
        new LeastSquaresOptimizer.ConvergenceChecker<VectorialFunction>(10) {
            @Override
            public boolean check(Number[] previousParameters, Number[] newParameters,
                                 double previousValue, double newValue,
                                 int maxEvaluations, int numberOfEvaluations) {
                return newValue < 1e-8; // Custom stopping criterion
            }
        }
    );

    MockVectorialFunction function = new MockVectorialFunction();
    double[] initialParameters = {1.0, 2.0};

    try {
        optimizer.optimize(10, 100, function, initialParameters);
    } catch (Exception e) {
        fail("Optimization should not throw an exception due to custom convergence criteria");
    }

    // Assert that the optimization did not stop according to the custom checker
    // Assuming MockVectorialFunction allows querying the number of iterations
    assertFalse("Optimization should stop early based on custom convergence criteria",
                function.getIterations() < 10);
}

Note: This test