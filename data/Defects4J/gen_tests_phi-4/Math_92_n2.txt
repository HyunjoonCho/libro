import java.math.BigInteger;

public void testBinomialCoefficientOverflow() {
    // Directly using the (externally calculated and hopefully correct) expected value
    assertEquals(7219428434016265740L, MathUtils.binomialCoefficient(66, 33));

    // Recursive property test
    assertEquals(
        MathUtils.binomialCoefficient(65, 32) + MathUtils.binomialCoefficient(65, 33),
        MathUtils.binomialCoefficient(66, 33)
    );
}

// Exact implementation using BigInteger
public static long binomialCoefficient(int n, int k) {
    if (k == 0 || k == n)
        return 1;
    BigInteger result = BigInteger.ONE;
    for (int i = k + 1; i <= n; i++) {
        result = result.multiply(BigInteger.valueOf(i));
    }
    for (int i = 1; i <= n - k; i++) {
        result = result.divide(BigInteger.valueOf(i));
    }
    if (result.compareTo(BigInteger.valueOf(Long.MAX_VALUE)) > 0) {
        throw new ArithmeticException(
            "Binomial coefficient overflow: " + n + ", " + k);
    }
    return result.longValue();
}