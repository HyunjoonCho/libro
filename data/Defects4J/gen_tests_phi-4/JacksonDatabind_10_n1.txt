public void testJsonAnyGetterWithJsonSerialize() throws Exception {
    ObjectMapper mapper = new ObjectMapper();

    // Setup test object with expected issue
    MyTestObject obj = new MyTestObject();
    obj.setParameters(Map.of("key", "value"));

    // Attempt to serialize object with annotations
    String result = mapper.writeValueAsString(obj);

    // Expected result should reflect the usage of MySerializer or MyConverter
    String expected = "{\"key\":\"value\"}"; // Assuming MySerializer or MyConverter outputs this

    assertEquals(expected, result);
}

// Assuming these are defined elsewhere in your test setup
class MyTestObject {
    private Map<String, String> parameters = new HashMap<>();

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }

    public void setParameters(Map<String, String> parameters) {
        this.parameters = parameters;
    }
}

class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry