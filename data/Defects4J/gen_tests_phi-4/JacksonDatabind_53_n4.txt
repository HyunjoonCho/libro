public void testJsonDeserializeWithSubtype() throws Exception {
    ObjectMapper objectMapper = new ObjectMapper();
    objectMapper.registerModule(new SimpleModule().addDeserializer(MyCustomIdInterface.class, new MyCustomIdDeserializer()));
    
    String json = "{ \"something\": [ { \"id\": \"a-uuid\", \"property\": \"value\" } ] }";
    
    MyPojo pojo = objectMapper.readValue(json, MyPojo.class);
    
    assertFalse(pojo.getSomething().isEmpty());
    Map<UUID, Foo> map = pojo.getSomething();
    
    assertTrue(map.containsKey(UUID.fromString("a-uuid")));
    Foo foo = map.get(UUID.fromString("a-uuid"));
    assertEquals("value", foo.getProperty());
}

class MyPojo {
    @JsonDeserialize(as = MyHashMap.class)
    private Map<UUID, Foo> something;

    public Map<UUID, Foo> getSomething() {
        return something;
    }

    public void setSomething(Map<UUID, Foo> something) {
        this.something = something;
    }
}

class MyHashMap<K, V extends MyCustomIdInterface> extends HashMap<K, V> {}

interface MyCustomIdInterface {
    UUID getId();
}

class Foo implements MyCustomIdInterface {
    private UUID