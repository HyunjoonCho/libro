public void testJsonIdentityInfoDeserialization() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enable(SerializationFeature.INDENT_OUTPUT);
    mapper.enable(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES);
    mapper.enable(MapperFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
    mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);
    mapper.enable(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS);
    mapper.enable(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT);
    mapper.enable(DeserializationFeature.ACCEPT_EMPTY_ARRAY_AS_NULL_OBJECT);
    mapper.enable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
    mapper.enable(SerializationFeature.WRAP_ROOT_VALUE);
    
    String json = "{\"id\":1,\"name\":\"A\",\"ref\":{\"id\":2,\"name\":\"B\",\"ref\":null}}";
    
    mapper.addMixIn(Object.class, SimpleObjectMixin.class);
    SimpleObject object = mapper.readValue(json, SimpleObject.class);
    
    assertNotNull(object);
    assertNotNull(object.getRef());
    assertEquals(2, object.getRef().getId());
    assertEquals("B", object.getRef().getName());
}

@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, property = "@class")
@JsonIdentityInfo(generator = ObjectId