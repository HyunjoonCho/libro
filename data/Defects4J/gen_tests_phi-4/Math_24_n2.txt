public void testBrentOptimizerBestPoint() {
    Function<Double, Double> quadraticFunction = x -> (x - 2.0) * (x - 2.0) + 1.0;
    BrentOptimizer optimizer = new BrentOptimizer(0.0, 4.0, 1e-5);

    Double bestPoint = optimizer.optimize(quadraticFunction);
    
    assertEquals(2.0, bestPoint, 1e-5);

    // Manually check if the best point is indeed the best encountered
    double minValue = Double.POSITIVE_INFINITY;
    double minPoint = Double.NaN;

    for (double x = 0.0; x <= 4.0; x += 0.01) {
        double value = quadraticFunction.apply(x);
        if (value < minValue) {
            minValue = value;
            minPoint = x;
        }
    }

    assertEquals(minPoint, bestPoint, 1e-5);
}