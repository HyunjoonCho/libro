public void testInjectMocksIssue() {
    MockitoAnnotations.initMocks(this);

    // Assuming these are the fields in the class under test
    TextView txtGateView = mock(TextView.class);
    TextView txtNextStep = mock(TextView.class);

    // Annotate with @InjectMocks
    MyClassUnderTest myClassUnderTest = new MyClassUnderTest(txtGateView, txtNextStep);

    // Verify that the wrong field is being injected
    myClassUnderTest.someMethod(); // Replace with a method that uses the fields
    verify(txtGateView).someTextViewMethod(); // Replace with actual method calls
    verifyNoInteractions(txtNextStep); // txtNextStep should not be used
}

**Note:** Make sure to replace `MyClassUnderTest`, `someMethod`, and `someTextViewMethod` with the actual class and method names from your test subject. The test checks that `txtNextStep` is not being used incorrectly, indicating the wrong injection issue.