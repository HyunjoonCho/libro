public void testClassifyNonRightmostExpressions() {
    // Assuming the existence of a method `transformAndCheck` that transforms and checks expressions
    // and throws a warning if problematic expressions are found.

    // Test case 1: foo((1, 2, 42)) should transform to foo((1, 3)) and issue a warning for the first element
    Exception exception1 = assertThrows(WarningException.class, () -> {
        transformAndCheck("foo((1, 2, 42))");
    });
    assertEquals("Warning: First element of sequence is free of side effects", exception1.getMessage());

    // Test case 2: foo((bar(), 2, 42)) should transform to foo((bar(), 3)) and issue no warning
    assertDoesNotThrow(() -> {
        transformAndCheck("foo((bar(), 2, 42))");
    });

    // Test case 3: foo(((1, 2, 3), (4, 5, 42))) should transform to foo((1, 4, 42)) and issue warnings for the first elements of inner sequences
    Exception exception3 = assertThrows(WarningException.class, () -> {