import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.format.DateTimeFormat;
import org.joda.time.format.DateTimeFormatter;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

public class JodaDateTimeZoneTest {

    public void testDateTimeZoneDiscrepancy() {
        DateTimeFormatter formatter = DateTimeFormat.forPattern("MM/dd/yyyy HH:mm:ss.SSS ZZZ");
        DateTimeZone expectedZone = DateTimeZone.forID("America/Atka");
        DateTime dateTime = DateTime.now().withZone(expectedZone);

        // Convert to string and back
        String formattedDateTime = formatter.print(dateTime);
        DateTime parsedDateTime = formatter.parseDateTime(formattedDateTime);

        // Check if the parsed DateTime has the expected time zone
        String actualZoneId = parsedDateTime.getZone().getID();
        String expectedZoneId = expectedZone.getID();

        if (!expectedZoneId.equals(actualZoneId)) {
            System.out.println("Expected time zone: " + expectedZone