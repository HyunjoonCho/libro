public void testCMAESOptimizerBounds() {
    // Define the bounds
    double[] lowerBounds = {0.0, 0.0};
    double[] upperBounds = {1.0, 1.0};

    // Create an instance of the optimizer with default parameters
    CMAESOptimizer optimizer = new CMAESOptimizer(lowerBounds, upperBounds);

    // Define an objective function that does not enforce bounds internally
    ObjectiveFunction objectiveFunction = new ObjectiveFunction() {
        @Override
        public double compute(double[] solution) {
            return Math.pow(solution[0] - 0.5, 2) + Math.pow(solution[1] - 0.5, 2);
        }
    };

    // Run the optimization
    double result = optimizer.optimize(objectiveFunction);

    // Assert that the result is within bounds
    assert lowerBounds[0] <= result && result <= upperBounds[0] : "Result exceeds bounds: " + result;
}

This test method sets up a scenario where the `CMAESOptimizer` could potentially exceed the specified bounds due to the described issue. The test checks if the final result is within the given bounds, and fails if it is