public void testCMAESOptimizerBounds() {
    double[] lowerBounds = new double[] {0.0, 0.0};
    double[] upperBounds = new double[] {1.0, 1.0};
    
    CMAESOptimizer optimizer = new CMAESOptimizer(lowerBounds, upperBounds);
    optimizer.setCheckFeasibleCount(0); // Default behavior
    
    // Assuming optimize is a method that optimizes a given function
    double[] result = optimizer.optimize(myObjectiveFunction);
    
    // Check if result exceeds bounds
    for (int i = 0; i < result.length; i++) {
        assertNotEquals(result[i], Double.NaN); // Ensure it produces a result
        assertTrue(result[i] >= lowerBounds[i] && result[i] <= upperBounds[i]);
    }
}

Note: Replace `myObjectiveFunction` with the actual function being optimized. This test assumes that `CMAESOptimizer` has `setCheckFeasibleCount` and `optimize` methods, and that it returns an array of doubles representing the optimized solution. Adjust the method names and logic according to the actual implementation details of your `CMAESOptimizer`.