public void testErrorRecoveryInReadValues() {
    ObjectMapper mapper = new ObjectMapper();
    String json = "{ \"valid\": true, \"invalid\": { }";

    DeserializationContext ctx = mapper.getFactory().deserializationContext;
    ObjectReader reader = mapper.readerFor(Map.class);
    MappingIterator<Map.Entry<String, Object>> it = reader.readValues(json).readContext(ctx);

    // Attempt to read until an error occurs
    Map.Entry<String, Object> entry;
    while ((entry = it.nextValue())!= null) {
        // Process valid entries
    }

    // Expect an error due to the invalid JSON structure
    JsonProcessingException e = assertThrows(JsonProcessingException.class, it::close);
    assertTrue(e.getMessage().contains("UnterminatedObjectException"));

    // Heuristic recovery: Check if the next token is END_OBJECT
    assertTrue(it.hasNext());
    assertSame(JsonToken.END_OBJECT, it.nextToken().id());
}