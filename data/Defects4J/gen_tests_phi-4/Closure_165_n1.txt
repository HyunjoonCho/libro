public void testPropertiesOnUnrelatedRecordTypes() {
    // Define the first record type
    @SuppressWarnings("unused")
    class RecordType1 {
        String name;
        int id;
    }

    // Define a second record type with a different property
    @SuppressWarnings("unused")
    class RecordType2 {
        String name2;
    }

    // Function that expects a RecordType1 but tries to access name2
    @SuppressWarnings("unused")
    void func(RecordType1 rec) {
        // This should cause a compile-time error in Java, but in JavaScript, it compiles without errors
        System.out.println(rec.name2);
    }

    // Instantiate RecordType1 and pass it to the function
    func(new RecordType1() {
        {
            this.name = "jim";
            this.id = 0;
        }
    });
}

Note: This test is designed to illustrate the described issue in JavaScript. In Java, accessing a non-existent field would result in a compile-time error, not a runtime error. The test is structured to mimic the JavaScript behavior as closely as possible within Java's static type system.