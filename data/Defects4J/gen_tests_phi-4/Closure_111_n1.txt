import com.google.javascript.jscomp.NodeTraversal;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.CompilerOptions;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.testing.AbstractCompilerTestCase;
import com.google.javascript.rhino.Node;
import org.junit.Test;

import static com.google.javascript.jscomp.NodeTraversal.createCompilerState;
import static com.google.javascript.jscomp.NodeUtil.newSourceFile;
import static com.google.javascript.rhino.Node.newString;

public class ClosureCompilerTest extends AbstractCompilerTestCase {

    @Test
    public void testGoogIsArray() {
        Compiler compiler = createCompiler();
        CompilerOptions options = new CompilerOptions();
        options.setAngularPass(null);
        options.setWarningsOnly(true);
        options.setClosurePasses(CompilerOptions.ADVANCED_OPTIMIZATIONS);
        compiler.initOptions(options);

        SourceFile input = newSourceFile("test.js", newString("goog = { isArray: function(obj) { return Array.isArray(obj); } };"));
        SourceFile test = newSourceFile("test.js", newString(
            "/**\n" +
            " * @param {*} object\n" +
            " * @return