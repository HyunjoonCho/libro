public void testExternalPropertyPolymorphicEnumDeserialization() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.OBJECT_AND_NON_CONCRETE);

    String json = "{ \"kind\": \"CONTACT\", \"to\": { \"name\": \"Foo\" } }";
    
    Invite invite = mapper.readValue(json, Invite.class);
    assertEquals(Invite.Kind.CONTACT, invite.getKind());
    assertEquals("Foo", invite.getTo().getName());
}

// Assuming the following classes are defined:

enum Invite {
    class Kind {
        private final String name;
        private final String desc;

        private Kind(String name, String desc) {
            this.name = name;
            this.desc = desc;
        }

        public static Kind fromString(String value) {
            for (Kind kind : values()) {
                if (kind.name.equalsIgnoreCase(value)) {
                    return kind;
                }
            }
            throw new IllegalArgumentException("Unknown kind: " + value);
        }

        public String getName() {
            return name;
        }

        public String getDesc() {
            return desc;
        }
    }

    private final Kind kind;
    private final InviteTo to;

    public static class InviteTo {
        private final String