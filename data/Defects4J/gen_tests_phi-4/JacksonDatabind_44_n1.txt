public void testPolymorphicTypeResolution() {
    ObjectMapper mapper = new ObjectMapper();
    
    // Assuming BaseClass and SubClass are defined as follows:
    // class BaseClass { String baseProperty; }
    // class SubClass extends BaseClass { String subProperty; }
    
    String json = "{\"type\":\"SubClass\",\"baseProperty\":\"valueFromBase\",\"subProperty\":\"valueFromSub\"}";
    
    BaseClass base = mapper.readValue(json, BaseClass.class);
    
    // Check if baseProperty is correctly resolved from the JSON
    assertEquals("valueFromBase", base.getBaseProperty());
    
    // Check if subProperty is correctly resolved and accessible
    assertTrue(base instanceof SubClass);
    SubClass sub = (SubClass) base;
    assertEquals("valueFromSub", sub.getSubProperty());
}

Note: You will need to replace `BaseClass` and `SubClass` with the actual class names and ensure they are set up for polymorphic deserialization with Jackson, including the `@JsonTypeInfo` and `@JsonSubTypes` annotations.