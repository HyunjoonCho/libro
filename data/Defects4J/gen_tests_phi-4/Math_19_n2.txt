public void testWideBoundsToCMAESOptimizer() {
    double lowerBound = -Double.MAX_VALUE;
    double upperBound = Double.MAX_VALUE;

    CMAESOptimizer optimizer = new CMAESOptimizer(lowerBound, upperBound, 10);
    optimizer.optimize(fitnessFunction);

    // Capture the parameters passed to the fitness function
    double[] parameters = optimizer.getLastParameters();
    for (double param : parameters) {
        assertFalse(Double.isNaN(param), "Parameter should not be NaN");
    }
}

Note: This assumes that `CMAESOptimizer` has methods `getLastParameters()` and that `fitnessFunction` is appropriately defined in your test environment. Adjust the code to fit the actual API of your `CMAESOptimizer` and `FitnessFunction` implementations.