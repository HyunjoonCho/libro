public void testJsonAnyGetterAndJsonSerializeConflict() throws Exception {
    ObjectMapper mapper = new ObjectMapper();

    // Custom serializer
    class MySerializer extends JsonSerializer<Map<String, String>> {
        @Override
        public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
            gen.writeStartObject();
            for (Map.Entry<String, String> entry : value.entrySet()) {
                gen.writeStringField(entry.getKey(), entry.getValue() + "_modified");
            }
            gen.writeEndObject();
        }
    }

    // Test class
    class TestClass {
        @JsonSerialize(using = MySerializer.class)
        @JsonAnyGetter
        public Map<String, String> getParameters() {
            Map<String, String> params = new HashMap<>();
            params.put("key1", "value1");
            params.put("key