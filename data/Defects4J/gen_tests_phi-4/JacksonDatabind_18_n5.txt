public void testJsonProcessingExceptionRecovery() {
    String json = "{ \"key1\": \"value1\", \"key2\": { \"nestedKey\": \"nestedValue\" }";
    ObjectMapper mapper = new ObjectMapper();
    JsonParser parser = mapper.getFactory().createParser(json);
    JsonToken token;
    
    try (MappingIterator<JsonNode> it = mapper.readerFor(JsonNode.class).readValues(parser)) {
        JsonNode node;
        while ((token = parser.nextToken())!= null && token!= JsonToken.END_ARRAY) {
            try {
                node = it.nextValue();
                assertNotNull(node);
            } catch (JsonProcessingException e) {
                // Expected exception due to malformed JSON
                assertTrue(token == JsonToken.FIELD_NAME || token == JsonToken.VALUE_STRING);
                // Attempt to recover by skipping to the end of the object
                while (parser.nextToken()!= JsonToken.END_OBJECT) {
                    // Skip tokens until the end of the malformed object
                }
                // Continue parsing after recovery
                node = it.nextValue();
                assertNotNull(node);
            }
        }
    } catch (Exception e) {
        fail("Unexpected exception: " + e.getMessage());
    }
}