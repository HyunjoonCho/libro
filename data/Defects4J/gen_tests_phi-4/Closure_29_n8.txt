public void testClosureCompilerIssue() {
    // Simulate the environment where the closure compiler bug would occur
    Function<Object, Boolean> isFunction = obj -> {
        Object getType = new Object(); // Using an object as per the original code
        return obj instanceof Function && getType.toString().equals("[object Function]");
    };

    // Test with a valid function
    Function<Object, Object> validFunction = x -> x;
    assertFalse(isFunction.apply(validFunction));

    // Test with an array instead of an object
    Function<Object, Boolean> isFunctionArray = obj -> {
        Object getType = new Object[0]; // Using an array as per the workaround
        return obj instanceof Function && getType.toString().equals("[object Function]");
    };

    assertTrue(isFunctionArray.apply(validFunction));
}