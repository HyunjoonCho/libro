public void testEmbeddedRungeKuttaStepSizeBug() {
    // Assuming necessary setup for DOP853 integrator
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(1.0e-6, 1.0e-5, 1000, 10000);
    double[] y0 = new double[]{/* initial state values */};
    double[] yDotK = new double[y0.length];
    double[] yTmp = new double[y0.length];

    // Correct scaling calculation as per Hairer's theory
    double[] correctScale = new double[y0.length];
    for (int i = 0; i < y0.length; i++) {
        double yi = Math.max(Math.abs(y0[i]), 1.0); // Assuming y0[i] is non-zero for scaling
        correctScale[i] = integrator.getAbsoluteTolerance() + yi * integrator.getRelativeTolerance();
    }

    // Simulate the correct initialization step size
    double hCorrect = integrator.initializeStep(/* equations */, /* forward */, integrator.getOrder(), correctScale, 0.0, y0, yDotK[0], yTmp, yDot