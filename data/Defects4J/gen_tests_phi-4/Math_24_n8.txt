public void testBrentOptimizerBestPoint() {
    // Create a test function where the optimizer might fail
    UnivariateFunction testFunction = new UnivariateFunction() {
        @Override
        public double value(double x) {
            // A function with a clear minimum at x = 1
            return Math.pow(x - 1, 2) + 0.01 * Math.sin(100 * (x - 1));
        }
    };

    // Set up the BrentOptimizer
    BrentOptimizer optimizer = new BrentOptimizer();
    optimizer.setAbsoluteAccuracy(1e-6);
    optimizer.setMaxEval(1000);

    // Run the optimizer
    UnivariateOptimizationResult result = optimizer.optimize(testFunction, -100, 0, 2);

    // The best point should be very close to x = 1
    double bestPoint = result.getPoint();
    double expectedValue = testFunction.value(1);
    double actualValue = testFunction.value(bestPoint);

    // Assert that the best point found is indeed the best
    assertTrue("Optimizer did not return the best point", Math.abs(actualValue - expectedValue) < 1e-6);
}