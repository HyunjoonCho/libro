public void testCMAESOptimizerBounds() {
    // Assume CMAESOptimizer is a class with the described behavior
    // and has a method optimize with bounds and other necessary parameters.
    double[] lowerBounds = {0.0, 0.0};
    double[] upperBounds = {1.0, 1.0};
    CMAESOptimizer optimizer = new CMAESOptimizer();

    // Set checkFeasableCount to zero to simulate the described behavior
    optimizer.setCheckFeasableCount(0);

    // Assume optimize returns an object with a method getFitness() and getSolution()
    // where getSolution() returns the solution vector.
    OptimizationResult result = optimizer.optimize(lowerBounds, upperBounds, /* other parameters */);

    double[] solution = result.getSolution();
    for (int i = 0; i < solution.length; i++) {
        assertTrue("Solution component " + i + " is out of bounds: " + solution[i], 
                   solution[i] >= lowerBounds[i] && solution[i] <= upperBounds[i]);
    }
}