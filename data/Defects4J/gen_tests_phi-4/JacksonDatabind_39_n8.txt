public void testJacksonInvalidSubtype() throws IOException {
    ObjectMapper objectMapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
            DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    // First test case: should skip invalid item but parse item2
    String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord result1 = objectMapper.readValue(json, CallRecord.class);
    assertEquals("0.0", result1.version);
    assertEquals("123", result1.application);
    assertNull(result1.item);
    assertNotNull(result1.item2);

    // Second test case: malformed JSON, should handle gracefully
    json = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}";
    objectMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY, true);
    CallRecord result2 = objectMapper.readValue(json, CallRecord.class);
    assertEquals("0.0", result2.version);
    assertEquals("123", result2.application);
    assertNull(result2.item);

    // Third