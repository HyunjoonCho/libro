public void testBrentOptimizerFailure() {
    Function<Double, Double> function = x -> Math.pow(x - 2, 2) + 1; // A simple quadratic function with a minimum at x=2
    BrentOptimizer optimizer = new BrentOptimizer(function, 0, 4, 1e-6, 100);
    double result = optimizer.optimize();
    
    // Assuming the bug causes incorrect optimization, leading to a result far from the expected minimum value (2.0)
    // The expected behavior is to find the minimum close to x=2.0, where the function value is 1.0
    assertEquals(2.0, result, 1e-3); // Using a delta to account for numerical precision issues
}