public void testClosureCompilerBug() {
    // Define the problematic function
    Function<Object, Boolean> isFunction = object -> {
        Object getType = new Object(); // Using an object
        return object instanceof Function && getType.toString().equals("[object Function]");
    };

    // Create a dummy function to test
    Function<Object, Object> dummyFunction = x -> x;

    // Expect true since dummyFunction is indeed a function
    assertFalse(isFunction.apply(dummyFunction));

    // Define the "fixed" function using an array
    Function<Object, Boolean> isFunctionFixed = object -> {
        Object getType = new Object[] {}; // Using an array
        return object instanceof Function && getType.toString().equals("[object Function]");
    };

    // Test the fixed function
    assertTrue(isFunctionFixed.apply(dummyFunction));
}