public void testTruncatedZipArchiveInputStream() throws IOException {
    // Setup a truncated ZIP file in memory
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    ZipOutputStream zos = new ZipOutputStream(baos);
    ZipEntry entry = new ZipEntry("test.txt");
    zos.putNextEntry(entry);
    zos.write("Hello, World!".getBytes());
    zos.closeEntry();
    zos.close();

    // Simulate truncation by removing the last part of the ZIP file
    byte[] truncatedData = baos.toByteArray();
    truncatedData = Arrays.copyOf(truncatedData, truncatedData.length - 1);
    ByteArrayInputStream bais = new ByteArrayInputStream(truncatedData);

    // Use ZipArchiveInputStream to read the truncated ZIP
    ZipArchiveInputStream zaInputStream = new ZipArchiveInputStream(bais);
    byte[] buffer = new byte[1024];
    int bytesRead = zaInputStream.read(buffer);

    // Check if the read method returns 0 and does not throw an exception
    assertEquals(0, bytesRead);
    try {
        zaInputStream.read(buffer);
        fail("Expected IOException for truncated ZIP file");
    } catch (IOException e) {
        assertTrue(e.getMessage().contains("Truncated ZIP file"));
    }
}