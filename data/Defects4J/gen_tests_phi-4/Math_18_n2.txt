public void testCMAESOptimizerBoundsIssue() {
    CMAESOptimizer optimizer = new CMAESOptimizer(1.0, 100); // Assuming 1.0 is the initial step size and 100 is the max iterations
    double[] lowerBound = {0.0};
    double[] upperBound = {10.0};
    double[] initialGuess = {0.5};
    
    optimizer.setBounds(lowerBound, upperBound);
    optimizer.optimize(new ObjectiveFunction() {
        @Override
        public double evaluate(double[] x) {
            return Math.pow(x[0] - 5, 2); // Simple quadratic function centered at 5
        }
    }, initialGuess);

    // Check if the optimizer fits finer near the lower bound
    double[] resultLower = optimizer.optimizeWithInitialGuess(new double[]{0.1});
    double[] resultUpper = optimizer.optimizeWithInitialGuess(new double[]{9.9});
    
    assertTrue(resultLower[0] - 0.1 < 0.01);
    assertTrue(9.9 - resultUpper[0] < 0.5);
}

Note: The `optimizeWithInitialGuess` method is assumed to be a method that accepts