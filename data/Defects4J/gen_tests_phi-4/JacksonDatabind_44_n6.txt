public void testPolymorphicTypesIssue() {
    ObjectMapper mapper = new ObjectMapper();
    PolymorphicTypeValidator ptv = PolymorphicTypeValidator.builder()
           .allowIfBaseType(Object.class, "com.example.BaseType")
           .build();
    mapper.activateDefaultTyping(ptv, ObjectMapper.DefaultTyping.NON_FINAL);

    // Assuming Base and Derived classes are properly set up with annotations
    String json = "{\"type\":\"com.example.Derived\",\"propertyFromBase\":\"valueFromBase\",\"propertyFromDerived\":\"valueFromDerived\"}";
    try {
        Derived obj = mapper.readValue(json, Derived.class);
        assertEquals("valueFromBase", obj.getPropertyFromBase());
        assertEquals("valueFromDerived", obj.getPropertyFromDerived());
    } catch (IOException e) {
        fail("Should not have thrown IOException");
    }
}