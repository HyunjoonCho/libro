public void testFunctionPropertyRemoval() {
    Map<String, Function> map = new HashMap<>();
    
    Function f1 = () -> System.out.println("f1");
    f1.alwaysCall = true; // Assuming Function class has a `alwaysCall` field
    Function f2 = () -> System.out.println("f2");

    map.put("f1", f1);
    map.put("f2", f2);

    Function keyFunction = map.get(Math.random() > 0.5? "f1" : "f2");
    if (keyFunction.alwaysCall) {
        keyFunction.execute(); // Assuming Function class has an `execute` method
    }
}

// Assuming a simple Function class
class Function {
    boolean alwaysCall;
    
    void execute() {
        // Function logic here
    }
}

This test method simulates the behavior described in the bug report by using a `Function` class with a `boolean alwaysCall` property. It checks if the property is correctly preserved during the mapping and execution process. Adjust the `Function` class implementation as necessary to fit your actual code structure.