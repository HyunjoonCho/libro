public void testClosureCompilerIssue() {
    // Original implementation that fails with Closure Compiler
    Function<Object, Boolean> isFunctionOriginal = functionToCheck -> {
        Object getType = new Object();
        return functionToCheck!= null && getType.toString().equals("[object Function]");
    };

    // Test with a valid function
    assertTrue(isFunctionOriginal.apply(() -> {}));

    // Test with a non-function
    assertFalse(isFunctionOriginal.apply("not a function"));

    // Fixed implementation that works with Closure Compiler
    Function<Object, Boolean> isFunctionFixed = functionToCheck -> {
        Object getType = new Object[0]; // Using an array instead of an object
        return functionToCheck!= null && getType.toString().equals("[object Function]");
    };

    // Test with a valid function
    assertTrue(isFunctionFixed.apply(() -> {}));

    // Test with a non-function
    assertFalse(isFunctionFixed.apply("not a function"));
}