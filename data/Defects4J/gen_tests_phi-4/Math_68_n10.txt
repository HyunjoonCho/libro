public void testLevenbergMarquardtOptimizerIgnoresConvergenceChecker() {
    // Arrange
    final VectorialConvergenceChecker<Point2D, RealMatrix> customChecker = new VectorialConvergenceChecker<Point2D, RealMatrix>() {
        @Override
        public boolean hasConverged(List<Point2D> lastPoints, List<Point2D> currentPoints, RealMatrix lastJacobian, RealMatrix currentJacobian) {
            return true; // Custom stopping criteria
        }
    };

    LevenbergMarquardtOptimizer<Point2D, RealMatrix> optimizer = new LevenbergMarquardtOptimizer<>(customChecker);
    ProblemDefinition<Point2D, RealMatrix> problem = new DefaultProblemDefinition<>(/* parameters */);

    // Act
    optimizer.optimize(problem);

    // Assert
    assertSame(optimizer.getConvergenceChecker(), optimizer.getDefaultConvergenceChecker());
}

Note: This test assumes the existence of a `getDefaultConvergenceChecker()` method or similar for verification, which returns the default convergence checker used by the optimizer, demonstrating that the custom checker was ignored. Adjust the assertions based on the actual implementation details.