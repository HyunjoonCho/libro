public void testTypeIdResolverGenericIssue() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new SimpleModule().addTypeIdResolver(new MyTypeIdResolver()));
    
    // Assuming MyType is a class with a generic type parameter
    MyType<SpecificType> myObject = new MyType<>();
    myObject.setField(new SpecificType());

    // Serialize the object
    String json = mapper.writeValueAsString(myObject);

    // Deserialize back to MyType<SpecificType>
    MyType<?> deserializedObject = mapper.readValue(json, new TypeReference<MyType<SpecificType>>() {});

    // Verify if the deserialized object has the correct type
    assertTrue(deserializedObject.getField() instanceof SpecificType);
}

Note: You would need to replace `MyTypeIdResolver`, `MyType`, and `SpecificType` with the actual class names used in your codebase. The test assumes that the `TypeIdResolver` is not correctly handling the generic type parameter during deserialization.