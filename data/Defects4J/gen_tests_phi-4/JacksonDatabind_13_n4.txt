public void testAllowNullObjectIdDeserialization() {
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule module = new SimpleModule();
    module.addDeserializer(MyClass.class, new MyDeserializer());
    mapper.registerModule(module);

    String json = "{\"id\": null}";

    try {
        MyClass obj = mapper.readValue(json, MyClass.class);
        assertNull(obj.getId());
    } catch (JsonProcessingException e) {
        fail("Deserialization should not throw an exception for null Object Id");
    }
}

private static class MyDeserializer extends JsonDeserializer<MyClass> {
    @Override
    public MyClass deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
        JsonNode node = p.getCodec().readTree(p);
        MyClass obj = new MyClass();
        obj.setId(node.has("id")? node.get("id").asText() : null);
        return obj;
    }
}

private static class MyClass {
    private String id;

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }
}