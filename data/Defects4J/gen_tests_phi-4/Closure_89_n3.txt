public void testFunctionPropertiesRemoved() {
    Map<String, Runnable> map = new HashMap<>();
    
    Runnable f1 = () -> {
        System.out.println("f1");
    };
    f1.alwaysCall = true; // Note: This would require a custom wrapper due to Java's type system
    Runnable f2 = () -> {
        System.out.println("f2");
    };
    
    map.put("f1", f1);
    map.put("f2", f2);

    String key = Math.random() > 0.5? "f1" : "f2";
    Runnable f = map.get(key);
    
    try {
        boolean alwaysCall = (Boolean) f.getClass().getMethod("alwaysCall").invoke(f);
        if (alwaysCall) {
            f.run();
        }
    } catch (Exception e) {
        // Handle reflection exceptions
    }
}

**Note:** In Java, `Runnable` does not support custom properties, so this test uses reflection to simulate the behavior described. In practice, you might need to create a custom class that extends `Runnable` to hold additional properties.