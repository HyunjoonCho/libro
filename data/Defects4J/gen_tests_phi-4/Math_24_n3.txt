public void testBrentOptimizerDoesNotReturnBestPoint() {
    UnivariateFunction function = x -> {
        return Math.abs(x - 2) + Math.random() * 0.01; // Objective function with noise
    };

    double lowerBound = 0;
    double upperBound = 4;
    BrentOptimizer optimizer = new BrentOptimizer();
    UnivariatePointValuePair result = optimizer.optimize(100, lowerBound, upperBound, function);

    // Check if the result is not the best encountered point due to noise
    UnivariatePointValuePair lastEvaluatedPoint = optimizer.getLastPoint();
    UnivariatePointValuePair secondLastEvaluatedPoint = optimizer.getSecondLastPoint();

    assertTrue("Result should not be the best point encountered.",
        result.getValue() > secondLastEvaluatedPoint.getValue() || result.getPoint()!= secondLastEvaluatedPoint.getPoint());
}