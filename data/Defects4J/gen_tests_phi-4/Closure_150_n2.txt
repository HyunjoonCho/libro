public void testTypeCheckerMissesAnnotations() {
    // Simulating the environment setup for the test
    Namespace ns = new Namespace();
    
    // Define ns.a within an anonymous function
    new Function() {
        @Override
        public void execute() {
            ns.a = new Function() {
                @Override
                @Param("string=b")
                public void execute(String b) {}
            };
        }
    }.execute();
    
    // Function d that calls ns.a
    Function d = new Function() {
        @Override
        public void execute() {
            ns.invokeA();  // Expecting warning for 0 parameters
            ns.invokeA(123);  // Expecting no warning, as this is correct usage
        }
    };

    // Execute function d
    d.execute();
}

// Mock classes to simulate the JavaScript behavior
class Namespace {
    Function a;

    void invokeA() {
        if (a!= null) a.execute(null);
    }

    void invokeA(String b) {
        if (a!= null) a.execute(b);
    }
}

class Function {
    @Override
    public void execute() {}

    @Param("string=b")
    public void execute(String b) {}
}