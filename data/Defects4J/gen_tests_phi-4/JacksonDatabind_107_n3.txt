public void testHandleUnknownTypeIdReturnsVoid() {
    DeserializationContext ctxt = createTestContext();
    JavaType type = ctxt.constructType(Object.class);
    String unknownId = "unknownTypeId";
    TypeIdResolver idResolver = ctxt.getConfig().getTypeIdResolver(ctxt.getParser());

    DeserializationProblemHandler handler = new DeserializationProblemHandler() {
        @Override
        public boolean handleUnknownTypeId(DeserializationContext ctxt, 
                                           JavaType type, 
                                           String id, 
                                           TypeIdResolver idResolver, 
                                           String value) 
        throws IOException {
            return true; // Return void to simulate the issue
        }
    };

    ctxt.addHandler(handler);
    ctxt.enableDefaultTyping(DefaultTyping.NON_FINAL);

    try {
        ctxt.handleUnknownTypeId(type, unknownId, idResolver, unknownId);
    } catch (NullPointerException e) {
        assertEquals("DeserializationProblemHandler.handleUnknownTypeId() should not return Void.class",
                     "Deserialization of type 'java.lang.Object' failed: No suitable constructor found for type [simple type, class java.lang.Object] " +
                     "while trying to deserialize from Object value (NO_SOURCE)", e.getMessage());
    }
}