public void testPolymorphicTypeResolution() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
    mapper.registerSubtypes(new TypedObjectSubtype());

    String json = "{\"type\":\"com.example.TypedObjectSubtype\",\"value\":\"Test\"}";

    ObjectNode node = mapper.readTree(json);
    node.put("baseProperty", "BaseValue");

    String jsonWithBaseProperty = mapper.writeValueAsString(node);

    TypedObjectBase resolvedObject = mapper.readValue(jsonWithBaseProperty, TypedObjectBase.class);

    assertNotNull(resolvedObject);
    assertEquals("Test", ((TypedObjectSubtype) resolvedObject).getValue());
    assertNull(resolvedObject.getBaseProperty()); // This should fail if baseProperty is not resolved
}

### Explanation:

- **ObjectMapper Setup**: We set up an `ObjectMapper` with default typing enabled, which is necessary for polymorphic deserialization.
- **Subtype Registration**: We register a