import static org.junit.Assert.assertEquals;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;

import org.junit.Test;

public class ClosureCompilerTest {

    private final CountDownLatch latch = new CountDownLatch(5);

    @Test
    public void testIssueBadVariableInliningInClosure() throws InterruptedException {
        testIssueBadVariableInliningInClosure(false);
        testIssueBadVariableInliningInClosure(true);
    }

    private void testIssueBadVariableInliningInClosure(boolean enableInlining) throws InterruptedException {
        // Simulate Closure Compiler behavior with and without variable inlining
        String script = enableInlining? """
            function foo() {
                var arr = [1, 2, 3, 4, 5];
                for (var i = 0, l = arr.length; i < l; i++) {
                    var j = arr[i];
                    (function() {
                        var k = j;
                        setTimeout(function() { console.log(k); }, 0);
                    })();
                }
            }
            foo();
            """ : """
            function foo() {
                var arr = [1, 2, 3, 4, 5];
                for (var i = 0, l = arr.length; i < l;