public void testArgumentsScope() {
    CompilerOptions options = CompilerOptions.newOptions().setAdvancedOptimizations(true).setCollapsePropertiesOnExternTypes(true).freeze();
    NativeFunction outerFunction = new NativeFunction(() -> {
        return new NativeFunction(() -> {
            Object[] args = { "test" };
            ScriptableObject scope = new Context().initStandardObjects();
            ScriptableObject.defineProperty(scope, "arguments", args, ScriptableObject.DONTENUM | ScriptableObject.DONTDELETE | ScriptableObject.DONTENUM);

            new ScriptableObject() {
                @Override
                public Object exec(ExecState exec, String newTarget) throws RuntimeException {
                    new Script() {
                        @Override
                        public Object exec(ExecState exec) throws RuntimeException {
                            Context cx = Context.getCurrentContext();
                            cx.call("setTimeout", scope, "function() { alert(arguments); }", 0);
                            return null;
                        }
                    }.exec(exec);

                    return null;
                }
            }.exec(options, null);

            return null;
        });
    });
    outerFunction.exec(options, null);
}