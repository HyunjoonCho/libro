public void testDateTimeSerializerBaseFormat() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new Jdk8Module());
    
    // Configure a custom date format
    SimpleModule module = new SimpleModule();
    module.addSerializer(new CustomDateSerializer(StdDateFormat.forPattern("yyyy-MM-dd")));
    mapper.registerModule(module);

    // Create a test object with @JsonFormat annotation
    TestObject testObject = new TestObject();
    testObject.date = new Date();
    
    // Serialize with custom format
    String serialized = mapper.writeValueAsString(testObject);
    assertTrue(serialized.contains("yyyy-MM-dd"));

    // Check if the format is reset to ISO8601
    String expectedPattern = "yyyy-MM-dd'T'HH:mm:ss.SSSX";
    assertTrue(serialized.contains(expectedPattern));
}

class TestObject {
    @JsonFormat(shape = JsonFormat.Shape.STRING, pattern = "yyyy-MM-dd")
    public Date date;
}

class CustomDateSerializer extends StdSerializer<Date> {
    private final StdDateFormat dateFormat;

    public CustomDateSerializer(StdDateFormat dateFormat) {
        super(Date.class);
        this.dateFormat = dateFormat;
    }

    @Override
    public void serialize(Date value, JsonGenerator gen, Serializer