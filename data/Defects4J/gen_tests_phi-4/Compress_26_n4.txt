public void testIOUtilsSkipWithCipherInputStream() {
    try {
        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(new byte[1024]);
        CipherInputStream cipherInputStream = new CipherInputStream(byteArrayInputStream, mockCipher());
        InputStream inputStream = new BufferedInputStream(cipherInputStream);

        long skipped = IOUtils.skip(inputStream, 2048);

        assertEquals(1024, skipped); // Assuming no more bytes available after the first buffer
    } catch (Exception e) {
        fail("Exception should not be thrown: " + e.getMessage());
    }
}

private Cipher mockCipher() {
    // Mock a cipher that does not modify the input, for test purposes
    return new Cipher() {
        @Override
        public String getAlgorithm() { return "Mock"; }
        @Override
        public int getBlockSize() { return 1; }
        @Override
        public int getOutputSize(int inputLen) { return inputLen; }
        @Override
        public byte[] doFinal(byte[] input, int offset, int len) { return input; }
        @Override
        public void reset() {}
        @Override
        public void update(byte input) {}
        @Override
        public void update(byte[] input, int inputOffset