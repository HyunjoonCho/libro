import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.jsontype.TypeSerializer;
import com.fasterxml.jackson.core.JsonProcessingException;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class JsonStreamContextsTest {

    @Test
    public void testJsonStreamContexts() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        mapper.enable(SerializationFeature.INDENT_OUTPUT);

        ByteArrayOutputStream out = new ByteArrayOutputStream();
        JsonGenerator gen = mapper.getFactory().createGenerator(out);

        MyCustomSerializer serializer = new MyCustomSerializer();
        serializer.serialize("testValue", gen, new SerializerProvider(), TypeSerializer.constructDefault(null), null);

        String result = new String(out.toByteArray());
        assertEquals("{\"value\":\"testValue\",\"context\":\"write\"}", result);
    }

    static class MyCustomSerializer {
        public void serialize(Object value, JsonGenerator gen, SerializerProvider serializers, TypeSerializer typeSer, Object filterId) throws IOException {
            gen.writeStartObject();
            gen.writeStringField("value", (String) value);
            gen.writeString