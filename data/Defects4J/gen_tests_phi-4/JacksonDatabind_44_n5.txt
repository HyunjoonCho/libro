public void testPolymorphicTypeResolution() {
    ObjectMapper mapper = new ObjectMapper().enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);
    
    String json = "{\"type\":\"subtype\",\"subProperty\":\"value\"}";
    
    try {
        BaseClass obj = mapper.readValue(json, BaseClass.class);
        assertEquals("value", obj.getSubProperty());
    } catch (IOException e) {
        fail("Failed to deserialize JSON: " + e.getMessage());
    }
}

abstract class BaseClass {
    private String subProperty;

    public String getSubProperty() {
        return subProperty;
    }
}

class SubType extends BaseClass {
    // SubType specific fields and methods
}

In this test, `BaseClass` is an abstract class, and `SubType` is its subclass. The test checks if the `subProperty` from `SubType` is correctly resolved when deserializing JSON with polymorphic type handling.