public void testCompilerRemovesFunctionProperties() {
    // Setup
    Map<String, Function> map = new HashMap<>();
    Function f1 = () -> System.out.println("f1");
    f1.alwaysCall = true; // Assume a custom annotation/property mechanism
    Function f2 = () -> System.out.println("f2");

    map.put("f1", f1);
    map.put("f2", f2);

    // Simulate the behavior of the original JavaScript code
    String key = Math.random() > 0.5? "f1" : "f2";
    Function functionToCall = map.get(key);

    // Simulate property check
    if (functionToCall.alwaysCall) {
        functionToCall.call();
    } else {
        System.out.println("Function should not be called");
    }

    // Assert expected behavior
    // This is a mock example, in a real test you would use a mocking framework
    Assert.assertTrue(functionToCall.alwaysCall);
}

**Note:** The above Java code uses a hypothetical `Function` class with a `call` method and `alwaysCall` property. In a real scenario, you would need to define this class