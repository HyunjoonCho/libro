public void testPoissonDistributionImpl() {
    NormalDistribution originalNormal = new NormalDistribution(0, 1);
    PoissonDistributionImpl poisson = new PoissonDistributionImpl(5.0, originalNormal);

    // Change the state of the NormalDistribution after the PoissonDistributionImpl is created
    originalNormal.setMean(1.0);

    // Check if the change in the original NormalDistribution affects the PoissonDistributionImpl
    assertNotEquals(0, poisson.getNormal().getMean(), "The NormalDistribution within PoissonDistributionImpl should not be affected by changes to the original NormalDistribution");
}

**Explanation:**

- The test creates a `PoissonDistributionImpl` object with a `NormalDistribution` instance.
- It then modifies the `NormalDistribution` after the `PoissonDistributionImpl` is created.
- The test checks if the internal `NormalDistribution` within `PoissonDistributionImpl` is affected by changes to the external `NormalDistribution`, which should not be the case if the class were immutable.