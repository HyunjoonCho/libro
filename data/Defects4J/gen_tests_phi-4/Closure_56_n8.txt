import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class CompilerOutputTest {

    @Test
    public void testLastWarningOrErrorTruncation() {
        String[] expectedOutput = {
            "test.js:1: ERROR - variable foo is undefined",
            "alert(foo);",
            " ^",
            "test.js:2: ERROR - variable bar is undefined",
            "",
            "2 error(s), 0 warning(s)"
        };

        String[] actualOutput = runCompiler("test.js");

        assertEquals("The last error or warning is truncated.", expectedOutput.length, actualOutput.length);
        assertEquals("The last error message is incorrect.", expectedOutput[4], actualOutput[4]);
    }

    private String[] runCompiler(String fileName) {
        // Simulate running the compiler and capturing its output
        // This is a placeholder for the actual compiler execution logic
        return new String[]{
            "test.js:1: ERROR - variable foo is undefined",
            "alert(foo);",
            " ^",
            "test.js:2: ERROR - variable bar is undefined",
            "",  // Note the missing line number and caret
            "2 error(s), 0 warning(s)"
        };
    }