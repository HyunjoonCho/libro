public void testStackOverflowInCreatePath() {
    Map map = new HashMap();
    map.put("a", null);

    JXPathContext pathContext = JXPathContext.newContext(map);
    pathContext.setFactory(new AbstractFactory() {
        public boolean createObject(
            JXPathContext context, Pointer pointer, Object parent, 
            String name, int index) {
            
            if (pointer instanceof NodePointer) {
                index = ((NodePointer)pointer).getIndex();
            }
            Map parentMap = (Map)parent;
            if (index > -1) {
                List list = (List)parentMap.get(name);
                if (list == null) {
                    list = new ArrayList();
                }
                parentMap.put(name, list);
            } else {
                parentMap.put(name, new HashMap());
            }
            return true;
        }
    });

    pathContext.createPath("a/b[1]/c");
    try {
        pathContext.createPath("a/b[2]/c");
        fail("Expected StackOverflowError");
    } catch (StackOverflowError e) {
        // Test passes as StackOverflowError is expected
    }
}