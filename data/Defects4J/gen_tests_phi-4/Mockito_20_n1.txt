import org.junit.Test;
import static org.junit.Assert.assertEquals;
import org.mockito.MockitoAnnotations;
import org.mockito.Mockito;

public class MockingAbstractClassTest {

    public interface UserAccount {
        List<String> getEmails();
        void addEmail(String email);
    }

    public abstract class FakeUserAccount implements UserAccount {
        private final List<String> emails = new ArrayList<>();

        @Override
        public void addEmail(String email) {
            emails.add(email);
        }

        @Override
        public List<String> getEmails() {
            return ImmutableList.copyOf(emails);
        }
    }

    public UserAccount userAccount;

    @Test
    public void testFakeUserAccount() {
        MockitoAnnotations.initMocks(this);

        // Create an instance of the abstract class using Mockito
        userAccount = Mockito.mock(FakeUserAccount.class, Mockito.RETURNS_DEEP_STUBS);

        userAccount.addEmail("test@example.com");
        assertEquals(Collections.singletonList("test@example.com"), userAccount.getEmails());
    }
}

### Explanation:
This test method demonstrates how to use Mockito to create a spy on an abstract class, `FakeUserAccount`, which implements the `UserAccount` interface. The `RETURNS_DEEP_STUBS`