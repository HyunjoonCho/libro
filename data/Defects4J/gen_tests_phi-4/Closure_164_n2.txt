import static org.junit.Assert.assertThrows;

import org.junit.Test;

public class FunctionTest {

    interface Function1<T, R> {
        R apply(T t);
    }

    interface Function2<T1, T2, R> {
        R apply(T1 t1, T2 t2);
    }

    public void testFunctionAssignment() {
        // first call
        func(new Function2<String, Number, Boolean>() {
            @Override
            public Boolean apply(String s, Number n) {
                return true;
            }
        });

        // second call should throw an exception
        Exception exception = assertThrows(
                ClassCastException.class,
                () -> func(new Function1<String, Boolean>() {
                    @Override
                    public Boolean apply(String s) {
                        return true;
                    }
                })
        );

        String expectedMessage = "cannot be assigned";
        String actualMessage = exception.getMessage();

        // Make sure the exception message contains the expected text
        assertTrue(actualMessage.contains(expectedMessage));
    }

    private void func(Function2<String, Number, Boolean> param) {
        // Implementation not relevant for the test
    }
}