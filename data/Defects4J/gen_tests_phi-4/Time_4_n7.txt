public void testInvalidPartials() {
    try {
        new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });
        fail("Expected Types array must not contain duplicate exception");
    } catch (IllegalArgumentException e) {
        assertEquals("Types array must not contain duplicate", e.getMessage());
    }

    Partial partial1 = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);
    Partial partial2 = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);

    try {
        partial1.isEqual(partial2);
        fail("Expected objects must have matching field types exception");
    } catch (IllegalArgumentException e) {
        assertEquals("objects must have matching field types", e.getMessage());
    }
}

**Note:** This code assumes that `clockhourOfDay()` and `hourOfDay()` are available methods returning `DateTimeFieldType` instances, and that `Partial` is the class with the specified behavior. Adjust as necessary based on actual method and class names in your codebase.