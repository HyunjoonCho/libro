public void testJacksonFailOnInvalidSubtype() throws IOException {
    final ObjectMapper objectMapper = new ObjectMapper().disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
            DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    // Test case 1: Can't read item2 - which is valid
    String json1 = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";
    CallRecord callRecord1 = objectMapper.readValue(json1, CallRecord.class);
    assertEquals("CallRecord [version=0.0, application=123, item=Event [location=location1]]", callRecord1.toString());

    // Test case 2: Can't read item2 - which is valid
    String json2 = "{\"version\":0.0,\"application\":\"123\"},{\"item\":{\"type\":\"xevent\",\"location\":\"location1\"}}";
    CallRecord callRecord2 = objectMapper.readValue(json2, CallRecord.class);
    assertEquals("CallRecord [version=0.0, application=123]", callRecord2.toString());

    // Test case 3: Order matters