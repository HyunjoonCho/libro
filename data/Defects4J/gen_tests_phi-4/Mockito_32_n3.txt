public void testMockitoPackagePrivateClass() {
    // Assuming there are classes A and B where:
    // A is a package-private class
    // B is a public class extending A

    // Attempt to mock the public class B
    B mockB = mock(B.class);
    doReturn("mocked").when(mockB).someMethod();

    // This call should invoke the real method instead of the stubbed one
    assertEquals("real", mockB.someMethod());

    // Subsequent attempt to mock should throw an exception
    try {
        B anotherMockB = mock(B.class);
        fail("Expected an exception to be thrown when trying to mock B again.");
    } catch (Exception e) {
        assertTrue(e.getMessage().contains("could not be proxied"));
    }
}

Note: This test assumes that `someMethod()` is a method defined in class `B` that returns `"real"` when called on an actual instance of `B`. Adjust the method name and return values according to your actual implementation.