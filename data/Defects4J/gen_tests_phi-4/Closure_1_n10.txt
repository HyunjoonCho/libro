public void testFunctionArgumentOptimization() {
    String input = 
        "// ==ClosureCompiler==\n" +
        "// @compilation_level SIMPLE_OPTIMIZATIONS\n" +
        "// @output_file_name default.js\n" +
        "// ==/ClosureCompiler==\n" +
        "function foo (bar, baz) {\n" +
        " return bar;\n" +
        "}\n" +
        "alert (foo.length);\n" +
        "function foo (bar, baz) {\n" +
        " return bar;\n" +
        "}\n" +
        "alert (foo.length);";

    String expectedOutput = 
        "function foo(a,b){return a}alert(foo.length);" +
        "function foo(a,b){return a}alert(foo.length);";

    String actualOutput = ClosureCompiler.compile(input);

    assertEquals(expectedOutput, actualOutput);
}

Note: This test assumes the existence of a `ClosureCompiler` class with a `compile` method that simulates the behavior of the Closure Compiler as described in the bug report. Since the actual Closure Compiler is a JavaScript tool, you'd need a Java integration to run this test, which is not possible in a typical Java environment