public void testLevenbergMarquardtInconsistency() {
    // Assuming an example setup for the optimization problem
    Optimizer optimizer = new Optimizer();
    VectorialPointValuePair result = optimizer.doOptimize(initialGuess);

    // Mock or setup expected cost and residuals based on the initial guess
    double expectedCost = calculateExpectedCost(initialGuess);
    double[] expectedResiduals = calculateExpectedResiduals(initialGuess);

    // Check if the result cost and residuals correspond to the result point
    assertEquals(expectedCost, result.getCost(), 1e-6);
    assertArrayEquals(expectedResiduals, result.getResiduals(), 1e-6);

    // Optionally, verify if the result point actually corresponds to the expected residuals and cost
    double recalculatedCost = calculateCost(result.getPoint());
    double[] recalculatedResiduals = calculateResiduals(result.getPoint());

    assertEquals(recalculatedCost, result.getCost(), 1e-6);
    assertArrayEquals(recalculatedResiduals, result.getResiduals(), 1e-6);
}

private double calculateExpectedCost(double[] point) {
    // Implement the logic to calculate the expected cost based on the