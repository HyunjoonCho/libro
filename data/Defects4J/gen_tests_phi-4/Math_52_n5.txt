public void testNumericalProblemsInRotationCreation() {
    double[][] uVectors = {
        {-4921140.837095533, -2.1512094250440013E7, -890093.279426377},
        {-2.7238580938724895E9, -2.169664921341876E9, 6.749688708885301E10}
    };
    double[][] vVectors = {
        {1, 0, 0},
        {0, 0, 1}
    };

    // Assuming a method computeRotationQuaternion exists that performs the described operations
    double[] kResult = computeRotationQuaternion(uVectors, vVectors);
    double cResult = computeScalarProduct(kResult, uVectors);

    // Expected results from high precision calculations
    double[] expectedK = {38514410.36093388, -0.374075245201180409222711, -1168590152.10599715208};
    double expectedC = 558382746168463196.7079627;

    // Asserting the results are close to the expected high precision results
    assertArrayEquals(expectedK, kResult, 1e-5