public void testTreeTraversingParserIntOverflow() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    JsonNode tree = mapper.readTree("{\"x\": 1e10}");
    Object valueFromTree = mapper.readerFor(IntClass.class).readValue(tree);
    assertEquals(Integer.toString(Integer.MAX_VALUE), valueFromTree.toString());

    try {
        mapper.readerFor(IntClass.class).readValue("{\"x\": 1e10}");
        fail("Expected JsonMappingException for overflow when reading from string");
    } catch (JsonMappingException e) {
        // Expected exception
    }
}

public static class IntClass {
    public int x;

    @Override
    public String toString() {
        return String.valueOf(x);
    }
}

This test method reproduces the behavior described in the bug report by demonstrating that the `TreeTraversingParser` does not throw an exception for integer overflow when reading from a `JsonNode` (tree), while it does when reading directly from a JSON string. The test confirms that `1e10` is coerced to `Integer.MAX_VALUE` when read from a tree, but results in a `JsonMappingException` when read from a string.