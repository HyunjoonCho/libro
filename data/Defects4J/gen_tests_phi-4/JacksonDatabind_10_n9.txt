public void testJsonAnyGetterWithJsonSerialize() throws Exception {
    // Create an instance of the class with parameters
    MyClass myObject = new MyClass();
    myObject.setParameters(Map.of("key1", "value1", "key2", "value2"));

    // Create an ObjectMapper instance
    ObjectMapper mapper = new ObjectMapper();

    // Serialize the object to JSON
    String jsonString = mapper.writeValueAsString(myObject);

    // Expected JSON string using default serialization (not using MySerializer)
    String expectedJsonString = "{\"key1\":\"value1\",\"key2\":\"value2\"}";

    // Assert that the serialized JSON matches the expected output
    assertEquals(expectedJsonString, jsonString);
}

// Assuming MyClass is defined as follows:
class MyClass {
    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }

    private Map<String, String