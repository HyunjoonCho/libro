public void testTooLargeFirstStepWithEmbeddedRungeKutta() {
    // Assuming a method that sets up and runs the integrator
    // and returns the number of function evaluations
    double[] initialCondition = { /* appropriate initial condition */ };
    double tStart = 0.0;
    double tEnd = 0.0001;  // extremely short integration range
    double firstStepSize = 0.1;  // too large first step size

    // Configure the integrator with Dormand-Prince 8(5,3) method
    AdaptiveIntegrator integrator = new DormandPrince853Integrator();
    integrator.setInitialStepSize(firstStepSize);
    integrator.setInitialValueArray(initialCondition);

    // Run the integrator
    double[] finalState = integrator.integrate(tStart, tEnd);

    // Check that the integrator did not evaluate the function out of the range
    // Assuming a method that retrieves the number of evaluations
    int evaluations = integrator.getFunctionEvaluations();
    assertTrue(evaluations > 0);  // Ensure some evaluations occurred
    assertTrue(finalState!= null);  // Ensure the integration completed
    // Additional assertions