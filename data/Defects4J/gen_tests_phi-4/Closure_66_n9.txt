public void testEnumTypingIssue() {
    // Assuming NS.keys is represented as a map in Java
    Map<String, Integer> NS_keys = new HashMap<>();
    NS_keys.put("a", 1);
    NS_keys.put("b", 2);
    NS_keys.put("c", 3);

    // Simulating the expected type behavior
    // In Java, we can use an enum to ensure type safety
    enum KeyEnum {
        A(1), B(2), C(3);

        private final int value;

        KeyEnum(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }

    // Test to ensure the enum is typed correctly
    assertEquals(1, KeyEnum.A.getValue());
    assertEquals(2, KeyEnum.B.getValue());
    assertEquals(3, KeyEnum.C.getValue());

    // Simulate the issue where the enum should not be un-typed
    assertEquals(NS_keys.get("a"), KeyEnum.A.getValue());
    assertEquals(NS_keys.get("b"), KeyEnum.B.getValue());
    assertEquals(NS_keys.get("c"), KeyEnum.C.getValue());
}