public void testBrentOptimizerBestPoint() {
    double[] initialInterval = {0.0, 1.0};
    UnivariateRealFunction f = x -> Math.sin(10 * x) * x; // Example function with multiple local extrema
    BrentOptimizer optimizer = new BrentOptimizer();
    double[] min = optimizer.optimize(f, initialInterval, 1e-6);
    
    // Manually calculate the approximate global minimum in the interval [0, 1] for the given function
    double expectedMinimumX = 0.1; // Approximate location of a global minimum
    double expectedMinimumY = f.value(expectedMinimumX);
    
    double minY = f.value(min[0]);
    assertTrue("Optimizer did not return the best point.", minY <= expectedMinimumY);
}