public void testNextZipEntryDifferentiation() {
    try (ZipArchiveInputStream zais = new ZipArchiveInputStream(new ByteArrayInputStream(createZipWithInvalidEntry()))) {
        ZipArchiveEntry entry = zais.getNextZipEntry();
        assertNotNull("First entry should not be null", entry);
        entry = zais.getNextZipEntry();
        assertThrows("Should throw an exception for an invalid zip entry", ZipException.class, () -> zais.getNextZipEntry());
    }
}

private byte[] createZipWithInvalidEntry() {
    // Create a byte array representing a zip file with an invalid entry
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    try (ZipArchiveOutputStream zaos = new ZipArchiveOutputStream(baos)) {
        ZipArchiveEntry validEntry = new ZipArchiveEntry("valid.txt");
        zaos.putArchiveEntry(validEntry);
        zaos.closeArchiveEntry();
        zaos.write("Valid content".getBytes());
        zaos.putArchiveEntry(new ZipArchiveEntry("invalid-entry")); // Malformed entry
        zaos.closeArchiveEntry();
    }
    return baos.toByteArray();
}