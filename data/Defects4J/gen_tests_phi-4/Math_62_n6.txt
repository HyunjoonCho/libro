public void testBrentOptimizerConvergenceChecker() {
    ConvergenceChecker<UnivariatePointValuePair> checker = new ConvergenceChecker<UnivariatePointValuePair>() {
        @Override
        public boolean converged(int iteration, final UnivariatePointValuePair previous, final UnivariatePointValuePair current) {
            return Math.abs(current.getValue() - previous.getValue()) < 1e-8;
        }
    };

    UnivariateFunction function = new UnivariateFunction() {
        @Override
        public double value(double x) {
            return Math.pow(x - 2, 2);
        }
    };

    BrentOptimizer optimizer = new BrentOptimizer(1000, 1e-8, 1e-8, checker);
    double solution = optimizer.optimize(0, 4, function).getPoint();
    assertEquals(2.0, solution, 1e-8);
}