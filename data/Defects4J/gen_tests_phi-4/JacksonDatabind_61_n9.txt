public void testDeserializationPrimitiveLongWithTypeResolution() throws IOException {
    // Create test data
    Data data = new Data();
    data.key = 1;
    Map<String, Object> mapData = new HashMap<>();
    mapData.put("longInMap", 2L);
    mapData.put("longAsField", data);

    // Configure Jackson to preserve types
    JsonFactory factory = new JsonFactory();
    ObjectMapper mapper = new ObjectMapper(factory);
    StdTypeResolverBuilder resolver = new StdTypeResolverBuilder();
    resolver.init(JsonTypeInfo.Id.CLASS, null);
    resolver.inclusion(JsonTypeInfo.As.PROPERTY);
    resolver.typeProperty("__t");
    mapper.setDefaultTyping(resolver);
    mapper.enable(SerializationFeature.INDENT_OUTPUT);

    // Serialize
    String json = mapper.writeValueAsString(mapData);

    // Attempt to deserialize, expecting an exception
    Exception exception = assertThrows(JsonMappingException.class, () -> {
        mapper.readValue(json, Map.class);
    });

    // Verify exception message
    String expectedMessage = "Class java.lang.Long not subtype of [simple type, class long]";
    assertTrue(exception.getMessage().contains(expectedMessage));
}