public void testTypeAliasesInAnnotations() {
    // Assuming we have a method to simulate the behavior of the JS code
    String code = "goog.provide('foo.Foo');\n" +
                  "goog.provide('foo.Foo.Bar');\n\n" +
                  "goog.scope(function() {\n" +
                  " var Foo = foo.Foo;\n" +
                  " Foo.Bar = function() {};\n" +
                  " /**\n" +
                  "  * @param {Foo.Bar} bar\n" +
                  "  * @constructor\n" +
                  "  */\n" +
                  " foo.Foo = function(bar) {\n" +
                  " this.bar = bar;\n" +
                  " };\n" +
                  " Foo.prototype.bar = null;\n" +
                  "});\n";

    try {
        compileCode(code);
    } catch (CompilationException e) {
        assertEquals("Bad type annotation. Unknown type Foo.Bar", e.getMessage());
    }
}

Note: The `compileCode` method and `CompilationException` are hypothetical constructs assumed to simulate the described behavior. You would need to replace them with actual logic that can compile and check for errors