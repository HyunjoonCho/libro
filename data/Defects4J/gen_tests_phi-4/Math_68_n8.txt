public void testLevenbergMarquardtOptimizerConvergenceChecker() {
    // Setup the custom convergence checker
    VectorialConvergenceChecker<double[]> customChecker = new VectorialConvergenceChecker<double[]>() {
        private final int maxIterations = 10;

        @Override
        public boolean hasConverged(EvolutionState state, int threadIndex, ParameterValue parameter, double value, double[] gradient) {
            return state.getGeneration() >= maxIterations;
        }
    };

    // Create the optimizer with the custom checker
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer(customChecker);

    // Setup the optimization problem (dummy data for illustration)
    double[] initialValues = new double[] {1.0, 2.0};
    VectorialFunction function = (double[] x) -> {
        double[] output = new double[1];
        output[0] = Math.pow(x[0] - 3, 2) + Math.pow(x[1] - 4, 2); // Target point (3, 4)
        return output;
    };

    // Run the optimization
    double[] result = optimizer.optimize(initialValues, function,