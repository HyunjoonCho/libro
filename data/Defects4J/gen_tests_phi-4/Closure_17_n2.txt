public void testConstWithTypeCast() {
    // Mock a function that simulates the behavior of the @const with type casting
    interface TwoNumbers {
        int getFirst();
        int getSecond();
    }

    @SuppressWarnings("unchecked")
    @javax.annotation.Nonnull
    static TwoNumbers SOME_DEFAULT = (TwoNumbers) new TwoNumbers() {
        @Override
        public int getFirst() {
            return 1;
        }

        @Override
        public int getSecond() {
            return 2;
        }
    };

    class HasTwoNumbers {
        @javax.annotation.Nonnull
        private final TwoNumbers twoNumbers;

        public HasTwoNumbers() {
            this.twoNumbers = getTwoNumbers();
        }

        @javax.annotation.Nonnull
        private TwoNumbers getTwoNumbers() {
            return SOME_DEFAULT;
        }
    }

    // Test that the two numbers are correctly assigned
    HasTwoNumbers instance = new HasTwoNumbers();
    assertEquals(1, instance.twoNumbers.getFirst());
    assertEquals(2, instance.twoNumbers.getSecond());
}