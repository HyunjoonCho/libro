public void testJsonSerializeAsSuperType() throws JsonMappingException {
    Foo foo = new Foo();
    ObjectMapper mapper = new ObjectMapper();

    try {
        String result = mapper.writeValueAsString(foo);
    } catch (JsonMappingException e) {
        assertEquals("Failed to widen type [simple type, class org.pharmgkb.model.AccessionIdentifier] with annotation (value org.pharmgkb.model.BaseAccessionIdentifier), from 'getReference': Class org.pharmgkb.model.BaseAccessionIdentifier not a super-type of [simple type, class org.pharmgkb.model.AccessionIdentifier]",
            e.getMessage());
    }
}

class Foo {
    @JsonSerialize(as = BaseAccessionIdentifier.class)
    @JsonDeserialize(as = BaseAccessionIdentifier.class)
    public AccessionIdentifier getReference() {
        return null; // or provide a concrete implementation if needed for the test
    }
}

interface AccessionIdentifier {
}

class BaseAccessionIdentifier implements AccessionIdentifier {
}