import static org.junit.jupiter.api.Assertions.assertThrows;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.exc.InvalidDefinitionException;
import org.junit.jupiter.api.Test;

public class ObjectMapperTest {

    @Test
    public void testReadTreeWithDefaultTypingEnabled() {
        ObjectMapper mapper = new ObjectMapper()
               .enableDefaultTyping()
               .enable(SerializationFeature.INDENT_OUTPUT)
               .disable(SerializationFeature.FAIL_ON_EMPTY_BEANS);

        Foo foo = new Foo("bar");
        String serialized = mapper.writeValueAsString(foo);

        InvalidDefinitionException exception = assertThrows(InvalidDefinitionException.class, () -> {
            JsonNode jsonNode = mapper.readTree(serialized);
        });

        // Check that the exception message matches the expected one
        String expectedMessage = "Unexpected token (START_OBJECT), expected START_ARRAY: need JSON Array to contain As.WRAPPER_ARRAY type information for class com.fasterxml.jackson.databind.JsonNode";
        assert exception.getMessage().contains(expectedMessage);
    }

    public static class Foo {
        private String bar;

        public Foo() {
        }

        public Foo(String bar) {
            this.bar = bar;
        }

        public String