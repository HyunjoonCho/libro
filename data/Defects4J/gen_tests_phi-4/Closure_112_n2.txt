public void testTemplateTypeInference() {
    // Create an anonymous class with a method expecting a functional interface
    // This simulates the template type inference issue

    @SuppressWarnings("unchecked")
    Object a = new Object() {
        public Object apply(Object input) {
            return input;
        }
    };

    // Define a functional interface to simulate the expected method signature
    @FunctionalInterface
    interface Transform<T> {
        T apply(T input);
    }

    // Create a class with a method that expects a Transform instance
    class MyClass {
        public String foo(Transform<String> transformer) {
            return "string";
        }
    }

    // Instantiate MyClass and call foo with the anonymous class as a Transform
    MyClass myClass = new MyClass();
    try {
        myClass.foo((Transform<String>) a);
        assert false : "Expected compilation error due to type inference issue";
    } catch (ClassCastException e) {
        // Expected behavior: a ClassCastException should be