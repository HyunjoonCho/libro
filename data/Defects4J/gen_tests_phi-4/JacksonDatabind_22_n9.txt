public void testCustomSerializerNotUsedWithJsonValue() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    
    // Register a custom serializer for CustomObject
    SimpleModule module = new SimpleModule();
    module.addSerializer(CustomObject.class, new CustomObjectSerializer());
    mapper.registerModule(module);
    
    // Create an instance of CustomObject with @JsonValue
    CustomObject obj = new CustomObject("test");

    // Serialize the object
    String json = mapper.writeValueAsString(obj);
    
    // Assert that the custom serializer is not used
    assertEquals("\"test\"", json); // Expecting the result of @JsonValue, not custom serialization logic
}

// Assuming these classes are defined elsewhere for the test to execute
class CustomObject {
    private String value;

    public CustomObject(String value) {
        this.value = value;
    }

    @JsonValue
    public String toJsonValue() {
        return value;
    }
}

class CustomObjectSerializer extends JsonSerializer<CustomObject> {
    @Override
    public void serialize(CustomObject value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeString("custom:" + value.toJsonValue());
    }
}