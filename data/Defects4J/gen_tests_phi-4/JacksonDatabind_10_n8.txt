public void testJsonAnyGetterWithJsonSerialize() {
    MyObject obj = new MyObject();
    obj.setParameters(Map.of("key", "value"));

    ObjectMapper mapper = new ObjectMapper();
    String serialized = mapper.writeValueAsString(obj);

    assertEquals("{\"key\":\"value\"}", serialized);
}

private static class MyObject {
    @JsonAnyGetter
    @JsonSerialize(using = MySerializer.class)
    public Map<String, String> getParameters() {
        return parameters;
    }

    private Map<String, String> parameters = new HashMap<>();
}

private static class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey(), "Serialized: " + entry.getValue());
        }
        gen.writeEndObject();
    }
}

This test method is designed to reproduce the behavior where `JsonAnyGetter` ignores the `JsonSerialize` annotation, and instead serializes the map using the default serialization logic. The expected output should use the custom serializer logic, but due to the bug, it doesn't