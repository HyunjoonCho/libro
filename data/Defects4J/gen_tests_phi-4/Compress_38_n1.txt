public void testPaxHeaderEntryNameEndingWithSlash() throws IOException {
    // Create a mock TarArchiveEntry with a PAX header name ending with '/'
    TarArchiveEntry entry = new TarArchiveEntry("some/path/");
    entry.setLinkFlag('x');
    
    // Mock the PAX header parsing behavior
    Map<String, String> paxHeaders = new HashMap<>();
    paxHeaders.put("path", "some/path/");
    entry.setPaxHeaders(paxHeaders);

    // Assert that isDirectory incorrectly returns true due to trailing slash
    assertTrue("Entry should not be marked as directory due to PAX header",!entry.isDirectory());

    // Simulate reading the entry to demonstrate the issue
    ByteArrayInputStream in = new ByteArrayInputStream(new byte[0]);
    TarArchiveInputStream tarIn = new TarArchiveInputStream(new GzipCompressorInputStream(in));
    
    // Mock the header parsing to set the entry
    tarIn.setNextEntry(entry);
    
    // Attempt to read the entry to trigger the problem
    try {
        byte[] buffer = new byte[1024];
        tarIn.read(buffer);
        fail("Expected IOException due to bad stream state");
    } catch (IOException e) {
        // Expected exception