public void testGenericTypeIdResolver() {
    ObjectMapper mapper = new ObjectMapper();
    mapper.setDefaultTyping(new DefaultTyping.Builder()
           .build());
    
    mapper.registerSubtypes(new TypeIdResolver() {
        @Override
        public Id resolveId(Type type, BeanDescription beanDesc) {
            if (type.equals(MyGenericClass.class)) {
                return new Id(MyGenericClass.class, "genericType", new TypeReference<MyGenericClass<String>>(){}.getType());
            }
            return null;
        }

        @Override
        public String idFromValue(Object value) {
            return null;
        }

        @Override
        public String idFromValueAndType(Object value, Type valueType) {
            return null;
        }
    });

    MyGenericClass<String> original = new MyGenericClass<>("test");
    String json = mapper.writeValueAsString(original);

    MyGenericClass<?> deserialized = mapper.readValue(json, MyGenericClass.class);

    assertNotEquals("test", des