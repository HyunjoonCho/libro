public void testCanInstantiateIgnoresCanCreateUsingArrayDelegate() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    try {
        mapper.readValue("[]", MyType.class);
        fail("Expected InvalidDefinitionException");
    } catch (InvalidDefinitionException e) {
        assertEquals("Cannot construct instance of `ArrayDelegateDeserializationTest$MyType` (no Creators, like default construct, exist): abstract types either need to be mapped to concrete types, have custom deserializer, or contain additional type information",
            e.getMessage());
    }
}

private static class MyTypeImpl implements MyType {
    private final List<Integer> values;

    MyTypeImpl(List<Integer> values) {
        this.values = values;
    }

    @Override
    public List<Integer> getValues() {
        return values;
    }
}

private interface MyType {
    @JsonValue
    List<Integer> getValues();

    @JsonCreator
    static MyType of(List<Integer> values) {
        return new MyTypeImpl(values);
    }
}