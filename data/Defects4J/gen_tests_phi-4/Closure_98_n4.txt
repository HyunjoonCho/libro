import org.junit.Assert;
import org.junit.Test;

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.atomic.AtomicReference;

public class ClosureCompilerTest {

    @Test
    public void testBadVariableInlining() throws InterruptedException {
        final AtomicReference<String> result = new AtomicReference<>();
        final CountDownLatch latch = new CountDownLatch(5);

        for (int i = 0; i < 5; i++) {
            final int j = i + 1;
            new Thread(() -> {
                try {
                    Thread.sleep(0);
                    result.set(String.valueOf(j));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                } finally {
                    latch.countDown();
                }
            }).start();
        }

        latch.await(); // Wait for all threads to complete

        for (int i = 1; i <= 5; i++) {
            Assert.assertEquals(String.valueOf(i), result.get());
        }
    }
}

This test method attempts to reproduce the described behavior by simulating the issue with variable inlining in a multi-threaded environment using Java threads and `AtomicReference` to capture the expected output. Each iteration should log the correct value of `j`, verifying that `k` is not incorrectly inlined