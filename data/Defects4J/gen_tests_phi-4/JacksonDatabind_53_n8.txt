public void testJsonDeserializeWithSubtype() throws Exception {
    ObjectMapper objectMapper = new ObjectMapper();

    String json = "{ \"something\": [ { \"id\": \"a-uuid\", \"property\": \"value\" } ] }";

    MyPojo pojo = objectMapper.readValue(json, MyPojo.class);

    assertTrue(pojo.getSomething().containsKey(UUID.fromString("a-uuid")));
    assertEquals("value", pojo.getSomething().get(UUID.fromString("a-uuid")).getProperty());
}

class MyPojo {
    @JsonDeserialize(as = MyHashMap.class)
    private Map<UUID, Foo> something;

    public Map<UUID, Foo> getSomething() {
        return something;
    }

    public void setSomething(Map<UUID, Foo> something) {
        this.something = something;
    }
}

class MyHashMap extends HashMap<UUID, Foo> {
    // Custom logic here
}

class Foo implements MyCustomIdInterface {
    private String id;
    private String property;

    public UUID getId() {
        return UUID.fromString(id);
    }

    public String getProperty() {
        return property;
    }
}

interface MyCustomIdInterface {
    UUID getId();
}