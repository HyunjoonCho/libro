public void testSpyingOnAbstractClass() {
    AbstractClassImpl spy = spy(new AbstractClassImpl());
    doReturn("Mocked Value").when(spy).abstractMethod();
    
    // Assuming AbstractClassImpl calls abstractMethod() internally
    String result = spy.someMethodThatCallsAbstractMethod();
    
    // Check if someMethodThatCallsAbstractMethod() returns "Mocked Value"
    assertEquals("Mocked Value", result);
}

This test sets up a spy on `AbstractClassImpl`, mocks the `abstractMethod()`, and verifies that calling a method (`someMethodThatCallsAbstractMethod()`) on the spy returns the mocked value, thus reproducing the issue where the real implementation calls the abstract method.