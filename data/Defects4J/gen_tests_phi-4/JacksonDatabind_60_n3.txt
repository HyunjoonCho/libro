import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.util.StdConverter;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class JacksonTest {

    @Test
    public void testPolymorphicTypeLostWithJsonValue() throws Exception {
        ObjectMapper mapper = new ObjectMapper();
        mapper.configure(com.fasterxml.jackson.databind.SerializationFeature.FAIL_ON_EMPTY_BEANS, false);
        mapper.enableDefaultTyping();

        CommandAPDU original = new CommandAPDU(new byte[]{1, 2, 3, 4});

        // Serialize
        String json = mapper.writeValueAsString(original);

        // Deserialize
        RemoteCall deserialized = mapper.readValue(json, RemoteCall.class);

        // Expected JSON structure
        assertEquals("[[B","AKQEAAnw8fLz9AAAAgA=", new RemoteCall(deserialized.getArgs()).getBytes());
    }

    static class CommandAPDU {
        private byte[] apdu;

        @JsonSerialize(using = ByteArraySerializer.class)
        public byte[] getBytes() {
            return apdu.clone();
        }

        @JsonDeserialize(using = ByteArrayDeserializer.class)
        @com.fasterxml.jackson