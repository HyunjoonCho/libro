public void testEnumSerialization() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    String json = "{\"enumField\":\"value1\"}";

    TestEnumEnumDeserializerTest.TestEnum expectedEnum = TestEnumEnumDeserializerTest.TestEnum.VALUE_ONE;

    TestEnumEnumDeserializerTest.TestEnum actualEnum = mapper.readValue(json, TestEnumEnumDeserializerTest.TestEnum.class);

    assertEquals(expectedEnum, actualEnum);
}

// Mock TestEnum class for the test
static class TestEnumEnumDeserializerTest {
    public enum TestEnum {
        @JsonProperty("value1")
        VALUE_ONE;

        @JsonCreator
        public static TestEnum fromValue(String value) {
            for (TestEnum enumValue : values()) {
                if (enumValue.name().equals(value)) {
                    return enumValue;
                }
            }
            throw new IllegalArgumentException("Unknown enum value: " + value);
        }
    }
}

This test method checks if the `TestEnum` can be deserialized from a JSON string using a custom `@JsonProperty` annotation to map the JSON value to the enum constant. The `@JsonCreator` method handles the mapping from the string to the enum value.