public void testCompilerRemovesFunctionProperties() {
    // Simulating the behavior of the JavaScript code
    // Original JavaScript code behavior
    final Map<String, Function> map = new HashMap<>();
    Function f1 = () -> System.out.println("f1");
    f1.alwaysCall = true; // Simulating the property addition
    Function f2 = () -> System.out.println("f2");

    map.put("f1", f1);
    map.put("f2", f2);

    // Simulating the compiled behavior
    Function compiledF1 = () -> System.out.println("f1");
    Function compiledF2 = () -> System.out.println("f2");
    Map<String, Function> compiledMap = new HashMap<>();
    compiledMap.put("f1", compiledF1);
    compiledMap.put("f2", compiledF2);

    Function selectedFunction = compiledMap.get(Math.random() > 0.5? "f1" : "f2");

    // In the original JavaScript code, it checks for a property 'alwaysCall'
    // In the compiled version, this property is missing
    if ("original".equals(selectedFunction.getClass().getSimpleName())) {
        if (((Function) selectedFunction