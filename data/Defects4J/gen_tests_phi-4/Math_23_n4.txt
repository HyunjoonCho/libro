public void testBrentOptimizerBestPoint() {
    UnivariateFunction func = new UnivariateFunction() {
        @Override
        public double value(double x) {
            return Math.cos(x); // A function with multiple local minima
        }
    };

    BrentOptimizer optimizer = new BrentOptimizer();
    optimizer.setAbsoluteAccuracy(1e-10);
    optimizer.setMaxEval(1000);
    
    double min = optimizer.optimize(0.0, 10.0, func);
    double minValue = func.value(min);

    double pointBeforeLast = optimizer.getPointBeforeLast();
    double valueBeforeLast = func.value(pointBeforeLast);

    assertTrue(minValue <= valueBeforeLast, "The returned minimum should be less than or equal to the point before last evaluated.");
}