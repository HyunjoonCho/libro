public void testDateTimeSerializerBaseIgnoresConfiguredDateFormat() {
    ObjectMapper mapper = new ObjectMapper();
    StdDateFormat customDateFormat = new StdDateFormat("yyyy-MM-dd");
    
    // Configure the ObjectMapper with a custom date format
    mapper.setDateFormat(customDateFormat);
    
    // Annotate the test field with @JsonFormat, but do not specify a custom format
    class TestClass {
        @JsonFormat(shape = JsonFormat.Shape.STRING)
        private Date testDate;
        
        public Date getTestDate() {
            return testDate;
        }
        
        public void setTestDate(Date testDate) {
            this.testDate = testDate;
        }
    }
    
    TestClass testInstance = new TestClass();
    testInstance.setTestDate(new Date());
    
    // Serialize the object
    String serialized = mapper.writeValueAsString(testInstance);
    
    // Deserialize the object back
    TestClass deserialized = mapper.readValue(serialized, TestClass.class);
    
    // Check if the date format used during serialization matches the configured format
    String expectedFormat = customDateFormat.toPattern();
    String actualFormat = new StdDateFormat(serialized).toPattern();
    
    assertEquals(expectedFormat, actualFormat);
}