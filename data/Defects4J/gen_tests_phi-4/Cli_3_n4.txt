public void testPosixParserInterruptsTargetOpt() {
    Options options = new Options();
    Option generateTarget = Option.builder("t")
                                 .longOpt("target")
                                 .hasArg()
                                 .desc("Generate files for the specified target machine")
                                 .build();
    options.addOption(generateTarget);

    PosixParser parser = new PosixParser();
    try {
        parser.parse(options, new String[]{"-target", "foobar.com"});
        fail("Expected ParseException to be thrown for '-target foobar.com'");
    } catch (ParseException pe) {
        // Expected exception
    }

    String result = new CommandLine(new TestMain()).parseWithHandler(
        new OptionsHandler(), options, new String[]{"-target", "foobar.com"});
    assertEquals("processing selected target: arget", result);
}

private class OptionsHandler implements CommandLine.IParser.Handler {
    private String result;

    @Override
    public boolean parse(Option option) {
        if ("t".equals(option.getOpt()) || "target".equals(option.getLongOpt())) {
            result = "processing selected target: " + option.getValue(opt);
        }
        return true;
    }

    public String getResult() {
        return result;
    }
}

private class Test