public void testLevenbergMarquardtOptimizerConvergenceChecker() {
    MultiValueFunction function = new MultiValueFunction() {
        public Point evaluate(final Point point) {
            double[] values = new double[2];
            values[0] = point.getValue(0) * point.getValue(0) + point.getValue(1) * point.getValue(1) - 4;
            values[1] = point.getValue(0) * point.getValue(0) - point.getValue(1) * point.getValue(1);
            return new Point(values);
        }
    };

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    VectorialConvergenceChecker<Point> convergenceChecker = new VectorialConvergenceChecker<Point>() {
        private final double tolerance = 1e-3;
        private final int maxIterations = 10;

        @Override
        public boolean converged(final Point previous, final Point current, final Point previousStep, final Point currentStep, final int iteration, final double value) {
            return iteration >= maxIterations || current.getNorm() < tolerance;
        }
    };

    Point startPoint = new Point(new double[]{1.0, 1.0});