public void testInjectMocksFinalField() throws Exception {
    MyClass myClass = new MyClass();
    MyDependency myDependency = mock(MyDependency.class);

    Field field = MyClass.class.getDeclaredField("myDependency");
    field.setAccessible(true);
    field.set(myClass, myDependency);

    // Now you can call methods on myClass and verify interactions with myDependency
    myClass.someMethod();
    verify(myDependency).someDependencyMethod();
}

In this example, `MyClass` has a final field named `myDependency`. We first obtain a reference to this field using reflection, then set its accessible flag to true to bypass Java's access control checks. Finally, we set the field's value to our mock object.

Note that while this approach allows you to inject dependencies into final fields, it should be used sparingly as it can make your tests harder to understand and