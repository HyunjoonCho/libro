public void testLevenbergMarquardtOptimizer() throws Exception {
    double[] target = { 1.0, 2.0 };
    RealVector point = new ArrayRealVector(new double[]{0.5, 1.5});
    MultivariateFunction function = new MultivariateFunction() {
        public double value(double[] point) {
            return Math.pow(point[0] - 1.0, 2) + Math.pow(point[1] - 2.0, 2);
        }
    };

    VectorialConvergenceChecker checker = new SimpleVectorialConvergenceChecker(1e-6, 1e-6);

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    optimizer.setConvergenceChecker(checker);

    PointValuePair optimum = optimizer.optimize(
        ConvergenceCheckerFactory.createDefault(),
        new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE),
        GoalType.MINIMIZE,
        function,
        point);

    assertFalse(optimum.equals(optimizer.optimize(
        ConvergenceCheckerFactory.createDefault(),
        new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradient