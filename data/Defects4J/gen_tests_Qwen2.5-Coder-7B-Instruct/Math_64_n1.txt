public void testLevenbergMarquardtInconsistency() throws Exception {
    // Create a mock objective function and derivatives
    MultivariateFunction f = new MultivariateFunction() {
        public double value(double[] x) {
            return Math.pow(x[0], 2) + Math.pow(x[1], 2);
        }
    };

    MultivariateJacobianFunction jacobian = new MultivariateJacobianFunction() {
        public double[][] value(double[] x) {
            return new double[][] {
                {2 * x[0], 0},
                {0, 2 * x[1]}
            };
        }
    };

    // Create a starting point
    double[] startPoint = {1.5, 1.5};

    // Perform optimization using Levenberg-Marquardt algorithm
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    PointValuePair result = optimizer.optimize(new MaxIter evaluations, f, jacobian, startPoint);

    // Check that the result is consistent
    assertEquals(0.0, result.getValue(), 1e-6);
    assertEquals(0.0, result.getPoint()[0], 1e-6);