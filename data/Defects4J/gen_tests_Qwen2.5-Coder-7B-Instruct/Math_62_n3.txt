public void testMATH_394() {
    // Arrange
    BrentOptimizer brentOptimizer = new BrentOptimizer();

    // Act & Assert
    try {
        brentOptimizer.optimize(new UnivariateObjectiveFunction(x -> x), GoalType.MINIMIZE, 0, 1);
        fail("Expected ConvergenceException");
    } catch (ConvergenceException e) {
        // Expected exception
    }
}

public void testMATH_397() {
    // Arrange
    LevenbergMarquardtOptimizer lmOptimizer = new LevenbergMarquardtOptimizer();
    double[] target = {1, 2};
    double[][] observed = {{1.1, 2.1}, {1.2, 2.2}};
    MultivariateJacobianFunction jacobian = x -> new double[][]{{1, 0}, {0, 1}};

    // Act & Assert
    try {
        lmOptimizer.optimize(new LeastSquaresProblem.Builder()
               .model(jacobian)
               .target(target)
               .weightMatrix(MatrixUtils.createRealIdentityMatrix(2))
               .start(new ArrayRealVector(new double[]{0, 0}))
               .build())
               .getPoint();