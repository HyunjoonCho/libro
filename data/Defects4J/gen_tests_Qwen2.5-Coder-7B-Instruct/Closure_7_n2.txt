import static com.google.common.base.Preconditions.checkNotNull;
import org.junit.Test;
import static org.junit.Assert.*;

public class TestBadTypeInference {

  public interface Function<T> {
    T apply();
  }

  public static class TestClass {
    private int length;

    public int getLength() {
      return length;
    }
  }

  @Test
  public void testIsMatched() {
    Object obj = new TestClass();
    assertFalse(test.isMatched(obj));
  }

  public static boolean isMatched(Object object) {
    checkNotNull(object);
    if (object instanceof Function<?>) {
      // return ((Function<?>) object).apply();
    } else if (object instanceof Boolean) {
      // return (Boolean) object;
    } else if (object instanceof String) {
      // return isDef((String) object);
    } else if (object instanceof Iterable<?>) {
      // var i = object.length;
    }
    return false;
  }

  private static <T> boolean isDef(T value) {
    return value!= null;
  }
}