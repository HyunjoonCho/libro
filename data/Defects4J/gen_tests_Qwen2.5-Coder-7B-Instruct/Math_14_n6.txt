public void testMultivariateVectorOptimizersWithLargeWeights() {
    int numberOfPoints = 41200;
    double[] weights = new double[numberOfPoints];
    for (int i = 0; i < numberOfPoints; i++) {
        weights[i] = i;
    }

    // Create a dummy objective function
    MultivariateFunction objectiveFunction = new MultivariateFunction() {
        @Override
        public double value(double[] point) {
            return 0.0;
        }
    };

    // Attempt to use the weights with a multivariate optimizer
    try {
        SimpleQPSolver solver = new SimpleQPSolver();
        RealMatrix hessian = MatrixUtils.createRealIdentityMatrix(numberOfPoints);
        RealVector gradient = VectorUtils.createRealVector(weights.length, 0.0);
        PointValuePair result = solver.optimize(new QuadraticObjectiveFunction(hessian, true, gradient),
                GoalType.MINIMIZE, new NonNegativeConstraint(true));
        fail("Expected OutOfMemoryError due to large weight matrix creation");
    } catch (OutOfMemoryError e) {
        // Expected exception
    }
}