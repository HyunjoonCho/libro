public void testEnumPolymorphicDeserialization() throws Exception {
    String json = "{\n" +
            "  \"kind\": \"CONTACT\",\n" +
            "  \"to\": {\n" +
            "    \"name\": \"Foo\"\n" +
            "  }\n" +
            "}";
    ObjectMapper mapper = new ObjectMapper();
    mapper.registerModule(new KotlinModule());
    try {
        mapper.readValue(json, Kind.class);
        fail("Expected JsonMappingException");
    } catch (JsonMappingException e) {
        assertTrue(e.getCause() instanceof IllegalArgumentException);
        assertEquals("argument type mismatch", e.getCause().getMessage());
    }
}

private static class Kind {
    public String kind;
    public To to;

    @JsonDeserialize(using = ToDeserializer.class)
    private static class To {
        public String name;
    }

    private static class ToDeserializer extends StdDeserializer<To> {
        protected ToDeserializer() {
            super(To.class);
        }

        @Override
        public To deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            JsonNode node = p.getCodec().readTree(p);
            return new To();
        }
    }
}