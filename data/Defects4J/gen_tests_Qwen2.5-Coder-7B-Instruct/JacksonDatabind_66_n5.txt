import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;

import static org.junit.Assert.assertEquals;

public class TestCustomEnumDeserializer {

    @Test(expected = IOException.class)
    public void testCustomEnumDeserializerFailsWithoutTypeInfo() throws IOException {
        ObjectMapper mapper = new ObjectMapper();
        SimpleModule module = new SimpleModule();
        module.addDeserializer(MyEnum.class, new StdDeserializer<MyEnum>(MyEnum.class) {
            @Override
            public MyEnum deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
                return MyEnum.valueOf(p.getValueAsString());
            }
        });
        mapper.registerModule(module);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        JsonGenerator jg = mapper.getFactory().createGenerator(baos);
        jg.writeStartObject();
        jg.writeObjectField("myField", MyEnum.VALUE);
        jg.writeEndObject();

        mapper.readValue(baos.toByteArray(), MyClass.class);
    }

    private static class MyClass {
        private MyEnum myField;

        public MyEnum getMyField() {
            return myField;
        }