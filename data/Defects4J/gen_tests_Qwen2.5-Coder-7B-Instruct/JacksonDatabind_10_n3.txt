public void testJsonAnyGetterWithJsonSerialize() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    MyClass obj = new MyClass();
    String json = mapper.writeValueAsString(obj);
    System.out.println(json);
}

class MyClass {
    private final Map<String, String> parameters = new HashMap<>();

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }

    static class MySerializer extends JsonSerializer<Map<String, String>> {
        @Override
        public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
            gen.writeStartObject();
            for (Map.Entry<String, String> entry : value.entrySet()) {
                gen.writeStringField(entry.getKey(), "serialized_" + entry.getValue());
            }
            gen.writeEndObject();
        }
    }
}