public void testVarCheckCrashWhenUsingModules() throws Exception {
    String jsCode = 
        "var jQuery = function() { return {}; };\n" +
        "jQuery.extend = function(obj) { return obj; };\n" +
        "jQuery.fn = {};\n" +
        "jQuery.fn.length = 1;\n" +
        "function equal(actual, expected, message) {\n" +
        "  if (actual!== expected) {\n" +
        "    throw new Error(message);\n" +
        "  }\n" +
        "}\n" +
        "equal(jQuery(\" <div/> \").length, 1, \"Make sure whitespace is trimmed.\");";

    Compiler compiler = new Compiler();
    compiler.init(new JSSourceFile("test.js", CharSource.from(jsCode)));
    compiler.addExterns(JSSourceFile.fromPath("qunit_externs.js"));
    compiler.setOptionsForTest(
        CompilerOptions.getDefaultOptions(),
        new DiagnosticGroups.Builder().all(DiagnosticGroup.ERROR).build());

    try {
      compiler.compile();
      fail("Expected a compilation error");
    } catch (CompilerException e) {
      assertTrue(e.getCause() instanceof IllegalStateException);