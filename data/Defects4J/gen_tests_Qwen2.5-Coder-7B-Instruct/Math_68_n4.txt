public void testLevenbergMarquardtOptimizer() throws Exception {
    double[] target = {1.0, 2.0};
    RealMatrix jacobian = MatrixUtils.createRealIdentityMatrix(2);
    double initialGuess[] = {0.5, 1.5};
    
    VectorialFunction func = new VectorialFunction() {
        public double[] value(double[] point) throws FunctionEvaluationException {
            return new double[] {point[0] - 1.0, point[1] - 2.0};
        }
        
        public int getDimension() {
            return 2;
        }
    };
    
    VectorialConvergenceChecker checker = new SimpleVectorialValueChecker(1e-6, 1e-6);
    
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    optimizer.setConvergenceChecker(checker);
    
    PointValuePair optimum = optimizer.optimize(
        OptimumType.MINIMIZE,
        func,
        null,
        new InitialGuess(initialGuess),
        new SimpleBounds(new double[]{0, 0}, new double[]{2, 2}),
        new Target(target),
        new Weight(new double[]{1.0