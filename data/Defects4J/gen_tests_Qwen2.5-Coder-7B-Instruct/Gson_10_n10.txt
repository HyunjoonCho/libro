public void testPrimitiveFieldAnnotationIgnoredForPrimitives() {
    Gson gson = new GsonBuilder().registerTypeAdapter(Integer.class, new TypeAdapter<Integer>() {
        @Override
        public void write(JsonWriter out, Integer value) throws IOException {
            out.value(value.toString());
        }

        @Override
        public Integer read(JsonReader in) throws IOException {
            return in.nextInt();
        }
    }).create();

    String json = gson.toJson(new PrimitiveWrapper(42));
    assertEquals("{\"value\":\"42\"}", json);

    PrimitiveWrapper wrapper = gson.fromJson(json, PrimitiveWrapper.class);
    assertEquals(42, wrapper.value.intValue());
}

private static class PrimitiveWrapper {
    @JsonAdapter(NumberTypeAdapter.class)
    final int value;

    PrimitiveWrapper(int value) {
        this.value = value;
    }
}

private static class NumberTypeAdapter extends TypeAdapter<Number> {
    @Override
    public void write(JsonWriter out, Number value) throws IOException {
        out.value(value.toString());
    }

    @Override
    public Number read(JsonReader in) throws IOException {
        switch (in.peek()) {
            case NUMBER:
                return in.nextDouble();
            case STRING:
                return Double.parseDouble(in.nextString());
            default: