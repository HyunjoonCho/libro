public void testRecordTypeProperties() {
    // Define two record types with overlapping properties
    Type<RecordType1> recordType1 = new SimpleType<>(new RecordType(JsInfo.ObjectKind.NORMAL));
    recordType1.addMember("name", Type.of(String.class));
    recordType1.addMember("id", Type.of(Number.class));

    Type<RecordType2> recordType2 = new SimpleType<>(new RecordType(JsInfo.ObjectKind.NORMAL));
    recordType2.addMember("name2", Type.of(String.class));

    // Create a function that takes a RecordType1 parameter
    FunctionDeclaration func = new FunctionDeclaration(
        "func",
        new ParameterList(new Parameter("rec", recordType1)),
        new BlockStatement(
            new ExpressionStatement(
                new CallExpression(
                    new MemberExpression(new Identifier("alert"), "call"),
                    new ThisExpression(),
                    new MemberExpression(new Identifier("rec"), "name2")
                )
            )
        )
    );

    // Test the function with a RecordType2 object
    ObjectLiteral obj = new ObjectLiteral();
    obj.addProperty("name", new StringLiteral("jim"));
    obj.addProperty("id", new NumberLiteral(0));
    obj.addProperty("name