public void testIssueWithMapTypeSpecialization() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    String json = "{\"something\":[{\"id\":\"a uuid\",\"property\":\"value\"}]}";
    
    MyClass myClass = mapper.readValue(json, MyClass.class);

    assertNotNull(myClass.getSomething());
    assertTrue(myClass.getSomething().containsKey(UUID.fromString("a uuid")));
    assertEquals("value", myClass.getSomething().get(UUID.fromString("a uuid")).getProperty());
}

class MyClass {
    private Map<UUID, Foo> something;

    public void setSomething(Map<UUID, Foo> something) {
        this.something = something;
    }

    public Map<UUID, Foo> getSomething() {
        return something;
    }
}

interface MyCustomIdInterface {
    UUID getId();
}

class Foo implements MyCustomIdInterface {
    private UUID id;
    private String property;

    public Foo(String id, String property) {
        this.id = UUID.fromString(id);
        this.property = property;
    }

    @Override
    public UUID getId() {
        return id;
    }

    public String getProperty() {
        return property;
    }
}

@JsonDeserialize(as = MyHashMap.class)
class MyHashMap extends HashMap<UUID, Foo