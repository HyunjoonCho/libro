public void testWideBoundsCMAESOptimizer() {
    double[] lowerBounds = { -Double.MAX_VALUE };
    double[] upperBounds = { Double.MAX_VALUE };
    Problem problem = new Problem(lowerBounds, upperBounds) {
        @Override
        public double evaluate(double[] point) {
            return point[0];
        }
    };
    CMAESOptimizer optimizer = new CMAESOptimizer();
    double[] initialGuess = { 0.0 };
    PointValuePair result = optimizer.optimize(problem, new InitialGuess(initialGuess));
    assertFalse(Double.isNaN(result.getPoint()[0]));
}