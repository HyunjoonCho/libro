public void testMapWithClassAsKey() throws Exception {
    Map<Class<? extends Object>, String> map = new HashMap<>();
    map.put(ArrayList.class, "ArrayList");
    map.put(HashMap.class, "HashMap");

    ObjectMapper mapper = new ObjectMapper();
    
    // Register a custom serializer/deserializer for Class type
    SimpleModule module = new SimpleModule();
    module.addSerializer(Class.class, new JsonSerializer<Class<?>>() {
        @Override
        public void serialize(Class<?> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
            gen.writeString(value.getName());
        }
    });
    module.addDeserializer(Class.class, new JsonDeserializer<Class<?>>() {
        @Override
        public Class<?> deserialize(JsonParser p, DeserializationContext ctxt) throws IOException, JsonProcessingException {
            return Class.forName(p.getText());
        }
    });
    mapper.registerModule(module);

    String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(map);
    System.out.println(json);
    Map<Class<? extends Object>, String> result = mapper.readValue(json, new TypeReference<Map<Class<? extends Object>, String>>() {});
    assertEquals(map, result);
}