public void testWideBoundsToCMAESOptimizer() {
    double[] initialGuess = { 0 };
    double[] lowerBound = { -Double.MAX_VALUE };
    double[] upperBound = { Double.MAX_VALUE };

    Problem problem = new Problem(initialGuess.length) {
        @Override
        public int getDimension() {
            return initialGuess.length;
        }

        @Override
        public double evaluate(double[] point) {
            // This method should never receive NaN values
            for (double value : point) {
                assertTrue(Double.isFinite(value));
            }
            return 0;
        }
    };

    CMAESOptimizer optimizer = new CMAESOptimizer();
    optimizer.optimize(problem, new InitialGuess(initialGuess), 
                      new SimpleBounds(lowerBound, upperBound));

    // If we reach this point without throwing an exception, the test passes
}