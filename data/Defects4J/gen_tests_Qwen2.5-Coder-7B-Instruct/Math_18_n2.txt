public void testCMAESOptimizerBounds() {
    double[] initialGuess = {0.5};
    double[] lowerBound = {0.0};
    double[] upperBound = {1.0};
    CMAESOptimizer optimizer = new CMAESOptimizer();
    optimizer.setLowerBound(lowerBound);
    optimizer.setUpperBound(upperBound);
    RealPointValuePair result = optimizer.optimize(
            new ObjectiveFunction(new Function()),
            GoalType.MINIMIZE,
            new InitialGuess(initialGuess),
            new SimpleBounds(lowerBound, upperBound)
    );
    assertEquals(0.0, result.getPoint()[0], 1e-6); // Check if it gets close to the lower bound
    assertNotEquals(1.0, result.getPoint()[0], 1e-1); // Check if it doesn't get too close to the upper bound
}

private static class Function implements MultivariateFunction {
    @Override
    public double value(double[] point) {
        return Math.pow(point[0] - 0.5, 2); // A simple quadratic function centered at 0.5
    }
}