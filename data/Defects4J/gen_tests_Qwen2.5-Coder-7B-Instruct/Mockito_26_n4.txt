@RunWith(MockitoJUnitRunner.class)
public class MyClassTest {

    @Mock
    private MyDependency myDependency;

    private MyClass myClassUnderTest;

    @Before
    public void setUp() {
        myClassUnderTest = new MyClass(myDependency);
    }

    // Your tests here...
}

In this example, `MyDependency` is the class being injected, and `myClassUnderTest` is the class containing the final field that needs to be mocked. You'll need to provide a constructor in `MyClass` that accepts `MyDependency` as a parameter. This avoids modifying your production code to support testing.

Unfortunately, there is no official way to get the `@InjectMocks` feature back. If you find this feature to be essential, you might want to consider filing a feature request at the Mockito GitHub repository.