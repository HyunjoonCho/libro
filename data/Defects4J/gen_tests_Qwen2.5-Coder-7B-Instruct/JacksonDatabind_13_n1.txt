public void testAllowNullObjectId() throws JsonProcessingException {
    ObjectMapper mapper = new ObjectMapper();
    MyClass objWithNullId = mapper.readValue("{\"id\":null}", MyClass.class);
    assertNull(objWithNullId.getId());

    try {
        mapper.readValue("{\"id\":null}", AnotherClass.class);
        fail("Expected an exception because AnotherClass does not allow null id");
    } catch (JsonMappingException e) {
        // Expected exception
    }
}

class MyClass {
    private Long id;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }
}

class AnotherClass {
    @JsonDeserialize(using = NonNullDeserializer.class)
    private Long id;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }
}

class NonNullDeserializer extends JsonDeserializer<Long> {
    @Override
    public Long deserialize(JsonParser p, DeserializationContext ctxt) 
            throws IOException, JsonProcessingException {
        Long value = p.getValueAsLong();
        if (value == null) {
            throw new JsonMappingException(p, "Id cannot be null");
        }
        return value;
    }
}