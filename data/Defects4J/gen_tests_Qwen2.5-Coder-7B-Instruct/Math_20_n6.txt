public void testCMAESOptimizerBounds() {
    double[] initialPoint = {100};
    double[] lowerBound = {0};
    double[] upperBound = {50};

    Problem problem = new AbstractProblem() {
        @Override
        public int getDimension() {
            return 1;
        }

        @Override
        public double evaluate(double[] point) {
            return Math.abs(point[0] - 25);
        }
    };

    CMAESOptimizer optimizer = new CMAESOptimizer();
    optimizer.setLowerBound(lowerBound);
    optimizer.setUpperBound(upperBound);

    PointValuePair result = optimizer.optimize(problem, GoalType.MINIMIZE, new InitialGuess(initialPoint));

    assertTrue(result.getPoint()[0] >= lowerBound[0]);
    assertTrue(result.getPoint()[0] <= upperBound[0]);
}