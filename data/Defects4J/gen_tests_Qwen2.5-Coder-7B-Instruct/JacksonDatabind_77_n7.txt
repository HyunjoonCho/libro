public void testJacksonDeserializationVulnerability() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    String json = "{\"@type\":\"com.example.VulnerableClass\", \"data\":\"maliciousData\"}";
    mapper.readValue(json, Object.class);
}

In this example, `ObjectMapper` is used to deserialize a JSON string. If the `@type` field is present in the JSON and the corresponding class (`com.example.VulnerableClass`) is available on the classpath, Jackson would try to instantiate it, which could lead to arbitrary code execution depending on the implementation of `VulnerableClass`. This test checks whether such a scenario leads to a `JsonMappingException`, indicating that the default typing feature is disabled as expected. Please replace `"com.example.VulnerableClass"` and `"maliciousData"` with actual vulnerable class and data respectively.

Note: To reproduce the vulnerability, you need to enable the `@JsonTypeInfo` annotation in your vulnerable class