public void testIllegalReflectiveAccessWarning() throws Exception {
    String requestUrl = "http://example.com";
    HttpHeaders authHeaders = new HttpHeaders();
    MyDto dto = new MyDto();

    ResponseEntity<Void> response = getRestTemplate().exchange(
            requestUrl,
            HttpMethod.PATCH,
            new HttpEntity<>(dto, authHeaders),
            Void.class
    );

    // Trigger reflection access
    Class<?> clazz = Class.forName("com.fasterxml.jackson.databind.util.ClassUtil");
    Method method = clazz.getDeclaredMethod("getConstructor", Class[].class);
    method.setAccessible(true);
    method.invoke(null, new Class[]{void.class});

    // Verify the warning message
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    PrintStream ps = new PrintStream(baos);
    System.setErr(ps);

    // Re-execute the exchange to trigger the warning again
    response = getRestTemplate().exchange(
            requestUrl,
            HttpMethod.PATCH,
            new HttpEntity<>(dto, authHeaders),
            Void.class
    );

    String errorOutput = baos.toString();
    assertTrue(errorOutput.contains("Illegal reflective access operation has occurred"));
}