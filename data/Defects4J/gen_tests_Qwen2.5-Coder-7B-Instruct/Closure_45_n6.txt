public void testAssignmentRemoved() {
    String input = "function f() { var a = [], b; a.push(b = []); b[0] = 1; return a; }";
    String expected = "function f(){var a=[];a.push([]);b=[1];return a}";
    String actual = compile(input);
    assertEquals(expected, actual);
}

private String compile(String input) {
    Compiler compiler = new Compiler();
    DiagnosticCollector<JavaFileObject> diagnostics = new DiagnosticCollector<>();
    compiler.compile(SourceVersion.latest(), diagnostics, null, Arrays.asList(new SimpleJavaFileObject(
            URI.create("string:///" + "Test.java"), Kind.SOURCE) {
        @Override
        public CharSequence getCharContent(boolean ignoreEncodingErrors) {
            return input;
        }
    }));
    if (!diagnostics.getDiagnostics().isEmpty()) {
        throw new RuntimeException(diagnostics.getDiagnostics().toString());
    }
    return compiler.toSource();
}