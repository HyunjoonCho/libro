import static com.google.common.base.Preconditions.checkNotNull;
import org.junit.Test;

public class TestBadTypeInference {

  public static class test {
    public static boolean isMatched(Object object) {
      if (checkNotNull(object)!= null) {
        if (object instanceof Function) {
          // return ((Function) object).apply();
        } else if (object instanceof Boolean) {
          // return (Boolean) object;
        } else if (object instanceof String) {
          // return isDef((String) object);
        } else if (object instanceof List) {
          int i = ((List<?>) object).size(); // This line causes the warning
        }
      }
      return false;
    }

    interface Function {
      Object apply();
    }
  }

  @Test(expected = NullPointerException.class)
  public void testIsMatchedWithNullObject() {
    test.isMatched(null);
  }

  @Test(expected = ClassCastException.class)
  public void testIsMatchedWithNonArrayObject() {
    test.isMatched("not an array");
  }

  @Test
  public void testIsMatchedWithEmptyArray() {
    test.isMatched(new ArrayList<>());
  }

  @Test
  public