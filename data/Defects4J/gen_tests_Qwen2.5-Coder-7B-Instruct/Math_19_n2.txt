public void testCMAESOptimizerWithWideBounds() {
    double[] initialGuess = {0};
    double[] lowerBound = {-Double.MAX_VALUE};
    double[] upperBound = {Double.MAX_VALUE};
    CMAESOptimizer optimizer = new CMAESOptimizer();
    optimizer.optimize(new ObjectiveFunction(), initialGuess, lowerBound, upperBound);
    // Assuming the fitness function sets parameters to NaN when called with invalid input
    assertTrue(Double.isNaN(optimizer.getOptimum().getPoint()[0]));
}