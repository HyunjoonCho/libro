public void testLevenbergMarquardtOptimizerIterations() {
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    double[] initialGuess = { 3 };
    double[] target = { 1 };
    double[] weight = { 1 };

    UnivariateRealFunction function = x -> Math.pow(x, 4);
    UnivariateRealFunction derivative = x -> 0.25 * Math.pow(x, 3);

    LeastSquaresProblem problem = new LeastSquaresBuilder()
           .model(function, derivative)
           .target(target)
           .weight(weight)
           .start(initialGuess)
           .build();

    optimizer.optimize(problem);

    assertTrue(optimizer.getEvaluations() > 0);
    assertTrue(optimizer.getIterations() > 0);
}