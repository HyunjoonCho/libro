public void testLevenbergMarquardtOptimizer() throws Exception {
    double[] target = {1.0, 2.0};
    double[] initial = {2.0, 5.0};

    ConvergenceChecker<VectorValue> checker = new SimpleVectorValueChecker(1e-6, 1e-6);

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    optimizer.setConvergenceChecker(checker);

    double[] parameters = optimizer.optimize(
            new TwiceDifferentiableMultivariateFunction() {
                public double value(double[] point) {
                    return Math.pow(point[0] - 1.0, 2) + Math.pow(point[1] - 2.0, 2);
                }

                public double[] gradient(double[] point) {
                    double[] grad = new double[point.length];
                    grad[0] = 2 * (point[0] - 1.0);
                    grad[1] = 2 * (point[1] - 2.0);
                    return grad;
                }

                public Matrix hessian(double[] point) {
                    return MatrixUtils.createRealMatrix(new double[][]{
                            {2