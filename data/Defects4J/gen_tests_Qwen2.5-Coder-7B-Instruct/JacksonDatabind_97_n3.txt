import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.junit.Before;
import org.junit.Test;

import java.io.IOException;

public class TestCaseTest {

  private static final ObjectMapper mapper = new ObjectMapper();

  @Before
  public void setUp() {
    // Ensure the ObjectMapper instance is clean before each test
  }

  @Test
  public void testCustomSerializerWithAttributes() throws IOException {
    TestCase.Data data = new TestCase.Data();
    data.aStr = "Hello";

    Map<String, Object> mapTest = new HashMap<>();
    mapTest.put("data", data);

    ObjectNode treeTest = mapper.createObjectNode();
    treeTest.putPOJO("data", data);

    String mapOut = mapper.writer().withAttribute("myAttr", "Hello!").writeValueAsString(mapTest);
    assertOutputContainsAttribute(mapOut, "Hello!");

    String treeOut = mapper.writer().withAttribute("myAttr", "Hello!").writeValueAsString(treeTest);
    assertOutputContainsAttribute(treeOut, "Hello!");
  }

  private void assertOutputContainsAttribute(String json, String expectedAttribute) {
    // Implement logic to verify that the JSON contains the expected attribute value
    // This could involve parsing the