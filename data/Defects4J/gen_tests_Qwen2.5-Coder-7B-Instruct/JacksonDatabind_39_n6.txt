public void testJacksonInvalidSubtypeError() throws IOException {
    final ObjectMapper objectMapper = new ObjectMapper()
       .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                 DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                 DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    String json = "{\"version\":0.0,\"application\":\"123\",\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";

    try {
        objectMapper.readValue(json, CallRecord.class);
        fail("Expected exception was not thrown");
    } catch (JsonMappingException e) {
        assertTrue(e.getMessage().contains("Invalid type specified for subtype of Item"));
    }

    // Verify that parsing continues even after the error
    CallRecord callRecord = objectMapper.readValue("{\"version\":0.0,\"application\":\"123\", \"item2\":{\"type\":\"event\",\"location\":\"location1\"}}", CallRecord.class);
    assertNotNull(callRecord);
    assertNull(callRecord.item);
    assertEquals("123", callRecord.application);
    assertNotNull(callRecord.item2);
}