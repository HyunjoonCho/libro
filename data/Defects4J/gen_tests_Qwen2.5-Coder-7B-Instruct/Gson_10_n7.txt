public void testJsonAdapterAnnotationIgnoredForPrimitives() {
    Gson gson = new GsonBuilder()
           .registerTypeAdapter(Integer.class, new IntegerTypeAdapter())
           .create();

    MyClass obj = new MyClass(123);
    String json = gson.toJson(obj);

    assertEquals("{\"value\":123}", json);
}

private static class MyClass {
    @JsonAdapter(IntegerTypeAdapter.class)
    int value;

    MyClass(int value) {
        this.value = value;
    }
}

private static class IntegerTypeAdapter extends TypeAdapter<Integer> {
    @Override
    public void write(JsonWriter out, Integer value) throws IOException {
        out.value("integer:" + value);
    }

    @Override
    public Integer read(JsonReader in) throws IOException {
        String next = in.nextString();
        if (!next.startsWith("integer:")) {
            throw new JsonSyntaxException("Expected integer but got: " + next);
        }
        return Integer.parseInt(next.substring(8));
    }
}