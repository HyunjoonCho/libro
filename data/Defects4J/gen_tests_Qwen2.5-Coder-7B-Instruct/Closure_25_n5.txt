public void testAnonymousObjectTypeInference() {
  String jsCode =
      "/**\n" +
      " * @param {{prop1: string, prop2: (number|undefined)}} parry\n" +
      " * @constructor\n" +
      " */\n" +
      "function callz(parry) {\n" +
      "  if (parry.prop2 && parry.prop2 < 5) alert('alright!');\n" +
      "  alert(parry.prop1);\n" +
      "}\n" +
      "\n" +
      "new callz({prop1: 'hi'});";
  Compiler compiler = new Compiler();
  compiler.init();
  DiagnosticCollector<JavaFileObject> collector = new DiagnosticCollector<>();
  compiler.compile(SourceVersion.latest(), Arrays.asList(new SimpleJavaFileObject(
      URI.create("string:///" + "Test.java"), Kind.SOURCE) {
    @Override
    public CharSequence getCharContent(boolean ignoreEncodingErrors) {
      return jsCode;
    }
  }), null, null, null, null, collector);
  List<Diagnostic<? extends JavaFileObject>> diagnostics = collector.getDiagnostics();
  assertEquals(1, diagnostics.size());
  assertEquals