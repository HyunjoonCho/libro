public void testJacksonInvalidSubtype() throws IOException {
    final ObjectMapper objectMapper = new ObjectMapper()
       .disable(DeserializationFeature.FAIL_ON_INVALID_SUBTYPE,
                 DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,
                 DeserializationFeature.FAIL_ON_IGNORED_PROPERTIES);

    String json = "{\"version\":0.0,\"application\":\"123\","
                  + "\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},"
                  + "\"item2\":{\"type\":\"event\",\"location\":\"location1\"}}";

    try {
        objectMapper.readValue(json, CallRecord.class);
        fail("Expected DeserializationException due to invalid subtype");
    } catch (DeserializationException e) {
        // Expected exception
    }

    // Verify that parsing continues even after invalid subtype
    json = "{\"version\":0.0,\"application\":\"123\","
          + "\"item\":{\"type\":\"xevent\",\"location\":\"location1\"},"
          + "\"item2\":{\"type\":\"event\",\"location\":\"location2\"}}";

    CallRecord record = objectMapper.readValue(json, CallRecord.class);
    assertNotNull(record);
    assertEquals(0.0f, record.version);
    assertEquals("123", record.application);
    assertNull(record.item);
    assertNotNull(record.item2