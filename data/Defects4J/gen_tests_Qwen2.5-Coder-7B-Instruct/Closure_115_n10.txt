public void testAdvancedOptimizations() throws Exception {
    String input = "window[\"anchor\"] = function (obj, modifiesProp) { return (function (saved) { return modifiesProp(obj) + saved; })(obj[\"prop\"]); }";
    String expectedOutput = "window.foo=function(a,b){var HOLD=a.prop;return b(a)+HOLD}";
    String actualOutput = compileWithLevel(input, CompilationLevel.ADVANCED_OPTIMIZATIONS);

    assertEquals(expectedOutput, actualOutput);
}

private String compileWithLevel(String input, CompilationLevel level) throws Exception {
    Compiler compiler = new Compiler();
    List<CompilerInput> inputs = ImmutableList.of(new CompilerInput("input.js", SourceKind.EXTERNAL, input));
    CompilerOptions options = new CompilerOptions();
    options.setCompilationLevel(level);
    options.setWarningLevel(DiagnosticGroups.WARNING, DiagnosticGroup.ALL_DIAGNOSTICS.asFlags());

    Result result = compiler.compile(inputs, null, null, options);

    if (!result.success) {
        throw new RuntimeException("Compilation failed");
    }

    return compiler.toSource();
}