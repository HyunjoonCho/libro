import static com.google.common.base.Preconditions.checkNotNull;
import org.junit.Test;

public class TestBadTypeInference {

    public static boolean isMatched(Object object) {
        if (checkNotNull(object)!= null) {
            if (object instanceof Function) {
                // return ((Function) object).apply();
            } else if (object instanceof Boolean) {
                // return (Boolean) object;
            } else if (object instanceof String) {
                // return isMatched((String) object);
            } else if (object instanceof List<?>) {
                int i = ((List<?>) object).size();
            }
        }
        return false;
    }

    @Test(expected = NullPointerException.class)
    public void testNullObject() {
        isMatched(null);
    }

    @Test(expected = ClassCastException.class)
    public void testNonArrayObject() {
        isMatched("not an array");
    }

    @Test
    public void testEmptyArray() {
        isMatched(new ArrayList<>());
    }

    @Test
    public void testNonEmptyArray() {
        List<String> list = new ArrayList<>();
        list.add("element");
        isMatched(list);
    }
}