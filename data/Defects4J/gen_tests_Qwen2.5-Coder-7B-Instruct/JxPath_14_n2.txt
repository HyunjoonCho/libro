public void testCoreRoundingFunctions() {
    XPathFunctionContext context =...; // initialize context

    assertTrue(Double.isNaN(assertXPathValue(context, "floor('NaN')")));
    assertEquals(Double.NEGATIVE_INFINITY, assertXPathValue(context, "floor(-2 div 0")));
    assertEquals(Double.POSITIVE_INFINITY, assertXPathValue(context, "floor(2 div 0)"));

    assertTrue(Double.isNaN(assertXPathValue(context, "ceiling('NaN')")));
    assertEquals(Double.NEGATIVE_INFINITY, assertXPathValue(context, "ceiling(-2 div 0)"));
    assertEquals(Double.POSITIVE_INFINITY, assertXPathValue(context, "ceiling(2 div 0)"));

    assertTrue(Double.isNaN(assertXPathValue(context, "round('NaN')")));
    assertEquals(Double.NEGATIVE_INFINITY, assertXPathValue(context, "round(-2 div 0)"));
    assertEquals(Double.POSITIVE_INFINITY, assertXPathValue(context, "round(2 div 0)"));
}

private double assertXPathValue(XPathFunctionContext context, String expression) {
    try {
        return (Double) context.evaluate(expression, XPathConstants.NUMBER);
    } catch (Exception e) {
        throw new RuntimeException(e);
    }
}