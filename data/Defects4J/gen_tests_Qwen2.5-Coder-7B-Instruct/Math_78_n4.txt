public void testODEIntegrationEventDetection() throws Exception {
    // Create a mock ODE system that exhibits the described behavior
    OrdinaryDifferentialEquation ode = new OrdinaryDifferentialEquation() {
        public int getDimension() { return 1; }
        public void computeDerivatives(double t, double[] y, double[] yDot) {
            // Implement your ODE here
        }
    };

    // Set up the integrator and add the event handler
    StepInterpretation interpretation = StepInterpretation.CONSERVATIVE;
    EventState eventState = new DefaultEventHandler() {
        private boolean firstEventDetected = false;

        @Override
        public EventHandlerResult eventOccurred(double t, StateAndDerivative state) {
            if (!firstEventDetected) {
                firstEventDetected = true;
                return EventHandlerResult.STOP;
            } else {
                return EventHandlerResult.CONTINUE;
            }
        }

        @Override
        public double g(double t, StateAndDerivative state) {
            // Return the value of the switching function here
            return 0.0; // Replace with actual implementation
        }
    };
    Integrator integrator = new DormandPrince85