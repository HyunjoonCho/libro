public void testJacksonDeserializationVulnerability() throws IOException {
    ObjectMapper mapper = new ObjectMapper();
    // Enable default typing for demonstration purposes (should be disabled in production)
    mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);

    String maliciousJson = "{\"@class\":\"com.example.MaliciousClass\", \"data\": \"maliciousData\"}";
    
    // This should throw JsonMappingException due to the default typing enabled
    mapper.readValue(maliciousJson, Object.class);
}

In this test case, we're enabling default typing on `ObjectMapper` which allows Jackson to deserialize JSON objects without explicit type information. We then attempt to deserialize a malicious JSON string that includes a custom class name (`@class`). This should trigger a `JsonMappingException`, demonstrating the potential security vulnerability. 

Please note that you need to replace `com.example.MaliciousClass