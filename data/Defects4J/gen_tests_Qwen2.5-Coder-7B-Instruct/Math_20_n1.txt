public void testCMAESOptimizerBounds() {
    double[] initialGuess = {5.0};
    double[] lowerBound = {0.0};
    double[] upperBound = {10.0};
    Problem<Vector> problem = new AbstractRealMultiObjectiveProblem<Vector>() {
        @Override
        public int getDimension() {
            return 1;
        }

        @Override
        protected Vector evaluate(Vector point) {
            return new DenseVector(new double[]{point.getElement(0) * point.getElement(0)});
        }
    };
    CMAESOptimizer optimizer = new CMAESOptimizer();
    optimizer.setLowerBound(lowerBound);
    optimizer.setUpperBound(upperBound);
    PointValuePair result = optimizer.optimize(problem, new InitialGuess(initialGuess));
    assertTrue(result.getPoint().getElement(0) >= lowerBound[0]);
    assertTrue(result.getPoint().getElement(0) <= upperBound[0]);
}