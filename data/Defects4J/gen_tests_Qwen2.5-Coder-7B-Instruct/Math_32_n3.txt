public void testBSPTreeRecovery() {
    float[] vertices = new float[]{0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0};
    int[] triangles = new int[]{0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 0, 4, 7, 0, 7, 3, 1, 5, 6, 1, 6, 2};

    BoundaryRep brep = new BoundaryRep(vertices, triangles);
    BSPTree tree = new BSPTree(brep);

    // Perform some operations on the tree...

    // Check that the tree contains the expected number of nodes
    assertEquals(expectedNodeCount, tree.getNodeCount());

    // Check that the tree contains the expected number of leaves
    assertEquals(expectedLeafCount, tree.getLeafCount());

    // Check that the tree can be correctly traversed
    tree.traverse(new BSPTree.TraversalVisitor() {
        @Override
        public void visit(BSPTree.Node node)