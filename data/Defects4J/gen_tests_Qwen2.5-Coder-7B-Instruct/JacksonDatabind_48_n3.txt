public void testBasicClassIntrospector() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    mapper.configure(MapperFeature.AUTO_DETECT_FIELDS, false);
    mapper.configure(MapperFeature.AUTO_DETECT_GETTERS, false);
    mapper.configure(MapperFeature.AUTO_DETECT_SETTERS, false);
    mapper.configure(MapperFeature.AUTO_DETECT_IS_GETTERS, false);
    mapper.configure(MapperFeature.USE_GETTERS_AS_SETTERS, false);
    mapper.configure(MapperFeature.CAN_OVERRIDE_ACCESS_MODIFIERS, true);
    mapper.configure(MapperFeature.INFER_PROPERTY_MUTATORS, false);
    mapper.configure(MapperFeature.USE_ANNOTATIONS, true);

    JavaType type = mapper.getTypeFactory().constructType(TestClass.class);

    BasicClassIntrospector introspector = new BasicClassIntrospector();
    BasicBeanDescription beanDesc = introspector.forSerialization(mapper.getSerializationConfig(), type, null);
    List<BeanPropertyDefinition> props = beanDesc.findProperties();

    assertEquals(1, props.size());
    assertEquals("groupname", props.get(0).getName());
    assertEquals("groupname", props.get(0).getInternalName());
}

class TestClass {
    @JsonProperty("groupname")
    private String groupname;

    public void