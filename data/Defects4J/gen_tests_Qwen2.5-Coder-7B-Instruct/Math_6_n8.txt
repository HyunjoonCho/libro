public void testLevenbergMarquardtOptimizerIterations() {
    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    NonLinearConvergenceChecker checker = NonLinearConvergenceChecker.builder()
           .withMaxIterationCount(100)
           .withXRelativeTolerance(1e-6)
           .withYRelativeTolerance(1e-6)
           .build();
    optimizer.setConvergenceChecker(checker);

    double[] target = { 1 };
    double[] initialGuess = { 3 };
    double[] weight = { 1 };

    MultivariateVectorFunction modelFunction = point -> new double[] {
            Math.pow(point[0], 4)
    };

    MultivariateMatrixFunction jacobianFunction = point -> new double[][] {
            { 0.25 * Math.pow(point[0], 3) }
    };

    optimizer.optimize(new MaxIter(100),
            new ObjectiveFunction(modelFunction),
            new Weight(weight),
            new PointValuePair(initialGuess, target));

    assertTrue(optimizer.getIterations() > 0);
}