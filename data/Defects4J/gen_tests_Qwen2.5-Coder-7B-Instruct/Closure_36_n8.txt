public void testGoogAddSingletonGetter() {
    // This test checks whether the addSingletonGetter function prevents
    // unused classes from being removed by the compiler. If the class is not
    // marked as used, the compiler should keep it in the output.
    
    // Define a class and mark it as a singleton
    String sourceCode =
        "goog.provide('foo');" +
        "var foo = function() { this.values = []; };" +
        "goog.addSingletonGetter(foo);";
    
    // Compile the code with advanced optimizations
    CompilerOptions options = new CompilerOptions();
    options.setOptimizationLevel(OptimizationLevel.ADVANCED_OPTIMIZATIONS);
    JavaScriptCompiler compiler = new JavaScriptCompiler();
    compiler.compile(new JsAstRoot(sourceCode), null, options);
    
    // Check that the class is still present in the compiled code
    assertTrue(compiler.getResult().getErrors().isEmpty());
    assertTrue(compiler.getResult().getWarnings().isEmpty());
    assertTrue(compiler.getResult().getCode().contains("goog.provide('foo');"));
    assertTrue(compiler.getResult().getCode().contains("var foo = function() { this.values = []; };"));
    assertTrue(compiler.getResult().getCode().contains("goog.add