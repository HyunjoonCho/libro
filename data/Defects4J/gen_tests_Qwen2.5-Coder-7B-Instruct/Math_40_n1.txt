public void testBracketingNthOrderBrentSolverExceedsMaxIterationCount() throws Exception {
    // Create a solver with a low maximum iteration count
    BracketingNthOrderBrentSolver solver = new BracketingNthOrderBrentSolver(10);

    // Define a function that has a root at x = 12500.0
    UnivariateFunction function = new UnivariateFunction() {
        @Override
        public double value(double x) {
            return Math.pow(x - 12500.0, 2);
        }
    };

    // Set up initial guesses that cause the solver to update the same boundary
    double min = 12500.0;
    double max = 12500.03;

    try {
        // Solve the equation
        solver.solve(10, function, min, max);
        fail("Expected MaxIterationsExceededException");
    } catch (MaxIterationsExceededException e) {
        // Expected exception
    }
}