import org.junit.Test;
import static org.junit.Assert.*;

public class TestAnonymousObjectTypeInference {

    public interface Record {
        String getProp();
        String getProp2();
    }

    public interface StringOrRecord {
        boolean isString();
        String getStringValue();
        Record getRecordValue();
    }

    public static class StringOrRecordImpl implements StringOrRecord {
        private final Object value;

        public StringOrRecordImpl(Object value) {
            this.value = value;
        }

        @Override
        public boolean isString() {
            return value instanceof String;
        }

        @Override
        public String getStringValue() {
            if (value instanceof String) {
                return (String) value;
            }
            throw new IllegalStateException("Not a string");
        }

        @Override
        public Record getRecordValue() {
            if (value instanceof Record) {
                return (Record) value;
            }
            throw new IllegalStateException("Not a record");
        }
    }

    @Test(expected = IllegalArgumentException.class)
    public void testFunc2WithInvalidArgument() {
        func2(new StringOrRecordImpl("not a record"));
    }

    private void func(Record record) {
        System.out.println(record.getProp());
    }

    private