import org.apache.commons.lang3.builder.ToStringStyle;
import org.junit.Test;

import java.util.concurrent.atomic.AtomicBoolean;

public class ToStringStyleTest {

    @Test(expected = AssertionError.class)
    public void testThreadLocalMemoryLeak() throws Exception {
        // Create a dummy instance to initialize the ThreadLocal
        ToStringStyle style = new ToStringStyle();

        // Check if the ThreadLocal has been set
        AtomicBoolean threadLocalSet = new AtomicBoolean(false);
        Thread.currentThread().setContextClassLoader(new ClassLoader() {
            @Override
            protected Class<?> findClass(String name) throws ClassNotFoundException {
                if (name.equals("org.apache.commons.lang3.builder.ToStringStyle")) {
                    threadLocalSet.set(true);
                }
                return super.findClass(name);
            }
        });

        // This should trigger the initialization of the ThreadLocal
        toString(style);

        // Assert that the ThreadLocal has been set
        assertTrue(threadLocalSet.get());

        // Trigger a garbage collection
        System.gc();

        // Wait for the garbage collector to run
        Thread.sleep(1000);

        // Check if the ThreadLocal has been cleared
        assertFalse(threadLocalSet.get());
    }

    private String toString(Object obj) {
        return obj.toString