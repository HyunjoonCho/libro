public void testJsonAnyGetterWithJsonSerialize() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    MyClass obj = new MyClass();
    String json = mapper.writeValueAsString(obj);
    assertEquals("{\"parameters\":{\"key\":\"value\"}}", json);
}

class MyClass {
    private Map<String, String> parameters = Collections.singletonMap("key", "value");

    @JsonSerialize(using = MySerializer.class)
    @JsonAnyGetter
    public Map<String, String> getParameters() {
        return parameters;
    }
}

class MySerializer extends JsonSerializer<Map<String, String>> {
    @Override
    public void serialize(Map<String, String> value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
        gen.writeStartObject();
        for (Map.Entry<String, String> entry : value.entrySet()) {
            gen.writeStringField(entry.getKey(), entry.getValue());
        }
        gen.writeEndObject();
    }
}