public void testAbstractLeastSquares() {
    // Create a mock instance of AbstractLeastSquares with specific weights and residuals
    AbstractLeastSquares abstractLeastSquares = Mockito.mock(AbstractLeastSquares.class);
    double[] residuals = {1.0, 2.0, 3.0};
    double[] weights = {0.5, 1.0, 2.0};
    
    // Set up the mock to return the specified weights and residuals
    Mockito.when(abstractLeastSquares.getResiduals()).thenReturn(residuals);
    Mockito.when(abstractLeastSquares.getObservations()).thenReturn(weights.length);
    Mockito.when(abstractLeastSquares.getWeightedResiduals()).thenReturn(Arrays.stream(residuals).map(r -> r * r * weights[Arrays.asList(residuals).indexOf(r)]).toArray());

    // Calculate RMS using the getRMS() method
    double rms = abstractLeastSquares.getRMS();

    // Assert that the calculated RMS is correct (using a small delta due to floating-point arithmetic)
    assertEquals(Math.sqrt((residuals[0] * residuals[0] * weights[0] + residuals[1] * residuals[1] * weights[