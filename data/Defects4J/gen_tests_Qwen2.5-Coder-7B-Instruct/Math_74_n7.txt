public void testDormandPrince853Integrator() throws Exception {
    double[] y0 = new double[] { 0.0 };
    double[] yDot = new double[] { 1.0 };
    FirstOrderDifferentialEquations equations = new TestODEProblem1();
    DormandPrince853Integrator integrator = new DormandPrince853Integrator(0.0, 1.0, 1.0e-6, 1.0e-6);

    double t = 0.0;
    double[] y = y0.clone();

    StepHandler handler = new StepHandler() {
        public boolean hasNext() {
            return true;
        }

        public void handleStep(StepInterpolator interpolator, boolean isLast) {
            // Check the step size
            double expectedH = 1.0 / 9.0; // Based on the expected behavior of the integrator
            assertEquals(expectedH, interpolator.getCurrentTime() - t, 1.0e-10);
            t = interpolator.getCurrentTime();
        }
    };

    integrator.integrate(equations, t, y, 1.0, handler);
}