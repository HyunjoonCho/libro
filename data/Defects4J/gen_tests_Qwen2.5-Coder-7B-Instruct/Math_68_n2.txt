public void testLevenbergMarquardtOptimizer() {
    double[] target = { 1.0, 2.0 };
    double[] initialGuess = { 2.5, 3.5 };

    Problem problem = new Problem();
    problem.addParameter(new Parameter().withName("p1").withValue(initialGuess[0]));
    problem.addParameter(new Parameter().withName("p2").withValue(initialGuess[1]));

    Function function = (parameters) -> {
        return new double[]{ parameters.getParameter("p1").getValue() - target[0],
                            parameters.getParameter("p2").getValue() - target[1] };
    };

    VectorialConvergenceChecker checker = new SimpleVectorialRelativeToleranceChecker<>(1e-6);

    LevenbergMarquardtOptimizer optimizer = new LevenbergMarquardtOptimizer();
    optimizer.setConvergenceChecker(checker);

    Parameters result = optimizer.optimize(problem, function);

    assertEquals(target[0], result.getParameter("p1").getValue(), 1e-6);
    assertEquals(target[1], result.getParameter("p2").getValue(), 1e-6);
}