public void testStdKeyDeserializer() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    Map<String, Integer> map = mapper.readValue(
        "{\"key1\":1,\"key2\":2}",
        new TypeReference<Map<String,Integer>>(){});
    assertEquals(Integer.valueOf(1), map.get("key1"));
    assertEquals(Integer.valueOf(2), map.get("key2"));

    try {
        mapper.readValue("{\"key1\":1,\"key2\":2}",
            new TypeReference<Map<Key, Integer>>() {});
        fail("Expected exception not thrown");
    } catch (InvalidFormatException e) {
        // Expected exception
    }
}

static class Key {
    private String value;
    private Key(String value) { this.value = value; }
    @JsonCreator
    public static Key valueOf(String value) { return new Key(value); }
    @Override public boolean equals(Object o) { return o instanceof Key && ((Key) o).value.equals(this.value); }
    @Override public int hashCode() { return value.hashCode(); }
}