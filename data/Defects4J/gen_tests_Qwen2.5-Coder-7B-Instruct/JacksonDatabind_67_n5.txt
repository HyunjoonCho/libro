public void testMapKeyDeserializerModifiersIgnored() throws Exception {
    ObjectMapper mapper = new ObjectMapper();
    SimpleModule module = new SimpleModule();
    module.setDeserializerModifier(new BeanDeserializerModifier() {
        @Override
        public KeyDeserializer modifyKeyDeserializer(DeserializationConfig config, JavaType type, KeyDeserializer deserializer) {
            if (!type.isEnumType()) {
                return super.modifyKeyDeserializer(config, type, deserializer);
            }
            return new KeyDeserializer() {
                @Override
                @SuppressWarnings("unchecked")
                public Object deserializeKey(String key, DeserializationContext ctxt) throws IOException, JsonProcessingException {
                    Class<? extends Enum> rawClass = (Class<Enum<?>>) type.getRawClass();
                    return Enum.valueOf(rawClass, key.toUpperCase());
                }
            };
        }
    });
    mapper.registerModule(module);

    String json = "{\"key\":\"value\"}";
    MyClass result = mapper.readValue(json, MyClass.class);
    assertEquals(MyEnum.VALUE, result.getKey());
}

class MyClass {
    private MyEnum key;

    public MyEnum getKey() {
        return key;
    }

    public void setKey(MyEnum key) {
        this.key = key;
    }
}

enum MyEnum {
    VALUE("value");
    private