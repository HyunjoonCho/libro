public void testPropertiesOnUnrelatedRecordTypes() {
  String jsCode = 
      "/** @typedef {{name: string, id: number}} */\n" +
      "var RecordType1;\n" +
      "\n" +
      "/** @typedef {{name2: string}} */\n" +
      "var RecordType2;\n" +
      "\n" +
      "/**\n" +
      "* @param {RecordType1} rec\n" +
      "*/\n" +
      "var func = function(rec) {\n" +
      "  alert(rec.name2);\n" +
      "};\n" +
      "func({name: 'jim', id: 0});";

  JsErrorReporter reporter = new JsErrorReporter();
  Compiler compiler = new Compiler();
  compiler.initCompilerOptions();
  compiler.setJsOutputTokenStream(new TokenStream());
  compiler.setCodingConvention(new CodingConvention.Simple());
  compiler.setErrorHandler(reporter);

  compiler.compile(SourceFile.fromCode("test.js", jsCode));

  List<JSError> errors = reporter.getErrors();
  assertEquals(1, errors.size());
  JSError error = errors.get(0);
  assertEquals(J