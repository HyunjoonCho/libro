public void testLevenbergMarquardtInconsistency() {
    // Arrange
    NonLinearOptimizer optimizer = new LevenbergMarquardtOptimizer();
    double[] initialGuess = { 0.0, 0.0 };
    FunctionEvaluation funcEval = new FunctionEvaluation() {
        @Override
        public Pair<RealVector, RealVector> evaluate(double[] point) throws FunctionEvaluationException {
            RealVector residuals = new ArrayRealVector(point.length);
            RealVector jacobian = new Array2DRowRealMatrix(point.length, point.length);
            for (int i = 0; i < point.length; i++) {
                residuals.setEntry(i, point[i] - Math.sin(point[i]));
                jacobian.setEntry(i, i, 1.0 - Math.cos(point[i]));
            }
            return new Pair<>(residuals, jacobian);
        }
    };

    // Act
    PointValuePair result = optimizer.optimize(new MaxIter evaluations(1000), funcEval, new InitialGuess(initialGuess));

    // Assert
    double[] optimalPoint = result.getPoint().toArray();
    double[] expectedOptimalPoint = { 0.0, 0.0 }; // This is