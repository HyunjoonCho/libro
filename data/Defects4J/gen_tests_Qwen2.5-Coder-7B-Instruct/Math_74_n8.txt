public void testDormandPrince853Integrator() throws Exception {
    double[] y0 = new double[] { 1.0 };
    double t0 = 0.0;
    double tf = 1.0;
    double[] absTol = new double[] { 1e-6 };
    double relTol = 1e-6;

    DormandPrince853Integrator integrator = new DormandPrince853Integrator(relTol, absTol);

    double[] expectedY = new double[] { 1.0 };

    StepProblem<Double> problem = new StepProblem<Double>() {

        @Override
        public Double getInitialState() {
            return y0[0];
        }

        @Override
        public void computeDerivatives(double t, Double y, DerivativeStructure[] yDot) {
            yDot[0] = new DerivativeStructure(1, 1, 0, y);
        }

        @Override
        public double[] getFinalConditions() {
            return expectedY;
        }

    };

    integrator.integrate(problem, t0, y0[0], tf);

    assertEquals(expectedY[0], y0