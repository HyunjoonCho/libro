public void testCMAESOptimizerNaNParameters() {
    double[] initialGuess = { 0 };
    double[] lowerBounds = { -Double.MAX_VALUE };
    double[] upperBounds = { Double.MAX_VALUE };

    Problem problem = new Problem(initialGuess.length) {
        @Override
        public int getDimension() {
            return initialGuess.length;
        }

        @Override
        public double evaluate(double[] point) {
            // This should never return NaN
            return Math.pow(point[0], 2);
        }
    };

    CMAESOptimizer optimizer = new CMAESOptimizer();
    PointValuePair optimum = optimizer.optimize(problem,
                                               goalType,
                                               initialGuess,
                                               lowerBounds,
                                               upperBounds);

    assertFalse(Double.isNaN(optimum.getValue()));
}