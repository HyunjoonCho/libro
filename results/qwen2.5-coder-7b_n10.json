{
    "Lang_12": {
        "Lang_12_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsExceptionAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_4": {
        "Lang_4_n1.txt": "[error] JavaSyntaxError('')",
        "Lang_4_n7.txt": "[error] JavaSyntaxError('')",
        "Lang_4_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<[]&lt; 2> but was:<[1 ]&lt; 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<[]&lt; 2> but was:<[1 ]&lt; 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrSubstitutorTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrSubstitutorTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<&[amp;&lt;&gt;]> but was:<&[<>]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.text.StrSubstitutorTest.testLookupTranslatorWithCharSequenceAutoGen(StrSubstitutorTest.java:616)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<[]&lt; 2> but was:<[1 ]&lt; 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<[]&lt; 2> but was:<[1 ]&lt; 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2323)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n6.txt": "[error] JavaSyntaxError('')",
        "Lang_4_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrSubstitutorTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrSubstitutorTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<[&lt;test&gt;]> but was:<[<test>]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.text.StrSubstitutorTest.testLookupTranslatorWithCharSequenceAutoGen(StrSubstitutorTest.java:617)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_4_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<[&lt;] 2> but was:<[1 <] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2326)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<[&lt;] 2> but was:<[1 <] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2326)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_8": {
        "Lang_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testTimezoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testTimezoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n5.txt": "[error] JavaSyntaxError('')",
        "Lang_8_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testBugReportAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testBugReportAutoGen\njunit.framework.AssertionFailedError: expected:<12:00PM P[acific Daylight Time]> but was:<12:00PM P[DT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testBugReportAutoGen(FastDateParserTest.java:532)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testBugReportAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testBugReportAutoGen\njunit.framework.AssertionFailedError: expected:<12:00PM [Pacific Daylight Time]> but was:<12:00PM [EDT]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testBugReportAutoGen(FastDateParserTest.java:532)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n8.txt": "[error] JavaSyntaxError('')",
        "Lang_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testTimezoneFormattingBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testTimezoneFormattingBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testTimezoneFormattingBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testTimezoneFormattingBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testTimezoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testTimezoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testTimezoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testTimezoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_15": {
        "Time_15_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyBugAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testFieldUtilsSafeMultiplyBugAutoGen(TestFieldUtils.java:242)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.fail(Assert.java:64)\n\tat junit.framework.TestCase.fail(TestCase.java:235)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyBugAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyBugAutoGen(TestFieldUtils.java:242)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testFieldUtilsSafeMultiplyAutoGen(TestFieldUtils.java:242)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:242)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: expected:<9223372036854775807> but was:<-9223372036854775808>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.TestPeriod_Basics.testSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1521)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.field.TestFieldUtils.testFieldUtilsSafeMultiplyAutoGen(TestFieldUtils.java:240)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.fail(Assert.java:64)\n\tat junit.framework.TestCase.fail(TestCase.java:235)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:242)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen\njunit.framework.AssertionFailedError: expected:<9223372036854775807> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testFieldUtilsSafeMultiplyAutoGen\njunit.framework.AssertionFailedError: expected:<9223372036854775807> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_6": {
        "Time_6_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:838: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:839: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:838: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:839: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2014), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2014)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2014), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2014)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:838: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:839: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:838: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:839: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:836: error: cannot find symbol\n    [javac]     assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                           ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:837: error: cannot find symbol\n    [javac]     assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                    ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_15": {
        "Lang_15_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsForPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsForPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsForPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsForPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsForPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsForPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_9": {
        "Chart_9_n10.txt": "[error] JavaSyntaxError('')",
        "Chart_9_n3.txt": "[error] JavaSyntaxError('')",
        "Chart_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries bar = foo.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_9/build\n    [javac] 4 warnings\n    [javac] Compiling 359 source files to /root/libro/data/Defects4J/repos/Chart_9/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_9/tests/org/jfree/data/time/junit/TimeSeriesTests.java:848: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]     TimeSeries bar = foo.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_9_n9.txt": "[error] StopIteration()",
        "Chart_9_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyWithInvalidRangeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyWithInvalidRangeAutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyWithInvalidRangeAutoGen(TimeSeriesTests.java:848)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n4.txt": "[error] JavaSyntaxError('')",
        "Chart_9_n2.txt": "[error] JavaSyntaxError('')",
        "Chart_9_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testIssue818AutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testIssue818AutoGen(TimeSeriesTests.java:848)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyWithEmptyRangeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyWithEmptyRangeAutoGen\njava.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:881)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:949)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyWithEmptyRangeAutoGen(TimeSeriesTests.java:848)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n7.txt": "[error] JavaSyntaxError('')"
    },
    "Time_7": {
        "Time_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue2_2AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue2_2AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue2_2AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue2_2AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue156AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue156AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue156AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue156AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testBug2_2AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_5": {
        "Chart_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_9": {
        "Lang_9_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\", Locale.US);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\", Locale.US);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\", Locale.US);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\", Locale.US);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d''\", Locale.US);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d''\", Locale.US);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuotesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException to be thrown due to unterminated quotes\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserUnterminatedQuotesAutoGen(FastDateParserTest.java:506)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Failed to parse \"'d'd'\" ; gave up at index 4\n\tat org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:145)\n\tat org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)\n\tat org.apache.commons.lang3.time.FastDateFormat.<init>(FastDateFormat.java:370)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\", Locale.US);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:502: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"'d'd'\", Locale.US);\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_39": {
        "Lang_39_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException but got: Greetings World!\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings [null]!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_39_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_39_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings [null]!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrBuilderTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrBuilderTest::testReplaceEachWithNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.text.StrBuilderTest.testReplaceEachWithNullReplacementAutoGen(StrBuilderTest.java:1804)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.text.StrBuilderTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.text.StrBuilderTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_27": {
        "Lang_27_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionOnExponentAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionOnExponentAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsNumberFormatExceptionOnExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsNumberFormatExceptionOnExponentIndicatorsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionOnExponentAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionOnExponentAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentIndicatorsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionOnExponentStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberFormatExceptionOnExponentStringAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithExponentsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsNumberFormatExceptionOnExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberThrowsNumberFormatExceptionOnExponentIndicatorsAutoGen\njava.lang.StringIndexOutOfBoundsException: begin 0, end 4, length 3\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3319)\n\tat java.base/java.lang.String.substring(String.java:1874)\n\tat org.apache.commons.lang3.math.NumberUtils.createNumber(NumberUtils.java:489)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_13": {
        "Time_13_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestConverterManager::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestConverterManager::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestConverterManager::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestConverterManager::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestConverterManager::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestConverterManager::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<-[]0.100S> but was:<-[PT-]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestConverterManager::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestConverterManager::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<-[]0.100S> but was:<-[PT-]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_13_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testIssue160AutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_34": {
        "Lang_34_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:986: error: not a statement\n    [javac]     ToStringStyle.SHORT_PREFIX_STYLE;\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:986: error: not a statement\n    [javac]     ToStringStyle.SHORT_PREFIX_STYLE;\n    [javac]                  ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n5.txt": "[error] JavaSyntaxError('')",
        "Lang_34_n8.txt": "[error] JavaSyntaxError('')",
        "Lang_34_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testThreadLocalMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testThreadLocalMemoryLeakAutoGen\njava.lang.NoSuchFieldException: threadLocal\n\tat java.base/java.lang.Class.getDeclaredField(Class.java:2411)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testThreadLocalMemoryLeakAutoGen(FieldUtilsTest.java:915)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testThreadLocalMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testThreadLocalMemoryLeakAutoGen\njava.lang.NoSuchFieldException: threadLocal\n\tat java.base/java.lang.Class.getDeclaredField(Class.java:2411)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testThreadLocalMemoryLeakAutoGen(FieldUtilsTest.java:915)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: no suitable method found for append(Object)\n    [javac]     style.append(obj);\n    [javac]          ^\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1013: error: cannot find symbol\n    [javac]     assertNull(style.getContext().get());\n    [javac]                     ^\n    [javac]   symbol:   method getContext()\n    [javac]   location: variable style of type ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1016: error: cannot find symbol\n    [javac]     assertNull(style.getContext().get());\n    [javac]                     ^\n    [javac]   symbol:   method getContext()\n    [javac]   location: variable style of type ToStringStyle\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: no suitable method found for append(Object)\n    [javac]     style.append(obj);\n    [javac]          ^\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1013: error: cannot find symbol\n    [javac]     assertNull(style.getContext().get());\n    [javac]                     ^\n    [javac]   symbol:   method getContext()\n    [javac]   location: variable style of type ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1016: error: cannot find symbol\n    [javac]     assertNull(style.getContext().get());\n    [javac]                     ^\n    [javac]   symbol:   method getContext()\n    [javac]   location: variable style of type ToStringStyle\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1567: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]         ToStringStyle style = new ToStringStyle();\n    [javac]                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1568: error: cannot find symbol\n    [javac]         assertNotNull(style.getObjectToStringCache().get(Thread.currentThread()));\n    [javac]                            ^\n    [javac]   symbol:   method getObjectToStringCache()\n    [javac]   location: variable style of type ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: cannot find symbol\n    [javac]     assertTrue(\"ThreadLocal not cleared\", ((SoftReference<?>) FieldUtils.readField(\n    [javac]                                             ^\n    [javac]   symbol:   class SoftReference\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: reference to readField is ambiguous\n    [javac]     assertTrue(\"ThreadLocal not cleared\", ((SoftReference<?>) FieldUtils.readField(\n    [javac]                                                                         ^\n    [javac]   both method readField(Field,Object,boolean) in FieldUtils and method readField(Object,String,boolean) in FieldUtils match\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1567: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]         ToStringStyle style = new ToStringStyle();\n    [javac]                               ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1568: error: cannot find symbol\n    [javac]         assertNotNull(style.getObjectToStringCache().get(Thread.currentThread()));\n    [javac]                            ^\n    [javac]   symbol:   method getObjectToStringCache()\n    [javac]   location: variable style of type ToStringStyle\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: cannot find symbol\n    [javac]     assertTrue(\"ThreadLocal not cleared\", ((SoftReference<?>) FieldUtils.readField(\n    [javac]                                             ^\n    [javac]   symbol:   class SoftReference\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: reference to readField is ambiguous\n    [javac]     assertTrue(\"ThreadLocal not cleared\", ((SoftReference<?>) FieldUtils.readField(\n    [javac]                                                                         ^\n    [javac]   both method readField(Field,Object,boolean) in FieldUtils and method readField(Object,String,boolean) in FieldUtils match\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: method appendSuper in class ToStringStyle cannot be applied to given types;\n    [javac]     style.appendSuper(true);\n    [javac]          ^\n    [javac]   required: StringBuffer,String\n    [javac]   found: boolean\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1019: error: method toString in class Object cannot be applied to given types;\n    [javac]     String result = style.toString(new Object());\n    [javac]                          ^\n    [javac]   required: no arguments\n    [javac]   found: Object\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1011: error: ToStringStyle is abstract; cannot be instantiated\n    [javac]     ToStringStyle style = new ToStringStyle();\n    [javac]                           ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: method appendSuper in class ToStringStyle cannot be applied to given types;\n    [javac]     style.appendSuper(true);\n    [javac]          ^\n    [javac]   required: StringBuffer,String\n    [javac]   found: boolean\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1019: error: method toString in class Object cannot be applied to given types;\n    [javac]     String result = style.toString(new Object());\n    [javac]                          ^\n    [javac]   required: no arguments\n    [javac]   found: Object\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 3 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1013: error: no suitable method found for append(Object)\n    [javac]     style.append(obj);\n    [javac]          ^\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1013: error: no suitable method found for append(Object)\n    [javac]     style.append(obj);\n    [javac]          ^\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object,Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,Object[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,long[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,int[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,short[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,byte[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,char[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,double[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,float[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method ToStringStyle.append(StringBuffer,String,boolean[],Boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1574: error: diamond operator is not supported in -source 6\n    [javac]     private static final ThreadLocal<ThreadLocalObjectStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                                                                  ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1599: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1574: error: diamond operator is not supported in -source 6\n    [javac]     private static final ThreadLocal<ThreadLocalObjectStringStyle> threadLocal = new ThreadLocal<>();\n    [javac]                                                                                                  ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1599: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: incompatible types: possible lossy conversion from long to int\n    [javac]     int initialSize = Runtime.getRuntime().freeMemory();\n    [javac]                                                      ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1010: error: incompatible types: possible lossy conversion from long to int\n    [javac]     int initialSize = Runtime.getRuntime().freeMemory();\n    [javac]                                                      ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Chart_12": {
        "Chart_12_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getListeners().isEmpty());\n    [javac]                                  ^\n    [javac]   symbol:   method getListeners()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataset().getListeners().isEmpty());\n    [javac]                                  ^\n    [javac]   symbol:   method getListeners()\n    [javac]   location: interface CategoryDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1046: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener((PropertyChangeListener) dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(PropertyChangeListener)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1046: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener((PropertyChangeListener) dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(PropertyChangeListener)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:787: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultCategoryDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:790: error: cannot find symbol\n    [javac]     assertTrue(plot.hasListener(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method hasListener(DefaultCategoryDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:787: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultCategoryDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:790: error: cannot find symbol\n    [javac]     assertTrue(plot.hasListener(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method hasListener(DefaultCategoryDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1047: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1048: error: cannot find symbol\n    [javac]     assertTrue(plot.hasListener(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1047: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1048: error: cannot find symbol\n    [javac]     assertTrue(plot.hasListener(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1051: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1052: error: cannot find symbol\n    [javac]     assertTrue(plot.hasListener(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1051: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1052: error: cannot find symbol\n    [javac]     assertTrue(plot.hasListener(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1046: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1047: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1049: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1050: error: cannot find symbol\n    [javac]     assertTrue(plot.hasListener(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1046: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1047: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1049: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1050: error: cannot find symbol\n    [javac]     assertTrue(plot.hasListener(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java:330: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java:331: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataChangeListenerList().contains(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method getDataChangeListenerList()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java:333: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java:334: error: cannot find symbol\n    [javac]     assertTrue(plot.getDataChangeListenerList().contains(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method getDataChangeListenerList()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java:330: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java:331: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataChangeListenerList().contains(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method getDataChangeListenerList()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java:333: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     plot.setDataset(dataset);\n    [javac]                     ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/xy/junit/XYLineAndShapeRendererTests.java:334: error: cannot find symbol\n    [javac]     assertTrue(plot.getDataChangeListenerList().contains(dataset));\n    [javac]                    ^\n    [javac]   symbol:   method getDataChangeListenerList()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:640: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:641: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataChangeListeners().hasNext());\n    [javac]                     ^\n    [javac]   symbol:   method getDataChangeListeners()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:644: error: cannot find symbol\n    [javac]     assertTrue(plot.getDataChangeListeners().hasNext());\n    [javac]                    ^\n    [javac]   symbol:   method getDataChangeListeners()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:640: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:641: error: cannot find symbol\n    [javac]     assertFalse(plot.getDataChangeListeners().hasNext());\n    [javac]                     ^\n    [javac]   symbol:   method getDataChangeListeners()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:644: error: cannot find symbol\n    [javac]     assertTrue(plot.getDataChangeListeners().hasNext());\n    [javac]                    ^\n    [javac]   symbol:   method getDataChangeListeners()\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:640: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:641: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListenerForSource(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListenerForSource(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:640: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/PiePlotTests.java:641: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListenerForSource(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListenerForSource(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1044: error: incompatible types: DefaultPieDataset cannot be converted to CategoryDataset\n    [javac]     MultiplePiePlot plot = new MultiplePiePlot(dataset);\n    [javac]                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1045: error: cannot find symbol\n    [javac]     assertFalse(plot.hasListener(dataset));\n    [javac]                     ^\n    [javac]   symbol:   method hasListener(DefaultPieDataset)\n    [javac]   location: variable plot of type MultiplePiePlot\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_14": {
        "Time_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(2, 29);\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:520: error: cannot find symbol\n    [javac]     assertEquals(new MonthDay(2, 29), isoLeap);\n    [javac]                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 3 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:513: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(2, 29);\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestGJChronology.java:520: error: cannot find symbol\n    [javac]     assertEquals(new MonthDay(2, 29), isoLeap);\n    [javac]                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 3 errors"
            },
            "success": false
        },
        "Time_14_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                  ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        }
    },
    "Time_12": {
        "Time_12_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1136: error: cannot find symbol\n    [javac]     assertEquals(1, localDate.getMonthValue());\n    [javac]                              ^\n    [javac]   symbol:   method getMonthValue()\n    [javac]   location: variable localDate of type LocalDate\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1138: error: cannot find symbol\n    [javac]     assertEquals(Era.BCE, localDate.getEra());\n    [javac]                  ^\n    [javac]   symbol:   variable Era\n    [javac]   location: class TestLocalDate_Basics\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1136: error: cannot find symbol\n    [javac]     assertEquals(1, localDate.getMonthValue());\n    [javac]                              ^\n    [javac]   symbol:   method getMonthValue()\n    [javac]   location: variable localDate of type LocalDate\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1138: error: cannot find symbol\n    [javac]     assertEquals(Era.BCE, localDate.getEra());\n    [javac]                  ^\n    [javac]   symbol:   variable Era\n    [javac]   location: class TestLocalDate_Basics\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_12_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1136: error: cannot find symbol\n    [javac]     assertEquals(1, localDate.getMonthValue());\n    [javac]                              ^\n    [javac]   symbol:   method getMonthValue()\n    [javac]   location: variable localDate of type LocalDate\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_12/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_12/src/test/java/org/joda/time/TestLocalDate_Basics.java:1136: error: cannot find symbol\n    [javac]     assertEquals(1, localDate.getMonthValue());\n    [javac]                              ^\n    [javac]   symbol:   method getMonthValue()\n    [javac]   location: variable localDate of type LocalDate\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_12_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<54> but was:<2020>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraAutoGen\njunit.framework.AssertionFailedError: expected:<54> but was:<-2019>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n3.txt": "[error] JavaSyntaxError('')",
        "Time_12_n10.txt": "[error] JavaSyntaxError('')",
        "Time_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsEraAutoGen\njunit.framework.AssertionFailedError: expected:<-2020> but was:<2020>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsEraAutoGen\njunit.framework.AssertionFailedError: expected:<-2020> but was:<-2019>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n6.txt": "[error] JavaSyntaxError('')",
        "Time_12_n2.txt": "[error] JavaSyntaxError('')",
        "Time_12_n9.txt": "[error] JavaSyntaxError('')",
        "Time_12_n7.txt": "[error] JavaSyntaxError('')"
    },
    "Lang_21": {
        "Lang_21_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n7.txt": "[error] JavaSyntaxError('')",
        "Lang_21_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n10.txt": "[error] JavaSyntaxError('')",
        "Lang_21_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_19": {
        "Time_19_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n3.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 10: assertEquals(\"2011-10-30T03:59:00.000+0')",
        "Time_19_n4.txt": "[error] LexerError('Unterminated character/string literal at \" \", line 8: assertEquals(finnishDate.withZone(DateTimeZone.UTC).toDateTimeISO(), \"2011-10-30T01:59:00')",
        "Time_19_n7.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 10: assertEquals(\"2011-10-30T03:59:00.000+0')",
        "Time_19_n10.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 10: assertEquals(\"2011-10-30T03:59:00.000+0')",
        "Time_19_n2.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 9: assertEquals(\"2011-10-30T03:59:00.000+03')",
        "Time_19_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue124AutoGen\njunit.framework.AssertionFailedError: expected:<1319939940000> but was:<1319936340000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n1.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 8: assertEquals(\"2011-10-30T03:59:00.000+03')",
        "Time_19_n5.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 16: assertEquals(')",
        "Time_19_n9.txt": "[error] LexerError('Unterminated character/string literal at \"\"\", line 9: assertEquals(\"2011-10-30T03:59:00.000+03')"
    },
    "Lang_26": {
        "Lang_26_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_11": {
        "Chart_11_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n5.txt": "[error] JavaSyntaxError('')",
        "Chart_11_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n6.txt": "[error] JavaSyntaxError('')",
        "Chart_11_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_11_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.MatrixSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_37": {
        "Lang_37_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:588)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:588)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_37_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testAddAllMixedTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_37_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddAllMixedTypesAutoGen(ClassUtilsTest.java:829)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testAddAllMixedTypesAutoGen\njava.lang.ArrayStoreException: arraycopy: type mismatch: can not copy java.lang.Long[] into java.lang.Integer[]\n\tat java.base/java.lang.System.arraycopy(Native Method)\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2962)\n\tat org.apache.commons.lang3.ArrayUtilsTest.testAddAllMixedTypesAutoGen(ArrayUtilsTest.java:2564)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_22": {
        "Lang_22_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction fraction = new Fraction(num, den);\n    [javac]                         ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction fraction = new Fraction(num, den);\n    [javac]                         ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1345: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction fraction = new Fraction(minValue, powerOfTwo);\n    [javac]                         ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1345: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction fraction = new Fraction(minValue, powerOfTwo);\n    [javac]                         ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction fraction = new Fraction(Integer.MIN_VALUE, 2);\n    [javac]                         ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1339: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction fraction = new Fraction(Integer.MIN_VALUE, 2);\n    [javac]                         ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     assertEquals(2, Math.abs(Fraction.greatestCommonDivisor(num, den)));\n    [javac]                                      ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     assertEquals(2, Math.abs(Fraction.greatestCommonDivisor(num, den)));\n    [javac]                                      ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction frac = new Fraction(num, den);\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction frac = new Fraction(num, den);\n    [javac]                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1343: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     assertEquals(gcd, Fraction.greatestCommonDivisor(minInt, powerOfTwo));\n    [javac]                               ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1343: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     assertEquals(gcd, Fraction.greatestCommonDivisor(minInt, powerOfTwo));\n    [javac]                               ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     int gcd = Fraction.greatestCommonDivisor(minValue, powerOfTwo);\n    [javac]                       ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1342: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     int gcd = Fraction.greatestCommonDivisor(minValue, powerOfTwo);\n    [javac]                       ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction fraction = new Fraction(num, den);\n    [javac]                         ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: Fraction(int,int) has private access in Fraction\n    [javac]     Fraction fraction = new Fraction(num, den);\n    [javac]                         ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     assertEquals(1, Fraction.greatestCommonDivisor(numerator, denominator));\n    [javac]                             ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1341: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     assertEquals(1, Fraction.greatestCommonDivisor(numerator, denominator));\n    [javac]                             ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_22_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1343: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     int actualGcd = Fraction.greatestCommonDivisor(num, den);\n    [javac]                             ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 109 source files to /root/libro/data/Defects4J/repos/Lang_22/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_22/src/test/java/org/apache/commons/lang3/math/FractionTest.java:1343: error: greatestCommonDivisor(int,int) has private access in Fraction\n    [javac]     int actualGcd = Fraction.greatestCommonDivisor(num, den);\n    [javac]                             ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_10": {
        "Lang_10_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"yyyy-MM-dd\", Locale.US);\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser parser = new FastDateParser(\"yyyy-MM-dd\", Locale.US);\n    [javac]                             ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String,Locale\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:459: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fastDateParser = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                                     ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:459: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fastDateParser = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                                     ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1697: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1697: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceAutoGen\njava.text.ParseException: Unparseable date: \" 2022-01-01\" does not match (\\p{IsNd}++)-(\\p{IsNd}++)-(\\p{IsNd}++)\n\tat org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:258)\n\tat org.apache.commons.lang3.time.FastDateFormat.parse(FastDateFormat.java:472)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateParserWhitespaceAutoGen(DateUtilsTest.java:1705)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceAutoGen\njava.text.ParseException: Unparseable date: \" 2022-01-01\" does not match (\\p{IsNd}++)-(\\p{IsNd}++)-(\\p{IsNd}++)\n\tat org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:258)\n\tat org.apache.commons.lang3.time.FastDateFormat.parse(FastDateFormat.java:472)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateParserWhitespaceAutoGen(DateUtilsTest.java:1705)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen\njava.text.ParseException: Unparseable date: \"\n2022-01-01\" does not match (\\p{IsNd}++)-(\\p{IsNd}++)-(\\p{IsNd}++)\n\tat org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:258)\n\tat org.apache.commons.lang3.time.FastDateFormat.parse(FastDateFormat.java:472)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen\njava.text.ParseException: Unparseable date: \"\n2022-01-01\" does not match (\\p{IsNd}++)-(\\p{IsNd}++)-(\\p{IsNd}++)\n\tat org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:258)\n\tat org.apache.commons.lang3.time.FastDateFormat.parse(FastDateFormat.java:472)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:459: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:459: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:459: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:459: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1703: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1703: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fdp = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fastDateParser = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                                     ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: constructor FastDateParser in class FastDateParser cannot be applied to given types;\n    [javac]     FastDateParser fastDateParser = new FastDateParser(\"yyyy-MM-dd\");\n    [javac]                                     ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_14": {
        "Lang_14_n5.txt": "[error] JavaSyntaxError('')",
        "Lang_14_n7.txt": "[error] JavaSyntaxError('')",
        "Lang_14_n8.txt": "[error] JavaSyntaxError('')",
        "Lang_14_n4.txt": "[error] JavaSyntaxError('')",
        "Lang_14_n2.txt": "[error] JavaSyntaxError('')",
        "Lang_14_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = ElementFactory.newName(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = ElementFactory.newName(\"test\");\n    [javac]                 ^\n    [javac]   symbol:   variable ElementFactory\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = ElementFactory.newName(\"test\");\n    [javac]     ^\n    [javac]   symbol:   class Name\n    [javac]   location: class StrTokenizerTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java:835: error: cannot find symbol\n    [javac]     Name name = ElementFactory.newName(\"test\");\n    [javac]                 ^\n    [javac]   symbol:   variable ElementFactory\n    [javac]   location: class StrTokenizerTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n10.txt": "[error] JavaSyntaxError('')",
        "Lang_14_n3.txt": "[error] JavaSyntaxError('')",
        "Lang_14_n9.txt": "[error] JavaSyntaxError('')",
        "Lang_14_n1.txt": "[error] JavaSyntaxError('')"
    },
    "Lang_36": {
        "Lang_36_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalPlaceAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_30": {
        "Lang_30_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_23": {
        "Lang_23_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n10.txt": "[error] JavaSyntaxError('')",
        "Lang_23_n9.txt": "[error] JavaSyntaxError('')"
    },
    "Lang_16": {
        "Lang_16_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexHandlingAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexHandlingAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHexHandlingAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsHexHandlingAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexHandlingAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testUpperCaseHexHandlingAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testUpperCaseHexHandlingAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testUpperCaseHexHandlingAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: NumberFormatException expected\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsUpperCaseHexAutoGen(NumberUtilsTest.java:1279)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_3": {
        "Time_3_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T02:00:00.000+0[1]:00> but was:<...10-30T02:00:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T02:00:00.000+0[1]:00> but was:<...10-30T02:00:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<2011-10-30T02:00:00.000+02:00> but was:<2011-10-30T02:00:00.000+01:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T02:00:00.000+0[1:]00> but was:<...10-30T02:00:00.000+0[2]00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.ComparisonFailure: expected:<...0-30T02:00:00.000+01[:]00> but was:<...0-30T02:00:00.000+01[]00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<1319932800000> but was:<1319936400000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<2011-10-30T00:00:00.000Z> but was:<2011-10-30T01:00:00.000Z>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n8.txt": "[error] JavaSyntaxError('')",
        "Time_3_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T02:00:00.000+0[1]:00> but was:<...10-30T02:00:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: expected:<2011-10-30T00:00:00.000Z> but was:<2011-10-30T01:00:00.000Z>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_32": {
        "Lang_32_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: not a statement\n    [javac]     ToStringStyle.SHORT_PREFIX_STYLE;\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: not a statement\n    [javac]     ToStringStyle.SHORT_PREFIX_STYLE;\n    [javac]                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1012: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n5.txt": "[error] JavaSyntaxError('')",
        "Lang_32_n9.txt": "[error] JavaSyntaxError('')",
        "Lang_32_n4.txt": "[error] JavaSyntaxError('')",
        "Lang_32_n6.txt": "[error] JavaSyntaxError('')",
        "Lang_32_n1.txt": "[error] StopIteration()",
        "Lang_32_n8.txt": "[error] JavaSyntaxError('')",
        "Lang_32_n3.txt": "[error] JavaSyntaxError('')",
        "Lang_32_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testThreadLocalLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testThreadLocalLeakAutoGen\njava.lang.NoSuchFieldException: context\n\tat java.base/java.lang.Class.getDeclaredField(Class.java:2411)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testThreadLocalLeakAutoGen(DateUtilsTest.java:1566)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testThreadLocalLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testThreadLocalLeakAutoGen\njava.lang.NoSuchFieldException: context\n\tat java.base/java.lang.Class.getDeclaredField(Class.java:2411)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testThreadLocalLeakAutoGen(DateUtilsTest.java:1566)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_32_n2.txt": "[error] JavaSyntaxError('')"
    },
    "Lang_35": {
        "Lang_35_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullParametersAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddWithNullParametersAutoGen(ClassUtilsTest.java:803)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullParametersAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddWithNullParametersAutoGen(ClassUtilsTest.java:803)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullsAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddWithNullsAutoGen(ClassUtilsTest.java:803)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithNullsAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddWithNullsAutoGen(ClassUtilsTest.java:803)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddAutoGen(ClassUtilsTest.java:803)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddAutoGen(ClassUtilsTest.java:803)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddWithNullsAutoGen(ClassUtilsTest.java:804)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen\njunit.framework.AssertionFailedError: Expected ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddWithNullsAutoGen(ClassUtilsTest.java:805)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddWithNullsAutoGen(ClassUtilsTest.java:804)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddWithNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddWithNullParametersAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddWithNullParametersAutoGen(ClassUtilsTest.java:804)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1568: error: multi-catch statements are not supported in -source 6\n    [javac]     } catch (ClassCastException | IllegalArgumentException e) {\n    [javac]                                 ^\n    [javac]   (use -source 7 or higher to enable multi-catch statements)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1568: error: multi-catch statements are not supported in -source 6\n    [javac]     } catch (ClassCastException | IllegalArgumentException e) {\n    [javac]                                 ^\n    [javac]   (use -source 7 or higher to enable multi-catch statements)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_35_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddWithNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddWithNullParametersAutoGen\njunit.framework.AssertionFailedError: Expected ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddWithNullParametersAutoGen(ClassUtilsTest.java:805)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddWithNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddWithNullParametersAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddWithNullParametersAutoGen(ClassUtilsTest.java:804)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddNullParametersAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddNullParametersAutoGen(ClassUtilsTest.java:804)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddWithNullsAutoGen(ClassUtilsTest.java:803)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testAddWithNullsAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testAddWithNullsAutoGen(ClassUtilsTest.java:803)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_9": {
        "Time_9_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Properties::testMaxOffsetValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Properties::testMaxOffsetValueAutoGen\njunit.framework.AssertionFailedError: expected:<23> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Properties::testMaxOffsetValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Properties::testMaxOffsetValueAutoGen\njava.lang.IllegalArgumentException: Hours out of range: 24\n\tat org.joda.time.DateTimeZone.forOffsetHoursMinutes(DateTimeZone.java:259)\n\tat org.joda.time.TestTimeOfDay_Properties.testMaxOffsetValueAutoGen(TestTimeOfDay_Properties.java:737)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Properties::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Properties::testMaxOffsetAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'Etc/GMT-25' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:223)\n\tat org.joda.time.TestTimeOfDay_Properties.testMaxOffsetAutoGen(TestTimeOfDay_Properties.java:737)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Properties::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Properties::testMaxOffsetAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'Etc/GMT-25' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.TestTimeOfDay_Properties.testMaxOffsetAutoGen(TestTimeOfDay_Properties.java:737)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testMaxOffsetAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testMaxOffsetAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_9_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testMaxOffsetValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testMaxOffsetValueAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'UTC+23:59:59.999' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:223)\n\tat org.joda.time.tz.TestCompiler.testMaxOffsetValueAutoGen(TestCompiler.java:226)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.tz.TestCompiler::testMaxOffsetValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.tz.TestCompiler::testMaxOffsetValueAutoGen\njava.lang.IllegalArgumentException: The datetime zone id 'UTC+23:59:59.999' is not recognised\n\tat org.joda.time.DateTimeZone.forID(DateTimeZone.java:224)\n\tat org.joda.time.tz.TestCompiler.testMaxOffsetValueAutoGen(TestCompiler.java:226)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_20": {
        "Time_20_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:914: error: cannot find symbol\n    [javac]     assertNotEquals(\"America/Adak\", parsedDateTime.getZone().getID());\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:914: error: cannot find symbol\n    [javac]     assertNotEquals(\"America/Adak\", parsedDateTime.getZone().getID());\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class TestDateTimeFormatter\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_20_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1043: error: incompatible types: DateTimeZone cannot be converted to DateTime\n    [javac]     DateTime adakZone = DateTimeZone.forID(\"America/Adak\");\n    [javac]                                           ^\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1048: error: cannot find symbol\n    [javac]     assertNotEquals(atkaZone.getID(), adakZone.getID());\n    [javac]                                               ^\n    [javac]   symbol:   method getID()\n    [javac]   location: variable adakZone of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1050: error: cannot find symbol\n    [javac]     DateTime nowAtka = new DateTime(now(), atkaZone);\n    [javac]                                     ^\n    [javac]   symbol:   method now()\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     DateTime nowAdak = new DateTime(now(), adakZone);\n    [javac]                                     ^\n    [javac]   symbol:   method now()\n    [javac]   location: class TestDateTimeZone\n    [javac] 4 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1043: error: incompatible types: DateTimeZone cannot be converted to DateTime\n    [javac]     DateTime adakZone = DateTimeZone.forID(\"America/Adak\");\n    [javac]                                           ^\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1048: error: cannot find symbol\n    [javac]     assertNotEquals(atkaZone.getID(), adakZone.getID());\n    [javac]                                               ^\n    [javac]   symbol:   method getID()\n    [javac]   location: variable adakZone of type DateTime\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1050: error: cannot find symbol\n    [javac]     DateTime nowAtka = new DateTime(now(), atkaZone);\n    [javac]                                     ^\n    [javac]   symbol:   method now()\n    [javac]   location: class TestDateTimeZone\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/TestDateTimeZone.java:1051: error: cannot find symbol\n    [javac]     DateTime nowAdak = new DateTime(now(), adakZone);\n    [javac]                                     ^\n    [javac]   symbol:   method now()\n    [javac]   location: class TestDateTimeZone\n    [javac] 4 errors"
            },
            "success": false
        },
        "Time_20_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:909: error: incompatible types: DateTimeZone cannot be converted to DateTime\n    [javac]     DateTime adakTimeZone = DateTimeZone.forID(\"America/Adak\");\n    [javac]                                               ^\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertNotSame(atkaTimeZone.getID(), adakTimeZone.getID());\n    [javac]                                                     ^\n    [javac]   symbol:   method getID()\n    [javac]   location: variable adakTimeZone of type DateTime\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_20/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:909: error: incompatible types: DateTimeZone cannot be converted to DateTime\n    [javac]     DateTime adakTimeZone = DateTimeZone.forID(\"America/Adak\");\n    [javac]                                               ^\n    [javac] /root/libro/data/Defects4J/repos/Time_20/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:912: error: cannot find symbol\n    [javac]     assertNotSame(atkaTimeZone.getID(), adakTimeZone.getID());\n    [javac]                                                     ^\n    [javac]   symbol:   method getID()\n    [javac]   location: variable adakTimeZone of type DateTime\n    [javac] 2 errors"
            },
            "success": false
        }
    },
    "Chart_2": {
        "Chart_2_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1268: error: cannot find symbol\n    [javac]     List<Range> xRanges = DatasetUtilities.iterateRangeBounds(dataset.getXValueDomain(), true, false);\n    [javac]                                                                      ^\n    [javac]   symbol:   method getXValueDomain()\n    [javac]   location: variable dataset of type DefaultIntervalXYDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1269: error: cannot find symbol\n    [javac]     List<Range> yRanges = DatasetUtilities.iterateRangeBounds(dataset.getYValueDomain(), true, false);\n    [javac]                                                                      ^\n    [javac]   symbol:   method getYValueDomain()\n    [javac]   location: variable dataset of type DefaultIntervalXYDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1268: error: cannot find symbol\n    [javac]     List<Range> xRanges = DatasetUtilities.iterateRangeBounds(dataset.getXValueDomain(), true, false);\n    [javac]                                                                      ^\n    [javac]   symbol:   method getXValueDomain()\n    [javac]   location: variable dataset of type DefaultIntervalXYDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1269: error: cannot find symbol\n    [javac]     List<Range> yRanges = DatasetUtilities.iterateRangeBounds(dataset.getYValueDomain(), true, false);\n    [javac]                                                                      ^\n    [javac]   symbol:   method getYValueDomain()\n    [javac]   location: variable dataset of type DefaultIntervalXYDataset\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1263: error: incompatible types: Range cannot be converted to Range[]\n    [javac]     Range[] bounds = DatasetUtilities.iterateRangeBounds(dataset, false);\n    [javac]                                                         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1263: error: incompatible types: Range cannot be converted to Range[]\n    [javac]     Range[] bounds = DatasetUtilities.iterateRangeBounds(dataset, false);\n    [javac]                                                         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: no suitable method found for iterateRangeBounds(Range,int)\n    [javac]     List<Range> bounds = DatasetUtilities.iterateRangeBounds(range, 3);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to XYDataset)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: no suitable method found for iterateRangeBounds(Range,int)\n    [javac]     List<Range> bounds = DatasetUtilities.iterateRangeBounds(range, 3);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to XYDataset)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: no suitable method found for iterateRangeBounds(Range,int)\n    [javac]     List<Range> bounds = DatasetUtilities.iterateRangeBounds(range, 3);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to XYDataset)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: no suitable method found for iterateRangeBounds(Range,int)\n    [javac]     List<Range> bounds = DatasetUtilities.iterateRangeBounds(range, 3);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to XYDataset)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n3.txt": "[error] LexerError('Unterminated character/string literal at \"\\'\", line 1: Unfortunately, there is no provided link or detailed description about the issue in the bug report. Please provide more information about the problem you\\'re trying to reproduce in order to generate a suitable JUnit test method')",
        "Chart_2_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: no suitable method found for iterateRangeBounds(Range,int)\n    [javac]     List<Range> bounds = DatasetUtilities.iterateRangeBounds(range, 2);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to XYDataset)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: no suitable method found for iterateRangeBounds(Range,int)\n    [javac]     List<Range> bounds = DatasetUtilities.iterateRangeBounds(range, 2);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to CategoryDataset)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (argument mismatch; Range cannot be converted to XYDataset)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: incompatible types: double[] cannot be converted to Comparable\n    [javac]     dataset.addSeries(\"S\", new XYSeries(new double[]{1, 2, 3}, new double[]{4, 5, 6}));\n    [javac]                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1265: error: no suitable method found for iterateRangeBounds(DefaultTableXYDataset,Range,Range)\n    [javac]     List<Range> ranges = DatasetUtilities.iterateRangeBounds(dataset, xRange, yRange);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: incompatible types: double[] cannot be converted to Comparable\n    [javac]     dataset.addSeries(\"S\", new XYSeries(new double[]{1, 2, 3}, new double[]{4, 5, 6}));\n    [javac]                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1265: error: no suitable method found for iterateRangeBounds(DefaultTableXYDataset,Range,Range)\n    [javac]     List<Range> ranges = DatasetUtilities.iterateRangeBounds(dataset, xRange, yRange);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: no suitable method found for iterateRangeBounds(Range,int,boolean)\n    [javac]     List<Range> bounds = DatasetUtilities.iterateRangeBounds(range, 1, true);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1262: error: no suitable method found for iterateRangeBounds(Range,int,boolean)\n    [javac]     List<Range> bounds = DatasetUtilities.iterateRangeBounds(range, 1, true);\n    [javac]                                          ^\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(CategoryDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     method DatasetUtilities.iterateRangeBounds(XYDataset,boolean) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_33": {
        "Lang_33_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassNPEAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassNpeOnNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassNpeOnNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassNpeOnNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassNpeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassNpeAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassNpeAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_24": {
        "Lang_24_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLongSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithLongSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_29": {
        "Lang_29_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1226: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float version = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1226: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float version = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_1": {
        "Lang_1_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumbersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumbersAutoGen\njava.lang.NumberFormatException: For input string: \"FFFFFFFFFFFFFFFF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumbersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumbersAutoGen\njava.lang.NumberFormatException: For input string: \"FFFFFFFFFFFFFFFF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(0xFFFFFFFFL, NumberUtils.createLong(\"0xFFFFFFFF\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1369: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(0x100000000L, NumberUtils.createLong(\"0x100000000\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(0xFFFFFFFFL, NumberUtils.createLong(\"0xFFFFFFFF\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1369: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(0x100000000L, NumberUtils.createLong(\"0x100000000\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen\njava.lang.NumberFormatException: For input string: \"FFFFFFFFFFFFFFFF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen\njava.lang.NumberFormatException: For input string: \"FFFFFFFFFFFFFFFF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: method createLong in class NumberUtils cannot be applied to given types;\n    [javac]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createLong(\"FFFFFFFF\", 16));\n    [javac]                                                        ^\n    [javac]   required: String\n    [javac]   found: String,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: method createLong in class NumberUtils cannot be applied to given types;\n    [javac]     assertEquals(Long.valueOf(0xFFFFFFFFL), NumberUtils.createLong(\"FFFFFFFF\", 16));\n    [javac]                                                        ^\n    [javac]   required: String\n    [javac]   found: String,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(255L, NumberUtils.createLong(\"0xFF\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1369: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(65535L, NumberUtils.createLong(\"0xFFFF\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1370: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(4294967295L, NumberUtils.createLong(\"0xFFFFFFFF\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_1/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1368: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(255L, NumberUtils.createLong(\"0xFF\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1369: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(65535L, NumberUtils.createLong(\"0xFFFF\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] /root/libro/data/Defects4J/repos/Lang_1/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1370: error: reference to assertEquals is ambiguous\n    [javac]     assertEquals(4294967295L, NumberUtils.createLong(\"0xFFFFFFFF\"));\n    [javac]     ^\n    [javac]   both method assertEquals(long,long) in Assert and method assertEquals(Object,Object) in Assert match\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_1_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongHexAutoGen\njava.lang.NumberFormatException: For input string: \"FFFFFFFFFFFFFFFF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongHexAutoGen\njava.lang.NumberFormatException: For input string: \"FFFFFFFFFFFFFFFF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen\njava.lang.NumberFormatException: For input string: \"FFFFFFFFFFFFFFFF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen\njava.lang.NumberFormatException: For input string: \"FFFFFFFFFFFFFFFF\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.base/java.lang.Long.parseLong(Long.java:692)\n\tat java.base/java.lang.Long.valueOf(Long.java:1117)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_17": {
        "Time_17_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: no suitable method found for getOffset(Date)\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(dtch.toDate()).toString());\n    [javac]                                          ^\n    [javac]     method DateTimeZone.getOffset(long) is not applicable\n    [javac]       (argument mismatch; Date cannot be converted to long)\n    [javac]     method DateTimeZone.getOffset(ReadableInstant) is not applicable\n    [javac]       (argument mismatch; Date cannot be converted to ReadableInstant)\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: no suitable method found for getOffset(Date)\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(dtch.toDate()).toString());\n    [javac]                                          ^\n    [javac]     method DateTimeZone.getOffset(long) is not applicable\n    [javac]       (argument mismatch; Date cannot be converted to long)\n    [javac]     method DateTimeZone.getOffset(ReadableInstant) is not applicable\n    [javac]       (argument mismatch; Date cannot be converted to ReadableInstant)\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_17_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1234: error: int cannot be dereferenced\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(DateTime.now()).toString());\n    [javac]                                                                    ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1234: error: int cannot be dereferenced\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(DateTime.now()).toString());\n    [javac]                                                                    ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_17_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1232: error: int cannot be dereferenced\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(DateTime.now()).toString());\n    [javac]                                                                    ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1232: error: int cannot be dereferenced\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(DateTime.now()).toString());\n    [javac]                                                                    ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_17_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-03:00> but was:<-2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-03:00> but was:<-3>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: int cannot be dereferenced\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(dtch.toInstant()).toString());\n    [javac]                                                                      ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: int cannot be dereferenced\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(dtch.toInstant()).toString());\n    [javac]                                                                      ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_17_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: no suitable method found for getOffset(Date)\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(dtch.toDate()).toString());\n    [javac]                                          ^\n    [javac]     method DateTimeZone.getOffset(long) is not applicable\n    [javac]       (argument mismatch; Date cannot be converted to long)\n    [javac]     method DateTimeZone.getOffset(ReadableInstant) is not applicable\n    [javac]       (argument mismatch; Date cannot be converted to ReadableInstant)\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: no suitable method found for getOffset(Date)\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(dtch.toDate()).toString());\n    [javac]                                          ^\n    [javac]     method DateTimeZone.getOffset(long) is not applicable\n    [javac]       (argument mismatch; Date cannot be converted to long)\n    [javac]     method DateTimeZone.getOffset(ReadableInstant) is not applicable\n    [javac]       (argument mismatch; Date cannot be converted to ReadableInstant)\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_17_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-03:00> but was:<-2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-03:00> but was:<-3>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-03:00> but was:<-2>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue141AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue141AutoGen\njunit.framework.AssertionFailedError: expected:<-03:00> but was:<-3>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testBug141WithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testBug141WithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTime_Basics.testBug141WithLaterOffsetAtOverlapAutoGen(TestDateTime_Basics.java:1237)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testBug141WithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testBug141WithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTime_Basics.testBug141WithLaterOffsetAtOverlapAutoGen(TestDateTime_Basics.java:1237)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: int cannot be dereferenced\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(dtch.toInstant()).toString());\n    [javac]                                                                      ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_17/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_17/src/test/java/org/joda/time/TestDateTime_Basics.java:1236: error: int cannot be dereferenced\n    [javac]     assertEquals(\"-03:00\", dtch.getZone().getOffset(dtch.toInstant()).toString());\n    [javac]                                                                      ^\n    [javac] 1 error"
            },
            "success": false
        }
    },
    "Lang_6": {
        "Lang_6_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException to be thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:516: error: CharSequenceTranslator is abstract; cannot be instantiated\n    [javac]     CharSequenceTranslator translator = new CharSequenceTranslator();\n    [javac]                                         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:516: error: CharSequenceTranslator is abstract; cannot be instantiated\n    [javac]     CharSequenceTranslator translator = new CharSequenceTranslator();\n    [javac]                                         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_6_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:516: error: CharSequenceTranslator is abstract; cannot be instantiated\n    [javac]     CharSequenceTranslator translator = new CharSequenceTranslator();\n    [javac]                                         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 128 source files to /root/libro/data/Defects4J/repos/Lang_6/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_6/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:516: error: CharSequenceTranslator is abstract; cannot be instantiated\n    [javac]     CharSequenceTranslator translator = new CharSequenceTranslator();\n    [javac]                                         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_6_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testBugAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.fail(Assert.java:95)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testBugAutoGen(StringEscapeUtilsTest.java:518)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException to be thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException to be thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testStringIndexOutOfBoundsExceptionInCharSequenceTranslatorAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testBugAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testBugAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_1": {
        "Chart_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:255: error: no suitable constructor found for CategoryPlot(<null>)\n    [javac]     renderer.setPlot(new CategoryPlot(null));\n    [javac]                      ^\n    [javac]     constructor CategoryPlot.CategoryPlot() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor CategoryPlot.CategoryPlot(CategoryDataset,CategoryAxis,ValueAxis,CategoryItemRenderer) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:255: error: no suitable constructor found for CategoryPlot(<null>)\n    [javac]     renderer.setPlot(new CategoryPlot(null));\n    [javac]                      ^\n    [javac]     constructor CategoryPlot.CategoryPlot() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor CategoryPlot.CategoryPlot(CategoryDataset,CategoryAxis,ValueAxis,CategoryItemRenderer) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: cannot find symbol\n    [javac]     CategoryPlot plot = mock(CategoryPlot.class);\n    [javac]                         ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: cannot find symbol\n    [javac]     when(plot.getIndexOf(any(AbstractCategoryItemRenderer.class))).thenReturn(0);\n    [javac]                          ^\n    [javac]   symbol:   method any(Class<AbstractCategoryItemRenderer>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1270: error: cannot find symbol\n    [javac]     when(plot.getDataset(0)).thenReturn(null);\n    [javac]     ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: cannot find symbol\n    [javac]     CategoryPlot plot = mock(CategoryPlot.class);\n    [javac]                         ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: cannot find symbol\n    [javac]     when(plot.getIndexOf(any(AbstractCategoryItemRenderer.class))).thenReturn(0);\n    [javac]                          ^\n    [javac]   symbol:   method any(Class<AbstractCategoryItemRenderer>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1270: error: cannot find symbol\n    [javac]     when(plot.getDataset(0)).thenReturn(null);\n    [javac]     ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java:391: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java:391: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: cannot find symbol\n    [javac]     CategoryPlot plot = mock(CategoryPlot.class);\n    [javac]                         ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: cannot find symbol\n    [javac]     when(plot.getIndexOf(any(AbstractCategoryItemRenderer.class))).thenReturn(0);\n    [javac]                          ^\n    [javac]   symbol:   method any(Class<AbstractCategoryItemRenderer>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1270: error: cannot find symbol\n    [javac]     when(plot.getDataset(0)).thenReturn(null);\n    [javac]     ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: cannot find symbol\n    [javac]     CategoryPlot plot = mock(CategoryPlot.class);\n    [javac]                         ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: cannot find symbol\n    [javac]     when(plot.getIndexOf(any(AbstractCategoryItemRenderer.class))).thenReturn(0);\n    [javac]                          ^\n    [javac]   symbol:   method any(Class<AbstractCategoryItemRenderer>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1270: error: cannot find symbol\n    [javac]     when(plot.getDataset(0)).thenReturn(null);\n    [javac]     ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: AbstractCategoryItemRenderer is abstract; cannot be instantiated\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer();\n    [javac]                                             ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_3": {
        "Lang_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithFloatingPointNumbersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithFloatingPointNumbersAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<1.2345679E19>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithFloatingPointNumbersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithFloatingPointNumbersAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<1.2345678901234567E19>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForFloatingPointNumbersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForFloatingPointNumbersAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForFloatingPointNumbersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForFloatingPointNumbersAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithDoubleAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithDoubleAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithDoubleAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberForDoubleAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberForDoubleAutoGen(NumberUtilsTest.java:1357)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_5": {
        "Lang_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<_FR>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtils_ToLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtils_ToLocaleAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtils_ToLocaleAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtils_ToLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtils_ToLocaleAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<_FR>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Failed to parse locale '_en'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:504)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: Failed to parse locale '_en'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:504)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: expected:<fr> but was:<fr__P>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: expected:<fr> but was:<fr__P>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR_fr\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<_FR_fr>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtils_ToLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtils_ToLocaleAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtils_ToLocaleAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtils_ToLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtils_ToLocaleAutoGen\njunit.framework.AssertionFailedError: expected null, but was:<_FR>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotNull(Assert.java:755)\n\tat org.junit.Assert.assertNull(Assert.java:737)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr__FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:99)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr__FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: expected:<fr> but was:<_FR>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: fr__US\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njunit.framework.AssertionFailedError: expected:<fr> but was:<fr__US>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr__P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _fr__P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:104)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_5": {
        "Time_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1526)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNoneStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1526)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeThrowsExceptionAutoGen(TestPeriod_Basics.java:1526)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeThrowsExceptionAutoGen(TestPeriod_Basics.java:1526)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1525: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]            .normalizedStandard(PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks()));\n    [javac]                                          ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1524: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]                    PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks()))\n    [javac]                              ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1525: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]            .normalizedStandard(PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks()));\n    [javac]                                          ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1524: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]                    PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks()))\n    [javac]                              ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]     PeriodType periodType = PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks());\n    [javac]                                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]     PeriodType periodType = PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks());\n    [javac]                                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeAutoGen(TestPeriod_Basics.java:1524)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]     PeriodType periodType = PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks());\n    [javac]                                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]     PeriodType periodType = PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks());\n    [javac]                                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1525: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]                .normalizedStandard(PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks()));\n    [javac]                                              ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1524: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]             PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks()))\n    [javac]                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1525: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]                .normalizedStandard(PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks()));\n    [javac]                                              ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1524: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]             PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks()))\n    [javac]                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]     PeriodType periodType = PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks());\n    [javac]                                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]     PeriodType periodType = PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks());\n    [javac]                                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_5_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]     PeriodType periodType = PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks());\n    [javac]                                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_5/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_5/src/test/java/org/joda/time/TestPeriod_Basics.java:1523: error: method forFields in class PeriodType cannot be applied to given types;\n    [javac]     PeriodType periodType = PeriodType.forFields(DurationFieldType.months(), DurationFieldType.weeks());\n    [javac]                                       ^\n    [javac]   required: DurationFieldType[]\n    [javac]   found: DurationFieldType,DurationFieldType\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]         ^\n    [javac]         YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                              ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, GJChronology.getInstance(DateTimeZone.UTC));\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30, GJChronology.getInstance());\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1, GJChronology.getInstance());\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac]         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n    [javac]                                     ^\n    [javac]         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n    [javac]                                 ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n    [javac]                               ^\n    [javac]             new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n    [javac]                 ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         YearMonthDay ymd1 = new YearMonthDay(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                 ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]         ^\n    [javac]         DateMidnight dm1 = new DateMidnight(1999, DateTimeConstants.FEBRUARY, 1);\n    [javac]                                ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdStart = new YearMonthDay(start, ISOChronology.getInstanceUTC());\n    [javac]                                         ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]             ^\n    [javac]             YearMonthDay ymdEnd = new YearMonthDay(end, ISOChronology.getInstanceUTC());\n    [javac]                                       ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]         ^\n    [javac]         TimeOfDay start = new TimeOfDay(12, 30);\n    [javac]                               ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]         ^\n    [javac]         TimeOfDay end = new TimeOfDay(10, 30);\n    [javac]                             ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]         ^\n    [javac]         DateMidnight dt = new DateMidnight(1570, 1, 1);\n    [javac]                               ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]             ^\n    [javac]             YearMonthDay ymd = dt.toYearMonthDay();\n    [javac]                                  ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Time_11": {
        "Time_11_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1342: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1359: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1342: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1359: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t1 = new Thread(() -> {\n    [javac]                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:344: error: ')' expected\n    [javac]        .addRecurringSavings(\"\", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false\n    [javac]                                                                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:345: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t1 = new Thread(() -> {\n    [javac]                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:344: error: ')' expected\n    [javac]        .addRecurringSavings(\"\", 3600000, 1601, Integer.MAX_VALUE, 'w', 3, -1, 1, false\n    [javac]                                                                                       ^\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:345: error: reached end of file while parsing\n    [javac] }\n    [javac]  ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:316: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:316: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:431: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:431: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t1 = new Thread(() -> {\n    [javac]                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t1 = new Thread(() -> {\n    [javac]                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:321: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> builder.toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:321: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> builder.toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:316: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> \n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:316: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> \n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1342: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1342: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t = new Thread(() -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_17": {
        "Chart_17_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:774: error: no suitable constructor found for TimeSeries(no arguments)\n    [javac]     TimeSeries series = new TimeSeries();\n    [javac]                         ^\n    [javac]     constructor TimeSeries.TimeSeries(Comparable) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor TimeSeries.TimeSeries(Comparable,String,String,Class) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_10": {
        "Time_10_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatter.testDaysBetweenMonthDayAutoGen(TestDateTimeFormatter.java:968)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:430: error: cannot find symbol\n    [javac]     MonthDay startMd = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:430: error: cannot find symbol\n    [javac]     MonthDay startMd = new MonthDay(1, 1);\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:431: error: cannot find symbol\n    [javac]     MonthDay endMd = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:431: error: cannot find symbol\n    [javac]     MonthDay endMd = new MonthDay(2, 29);\n    [javac]                          ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:430: error: cannot find symbol\n    [javac]     MonthDay startMd = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:430: error: cannot find symbol\n    [javac]     MonthDay startMd = new MonthDay(1, 1);\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:431: error: cannot find symbol\n    [javac]     MonthDay endMd = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:431: error: cannot find symbol\n    [javac]     MonthDay endMd = new MonthDay(2, 29);\n    [javac]                          ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testDaysBetweenMonthDayAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatter.testDaysBetweenMonthDayAutoGen(TestDateTimeFormatter.java:968)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testMonthDayDaysBetweenAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testMonthDayDaysBetweenAutoGen\njunit.framework.AssertionFailedError: expected:<365> but was:<-31>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testMonthDayDaysBetweenAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testMonthDayDaysBetweenAutoGen\njunit.framework.AssertionFailedError: expected:<365> but was:<-31>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:518: error: cannot find symbol\n    [javac]     MonthDay startMd = new MonthDay(start);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:518: error: cannot find symbol\n    [javac]     MonthDay startMd = new MonthDay(start);\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:519: error: cannot find symbol\n    [javac]     MonthDay endMd = new MonthDay(end);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:519: error: cannot find symbol\n    [javac]     MonthDay endMd = new MonthDay(end);\n    [javac]                          ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:518: error: cannot find symbol\n    [javac]     MonthDay startMd = new MonthDay(start);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:518: error: cannot find symbol\n    [javac]     MonthDay startMd = new MonthDay(start);\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:519: error: cannot find symbol\n    [javac]     MonthDay endMd = new MonthDay(end);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:519: error: cannot find symbol\n    [javac]     MonthDay endMd = new MonthDay(end);\n    [javac]                          ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_16": {
        "Chart_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java:242: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java:242: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java:242: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/time/junit/TimePeriodValuesCollectionTests.java:242: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: no suitable constructor found for DefaultIntervalCategoryDataset(no arguments)\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset();\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(String[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Comparable[],Comparable[],Number[][],Number[][]) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_2": {
        "Time_2_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(DateTimeFieldType.yearOfCentury(), 1).with(DateTimeFieldType.weekOfWeekBasedYear(), 1);\n    [javac]                                                                                 ^\n    [javac]   symbol:   method weekOfWeekBasedYear()\n    [javac]   location: class DateTimeFieldType\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(DateTimeFieldType.yearOfCentury(), 1).with(DateTimeFieldType.weekOfWeekBasedYear(), 1);\n    [javac]                                                                                 ^\n    [javac]   symbol:   method weekOfWeekBasedYear()\n    [javac]   location: class DateTimeFieldType\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(DateTimeFieldType.yearOfCentury(), 1).with(DateTimeFieldType.weekOfWeekBasedYear(), 1);\n    [javac]                                                                                 ^\n    [javac]   symbol:   method weekOfWeekBasedYear()\n    [javac]   location: class DateTimeFieldType\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(DateTimeFieldType.yearOfCentury(), 1).with(DateTimeFieldType.weekOfWeekBasedYear(), 1);\n    [javac]                                                                                 ^\n    [javac]   symbol:   method weekOfWeekBasedYear()\n    [javac]   location: class DateTimeFieldType\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_2_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekOfWeekyear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekOfWeekyear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_2/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekOfWeekyear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_2/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekOfWeekyear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_40": {
        "Lang_40_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.StringUtilsEqualsIndexOfTest::testCaseInsensitiveHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_8": {
        "Time_8_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.fail(Assert.java:64)\n\tat junit.framework.TestCase.fail(TestCase.java:235)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.fail(Assert.java:64)\n\tat junit.framework.TestCase.fail(TestCase.java:235)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.fail(Assert.java:64)\n\tat junit.framework.TestCase.fail(TestCase.java:235)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testForOffsetHoursMinutesNegativeAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetHoursMinutesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetHoursMinutesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than one hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetHoursMinutesAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_28": {
        "Lang_28_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128512;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128512;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsWithUTF16SupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsWithUTF16SupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128512;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsWithUTF16SupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsWithUTF16SupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128512;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsWithUTF16SupplementaryCharacterAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsWithUTF16SupplementaryCharacterAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128516;]> but was:<[\ud83d\ude04]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsWithUTF16SupplementaryCharacterAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsWithUTF16SupplementaryCharacterAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128516;]> but was:<[\ud83d\ude04]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#55357;&#56480;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#55357;&#56480;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:514: error: cannot find symbol\n    [javac]     Entities entities = new Entities();\n    [javac]     ^\n    [javac]   symbol:   class Entities\n    [javac]   location: class ExceptionUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:514: error: cannot find symbol\n    [javac]     Entities entities = new Entities();\n    [javac]                             ^\n    [javac]   symbol:   class Entities\n    [javac]   location: class ExceptionUtilsTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:514: error: cannot find symbol\n    [javac]     Entities entities = new Entities();\n    [javac]     ^\n    [javac]   symbol:   class Entities\n    [javac]   location: class ExceptionUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:514: error: cannot find symbol\n    [javac]     Entities entities = new Entities();\n    [javac]                             ^\n    [javac]   symbol:   class Entities\n    [javac]   location: class ExceptionUtilsTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLWithUTF16SupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLWithUTF16SupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128512;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLWithUTF16SupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLWithUTF16SupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128512;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#xD83D;&#xDE00;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsAutoGen\njunit.framework.ComparisonFailure: expected:<[&#xD83D;&#xDE00;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLAutoGen\njunit.framework.ComparisonFailure: expected:<[&#55357;&#56480;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLAutoGen\njunit.framework.ComparisonFailure: expected:<[&#55357;&#56480;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLAutoGen\njunit.framework.ComparisonFailure: expected:<[&#55357;&#56480;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testStringEscapeUtilsEscapeXMLAutoGen\njunit.framework.ComparisonFailure: expected:<[&#55357;&#56480;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:514: error: cannot find symbol\n    [javac]     Entities entities = new Entities();\n    [javac]     ^\n    [javac]   symbol:   class Entities\n    [javac]   location: class ExceptionUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:514: error: cannot find symbol\n    [javac]     Entities entities = new Entities();\n    [javac]                             ^\n    [javac]   symbol:   class Entities\n    [javac]   location: class ExceptionUtilsTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:514: error: cannot find symbol\n    [javac]     Entities entities = new Entities();\n    [javac]     ^\n    [javac]   symbol:   class Entities\n    [javac]   location: class ExceptionUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java:514: error: cannot find symbol\n    [javac]     Entities entities = new Entities();\n    [javac]                             ^\n    [javac]   symbol:   class Entities\n    [javac]   location: class ExceptionUtilsTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_13": {
        "Lang_13_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n10.txt": "[error] JavaSyntaxError('')",
        "Lang_13_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n6.txt": "[error] JavaSyntaxError('')",
        "Lang_13_n4.txt": "[error] JavaSyntaxError('')",
        "Lang_13_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_13_n3.txt": "[error] JavaSyntaxError('')",
        "Lang_13_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testClonePrimitiveClassAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testClonePrimitiveClassAutoGen\norg.apache.commons.lang3.SerializationException: ClassNotFoundException while reading cloned object data\n\tat org.apache.commons.lang3.SerializationUtils.clone(SerializationUtils.java:97)\n\tat org.apache.commons.lang3.SerializationUtilsTest.testClonePrimitiveClassAutoGen(SerializationUtilsTest.java:371)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_13_n9.txt": "[error] JavaSyntaxError('')",
        "Lang_13_n2.txt": "[error] JavaSyntaxError('')"
    },
    "Time_16": {
        "Time_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: incompatible types: Instant cannot be converted to ReadWritableInstant\n    [javac]     dtf.parseInto(instant, \"02-29\", 0);\n    [javac]                   ^\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1183: error: cannot find symbol\n    [javac]     assertEquals(1970, instant.getYear());\n    [javac]                               ^\n    [javac]   symbol:   method getYear()\n    [javac]   location: variable instant of type Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1184: error: cannot find symbol\n    [javac]     assertEquals(2, instant.getMonthOfYear());\n    [javac]                            ^\n    [javac]   symbol:   method getMonthOfYear()\n    [javac]   location: variable instant of type Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1185: error: cannot find symbol\n    [javac]     assertEquals(29, instant.getDayOfMonth());\n    [javac]                             ^\n    [javac]   symbol:   method getDayOfMonth()\n    [javac]   location: variable instant of type Instant\n    [javac] 4 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1182: error: incompatible types: Instant cannot be converted to ReadWritableInstant\n    [javac]     dtf.parseInto(instant, \"02-29\", 0);\n    [javac]                   ^\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1183: error: cannot find symbol\n    [javac]     assertEquals(1970, instant.getYear());\n    [javac]                               ^\n    [javac]   symbol:   method getYear()\n    [javac]   location: variable instant of type Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1184: error: cannot find symbol\n    [javac]     assertEquals(2, instant.getMonthOfYear());\n    [javac]                            ^\n    [javac]   symbol:   method getMonthOfYear()\n    [javac]   location: variable instant of type Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1185: error: cannot find symbol\n    [javac]     assertEquals(29, instant.getDayOfMonth());\n    [javac]                             ^\n    [javac]   symbol:   method getDayOfMonth()\n    [javac]   location: variable instant of type Instant\n    [javac] 4 errors"
            },
            "success": false
        },
        "Time_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1228: error: cannot find symbol\n    [javac]     Instant instant = new Instant().withYear(2015); // Non-leap year\n    [javac]                                    ^\n    [javac]   symbol:   method withYear(int)\n    [javac]   location: class Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1231: error: incompatible types: DateTime cannot be converted to ReadWritableInstant\n    [javac]     formatter.parseInto(dateTime, \"0229\", 0);\n    [javac]                         ^\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1228: error: cannot find symbol\n    [javac]     Instant instant = new Instant().withYear(2015); // Non-leap year\n    [javac]                                    ^\n    [javac]   symbol:   method withYear(int)\n    [javac]   location: class Instant\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1231: error: incompatible types: DateTime cannot be converted to ReadWritableInstant\n    [javac]     formatter.parseInto(dateTime, \"0229\", 0);\n    [javac]                         ^\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     formatter.parseInto(dateTime);\n    [javac]              ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: MutableDateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormatter.java:910: error: method parseInto in class DateTimeFormatter cannot be applied to given types;\n    [javac]     formatter.parseInto(dateTime);\n    [javac]              ^\n    [javac]   required: ReadWritableInstant,String,int\n    [javac]   found: MutableDateTime\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue148AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"02/29/2021\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:219)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue148AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"02/29/2021\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:219)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1183: error: incompatible types: DateTime cannot be converted to ReadWritableInstant\n    [javac]     formatter.parseInto(dateTime, \"02-29\", 0);\n    [javac]                         ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1183: error: incompatible types: DateTime cannot be converted to ReadWritableInstant\n    [javac]     formatter.parseInto(dateTime, \"02-29\", 0);\n    [javac]                         ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue148AutoGen\njunit.framework.AssertionFailedError: expected:<2001> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue148AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"02-29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:219)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue148AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:237)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testIssue148AutoGen\norg.joda.time.IllegalFieldValueException: Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:237)\n\tat org.joda.time.chrono.BasicChronology.getDateMidnightMillis(BasicChronology.java:605)\n\tat org.joda.time.chrono.BasicChronology.getDateTimeMillis(BasicChronology.java:177)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testIssue148AutoGen\njunit.framework.AssertionFailedError: expected:<2001> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testIssue148AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"0229\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:219)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1231: error: incompatible types: DateTime cannot be converted to ReadWritableInstant\n    [javac]     formatter.parseInto(dateTime, \"0229\", 0);\n    [javac]                         ^\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1231: error: incompatible types: DateTime cannot be converted to ReadWritableInstant\n    [javac]     formatter.parseInto(dateTime, \"0229\", 0);\n    [javac]                         ^\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_31": {
        "Lang_31_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnySupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnySupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_31_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n4.txt": "[error] JavaSyntaxError('')",
        "Lang_31_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_1": {
        "Time_1_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(DateTimeFieldType.yearOfCentury(), 1).with(DateTimeFieldType.weekOfWeekBasedYear(), 1);\n    [javac]                                                                                 ^\n    [javac]   symbol:   method weekOfWeekBasedYear()\n    [javac]   location: class DateTimeFieldType\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(DateTimeFieldType.yearOfCentury(), 1).with(DateTimeFieldType.weekOfWeekBasedYear(), 1);\n    [javac]                                                                                 ^\n    [javac]   symbol:   method weekOfWeekBasedYear()\n    [javac]   location: class DateTimeFieldType\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekyear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(CenturyField.INSTANCE, 1).with(WeekyearField.INSTANCE, 1);\n    [javac]                                                    ^\n    [javac]   symbol:   variable WeekyearField\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(CenturyField.INSTANCE, 1).with(WeekyearField.INSTANCE, 1);\n    [javac]                     ^\n    [javac]   symbol:   variable CenturyField\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(CenturyField.INSTANCE, 1).with(WeekyearField.INSTANCE, 1);\n    [javac]                                                    ^\n    [javac]   symbol:   variable WeekyearField\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(CenturyField.INSTANCE, 1).with(WeekyearField.INSTANCE, 1);\n    [javac]                     ^\n    [javac]   symbol:   variable CenturyField\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekOfWeekBasedYear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekOfWeekBasedYear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_1/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekOfWeekBasedYear(), 1);\n    [javac]                                                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_1/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(Fields.yearOfCentury(), 1).with(Fields.weekOfWeekBasedYear(), 1);\n    [javac]                     ^\n    [javac]   symbol:   variable Fields\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Time_18": {
        "Time_18_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:340)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n4.txt": "[error] JavaSyntaxError('')",
        "Time_18_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:340)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n10.txt": "[error] JavaSyntaxError('')",
        "Time_18_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:340)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n1.txt": "[error] JavaSyntaxError('')",
        "Time_18_n6.txt": "[error] JavaSyntaxError('')",
        "Time_18_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:340)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyRejectsValidJulianDatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyRejectsValidJulianDatesAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyRejectsValidJulianDatesAutoGen(TestIllegalFieldValueException.java:340)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testIssue130AutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testIssue130AutoGen(TestIllegalFieldValueException.java:340)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_38": {
        "Lang_38_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtils_format_CalendarTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtils_format_CalendarTimeZoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtils_format_CalendarTimeZoneBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testDateFormatUtils_format_CalendarTimeZoneBugAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_38_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1568: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1568: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n8.txt": "[error] JavaSyntaxError('')",
        "Lang_38_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: cannot find symbol\n    [javac]     assertNotEquals(dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_11": {
        "Lang_11_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                  ^\n    [javac]   symbol:   variable start\n    [javac]   location: class CharRangeTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                         ^\n    [javac]   symbol:   variable end\n    [javac]   location: class CharRangeTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                  ^\n    [javac]   symbol:   variable start\n    [javac]   location: class CharRangeTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                         ^\n    [javac]   symbol:   variable end\n    [javac]   location: class CharRangeTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                  ^\n    [javac]   symbol:   variable start\n    [javac]   location: class CharRangeTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                         ^\n    [javac]   symbol:   variable end\n    [javac]   location: class CharRangeTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                  ^\n    [javac]   symbol:   variable start\n    [javac]   location: class CharRangeTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                         ^\n    [javac]   symbol:   variable end\n    [javac]   location: class CharRangeTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(-1, 5);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(-1, 5);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphabetic in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphabetic(-1, 0);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphabetic in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphabetic(-1, 0);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                  ^\n    [javac]   symbol:   variable start\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                         ^\n    [javac]   symbol:   variable end\n    [javac]   location: class DateUtilsTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                  ^\n    [javac]   symbol:   variable start\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                         ^\n    [javac]   symbol:   variable end\n    [javac]   location: class DateUtilsTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                  ^\n    [javac]   symbol:   variable start\n    [javac]   location: class CharRangeTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                         ^\n    [javac]   symbol:   variable end\n    [javac]   location: class CharRangeTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                  ^\n    [javac]   symbol:   variable start\n    [javac]   location: class CharRangeTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/CharRangeTest.java:385: error: cannot find symbol\n    [javac]         RandomStringUtils.random(start, end);\n    [javac]                                         ^\n    [javac]   symbol:   variable end\n    [javac]   location: class CharRangeTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 5);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(5, 5);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_11_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(-1, 0);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java:338: error: method randomAlphanumeric in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphanumeric(-1, 0);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphabetic in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphabetic(5, 1, 1);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: method randomAlphabetic in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphabetic(5, 1, 1);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_41": {
        "Lang_41_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameWithArraysAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_7": {
        "Lang_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testNumberUtilsCreateNumberLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithLeadingDoubleDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithLeadingDoubleDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithLeadingDoubleDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithLeadingDoubleDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithLeadingDashDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.MethodUtilsTest::testCreateNumberWithLeadingDashDashAutoGen\njava.lang.NumberFormatException: Illegal embedded sign character\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:494)\n\tat java.base/java.math.BigInteger.<init>(BigInteger.java:674)\n\tat org.apache.commons.lang3.math.NumberUtils.createBigInteger(NumberUtils.java:698)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_4": {
        "Time_4_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     assertNotEquals(a, new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                         ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     assertNotEquals(a, new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                    ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     assertNotEquals(a, new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                         ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     assertNotEquals(a, new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                    ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     Partial b = a.with(hourOfDay(), 1);\n    [javac]                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:466: error: cannot find symbol\n    [javac]     assertNotEquals(a, b);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(Partial,Partial)\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:469: error: cannot find symbol\n    [javac]         a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                    ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:469: error: cannot find symbol\n    [javac]         a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     Partial b = a.with(hourOfDay(), 1);\n    [javac]                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:466: error: cannot find symbol\n    [javac]     assertNotEquals(a, b);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(Partial,Partial)\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:469: error: cannot find symbol\n    [javac]         a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                    ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:469: error: cannot find symbol\n    [javac]         a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = a.with(hourOfDay(), 1);\n    [javac]                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1095: error: cannot find symbol\n    [javac]     assertNotEquals(a, b);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(Partial,Partial)\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         a.isEqual(b.with(clockhourOfDay(), 1));\n    [javac]                          ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = a.with(hourOfDay(), 1);\n    [javac]                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1095: error: cannot find symbol\n    [javac]     assertNotEquals(a, b);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(Partial,Partial)\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         a.isEqual(b.with(clockhourOfDay(), 1));\n    [javac]                          ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = a.with(hourOfDay(), 1);\n    [javac]                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = a.with(hourOfDay(), 1);\n    [javac]                        ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                                                  ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1095: error: cannot find symbol\n    [javac]     assertNotEquals(a, b);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(Partial,Partial)\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                                                  ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1095: error: cannot find symbol\n    [javac]     assertNotEquals(a, b);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(Partial,Partial)\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 7 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     assertNotEquals(a, new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                         ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     assertNotEquals(a, new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                    ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:458: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:464: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     assertNotEquals(a, new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                         ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/chrono/TestISOChronology.java:465: error: cannot find symbol\n    [javac]     assertNotEquals(a, new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                    ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestISOChronology\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     assertTrue(a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1)));\n    [javac]                                                           ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     assertTrue(a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1)));\n    [javac]                                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     assertTrue(a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1)));\n    [javac]                                                           ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     assertTrue(a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1)));\n    [javac]                                      ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                                                  ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                                                  ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1094: error: cannot find symbol\n    [javac]     Partial b = new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(),1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                       ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(),1).with(clockhourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(),1).with(clockhourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(),1).with(clockhourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1092: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(),1).with(clockhourOfDay(), 1));\n    [javac]                                                                                                       ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(),1).with(clockhourOfDay(), 1));\n    [javac]                                                                                   ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(),1).with(clockhourOfDay(), 1));\n    [javac]                                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1097: error: cannot find symbol\n    [javac]         new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1).isEqual(new Partial(hourOfDay(),1).with(clockhourOfDay(), 1));\n    [javac]                     ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 8 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_4_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                    ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_4/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                               ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1087: error: cannot find symbol\n    [javac]         new Partial(new DateTimeFieldType[] { clockhourOfDay(), hourOfDay() }, new int[] { 1, 1 });\n    [javac]                                                                 ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                                                       ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1093: error: cannot find symbol\n    [javac]     Partial a = new Partial(clockhourOfDay(), 1).with(hourOfDay(), 1);\n    [javac]                             ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                                                    ^\n    [javac]   symbol:   method clockhourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_4/src/test/java/org/joda/time/TestLocalDateTime_Basics.java:1098: error: cannot find symbol\n    [javac]         a.isEqual(new Partial(hourOfDay(), 1).with(clockhourOfDay(), 1));\n    [javac]                               ^\n    [javac]   symbol:   method hourOfDay()\n    [javac]   location: class TestLocalDateTime_Basics\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 6 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    }
}