{
    "Lang_12": {
        "Lang_12_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:326)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsEmptyUniverseAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsEmptyUniverseAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsEmptyUniverseAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsRandomArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsRandomArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsRandomArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtils_ArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtils_ArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils_ArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_12_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsArrayIndexOutOfBoundsAutoGen\njava.lang.IllegalArgumentException: The chars array must not be empty\n\tat org.apache.commons.lang3.RandomStringUtils.random(RandomStringUtils.java:231)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsArrayIndexOutOfBoundsAutoGen(RandomStringUtilsTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_4": {
        "Lang_4_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharBufferAutoGen(StringUtilsTest.java:2327)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharBufferAutoGen(StringUtilsTest.java:2326)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testCharSequenceTranslationWithCharBufferAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testCharSequenceTranslationWithCharBufferAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testCharSequenceTranslationWithCharBufferAutoGen(StringUtilsTest.java:2327)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharBufferAutoGen(StringUtilsTest.java:2327)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2326)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharBufferAutoGen\njunit.framework.AssertionFailedError: Translation results should be identical expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharBufferAutoGen(StringUtilsTest.java:2326)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2328)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2327)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2327)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_4_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testLookupTranslatorWithCharSequenceAutoGen\njunit.framework.AssertionFailedError: expected:<1 [&lt;] 2> but was:<1 [<] 2>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.StringUtilsTest.testLookupTranslatorWithCharSequenceAutoGen(StringUtilsTest.java:2328)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_8": {
        "Lang_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZonePatternAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZonePatternAutoGen\njunit.framework.AssertionFailedError: Expected to find 'EST' in the formatted output, but got: 10:49PM PDT\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZonePatternAutoGen(FastDatePrinterTest.java:271)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZonePatternAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZonePatternAutoGen\njunit.framework.AssertionFailedError: Expected to find 'EST' in the formatted output, but got: 10:51PM EDT\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZonePatternAutoGen(FastDatePrinterTest.java:271)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZonePatternAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZonePatternAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZonePatternAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZonePatternAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_8_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimezoneRespectsCalendarAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimezoneRespectsCalendarAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDatePrinterTest::testFastDateFormatTimeZoneAutoGen\njunit.framework.AssertionFailedError: Unexpected timezone name in formatted date: 10:50PM PDT\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.apache.commons.lang3.time.FastDatePrinterTest.testFastDateFormatTimeZoneAutoGen(FastDatePrinterTest.java:267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimezoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimezoneAutoGen\njunit.framework.AssertionFailedError: Expected timezone to be Central, but was: 10:00AM PDT\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateFormatTimezoneAutoGen(FastDateParserTest.java:532)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneNameAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateFormatTimeZoneNameAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_8_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_8/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_8/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:531: error: incompatible types: boolean cannot be converted to String\n    [javac]     assertTrue(formattedDate.endsWith(\"CST\"), \"Expected timezone indication to be CST but was \" + formattedDate);\n    [javac]                                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_8/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_8/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:531: error: incompatible types: boolean cannot be converted to String\n    [javac]     assertTrue(formattedDate.endsWith(\"CST\"), \"Expected timezone indication to be CST but was \" + formattedDate);\n    [javac]                                      ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_8_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_15": {
        "Time_15_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException due to overflow, but got result: -9223372036854775808\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException due to overflow, but got result: -9223372036854775808\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException due to overflow\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException due to overflow.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testSafeMultiplyLongMinValueByNegativeOneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testSafeMultiplyLongMinValueByNegativeOneAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException for overflow when multiplying Long.MIN_VALUE by -1\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testSafeMultiplyLongMinValueByNegativeOneAutoGen(TestISOChronology.java:429)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException for overflow\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:242)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyLongMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyLongMinValueAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException due to overflow\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyLongMinValueAutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestScaledDurationField::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestScaledDurationField::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected an ArithmeticException to be thrown for overflow, but got result: -9223372036854775808\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestScaledDurationField.testSafeMultiplyOverflowAutoGen(TestScaledDurationField.java:297)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_15_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testSafeMultiplyOverflowAutoGen\njava.lang.ArithmeticException: Multiplication overflows a long: -9223372036854775808 * -1\n\tat org.joda.time.field.FieldUtils.safeMultiply(FieldUtils.java:139)\n\tat org.joda.time.TestPeriod_Basics.testSafeMultiplyOverflowAutoGen(TestPeriod_Basics.java:1521)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_15_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.field.TestFieldUtils::testSafeMultiplyOverflowAutoGen\njunit.framework.AssertionFailedError: Expected ArithmeticException due to overflow\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.field.TestFieldUtils.testSafeMultiplyOverflowAutoGen(TestFieldUtils.java:244)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_6": {
        "Time_6_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:839: error: cannot find symbol\n    [javac]         assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                               ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:846: error: cannot find symbol\n    [javac]         assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:839: error: cannot find symbol\n    [javac]         assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                               ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:846: error: cannot find symbol\n    [javac]         assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:838: error: cannot find symbol\n    [javac]         assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                               ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:844: error: cannot find symbol\n    [javac]         assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:838: error: cannot find symbol\n    [javac]         assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                               ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:844: error: cannot find symbol\n    [javac]         assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:839: error: cannot find symbol\n    [javac]         assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                               ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:846: error: cannot find symbol\n    [javac]         assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:839: error: cannot find symbol\n    [javac]         assertThat(start.minusYears(2013), is(equalTo(expectedEnd)));\n    [javac]                                               ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:846: error: cannot find symbol\n    [javac]         assertThat(start.plus(Period.years(-2013)), is(equalTo(expectedEnd)));\n    [javac]                                                        ^\n    [javac]   symbol:   method equalTo(LocalDate)\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_6_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_6/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_6/src/test/java/org/joda/time/TestYearMonthDay_Basics.java:833: error: cannot find symbol\n    [javac]     Chronology chronology = GJChronology.getInstance();\n    [javac]                             ^\n    [javac]   symbol:   variable GJChronology\n    [javac]   location: class TestYearMonthDay_Basics\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_15": {
        "Lang_15_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments_PartiallyAssignedClassAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments_PartiallyAssignedClassAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments_partiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments_partiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsForPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsForPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsWithPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsPartialAssignmentAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsPartialAssignmentAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsPartiallyAssignedClassesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArgumentsPartiallyAssignedClassesAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_15_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.TypeUtilsTest::testTypeUtilsGetTypeArgumentsAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.SystemUtils.isJavaVersionAtLeast(SystemUtils.java:1371)\n\tat org.apache.commons.lang3.ClassUtils.isAssignable(ClassUtils.java:589)\n\tat org.apache.commons.lang3.reflect.TypeUtils.isAssignable(TypeUtils.java:131)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_9": {
        "Chart_9_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException should not be thrown: Requires start <= end.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyAutoGen(TimeSeriesTests.java:855)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyWithEmptyResultAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCreateCopyWithEmptyResultAutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException should not have been thrown for a valid range returning an empty series\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopyWithEmptyResultAutoGen(TimeSeriesTests.java:855)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException should not be thrown for an expected empty series\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyAutoGen(TimeSeriesTests.java:855)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyReturnsEmptySeriesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyReturnsEmptySeriesAutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException thrown: Requires start <= end.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyReturnsEmptySeriesAutoGen(TimeSeriesTests.java:856)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException: Requires start <= end.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyAutoGen(TimeSeriesTests.java:855)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyIllegalArgumentAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyIllegalArgumentAutoGen\njunit.framework.AssertionFailedError: Expected an IllegalArgumentException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyIllegalArgumentAutoGen(TimeSeriesTests.java:850)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_9_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyError818AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyError818AutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException: Requires start <= end was thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyError818AutoGen(TimeSeriesTests.java:856)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException was thrown with message: Requires start <= end.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyAutoGen(TimeSeriesTests.java:855)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException should not have been thrown: Requires start <= end.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyAutoGen(TimeSeriesTests.java:856)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_9_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testTimeSeriesCreateCopyAutoGen\njunit.framework.AssertionFailedError: IllegalArgumentException was thrown: Requires start <= end.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testTimeSeriesCreateCopyAutoGen(TimeSeriesTests.java:855)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_7": {
        "Time_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseInto_monthDay_feb29_startOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testParseIntoMonthDayFeb29StartOfYearAutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"2 29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:220)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_5": {
        "Chart_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicateXValuesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicateXValuesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicateXValuesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicateXValuesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateAllowsDuplicatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateAllowsDuplicatesAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateAllowsDuplicatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateAllowsDuplicatesAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicateXValuesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicateXValuesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njunit.framework.AssertionFailedError: expected:<2> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen\norg.jfree.data.general.SeriesException: X-value already exists.\n\tat org.jfree.data.xy.XYSeries.add(XYSeries.java:368)\n\tat org.jfree.data.xy.XYSeries.add(XYSeries.java:329)\n\tat org.jfree.data.xy.XYSeries.add(XYSeries.java:254)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testXYSeriesAddOrUpdateWithDuplicatesAllowedAutoGen\norg.jfree.data.general.SeriesException: X-value already exists.\n\tat org.jfree.data.xy.XYSeries.add(XYSeries.java:373)\n\tat org.jfree.data.xy.XYSeries.add(XYSeries.java:334)\n\tat org.jfree.data.xy.XYSeries.add(XYSeries.java:255)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithDuplicatesAllowedAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithAllowDuplicateXValuesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesTests::testAddOrUpdateWithAllowDuplicateXValuesAutoGen\njava.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:788)\n\tat java.base/java.util.ArrayList.add(ArrayList.java:513)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:558)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_9": {
        "Lang_9_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesInFastDateParserAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesInFastDateParserAutoGen\njunit.framework.AssertionFailedError: Expected a ParseException due to unterminated quotes\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testUnterminatedQuotesInFastDateParserAutoGen(FastDateParserTest.java:512)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesInFastDateParserAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesInFastDateParserAutoGen\njava.lang.IllegalArgumentException: Failed to parse \"'d'd'\" ; gave up at index 4\n\tat org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:145)\n\tat org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)\n\tat org.apache.commons.lang3.time.FastDateFormat.<init>(FastDateFormat.java:370)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException due to unterminated quotes\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testUnterminatedQuotesAutoGen(FastDateParserTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Failed to parse \"'d'd'\" ; gave up at index 4\n\tat org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:145)\n\tat org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testUnterminatedQuotesAutoGen(FastDateParserTest.java:503)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuoteAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuoteAutoGen\njunit.framework.AssertionFailedError: Expected ParseException due to unterminated quotes\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserUnterminatedQuoteAutoGen(FastDateParserTest.java:507)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuoteAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuoteAutoGen\njava.lang.IllegalArgumentException: Failed to parse \"'d'd'\" ; gave up at index 4\n\tat org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:145)\n\tat org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserUnterminatedQuoteAutoGen(FastDateParserTest.java:505)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuotesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException due to unterminated quotes in date format.\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserUnterminatedQuotesAutoGen(FastDateParserTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Failed to parse \"'d'd'\" ; gave up at index 4\n\tat org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:145)\n\tat org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserUnterminatedQuotesAutoGen(FastDateParserTest.java:503)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: cannot find symbol\n    [javac]         DateFormat fdp = new FastDateFormat(\"'d'd'\");\n    [javac]         ^\n    [javac]   symbol:   class DateFormat\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateFormat in class FastDateFormat cannot be applied to given types;\n    [javac]         DateFormat fdp = new FastDateFormat(\"'d'd'\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_9/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: cannot find symbol\n    [javac]         DateFormat fdp = new FastDateFormat(\"'d'd'\");\n    [javac]         ^\n    [javac]   symbol:   class DateFormat\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_9/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:503: error: constructor FastDateFormat in class FastDateFormat cannot be applied to given types;\n    [javac]         DateFormat fdp = new FastDateFormat(\"'d'd'\");\n    [javac]                          ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_9_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Unterminated quote\n\tat java.base/java.text.SimpleDateFormat.compile(SimpleDateFormat.java:861)\n\tat java.base/java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:653)\n\tat java.base/java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:624)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Unterminated quote\n\tat java.base/java.text.SimpleDateFormat.compile(SimpleDateFormat.java:861)\n\tat java.base/java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:653)\n\tat java.base/java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:624)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWithUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWithUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Unterminated quote\n\tat java.base/java.text.SimpleDateFormat.compile(SimpleDateFormat.java:861)\n\tat java.base/java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:653)\n\tat java.base/java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:624)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWithUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWithUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Unterminated quote\n\tat java.base/java.text.SimpleDateFormat.compile(SimpleDateFormat.java:861)\n\tat java.base/java.text.SimpleDateFormat.initialize(SimpleDateFormat.java:653)\n\tat java.base/java.text.SimpleDateFormat.<init>(SimpleDateFormat.java:624)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException due to unterminated quotes in pattern\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testUnterminatedQuotesAutoGen(FastDateParserTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Failed to parse \"'d'd'\" ; gave up at index 4\n\tat org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:145)\n\tat org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testUnterminatedQuotesAutoGen(FastDateParserTest.java:503)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesInFormatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesInFormatAutoGen\njunit.framework.AssertionFailedError: Expected ParseException due to unterminated quotes\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testUnterminatedQuotesInFormatAutoGen(FastDateParserTest.java:505)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesInFormatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesInFormatAutoGen\njava.lang.IllegalArgumentException: Failed to parse \"'d'd'\" ; gave up at index 4\n\tat org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:145)\n\tat org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testUnterminatedQuotesInFormatAutoGen(FastDateParserTest.java:503)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_9_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen\njunit.framework.AssertionFailedError: Expected ParseException due to unterminated quotes in format\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testUnterminatedQuotesAutoGen(FastDateParserTest.java:507)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testUnterminatedQuotesAutoGen\njava.lang.IllegalArgumentException: Failed to parse \"'d'd'\" ; gave up at index 4\n\tat org.apache.commons.lang3.time.FastDateParser.init(FastDateParser.java:145)\n\tat org.apache.commons.lang3.time.FastDateParser.<init>(FastDateParser.java:108)\n\tat org.apache.commons.lang3.time.FastDateFormat.<init>(FastDateFormat.java:370)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_39": {
        "Lang_39_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: replaceEach should handle null replacements without throwing NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1764)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings []!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: NullPointerException thrown when null is used as a replacement.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1763)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_39_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: StringUtils.replaceEach should handle null replacement gracefully.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1765)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings []!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njava.lang.NullPointerException\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3676)\n\tat org.apache.commons.lang3.StringUtils.replaceEach(StringUtils.java:3502)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1760)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings []!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1763)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected a NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: Expected a NullPointerException to be thrown or documentation clarification\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1762)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.AssertionFailedError: replaceEach should not throw a NullPointerException when a null value is in the replacement list\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachWithNullReplacementAutoGen(StringUtilsTest.java:1764)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachWithNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings []!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_39_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.AssertionFailedError: replaceEach should handle null replacements gracefully.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.StringUtilsTest.testReplaceEachNullReplacementAutoGen(StringUtilsTest.java:1765)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testReplaceEachNullReplacementAutoGen\njunit.framework.ComparisonFailure: expected:<Greetings []!> but was:<Greetings [World]!>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_27": {
        "Lang_27_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMixedExponentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMixedExponentsAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but got StringIndexOutOfBoundsException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithMixedExponentsAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMixedExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMixedExponentIndicatorsAutoGen\njunit.framework.AssertionFailedError: StringIndexOutOfBoundsException was thrown instead of NumberFormatException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithMixedExponentIndicatorsAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentStringAutoGen\njunit.framework.AssertionFailedError: Did not expect StringIndexOutOfBoundsException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithInvalidExponentStringAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMultipleExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMultipleExponentIndicatorsAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but got StringIndexOutOfBoundsException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithMultipleExponentIndicatorsAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentIndicatorsAutoGen\njunit.framework.AssertionFailedError: StringIndexOutOfBoundsException was thrown instead of NumberFormatException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithInvalidExponentIndicatorsAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMixedExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMixedExponentIndicatorsAutoGen\njunit.framework.AssertionFailedError: Unexpected StringIndexOutOfBoundsException was thrown.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithMixedExponentIndicatorsAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentAutoGen\njunit.framework.AssertionFailedError: StringIndexOutOfBoundsException should not be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithInvalidExponentAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentStringAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but got StringIndexOutOfBoundsException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithInvalidExponentStringAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentIndicatorsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithInvalidExponentIndicatorsAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but got StringIndexOutOfBoundsException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithInvalidExponentIndicatorsAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_27_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMultipleExponentsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithMultipleExponentsAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but got StringIndexOutOfBoundsException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithMultipleExponentsAutoGen(NumberUtilsTest.java:1228)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_13": {
        "Time_13_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativePeriodMillisToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativePeriodMillisToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.convert.TestConverterManager::testNegativeMillisInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.convert.TestConverterManager::testNegativeMillisInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_13_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMutablePeriod_Updates::testNegativeMillisInPeriodToStringAutoGen\njunit.framework.ComparisonFailure: expected:<PT[-]0.100S> but was:<PT[]0.100S>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_34": {
        "Lang_34_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1015: error: diamond operator is not supported in -source 6\n    [javac]     ReferenceQueue<Object> referenceQueue = new ReferenceQueue<>();\n    [javac]                                                                ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1015: error: diamond operator is not supported in -source 6\n    [javac]     ReferenceQueue<Object> referenceQueue = new ReferenceQueue<>();\n    [javac]                                                                ^\n    [javac]   (use -source 7 or higher to enable diamond operator)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1021: error: incompatible types: boolean cannot be converted to String\n    [javac]     assertTrue(availableMemoryAfter >= availableMemoryBefore * 0.9, \n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1021: error: incompatible types: boolean cannot be converted to String\n    [javac]     assertTrue(availableMemoryAfter >= availableMemoryBefore * 0.9, \n    [javac]                                     ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_34_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testThreadLocalMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testThreadLocalMemoryLeakAutoGen\njava.lang.IllegalArgumentException: The style must not be null\n\tat org.apache.commons.lang3.builder.ToStringBuilder.setDefaultStyle(ToStringBuilder.java:140)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testThreadLocalMemoryLeakAutoGen(FieldUtilsTest.java:916)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.reflect.FieldUtilsTest::testThreadLocalMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.reflect.FieldUtilsTest::testThreadLocalMemoryLeakAutoGen\njava.lang.IllegalArgumentException: The style must not be null\n\tat org.apache.commons.lang3.builder.ToStringBuilder.setDefaultStyle(ToStringBuilder.java:140)\n\tat org.apache.commons.lang3.reflect.FieldUtilsTest.testThreadLocalMemoryLeakAutoGen(FieldUtilsTest.java:916)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:486: error: lambda expressions are not supported in -source 6\n    [javac]     Runnable task = () -> {\n    [javac]                        ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_34/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_34/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:486: error: lambda expressions are not supported in -source 6\n    [javac]     Runnable task = () -> {\n    [javac]                        ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_34_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_34_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testMemoryLeakInToStringStyleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.builder.ToStringBuilderTest::testMemoryLeakInToStringStyleAutoGen\njunit.framework.AssertionFailedError: Clearing cache or further usage failed, indicating potential memory leak: org.apache.commons.lang3.builder.ToStringStyle.clearCache()\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testMemoryLeakInToStringStyleAutoGen(ToStringBuilderTest.java:1025)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testMemoryLeakInToStringStyleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.builder.ToStringBuilderTest::testMemoryLeakInToStringStyleAutoGen\njunit.framework.AssertionFailedError: Clearing cache or further usage failed, indicating potential memory leak: org.apache.commons.lang3.builder.ToStringStyle.clearCache()\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.builder.ToStringBuilderTest.testMemoryLeakInToStringStyleAutoGen(ToStringBuilderTest.java:1025)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_12": {
        "Chart_12_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:604: error: cannot find symbol\n    [javac] private class PlotChangeListenerMock implements PlotChangeListener {\n    [javac]                                                 ^\n    [javac]   symbol:   class PlotChangeListener\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:607: error: cannot find symbol\n    [javac]     public void plotChanged(PlotChangeEvent event) {\n    [javac]                             ^\n    [javac]   symbol:   class PlotChangeEvent\n    [javac]   location: class JFreeChartTests.PlotChangeListenerMock\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:591: error: cannot find symbol\n    [javac]     CategoryDataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class CategoryDataset\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: incompatible types: JFreeChartTests.PlotChangeListenerMock cannot be converted to PlotChangeListener\n    [javac]     plot.addChangeListener(listener);\n    [javac]                            ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:604: error: cannot find symbol\n    [javac] private class PlotChangeListenerMock implements PlotChangeListener {\n    [javac]                                                 ^\n    [javac]   symbol:   class PlotChangeListener\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:607: error: cannot find symbol\n    [javac]     public void plotChanged(PlotChangeEvent event) {\n    [javac]                             ^\n    [javac]   symbol:   class PlotChangeEvent\n    [javac]   location: class JFreeChartTests.PlotChangeListenerMock\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:591: error: cannot find symbol\n    [javac]     CategoryDataset dataset = new DefaultCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class CategoryDataset\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: incompatible types: JFreeChartTests.PlotChangeListenerMock cannot be converted to PlotChangeListener\n    [javac]     plot.addChangeListener(listener);\n    [javac]                            ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:565: error: cannot find symbol\n    [javac]     assertNotNull(\"MultiplePiePlot's dataset should have been updated with the listener change.\", plot.getPieChart().getDataset());\n    [javac]                                                                                                                     ^\n    [javac]   symbol:   method getDataset()\n    [javac]   location: class JFreeChart\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:565: error: cannot find symbol\n    [javac]     assertNotNull(\"MultiplePiePlot's dataset should have been updated with the listener change.\", plot.getPieChart().getDataset());\n    [javac]                                                                                                                     ^\n    [javac]   symbol:   method getDataset()\n    [javac]   location: class JFreeChart\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_12_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:604: error: cannot find symbol\n    [javac] private class DatasetChangeListenerMock implements DatasetChangeListener {\n    [javac]                                                    ^\n    [javac]   symbol:   class DatasetChangeListener\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:608: error: cannot find symbol\n    [javac]     public void datasetChanged(DatasetChangeEvent event) {\n    [javac]                                ^\n    [javac]   symbol:   class DatasetChangeEvent\n    [javac]   location: class JFreeChartTests.DatasetChangeListenerMock\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: incompatible types: JFreeChartTests.DatasetChangeListenerMock cannot be converted to PlotChangeListener\n    [javac]     plot.addChangeListener(listenerMock);\n    [javac]                            ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:607: error: method does not override or implement a method from a supertype\n    [javac]     @Override\n    [javac]     ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:604: error: cannot find symbol\n    [javac] private class DatasetChangeListenerMock implements DatasetChangeListener {\n    [javac]                                                    ^\n    [javac]   symbol:   class DatasetChangeListener\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:608: error: cannot find symbol\n    [javac]     public void datasetChanged(DatasetChangeEvent event) {\n    [javac]                                ^\n    [javac]   symbol:   class DatasetChangeEvent\n    [javac]   location: class JFreeChartTests.DatasetChangeListenerMock\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: incompatible types: JFreeChartTests.DatasetChangeListenerMock cannot be converted to PlotChangeListener\n    [javac]     plot.addChangeListener(listenerMock);\n    [javac]                            ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:607: error: method does not override or implement a method from a supertype\n    [javac]     @Override\n    [javac]     ^\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:596: error: incompatible types: JFreeChartTests.ChartChangeListenerMock cannot be converted to PlotChangeListener\n    [javac]     plot.addChangeListener(listener);\n    [javac]                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:596: error: incompatible types: JFreeChartTests.ChartChangeListenerMock cannot be converted to PlotChangeListener\n    [javac]     plot.addChangeListener(listener);\n    [javac]                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:602: error: cannot find symbol\n    [javac] private static class TestChangeListener implements PlotChangeListener {\n    [javac]                                                    ^\n    [javac]   symbol:   class PlotChangeListener\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:605: error: cannot find symbol\n    [javac]     public void plotChanged(PlotChangeEvent event) {\n    [javac]                             ^\n    [javac]   symbol:   class PlotChangeEvent\n    [javac]   location: class TestChangeListener\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: incompatible types: TestChangeListener cannot be converted to PlotChangeListener\n    [javac]     plot.addChangeListener(listener);\n    [javac]                            ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:602: error: cannot find symbol\n    [javac] private static class TestChangeListener implements PlotChangeListener {\n    [javac]                                                    ^\n    [javac]   symbol:   class PlotChangeListener\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:605: error: cannot find symbol\n    [javac]     public void plotChanged(PlotChangeEvent event) {\n    [javac]                             ^\n    [javac]   symbol:   class PlotChangeEvent\n    [javac]   location: class TestChangeListener\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:595: error: incompatible types: TestChangeListener cannot be converted to PlotChangeListener\n    [javac]     plot.addChangeListener(listener);\n    [javac]                            ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_12_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:789: error: lambda expressions are not supported in -source 6\n    [javac]     DatasetChangeListener listener = e -> {};\n    [javac]                                        ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:789: error: lambda expressions are not supported in -source 6\n    [javac]     DatasetChangeListener listener = e -> {};\n    [javac]                                        ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:592: error: cannot find symbol\n    [javac]     MockCategoryDataset dataset = new MockCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class MockCategoryDataset\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:592: error: cannot find symbol\n    [javac]     MockCategoryDataset dataset = new MockCategoryDataset();\n    [javac]                                       ^\n    [javac]   symbol:   class MockCategoryDataset\n    [javac]   location: class JFreeChartTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_12/build\n    [javac] 4 warnings\n    [javac] Compiling 355 source files to /root/libro/data/Defects4J/repos/Chart_12/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:592: error: cannot find symbol\n    [javac]     MockCategoryDataset dataset = new MockCategoryDataset();\n    [javac]     ^\n    [javac]   symbol:   class MockCategoryDataset\n    [javac]   location: class JFreeChartTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_12/tests/org/jfree/chart/junit/JFreeChartTests.java:592: error: cannot find symbol\n    [javac]     MockCategoryDataset dataset = new MockCategoryDataset();\n    [javac]                                       ^\n    [javac]   symbol:   class MockCategoryDataset\n    [javac]   location: class JFreeChartTests\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_14": {
        "Time_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestMonthDay_Basics::testLeapDateAdditionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestMonthDay_Basics::testLeapDateAdditionAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestMonthDay_Basics.testLeapDateAdditionAutoGen(TestMonthDay_Basics.java:662)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_14_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         final MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                      ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:424: error: cannot find symbol\n    [javac]     MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                            ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        },
        "Time_14_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_14/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_14/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]         MonthDay isoLeap = new MonthDay(DateTimeConstants.FEBRUARY, 29, ISOChronology.getInstanceUTC());\n    [javac]                                ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 2 errors"
            },
            "success": false
        }
    },
    "Time_12": {
        "Time_12_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsWithEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsWithEraAutoGen\njunit.framework.AssertionFailedError: expected:<-2020> but was:<2021>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_12_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-2020> but was:<2021>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_12_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsIncorrectEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsIncorrectEraAutoGen\njunit.framework.AssertionFailedError: expected:<-2022> but was:<2023>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_12_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-2022> but was:<2023>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_12_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsEraAutoGen\njunit.framework.AssertionFailedError: expected:<-2022> but was:<2023>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_12_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsHandlesEraCorrectlyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsHandlesEraCorrectlyAutoGen\njunit.framework.AssertionFailedError: expected:<-2020> but was:<2021>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_12_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsDoesNotConsiderEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsDoesNotConsiderEraAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsDoesNotConsiderEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsDoesNotConsiderEraAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_12_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsWithEraAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testLocalDateFromCalendarFieldsWithEraAutoGen\njunit.framework.AssertionFailedError: expected:<-2022-03-15> but was:<2023-03-15>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_12_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<1>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testCalendarEraInLocalDateFromCalendarFieldsAutoGen\njunit.framework.AssertionFailedError: expected:<-1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_21": {
        "Lang_21_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_21_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_19": {
        "Time_19_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testDSTAmbiguityInconsistentInterpretationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testDSTAmbiguityInconsistentInterpretationAutoGen\njunit.framework.AssertionFailedError: expected:<2011-10-30T01:59:00.000Z> but was:<2011-10-30T00:59:00.000Z>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalTime_Constructors::testInconsistentInterpretationDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalTime_Constructors::testInconsistentInterpretationDuringDSTAutoGen\njunit.framework.AssertionFailedError: expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testInconsistentInterpretationDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testInconsistentInterpretationDuringDSTAutoGen\njunit.framework.AssertionFailedError: expected:<1319939940000> but was:<1319932740000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testInconsistentInterpretationDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testInconsistentInterpretationDuringDSTAutoGen\njunit.framework.AssertionFailedError: expected:<1319936340000> but was:<1319932740000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testInconsistentDSTInterpretationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testInconsistentDSTInterpretationAutoGen\njunit.framework.AssertionFailedError: expected:<2011-10-30T01:59:00.000Z> but was:<2011-10-30T00:59:00.000Z>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testInconsistentDSTInterpretationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testInconsistentDSTInterpretationAutoGen\njunit.framework.AssertionFailedError: expected:<1319936340000> but was:<1319939940000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testInconsistentDSTInterpretationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testInconsistentDSTInterpretationAutoGen\njunit.framework.AssertionFailedError: expected:<1319939940000> but was:<1319936340000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_19_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testInconsistentDSTInterpretationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testInconsistentDSTInterpretationAutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testInconsistentDSTInterpretationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testInconsistentDSTInterpretationAutoGen\njunit.framework.ComparisonFailure: expected:<2011-10-30T0[2:59:00.000+01:00]> but was:<2011-10-30T0[0:59:00.000Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testInconsistentAmbiguousTimeDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testInconsistentAmbiguousTimeDuringDSTAutoGen\njunit.framework.ComparisonFailure: expected:<...1-10-30T01:59:00.000[+01:00]> but was:<...1-10-30T01:59:00.000[Z]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testInconsistentAmbiguousTimeDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testInconsistentAmbiguousTimeDuringDSTAutoGen\njunit.framework.ComparisonFailure: expected:<...10-30T02:59:00.000+0[1]:00> but was:<...10-30T02:59:00.000+0[2]:00>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testInconsistentTimeDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testInconsistentTimeDuringDSTAutoGen\njunit.framework.AssertionFailedError: expected:<1319939940000> but was:<1319932740000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZoneCutover::testInconsistentTimeDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZoneCutover::testInconsistentTimeDuringDSTAutoGen\njunit.framework.AssertionFailedError: expected:<1319936340000> but was:<1319932740000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_19_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_19/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1296: error: cannot find symbol\n    [javac]     assertNotEquals(expectedBritishDate.toDateTime(DateTimeZone.UTC), britishDate.toDateTime(DateTimeZone.UTC));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(DateTime,DateTime)\n    [javac]   location: class TestDateTimeZoneCutover\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 153 source files to /root/libro/data/Defects4J/repos/Time_19/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_19/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1296: error: cannot find symbol\n    [javac]     assertNotEquals(expectedBritishDate.toDateTime(DateTimeZone.UTC), britishDate.toDateTime(DateTimeZone.UTC));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(DateTime,DateTime)\n    [javac]   location: class TestDateTimeZoneCutover\n    [javac] 1 error"
            },
            "success": false
        }
    },
    "Lang_26": {
        "Lang_26_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekNumberAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, [vecka] 53> but was:<fredag, [week] 53>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekNumberAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, [vecka] 53> but was:<fredag, [week] 53>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_26_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearLocaleAutoGen\njunit.framework.ComparisonFailure: SimpleDateFormat and FastDateFormat should output the same week number. expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateFormatWeekOfYearLocaleAutoGen(FastDateFormatTest.java:339)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearAutoGen\njunit.framework.ComparisonFailure: SimpleDateFormat result should be equal to FastDateFormat result. expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateFormatWeekOfYearAutoGen(FastDateFormatTest.java:339)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekOfYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekOfYearAutoGen\njunit.framework.ComparisonFailure: SimpleDateFormat and FastDateFormat should output the same week number for locale sv/SE expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateFormatLocaleWeekOfYearAutoGen(FastDateFormatTest.java:339)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleIssueAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearWithLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearWithLocaleAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekAutoGen\njunit.framework.ComparisonFailure: expected:<[SimpleDateFormat: fredag, week 53]> but was:<[FastDateFormat: fredag, week 01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatLocaleWeekAutoGen\njunit.framework.ComparisonFailure: expected:<[Simple]DateFormat: fredag, ...> but was:<[Fast]DateFormat: fredag, ...>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_26_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearLocaleAutoGen\njunit.framework.ComparisonFailure: SimpleDateFormat should match FastDateFormat output expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateFormatWeekOfYearLocaleAutoGen(FastDateFormatTest.java:336)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekOfYearLocaleAutoGen\njunit.framework.ComparisonFailure: SimpleDateFormat and FastDateFormat results should match expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateFormatWeekOfYearLocaleAutoGen(FastDateFormatTest.java:339)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_26_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateFormatWeekBugAutoGen\njunit.framework.ComparisonFailure: expected:<fredag, week [53]> but was:<fredag, week [01]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_11": {
        "Chart_11_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.XYSeriesCollectionTests::testShapeUtilitiesEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.XYSeriesCollectionTests::testShapeUtilitiesEqualsAutoGen\njunit.framework.AssertionFailedError: Paths with different points should not be equal\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.chart.needle.junit.MeterNeedleTests::testShapeUtilitiesEqualMethodWithGeneralPathAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.chart.needle.junit.MeterNeedleTests::testShapeUtilitiesEqualMethodWithGeneralPathAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualForDifferentPathsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualForDifferentPathsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.chart.needle.junit.MeterNeedleTests::testShapeUtilitiesEqualWithDifferentPathsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.chart.needle.junit.MeterNeedleTests::testShapeUtilitiesEqualWithDifferentPathsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesCollectionTests::testShapeUtilitiesEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesCollectionTests::testShapeUtilitiesEqualsAutoGen\njunit.framework.AssertionFailedError: The paths should not be equal\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_11_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualForDifferentPathsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.xy.junit.YIntervalSeriesTests::testShapeUtilitiesEqualForDifferentPathsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_37": {
        "Lang_37_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllWithMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllWithMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllWithMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_37_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddAllMixedTypesAutoGen\njava.lang.IllegalArgumentException: Cannot store java.lang.Long in an array of java.lang.Integer\n\tat org.apache.commons.lang3.ArrayUtils.addAll(ArrayUtils.java:2968)\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddAllMixedTypesAutoGen(ArrayUtilsAddTest.java:586)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_22": {
        "Lang_22_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testFractionReductionWithMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testFractionReductionWithMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<-536870912> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testFractionDoesNotReduceWithMinValueNumeratorAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testFractionDoesNotReduceWithMinValueNumeratorAutoGen\njunit.framework.AssertionFailedError: expected:<-536870912> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testReduceWithMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testReduceWithMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<-536870912> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testReduceIntegerMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testReduceIntegerMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<-536870912> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGcdMinValueAndPowerOfTwoAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGcdMinValueAndPowerOfTwoAutoGen\njunit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testReduce_MIN_VALUEPowerOfTwoAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testReduce_MIN_VALUEPowerOfTwoAutoGen\njunit.framework.AssertionFailedError: expected:<-536870912> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testFractionDoesNotReduceProperlyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testFractionDoesNotReduceProperlyAutoGen\njunit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testReduceFractionMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testReduceFractionMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testGcdWithMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testGcdWithMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<-1073741824> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_22_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.FractionTest::testFractionGcdWithMinValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.FractionTest::testFractionGcdWithMinValueAutoGen\njunit.framework.AssertionFailedError: expected:<-536870912> but was:<-2147483648>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_10": {
        "Lang_10_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceHandlingAutoGen\njunit.framework.AssertionFailedError: Expected ParseException not thrown by SimpleDateFormat\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpaceHandlingAutoGen(FastDateFormatTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhiteSpaceHandlingAutoGen\njunit.framework.AssertionFailedError: Expected ParseException not thrown by SimpleDateFormat\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhiteSpaceHandlingAutoGen(FastDateFormatTest.java:325)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen\njava.lang.NullPointerException\n\tat java.base/java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)\n\tat java.base/sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:241)\n\tat java.base/java.util.Calendar.createCalendar(Calendar.java:1692)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen\njava.lang.NullPointerException\n\tat java.base/java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:936)\n\tat java.base/sun.util.locale.provider.LocaleProviderAdapter.getAdapter(LocaleProviderAdapter.java:241)\n\tat java.base/java.util.Calendar.createCalendar(Calendar.java:1692)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhiteSpaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhiteSpaceHandlingAutoGen\njava.text.ParseException: Unparseable date: \"2023- 10 -10\" does not match (\\p{IsNd}++)-(\\p{IsNd}++)-(\\p{IsNd}++)\n\tat org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:258)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateParserWhiteSpaceHandlingAutoGen(DateUtilsTest.java:1711)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhiteSpaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhiteSpaceHandlingAutoGen\njava.text.ParseException: Unparseable date: \"2023- 10 -10\" does not match (\\p{IsNd}++)-(\\p{IsNd}++)-(\\p{IsNd}++)\n\tat org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:258)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateParserWhiteSpaceHandlingAutoGen(DateUtilsTest.java:1711)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhiteSpaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhiteSpaceHandlingAutoGen\njunit.framework.AssertionFailedError: Expected ParseException due to extra spaces\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserWhiteSpaceHandlingAutoGen(FastDateParserTest.java:464)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhiteSpaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhiteSpaceHandlingAutoGen\njunit.framework.AssertionFailedError: Expected ParseException due to extra spaces\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserWhiteSpaceHandlingAutoGen(FastDateParserTest.java:464)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceHandlingAutoGen\njunit.framework.AssertionFailedError: Expected ParseException was not thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhitespaceHandlingAutoGen(FastDateFormatTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testFastDateParserWhitespaceHandlingAutoGen\njunit.framework.AssertionFailedError: Expected ParseException was not thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateFormatTest.testFastDateParserWhitespaceHandlingAutoGen(FastDateFormatTest.java:324)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceAutoGen\njunit.framework.AssertionFailedError: Expected SimpleDateFormat to throw ParseException due to extra spaces\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertNotNull(Assert.java:712)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceAutoGen\njunit.framework.AssertionFailedError: Expected SimpleDateFormat to throw ParseException due to extra spaces\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertNotNull(Assert.java:712)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: cannot find symbol\n    [javac]     DateFormat fastDateParser = new FastDateFormat(pattern);\n    [javac]     ^\n    [javac]   symbol:   class DateFormat\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateFormat in class FastDateFormat cannot be applied to given types;\n    [javac]     DateFormat fastDateParser = new FastDateFormat(pattern);\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: cannot find symbol\n    [javac]     DateFormat simpleDateFormat = new SimpleDateFormat(pattern);\n    [javac]     ^\n    [javac]   symbol:   class DateFormat\n    [javac]   location: class FastDateParserTest\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_10/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: cannot find symbol\n    [javac]     DateFormat fastDateParser = new FastDateFormat(pattern);\n    [javac]     ^\n    [javac]   symbol:   class DateFormat\n    [javac]   location: class FastDateParserTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:457: error: constructor FastDateFormat in class FastDateFormat cannot be applied to given types;\n    [javac]     DateFormat fastDateParser = new FastDateFormat(pattern);\n    [javac]                                 ^\n    [javac]   required: String,TimeZone,Locale\n    [javac]   found: String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] /root/libro/data/Defects4J/repos/Lang_10/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java:458: error: cannot find symbol\n    [javac]     DateFormat simpleDateFormat = new SimpleDateFormat(pattern);\n    [javac]     ^\n    [javac]   symbol:   class DateFormat\n    [javac]   location: class FastDateParserTest\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_10_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen\njunit.framework.AssertionFailedError: Expected ParseException when using SimpleDateFormat\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserWhitespaceHandlingAutoGen(FastDateParserTest.java:464)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceHandlingAutoGen\njunit.framework.AssertionFailedError: Expected ParseException when using SimpleDateFormat\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserWhitespaceHandlingAutoGen(FastDateParserTest.java:464)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceAutoGen\njunit.framework.AssertionFailedError: Expected ParseException was not thrown by SimpleDateFormat\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserWhitespaceAutoGen(FastDateParserTest.java:463)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateParserTest::testFastDateParserWhitespaceAutoGen\njunit.framework.AssertionFailedError: Expected ParseException was not thrown by SimpleDateFormat\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.time.FastDateParserTest.testFastDateParserWhitespaceAutoGen(FastDateParserTest.java:463)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_10_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceHandlingAutoGen\njava.text.ParseException: Unparseable date: \"2023- 03-10\" does not match (\\p{IsNd}++)-(\\p{IsNd}++)-(\\p{IsNd}++)\n\tat org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:258)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateParserWhitespaceHandlingAutoGen(DateUtilsTest.java:1702)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFastDateParserWhitespaceHandlingAutoGen\njava.text.ParseException: Unparseable date: \"2023- 03-10\" does not match (\\p{IsNd}++)-(\\p{IsNd}++)-(\\p{IsNd}++)\n\tat org.apache.commons.lang3.time.FastDateParser.parse(FastDateParser.java:258)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFastDateParserWhitespaceHandlingAutoGen(DateUtilsTest.java:1702)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_14": {
        "Lang_14_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ObjectUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ObjectUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_14_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_14_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_14_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen\njunit.framework.AssertionFailedError: StringUtils.equals should return true for equivalent CharSequences\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.apache.commons.lang3.StringUtilsTest.testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen(StringUtilsTest.java:2125)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_14_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2921: error: <anonymous org.apache.commons.lang3.ArrayUtilsTest$2> is not abstract and does not override abstract method contentEquals(CharSequence) in Name\n    [javac]     CharSequence seq2 = new javax.lang.model.element.Name() {\n    [javac]                                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2921: error: <anonymous org.apache.commons.lang3.ArrayUtilsTest$2> is not abstract and does not override abstract method contentEquals(CharSequence) in Name\n    [javac]     CharSequence seq2 = new javax.lang.model.element.Name() {\n    [javac]                                                             ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ObjectUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ObjectUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_14_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ObjectUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ObjectUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_14_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testStringUtilsEqualsWithDifferentCharSequenceImplementationsAutoGen\njunit.framework.AssertionFailedError: Expected true but was false\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_14_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2120: error: incompatible types: <anonymous SimpleJavaFileObject> cannot be converted to CharSequence\n    [javac]     CharSequence charSequence2 = new javax.tools.SimpleJavaFileObject(java.net.URI.create(\"string:///test.java\"), javax.tools.JavaFileObject.Kind.SOURCE) {\n    [javac]                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2129: error: incompatible types: boolean cannot be converted to String\n    [javac]     assertTrue(result, \"StringUtils.equals should return true for equal CharSequence content.\");\n    [javac]                ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2120: error: incompatible types: <anonymous SimpleJavaFileObject> cannot be converted to CharSequence\n    [javac]     CharSequence charSequence2 = new javax.tools.SimpleJavaFileObject(java.net.URI.create(\"string:///test.java\"), javax.tools.JavaFileObject.Kind.SOURCE) {\n    [javac]                                  ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2129: error: incompatible types: boolean cannot be converted to String\n    [javac]     assertTrue(result, \"StringUtils.equals should return true for equal CharSequence content.\");\n    [javac]                ^\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_14_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2121: error: method equals in class Object cannot be applied to given types;\n    [javac]     assertFalse(CharSequenceUtils.equals(cs1, cs2)); // Assuming CharSequenceUtils.equals is the method that has the issue.\n    [javac]                                  ^\n    [javac]   required: Object\n    [javac]   found: CharSequence,CharSequence\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 122 source files to /root/libro/data/Defects4J/repos/Lang_14/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_14/src/test/java/org/apache/commons/lang3/StringUtilsTest.java:2121: error: method equals in class Object cannot be applied to given types;\n    [javac]     assertFalse(CharSequenceUtils.equals(cs1, cs2)); // Assuming CharSequenceUtils.equals is the method that has the issue.\n    [javac]                                  ^\n    [javac]   required: Object\n    [javac]   found: CharSequence,CharSequence\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_36": {
        "Lang_36_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_36_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithTrailingDecimalAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithTrailingDecimalAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_30": {
        "Lang_30_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_30_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_23": {
        "Lang_23_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError: ExtendedMessageFormat should override equals method to compare patterns\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.FastDateFormatTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.FastDateFormatTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError: ExtendedMessageFormat should override equals method to compare patterns\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError: Instances with different patterns should not be equal\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DurationFormatUtilsTest::testExtendedMessageFormatEqualsAutoGen\njunit.framework.AssertionFailedError: Instances with different patterns should not be equal\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_23_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_16": {
        "Lang_16_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHandlesUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHandlesUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: expected: java.lang.Long<-4660> but was: java.lang.Integer<-4660>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHandlesUpperCaseHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsHandlesUpperCaseHexAutoGen\njunit.framework.AssertionFailedError: expected: java.lang.Long<-4660> but was: java.lang.Integer<-4660>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_16_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_3": {
        "Time_3_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDuringDSTAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDuringDSTAutoGen\njunit.framework.AssertionFailedError: addDays(0) should not change the time expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1351: error: no suitable method found for assertEquals(long,long,String)\n    [javac]     assertEquals(initialMillis - 3600000, mdt.toInstant().getMillis(), \"addDays(0) should not change the time, but it did due to DST transition issue.\");\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to double)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to float)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 155 source files to /root/libro/data/Defects4J/repos/Time_3/target/test-classes\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.DateMidnight;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.YearMonthDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac] import org.joda.time.TimeOfDay;\n    [javac]                     ^\n    [javac]         dt = new DateTime(new Long(0));\n    [javac]                           ^\n    [javac]             = new Long( System.currentTimeMillis() );\n    [javac]               ^\n    [javac]             = new Long( aDateTime.longValue() );\n    [javac]               ^\n    [javac]         Long lhVal = new Long( lhDT.getMillis() );\n    [javac]                      ^\n    [javac]             rhVal = new Long( rhDT.getMillis() );\n    [javac]                     ^\n    [javac]             \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n    [javac]                      ^\n    [javac]             date.toDateMidnight(MOCK_GAZA);\n    [javac]                 ^\n    [javac]             date.toDateMidnight(MOCK_TURK);\n    [javac]                 ^\n    [javac] /root/libro/data/Defects4J/repos/Time_3/src/test/java/org/joda/time/TestDateTimeZoneCutover.java:1351: error: no suitable method found for assertEquals(long,long,String)\n    [javac]     assertEquals(initialMillis - 3600000, mdt.toInstant().getMillis(), \"addDays(0) should not change the time, but it did due to DST transition issue.\");\n    [javac]     ^\n    [javac]     method Assert.assertEquals(String,Object,Object) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,String,String) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(double,double,double) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to double)\n    [javac]     method Assert.assertEquals(float,float,float) is not applicable\n    [javac]       (argument mismatch; String cannot be converted to float)\n    [javac]     method Assert.assertEquals(String,long,long) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,byte,byte) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,char,char) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,short,short) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]     method Assert.assertEquals(String,int,int) is not applicable\n    [javac]       (argument mismatch; long cannot be converted to String)\n    [javac]             DateTime test = new DateTime(new Integer(0));\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]             DateTime test = new DateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                          ^\n    [javac]         Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n    [javac]                                                  ^\n    [javac]         Long base = new Long(length);\n    [javac]                     ^\n    [javac]             assertEquals(new Integer(-5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(31), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(27), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(23), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(1970), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(2), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(0), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(5), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             assertEquals(new Integer(14), e.getIllegalNumberValue());\n    [javac]                          ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                        ^\n    [javac]             (DurationFieldType.days(), new Integer(1), new Integer(2), new Integer(3));\n    [javac]                                                                        ^\n    [javac]         assertEquals(new Integer(1), e.getIllegalNumberValue());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(2), e.getLowerBound());\n    [javac]                      ^\n    [javac]         assertEquals(new Integer(3), e.getUpperBound());\n    [javac]                      ^\n    [javac]         DateTime result = test.toDateTimeISO();\n    [javac]                               ^\n    [javac]         MutableDateTime result = test.toMutableDateTimeISO();\n    [javac]                                      ^\n    [javac]             Instant test = new Instant(new Integer(0));\n    [javac]                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0));\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n    [javac]                                                        ^\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]             Calendar bc = (Calendar) Class.forName(\"sun.util.BuddhistCalendar\").newInstance();\n    [javac]                                                                                ^\n    [javac]   where T is a type-variable:\n    [javac]     T extends Object declared in class Class\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         PartialConverter c = ConverterManager.getInstance().getPartialConverter(new Long(0L));\n    [javac]                                                                                 ^\n    [javac]         c = ConverterManager.getInstance().getPartialConverter(new TimeOfDay());\n    [javac]                                                                    ^\n    [javac]         DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n    [javac]                                                                                   ^\n    [javac]             ConverterManager.getInstance().getIntervalConverter(new Long(0));\n    [javac]                                                                 ^\n    [javac]         set.select(DateMidnight.class);\n    [javac]                    ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), JULIAN));\n    [javac]                                                                    ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getInstantMillis(new Long(123L), (Chronology) null));\n    [javac]                                                                    ^\n    [javac]         assertEquals(ISO_PARIS, LongConverter.INSTANCE.getChronology(new Long(123L), PARIS));\n    [javac]                                                                      ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (DateTimeZone) null));\n    [javac]                                                                ^\n    [javac]         assertEquals(JULIAN, LongConverter.INSTANCE.getChronology(new Long(123L), JULIAN));\n    [javac]                                                                   ^\n    [javac]         assertEquals(ISO, LongConverter.INSTANCE.getChronology(new Long(123L), (Chronology) null));\n    [javac]                                                                ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = LongConverter.INSTANCE.getPartialValues(tod, new Long(12345678L), ISOChronology.getInstance());\n    [javac]                                                                     ^\n    [javac]         assertEquals(123L, LongConverter.INSTANCE.getDurationMillis(new Long(123L)));\n    [javac]                                                                     ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         assertEquals(ISO_PARIS, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), PARIS));\n    [javac]                                                                                     ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), DateTimeZone.getDefault()));\n    [javac]                                                                               ^\n    [javac]         assertEquals(ISO, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), (DateTimeZone) null));\n    [javac]                                                                               ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(JULIAN, ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L), JULIAN));\n    [javac]                                                                                  ^\n    [javac]         assertEquals(BUDDHIST.withUTC(), ReadablePartialConverter.INSTANCE.getChronology(new TimeOfDay(123L, BUDDHIST), (Chronology) null));\n    [javac]                                                                                              ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]         ^\n    [javac]         TimeOfDay tod = new TimeOfDay();\n    [javac]                             ^\n    [javac]         int[] actual = ReadablePartialConverter.INSTANCE.getPartialValues(tod, new TimeOfDay(1, 2, 3, 4), ISOChronology.getInstance(PARIS));\n    [javac]                                                                                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Time_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDuringDSTTransitionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDuringDSTTransitionAutoGen\njunit.framework.AssertionFailedError: addDays(0) should not change the time during DST transition expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDoesNotAffectMutableDateTimeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDoesNotAffectMutableDateTimeAutoGen\njunit.framework.AssertionFailedError: expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDuringDSTTransitionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDuringDSTTransitionAutoGen\njunit.framework.AssertionFailedError: Time should not change after adding 0 days expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testAddDaysZeroDuringDSTTransitionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testAddDaysZeroDuringDSTTransitionAutoGen\njunit.framework.AssertionFailedError: expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroChangesValueAutoGen\njunit.framework.AssertionFailedError: Millis should not change when adding 0 days expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDSTIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDSTIssueAutoGen\njunit.framework.AssertionFailedError: MutableDateTime should not change when adding zero days expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDoesNotChangeMutableDateTimeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatter::testAddDaysZeroDoesNotChangeMutableDateTimeAutoGen\njunit.framework.AssertionFailedError: addDays(0) should not change the time expected:<1319936400000> but was:<1319932800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_32": {
        "Lang_32_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1028: error: cannot find symbol\n    [javac]             Object value = ((WeakReference<?>) entry).get();\n    [javac]                              ^\n    [javac]   symbol:   class WeakReference\n    [javac]   location: class ToStringBuilderTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1028: error: cannot find symbol\n    [javac]             Object value = ((WeakReference<?>) entry).get();\n    [javac]                              ^\n    [javac]   symbol:   class WeakReference\n    [javac]   location: class ToStringBuilderTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1017: error: cannot find symbol\n    [javac]     assertNull(ToStringStyle.getDefaultStyle().toString());\n    [javac]                             ^\n    [javac]   symbol:   method getDefaultStyle()\n    [javac]   location: class ToStringStyle\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1017: error: cannot find symbol\n    [javac]     assertNull(ToStringStyle.getDefaultStyle().toString());\n    [javac]                             ^\n    [javac]   symbol:   method getDefaultStyle()\n    [javac]   location: class ToStringStyle\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1007: error: lambda expressions are not supported in -source 6\n    [javac]     Runnable styleUsage = () -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1007: error: lambda expressions are not supported in -source 6\n    [javac]     Runnable styleUsage = () -> {\n    [javac]                              ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testThreadLocalMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testThreadLocalMemoryLeakAutoGen\njava.lang.NoSuchFieldException: threadLocal\n\tat java.base/java.lang.Class.getDeclaredField(Class.java:2411)\n\tat org.apache.commons.lang3.ClassUtilsTest.testThreadLocalMemoryLeakAutoGen(ClassUtilsTest.java:980)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testThreadLocalMemoryLeakAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testThreadLocalMemoryLeakAutoGen\njava.lang.NoSuchFieldException: threadLocal\n\tat java.base/java.lang.Class.getDeclaredField(Class.java:2411)\n\tat org.apache.commons.lang3.ClassUtilsTest.testThreadLocalMemoryLeakAutoGen(ClassUtilsTest.java:980)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_32_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:485: error: cannot find symbol\n    [javac]     int initialThreadLocalCount = Thread.currentThread().getThreadLocalsCount();\n    [javac]                                                         ^\n    [javac]   symbol:   method getThreadLocalsCount()\n    [javac]   location: class Thread\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:492: error: cannot find symbol\n    [javac]     int finalThreadLocalCount = Thread.currentThread().getThreadLocalsCount();\n    [javac]                                                       ^\n    [javac]   symbol:   method getThreadLocalsCount()\n    [javac]   location: class Thread\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:485: error: cannot find symbol\n    [javac]     int initialThreadLocalCount = Thread.currentThread().getThreadLocalsCount();\n    [javac]                                                         ^\n    [javac]   symbol:   method getThreadLocalsCount()\n    [javac]   location: class Thread\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/concurrent/TimedSemaphoreTest.java:492: error: cannot find symbol\n    [javac]     int finalThreadLocalCount = Thread.currentThread().getThreadLocalsCount();\n    [javac]                                                       ^\n    [javac]   symbol:   method getThreadLocalsCount()\n    [javac]   location: class Thread\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_32_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_32_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_32_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: lambda expressions are not supported in -source 6\n    [javac]     Thread testThread = new Thread(() -> {\n    [javac]                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java:1009: error: lambda expressions are not supported in -source 6\n    [javac]     Thread testThread = new Thread(() -> {\n    [javac]                                       ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_32_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testThreadLocalMemoryLeakInToStringStyleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.builder.ToStringBuilderTest::testThreadLocalMemoryLeakInToStringStyleAutoGen\njunit.framework.AssertionFailedError: Excessive memory retained after ToStringStyle usage, possible ThreadLocal leak.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.builder.ToStringBuilderTest::testThreadLocalMemoryLeakInToStringStyleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.builder.ToStringBuilderTest::testThreadLocalMemoryLeakInToStringStyleAutoGen\njunit.framework.AssertionFailedError: Excessive memory retained after ToStringStyle usage, possible ThreadLocal leak.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_32_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: cannot find symbol\n    [javac]         URL[] urls = ((URLClassLoader) originalClassLoader).getURLs();\n    [javac]         ^\n    [javac]   symbol:   class URL\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: cannot find symbol\n    [javac]         URL[] urls = ((URLClassLoader) originalClassLoader).getURLs();\n    [javac]                        ^\n    [javac]   symbol:   class URLClassLoader\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1571: error: cannot find symbol\n    [javac]         URLClassLoader tempClassLoader = new URLClassLoader(urls);\n    [javac]         ^\n    [javac]   symbol:   class URLClassLoader\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1571: error: cannot find symbol\n    [javac]         URLClassLoader tempClassLoader = new URLClassLoader(urls);\n    [javac]                                              ^\n    [javac]   symbol:   class URLClassLoader\n    [javac]   location: class DateUtilsTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_32/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: cannot find symbol\n    [javac]         URL[] urls = ((URLClassLoader) originalClassLoader).getURLs();\n    [javac]         ^\n    [javac]   symbol:   class URL\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: cannot find symbol\n    [javac]         URL[] urls = ((URLClassLoader) originalClassLoader).getURLs();\n    [javac]                        ^\n    [javac]   symbol:   class URLClassLoader\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1571: error: cannot find symbol\n    [javac]         URLClassLoader tempClassLoader = new URLClassLoader(urls);\n    [javac]         ^\n    [javac]   symbol:   class URLClassLoader\n    [javac]   location: class DateUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_32/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1571: error: cannot find symbol\n    [javac]         URLClassLoader tempClassLoader = new URLClassLoader(urls);\n    [javac]                                              ^\n    [javac]   symbol:   class URLClassLoader\n    [javac]   location: class DateUtilsTest\n    [javac] 4 errors\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_35": {
        "Lang_35_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddNullParametersAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddNullParametersAutoGen(ClassUtilsTest.java:804)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testArrayUtilsAddNullBothParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testArrayUtilsAddNullBothParametersAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException, but got ClassCastException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testArrayUtilsAddNullBothParametersAutoGen(DateUtilsTest.java:1571)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_35_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: cannot find symbol\n    [javac]     } catch (IllegalParameterException e) {\n    [javac]              ^\n    [javac]   symbol:   class IllegalParameterException\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: cannot find symbol\n    [javac]     } catch (IllegalParameterException e) {\n    [javac]              ^\n    [javac]   symbol:   class IllegalParameterException\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_35_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: cannot find symbol\n    [javac]     } catch (IllegalParameterException e) {\n    [javac]              ^\n    [javac]   symbol:   class IllegalParameterException\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: cannot find symbol\n    [javac]     } catch (IllegalParameterException e) {\n    [javac]              ^\n    [javac]   symbol:   class IllegalParameterException\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_35_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithBothNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testArrayUtilsAddWithBothNullsAutoGen\njava.lang.IllegalArgumentException: Arguments cannot both be null\n\tat org.apache.commons.lang3.ArrayUtils.add(ArrayUtils.java:3295)\n\tat org.apache.commons.lang3.ClassUtilsTest.testArrayUtilsAddWithBothNullsAutoGen(ClassUtilsTest.java:804)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_35_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: multi-catch statements are not supported in -source 6\n    [javac]     } catch (ClassCastException | IllegalArgumentException e) {\n    [javac]                                 ^\n    [javac]   (use -source 7 or higher to enable multi-catch statements)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: multi-catch statements are not supported in -source 6\n    [javac]     } catch (ClassCastException | IllegalArgumentException e) {\n    [javac]                                 ^\n    [javac]   (use -source 7 or higher to enable multi-catch statements)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_35_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: multi-catch statements are not supported in -source 6\n    [javac]     } catch (IllegalArgumentException | ClassCastException expected) {\n    [javac]                                       ^\n    [javac]   (use -source 7 or higher to enable multi-catch statements)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:806: error: multi-catch statements are not supported in -source 6\n    [javac]     } catch (IllegalArgumentException | ClassCastException expected) {\n    [javac]                                       ^\n    [javac]   (use -source 7 or higher to enable multi-catch statements)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_35_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddNullParametersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddNullParametersAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddNullParametersAutoGen(ArrayUtilsAddTest.java:588)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_35_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddWithNullsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsAddTest::testArrayUtilsAddWithNullsAutoGen\njava.lang.ClassCastException: class [Ljava.lang.Object; cannot be cast to class [Ljava.lang.String; ([Ljava.lang.Object; and [Ljava.lang.String; are in module java.base of loader 'bootstrap')\n\tat org.apache.commons.lang3.ArrayUtilsAddTest.testArrayUtilsAddWithNullsAutoGen(ArrayUtilsAddTest.java:588)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_35_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:808: error: cannot find symbol\n    [javac]     } catch (IllegalParameterException e) {\n    [javac]              ^\n    [javac]   symbol:   class IllegalParameterException\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_35/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_35/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:808: error: cannot find symbol\n    [javac]     } catch (IllegalParameterException e) {\n    [javac]              ^\n    [javac]   symbol:   class IllegalParameterException\n    [javac]   location: class ClassUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Time_9": {
        "Time_9_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneOffsetLimitAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneOffsetLimitAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException due to invalid offset\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneOffsetLimitAutoGen(TestDateTimeZone.java:1059)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_9_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneMaxMinOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneMaxMinOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for offset greater than 23:59\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneMaxMinOffsetAutoGen(TestDateTimeZone.java:1053)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_9_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneMaxOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for invalid offset\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneMaxOffsetAutoGen(TestDateTimeZone.java:1062)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_9_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneOffsetLimitAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneOffsetLimitAutoGen\njunit.framework.AssertionFailedError: Should have thrown IllegalArgumentException for offset exceeding 23:59\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneOffsetLimitAutoGen(TestDateTimeZone.java:1056)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_9_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Properties::testDateTimeZoneOffsetParsingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Properties::testDateTimeZoneOffsetParsingAutoGen\njunit.framework.AssertionFailedError: Offset beyond 23:59 should not be allowed\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestTimeOfDay_Properties.testDateTimeZoneOffsetParsingAutoGen(TestTimeOfDay_Properties.java:745)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_9_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Properties::testOffsetLimitInDateTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Properties::testOffsetLimitInDateTimeZoneAutoGen\njunit.framework.AssertionFailedError: Offset beyond 23:59 should throw an exception.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestTimeOfDay_Properties.testOffsetLimitInDateTimeZoneAutoGen(TestTimeOfDay_Properties.java:745)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_9_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testMaxMinOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testMaxMinOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for offset greater than 23:59\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testMaxMinOffsetAutoGen(TestDateTimeZone.java:1053)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_9_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestTimeOfDay_Properties::testDateTimeZoneMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestTimeOfDay_Properties::testDateTimeZoneMaxOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for offset beyond max limit\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestTimeOfDay_Properties.testDateTimeZoneMaxOffsetAutoGen(TestTimeOfDay_Properties.java:745)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_9_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1069: error: method forOffsetHoursMinutes in class DateTimeZone cannot be applied to given types;\n    [javac]         DateTimeZone.forOffsetHoursMinutes(23, 59, 59, 999);\n    [javac]                     ^\n    [javac]   required: int,int\n    [javac]   found: int,int,int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_9/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_9/src/test/java/org/joda/time/TestDateTimeZone.java:1069: error: method forOffsetHoursMinutes in class DateTimeZone cannot be applied to given types;\n    [javac]         DateTimeZone.forOffsetHoursMinutes(23, 59, 59, 999);\n    [javac]                     ^\n    [javac]   required: int,int\n    [javac]   found: int,int,int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_9_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneMaxOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for invalid offset\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneMaxOffsetAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneMaxOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneMaxOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for invalid offset\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneMaxOffsetAutoGen(TestDateTimeZone.java:1067)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_20": {
        "Time_20_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneConsistencyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneConsistencyAutoGen\njunit.framework.AssertionFailedError: There should be no time zone ID mismatches expected:<0> but was:<138>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneConsistencyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneConsistencyAutoGen\njunit.framework.AssertionFailedError: There should be no time zone ID mismatches expected:<0> but was:<138>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeFormatterWithSpecificTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeFormatterWithSpecificTimeZoneAutoGen\njunit.framework.AssertionFailedError: Some time zones failed to convert properly\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeFormatterWithSpecificTimeZoneAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeFormatterWithSpecificTimeZoneAutoGen\njunit.framework.AssertionFailedError: Some time zones failed to convert properly\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeWithSpecificTimeZonesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeWithSpecificTimeZonesAutoGen\njunit.framework.AssertionFailedError: Exception thrown for time zone: America/Bahia_Banderas\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeWithSpecificTimeZonesAutoGen(TestDateTimeZone.java:1061)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_20_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testErrorsCreatingParsingDatesWithSpecificTimeZonesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testErrorsCreatingParsingDatesWithSpecificTimeZonesAutoGen\njunit.framework.AssertionFailedError: There should not be any exceptions thrown for time zones\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:192)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneParsingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneParsingAutoGen\njunit.framework.AssertionFailedError: Formatter threw exception for time zone id: America/Bahia_Banderas\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneParsingAutoGen(TestDateTimeZone.java:1058)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_20_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testIssue126AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testIssue126AutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<138>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testIssue126AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testIssue126AutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<138>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_20_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_2": {
        "Chart_2_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: no suitable constructor found for DefaultIntervalCategoryDataset(String[],String[])\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to double[][])\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to Number[][])\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_2/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_2/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_2/tests/org/jfree/data/general/junit/DatasetUtilitiesTests.java:1261: error: no suitable constructor found for DefaultIntervalCategoryDataset(String[],String[])\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(\n    [javac]                                              ^\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(double[][],double[][]) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to double[][])\n    [javac]     constructor DefaultIntervalCategoryDataset.DefaultIntervalCategoryDataset(Number[][],Number[][]) is not applicable\n    [javac]       (argument mismatch; String[] cannot be converted to Number[][])\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_2_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.general.junit.DatasetUtilitiesTests::testIterateRangeBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.general.junit.DatasetUtilitiesTests::testIterateRangeBoundsAutoGen\njunit.framework.AssertionFailedError: Expected lower bound is incorrect expected:<0.0> but was:<3.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.general.junit.DatasetUtilitiesTests::testIterateRangeBoundsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.general.junit.DatasetUtilitiesTests::testIterateRangeBoundsAutoGen\njunit.framework.AssertionFailedError: Expected lower bound is incorrect expected:<0.0> but was:<3.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Chart_2_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_33": {
        "Lang_33_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClass_NullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testClassUtilsToClass_NullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testClassUtilsToClass_NullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException for null array element\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown due to null element in array\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassHandlesNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassHandlesNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException when array contains a null element\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassHandlesNullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullArrayElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullArrayElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException when array contains null element.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullArrayElementAutoGen(ClassUtilsTest.java:978)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_33_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ClassUtilsTest::testToClassWithNullElementAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException due to null array element\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.ClassUtilsTest.testToClassWithNullElementAutoGen(ClassUtilsTest.java:977)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_24": {
        "Lang_24_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithDecimalAndLongSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsIsNumberWithDecimalAndLongSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithTrailingLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithInvalidLongFormatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithInvalidLongFormatAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_24_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testIsNumberWithDecimalAndLongSuffixAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_29": {
        "Lang_29_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1568: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1568: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:991: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java:991: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1566: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         SystemUtils.getJavaVersionAsFloat();\n    [javac]                    ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_29_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_29/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_29/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java:1223: error: getJavaVersionAsFloat() has private access in SystemUtils\n    [javac]         float javaVersion = SystemUtils.getJavaVersionAsFloat();\n    [javac]                                        ^\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        }
    },
    "Lang_1": {
        "Lang_1_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException because NumberUtils.createLong() does not handle hex numbers.\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexNumberAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException because NumberUtils.createLong() does not handle hex numbers.\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexNumberAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex input longer than Integer range\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex input longer than Integer range\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException due to invalid hex input for createLong\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexNumberAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException due to invalid hex input for createLong\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexNumberAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testLongHexNumberHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testLongHexNumberHandlingAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex number too large for Integer\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testLongHexNumberHandlingAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testLongHexNumberHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testLongHexNumberHandlingAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex number too large for Integer\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testLongHexNumberHandlingAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException to be thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException to be thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex string longer than 8 digits\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexNumberAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexNumberAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex string longer than 8 digits\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexNumberAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected a NumberFormatException due to hex input not being handled\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected a NumberFormatException due to hex input not being handled\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex input\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex input\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_1_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex string longer than Integer range\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateLongWithHexAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for hex string longer than Integer range\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateLongWithHexAutoGen(NumberUtilsTest.java:1370)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_17": {
        "Time_17_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-7200000> but was:<-10800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-10800000> but was:<-7200000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<2012-02-25T23:01:00.000-03:00> but was:<2012-02-25T23:01:00.000-02:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<2012-02-25T23:01:00.000-03:00> but was:<2012-02-25T23:01:00.000-03:00>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-7200000> but was:<-10800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<10800000> but was:<-10800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<10800000> but was:<-10800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_17_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-10800000> but was:<-7200000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-7200000> but was:<-10800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-10800000> but was:<-7200000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-7200000> but was:<-10800000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_17_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testWithLaterOffsetAtOverlapAutoGen\njunit.framework.AssertionFailedError: expected:<-10800000> but was:<-7200000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_6": {
        "Lang_6_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: StringIndexOutOfBoundsException was thrown: index 2,length 2\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:520)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: StringIndexOutOfBoundsException was thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:519)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njunit.framework.AssertionFailedError: Expected StringIndexOutOfBoundsException was not thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringEscapeUtilsTest.testEscapeSurrogatePairsAutoGen(StringEscapeUtilsTest.java:518)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_6_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_6_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeSurrogatePairsAutoGen\njava.lang.StringIndexOutOfBoundsException: index 2,length 2\n\tat java.base/java.lang.String.checkIndex(String.java:3278)\n\tat java.base/java.lang.StringUTF16.checkIndex(StringUTF16.java:1470)\n\tat java.base/java.lang.StringUTF16.charAt(StringUTF16.java:1267)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Chart_1": {
        "Chart_1_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: cannot find symbol\n    [javac]     CategoryPlot mockPlot = mock(CategoryPlot.class);\n    [javac]                             ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: cannot find symbol\n    [javac]     when(mockPlot.getIndexOf(renderer)).thenReturn(0);\n    [javac]     ^\n    [javac]   symbol:   method when(int)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1273: error: cannot find symbol\n    [javac]     when(mockPlot.getDataset(0)).thenReturn(null);\n    [javac]     ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1280: error: cannot find symbol\n    [javac]     assertTrue(legendItems.isEmpty());\n    [javac]                           ^\n    [javac]   symbol:   method isEmpty()\n    [javac]   location: variable legendItems of type LegendItemCollection\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1269: error: cannot find symbol\n    [javac]     CategoryPlot mockPlot = mock(CategoryPlot.class);\n    [javac]                             ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: cannot find symbol\n    [javac]     when(mockPlot.getIndexOf(renderer)).thenReturn(0);\n    [javac]     ^\n    [javac]   symbol:   method when(int)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1273: error: cannot find symbol\n    [javac]     when(mockPlot.getDataset(0)).thenReturn(null);\n    [javac]     ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1280: error: cannot find symbol\n    [javac]     assertTrue(legendItems.isEmpty());\n    [javac]                           ^\n    [javac]   symbol:   method isEmpty()\n    [javac]   location: variable legendItems of type LegendItemCollection\n    [javac] 5 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1271: error: cannot find symbol\n    [javac]     Plot plot = new CategoryPlot() {\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1271: error: cannot find symbol\n    [javac]     Plot plot = new CategoryPlot() {\n    [javac]                     ^\n    [javac]   symbol:   class CategoryPlot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1273: error: cannot find symbol\n    [javac]         public int getIndexOf(Renderer renderer) {\n    [javac]                               ^\n    [javac]   symbol: class Renderer\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1277: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 6 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1271: error: cannot find symbol\n    [javac]     Plot plot = new CategoryPlot() {\n    [javac]     ^\n    [javac]   symbol:   class Plot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1271: error: cannot find symbol\n    [javac]     Plot plot = new CategoryPlot() {\n    [javac]                     ^\n    [javac]   symbol:   class CategoryPlot\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1273: error: cannot find symbol\n    [javac]         public int getIndexOf(Renderer renderer) {\n    [javac]                               ^\n    [javac]   symbol: class Renderer\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1272: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1277: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 6 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:602: error: cannot find symbol\n    [javac]         public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass) {\n    [javac]                                                                                                                                                                     ^\n    [javac]   symbol: class CategoryDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:599: error: <anonymous org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests$3> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:601: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:602: error: cannot find symbol\n    [javac]         public void drawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass) {\n    [javac]                                                                                                                                                                     ^\n    [javac]   symbol: class CategoryDataset\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:599: error: <anonymous org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests$3> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java:601: error: method does not override or implement a method from a supertype\n    [javac]         @Override\n    [javac]         ^\n    [javac] 3 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:254: error: <anonymous org.jfree.chart.renderer.xy.junit.XYAreaRenderer2Tests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1271: error: cannot find symbol\n    [javac]     CategoryPlot plot = mock(CategoryPlot.class);\n    [javac]                         ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1274: error: cannot find symbol\n    [javac]     when(plot.getIndexOf(renderer)).thenReturn(0);\n    [javac]     ^\n    [javac]   symbol:   method when(int)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1275: error: cannot find symbol\n    [javac]     when(plot.getDataset(0)).thenReturn(null);\n    [javac]     ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class XYPlotTests\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1271: error: cannot find symbol\n    [javac]     CategoryPlot plot = mock(CategoryPlot.class);\n    [javac]                         ^\n    [javac]   symbol:   method mock(Class<CategoryPlot>)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1274: error: cannot find symbol\n    [javac]     when(plot.getIndexOf(renderer)).thenReturn(0);\n    [javac]     ^\n    [javac]   symbol:   method when(int)\n    [javac]   location: class XYPlotTests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1275: error: cannot find symbol\n    [javac]     when(plot.getDataset(0)).thenReturn(null);\n    [javac]     ^\n    [javac]   symbol:   method when(CategoryDataset)\n    [javac]   location: class XYPlotTests\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1280: error: XYPlotTests.CustomCategoryItemRenderer is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac] private class CustomCategoryItemRenderer extends AbstractCategoryItemRenderer {\n    [javac]         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1280: error: XYPlotTests.CustomCategoryItemRenderer is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac] private class CustomCategoryItemRenderer extends AbstractCategoryItemRenderer {\n    [javac]         ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1080: error: <anonymous org.jfree.chart.plot.junit.CategoryPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1083: error: cannot find symbol\n    [javac]         public int getIndexOf(PlotRenderer renderer) {\n    [javac]                               ^\n    [javac]   symbol: class PlotRenderer\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1080: error: <anonymous org.jfree.chart.plot.junit.CategoryPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java:1083: error: cannot find symbol\n    [javac]         public int getIndexOf(PlotRenderer renderer) {\n    [javac]                               ^\n    [javac]   symbol: class PlotRenderer\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_1_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 1 source file to /root/libro/data/Defects4J/repos/Chart_1/build\n    [javac] 4 warnings\n    [javac] Compiling 389 source files to /root/libro/data/Defects4J/repos/Chart_1/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_1/tests/org/jfree/chart/plot/junit/XYPlotTests.java:1268: error: <anonymous org.jfree.chart.plot.junit.XYPlotTests$1> is not abstract and does not override abstract method drawItem(Graphics2D,CategoryItemRendererState,Rectangle2D,CategoryPlot,CategoryAxis,ValueAxis,CategoryDataset,int,int,boolean,int) in CategoryItemRenderer\n    [javac]     AbstractCategoryItemRenderer renderer = new AbstractCategoryItemRenderer() {};\n    [javac]                                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_3": {
        "Lang_3_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLargeFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLargeFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_3_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLargeFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLargeFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_3_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoublePrecisionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoublePrecisionAutoGen\njunit.framework.AssertionFailedError: expected:<1234567890.12345678901234567890> but was:<1.23456794E9>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_3_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLargeFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLargeFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLargeFloatingPointAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLargeFloatingPointAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberForDoubleAutoGen\njunit.framework.AssertionFailedError\n\tat org.junit.Assert.fail(Assert.java:86)\n\tat org.junit.Assert.assertTrue(Assert.java:41)\n\tat org.junit.Assert.assertTrue(Assert.java:52)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_3_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_3_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_5": {
        "Lang_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen\njunit.framework.AssertionFailedError: LocaleUtils.toLocale should support parsing strings starting with an underscore.\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen(LocaleUtilsTest.java:506)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithUnderscorePrefixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithUnderscorePrefixAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for locale string starting with underscore and missing language\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleWithUnderscorePrefixAutoGen(LocaleUtilsTest.java:503)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for missing language.\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen(LocaleUtilsTest.java:503)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocale_WithUnderscorePrefixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocale_WithUnderscorePrefixAutoGen\njunit.framework.AssertionFailedError: LocaleUtils.toLocale(\"_FR\") should not throw an IllegalArgumentException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocale_WithUnderscorePrefixAutoGen(LocaleUtilsTest.java:506)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleAutoGen(LocaleUtilsTest.java:502)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleAutoGen\njunit.framework.AssertionFailedError: expected:<[]> but was:<[FR]>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleAutoGen(LocaleUtilsTest.java:503)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsWithLeadingUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsWithLeadingUnderscoreAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for invalid input: _FR__P\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsWithLeadingUnderscoreAutoGen(LocaleUtilsTest.java:504)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleUnderscorePrefixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleUnderscorePrefixAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR__P\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleUnderscorePrefixAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleUnderscorePrefixAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleUnderscorePrefixAutoGen\njunit.framework.AssertionFailedError: expected:<[]P> but was:<[_]P>\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleUnderscorePrefixAutoGen(LocaleUtilsTest.java:504)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleAutoGen\njava.lang.IllegalArgumentException: Invalid locale format: _FR\n\tat org.apache.commons.lang3.LocaleUtils.toLocale(LocaleUtils.java:94)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleAutoGen(LocaleUtilsTest.java:501)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.LocaleUtilsTest::testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for invalid locale string.\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.LocaleUtilsTest.testLocaleUtilsToLocaleWithLeadingUnderscoreAutoGen(LocaleUtilsTest.java:503)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_5": {
        "Time_5_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1530)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1530)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1527)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1527)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1525)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1530)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1530)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1526)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1526)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1530)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1530)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1530)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1530)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1529)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearAutoGen(TestPeriod_Basics.java:1529)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1533)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1533)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_5_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1526)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestPeriod_Basics::testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected UnsupportedOperationException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestPeriod_Basics.testNonStandardPeriodTypeWithoutYearThrowsExceptionAutoGen(TestPeriod_Basics.java:1526)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_11": {
        "Time_11_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t1 = new Thread(() -> getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:317: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t1 = new Thread(() -> getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:316: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t1 = new Thread(() -> getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_11/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_11/src/test/java/org/joda/time/tz/TestBuilder.java:316: error: lambda expressions are not supported in -source 6\n    [javac]     Thread t1 = new Thread(() -> getTestDataTimeZoneBuilder().toDateTimeZone(\"TestDTZ2\", true));\n    [javac]                               ^\n    [javac]   (use -source 8 or higher to enable lambda expressions)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_11_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_11_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Chart_17": {
        "Chart_17_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clone = (TimeSeries) original.clone();\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clone = (TimeSeries) original.clone();\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:777: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         clone = (TimeSeries) original.clone();\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:777: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         clone = (TimeSeries) original.clone();\n    [javac]                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clone = (TimeSeries) original.clone();\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clone = (TimeSeries) original.clone();\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries cloned = (TimeSeries) original.clone();\n    [javac]                                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries cloned = (TimeSeries) original.clone();\n    [javac]                                                        ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clonedSeries = (TimeSeries) series.clone();\n    [javac]                                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clonedSeries = (TimeSeries) series.clone();\n    [javac]                                                            ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clone = (TimeSeries) original.clone();\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clone = (TimeSeries) original.clone();\n    [javac]                                                       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.jfree.data.time.junit.TimeSeriesTests::testCloningEmptyTimeSeriesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.jfree.data.time.junit.TimeSeriesTests::testCloningEmptyTimeSeriesAutoGen\njunit.framework.AssertionFailedError: Cloning an empty TimeSeries should not throw an exception: Requires start <= end.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCloningEmptyTimeSeriesAutoGen(TimeSeriesTests.java:779)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Chart_17_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clonedSeries = (TimeSeries) originalSeries.clone();\n    [javac]                                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clonedSeries = (TimeSeries) originalSeries.clone();\n    [javac]                                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clonedSeries = (TimeSeries) originalSeries.clone();\n    [javac]                                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clonedSeries = (TimeSeries) originalSeries.clone();\n    [javac]                                                                    ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_17_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clonedSeries = (TimeSeries) timeSeries.clone();\n    [javac]                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_17/build\n    [javac] 4 warnings\n    [javac] Compiling 350 source files to /root/libro/data/Defects4J/repos/Chart_17/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_17/tests/org/jfree/data/time/junit/TimeSeriesTests.java:776: error: unreported exception CloneNotSupportedException; must be caught or declared to be thrown\n    [javac]         TimeSeries clonedSeries = (TimeSeries) timeSeries.clone();\n    [javac]                                                                ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_10": {
        "Time_10_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_10_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1,1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         MonthDay january1 = new MonthDay(1, 1);\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         MonthDay january1 = new MonthDay(1, 1);\n    [javac]                                 ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:516: error: cannot find symbol\n    [javac]         MonthDay february29 = new MonthDay(2, 29);\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:516: error: cannot find symbol\n    [javac]         MonthDay february29 = new MonthDay(2, 29);\n    [javac]                                   ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         MonthDay january1 = new MonthDay(1, 1);\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]         MonthDay january1 = new MonthDay(1, 1);\n    [javac]                                 ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:516: error: cannot find symbol\n    [javac]         MonthDay february29 = new MonthDay(2, 29);\n    [javac]         ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:516: error: cannot find symbol\n    [javac]         MonthDay february29 = new MonthDay(2, 29);\n    [javac]                                   ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:425: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestISOChronology.java:426: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestISOChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     MonthDay january1 = new MonthDay(1, 1);\n    [javac]                             ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     MonthDay february29 = new MonthDay(2, 29);\n    [javac]                               ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Time_10_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     final MonthDay january1 = new MonthDay(1, 1);\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     final MonthDay january1 = new MonthDay(1, 1);\n    [javac]                                   ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     final MonthDay february29 = new MonthDay(2, 29);\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     final MonthDay february29 = new MonthDay(2, 29);\n    [javac]                                     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_10/target/test-classes\n    [javac] Picked up JAVA_TOOL_OPTIONS: -Dfile.encoding=UTF8\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     final MonthDay january1 = new MonthDay(1, 1);\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:514: error: cannot find symbol\n    [javac]     final MonthDay january1 = new MonthDay(1, 1);\n    [javac]                                   ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     final MonthDay february29 = new MonthDay(2, 29);\n    [javac]           ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] /root/libro/data/Defects4J/repos/Time_10/src/test/java/org/joda/time/chrono/TestGJChronology.java:515: error: cannot find symbol\n    [javac]     final MonthDay february29 = new MonthDay(2, 29);\n    [javac]                                     ^\n    [javac]   symbol:   class MonthDay\n    [javac]   location: class TestGJChronology\n    [javac] 4 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Chart_16": {
        "Chart_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/chart/renderer/xy/junit/XYAreaRenderer2Tests.java:244: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 4 source files to /root/libro/data/Defects4J/repos/Chart_16/build\n    [javac] 4 warnings\n    [javac] Compiling 353 source files to /root/libro/data/Defects4J/repos/Chart_16/build-tests\n    [javac] /root/libro/data/Defects4J/repos/Chart_16/tests/org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java:329: error: reference to DefaultIntervalCategoryDataset is ambiguous\n    [javac]     DefaultIntervalCategoryDataset dataset = new DefaultIntervalCategoryDataset(null, null);\n    [javac]                                              ^\n    [javac]   both constructor DefaultIntervalCategoryDataset(double[][],double[][]) in DefaultIntervalCategoryDataset and constructor DefaultIntervalCategoryDataset(Number[][],Number[][]) in DefaultIntervalCategoryDataset match\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Chart_16_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_2": {
        "Time_2_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException due to null range duration type.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestLocalDate_Basics.testPartialWithNPEAutoGen(TestLocalDate_Basics.java:1136)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithFailsWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithFailsWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithFailsWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_2_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_40": {
        "Lang_40_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1764: error: cannot find symbol\n    [javac]     assertNotEquals(expectedUpperCase, turkishLocaleUpperCase);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 98 source files to /root/libro/data/Defects4J/repos/Lang_40/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]         newArray = ArrayUtils.addAll(stringArray1, null);\n    [javac]                                                    ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n    [javac]                                                                     ^\n    [javac]   cast to String for a varargs call\n    [javac]   cast to String[] for a non-varargs call and to suppress this warning\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_40/src/test/org/apache/commons/lang/StringUtilsTest.java:1764: error: cannot find symbol\n    [javac]     assertNotEquals(expectedUpperCase, turkishLocaleUpperCase);\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String)\n    [javac]   location: class StringUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_40_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.time.FastDateFormatTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.time.FastDateFormatTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.time.FastDateFormatTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.time.FastDateFormatTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveComparisonAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Lang_40_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.text.StrBuilderTest::testCaseInsensitiveStringHandlingAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_8": {
        "Time_8_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForNegativeOffsetLessThanOneHourAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForNegativeOffsetLessThanOneHourAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException due to invalid offset\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForNegativeOffsetLessThanOneHourAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testNegativeOffsetLessThanOneHourAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testNegativeOffsetLessThanOneHourAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testNegativeOffsetLessThanOneHourAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetLessThanOneHourAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetLessThanOneHourAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than one hour.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetLessThanOneHourAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTimeZone::testDateTimeZoneForNegativeOffsetLessThanOneHourAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTimeZone::testDateTimeZoneForNegativeOffsetLessThanOneHourAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than -1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestDateTimeZone.testDateTimeZoneForNegativeOffsetLessThanOneHourAutoGen(TestDateTimeZone.java:1060)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetLessThanOneHourAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetLessThanOneHourAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than one hour.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetLessThanOneHourAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForNegativeOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForNegativeOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset < 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForNegativeOffsetAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than 1 hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset with less than 1 hour.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testDateTimeZoneForOffsetHoursMinutesNegativeOffsetAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_8_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetLessThanOneHourAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.format.TestDateTimeFormatterBuilder::testNegativeOffsetLessThanOneHourAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException for negative offset less than one hour\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.format.TestDateTimeFormatterBuilder.testNegativeOffsetLessThanOneHourAutoGen(TestDateTimeFormatterBuilder.java:597)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_28": {
        "Lang_28_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<Test [&#128512;]> but was:<Test [\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<Test [&#128512;]> but was:<Test [\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<...ementary character: [&#128512;]> but was:<...ementary character: [\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXmlWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<...ementary character: [&#128512;]> but was:<...ementary character: [\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:432: error: method escapeXml in class StringEscapeUtils cannot be applied to given types;\n    [javac]     StringEscapeUtils.escapeXml(writer, input);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: StringWriter,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:432: error: method escapeXml in class StringEscapeUtils cannot be applied to given types;\n    [javac]     StringEscapeUtils.escapeXml(writer, input);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: StringWriter,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:428: error: cannot find symbol\n    [javac]     StringBuilderWriter writer = new StringBuilderWriter();\n    [javac]     ^\n    [javac]   symbol:   class StringBuilderWriter\n    [javac]   location: class StringEscapeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:428: error: cannot find symbol\n    [javac]     StringBuilderWriter writer = new StringBuilderWriter();\n    [javac]                                      ^\n    [javac]   symbol:   class StringBuilderWriter\n    [javac]   location: class StringEscapeUtilsTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:428: error: cannot find symbol\n    [javac]     StringBuilderWriter writer = new StringBuilderWriter();\n    [javac]     ^\n    [javac]   symbol:   class StringBuilderWriter\n    [javac]   location: class StringEscapeUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:428: error: cannot find symbol\n    [javac]     StringBuilderWriter writer = new StringBuilderWriter();\n    [javac]                                      ^\n    [javac]   symbol:   class StringBuilderWriter\n    [javac]   location: class StringEscapeUtilsTest\n    [javac] 2 errors\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:431: error: method escapeXml in class StringEscapeUtils cannot be applied to given types;\n    [javac]     StringEscapeUtils.escapeXml(writer, input);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: StringWriter,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:431: error: method escapeXml in class StringEscapeUtils cannot be applied to given types;\n    [javac]     StringEscapeUtils.escapeXml(writer, input);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: StringWriter,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<Surrogate pair: [&#128512;]> but was:<Surrogate pair: [\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<Surrogate pair: [&#128512;]> but was:<Surrogate pair: [\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128512;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<[&#128512;]> but was:<[\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 103 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: method escapeXml in class StringEscapeUtils cannot be applied to given types;\n    [javac]     StringEscapeUtils.escapeXml(writer, input);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: StringWriter,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 104 source files to /root/libro/data/Defects4J/repos/Lang_28/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_28/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java:430: error: method escapeXml in class StringEscapeUtils cannot be applied to given types;\n    [javac]     StringEscapeUtils.escapeXml(writer, input);\n    [javac]                      ^\n    [javac]   required: String\n    [javac]   found: StringWriter,String\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_28_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<...ementary character: [&#128512;]> but was:<...ementary character: [\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<...ementary character: [&#128512;]> but was:<...ementary character: [\ud83d\ude00]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_28_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<abc[&#x1D11E;def]> but was:<abc[\ud834\udd1e?de]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringEscapeUtilsTest::testEscapeXMLWithSupplementaryCharactersAutoGen\njunit.framework.ComparisonFailure: expected:<abc[&#x1D11E;def]> but was:<abc[\ud834\udd1e?de]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_13": {
        "Lang_13_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testClonePrimitiveTypeClassThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testClonePrimitiveTypeClassThrowsExceptionAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testClonePrimitiveTypeClassThrowsExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testClonePrimitiveTypeClassThrowsExceptionAutoGen\njunit.framework.AssertionFailedError: Expected ClassNotFoundException due to primitive class cloning issue.\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.SerializationUtilsTest.testClonePrimitiveTypeClassThrowsExceptionAutoGen(SerializationUtilsTest.java:372)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_13_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n6.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen\njunit.framework.AssertionFailedError: SerializationUtils should not throw an exception when cloning primitive classes: ClassNotFoundException while reading cloned object data\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.SerializationUtilsTest.testPrimitiveTypeClassSerializationAutoGen(SerializationUtilsTest.java:374)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_13_n3.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:373: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_13_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.SerializationUtilsTest::testPrimitiveTypeClassSerializationAutoGen\njunit.framework.AssertionFailedError: Expected ClassNotFoundException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.SerializationUtilsTest.testPrimitiveTypeClassSerializationAutoGen(SerializationUtilsTest.java:372)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_13_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_13/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_13/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java:374: error: exception ClassNotFoundException is never thrown in body of corresponding try statement\n    [javac]     } catch (ClassNotFoundException e) {\n    [javac]       ^\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Time_16": {
        "Time_16_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testParseIntoWithNoYearInFormatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testParseIntoWithNoYearInFormatAutoGen\njunit.framework.AssertionFailedError: expected:<2021> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testParseIntoWithNoYearInFormatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testParseIntoWithNoYearInFormatAutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<5>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testParseIntoWithoutYearInFormatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testParseIntoWithoutYearInFormatAutoGen\njunit.framework.AssertionFailedError: expected:<2011> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testParseIntoWithoutYearInFormatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testParseIntoWithoutYearInFormatAutoGen\njunit.framework.AssertionFailedError: expected:<0> but was:<4>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime instant = new MutableDateTime(2019, 3, 1, 0, 0);\n    [javac]                               ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime instant = new MutableDateTime(2019, 3, 1, 0, 0);\n    [javac]                               ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testParseIntoNoYearInFormatAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testParseIntoNoYearInFormatAutoGen\njunit.framework.AssertionFailedError: expected:<2023> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Time_16_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue148AutoGen\njunit.framework.AssertionFailedError: expected:<2023> but was:<2000>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestDateTime_Basics::testIssue148AutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestDateTime_Basics::testIssue148AutoGen\norg.joda.time.IllegalFieldValueException: Cannot parse \"02-29\": Value 29 for dayOfMonth must be in the range [1,28]\n\tat org.joda.time.field.FieldUtils.verifyValueBounds(FieldUtils.java:219)\n\tat org.joda.time.field.PreciseDurationDateTimeField.set(PreciseDurationDateTimeField.java:78)\n\tat org.joda.time.format.DateTimeParserBucket$SavedField.set(DateTimeParserBucket.java:483)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_16_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime result = new MutableDateTime(2023, 3, 1, 0, 0);\n    [javac]                              ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime result = new MutableDateTime(2023, 3, 1, 0, 0);\n    [javac]                              ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n10.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime mutableDateTime = new MutableDateTime(2023, 3, 1, 0, 0);\n    [javac]                                       ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime mutableDateTime = new MutableDateTime(2023, 3, 1, 0, 0);\n    [javac]                                       ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime mutableDateTime = new MutableDateTime(2023, 3, 15, 0, 0);\n    [javac]                                       ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime mutableDateTime = new MutableDateTime(2023, 3, 15, 0, 0);\n    [javac]                                       ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime dateTime = new MutableDateTime(2021, 3, 10, 0, 0); // Non-leap year\n    [javac]                                ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/format/TestDateTimeFormat.java:1181: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime dateTime = new MutableDateTime(2021, 3, 10, 0, 0); // Non-leap year\n    [javac]                                ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "success": false
        },
        "Time_16_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime result = new MutableDateTime(2022, 1, 1, 0, 0);\n    [javac]                              ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 154 source files to /root/libro/data/Defects4J/repos/Time_16/build/tests\n    [javac] /root/libro/data/Defects4J/repos/Time_16/src/test/java/org/joda/time/TestDateTime_Basics.java:1229: error: no suitable constructor found for MutableDateTime(int,int,int,int,int)\n    [javac]     MutableDateTime result = new MutableDateTime(2022, 1, 1, 0, 0);\n    [javac]                              ^\n    [javac]     constructor MutableDateTime.MutableDateTime() is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(long,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(Object,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,DateTimeZone) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac]     constructor MutableDateTime.MutableDateTime(int,int,int,int,int,int,int,Chronology) is not applicable\n    [javac]       (actual and formal argument lists differ in length)\n    [javac] 1 error"
            },
            "success": false
        }
    },
    "Lang_31": {
        "Lang_31_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithUnicodeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithUnicodeAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyForUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyForUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyUnicodeSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyUnicodeSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_31_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithSupplementaryCharactersAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testStringUtilsContainsAnyWithSupplementaryCharactersAutoGen\njunit.framework.AssertionFailedError: expected:<false> but was:<true>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_1": {
        "Time_1_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithFailsWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithFailsWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithFailsWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithFailsWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithFailsWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithFailsWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testPartialWithFailsWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testPartialWithFailsWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestLocalDate_Basics.testPartialWithFailsWithNPEAutoGen(TestLocalDate_Basics.java:1136)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testPartialWithFailsWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testPartialWithFailsWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestLocalDate_Basics.testPartialWithFailsWithNPEAutoGen(TestLocalDate_Basics.java:1136)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestLocalDate_Basics.testPartialWithNPEAutoGen(TestLocalDate_Basics.java:1136)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDate_Basics::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDate_Basics::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestLocalDate_Basics.testPartialWithNPEAutoGen(TestLocalDate_Basics.java:1136)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:460)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:460)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_1_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.chrono.TestISOChronology::testPartialWithNPEAutoGen\njunit.framework.AssertionFailedError: Expected NullPointerException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.chrono.TestISOChronology.testPartialWithNPEAutoGen(TestISOChronology.java:459)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Time_18": {
        "Time_18_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException to be thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyValidJulianDateAutoGen(TestIllegalFieldValueException.java:341)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected an IllegalFieldValueException for dayOfMonth\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyValidJulianDateAutoGen(TestIllegalFieldValueException.java:343)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyValidJulianDateAutoGen(TestIllegalFieldValueException.java:341)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDatesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDatesAutoGen\njunit.framework.AssertionFailedError: Expected an exception for invalid date in GJChronology\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyValidJulianDatesAutoGen(TestIllegalFieldValueException.java:342)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyValidJulianDateAutoGen(TestIllegalFieldValueException.java:343)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyRejectsValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyRejectsValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyRejectsValidJulianDateAutoGen(TestIllegalFieldValueException.java:341)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyValidJulianDateAutoGen(TestIllegalFieldValueException.java:341)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyRejectsValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyRejectsValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyRejectsValidJulianDateAutoGen(TestIllegalFieldValueException.java:341)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException was not thrown\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyValidJulianDateAutoGen(TestIllegalFieldValueException.java:343)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_18_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestIllegalFieldValueException::testGJChronologyValidJulianDateAutoGen\njunit.framework.AssertionFailedError: Expected IllegalFieldValueException for date 1500-02-29\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.joda.time.TestIllegalFieldValueException.testGJChronologyValidJulianDateAutoGen(TestIllegalFieldValueException.java:340)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_38": {
        "Lang_38_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testDateFormatUtilsCalendarTimeZoneIssueAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testDateFormatUtilsCalendarTimeZoneIssueAutoGen(DateUtilsTest.java:1565)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZulu_BugAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZulu_BugAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFormat_CalendarIsoMsZulu_BugAutoGen(DateUtilsTest.java:1566)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormatCalendarIsoMsZuluAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormatCalendarIsoMsZuluAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFormatCalendarIsoMsZuluAutoGen(DateUtilsTest.java:1565)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1570: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n5.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));  //Intentionally using assertNotEquals to capture failure\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));  //Intentionally using assertNotEquals to capture failure\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n9.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"Expected date times to be different due to incorrect field change handling\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"Expected date times to be different due to incorrect field change handling\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n2.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 97 source files to /root/libro/data/Defects4J/repos/Lang_38/target/test-classes\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                              ^\n    [javac]         Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n    [javac]                                                              ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                ^\n    [javac]         assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n    [javac]                                                                               ^\n    [javac]         newArray = ArrayUtils.add(numberArray1, new Float(3));\n    [javac]                                                 ^\n    [javac]         assertTrue(Arrays.equals((new Float[]{new Float(3)}), newArray));\n    [javac]                                               ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}))\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null});\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                                                     ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')}, \n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null, \n    [javac]                                                     ^\n    [javac]                 new Character('0')}, Character.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Character[] {new Character(Character.MIN_VALUE), \n    [javac]                              ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                 ^\n    [javac]                 new Character(Character.MAX_VALUE), new Character('0')},\n    [javac]                                                     ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                 ^\n    [javac]                 new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n    [javac]                                             ^\n    [javac]             ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n    [javac]                                                 ^\n    [javac]                 new Short((short)9999999)}, Short.MAX_VALUE))\n    [javac]                 ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                          ^\n    [javac]             new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n    [javac]                                                      ^\n    [javac]                 new Short((short)9999999)},\n    [javac]                 ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n    [javac]                                                    ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n    [javac]                                                    ^\n    [javac]                  null, new Integer(9999999)}, Integer.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Integer(Integer.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(Integer.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Integer(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)}))\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n    [javac]                                                 ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n    [javac]                                            ^\n    [javac]              ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n    [javac]                                                 ^\n    [javac]                  null, new Long(9999999)}, Long.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Long(Long.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(Long.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Long(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)}))\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n    [javac]                                              ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n    [javac]                                                  ^\n    [javac]                  null, new Float(9999999)}, Float.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Float(Float.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(Float.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Float(9999999)},\n    [javac]                     ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)}))\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n    [javac]                                                  ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                  ^\n    [javac]                  new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n    [javac]                                                ^\n    [javac]              ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n    [javac]                                                   ^\n    [javac]                  null, new Double(9999999)}, Double.MAX_VALUE))\n    [javac]                        ^\n    [javac]                     new Double(Double.MIN_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(Double.MAX_VALUE),\n    [javac]                     ^\n    [javac]                     new Double(9999999)},\n    [javac]                     ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n    [javac]                                                                  ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n    [javac]                                                   ^\n    [javac]         assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n    [javac]                                                    ^\n    [javac]             BooleanUtils.toBoolean(new Integer(8), six, seven);\n    [javac]                                    ^\n    [javac]         Integer six = new Integer(6);\n    [javac]                       ^\n    [javac]         Integer seven = new Integer(7);\n    [javac]                         ^\n    [javac]         Integer eight = new Integer(8);\n    [javac]                         ^\n    [javac]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n    [javac]                                                                 ^\n    [javac]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n    [javac]                                                                  ^\n    [javac]         assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n    [javac]                                                         ^\n    [javac]             BooleanUtils.toBooleanObject(new Integer(9), six, seven, eight);\n    [javac]                                          ^\n    [javac]         assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n    [javac]                      ^\n    [javac] /root/libro/data/Defects4J/repos/Lang_38/src/test/org/apache/commons/lang3/time/DateUtilsTest.java:1565: error: cannot find symbol\n    [javac]     assertNotEquals(\"dateTime\", dateTime, format.format(cal));\n    [javac]     ^\n    [javac]   symbol:   method assertNotEquals(String,String,String)\n    [javac]   location: class DateUtilsTest\n    [javac] 1 error\n    [javac] 100 warnings"
            },
            "success": false
        },
        "Lang_38_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZulu_IssueAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZulu_IssueAutoGen\njunit.framework.ComparisonFailure: expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_38_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZuluFailureAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testFormat_CalendarIsoMsZuluFailureAutoGen\njunit.framework.ComparisonFailure: dateTime expected:<2009-10-16T[16]:42:16.000Z> but was:<2009-10-16T[08]:42:16.000Z>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:261)\n\tat org.apache.commons.lang3.time.DateUtilsTest.testFormat_CalendarIsoMsZuluFailureAutoGen(DateUtilsTest.java:1565)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Lang_11": {
        "Lang_11_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testRandomStringUtilsThrowsConfusingIAEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testRandomStringUtilsThrowsConfusingIAEAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException to be thrown.\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringUtilsTest.testRandomStringUtilsThrowsConfusingIAEAutoGen(StringUtilsTest.java:2121)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.StringUtilsTest::testRandomStringUtilsThrowsConfusingIAEAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.StringUtilsTest::testRandomStringUtilsThrowsConfusingIAEAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException to be thrown.\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.StringUtilsTest.testRandomStringUtilsThrowsConfusingIAEAutoGen(StringUtilsTest.java:2121)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_11_n8.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 10, 5); // end <= start\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: no suitable method found for random(int,int,int)\n    [javac]         RandomStringUtils.random(5, 10, 5); // end <= start\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; int cannot be converted to boolean)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; possible lossy conversion from int to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsWithInvalidRangeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsWithInvalidRangeAutoGen\njunit.framework.ComparisonFailure: expected:<[end index must be greater than start index]> but was:<[bound must be positive]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsWithInvalidRangeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsWithInvalidRangeAutoGen\njunit.framework.ComparisonFailure: expected:<[end index must be greater than start index]> but was:<[Parameter end (5) must be greater than start (5)]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_11_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsEndLessThanOrEqualToStartAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsEndLessThanOrEqualToStartAutoGen\njunit.framework.ComparisonFailure: expected:<[end must be greater than start to generate a random string]> but was:<[bound must be positive]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsEndLessThanOrEqualToStartAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsEndLessThanOrEqualToStartAutoGen\njunit.framework.ComparisonFailure: expected:<[end must be greater than start to generate a random string]> but was:<[Parameter end (5) must be greater than start (5)]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_11_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testRandomStringUtils_ThrowsException_WhenEndLessThanOrEqualToStartAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testRandomStringUtils_ThrowsException_WhenEndLessThanOrEqualToStartAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.ArrayUtilsTest::testRandomStringUtils_ThrowsException_WhenEndLessThanOrEqualToStartAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.ArrayUtilsTest::testRandomStringUtils_ThrowsException_WhenEndLessThanOrEqualToStartAutoGen\njunit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_11_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsWithNonPositiveRangeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsWithNonPositiveRangeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsWithNonPositiveRangeAutoGen(RandomStringUtilsTest.java:339)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsWithNonPositiveRangeAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.RandomStringUtilsTest::testRandomStringUtilsWithNonPositiveRangeAutoGen\njunit.framework.AssertionFailedError: Expected IllegalArgumentException\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.TestCase.fail(TestCase.java:227)\n\tat org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtilsWithNonPositiveRangeAutoGen(RandomStringUtilsTest.java:339)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_11_n4.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: no suitable method found for random(int,boolean,boolean,int,int)\n    [javac]         RandomStringUtils.random(5, true, true, 10, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; boolean cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (argument mismatch; boolean cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; boolean cannot be converted to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java:1597: error: no suitable method found for random(int,boolean,boolean,int,int)\n    [javac]         RandomStringUtils.random(5, true, true, 10, 5);\n    [javac]                          ^\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean) is not applicable\n    [javac]       (argument mismatch; boolean cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,int,int,boolean,boolean,char...) is not applicable\n    [javac]       (argument mismatch; boolean cannot be converted to int)\n    [javac]     method RandomStringUtils.random(int,char...) is not applicable\n    [javac]       (varargs mismatch; boolean cannot be converted to char)\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n1.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: method randomAlphabetic in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphabetic(5, 5);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ValidateTest.java:901: error: method randomAlphabetic in class RandomStringUtils cannot be applied to given types;\n    [javac]         RandomStringUtils.randomAlphabetic(5, 5);\n    [javac]                          ^\n    [javac]   required: int\n    [javac]   found: int,int\n    [javac]   reason: actual and formal argument lists differ in length\n    [javac] 1 error\n    [javac] 4 warnings"
            },
            "success": false
        },
        "Lang_11_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsIllegalArgumentExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsIllegalArgumentExceptionAutoGen\njunit.framework.ComparisonFailure: expected:<[end must be greater than start]> but was:<[bound must be positive]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsIllegalArgumentExceptionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.time.DateUtilsTest::testRandomStringUtilsIllegalArgumentExceptionAutoGen\njunit.framework.ComparisonFailure: expected:<[end must be greater than start]> but was:<[Parameter end (5) must be greater than start (10)]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_11_n7.txt": {
            "buggy": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2924: error: cannot find symbol\n    [javac]         RandomUtils.nextInt(10, 10); // This should throw an IllegalArgumentException\n    [javac]         ^\n    [javac]   symbol:   variable RandomUtils\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2931: error: cannot find symbol\n    [javac]         RandomUtils.nextInt(10, 5); // This should throw an IllegalArgumentException\n    [javac]         ^\n    [javac]   symbol:   variable RandomUtils\n    [javac]   location: class ArrayUtilsTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "fixed": {
                "compile_error": true,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": "    [javac] Compiling 126 source files to /root/libro/data/Defects4J/repos/Lang_11/target/tests\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2924: error: cannot find symbol\n    [javac]         RandomUtils.nextInt(10, 10); // This should throw an IllegalArgumentException\n    [javac]         ^\n    [javac]   symbol:   variable RandomUtils\n    [javac]   location: class ArrayUtilsTest\n    [javac] /root/libro/data/Defects4J/repos/Lang_11/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java:2931: error: cannot find symbol\n    [javac]         RandomUtils.nextInt(10, 5); // This should throw an IllegalArgumentException\n    [javac]         ^\n    [javac]   symbol:   variable RandomUtils\n    [javac]   location: class ArrayUtilsTest\n    [javac] 2 errors\n    [javac] 4 warnings"
            },
            "success": false
        }
    },
    "Lang_41": {
        "Lang_41_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameForArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameForArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[[]]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_41_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[]> but was:<String[;]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testGetShortClassNameWithArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Lang_41_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang.ClassUtilsTest::testClassUtilsGetShortClassNameArrayAutoGen\njunit.framework.ComparisonFailure: expected:<String[;]> but was:<String[[]]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        }
    },
    "Lang_7": {
        "Lang_7_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleMinusAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleMinusAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for input with leading '--'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithLeadingDoubleMinusAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithLeadingDashesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithLeadingDashesAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for input with leading '--'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberWithLeadingDashesAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithLeadingDoubleHyphenAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testNumberUtilsCreateNumberWithLeadingDoubleHyphenAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for input with leading '--'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testNumberUtilsCreateNumberWithLeadingDoubleHyphenAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDashesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDashesAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithLeadingDashesAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleMinusAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleMinusAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException to be thrown\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithLeadingDoubleMinusAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleHyphenAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleHyphenAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for input '--123'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithLeadingDoubleHyphenAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberLeadingDoubleDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberLeadingDoubleDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException for input '--123'\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberLeadingDoubleDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDashesAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDashesAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException, but got: null\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithLeadingDashesAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleHyphenAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleHyphenAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithLeadingDoubleHyphenAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        },
        "Lang_7_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleDashAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumberWithLeadingDoubleDashAutoGen\njunit.framework.AssertionFailedError: Expected NumberFormatException\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.apache.commons.lang3.math.NumberUtilsTest.testCreateNumberWithLeadingDoubleDashAutoGen(NumberUtilsTest.java:1289)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    },
    "Time_4": {
        "Time_4_n6.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialsAutoGen\njava.lang.ClassCastException: ReadablePartial objects must have matching field types\n\tat org.joda.time.base.AbstractPartial.compareTo(AbstractPartial.java:319)\n\tat org.joda.time.base.AbstractPartial.isEqual(AbstractPartial.java:397)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialsAutoGen(TestLocalDateTime_Basics.java:1097)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialsAutoGen\njava.lang.IllegalArgumentException: Types array must not contain duplicate: hourOfDay\n\tat org.joda.time.Partial.<init>(Partial.java:238)\n\tat org.joda.time.Partial.with(Partial.java:464)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialsAutoGen(TestLocalDateTime_Basics.java:1093)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n1.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njava.lang.ClassCastException: ReadablePartial objects must have matching field types\n\tat org.joda.time.base.AbstractPartial.compareTo(AbstractPartial.java:319)\n\tat org.joda.time.base.AbstractPartial.isEqual(AbstractPartial.java:397)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialConstructionAutoGen(TestLocalDateTime_Basics.java:1098)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njava.lang.IllegalArgumentException: Types array must not contain duplicate: hourOfDay\n\tat org.joda.time.Partial.<init>(Partial.java:238)\n\tat org.joda.time.Partial.with(Partial.java:464)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialConstructionAutoGen(TestLocalDateTime_Basics.java:1095)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n3.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njava.lang.ClassCastException: ReadablePartial objects must have matching field types\n\tat org.joda.time.base.AbstractPartial.compareTo(AbstractPartial.java:319)\n\tat org.joda.time.base.AbstractPartial.isEqual(AbstractPartial.java:397)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialConstructionAutoGen(TestLocalDateTime_Basics.java:1096)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njava.lang.IllegalArgumentException: Types array must not contain duplicate: hourOfDay\n\tat org.joda.time.Partial.<init>(Partial.java:238)\n\tat org.joda.time.Partial.with(Partial.java:464)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialConstructionAutoGen(TestLocalDateTime_Basics.java:1093)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n4.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen\njava.lang.ClassCastException: ReadablePartial objects must have matching field types\n\tat org.joda.time.base.AbstractPartial.compareTo(AbstractPartial.java:319)\n\tat org.joda.time.base.AbstractPartial.isEqual(AbstractPartial.java:397)\n\tat org.joda.time.TestLocalDateTime_Basics.testConstructingInvalidPartialsAutoGen(TestLocalDateTime_Basics.java:1097)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen\njava.lang.IllegalArgumentException: Types array must not contain duplicate: hourOfDay\n\tat org.joda.time.Partial.<init>(Partial.java:238)\n\tat org.joda.time.Partial.with(Partial.java:464)\n\tat org.joda.time.TestLocalDateTime_Basics.testConstructingInvalidPartialsAutoGen(TestLocalDateTime_Basics.java:1093)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n2.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n7.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njava.lang.ClassCastException: ReadablePartial objects must have matching field types\n\tat org.joda.time.base.AbstractPartial.compareTo(AbstractPartial.java:319)\n\tat org.joda.time.base.AbstractPartial.isEqual(AbstractPartial.java:397)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialConstructionAutoGen(TestLocalDateTime_Basics.java:1097)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njava.lang.IllegalArgumentException: Types array must not contain duplicate: hourOfDay\n\tat org.joda.time.Partial.<init>(Partial.java:238)\n\tat org.joda.time.Partial.with(Partial.java:464)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialConstructionAutoGen(TestLocalDateTime_Basics.java:1093)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n10.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njunit.framework.ComparisonFailure: expected:<...ot contain duplicate[]> but was:<...ot contain duplicate[: hourOfDay]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njunit.framework.ComparisonFailure: expected:<...ot contain duplicate[]> but was:<...ot contain duplicate[: hourOfDay]>\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n9.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njava.lang.ClassCastException: ReadablePartial objects must have matching field types\n\tat org.joda.time.base.AbstractPartial.compareTo(AbstractPartial.java:319)\n\tat org.joda.time.base.AbstractPartial.isEqual(AbstractPartial.java:397)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialConstructionAutoGen(TestLocalDateTime_Basics.java:1097)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testInvalidPartialConstructionAutoGen\njava.lang.IllegalArgumentException: Types array must not contain duplicate: hourOfDay\n\tat org.joda.time.Partial.<init>(Partial.java:238)\n\tat org.joda.time.Partial.with(Partial.java:464)\n\tat org.joda.time.TestLocalDateTime_Basics.testInvalidPartialConstructionAutoGen(TestLocalDateTime_Basics.java:1093)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n5.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen\njava.lang.ClassCastException: ReadablePartial objects must have matching field types\n\tat org.joda.time.base.AbstractPartial.compareTo(AbstractPartial.java:319)\n\tat org.joda.time.base.AbstractPartial.isEqual(AbstractPartial.java:397)\n\tat org.joda.time.TestLocalDateTime_Basics.testConstructingInvalidPartialsAutoGen(TestLocalDateTime_Basics.java:1099)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen\njava.lang.IllegalArgumentException: Types array must not contain duplicate: hourOfDay\n\tat org.joda.time.Partial.<init>(Partial.java:238)\n\tat org.joda.time.Partial.with(Partial.java:464)\n\tat org.joda.time.TestLocalDateTime_Basics.testConstructingInvalidPartialsAutoGen(TestLocalDateTime_Basics.java:1094)\n",
                "compile_msg": null
            },
            "success": false
        },
        "Time_4_n8.txt": {
            "buggy": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [
                    "org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen"
                ],
                "autogen_failed": true,
                "fib_error_msg": "--- org.joda.time.TestLocalDateTime_Basics::testConstructingInvalidPartialsAutoGen\njava.lang.ClassCastException: ReadablePartial objects must have matching field types\n\tat org.joda.time.base.AbstractPartial.compareTo(AbstractPartial.java:319)\n\tat org.joda.time.base.AbstractPartial.isEqual(AbstractPartial.java:397)\n\tat org.joda.time.TestLocalDateTime_Basics.testConstructingInvalidPartialsAutoGen(TestLocalDateTime_Basics.java:1095)\n",
                "compile_msg": null
            },
            "fixed": {
                "compile_error": false,
                "runtime_error": false,
                "failed_tests": [],
                "autogen_failed": false,
                "fib_error_msg": null,
                "compile_msg": null
            },
            "success": true
        }
    }
}